{
  int count=offset;
  Connection con=null;
  PreparedStatement ps=null;
  ResultSet rs=null;
  final JDBCEntityBridge entityBridge=(JDBCEntityBridge)selectManager.getEntityBridge();
  boolean throwRuntimeExceptions=entityBridge.getMetaData().getThrowRuntimeExceptions();
  if (throwRuntimeExceptions) {
    try {
      con=entityBridge.getDataSource().getConnection();
    }
 catch (    SQLException sqle) {
      javax.ejb.EJBException ejbe=new javax.ejb.EJBException("Could not get a connection; " + sqle);
      ejbe.initCause(sqle);
      throw ejbe;
    }
  }
  try {
    if (log.isDebugEnabled()) {
      log.debug("Executing SQL: " + sql);
      if (limit != 0 || offset != 0) {
        log.debug("Query offset=" + offset + ", limit="+ limit);
      }
    }
    if (!throwRuntimeExceptions) {
      con=entityBridge.getDataSource().getConnection();
    }
    ps=con.prepareStatement(sql);
    if (entityBridge.getFetchSize() > 0) {
      ps.setFetchSize(entityBridge.getFetchSize());
    }
    for (int i=0; i < parameters.size(); i++) {
      QueryParameter parameter=(QueryParameter)parameters.get(i);
      parameter.set(log,ps,i + 1,args);
    }
    rs=ps.executeQuery();
    while (count > 0 && rs.next()) {
      count--;
    }
    count=limit;
  }
 catch (  Exception e) {
    JDBCUtil.safeClose(rs);
    JDBCUtil.safeClose(ps);
    JDBCUtil.safeClose(con);
    log.error("Find failed",e);
    FinderException fe=new FinderException("Find failed: " + e);
    fe.initCause(e);
    throw fe;
  }
  return collectionFactory.createCollection(con,ps,rs,limit,count,selectEntity,selectField,selectFunction,selectManager,onFindCMRList,factory,eagerLoadMask);
}
