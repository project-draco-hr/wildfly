{
  try {
    List results=new ArrayList();
    if (selectEntity != null) {
      ReadAheadCache selectReadAheadCache=selectManager.getReadAheadCache();
      List ids=new ArrayList();
      boolean loadOnFindCmr=!onFindCMRList.isEmpty();
      Object[] ref=new Object[1];
      Object prevPk=null;
      while ((limit == 0 || count-- > 0) && rs.next()) {
        int index=1;
        index=selectEntity.loadPrimaryKeyResults(rs,index,ref);
        Object pk=ref[0];
        boolean addPk=(loadOnFindCmr ? !pk.equals(prevPk) : true);
        if (addPk) {
          ids.add(pk);
          results.add(pk != null ? factory.getEntityObject(pk) : null);
          prevPk=pk;
        }
        if (eagerLoadMask != null) {
          JDBCFieldBridge[] tableFields=selectEntity.getTableFields();
          for (int i=0; i < eagerLoadMask.length; i++) {
            if (eagerLoadMask[i]) {
              JDBCFieldBridge field=tableFields[i];
              ref[0]=null;
              index=field.loadArgumentResults(rs,index,ref);
              if (addPk) {
                selectReadAheadCache.addPreloadData(pk,field,ref[0]);
              }
            }
          }
          if (!onFindCMRList.isEmpty()) {
            index=loadOnFindCMRFields(pk,onFindCMRList,rs,index,log);
          }
        }
      }
      selectReadAheadCache.addFinderResults(ids,queryMetaData.getReadAhead());
    }
 else     if (selectField != null) {
      Object[] valueRef=new Object[1];
      while ((limit == 0 || count-- > 0) && rs.next()) {
        valueRef[0]=null;
        selectField.loadArgumentResults(rs,1,valueRef);
        results.add(valueRef[0]);
      }
    }
 else {
      while (rs.next()) {
        results.add(selectFunction.readResult(rs));
      }
    }
    if (log.isDebugEnabled() && limit != 0 && count == 0) {
      log.debug("Query result was limited to " + limit + " row(s)");
    }
    return results;
  }
 catch (  Exception e) {
    throw MESSAGES.findFailed(e);
  }
 finally {
    JDBCUtil.safeClose(rs);
    JDBCUtil.safeClose(ps);
    JDBCUtil.safeClose(con);
  }
}
