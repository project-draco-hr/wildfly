{
  String protocol=DEFAULT_PROTOCOL;
  String host=null;
  int port=-1;
  String parsing;
  final int protocolEnd=controller.lastIndexOf("://");
  if (protocolEnd == -1) {
    parsing=controller;
  }
 else {
    parsing=controller.substring(protocolEnd + 3);
    protocol=controller.substring(0,protocolEnd);
  }
  String portStr=null;
  int colonIndex=parsing.lastIndexOf(':');
  if (colonIndex < 0) {
    host=parsing;
  }
 else   if (colonIndex == 0) {
    portStr=parsing.substring(1).trim();
  }
 else {
    final boolean hasPort;
    int closeBracket=parsing.lastIndexOf(']');
    if (closeBracket != -1) {
      if (closeBracket > colonIndex) {
        hasPort=false;
      }
 else {
        hasPort=true;
      }
    }
 else {
      hasPort=true;
    }
    if (hasPort) {
      host=parsing.substring(0,colonIndex).trim();
      portStr=parsing.substring(colonIndex + 1).trim();
    }
 else {
      host=parsing;
    }
  }
  if (portStr != null) {
    try {
      port=Integer.parseInt(portStr);
    }
 catch (    NumberFormatException e) {
      throw new CommandFormatException("The port must be a valid non-negative integer: '" + parsing + "'");
    }
    if (port < 0) {
      throw new CommandFormatException("The port must be a valid non-negative integer: '" + parsing + "'");
    }
  }
  return new ControllerAddress(protocol,host,port);
}
