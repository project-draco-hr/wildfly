{
  view.getConfigurators().add(new ViewConfigurator(){
    @Override public void configure(    final DeploymentPhaseContext context,    final ComponentConfiguration componentConfiguration,    ViewDescription description,    ViewConfiguration viewConfiguration) throws DeploymentUnitProcessingException {
      final InterceptorFactory sessionIdGeneratingInterceptorFactory=StatefulComponentSessionIdGeneratingInterceptorFactory.INSTANCE;
      viewConfiguration.addClientPostConstructInterceptor(sessionIdGeneratingInterceptorFactory,InterceptorOrder.ClientPostConstruct.INSTANCE_CREATE);
      for (      Method method : viewConfiguration.getProxyFactory().getCachedMethods()) {
        if ((method.getName().equals("hashCode") && method.getParameterTypes().length == 0) || method.getName().equals("equals") && method.getParameterTypes().length == 1 && method.getParameterTypes()[0] == Object.class) {
          viewConfiguration.addClientInterceptor(method,StatefulIdentityInterceptorFactory.INSTANCE,InterceptorOrder.Client.EJB_EQUALS_HASHCODE);
        }
      }
    }
  }
);
  view.getConfigurators().add(new ViewConfigurator(){
    @Override public void configure(    DeploymentPhaseContext context,    ComponentConfiguration componentConfiguration,    ViewDescription description,    ViewConfiguration configuration) throws DeploymentUnitProcessingException {
      configuration.addClientInterceptor(StatefulComponentIdInterceptor.Factory.INSTANCE,InterceptorOrder.Client.ASSOCIATING_INTERCEPTOR);
      configuration.addViewInterceptor(StatefulComponentInstanceInterceptor.Factory.INSTANCE,InterceptorOrder.View.ASSOCIATING_INTERCEPTOR);
    }
  }
);
}
