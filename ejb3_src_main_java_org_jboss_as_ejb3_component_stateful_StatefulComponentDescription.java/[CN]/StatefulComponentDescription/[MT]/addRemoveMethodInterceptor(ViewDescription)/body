{
  view.getConfigurators().add(new ViewConfigurator(){
    @Override public void configure(    DeploymentPhaseContext context,    ComponentConfiguration componentConfiguration,    ViewDescription description,    ViewConfiguration configuration) throws DeploymentUnitProcessingException {
      final StatefulComponentDescription statefulComponentDescription=(StatefulComponentDescription)componentConfiguration.getComponentDescription();
      final Set<StatefulRemoveMethod> removeMethods=statefulComponentDescription.getRemoveMethods();
      if (removeMethods.isEmpty()) {
        return;
      }
      for (      final Method viewMethod : configuration.getProxyFactory().getCachedMethods()) {
        final MethodIdentifier viewMethodIdentifier=MethodIdentifier.getIdentifierForMethod(viewMethod);
        for (        final StatefulRemoveMethod removeMethod : removeMethods) {
          if (removeMethod.methodIdentifier.equals(viewMethodIdentifier)) {
            final boolean object=EJBObject.class.isAssignableFrom(configuration.getViewClass()) || EJBLocalObject.class.isAssignableFrom(configuration.getViewClass());
            if (!object || !viewMethodIdentifier.getName().equals("remove") || viewMethodIdentifier.getParameterTypes().length != 0) {
              configuration.addViewInterceptor(viewMethod,new ImmediateInterceptorFactory(new StatefulRemoveInterceptor(removeMethod.retainIfException)),InterceptorOrder.View.SESSION_REMOVE_INTERCEPTOR);
            }
            break;
          }
        }
      }
    }
  }
);
}
