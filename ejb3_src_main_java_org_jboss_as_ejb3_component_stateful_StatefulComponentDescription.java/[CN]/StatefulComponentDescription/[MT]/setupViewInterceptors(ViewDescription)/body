{
  super.setupViewInterceptors(view);
  view.getConfigurators().addFirst(new ViewConfigurator(){
    @Override public void configure(    DeploymentPhaseContext context,    ComponentConfiguration componentConfiguration,    ViewDescription description,    ViewConfiguration configuration) throws DeploymentUnitProcessingException {
      configuration.addViewInterceptor(new ImmediateInterceptorFactory(new ComponentInstanceInterceptor()));
    }
  }
);
  if (TransactionManagementType.CONTAINER.equals(this.getTransactionManagementType())) {
    view.getConfigurators().add(new ViewConfigurator(){
      @Override public void configure(      DeploymentPhaseContext context,      ComponentConfiguration componentConfiguration,      ViewDescription description,      ViewConfiguration configuration) throws DeploymentUnitProcessingException {
        logger.warn("Interceptors at ComponentInstance level aren't supported yet - SessionSynchronization semantics for Stateful beans with CMT won't work!");
      }
    }
);
  }
 else {
    view.getConfigurators().add(new ViewConfigurator(){
      @Override public void configure(      DeploymentPhaseContext context,      ComponentConfiguration componentConfiguration,      ViewDescription description,      ViewConfiguration configuration) throws DeploymentUnitProcessingException {
        final ComponentInterceptorFactory bmtComponentInterceptorFactory=new ComponentInterceptorFactory(){
          @Override protected Interceptor create(          Component component,          InterceptorFactoryContext context){
            if (component instanceof StatefulComponentDescription == false) {
              throw new IllegalArgumentException("Component " + component + " with component class: "+ component.getComponentClass()+ " isn't a stateful component");
            }
            return new StatefulBMTInterceptor((StatefulSessionComponent)component);
          }
        }
;
        configuration.addViewInterceptor(bmtComponentInterceptorFactory);
      }
    }
);
  }
}
