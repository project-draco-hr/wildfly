{
  final ComponentConfiguration statefulComponentConfiguration=new ComponentConfiguration(this,classIndex,moduleClassLoader,moduleLoader);
  statefulComponentConfiguration.setComponentCreateServiceFactory(new StatefulComponentCreateServiceFactory());
  if (getTransactionManagementType() == TransactionManagementType.BEAN) {
    getConfigurators().add(new ComponentConfigurator(){
      @Override public void configure(      final DeploymentPhaseContext context,      final ComponentDescription description,      final ComponentConfiguration configuration) throws DeploymentUnitProcessingException {
        final ComponentInstanceInterceptorFactory bmtComponentInterceptorFactory=new ComponentInstanceInterceptorFactory(){
          @Override protected Interceptor create(          Component component,          InterceptorFactoryContext context){
            if (!(component instanceof StatefulSessionComponent)) {
              throw MESSAGES.componentNotInstanceOfSessionComponent(component,component.getComponentClass(),"stateful");
            }
            return new StatefulBMTInterceptor((StatefulSessionComponent)component);
          }
        }
;
        configuration.addComponentInterceptor(bmtComponentInterceptorFactory,InterceptorOrder.Component.BMT_TRANSACTION_INTERCEPTOR,false);
      }
    }
);
  }
 else {
    getConfigurators().add(new ComponentConfigurator(){
      @Override public void configure(      final DeploymentPhaseContext context,      final ComponentDescription description,      final ComponentConfiguration configuration) throws DeploymentUnitProcessingException {
        final EEApplicationClasses applicationClasses=context.getDeploymentUnit().getAttachment(Attachments.EE_APPLICATION_CLASSES_DESCRIPTION);
        InterceptorClassDescription interceptorConfig=ComponentDescription.mergeInterceptorConfig(configuration.getComponentClass(),applicationClasses.getClassByName(description.getComponentClassName()),description,MetadataCompleteMarker.isMetadataComplete(context.getDeploymentUnit()));
        configuration.addPostConstructInterceptor(new LifecycleCMTTxInterceptor.Factory(interceptorConfig.getPostConstruct(),false),InterceptorOrder.ComponentPostConstruct.TRANSACTION_INTERCEPTOR);
        configuration.addPreDestroyInterceptor(new LifecycleCMTTxInterceptor.Factory(interceptorConfig.getPreDestroy(),false),InterceptorOrder.ComponentPreDestroy.TRANSACTION_INTERCEPTOR);
        if (description.isPassivationApplicable()) {
          configuration.addPrePassivateInterceptor(new LifecycleCMTTxInterceptor.Factory(interceptorConfig.getPrePassivate(),false),InterceptorOrder.ComponentPassivation.TRANSACTION_INTERCEPTOR);
          configuration.addPostActivateInterceptor(new LifecycleCMTTxInterceptor.Factory(interceptorConfig.getPostActivate(),false),InterceptorOrder.ComponentPassivation.TRANSACTION_INTERCEPTOR);
        }
      }
    }
);
  }
  addStatefulSessionSynchronizationInterceptor();
  return statefulComponentConfiguration;
}
