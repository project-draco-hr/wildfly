{
  EjbJarMetaData ejbJarMetaData=enterpriseBean.getEjbJarMetaData();
  String ejbName=enterpriseBean.getEjbName();
  InterceptorsMetaData applicableInterceptors=EjbJarMetaData.getInterceptors(ejbName,ejbJarMetaData);
  if (applicableInterceptors != null) {
    for (    InterceptorMetaData interceptor : applicableInterceptors) {
      String interceptorClassName=interceptor.getInterceptorClass();
      InterceptorDescription interceptorDescription=ejbComponentDescription.getClassInterceptor(interceptorClassName);
      if (interceptorDescription == null) {
        interceptorDescription=new InterceptorDescription(interceptorClassName);
        ejbComponentDescription.addClassInterceptor(interceptorDescription);
      }
      EEModuleClassDescription interceptorModuleClassDescription=ejbComponentDescription.getModuleDescription().getOrAddClassByName(interceptorClassName);
      AroundInvokesMetaData aroundInvokes=interceptor.getAroundInvokes();
      if (aroundInvokes != null) {
        for (        AroundInvokeMetaData aroundInvoke : aroundInvokes) {
          String methodName=aroundInvoke.getMethodName();
          MethodIdentifier methodIdentifier=MethodIdentifier.getIdentifier(Object.class,methodName,new Class<?>[]{InvocationContext.class});
          interceptorModuleClassDescription.setAroundInvokeMethod(methodIdentifier);
        }
      }
      LifecycleCallbacksMetaData postConstructs=interceptor.getPostConstructs();
      if (postConstructs != null) {
        for (        LifecycleCallbackMetaData postConstruct : postConstructs) {
          String methodName=postConstruct.getMethodName();
          MethodIdentifier methodIdentifier=MethodIdentifier.getIdentifier(Void.TYPE,methodName,new Class<?>[]{InvocationContext.class});
          interceptorModuleClassDescription.setPostConstructMethod(methodIdentifier);
        }
      }
      LifecycleCallbacksMetaData preDestroys=interceptor.getPreDestroys();
      if (preDestroys != null) {
        for (        LifecycleCallbackMetaData preDestroy : preDestroys) {
          String methodName=preDestroy.getMethodName();
          MethodIdentifier methodIdentifier=MethodIdentifier.getIdentifier(Void.TYPE,methodName,new Class<?>[]{InvocationContext.class});
          interceptorModuleClassDescription.setPreDestroyMethod(methodIdentifier);
        }
      }
    }
  }
}
