{
  final ClassLoader tccl=SecurityActions.getContextClassLoader();
  try {
    SecurityActions.setContextClassLoader(classLoader);
    this.beanManager=beanManager;
    this.ejbName=ejbName;
    this.interceptionType=interceptionType;
    EjbDescriptor<Object> descriptor=beanManager.getEjbDescriptor(this.ejbName);
    SessionBean<Object> bean=beanManager.getBean(descriptor);
    final AtomicReference<ManagedReference> reference=(AtomicReference<ManagedReference>)context.getContextData().get(SerializedCdiInterceptorsKey.class);
    if (reference == null) {
      creationalContext=beanManager.createCreationalContext(bean);
      interceptorInstances=new HashMap<String,SerializableContextualInstance<Interceptor<Object>,Object>>();
      InterceptorBindings interceptorBindings=getInterceptorBindings(this.ejbName);
      if (interceptorBindings != null) {
        for (        Interceptor<?> interceptor : interceptorBindings.getAllInterceptors()) {
          addInterceptorInstance((Interceptor<Object>)interceptor,beanManager,interceptorInstances);
        }
      }
      WeldInterceptorInstances instances=new WeldInterceptorInstances(creationalContext,interceptorInstances);
      context.getContextData().put(SerializedCdiInterceptorsKey.class,new AtomicReference<ManagedReference>(new ValueManagedReference(new ImmediateValue<Object>(instances))));
    }
 else {
      final WeldInterceptorInstances instances=(WeldInterceptorInstances)reference.get().getInstance();
      creationalContext=instances.getCreationalContext();
      interceptorInstances=instances.getInterceptorInstances();
    }
  }
  finally {
    SecurityActions.setContextClassLoader(tccl);
  }
}
