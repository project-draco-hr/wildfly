{
  context.addStep(new AbstractDeploymentChainStep(){
    public void execute(    DeploymentProcessorTarget processorTarget){
      processorTarget.addDeploymentProcessor(BatchSubsystemDefinition.NAME,Phase.DEPENDENCIES,Phase.DEPENDENCIES_BATCH,new BatchDependencyProcessor());
    }
  }
,OperationContext.Stage.RUNTIME);
  context.addStep(new AbstractDeploymentChainStep(){
    public void execute(    DeploymentProcessorTarget processorTarget){
      processorTarget.addDeploymentProcessor(BatchSubsystemDefinition.NAME,Phase.POST_MODULE,Phase.POST_MODULE_BATCH_ENVIRONMENT,new BatchEnvironmentProcessor());
    }
  }
,OperationContext.Stage.RUNTIME);
  final String jobRepositoryType=BatchSubsystemDefinition.JOB_REPOSITORY.resolveModelAttribute(context,model).asString();
  final BatchPropertiesService service=new BatchPropertiesService();
  if (BatchSubsystemDefinition.IN_MEMORY.equals(jobRepositoryType)) {
    service.addProperty("job-repository-type",jobRepositoryType);
  }
 else {
    service.addProperty("job-repository-type","jdbc");
    service.addProperty("datasource-jndi",jobRepositoryType);
  }
  final ServiceTarget serviceTarget=context.getServiceTarget();
  final ServiceBuilder<Properties> builder=serviceTarget.addService(BatchServiceNames.BATCH_SERVICE_NAME,service);
  newControllers.add(builder.install());
}
