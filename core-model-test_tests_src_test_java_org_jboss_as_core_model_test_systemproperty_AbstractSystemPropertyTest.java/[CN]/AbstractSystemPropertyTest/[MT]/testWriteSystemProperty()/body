{
  KernelServices kernelServices=createEmptyRoot();
  ModelNode props=readSystemPropertiesParentModel(kernelServices);
  Assert.assertFalse(props.isDefined());
  ModelNode add=Util.createAddOperation(getSystemPropertyAddress(PROP_ONE));
  add.get(VALUE).set("one");
  ModelTestUtils.checkOutcome(kernelServices.executeOperation(add));
  add=Util.createAddOperation(getSystemPropertyAddress(PROP_TWO));
  add.get(VALUE).set("two");
  ModelTestUtils.checkOutcome(kernelServices.executeOperation(add));
  ModelNode write=Util.createOperation(WRITE_ATTRIBUTE_OPERATION,getSystemPropertyAddress(PROP_TWO));
  write.get(NAME).set(VALUE);
  write.get(VALUE).set("dos");
  ModelTestUtils.checkOutcome(kernelServices.executeOperation(write));
  props=readSystemPropertiesParentModel(kernelServices);
  Assert.assertEquals(2,props.keys().size());
  Assert.assertEquals("one",props.get(PROP_ONE,VALUE).asString());
  Assert.assertEquals("dos",props.get(PROP_TWO,VALUE).asString());
  if (!standalone) {
    Assert.assertTrue(props.get(PROP_ONE,BOOT_TIME).asBoolean());
    Assert.assertTrue(props.get(PROP_TWO,BOOT_TIME).asBoolean());
    Assert.assertNull(System.getProperty(PROP_ONE));
    Assert.assertNull(System.getProperty(PROP_TWO));
  }
 else {
    Assert.assertEquals("one",System.getProperty(PROP_ONE));
    Assert.assertEquals("dos",System.getProperty(PROP_TWO));
  }
  if (!standalone) {
    write=Util.createOperation(WRITE_ATTRIBUTE_OPERATION,getSystemPropertyAddress(PROP_TWO));
    write.get(NAME).set(BOOT_TIME);
    write.get(VALUE).set(false);
    ModelTestUtils.checkOutcome(kernelServices.executeOperation(write));
  }
  props=readSystemPropertiesParentModel(kernelServices);
  Assert.assertEquals(2,props.keys().size());
  Assert.assertEquals("one",props.get(PROP_ONE,VALUE).asString());
  Assert.assertEquals("dos",props.get(PROP_TWO,VALUE).asString());
  if (!standalone) {
    Assert.assertTrue(props.get(PROP_ONE,BOOT_TIME).asBoolean());
    Assert.assertFalse(props.get(PROP_TWO,BOOT_TIME).asBoolean());
    Assert.assertNull(System.getProperty(PROP_ONE));
    Assert.assertNull(System.getProperty(PROP_TWO));
  }
 else {
    Assert.assertEquals("one",System.getProperty(PROP_ONE));
    Assert.assertEquals("dos",System.getProperty(PROP_TWO));
  }
  write=Util.createOperation(WRITE_ATTRIBUTE_OPERATION,getSystemPropertyAddress(PROP_TWO));
  write.get(NAME).set(VALUE);
  write.get(VALUE).setExpression("${" + PROP_ONE + "}");
  ModelTestUtils.checkOutcome(kernelServices.executeOperation(write));
  props=readSystemPropertiesParentModel(kernelServices);
  Assert.assertEquals(2,props.keys().size());
  Assert.assertEquals("one",props.get(PROP_ONE,VALUE).asString());
  Assert.assertEquals("${" + PROP_ONE + "}",props.get(PROP_TWO,VALUE).asString());
  if (!standalone) {
    Assert.assertTrue(props.get(PROP_ONE,BOOT_TIME).asBoolean());
    Assert.assertFalse(props.get(PROP_TWO,BOOT_TIME).asBoolean());
    Assert.assertNull(System.getProperty(PROP_ONE));
    Assert.assertNull(System.getProperty(PROP_TWO));
  }
 else {
    Assert.assertEquals("one",System.getProperty(PROP_ONE));
    Assert.assertEquals("one",System.getProperty(PROP_TWO));
  }
  write=Util.createOperation(WRITE_ATTRIBUTE_OPERATION,getSystemPropertyAddress(PROP_TWO));
  write.get(NAME).set(VALUE);
  write.get(VALUE).set("");
  ModelTestUtils.checkOutcome(kernelServices.executeOperation(write));
  props=readSystemPropertiesParentModel(kernelServices);
  Assert.assertEquals(2,props.keys().size());
  Assert.assertEquals("one",props.get(PROP_ONE,VALUE).asString());
  Assert.assertEquals("",props.get(PROP_TWO,VALUE).asString());
  if (!standalone) {
    Assert.assertTrue(props.get(PROP_ONE,BOOT_TIME).asBoolean());
    Assert.assertFalse(props.get(PROP_TWO,BOOT_TIME).asBoolean());
    Assert.assertNull(System.getProperty(PROP_ONE));
    Assert.assertNull(System.getProperty(PROP_TWO));
  }
 else {
    Assert.assertEquals("one",System.getProperty(PROP_ONE));
    Assert.assertEquals("",System.getProperty(PROP_TWO));
  }
  write=Util.createOperation(WRITE_ATTRIBUTE_OPERATION,getSystemPropertyAddress(PROP_TWO));
  write.get(NAME).set(VALUE);
  write.get(VALUE);
  ModelTestUtils.checkOutcome(kernelServices.executeOperation(write));
  props=readSystemPropertiesParentModel(kernelServices);
  Assert.assertEquals(2,props.keys().size());
  Assert.assertEquals("one",props.get(PROP_ONE,VALUE).asString());
  Assert.assertTrue(props.keys().contains(PROP_TWO));
  Assert.assertFalse(props.get(PROP_TWO,VALUE).isDefined());
  if (!standalone) {
    Assert.assertTrue(props.get(PROP_ONE,BOOT_TIME).asBoolean());
    Assert.assertFalse(props.get(PROP_TWO,BOOT_TIME).asBoolean());
    Assert.assertNull(System.getProperty(PROP_ONE));
    Assert.assertNull(System.getProperty(PROP_TWO));
  }
 else {
    Assert.assertEquals("one",System.getProperty(PROP_ONE));
    Assert.assertNull(System.getProperty(PROP_TWO));
  }
  write=Util.createOperation(WRITE_ATTRIBUTE_OPERATION,getSystemPropertyAddress(PROP_TWO));
  write.get(NAME).set(BOOT_TIME);
  write.get(VALUE);
}
