{
  KernelServices kernelServices=createKernelServicesBuilder(true).setXmlResource(getXmlResource()).build();
  Assert.assertTrue(kernelServices.isSuccessfulBoot());
  String xmlOriginal=ModelTestUtils.readResource(this.getClass(),getXmlResource());
  String marshalled=kernelServices.getPersistedSubsystemXml();
  ModelTestUtils.compareXml(xmlOriginal,marshalled);
  ModelNode props=readSystemPropertiesParentModel(kernelServices);
  Assert.assertEquals(standalone || domain ? 4 : 5,props.keys().size());
  Assert.assertEquals("1",props.get(PROP_ONE,VALUE).asString());
  Assert.assertEquals("2",props.get(PROP_TWO,VALUE).asString());
  Assert.assertEquals("3",props.get(PROP_THREE,VALUE).asString());
  Assert.assertFalse(props.get(PROP_FOUR,VALUE).isDefined());
  if (!standalone) {
    Assert.assertTrue(props.get(PROP_ONE,BOOT_TIME).asBoolean());
    Assert.assertTrue(props.get(PROP_TWO,BOOT_TIME).asBoolean());
    Assert.assertFalse(props.get(PROP_THREE,BOOT_TIME).asBoolean());
    Assert.assertNull(System.getProperty(PROP_ONE));
    Assert.assertNull(System.getProperty(PROP_TWO));
    Assert.assertNull(System.getProperty(PROP_THREE));
    if (!domain) {
      Assert.assertEquals(ModelType.EXPRESSION,props.get(PROP_FIVE,VALUE).getType());
      Assert.assertEquals("5",props.get(PROP_FIVE,VALUE).resolve().asString());
      Assert.assertEquals(ModelType.EXPRESSION,props.get(PROP_FIVE,BOOT_TIME).getType());
      Assert.assertFalse(props.get(PROP_FIVE,BOOT_TIME).resolve().asBoolean());
    }
  }
 else {
    Assert.assertEquals("1",System.getProperty(PROP_ONE));
    Assert.assertEquals("2",System.getProperty(PROP_TWO));
    Assert.assertEquals("3",System.getProperty(PROP_THREE));
  }
}
