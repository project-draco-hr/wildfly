{
  KernelServices kernelServices=createEmptyRoot();
  ModelNode props=readSystemPropertiesParentModel(kernelServices);
  Assert.assertFalse(props.isDefined());
  ModelNode add=Util.createAddOperation(getSystemPropertyAddress(PROP_ONE));
  add.get(VALUE).set("one");
  ModelTestUtils.checkOutcome(kernelServices.executeOperation(add));
  props=readSystemPropertiesParentModel(kernelServices);
  Assert.assertTrue(props.isDefined());
  Assert.assertEquals(1,props.keys().size());
  Assert.assertEquals("one",props.get(PROP_ONE,VALUE).asString());
  if (!standalone) {
    Assert.assertTrue(props.get(PROP_ONE,BOOT_TIME).asBoolean());
    Assert.assertNull(System.getProperty(PROP_ONE));
    Assert.assertNull(System.getProperty(PROP_TWO));
  }
 else {
    Assert.assertEquals("one",System.getProperty(PROP_ONE));
    Assert.assertNull(System.getProperty(PROP_TWO));
  }
  add=Util.createAddOperation(getSystemPropertyAddress(PROP_TWO));
  add.get(VALUE).set("two");
  if (!standalone) {
    add.get(BOOT_TIME).set(false);
  }
  ModelTestUtils.checkOutcome(kernelServices.executeOperation(add));
  props=readSystemPropertiesParentModel(kernelServices);
  Assert.assertTrue(props.isDefined());
  Assert.assertEquals(2,props.keys().size());
  Assert.assertEquals("one",props.get(PROP_ONE,VALUE).asString());
  Assert.assertEquals("two",props.get(PROP_TWO,VALUE).asString());
  if (!standalone) {
    Assert.assertTrue(props.get(PROP_ONE,BOOT_TIME).asBoolean());
    Assert.assertFalse(props.get(PROP_TWO,BOOT_TIME).asBoolean());
    Assert.assertNull(System.getProperty(PROP_ONE));
    Assert.assertNull(System.getProperty(PROP_TWO));
  }
 else {
    Assert.assertFalse(props.get(PROP_ONE,BOOT_TIME).isDefined());
    Assert.assertEquals("one",System.getProperty(PROP_ONE));
    Assert.assertEquals("two",System.getProperty(PROP_TWO));
  }
  ModelNode remove=Util.createRemoveOperation(getSystemPropertyAddress(PROP_TWO));
  ModelTestUtils.checkOutcome(kernelServices.executeOperation(remove));
  props=readSystemPropertiesParentModel(kernelServices);
  Assert.assertTrue(props.isDefined());
  Assert.assertEquals(1,props.keys().size());
  Assert.assertEquals("one",props.get(PROP_ONE,VALUE).asString());
  add=Util.createAddOperation(getSystemPropertyAddress(PROP_TWO));
  add.get(VALUE).setExpression("${" + PROP_ONE + "}");
  if (!standalone) {
    add.get(BOOT_TIME).set(true);
  }
  ModelTestUtils.checkOutcome(kernelServices.executeOperation(add));
  props=readSystemPropertiesParentModel(kernelServices);
  Assert.assertEquals(2,props.keys().size());
  Assert.assertEquals("one",props.get(PROP_ONE,VALUE).asString());
  Assert.assertEquals("${" + PROP_ONE + "}",props.get(PROP_TWO,VALUE).asString());
  if (!standalone) {
    Assert.assertTrue(props.get(PROP_ONE,BOOT_TIME).asBoolean());
    Assert.assertTrue(props.get(PROP_TWO,BOOT_TIME).asBoolean());
    Assert.assertNull(System.getProperty(PROP_ONE));
    Assert.assertNull(System.getProperty(PROP_TWO));
  }
 else {
    Assert.assertEquals("one",System.getProperty(PROP_ONE));
    Assert.assertEquals("one",System.getProperty(PROP_TWO));
  }
  remove=Util.createRemoveOperation(getSystemPropertyAddress(PROP_TWO));
  ModelTestUtils.checkOutcome(kernelServices.executeOperation(remove));
  add=Util.createAddOperation(getSystemPropertyAddress(PROP_TWO));
  add.get(VALUE).set("");
  ModelTestUtils.checkOutcome(kernelServices.executeOperation(add));
  props=readSystemPropertiesParentModel(kernelServices);
  Assert.assertEquals(2,props.keys().size());
  Assert.assertEquals("one",props.get(PROP_ONE,VALUE).asString());
  Assert.assertEquals("",props.get(PROP_TWO,VALUE).asString());
  if (!standalone) {
    Assert.assertTrue(props.get(PROP_ONE,BOOT_TIME).asBoolean());
    Assert.assertTrue(props.get(PROP_TWO,BOOT_TIME).asBoolean());
    Assert.assertNull(System.getProperty(PROP_ONE));
    Assert.assertNull(System.getProperty(PROP_TWO));
  }
 else {
    Assert.assertEquals("one",System.getProperty(PROP_ONE));
    Assert.assertEquals("",System.getProperty(PROP_TWO));
  }
  remove=Util.createRemoveOperation(getSystemPropertyAddress(PROP_TWO));
  ModelTestUtils.checkOutcome(kernelServices.executeOperation(remove));
  add=Util.createAddOperation(getSystemPropertyAddress(PROP_TWO));
  add.get(VALUE);
  ModelTestUtils.checkOutcome(kernelServices.executeOperation(add));
  props=readSystemPropertiesParentModel(kernelServices);
  Assert.assertEquals(2,props.keys().size());
  Assert.assertEquals("one",props.get(PROP_ONE,VALUE).asString());
  Assert.assertTrue(props.keys().contains(PROP_TWO));
  Assert.assertFalse(props.get(PROP_TWO,VALUE).isDefined());
  if (!standalone) {
    Assert.assertTrue(props.get(PROP_ONE,BOOT_TIME).asBoolean());
    Assert.assertTrue(props.get(PROP_TWO,BOOT_TIME).asBoolean());
    Assert.assertNull(System.getProperty(PROP_ONE));
    Assert.assertNull(System.getProperty(PROP_TWO));
  }
 else {
    Assert.assertEquals("one",System.getProperty(PROP_ONE));
    Assert.assertNull("",System.getProperty(PROP_TWO));
  }
  remove=Util.createRemoveOperation(getSystemPropertyAddress(PROP_TWO));
  ModelTestUtils.checkOutcome(kernelServices.executeOperation(remove));
  remove=Util.createRemoveOperation(getSystemPropertyAddress(PROP_ONE));
  ModelTestUtils.checkOutcome(kernelServices.executeOperation(remove));
  props=readSystemPropertiesParentModel(kernelServices);
  Assert.assertFalse(props.isDefined());
}
