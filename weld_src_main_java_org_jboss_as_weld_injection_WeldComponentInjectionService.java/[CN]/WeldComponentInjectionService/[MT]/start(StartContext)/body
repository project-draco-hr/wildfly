{
  final ClassLoader oldTCCL=SecurityActions.getContextClassLoader();
  try {
    SecurityActions.setContextClassLoader(classLoader);
    final BeanManagerImpl bm=beanManager.getValue();
    final ClassTransformer transformer=bm.getServices().get(ClassTransformer.class);
    final List<Injection> injectionPoints=new ArrayList<Injection>();
    WeldClass<?> weldClass=transformer.loadClass(componentClass);
    for (    AnnotatedField<?> field : weldClass.getFields()) {
      if (field.isAnnotationPresent(Inject.class)) {
        final Set<Annotation> qualifiers=new HashSet<Annotation>();
        for (        Annotation annotation : field.getAnnotations()) {
          if (bm.isQualifier(annotation.annotationType())) {
            qualifiers.add(annotation);
          }
        }
        FieldInjectionPoint ip=new FieldInjectionPoint(field,qualifiers);
        Set<Bean<?>> beans=bm.getBeans(ip);
        if (beans.size() > 1) {
          throw new StartException("Error resolving CDI injection point " + field + " on "+ componentClass+ ". Injection points is ambiguous "+ beans);
        }
 else         if (beans.isEmpty()) {
          throw new StartException("Error resolving CDI injection point " + field + " on "+ componentClass+ ". No bean satisfies the injection point.");
        }
        Bean<?> bean=bm.resolve(beans);
        injectionPoints.add(new CDIFieldInjection(field.getJavaMember(),bean,ip));
      }
    }
    for (    AnnotatedMethod<?> method : weldClass.getMethods()) {
      if (method.isAnnotationPresent(Inject.class)) {
        final List<Bean<?>> parameterBeans=new ArrayList<Bean<?>>();
        final List<InjectionPoint> ips=new ArrayList<InjectionPoint>();
        for (        AnnotatedParameter<?> param : method.getParameters()) {
          final Set<Annotation> qualifiers=new HashSet<Annotation>();
          for (          Annotation annotation : param.getAnnotations()) {
            if (bm.isQualifier(annotation.annotationType())) {
              qualifiers.add(annotation);
            }
          }
          ParameterInjectionPoint ip=new ParameterInjectionPoint(param,qualifiers);
          Set<Bean<?>> beans=bm.getBeans(ip);
          if (beans.size() > 1) {
            throw new StartException("Error resolving CDI injection point " + param + " on "+ componentClass+ ". Injection points is ambiguous "+ beans);
          }
 else           if (beans.isEmpty()) {
            throw new StartException("Error resolving CDI injection point " + param + " on "+ componentClass+ ". No bean satisfies the injection point.");
          }
          Bean<?> bean=bm.resolve(beans);
          parameterBeans.add(bean);
          ips.add(ip);
        }
        injectionPoints.add(new CDIMethodInjection(method.getJavaMember(),parameterBeans,ips));
      }
    }
    this.injectionPoints=injectionPoints;
  }
  finally {
    SecurityActions.setContextClassLoader(oldTCCL);
  }
}
