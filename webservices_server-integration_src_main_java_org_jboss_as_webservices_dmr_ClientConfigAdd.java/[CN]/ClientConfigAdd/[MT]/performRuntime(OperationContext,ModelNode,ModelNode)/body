{
  if (context.isBooting()) {
    final PathAddress address=PathAddress.pathAddress(operation.require(OP_ADDR));
    final String name=address.getLastElement().getValue();
    final ServerConfig serverConfig=ASHelper.getMSCService(WSServices.CONFIG_SERVICE,ServerConfig.class,context);
    if (serverConfig == null) {
      throw WSLogger.ROOT_LOGGER.serviceNotAvailable(WSServices.CONFIG_SERVICE.getCanonicalName());
    }
    final ServiceName serviceName=getClientConfigServiceName(name);
    final ConfigService clientConfigService=new ConfigService(serverConfig,name,true);
    final ServiceTarget target=context.getServiceTarget();
    final ServiceBuilder<?> clientServiceBuilder=target.addService(serviceName,clientConfigService);
    for (    ServiceName sn : PackageUtils.getServiceNameDependencies(context,serviceName,address,Constants.PROPERTY)) {
      clientServiceBuilder.addDependency(sn,PropertyService.class,clientConfigService.getPropertiesInjector());
    }
    for (    ServiceName sn : PackageUtils.getServiceNameDependencies(context,serviceName,address,Constants.PRE_HANDLER_CHAIN)) {
      clientServiceBuilder.addDependency(sn,UnifiedHandlerChainMetaData.class,clientConfigService.getPreHandlerChainsInjector());
    }
    for (    ServiceName sn : PackageUtils.getServiceNameDependencies(context,serviceName,address,Constants.POST_HANDLER_CHAIN)) {
      clientServiceBuilder.addDependency(sn,UnifiedHandlerChainMetaData.class,clientConfigService.getPostHandlerChainsInjector());
    }
    clientServiceBuilder.setInitialMode(ServiceController.Mode.ACTIVE).install();
  }
 else {
    context.reloadRequired();
  }
}
