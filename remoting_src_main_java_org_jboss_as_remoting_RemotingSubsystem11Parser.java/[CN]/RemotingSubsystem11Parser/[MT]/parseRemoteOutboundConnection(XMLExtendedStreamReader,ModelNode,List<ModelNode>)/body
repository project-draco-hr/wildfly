{
  final EnumSet<Attribute> required=EnumSet.of(Attribute.NAME,Attribute.OUTBOUND_SOCKET_BINDING_REF);
  final int count=reader.getAttributeCount();
  String name=null;
  String outboundSocketBindingRef=null;
  ModelNode username=null;
  String securityRealm=null;
  for (int i=0; i < count; i++) {
    requireNoNamespaceAttribute(reader,i);
    final String value=reader.getAttributeValue(i);
    final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
    required.remove(attribute);
switch (attribute) {
case NAME:
{
        name=value;
        break;
      }
case OUTBOUND_SOCKET_BINDING_REF:
{
      outboundSocketBindingRef=value;
      break;
    }
case USERNAME:
{
    username=RemoteOutboundConnectionResourceDefinition.USERNAME.parse(value,reader.getLocation());
    break;
  }
case SECURITY_REALM:
{
  securityRealm=value;
  break;
}
default :
throw unexpectedAttribute(reader,i);
}
}
if (!required.isEmpty()) {
throw missingRequired(reader,required);
}
final PathAddress address=PathAddress.pathAddress(PathAddress.pathAddress(parentAddress),PathElement.pathElement(CommonAttributes.REMOTE_OUTBOUND_CONNECTION,name));
operations.add(getConnectionAddOperation(name,outboundSocketBindingRef,username,securityRealm,address));
final EnumSet<Element> visited=EnumSet.noneOf(Element.class);
while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
final Element element=Element.forName(reader.getLocalName());
if (visited.contains(element)) {
throw ParseUtils.unexpectedElement(reader);
}
visited.add(element);
switch (element) {
case PROPERTIES:
{
parseProperties(reader,address.toModelNode(),operations);
break;
}
default :
{
throw unexpectedElement(reader);
}
}
}
}
