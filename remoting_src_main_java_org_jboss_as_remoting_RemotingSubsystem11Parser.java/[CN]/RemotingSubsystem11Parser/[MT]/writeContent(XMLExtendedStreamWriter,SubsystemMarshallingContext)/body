{
  context.startSubsystemElement(Namespace.CURRENT.getUriString(),false);
  final ModelNode model=context.getModelNode();
  RemotingSubsystemRootResource.WORKER_READ_THREADS.marshallAsAttribute(model,false,writer);
  RemotingSubsystemRootResource.WORKER_TASK_CORE_THREADS.marshallAsAttribute(model,false,writer);
  RemotingSubsystemRootResource.WORKER_TASK_KEEPALIVE.marshallAsAttribute(model,false,writer);
  RemotingSubsystemRootResource.WORKER_TASK_LIMIT.marshallAsAttribute(model,false,writer);
  RemotingSubsystemRootResource.WORKER_TASK_MAX_THREADS.marshallAsAttribute(model,false,writer);
  RemotingSubsystemRootResource.WORKER_WRITE_THREADS.marshallAsAttribute(model,false,writer);
  if (model.hasDefined(CONNECTOR)) {
    final ModelNode connector=model.get(CONNECTOR);
    for (    String name : connector.keys()) {
      writeConnector(writer,connector.require(name),name);
    }
  }
  if (model.hasDefined(OUTBOUND_CONNECTION) || model.hasDefined(REMOTE_OUTBOUND_CONNECTION) || model.hasDefined(LOCAL_OUTBOUND_CONNECTION)) {
    writer.writeStartElement(Element.OUTBOUND_CONNECTIONS.getLocalName());
    if (model.hasDefined(OUTBOUND_CONNECTION)) {
      final List<Property> outboundConnections=model.get(OUTBOUND_CONNECTION).asPropertyList();
      for (      Property property : outboundConnections) {
        final ModelNode genericOutboundConnectionModel=property.getValue();
        this.writeOutboundConnection(writer,genericOutboundConnectionModel);
      }
    }
    if (model.hasDefined(REMOTE_OUTBOUND_CONNECTION)) {
      final List<Property> remoteOutboundConnections=model.get(REMOTE_OUTBOUND_CONNECTION).asPropertyList();
      for (      Property property : remoteOutboundConnections) {
        final ModelNode remoteOutboundConnectionModel=property.getValue();
        this.writeRemoteOutboundConnection(writer,remoteOutboundConnectionModel);
      }
    }
    if (model.hasDefined(LOCAL_OUTBOUND_CONNECTION)) {
      final List<Property> localOutboundConnections=model.get(LOCAL_OUTBOUND_CONNECTION).asPropertyList();
      for (      Property property : localOutboundConnections) {
        final ModelNode localOutboundConnectionModel=property.getValue();
        this.writeLocalOutboundConnection(writer,localOutboundConnectionModel);
      }
    }
    writer.writeEndElement();
  }
  writer.writeEndElement();
}
