{
  final ResourceBundle bundle=getResourceBundle(locale);
  final ModelNode node=new ModelNode();
  node.get(TYPE).set(ModelType.OBJECT);
  node.get(DESCRIPTION).set(bundle.getString("jsse"));
  node.get(REQUIRED).set(false);
  node.get(REQUEST_PROPERTIES,KEYSTORE_PASSWORD,DESCRIPTION).set(bundle.getString("keystore-password"));
  node.get(REQUEST_PROPERTIES,KEYSTORE_PASSWORD,TYPE).set(ModelType.STRING);
  node.get(REQUEST_PROPERTIES,KEYSTORE_PASSWORD,REQUIRED).set(false);
  node.get(REQUEST_PROPERTIES,KEYSTORE_TYPE,DESCRIPTION).set(bundle.getString("keystore-type"));
  node.get(REQUEST_PROPERTIES,KEYSTORE_TYPE,TYPE).set(ModelType.STRING);
  node.get(REQUEST_PROPERTIES,KEYSTORE_TYPE,REQUIRED).set(false);
  node.get(REQUEST_PROPERTIES,KEYSTORE_URL,DESCRIPTION).set(bundle.getString("keystore-url"));
  node.get(REQUEST_PROPERTIES,KEYSTORE_URL,TYPE).set(ModelType.STRING);
  node.get(REQUEST_PROPERTIES,KEYSTORE_URL,REQUIRED).set(false);
  node.get(REQUEST_PROPERTIES,KEYSTORE_ALIAS,DESCRIPTION).set(bundle.getString("keystore-alias"));
  node.get(REQUEST_PROPERTIES,KEYSTORE_ALIAS,TYPE).set(ModelType.STRING);
  node.get(REQUEST_PROPERTIES,KEYSTORE_ALIAS,REQUIRED).set(false);
  node.get(REQUEST_PROPERTIES,KEYSTORE_PROVIDER,DESCRIPTION).set(bundle.getString("keystore-provider"));
  node.get(REQUEST_PROPERTIES,KEYSTORE_PROVIDER,TYPE).set(ModelType.STRING);
  node.get(REQUEST_PROPERTIES,KEYSTORE_PROVIDER,REQUIRED).set(false);
  node.get(REQUEST_PROPERTIES,KEYSTORE_PROVIDER_ARGUMENT,DESCRIPTION).set(bundle.getString("keystore-provider-argument"));
  node.get(REQUEST_PROPERTIES,KEYSTORE_PROVIDER_ARGUMENT,TYPE).set(ModelType.STRING);
  node.get(REQUEST_PROPERTIES,KEYSTORE_PROVIDER_ARGUMENT,REQUIRED).set(false);
  node.get(REQUEST_PROPERTIES,KEY_MANAGER_FACTORY_PROVIDER,DESCRIPTION).set(bundle.getString("key-manager-factory-provider"));
  node.get(REQUEST_PROPERTIES,KEY_MANAGER_FACTORY_PROVIDER,TYPE).set(ModelType.STRING);
  node.get(REQUEST_PROPERTIES,KEY_MANAGER_FACTORY_PROVIDER,REQUIRED).set(false);
  node.get(REQUEST_PROPERTIES,KEY_MANAGER_FACTORY_ALGORITHM,DESCRIPTION).set(bundle.getString("key-manager-factory-algorithm"));
  node.get(REQUEST_PROPERTIES,KEY_MANAGER_FACTORY_ALGORITHM,TYPE).set(ModelType.STRING);
  node.get(REQUEST_PROPERTIES,KEY_MANAGER_FACTORY_ALGORITHM,REQUIRED).set(false);
  node.get(REQUEST_PROPERTIES,TRUSTSTORE_PASSWORD,DESCRIPTION).set(bundle.getString("truststore-password"));
  node.get(REQUEST_PROPERTIES,TRUSTSTORE_PASSWORD,TYPE).set(ModelType.STRING);
  node.get(REQUEST_PROPERTIES,TRUSTSTORE_PASSWORD,REQUIRED).set(false);
  node.get(REQUEST_PROPERTIES,TRUSTSTORE_TYPE,DESCRIPTION).set(bundle.getString("truststore-type"));
  node.get(REQUEST_PROPERTIES,TRUSTSTORE_TYPE,TYPE).set(ModelType.STRING);
  node.get(REQUEST_PROPERTIES,TRUSTSTORE_TYPE,REQUIRED).set(false);
  node.get(REQUEST_PROPERTIES,TRUSTSTORE_URL,DESCRIPTION).set(bundle.getString("truststore-url"));
  node.get(REQUEST_PROPERTIES,TRUSTSTORE_URL,TYPE).set(ModelType.STRING);
  node.get(REQUEST_PROPERTIES,TRUSTSTORE_URL,REQUIRED).set(false);
  node.get(REQUEST_PROPERTIES,TRUSTSTORE_PROVIDER,DESCRIPTION).set(bundle.getString("truststore-provider"));
  node.get(REQUEST_PROPERTIES,TRUSTSTORE_PROVIDER,TYPE).set(ModelType.STRING);
  node.get(REQUEST_PROPERTIES,TRUSTSTORE_PROVIDER,REQUIRED).set(false);
  node.get(REQUEST_PROPERTIES,TRUSTSTORE_PROVIDER_ARGUMENT,DESCRIPTION).set(bundle.getString("truststore-provider-argument"));
  node.get(REQUEST_PROPERTIES,TRUSTSTORE_PROVIDER_ARGUMENT,TYPE).set(ModelType.STRING);
  node.get(REQUEST_PROPERTIES,TRUSTSTORE_PROVIDER_ARGUMENT,REQUIRED).set(false);
  node.get(REQUEST_PROPERTIES,TRUST_MANAGER_FACTORY_PROVIDER,DESCRIPTION).set(bundle.getString("trust-manager-factory-provider"));
  node.get(REQUEST_PROPERTIES,TRUST_MANAGER_FACTORY_PROVIDER,TYPE).set(ModelType.STRING);
  node.get(REQUEST_PROPERTIES,TRUST_MANAGER_FACTORY_PROVIDER,REQUIRED).set(false);
  node.get(REQUEST_PROPERTIES,TRUST_MANAGER_FACTORY_ALGORITHM,DESCRIPTION).set(bundle.getString("trust-manager-factory-algorithm"));
  node.get(REQUEST_PROPERTIES,TRUST_MANAGER_FACTORY_ALGORITHM,TYPE).set(ModelType.STRING);
  node.get(REQUEST_PROPERTIES,TRUST_MANAGER_FACTORY_ALGORITHM,REQUIRED).set(false);
  node.get(REQUEST_PROPERTIES,CLIENT_ALIAS,DESCRIPTION).set(bundle.getString("client-alias"));
  node.get(REQUEST_PROPERTIES,CLIENT_ALIAS,TYPE).set(ModelType.STRING);
  node.get(REQUEST_PROPERTIES,CLIENT_ALIAS,REQUIRED).set(false);
  node.get(REQUEST_PROPERTIES,SERVER_ALIAS,DESCRIPTION).set(bundle.getString("server-alias"));
  node.get(REQUEST_PROPERTIES,SERVER_ALIAS,TYPE).set(ModelType.STRING);
  node.get(REQUEST_PROPERTIES,SERVER_ALIAS,REQUIRED).set(false);
  node.get(REQUEST_PROPERTIES,CLIENT_AUTH,DESCRIPTION).set(bundle.getString("client-auth"));
  node.get(REQUEST_PROPERTIES,CLIENT_AUTH,TYPE).set(ModelType.BOOLEAN);
  node.get(REQUEST_PROPERTIES,CLIENT_AUTH,REQUIRED).set(false);
  node.get(REQUEST_PROPERTIES,SERVICE_AUTH_TOKEN,DESCRIPTION).set(bundle.getString("service-auth-token"));
  node.get(REQUEST_PROPERTIES,SERVICE_AUTH_TOKEN,TYPE).set(ModelType.STRING);
  node.get(REQUEST_PROPERTIES,SERVICE_AUTH_TOKEN,REQUIRED).set(false);
  return node;
}
