{
  final String[] candidates=ClassPathEjbJarScanner.getEjbJars(properties);
  if (candidates.length == 1) {
    deploy(new File(candidates[0]));
  }
 else   if (candidates.length > 1) {
    File tempEar;
    if (properties.containsKey(EJBContainer.APP_NAME)) {
      String tmpDir=AccessController.doPrivileged(new PrivilegedAction<String>(){
        @Override public String run(){
          return System.getProperty("java.io.tmpdir");
        }
      }
);
      tempEar=new File(tmpDir + "/" + properties.get(EJBContainer.APP_NAME)+ ".ear");
    }
 else {
      tempEar=File.createTempFile("ejb-embedded",".ear");
    }
    FileOutputStream out=new FileOutputStream(tempEar);
    ZipOutputStream zip=new ZipOutputStream(out);
    zip.putNextEntry(new ZipEntry("jboss-deployment-structure.xml"));
    byte[] bytes="<jboss-deployment-structure><extended-class-visibility>true</extended-class-visibility></jboss-deployment-structure>".getBytes();
    zip.write(bytes);
    try {
      byte[] buf=new byte[1024];
      for (      final String candidate : candidates) {
        File file=new File(candidate);
        File zipTarget;
        if (file.isDirectory()) {
          zipTarget=createTempZip(file);
        }
 else {
          zipTarget=file;
        }
        InputStream stream=new FileInputStream(zipTarget);
        try {
          final String name;
          if (file.getName().indexOf('.') == -1) {
            name=file.getName() + ".jar";
          }
 else {
            name=file.getName();
          }
          ZipEntry entry=new ZipEntry(name);
          zip.putNextEntry(entry);
          int len;
          while ((len=stream.read(buf)) > 0) {
            zip.write(buf,0,len);
          }
        }
  finally {
          stream.close();
        }
      }
      zip.flush();
    }
  finally {
      zip.close();
    }
    tempFiles.add(tempEar);
    deploy(tempEar);
  }
}
