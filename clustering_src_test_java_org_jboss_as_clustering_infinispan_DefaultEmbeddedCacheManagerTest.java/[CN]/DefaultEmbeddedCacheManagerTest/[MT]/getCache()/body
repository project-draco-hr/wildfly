{
  @SuppressWarnings("unchecked") AdvancedCache<Object,Object> defaultCache=mock(AdvancedCache.class);
  @SuppressWarnings("unchecked") AdvancedCache<Object,Object> otherCache=mock(AdvancedCache.class);
  when(this.manager.<Object,Object>getCache("default")).thenReturn(defaultCache);
  when(this.manager.<Object,Object>getCache("other")).thenReturn(otherCache);
  when(defaultCache.getAdvancedCache()).thenReturn(defaultCache);
  when(otherCache.getAdvancedCache()).thenReturn(otherCache);
  Cache<Object,Object> result=this.subject.getCache("default");
  assertNotSame(defaultCache,result);
  assertEquals(result,defaultCache);
  assertSame(this.subject,result.getCacheManager());
  result=this.subject.getCache("other");
  assertNotSame(otherCache,result);
  assertEquals(result,otherCache);
  assertSame(this.subject,result.getCacheManager());
  result=this.subject.getCache(CacheContainer.DEFAULT_CACHE_NAME);
  assertNotSame(defaultCache,result);
  assertEquals(result,defaultCache);
  assertSame(this.subject,result.getCacheManager());
  result=this.subject.getCache(null);
  assertNotSame(defaultCache,result);
  assertEquals(result,defaultCache);
  assertSame(this.subject,result.getCacheManager());
}
