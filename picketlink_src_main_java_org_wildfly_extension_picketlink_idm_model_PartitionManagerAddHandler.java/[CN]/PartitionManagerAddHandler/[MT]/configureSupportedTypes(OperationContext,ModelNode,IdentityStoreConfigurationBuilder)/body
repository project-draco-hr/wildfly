{
  boolean hasSupportedType=identityStore.hasDefined(SUPPORTED_TYPES.getName());
  if (hasSupportedType) {
    ModelNode featuresSetNode=identityStore.get(SUPPORTED_TYPES.getName()).asProperty().getValue();
    ModelNode supportsAllNode=SupportedTypesResourceDefinition.SUPPORTS_ALL.resolveModelAttribute(context,featuresSetNode);
    if (supportsAllNode.asBoolean()) {
      storeConfig.supportAllFeatures();
    }
    hasSupportedType=supportsAllNode.asBoolean();
    if (featuresSetNode.hasDefined(SUPPORTED_TYPE.getName())) {
      for (      Property supportedTypeNode : featuresSetNode.get(SUPPORTED_TYPE.getName()).asPropertyList()) {
        ModelNode supportedType=supportedTypeNode.getValue();
        ModelNode classNameNode=SupportedTypeResourceDefinition.CLASS_NAME.resolveModelAttribute(context,supportedType);
        ModelNode codeNode=SupportedTypeResourceDefinition.CODE.resolveModelAttribute(context,supportedType);
        String typeName;
        if (classNameNode.isDefined()) {
          typeName=classNameNode.asString();
        }
 else         if (codeNode.isDefined()) {
          typeName=AttributedTypeEnum.forType(codeNode.asString());
        }
 else {
          throw ROOT_LOGGER.typeNotProvided(SUPPORTED_TYPE.getName());
        }
        ModelNode moduleNode=SupportedTypeResourceDefinition.MODULE.resolveModelAttribute(context,supportedType);
        Class<? extends AttributedType> attributedTypeClass=loadClass(moduleNode,typeName);
        if (Relationship.class.isAssignableFrom(attributedTypeClass)) {
          storeConfig.supportGlobalRelationship((Class<? extends Relationship>)attributedTypeClass);
        }
 else {
          storeConfig.supportType(attributedTypeClass);
        }
        hasSupportedType=true;
      }
    }
  }
  if (!hasSupportedType) {
    throw ROOT_LOGGER.idmNoSupportedTypesDefined();
  }
}
