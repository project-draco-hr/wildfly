{
  FileStoreConfigurationBuilder fileStoreBuilder=builder.stores().file();
  String workingDir=FileStoreResourceDefinition.WORKING_DIR.resolveModelAttribute(context,resource).asString();
  String relativeTo=FileStoreResourceDefinition.RELATIVE_TO.resolveModelAttribute(context,resource).asString();
  ModelNode alwaysCreateFiles=FileStoreResourceDefinition.ALWAYS_CREATE_FILE.resolveModelAttribute(context,resource);
  ModelNode asyncWrite=FileStoreResourceDefinition.ASYNC_WRITE.resolveModelAttribute(context,resource);
  ModelNode asyncWriteThreadPool=FileStoreResourceDefinition.ASYNC_WRITE_THREAD_POOL.resolveModelAttribute(context,resource);
  fileStoreBuilder.preserveState(!alwaysCreateFiles.asBoolean());
  fileStoreBuilder.asyncWrite(asyncWrite.asBoolean());
  fileStoreBuilder.asyncWriteThreadPool(asyncWriteThreadPool.asInt());
  FileIdentityStoreService storeService=new FileIdentityStoreService(fileStoreBuilder,workingDir,relativeTo);
  ServiceName storeServiceName=FileIdentityStoreService.createServiceName(partitionManagerService.getName(),configurationName,ModelElement.FILE_STORE.getName());
  ServiceBuilder<FileIdentityStoreService> storeServiceBuilder=context.getServiceTarget().addService(storeServiceName,storeService);
  storeServiceBuilder.addDependency(PathManagerService.SERVICE_NAME,PathManager.class,storeService.getPathManager());
  serviceBuilder.addDependency(storeServiceName);
  if (verificationHandler != null) {
    storeServiceBuilder.addListener(verificationHandler);
  }
  ServiceController<FileIdentityStoreService> controller=storeServiceBuilder.setInitialMode(Mode.PASSIVE).install();
  if (newControllers != null) {
    newControllers.add(controller);
  }
  return fileStoreBuilder;
}
