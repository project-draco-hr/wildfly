{
  Property prop=modelNode.asProperty();
  String storeType=prop.getName();
  ModelNode identityStore=prop.getValue().asProperty().getValue();
  IdentityStoreConfigurationBuilder storeConfig=null;
  if (storeType.equals(JPA_STORE.getName())) {
    storeConfig=configureJPAIdentityStore(context,serviceBuilder,verificationHandler,newControllers,partitionManagerService,identityStore,configurationName,namedIdentityConfigurationBuilder);
  }
 else   if (storeType.equals(FILE_STORE.getName())) {
    storeConfig=configureFileIdentityStore(context,serviceBuilder,verificationHandler,newControllers,partitionManagerService,identityStore,configurationName,namedIdentityConfigurationBuilder);
  }
 else   if (storeType.equals(LDAP_STORE.getName())) {
    storeConfig=configureLDAPIdentityStore(context,identityStore,namedIdentityConfigurationBuilder);
  }
  ModelNode supportAttributeNode=JPAStoreResourceDefinition.SUPPORT_ATTRIBUTE.resolveModelAttribute(context,identityStore);
  storeConfig.supportAttributes(supportAttributeNode.asBoolean());
  ModelNode supportCredentialNode=JPAStoreResourceDefinition.SUPPORT_CREDENTIAL.resolveModelAttribute(context,identityStore);
  storeConfig.supportCredentials(supportCredentialNode.asBoolean());
  configureSupportedTypes(context,identityStore,storeConfig);
  configureCredentialHandlers(context,identityStore,storeConfig);
}
