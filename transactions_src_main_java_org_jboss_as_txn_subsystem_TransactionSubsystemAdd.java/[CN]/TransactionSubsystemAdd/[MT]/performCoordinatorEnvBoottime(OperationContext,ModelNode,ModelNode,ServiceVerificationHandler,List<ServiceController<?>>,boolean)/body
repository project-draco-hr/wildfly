{
  final boolean coordinatorEnableStatistics=TransactionSubsystemRootResourceDefinition.ENABLE_STATISTICS.resolveModelAttribute(context,coordEnvModel).asBoolean();
  final boolean transactionStatusManagerEnable=TransactionSubsystemRootResourceDefinition.ENABLE_TSM_STATUS.resolveModelAttribute(context,coordEnvModel).asBoolean();
  final int coordinatorDefaultTimeout=TransactionSubsystemRootResourceDefinition.DEFAULT_TIMEOUT.resolveModelAttribute(context,coordEnvModel).asInt();
  final ArjunaTransactionManagerService transactionManagerService=new ArjunaTransactionManagerService(coordinatorEnableStatistics,coordinatorDefaultTimeout,transactionStatusManagerEnable,jts);
  final ServiceBuilder<com.arjuna.ats.jbossatx.jta.TransactionManagerService> transactionManagerServiceServiceBuilder=context.getServiceTarget().addService(TxnServices.JBOSS_TXN_ARJUNA_TRANSACTION_MANAGER,transactionManagerService);
  if (jts) {
    transactionManagerServiceServiceBuilder.addDependency(ServiceName.JBOSS.append("jacorb","orb-service"),ORB.class,transactionManagerService.getOrbInjector());
  }
  controllers.add(transactionManagerServiceServiceBuilder.addDependency(TxnServices.JBOSS_TXN_XA_TERMINATOR,JBossXATerminator.class,transactionManagerService.getXaTerminatorInjector()).addDependency(TxnServices.JBOSS_TXN_CORE_ENVIRONMENT).addDependency(TxnServices.JBOSS_TXN_ARJUNA_OBJECTSTORE_ENVIRONMENT).addDependency(TxnServices.JBOSS_TXN_ARJUNA_RECOVERY_MANAGER).addListener(verificationHandler).setInitialMode(ServiceController.Mode.ACTIVE).install());
}
