{
  checkIfNodeIdentifierIsDefault(context,model);
  boolean jts=model.hasDefined(JTS) && model.get(JTS).asBoolean();
  final Resource subsystemResource=context.readResourceFromRoot(PathAddress.pathAddress(TransactionExtension.SUBSYSTEM_PATH));
  final List<ServiceName> deps=new LinkedList<>();
  for (  Resource.ResourceEntry re : subsystemResource.getChildren(CM_RESOURCE)) {
    deps.add(TxnServices.JBOSS_TXN_CMR.append(re.getName()));
  }
  performRecoveryEnvBoottime(context,model,verificationHandler,controllers,jts,deps);
  performCoreEnvironmentBootTime(context,model,verificationHandler,controllers);
  performCoordinatorEnvBoottime(context,model,verificationHandler,controllers,jts);
  performObjectStoreBoottime(context,model,verificationHandler,controllers);
  jtsPropertyManager.getJTSEnvironmentBean().setAlwaysPropagateContext(true);
  context.addStep(new AbstractDeploymentChainStep(){
    protected void execute(    final DeploymentProcessorTarget processorTarget){
      processorTarget.addDeploymentProcessor(TransactionExtension.SUBSYSTEM_NAME,Phase.PARSE,Phase.PARSE_TRANSACTION_ROLLBACK_ACTION,new TransactionLeakRollbackProcessor());
      processorTarget.addDeploymentProcessor(TransactionExtension.SUBSYSTEM_NAME,Phase.INSTALL,Phase.INSTALL_TRANSACTION_BINDINGS,new TransactionJndiBindingProcessor());
      processorTarget.addDeploymentProcessor(TransactionExtension.SUBSYSTEM_NAME,Phase.DEPENDENCIES,Phase.DEPENDENCIES_TRANSACTIONS,new TransactionCDIProcessor());
    }
  }
,OperationContext.Stage.RUNTIME);
  final BinderService tmBinderService=new BinderService("TransactionManager");
  final ServiceBuilder<ManagedReferenceFactory> tmBuilder=context.getServiceTarget().addService(ContextNames.JBOSS_CONTEXT_SERVICE_NAME.append("TransactionManager"),tmBinderService);
  tmBuilder.addDependency(ContextNames.JBOSS_CONTEXT_SERVICE_NAME,ServiceBasedNamingStore.class,tmBinderService.getNamingStoreInjector());
  tmBuilder.addDependency(TransactionManagerService.SERVICE_NAME,javax.transaction.TransactionManager.class,new Injector<javax.transaction.TransactionManager>(){
    @Override public void inject(    final javax.transaction.TransactionManager value) throws InjectionException {
      tmBinderService.getManagedObjectInjector().inject(new ValueManagedReferenceFactory(new ImmediateValue<Object>(value)));
    }
    @Override public void uninject(){
      tmBinderService.getManagedObjectInjector().uninject();
    }
  }
);
  tmBuilder.addListener(verificationHandler);
  controllers.add(tmBuilder.install());
  final BinderService tmLegacyBinderService=new BinderService("TransactionManager");
  final ServiceBuilder<ManagedReferenceFactory> tmLegacyBuilder=context.getServiceTarget().addService(ContextNames.JAVA_CONTEXT_SERVICE_NAME.append("TransactionManager"),tmLegacyBinderService);
  tmLegacyBuilder.addDependency(ContextNames.JAVA_CONTEXT_SERVICE_NAME,ServiceBasedNamingStore.class,tmLegacyBinderService.getNamingStoreInjector());
  tmLegacyBuilder.addDependency(TransactionManagerService.SERVICE_NAME,javax.transaction.TransactionManager.class,new Injector<javax.transaction.TransactionManager>(){
    @Override public void inject(    final javax.transaction.TransactionManager value) throws InjectionException {
      tmLegacyBinderService.getManagedObjectInjector().inject(new ValueManagedReferenceFactory(new ImmediateValue<Object>(value)));
    }
    @Override public void uninject(){
      tmLegacyBinderService.getManagedObjectInjector().uninject();
    }
  }
);
  tmLegacyBuilder.addListener(verificationHandler);
  controllers.add(tmLegacyBuilder.install());
  final BinderService tsrBinderService=new BinderService("TransactionSynchronizationRegistry");
  final ServiceBuilder<ManagedReferenceFactory> tsrBuilder=context.getServiceTarget().addService(ContextNames.JBOSS_CONTEXT_SERVICE_NAME.append("TransactionSynchronizationRegistry"),tsrBinderService);
  tsrBuilder.addDependency(ContextNames.JBOSS_CONTEXT_SERVICE_NAME,ServiceBasedNamingStore.class,tsrBinderService.getNamingStoreInjector());
  tsrBuilder.addDependency(TransactionSynchronizationRegistryService.SERVICE_NAME,TransactionSynchronizationRegistry.class,new Injector<TransactionSynchronizationRegistry>(){
    @Override public void inject(    final TransactionSynchronizationRegistry value) throws InjectionException {
      tsrBinderService.getManagedObjectInjector().inject(new ValueManagedReferenceFactory(new ImmediateValue<Object>(value)));
    }
    @Override public void uninject(){
      tsrBinderService.getManagedObjectInjector().uninject();
    }
  }
);
  tsrBuilder.addListener(verificationHandler);
  controllers.add(tsrBuilder.install());
  final UserTransactionAccessControlService lookupControlService=new UserTransactionAccessControlService();
  context.getServiceTarget().addService(UserTransactionAccessControlService.SERVICE_NAME,lookupControlService).install();
  final UserTransactionBindingService userTransactionBindingService=new UserTransactionBindingService("UserTransaction");
  final ServiceBuilder<ManagedReferenceFactory> utBuilder=context.getServiceTarget().addService(ContextNames.JBOSS_CONTEXT_SERVICE_NAME.append("UserTransaction"),userTransactionBindingService);
  utBuilder.addDependency(ContextNames.JBOSS_CONTEXT_SERVICE_NAME,ServiceBasedNamingStore.class,userTransactionBindingService.getNamingStoreInjector()).addDependency(UserTransactionAccessControlService.SERVICE_NAME,UserTransactionAccessControlService.class,userTransactionBindingService.getUserTransactionAccessControlServiceInjector()).addDependency(UserTransactionService.SERVICE_NAME,UserTransaction.class,new ManagedReferenceInjector<UserTransaction>(userTransactionBindingService.getManagedObjectInjector()));
  utBuilder.addListener(verificationHandler);
  controllers.add(utBuilder.install());
}
