{
  boolean useHornetqJournalStore=model.hasDefined(USEHORNETQSTORE) && model.get(USEHORNETQSTORE).asBoolean();
  final boolean enableAsyncIO=TransactionSubsystemRootResourceDefinition.HORNETQ_STORE_ENABLE_ASYNC_IO.resolveModelAttribute(context,model).asBoolean();
  final String objectStorePathRef=TransactionSubsystemRootResourceDefinition.OBJECT_STORE_RELATIVE_TO.resolveModelAttribute(context,model).asString();
  final String objectStorePath=TransactionSubsystemRootResourceDefinition.OBJECT_STORE_PATH.resolveModelAttribute(context,model).asString();
  final boolean useJdbcStore=model.hasDefined(USE_JDBC_STORE) && model.get(USE_JDBC_STORE).asBoolean();
  final String dataSourceJndiName=TransactionSubsystemRootResourceDefinition.JDBC_STORE_DATASOURCE.resolveModelAttribute(context,model).asString();
  ArjunaObjectStoreEnvironmentService.JdbcStoreConfigBulder confiBuilder=new ArjunaObjectStoreEnvironmentService.JdbcStoreConfigBulder();
  confiBuilder.setActionDropTable(TransactionSubsystemRootResourceDefinition.JDBC_ACTION_STORE_DROP_TABLE.resolveModelAttribute(context,model).asBoolean()).setStateDropTable(TransactionSubsystemRootResourceDefinition.JDBC_STATE_STORE_DROP_TABLE.resolveModelAttribute(context,model).asBoolean()).setCommunicationDropTable(TransactionSubsystemRootResourceDefinition.JDBC_COMMUNICATION_STORE_DROP_TABLE.resolveModelAttribute(context,model).asBoolean());
  if (model.hasDefined(TransactionSubsystemRootResourceDefinition.JDBC_ACTION_STORE_TABLE_PREFIX.getName()))   confiBuilder.setActionTablePrefix(TransactionSubsystemRootResourceDefinition.JDBC_ACTION_STORE_TABLE_PREFIX.resolveModelAttribute(context,model).asString());
  if (model.hasDefined(TransactionSubsystemRootResourceDefinition.JDBC_STATE_STORE_TABLE_PREFIX.getName()))   confiBuilder.setStateTablePrefix(TransactionSubsystemRootResourceDefinition.JDBC_STATE_STORE_TABLE_PREFIX.resolveModelAttribute(context,model).asString());
  if (model.hasDefined(TransactionSubsystemRootResourceDefinition.JDBC_COMMUNICATION_STORE_TABLE_PREFIX.getName()))   confiBuilder.setCommunicationTablePrefix(TransactionSubsystemRootResourceDefinition.JDBC_COMMUNICATION_STORE_TABLE_PREFIX.resolveModelAttribute(context,model).asString());
  if (ROOT_LOGGER.isDebugEnabled()) {
    ROOT_LOGGER.debugf("objectStorePathRef=%s, objectStorePath=%s\n",objectStorePathRef,objectStorePath);
  }
  ServiceTarget target=context.getServiceTarget();
  final ArjunaObjectStoreEnvironmentService objStoreEnvironmentService=new ArjunaObjectStoreEnvironmentService(useHornetqJournalStore,enableAsyncIO,objectStorePath,objectStorePathRef,useJdbcStore,dataSourceJndiName,confiBuilder.build());
  ServiceBuilder<Void> builder=target.addService(TxnServices.JBOSS_TXN_ARJUNA_OBJECTSTORE_ENVIRONMENT,objStoreEnvironmentService).addDependency(PathManagerService.SERVICE_NAME,PathManager.class,objStoreEnvironmentService.getPathManagerInjector()).addDependency(TxnServices.JBOSS_TXN_CORE_ENVIRONMENT);
  if (useJdbcStore) {
    final ContextNames.BindInfo bindInfo=ContextNames.bindInfoFor(dataSourceJndiName);
    builder.addDependency(bindInfo.getBinderServiceName());
  }
  controllers.add(builder.addListener(verificationHandler).setInitialMode(ServiceController.Mode.ACTIVE).install());
  controllers.add(TransactionManagerService.addService(target,verificationHandler));
  controllers.add(UserTransactionService.addService(target,verificationHandler));
  controllers.add(target.addService(TxnServices.JBOSS_TXN_USER_TRANSACTION_REGISTRY,new UserTransactionRegistryService()).addListener(verificationHandler).setInitialMode(ServiceController.Mode.ACTIVE).install());
  controllers.add(TransactionSynchronizationRegistryService.addService(target,verificationHandler));
}
