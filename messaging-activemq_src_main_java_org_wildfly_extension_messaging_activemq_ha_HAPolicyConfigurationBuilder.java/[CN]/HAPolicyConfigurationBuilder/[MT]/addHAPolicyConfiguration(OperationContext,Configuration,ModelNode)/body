{
  if (!model.hasDefined(HA_POLICY)) {
    return;
  }
  Property prop=model.get(HA_POLICY).asProperty();
  ModelNode haPolicy=prop.getValue();
  final HAPolicyConfiguration haPolicyConfiguration;
  String type=prop.getName();
switch (type) {
case LIVE_ONLY:
{
      haPolicyConfiguration=LiveOnlyDefinition.buildConfiguration(context,haPolicy);
      break;
    }
case REPLICATION_MASTER:
{
    haPolicyConfiguration=ReplicationMasterDefinition.buildConfiguration(context,haPolicy);
    break;
  }
case REPLICATION_SLAVE:
{
  haPolicyConfiguration=ReplicationSlaveDefinition.buildConfiguration(context,haPolicy);
  break;
}
case REPLICATION_COLOCATED:
{
haPolicyConfiguration=ReplicationColocatedDefinition.buildConfiguration(context,haPolicy);
break;
}
case SHARED_STORE_MASTER:
{
haPolicyConfiguration=SharedStoreMasterDefinition.buildConfiguration(context,haPolicy);
break;
}
case SHARED_STORE_SLAVE:
{
haPolicyConfiguration=SharedStoreSlaveDefinition.buildConfiguration(context,haPolicy);
break;
}
case SHARED_STORE_COLOCATED:
{
haPolicyConfiguration=SharedStoreColocatedDefinition.buildConfiguration(context,haPolicy);
break;
}
default :
{
throw new OperationFailedException("unknown ha policy type");
}
}
configuration.setHAPolicyConfiguration(haPolicyConfiguration);
}
