{
  ServiceName ldapServiceName=UserLdapCallbackHandler.ServiceUtil.createServiceName(realmName);
  final String baseDn=LdapAuthenticationResourceDefinition.BASE_DN.resolveModelAttribute(context,ldap).asString();
  ModelNode node=LdapAuthenticationResourceDefinition.USERNAME_FILTER.resolveModelAttribute(context,ldap);
  final String usernameAttribute=node.isDefined() ? node.asString() : null;
  node=LdapAuthenticationResourceDefinition.ADVANCED_FILTER.resolveModelAttribute(context,ldap);
  final String advancedFilter=node.isDefined() ? node.asString() : null;
  node=LdapAuthenticationResourceDefinition.USERNAME_LOAD.resolveModelAttribute(context,ldap);
  final String usernameLoad=node.isDefined() ? node.asString() : null;
  final boolean recursive=LdapAuthenticationResourceDefinition.RECURSIVE.resolveModelAttribute(context,ldap).asBoolean();
  final boolean allowEmptyPasswords=LdapAuthenticationResourceDefinition.ALLOW_EMPTY_PASSWORDS.resolveModelAttribute(context,ldap).asBoolean();
  final String userDn=LdapAuthenticationResourceDefinition.USER_DN.resolveModelAttribute(context,ldap).asString();
  UserLdapCallbackHandler ldapCallbackHandler=new UserLdapCallbackHandler(allowEmptyPasswords,shareConnection);
  final LdapSearcher<LdapEntry,String> userSearcher;
  if (usernameAttribute != null) {
    userSearcher=LdapUserSearcherFactory.createForUsernameFilter(baseDn,recursive,userDn,usernameAttribute,usernameLoad);
  }
 else {
    userSearcher=LdapUserSearcherFactory.createForAdvancedFilter(baseDn,recursive,userDn,advancedFilter,usernameLoad);
  }
  final LdapCacheService<LdapEntry,String> cacheService=createCacheService(context,userSearcher,ldap.get(CACHE));
  ServiceName userSearcherCacheName=LdapSearcherCache.ServiceUtil.createServiceName(true,true,realmName);
  ServiceController<LdapSearcherCache<LdapEntry,String>> cacheServiceController=serviceTarget.addService(userSearcherCacheName,cacheService).setInitialMode(ON_DEMAND).install();
  newControllers.add(cacheServiceController);
  ServiceBuilder<?> ldapBuilder=serviceTarget.addService(ldapServiceName,ldapCallbackHandler);
  String connectionManager=LdapAuthenticationResourceDefinition.CONNECTION.resolveModelAttribute(context,ldap).asString();
  LdapConnectionManagerService.ServiceUtil.addDependency(ldapBuilder,ldapCallbackHandler.getConnectionManagerInjector(),connectionManager,false);
  LdapSearcherCache.ServiceUtil.addDependency(ldapBuilder,LdapSearcherCache.class,ldapCallbackHandler.getLdapUserSearcherInjector(),true,true,realmName);
  final ServiceController<?> serviceController=ldapBuilder.setInitialMode(ON_DEMAND).install();
  if (newControllers != null) {
    newControllers.add(serviceController);
  }
  CallbackHandlerService.ServiceUtil.addDependency(realmBuilder,injector,ldapServiceName,false);
}
