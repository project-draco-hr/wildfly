{
  ServiceName ldapServiceName=UserLdapCallbackHandler.ServiceUtil.createServiceName(realmName);
  final String baseDn=LdapAuthenticationResourceDefinition.BASE_DN.resolveModelAttribute(context,ldap).asString();
  ModelNode node=LdapAuthenticationResourceDefinition.USERNAME_FILTER.resolveModelAttribute(context,ldap);
  final String usernameAttribute=node.isDefined() ? node.asString() : null;
  node=LdapAuthenticationResourceDefinition.ADVANCED_FILTER.resolveModelAttribute(context,ldap);
  final String advancedFilter=node.isDefined() ? node.asString() : null;
  final boolean recursive=LdapAuthenticationResourceDefinition.RECURSIVE.resolveModelAttribute(context,ldap).asBoolean();
  final boolean allowEmptyPasswords=LdapAuthenticationResourceDefinition.ALLOW_EMPTY_PASSWORDS.resolveModelAttribute(context,ldap).asBoolean();
  final String userDn=LdapAuthenticationResourceDefinition.USER_DN.resolveModelAttribute(context,ldap).asString();
  UserLdapCallbackHandler ldapCallbackHandler=new UserLdapCallbackHandler(allowEmptyPasswords,shareConnection);
  final Service<LdapUserSearcher> userSearcherService;
  if (usernameAttribute != null) {
    userSearcherService=LdapUserSearcherService.createForUsernameFilter(baseDn,recursive,userDn,usernameAttribute);
  }
 else {
    userSearcherService=LdapUserSearcherService.createForAdvancedFilter(baseDn,recursive,userDn,advancedFilter);
  }
  ServiceName userSearcherName=LdapUserSearcher.ServiceUtil.createServiceName(true,realmName);
  ServiceController<LdapUserSearcher> userSearcherController=serviceTarget.addService(userSearcherName,userSearcherService).setInitialMode(ON_DEMAND).install();
  newControllers.add(userSearcherController);
  ServiceBuilder<?> ldapBuilder=serviceTarget.addService(ldapServiceName,ldapCallbackHandler);
  String connectionManager=LdapAuthenticationResourceDefinition.CONNECTION.resolveModelAttribute(context,ldap).asString();
  LdapConnectionManagerService.ServiceUtil.addDependency(ldapBuilder,ldapCallbackHandler.getConnectionManagerInjector(),connectionManager,false);
  LdapUserSearcher.ServiceUtil.addDependency(ldapBuilder,ldapCallbackHandler.getLdapUserSearcherInjector(),true,realmName);
  final ServiceController<?> serviceController=ldapBuilder.setInitialMode(ON_DEMAND).install();
  if (newControllers != null) {
    newControllers.add(serviceController);
  }
  CallbackHandlerService.ServiceUtil.addDependency(realmBuilder,injector,ldapServiceName,false);
}
