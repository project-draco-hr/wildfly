{
  ServiceName ldapServiceName=realmServiceName.append(UserLdapCallbackHandler.SERVICE_SUFFIX);
  final String baseDn=LdapAuthenticationResourceDefinition.BASE_DN.resolveModelAttribute(context,ldap).asString();
  ModelNode node=LdapAuthenticationResourceDefinition.USERNAME_FILTER.resolveModelAttribute(context,ldap);
  final String usernameAttribute=node.isDefined() ? node.asString() : null;
  node=LdapAuthenticationResourceDefinition.ADVANCED_FILTER.resolveModelAttribute(context,ldap);
  final String advancedFilter=node.isDefined() ? node.asString() : null;
  final boolean recursive=LdapAuthenticationResourceDefinition.RECURSIVE.resolveModelAttribute(context,ldap).asBoolean();
  final boolean allowEmptyPasswords=LdapAuthenticationResourceDefinition.ALLOW_EMPTY_PASSWORDS.resolveModelAttribute(context,ldap).asBoolean();
  final String userDn=LdapAuthenticationResourceDefinition.USER_DN.resolveModelAttribute(context,ldap).asString();
  UserLdapCallbackHandler ldapCallbackHandler=new UserLdapCallbackHandler(baseDn,usernameAttribute,advancedFilter,recursive,userDn,allowEmptyPasswords);
  ServiceBuilder<?> ldapBuilder=serviceTarget.addService(ldapServiceName,ldapCallbackHandler);
  String connectionManager=LdapAuthenticationResourceDefinition.CONNECTION.resolveModelAttribute(context,ldap).asString();
  ldapBuilder.addDependency(LdapConnectionManagerService.BASE_SERVICE_NAME.append(connectionManager),ConnectionManager.class,ldapCallbackHandler.getConnectionManagerInjector());
  final ServiceController<?> serviceController=ldapBuilder.setInitialMode(ON_DEMAND).install();
  if (newControllers != null) {
    newControllers.add(serviceController);
  }
  return ldapServiceName;
}
