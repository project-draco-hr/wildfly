{
  ssl=(ssl == null) ? new ModelNode() : ssl;
  ServiceName sslServiceName=SSLIdentity.ServiceUtil.createServiceName(realmName);
  ServiceName keystoreServiceName=null;
  KeyPair pair=null;
  if (ssl.hasDefined(KEYSTORE_PATH)) {
    keystoreServiceName=FileKeystore.ServiceUtil.createKeystoreServiceName(realmName);
    pair=addFileKeystoreService(context,ssl,true,keystoreServiceName,serviceTarget,newControllers);
  }
  ServiceName truststoreServiceName=null;
  if (trustStore != null) {
    truststoreServiceName=FileKeystore.ServiceUtil.createTrusttoreServiceName(realmName);
    addFileKeystoreService(context,trustStore,false,truststoreServiceName,serviceTarget,newControllers);
  }
  String protocol=SSLServerIdentityResourceDefinition.PROTOCOL.resolveModelAttribute(context,ssl).asString();
  SSLIdentityService sslIdentityService=new SSLIdentityService(protocol,pair == null ? null : pair.keystorePassword,pair == null ? null : pair.keyPassword);
  ServiceBuilder<?> sslBuilder=serviceTarget.addService(sslServiceName,sslIdentityService);
  if (keystoreServiceName != null) {
    FileKeystore.ServiceUtil.addDependency(sslBuilder,sslIdentityService.getKeyStoreInjector(),keystoreServiceName,false);
  }
  if (truststoreServiceName != null) {
    FileKeystore.ServiceUtil.addDependency(sslBuilder,sslIdentityService.getTrustStoreInjector(),truststoreServiceName,false);
  }
  final ServiceController<?> serviceController=sslBuilder.setInitialMode(ON_DEMAND).install();
  if (newControllers != null) {
    newControllers.add(serviceController);
  }
  SSLIdentity.ServiceUtil.addDependency(realmBuilder,injector,realmName,false);
}
