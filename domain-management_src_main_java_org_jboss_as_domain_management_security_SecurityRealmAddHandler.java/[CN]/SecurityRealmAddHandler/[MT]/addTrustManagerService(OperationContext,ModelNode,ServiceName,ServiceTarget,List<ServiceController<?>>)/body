{
  final ServiceBuilder<TrustManager[]> serviceBuilder;
  char[] keystorePassword=KeystoreAttributes.KEYSTORE_PASSWORD.resolveModelAttribute(context,ssl).asString().toCharArray();
  String provider=KeystoreAttributes.KEYSTORE_PROVIDER.resolveModelAttribute(context,ssl).asString();
  if (JKS.equals(provider) == false) {
    ProviderTrustManagerService trustManagerService=new ProviderTrustManagerService(provider,keystorePassword);
    serviceBuilder=serviceTarget.addService(serviceName,trustManagerService);
  }
 else {
    String path=KeystoreAttributes.KEYSTORE_PATH.resolveModelAttribute(context,ssl).asString();
    FileTrustManagerService trustManagerService=new FileTrustManagerService(path,keystorePassword);
    serviceBuilder=serviceTarget.addService(serviceName,trustManagerService);
    ModelNode relativeTo=KeystoreAttributes.KEYSTORE_RELATIVE_TO.resolveModelAttribute(context,ssl);
    if (relativeTo.isDefined()) {
      serviceBuilder.addDependency(pathName(relativeTo.asString()),String.class,trustManagerService.getRelativeToInjector());
    }
  }
  final ServiceController<?> serviceController=serviceBuilder.setInitialMode(ON_DEMAND).install();
  if (controllers != null) {
    controllers.add(serviceController);
  }
}
