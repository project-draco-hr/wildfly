{
  final ModelNode authentication=model.hasDefined(AUTHENTICATION) ? model.get(AUTHENTICATION) : null;
  final ModelNode authorization=model.hasDefined(AUTHORIZATION) ? model.get(AUTHORIZATION) : null;
  final ModelNode serverIdentities=model.hasDefined(SERVER_IDENTITY) ? model.get(SERVER_IDENTITY) : null;
  final ServiceTarget serviceTarget=context.getServiceTarget();
  final SecurityRealmService securityRealmService=new SecurityRealmService(realmName);
  final ServiceName realmServiceName=SecurityRealmService.BASE_SERVICE_NAME.append(realmName);
  ServiceBuilder<?> realmBuilder=serviceTarget.addService(realmServiceName,securityRealmService);
  ServiceName authenticationName=null;
  ServiceName authorizationName=null;
  ModelNode authTruststore=null;
  if (authentication != null) {
    if (authentication.hasDefined(TRUSTSTORE)) {
      authTruststore=authentication.require(TRUSTSTORE);
      ServiceName ccName=addClientCertService(realmServiceName,securityRealmService,serviceTarget,newControllers);
      realmBuilder.addDependency(ccName);
    }
    if (authentication.hasDefined(LOCAL)) {
      ServiceName localName=addLocalService(authentication.require(LOCAL),realmServiceName,securityRealmService,serviceTarget,newControllers);
      realmBuilder.addDependency(localName);
    }
    if (authentication.hasDefined(JAAS)) {
      authenticationName=addJaasService(authentication.require(JAAS),realmServiceName,securityRealmService,serviceTarget,newControllers,context.isNormalServer());
    }
 else     if (authentication.hasDefined(LDAP)) {
      authenticationName=addLdapService(authentication.require(LDAP),realmServiceName,securityRealmService,serviceTarget,newControllers);
    }
 else     if (authentication.hasDefined(PROPERTIES)) {
      authenticationName=addPropertiesAuthenticationService(authentication.require(PROPERTIES),realmServiceName,realmName,securityRealmService,serviceTarget,newControllers);
    }
 else     if (authentication.hasDefined(USERS)) {
      authenticationName=addUsersService(context,authentication.require(USERS),realmServiceName,realmName,securityRealmService,serviceTarget,newControllers);
    }
  }
  if (authorization != null) {
    if (authorization.hasDefined(PROPERTIES)) {
      authorizationName=addPropertiesAuthorizationService(authorization.require(PROPERTIES),realmServiceName,realmName,serviceTarget,newControllers);
    }
  }
  if (authenticationName != null) {
    realmBuilder.addDependency(authenticationName);
  }
  if (authorizationName != null) {
    realmBuilder.addDependency(authorizationName,SubjectSupplemental.class,securityRealmService.getSubjectSupplementalInjector());
  }
  ModelNode ssl=null;
  if (serverIdentities != null) {
    if (serverIdentities.hasDefined(SSL)) {
      ssl=serverIdentities.require(SSL);
    }
    if (serverIdentities.hasDefined(SECRET)) {
      ServiceName secretServiceName=addSecretService(context,serverIdentities.require(SECRET),realmServiceName,serviceTarget,newControllers);
      realmBuilder.addDependency(secretServiceName,CallbackHandlerFactory.class,securityRealmService.getSecretCallbackFactory());
    }
  }
  if (ssl != null || authTruststore != null) {
    ServiceName sslServiceName=addSSLService(context,ssl,authTruststore,realmServiceName,serviceTarget,newControllers);
    realmBuilder.addDependency(sslServiceName,SSLIdentityService.class,securityRealmService.getSSLIdentityInjector());
  }
  realmBuilder.setInitialMode(ServiceController.Mode.ON_DEMAND);
  ServiceController<?> sc=realmBuilder.install();
  if (newControllers != null) {
    newControllers.add(sc);
  }
}
