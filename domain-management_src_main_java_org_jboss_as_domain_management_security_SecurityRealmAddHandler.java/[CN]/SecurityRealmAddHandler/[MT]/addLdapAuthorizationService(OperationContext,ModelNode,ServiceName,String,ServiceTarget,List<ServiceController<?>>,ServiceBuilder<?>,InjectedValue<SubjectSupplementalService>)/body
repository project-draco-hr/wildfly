{
  ServiceName ldapServiceName=realmServiceName.append(LdapSubjectSupplemental.SERVICE_SUFFIX);
  final String baseDn=LdapAuthorizationResourceDefinition.BASE_DN.resolveModelAttribute(context,ldap).asString();
  ModelNode node=LdapAuthorizationResourceDefinition.USERNAME.resolveModelAttribute(context,ldap);
  final String usernameAttribute=node.isDefined() ? node.asString() : null;
  node=LdapAuthorizationResourceDefinition.ADVANCED_FILTER.resolveModelAttribute(context,ldap);
  final String advancedFilter=node.isDefined() ? node.asString() : null;
  final boolean recursive=LdapAuthorizationResourceDefinition.RECURSIVE.resolveModelAttribute(context,ldap).asBoolean();
  final boolean reverseGroup=LdapAuthorizationResourceDefinition.REVERSE_GROUP.resolveModelAttribute(context,ldap).asBoolean();
  final String rolesDn=LdapAuthorizationResourceDefinition.GROUPS_DN.resolveModelAttribute(context,ldap).asString();
  final String pattern=LdapAuthorizationResourceDefinition.PATTERN.resolveModelAttribute(context,ldap).asString();
  final String userDn=LdapAuthorizationResourceDefinition.USER_DN.resolveModelAttribute(context,ldap).asString();
  ModelNode groupNode=LdapAuthorizationResourceDefinition.GROUP.resolveModelAttribute(context,ldap);
  final int group=groupNode.isDefined() ? LdapAuthorizationResourceDefinition.GROUP.resolveModelAttribute(context,ldap).asInt() : 0;
  final ModelNode resultPatternNode=LdapAuthorizationResourceDefinition.RESULT_PATTERN.resolveModelAttribute(context,ldap);
  final String resultPattern=resultPatternNode.isDefined() ? resultPatternNode.asString() : null;
  LdapSubjectSupplemental ldapSubjectHandler=new LdapSubjectSupplemental(recursive,rolesDn,baseDn,userDn,usernameAttribute,advancedFilter,pattern,group,resultPattern,reverseGroup);
  ServiceBuilder<?> ldapBuilder=serviceTarget.addService(ldapServiceName,ldapSubjectHandler);
  String connectionManager=LdapAuthorizationResourceDefinition.CONNECTION.resolveModelAttribute(context,ldap).asString();
  LdapConnectionManagerService.ServiceUtil.addDependency(ldapBuilder,ldapSubjectHandler.getConnectionManagerInjector(),connectionManager,false);
  final ServiceController<?> serviceController=ldapBuilder.setInitialMode(ON_DEMAND).install();
  if (newControllers != null) {
    newControllers.add(serviceController);
  }
  SubjectSupplementalService.ServiceUtil.addDependency(realmBuilder,injector,ldapServiceName,false);
}
