{
  if ((ldapServerBean == null) || ldapServerBean.isDisabled()) {
    return null;
  }
  LdapServer ldapServer=new LdapServer();
  ldapServer.setDirectoryService(directoryService);
  ldapServer.setEnabled(true);
  ldapServer.setServiceId(ldapServerBean.getServerId());
  ldapServer.setSearchBaseDn(ldapServerBean.getSearchBaseDn().getName());
  ldapServer.setKeystoreFile(ldapServerBean.getLdapServerKeystoreFile());
  ldapServer.setCertificatePassword(ldapServerBean.getLdapServerCertificatePassword());
  ldapServer.setConfidentialityRequired(ldapServerBean.isLdapServerConfidentialityRequired());
  ldapServer.setMaxSizeLimit(ldapServerBean.getLdapServerMaxSizeLimit());
  ldapServer.setMaxTimeLimit(ldapServerBean.getLdapServerMaxTimeLimit());
  ldapServer.setSaslHost(ldapServerBean.getLdapServerSaslHost());
  ldapServer.setSaslPrincipal(ldapServerBean.getLdapServerSaslPrincipal());
  ldapServer.setSaslRealms(ldapServerBean.getLdapServerSaslRealms());
  Transport[] transports=createTransports(ldapServerBean.getTransports());
  ldapServer.setTransports(transports);
  for (  SaslMechHandlerBean saslMechHandlerBean : ldapServerBean.getSaslMechHandlers()) {
    if (saslMechHandlerBean.isEnabled()) {
      String mechanism=saslMechHandlerBean.getSaslMechName();
      ldapServer.addSaslMechanismHandler(mechanism,createSaslMechHandler(saslMechHandlerBean));
    }
  }
  for (  ExtendedOpHandlerBean extendedpHandlerBean : ldapServerBean.getExtendedOps()) {
    if (extendedpHandlerBean.isEnabled()) {
      try {
        Class<?> extendedOpClass=Class.forName(extendedpHandlerBean.getExtendedOpHandlerClass());
        @SuppressWarnings("rawtypes") ExtendedOperationHandler extOpHandler=(ExtendedOperationHandler)extendedOpClass.newInstance();
        ldapServer.addExtendedOperationHandler(extOpHandler);
      }
 catch (      Exception e) {
        String message="Failed to load and instantiate ExtendedOperationHandler implementation " + extendedpHandlerBean.getExtendedOpId() + ": "+ e.getMessage();
        LOG.error(message);
        throw new ConfigurationException(message);
      }
    }
  }
  String fqcn=ldapServerBean.getReplReqHandler();
  if (fqcn != null) {
    try {
      Class<?> replProvImplClz=Class.forName(fqcn);
      ReplicationRequestHandler rp=(ReplicationRequestHandler)replProvImplClz.newInstance();
      ldapServer.setReplicationReqHandler(rp);
    }
 catch (    Exception e) {
      String message="Failed to load and instantiate ReplicationRequestHandler implementation : " + fqcn;
      LOG.error(message);
      throw new ConfigurationException(message);
    }
  }
  ldapServer.setReplConsumers(createReplConsumers(ldapServerBean.getReplConsumers()));
  return ldapServer;
}
