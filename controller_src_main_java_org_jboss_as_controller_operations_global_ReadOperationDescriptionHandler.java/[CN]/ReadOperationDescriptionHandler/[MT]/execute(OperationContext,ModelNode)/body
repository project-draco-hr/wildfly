{
  String operationName=NAME.resolveModelAttribute(context,operation).asString();
  boolean accessControl=ACCESS_CONTROL.resolveModelAttribute(context,operation).asBoolean();
  final DescribedOp describedOp=getDescribedOp(context,operationName,operation,!accessControl);
  if (describedOp == null || (context.getProcessType() == ProcessType.DOMAIN_SERVER && !describedOp.flags.contains(OperationEntry.Flag.RUNTIME_ONLY))) {
    throw new OperationFailedException(new ModelNode().set(MESSAGES.operationNotRegistered(operationName,PathAddress.pathAddress(operation.require(OP_ADDR)))));
  }
 else {
    final ModelNode result=describedOp.description;
    Set<OperationEntry.Flag> flags=describedOp.flags;
    boolean readOnly=flags.contains(OperationEntry.Flag.READ_ONLY);
    result.get(READ_ONLY).set(readOnly);
    if (!readOnly) {
      if (flags.contains(OperationEntry.Flag.RESTART_ALL_SERVICES)) {
        result.get(RESTART_REQUIRED).set("all-services");
      }
 else       if (flags.contains(OperationEntry.Flag.RESTART_RESOURCE_SERVICES)) {
        result.get(RESTART_REQUIRED).set("resource-services");
      }
 else       if (flags.contains(OperationEntry.Flag.RESTART_JVM)) {
        result.get(RESTART_REQUIRED).set("jvm");
      }
    }
    boolean runtimeOnly=flags.contains(OperationEntry.Flag.RUNTIME_ONLY);
    result.get(RUNTIME_ONLY).set(runtimeOnly);
    if (accessControl) {
      final PathAddress address=PathAddress.pathAddress(operation.require(OP_ADDR));
      ModelNode operationToCheck=Util.createOperation(operationName,address);
      operationToCheck.get(OPERATION_HEADERS).set(operation.get(OPERATION_HEADERS));
      AuthorizationResult authorizationResult=context.authorizeOperation(operationToCheck);
      result.get(ACCESS_CONTROL.getName(),EXECUTE).set(authorizationResult.getDecision() == Decision.PERMIT);
    }
    context.getResult().set(result);
  }
  context.stepCompleted();
}
