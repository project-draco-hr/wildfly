{
  SessionFactory<Object,Object,Object> factory=mock(SessionFactory.class);
  SessionExpirationListener listener=mock(SessionExpirationListener.class);
  ImmutableSession validSession=mock(ImmutableSession.class);
  ImmutableSession expiredSession=mock(ImmutableSession.class);
  ImmutableSession invalidSession=mock(ImmutableSession.class);
  ImmutableSessionMetaData validMetaData=mock(ImmutableSessionMetaData.class);
  ImmutableSessionMetaData expiredMetaData=mock(ImmutableSessionMetaData.class);
  String missingSessionId="missing";
  String expiredSessionId="expired";
  String validSessionId="valid";
  Map.Entry<Object,Object> expiredValue=mock(Map.Entry.class);
  Map.Entry<Object,Object> validValue=mock(Map.Entry.class);
  Remover<String> subject=new ExpiredSessionRemover<>(factory,listener);
  when(factory.tryValue(missingSessionId)).thenReturn(null);
  when(factory.tryValue(expiredSessionId)).thenReturn(expiredValue);
  when(factory.tryValue(validSessionId)).thenReturn(validValue);
  when(factory.createImmutableSession(expiredSessionId,expiredValue)).thenReturn(expiredSession);
  when(factory.createImmutableSession(validSessionId,validValue)).thenReturn(validSession);
  when(expiredSession.getMetaData()).thenReturn(expiredMetaData);
  when(validSession.getMetaData()).thenReturn(validMetaData);
  when(expiredMetaData.isExpired()).thenReturn(true);
  when(validMetaData.isExpired()).thenReturn(false);
  subject.remove(missingSessionId);
  subject.remove(expiredSessionId);
  subject.remove(validSessionId);
  verify(factory).remove(expiredSessionId);
  verify(factory,never()).remove(missingSessionId);
  verify(factory,never()).remove(validSessionId);
  verify(listener).sessionExpired(expiredSession);
  verify(listener,never()).sessionExpired(validSession);
  verify(listener,never()).sessionExpired(invalidSession);
}
