{
  runtimeValidator.validate(operation.resolve());
  context.addStep(new AbstractDeploymentChainStep(){
    protected void execute(    DeploymentProcessorTarget processorTarget){
      javax.persistence.spi.PersistenceProviderResolverHolder.setPersistenceProviderResolver(PersistenceProviderResolverImpl.getInstance());
      PersistenceProviderAdapterRegistry.putPersistenceProviderAdaptor("org.hibernate.ejb.HibernatePersistence",new HibernatePersistenceProviderAdaptor());
      processorTarget.addDeploymentProcessor(Phase.PARSE,Phase.PARSE_PERSISTENCE_UNIT,new PersistenceUnitParseProcessor());
      processorTarget.addDeploymentProcessor(Phase.PARSE,Phase.PARSE_PERSISTENCE_ANNOTATION,new JPAAnnotationParseProcessor());
      processorTarget.addDeploymentProcessor(Phase.DEPENDENCIES,Phase.DEPENDENCIES_JPA,new JPADependencyProcessor());
      processorTarget.addDeploymentProcessor(Phase.POST_MODULE,Phase.POST_MODULE_PERSISTENCE_REF,new PersistenceRefProcessor());
      processorTarget.addDeploymentProcessor(Phase.INSTALL,Phase.INSTALL_PERSISTENTUNIT,new PersistenceUnitDeploymentProcessor());
    }
  }
,OperationContext.Stage.RUNTIME);
  final ModelNode defaultDSNode=operation.require(CommonAttributes.DEFAULT_DATASOURCE);
  final String dataSourceName=defaultDSNode.resolve().asString();
  final ServiceTarget target=context.getServiceTarget();
  newControllers.add(JPAService.addService(target,dataSourceName,verificationHandler));
}
