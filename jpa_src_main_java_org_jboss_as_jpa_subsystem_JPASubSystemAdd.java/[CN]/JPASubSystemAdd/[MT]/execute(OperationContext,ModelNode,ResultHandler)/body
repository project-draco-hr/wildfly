{
  modelValidator.validate(operation);
  ModelNode defaultDSNode=operation.require(CommonAttributes.DEFAULT_DATASOURCE);
  context.getSubModel().get(CommonAttributes.DEFAULT_DATASOURCE).set(defaultDSNode);
  final ModelNode compensatingOperation=Util.getResourceRemoveOperation(operation.require(OP_ADDR));
  if (context instanceof BootOperationContext) {
    javax.persistence.spi.PersistenceProviderResolverHolder.setPersistenceProviderResolver(PersistenceProviderResolverImpl.getInstance());
    PersistenceProviderAdapterRegistry.putPersistenceProviderAdaptor("org.hibernate.ejb.HibernatePersistence",new HibernatePersistenceProviderAdaptor());
    final BootOperationContext updateContext=(BootOperationContext)context;
    updateContext.addDeploymentProcessor(Phase.PARSE,Phase.PARSE_PERSISTENCE_UNIT,new PersistenceUnitParseProcessor());
    updateContext.addDeploymentProcessor(Phase.PARSE,Phase.PARSE_PERSISTENCE_ANNOTATION,new JPAAnnotationParseProcessor());
    updateContext.addDeploymentProcessor(Phase.DEPENDENCIES,Phase.DEPENDENCIES_JPA,new JPADependencyProcessor());
    updateContext.addDeploymentProcessor(Phase.POST_MODULE,Phase.POST_MODULE_PERSISTENCE_REF,new PersistenceRefProcessor());
    updateContext.addDeploymentProcessor(Phase.INSTALL,Phase.INSTALL_PERSISTENTUNIT,new PersistenceUnitDeploymentProcessor());
  }
  if (context.getRuntimeContext() != null) {
    runtimeValidator.validate(operation.resolve());
    final String dataSourceName=defaultDSNode.resolve().asString();
    context.getRuntimeContext().setRuntimeTask(new RuntimeTask(){
      @Override public void execute(      RuntimeTaskContext context) throws OperationFailedException {
        final ServiceTarget target=context.getServiceTarget();
        JPAService.addService(target,dataSourceName);
        resultHandler.handleResultComplete();
      }
    }
);
  }
 else {
    resultHandler.handleResultComplete();
  }
  return new BasicOperationResult(compensatingOperation);
}
