{
  final ModelNode operation=new ModelNode();
  operation.get(OP).set(READ_CHILDREN_NAMES_OPERATION);
  operation.get(OP_ADDR).setEmptyList();
  operation.get(CHILD_TYPE).set(SUBSYSTEM);
  final ModelNode subsystemsResult=executeForResult(operation);
  for (  final ModelNode subsystem : subsystemsResult.asList()) {
    final String name=subsystem.asString();
    if (ignored.contains(name)) {
      continue;
    }
    final ModelNode address=new ModelNode();
    address.add(SUBSYSTEM,name);
    final ModelNode describe=new ModelNode();
    describe.get(OP).set(DESCRIBE);
    describe.get(OP_ADDR).set(address);
    executeForResult(describe);
    final ModelNode operationNames=new ModelNode();
    operationNames.get(OP).set(READ_OPERATION_NAMES_OPERATION);
    operationNames.get(OP_ADDR).set(address);
    final ModelNode operationNamesResult=executeForResult(operationNames);
    boolean found=false;
    for (    final ModelNode operationName : operationNamesResult.asList()) {
      if (DESCRIBE.equals(operationName.asString())) {
        found=true;
        break;
      }
    }
    Assert.assertFalse(String.format("'describe' operation not registered as private in subsystem '%s'",name),found);
  }
}
