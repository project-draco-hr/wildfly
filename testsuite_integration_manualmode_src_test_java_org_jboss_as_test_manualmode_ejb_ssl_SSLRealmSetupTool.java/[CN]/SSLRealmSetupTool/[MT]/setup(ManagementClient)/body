{
  ModelNode secRealmAddress=getSecurityRealmsAddress();
  secRealmAddress.protect();
  ModelNode operation=new ModelNode();
  operation.get(OP_ADDR).set(secRealmAddress);
  operation.get(OP).set(ADD);
  ModelNode result=managementClient.getControllerClient().execute(operation);
  log.infof("Adding security realm %s with result %s",SECURITY_REALM_NAME,result);
  Assert.assertEquals(SUCCESS,result.get(OUTCOME).asString());
  ClassLoader tccl=Thread.currentThread().getContextClassLoader();
  URL resourcesUrl=tccl.getResource("");
  String resourcePath=resourcesUrl.getPath();
  log.info("Path to resources is " + resourcePath);
  operation=new ModelNode();
  operation.get(OP_ADDR).set(getSecurityRealmsAddressSSLIdentity());
  operation.get(OP).set(ADD);
  operation.get("keystore-password").set(SERVER_KEYSTORE_PASSWORD);
  KEYSTORES_ABSOLUTE_PATH=resourcePath + KEYSTORES_RELATIVE_PATH;
  operation.get("keystore-path").set(KEYSTORES_ABSOLUTE_PATH + File.separator + SERVER_KEYSTORE_FILENAME);
  operation.get(OPERATION_HEADERS).get(ALLOW_RESOURCE_SERVICE_RESTART).set(true);
  result=managementClient.getControllerClient().execute(operation);
  log.infof("Setting server-identity ssl for realm %s (password %s, keystore path %s) with result %s",SECURITY_REALM_NAME,SERVER_KEYSTORE_PASSWORD,KEYSTORES_ABSOLUTE_PATH,result.get(OUTCOME));
  Assert.assertEquals(SUCCESS,result.get(OUTCOME).asString());
  operation=new ModelNode();
  operation.get(OP_ADDR).set(getSecurityRealmsAddressAuthentication());
  operation.get(OP).set(ADD);
  operation.get("keystore-path").set(resourcePath + "ejb3/ssl/jbossServer.keystore");
  operation.get("keystore-password").set(SERVER_KEYSTORE_PASSWORD);
  operation.get(OPERATION_HEADERS).get(ALLOW_RESOURCE_SERVICE_RESTART).set(true);
  result=managementClient.getControllerClient().execute(operation);
  Assert.assertEquals(SUCCESS,result.get(OUTCOME).asString());
  operation=new ModelNode();
  operation.get(OP).set(ADD);
  operation.get(OP_ADDR).add(SUBSYSTEM,"undertow");
  operation.get(OP_ADDR).add("server","default-server");
  operation.get(OP_ADDR).add("https-listener","testConnector");
  operation.get("socket-binding").set("https");
  operation.get("enabled").set(true);
  operation.get("security-realm").set(SECURITY_REALM_NAME);
  result=managementClient.getControllerClient().execute(operation);
  log.info("creating connector result " + result);
  Assert.assertEquals(SUCCESS,result.get(OUTCOME).asString());
  operation=new ModelNode();
  operation.get(OP_ADDR).set(SSLRealmSetupTool.getRemotingConnectorAddress());
  operation.get(OP).set(ADD);
  operation.get(SECURITY_REALM).set(SECURITY_REALM_NAME);
  operation.get(PROTOCOL).set("https-remoting");
  operation.get("connector-ref").set("testConnector");
  operation.get(OPERATION_HEADERS).get(ALLOW_RESOURCE_SERVICE_RESTART).set(true);
  result=managementClient.getControllerClient().execute(operation);
  log.infof("Adding HTTPS connector",result);
  Assert.assertEquals(result.toString(),SUCCESS,result.get(OUTCOME).asString());
}
