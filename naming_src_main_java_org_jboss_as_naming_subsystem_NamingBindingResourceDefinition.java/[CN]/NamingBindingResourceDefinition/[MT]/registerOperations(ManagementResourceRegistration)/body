{
  super.registerOperations(resourceRegistration);
  SimpleOperationDefinitionBuilder builder=new SimpleOperationDefinitionBuilder(NamingSubsystemModel.REBIND,getResourceDescriptionResolver()).addParameter(BINDING_TYPE).addParameter(TYPE).addParameter(VALUE).addParameter(CLASS).addParameter(MODULE).addParameter(LOOKUP).addParameter(ENVIRONMENT);
  resourceRegistration.registerOperationHandler(builder.build(),new OperationStepHandler(){
    @Override public void execute(    OperationContext context,    ModelNode operation) throws OperationFailedException {
      context.addStep(new OperationStepHandler(){
        @Override public void execute(        OperationContext context,        ModelNode operation) throws OperationFailedException {
          validateResourceModel(operation,false);
          Resource resource=context.readResourceForUpdate(PathAddress.EMPTY_ADDRESS);
          ModelNode model=resource.getModel();
          for (          AttributeDefinition attr : ATTRIBUTES) {
            attr.validateAndSet(operation,model);
          }
          context.addStep(new OperationStepHandler(){
            @Override public void execute(            OperationContext context,            ModelNode operation) throws OperationFailedException {
              final String name=context.getCurrentAddressValue();
              final ContextNames.BindInfo bindInfo=ContextNames.bindInfoFor(name);
              ServiceController<ManagedReferenceFactory> service=(ServiceController<ManagedReferenceFactory>)context.getServiceRegistry(false).getService(bindInfo.getBinderServiceName());
              if (service == null) {
                context.reloadRequired();
                return;
              }
              NamingBindingAdd.INSTANCE.doRebind(context,operation,(BinderService)service.getService());
            }
          }
,OperationContext.Stage.RUNTIME);
        }
      }
,OperationContext.Stage.MODEL);
    }
  }
);
}
