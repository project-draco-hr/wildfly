{
  updateModel(context,operation);
  if (!context.isBooting() && requiresRuntime(context)) {
    context.addStep(new OperationStepHandler(){
      @Override public void execute(      OperationContext context,      ModelNode operation) throws OperationFailedException {
        PathAddress address=getParentAddress(PathAddress.pathAddress(operation.require(OP_ADDR)));
        ServiceName serviceName=getParentServiceName(address);
        final ServiceController<?> service=serviceName != null ? context.getServiceRegistry(false).getService(serviceName) : null;
        ModelNode parentModel=null;
        boolean servicesRestarted=false;
        final boolean reloadRequired=service != null && !isResourceServiceRestartAllowed(context,service);
        if (reloadRequired) {
          context.reloadRequired();
        }
 else         if (service != null) {
          parentModel=getModel(context,address);
          if (parentModel != null && context.markResourceRestarted(address,this)) {
            removeServices(context,serviceName,parentModel);
            final ServiceVerificationHandler verificationHandler=new ServiceVerificationHandler();
            recreateParentService(context,address,parentModel,verificationHandler);
            context.addStep(verificationHandler,OperationContext.Stage.VERIFY);
            servicesRestarted=true;
          }
        }
        final ModelNode invalidatedParentModel=servicesRestarted ? parentModel : null;
        context.completeStep(new OperationContext.RollbackHandler(){
          @Override public void handleRollback(          OperationContext context,          ModelNode operation){
            if (reloadRequired) {
              context.revertReloadRequired();
            }
 else             if (invalidatedParentModel != null) {
              recoverServices(context,operation,invalidatedParentModel);
            }
          }
        }
);
      }
    }
,OperationContext.Stage.RUNTIME);
  }
  context.stepCompleted();
}
