{
  final IORSecurityConfigMetaData securityConfigMetaData=new IORSecurityConfigMetaData();
  final IORSASContextMetaData sasContextMetaData=new IORSASContextMetaData();
  sasContextMetaData.setCallerPropagation(IIOPRootDefinition.CALLER_PROPAGATION.resolveModelAttribute(context,resourceModel).asString());
  securityConfigMetaData.setSasContext(sasContextMetaData);
  final IORASContextMetaData asContextMetaData=new IORASContextMetaData();
  asContextMetaData.setAuthMethod(IIOPRootDefinition.AUTH_METHOD.resolveModelAttribute(context,resourceModel).asString());
  if (resourceModel.hasDefined(IIOPRootDefinition.REALM.getName())) {
    asContextMetaData.setRealm(IIOPRootDefinition.REALM.resolveModelAttribute(context,resourceModel).asString());
  }
  asContextMetaData.setRequired(IIOPRootDefinition.REQUIRED.resolveModelAttribute(context,resourceModel).asBoolean());
  securityConfigMetaData.setAsContext(asContextMetaData);
  final IORTransportConfigMetaData transportConfigMetaData=new IORTransportConfigMetaData();
  transportConfigMetaData.setIntegrity(IIOPRootDefinition.INTEGRITY.resolveModelAttribute(context,resourceModel).asString());
  transportConfigMetaData.setConfidentiality(IIOPRootDefinition.CONFIDENTIALITY.resolveModelAttribute(context,resourceModel).asString());
  transportConfigMetaData.setEstablishTrustInTarget(IIOPRootDefinition.TRUST_IN_TARGET.resolveModelAttribute(context,resourceModel).asString());
  transportConfigMetaData.setEstablishTrustInClient(IIOPRootDefinition.TRUST_IN_CLIENT.resolveModelAttribute(context,resourceModel).asString());
  transportConfigMetaData.setDetectMisordering(IIOPRootDefinition.DETECT_MISORDERING.resolveModelAttribute(context,resourceModel).asString());
  transportConfigMetaData.setDetectReplay(IIOPRootDefinition.DETECT_REPLAY.resolveModelAttribute(context,resourceModel).asString());
  securityConfigMetaData.setTransportConfig(transportConfigMetaData);
  return securityConfigMetaData;
}
