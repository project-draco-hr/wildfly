{
  super("deployment-overlay",true);
  l=new ArgumentWithoutValue(this,"-l"){
    @Override public boolean canAppearNext(    CommandContext ctx) throws CommandFormatException {
      final String actionStr=action.getValue(ctx.getParsedCommandLine());
      if (actionStr == null || "list-content".equals(actionStr) || "list-deployments".equals(actionStr)) {
        return super.canAppearNext(ctx);
      }
      return false;
    }
  }
;
  action=new ArgumentWithValue(this,new SimpleTabCompleter(new String[]{"add","link","list-content","list-deployments","remove","upload"}),0,"--action");
  name=new ArgumentWithValue(this,new DefaultCompleter(new CandidatesProvider(){
    @Override public Collection<String> getAllCandidates(    CommandContext ctx){
      final ModelControllerClient client=ctx.getModelControllerClient();
      if (client == null) {
        return Collections.emptyList();
      }
      final ModelNode op=new ModelNode();
      op.get(Util.OPERATION).set(Util.READ_CHILDREN_NAMES);
      op.get(Util.ADDRESS).setEmptyList();
      op.get(Util.CHILD_TYPE).set(Util.DEPLOYMENT_OVERLAY);
      final ModelNode response;
      try {
        response=client.execute(op);
      }
 catch (      IOException e) {
        return Collections.emptyList();
      }
      final ModelNode result=response.get(Util.RESULT);
      if (!result.isDefined()) {
        return Collections.emptyList();
      }
      final List<String> names=new ArrayList<String>();
      for (      ModelNode node : result.asList()) {
        names.add(node.asString());
      }
      return names;
    }
  }
),"--name");
  name.addRequiredPreceding(action);
  final FilenameTabCompleter pathCompleter=Util.isWindows() ? new WindowsFilenameTabCompleter(ctx) : new DefaultFilenameTabCompleter(ctx);
  content=new ArgumentWithValue(this,new CommandLineCompleter(){
    @Override public int complete(    CommandContext ctx,    String buffer,    int cursor,    List<String> candidates){
      final String actionStr=action.getValue(ctx.getParsedCommandLine());
      if ("add".equals(actionStr) || "upload".equals(actionStr)) {
        int i=buffer.lastIndexOf(',');
        i=buffer.indexOf('=',i + 1);
        if (i < 0) {
          return -1;
        }
        final String path=buffer.substring(i + 1);
        int pathResult=pathCompleter.complete(ctx,path,0,candidates);
        if (pathResult < 0) {
          return -1;
        }
        return i + 1 + pathResult;
      }
 else       if ("remove".equals(actionStr)) {
        final String nameStr=name.getValue(ctx.getParsedCommandLine());
        if (nameStr == null) {
          return -1;
        }
        final List<String> existing;
        try {
          existing=loadContentFor(ctx.getModelControllerClient(),nameStr);
        }
 catch (        CommandLineException e) {
          return -1;
        }
        if (existing.isEmpty()) {
          return buffer.length();
        }
        candidates.addAll(existing);
        if (buffer.isEmpty()) {
          return 0;
        }
        final String[] specified=buffer.split(",+");
        candidates.removeAll(Arrays.asList(specified));
        if (buffer.charAt(buffer.length() - 1) == ',') {
          return buffer.length();
        }
        final String chunk=specified[specified.length - 1];
        for (int i=0; i < candidates.size(); ++i) {
          if (!candidates.get(i).startsWith(chunk)) {
            candidates.remove(i);
          }
        }
        return buffer.length() - chunk.length();
      }
 else {
        return -1;
      }
    }
  }
,"--content"){
    @Override public boolean canAppearNext(    CommandContext ctx) throws CommandFormatException {
      final String actionStr=action.getValue(ctx.getParsedCommandLine());
      if (actionStr == null) {
        return false;
      }
      if ("add".equals(actionStr) || "upload".equals(actionStr) || "remove".equals(actionStr)) {
        return super.canAppearNext(ctx);
      }
      return false;
    }
  }
;
  content.addRequiredPreceding(name);
  content.addCantAppearAfter(l);
  serverGroup=new ArgumentWithValue(this,new DefaultCompleter(new CandidatesProvider(){
    @Override public Collection<String> getAllCandidates(    CommandContext ctx){
      return Util.getServerGroups(ctx.getModelControllerClient());
    }
  }
),"--server-group"){
    @Override public boolean canAppearNext(    CommandContext ctx) throws CommandFormatException {
      if (!ctx.isDomainMode()) {
        return false;
      }
      final String actionStr=action.getValue(ctx.getParsedCommandLine());
      if (actionStr == null) {
        return false;
      }
      if ("add".equals(actionStr) || "link".equals(actionStr) || "remove".equals(actionStr)|| "list-deployments".equals(actionStr)) {
        return super.canAppearNext(ctx);
      }
      return false;
    }
  }
;
  serverGroup.addRequiredPreceding(name);
  deployment=new ArgumentWithValue(this,new CommandLineCompleter(){
    @Override public int complete(    CommandContext ctx,    String buffer,    int cursor,    List<String> candidates){
      final ModelControllerClient client=ctx.getModelControllerClient();
      if (client == null) {
        return -1;
      }
      final String actionStr=action.getValue(ctx.getParsedCommandLine());
      final List<String> existing;
      if ("add".equals(actionStr) || "link".equals(actionStr)) {
        existing=Util.getDeployments(client);
      }
 else       if ("remove".equals(actionStr)) {
        try {
          final String nameStr=name.getValue(ctx.getParsedCommandLine());
          if (nameStr == null) {
            return -1;
          }
          final String sg=serverGroup.getValue(ctx.getParsedCommandLine());
          if (ctx.isDomainMode() && sg == null) {
            return -1;
          }
          existing=loadLinkedDeployments(client,nameStr,sg);
        }
 catch (        CommandLineException e) {
          return -1;
        }
      }
 else {
        return -1;
      }
      if (existing.isEmpty()) {
        return buffer.length();
      }
      candidates.addAll(existing);
      if (buffer.isEmpty()) {
        return 0;
      }
      final String[] specified=buffer.split(",+");
      candidates.removeAll(Arrays.asList(specified));
      if (buffer.charAt(buffer.length() - 1) == ',') {
        return buffer.length();
      }
      final String chunk=specified[specified.length - 1];
      for (int i=0; i < candidates.size(); ++i) {
        if (!candidates.get(i).startsWith(chunk)) {
          candidates.remove(i);
        }
      }
      return buffer.length() - chunk.length();
    }
  }
,"--deployment"){
    @Override public boolean canAppearNext(    CommandContext ctx) throws CommandFormatException {
      if (ctx.isDomainMode()) {
        if (serverGroup.isPresent(ctx.getParsedCommandLine())) {
          return super.canAppearNext(ctx);
        }
        return false;
      }
      final String actionStr=action.getValue(ctx.getParsedCommandLine());
      if (actionStr == null) {
        return false;
      }
      if ("add".equals(actionStr) || "link".equals(actionStr) || "remove".equals(actionStr)) {
        return super.canAppearNext(ctx);
      }
      return false;
    }
  }
;
  deployment.addRequiredPreceding(name);
  deployment.addCantAppearAfter(l);
}
