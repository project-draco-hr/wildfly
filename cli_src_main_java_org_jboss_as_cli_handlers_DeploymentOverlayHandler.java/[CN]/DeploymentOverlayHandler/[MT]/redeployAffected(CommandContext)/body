{
  final ParsedCommandLine args=ctx.getParsedCommandLine();
  assertNotPresent(serverGroups,args);
  assertNotPresent(allServerGroups,args);
  assertNotPresent(allRelevantServerGroups,args);
  assertNotPresent(content,args);
  assertNotPresent(deployments,args);
  assertNotPresent(wildcards,args);
  final String overlay=name.getValue(args,true);
  final ModelControllerClient client=ctx.getModelControllerClient();
  final ModelNode redeployOp=new ModelNode();
  redeployOp.get(Util.OPERATION).set(Util.COMPOSITE);
  redeployOp.get(Util.ADDRESS).setEmptyList();
  final ModelNode steps=redeployOp.get(Util.STEPS);
  if (ctx.isDomainMode()) {
    throw new CommandFormatException("redeploy-affected in domain mode is not yet supported.");
  }
 else {
    final List<String> remainingDeployments=Util.getDeployments(client);
    if (remainingDeployments.isEmpty()) {
      return;
    }
    final ModelNode op=new ModelNode();
    final ModelNode addr=op.get(Util.ADDRESS);
    addr.add(Util.DEPLOYMENT_OVERLAY,overlay);
    op.get(Util.OPERATION).set(Util.READ_CHILDREN_RESOURCES);
    op.get(Util.CHILD_TYPE).set(Util.DEPLOYMENT);
    final ModelNode response;
    try {
      response=client.execute(op);
    }
 catch (    IOException e) {
      throw new CommandLineException("Failed to load the list of deployments for overlay " + overlay,e);
    }
    final ModelNode result=response.get(Util.RESULT);
    if (!result.isDefined()) {
      final String descr=Util.getFailureDescription(response);
      if (descr != null && descr.contains("JBAS014807")) {
        throw new CommandLineException("Overlay " + overlay + " is not linked to any deployment.");
      }
      throw new CommandLineException("Failed to load the list of deployments for overlay " + overlay + ": "+ response);
    }
    final List<Property> links=result.asPropertyList();
    if (links.isEmpty()) {
      return;
    }
    for (    Property link : links) {
      final String linkName=link.getName();
      final boolean regexp;
      final ModelNode linkValue=link.getValue();
      if (linkValue.has(Util.REGULAR_EXPRESSION)) {
        regexp=linkValue.get(Util.REGULAR_EXPRESSION).asBoolean();
      }
 else {
        regexp=false;
      }
      if (regexp) {
        final Pattern pattern=Pattern.compile(Util.wildcardToJavaRegex(linkName));
        final Iterator<String> i=remainingDeployments.iterator();
        while (i.hasNext()) {
          final String deployment=i.next();
          if (pattern.matcher(deployment).matches()) {
            i.remove();
            final ModelNode step=new ModelNode();
            step.get(Util.ADDRESS).add(Util.DEPLOYMENT,deployment);
            step.get(Util.OPERATION).set(Util.REDEPLOY);
            steps.add(step);
          }
        }
      }
 else {
        if (remainingDeployments.remove(linkName)) {
          final ModelNode step=new ModelNode();
          step.get(Util.ADDRESS).add(Util.DEPLOYMENT,linkName);
          step.get(Util.OPERATION).set(Util.REDEPLOY);
          steps.add(step);
        }
      }
    }
  }
  if (steps.asList().isEmpty()) {
    return;
  }
  try {
    ctx.printLine("redeploy request: " + redeployOp);
    final ModelNode result=client.execute(redeployOp);
    if (!Util.isSuccess(result)) {
      throw new CommandFormatException(Util.getFailureDescription(result));
    }
  }
 catch (  IOException e) {
    throw new CommandFormatException("Failed to redeploy affected deployments",e);
  }
}
