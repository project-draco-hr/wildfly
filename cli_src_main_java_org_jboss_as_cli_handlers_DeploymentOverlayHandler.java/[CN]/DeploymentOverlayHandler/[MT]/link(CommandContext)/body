{
  final ParsedCommandLine args=ctx.getParsedCommandLine();
  assertNotPresent(allRelevantServerGroups,args);
  final String name=this.name.getValue(args,true);
  final String[] deployments=getLinks(this.deployments,args);
  final String[] wildcards=getLinks(this.wildcards,args);
  if (deployments == null && wildcards == null) {
    throw new CommandFormatException("Either " + this.deployments.getFullName() + " or "+ this.wildcards.getFullName()+ " is required.");
  }
  final ModelNode composite=new ModelNode();
  composite.get(Util.OPERATION).set(Util.COMPOSITE);
  composite.get(Util.ADDRESS).setEmptyList();
  final ModelNode steps=composite.get(Util.STEPS);
  if (ctx.isDomainMode()) {
    final List<String> sg=getServerGroupsToLink(ctx);
    for (    String group : sg) {
      if (!Util.isValidPath(ctx.getModelControllerClient(),Util.SERVER_GROUP,group,Util.DEPLOYMENT_OVERLAY,name)) {
        final ModelNode op=new ModelNode();
        final ModelNode address=op.get(Util.ADDRESS);
        address.add(Util.SERVER_GROUP,group);
        address.add(Util.DEPLOYMENT_OVERLAY,name);
        op.get(Util.OPERATION).set(Util.ADD);
        steps.add(op);
      }
      if (deployments != null) {
        addLinkSteps(name,group,deployments,false,steps);
      }
      if (wildcards != null) {
        addLinkSteps(name,group,wildcards,true,steps);
      }
    }
  }
 else {
    if (deployments != null) {
      addLinkSteps(name,null,deployments,false,steps);
    }
    if (wildcards != null) {
      addLinkSteps(name,null,wildcards,true,steps);
    }
  }
  try {
    final ModelNode result=ctx.getModelControllerClient().execute(composite);
    if (!Util.isSuccess(result)) {
      throw new CommandFormatException(Util.getFailureDescription(result));
    }
  }
 catch (  IOException e) {
    throw new CommandFormatException("Failed to link overlay",e);
  }
}
