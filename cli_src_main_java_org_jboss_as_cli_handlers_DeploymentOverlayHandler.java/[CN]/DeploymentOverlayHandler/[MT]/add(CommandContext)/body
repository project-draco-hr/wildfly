{
  final ParsedCommandLine args=ctx.getParsedCommandLine();
  final String name=this.name.getValue(args,true);
  final String contentStr=content.getValue(args,true);
  final String[] contentPairs=contentStr.split(",+");
  if (contentPairs.length == 0) {
    throw new CommandFormatException("Overlay content is not specified.");
  }
  final String[] contentNames=new String[contentPairs.length];
  final File[] contentPaths=new File[contentPairs.length];
  for (int i=0; i < contentPairs.length; ++i) {
    final String pair=contentPairs[i];
    final int equalsIndex=pair.indexOf('=');
    if (equalsIndex < 0) {
      throw new CommandFormatException("Content pair is not following archive-path=fs-path format: '" + pair + "'");
    }
    contentNames[i]=pair.substring(0,equalsIndex);
    if (contentNames[i].length() == 0) {
      throw new CommandFormatException("The archive path is missing for the content '" + pair + "'");
    }
    final String path=pair.substring(equalsIndex + 1);
    if (path.length() == 0) {
      throw new CommandFormatException("The filesystem paths is missing for the content '" + pair + "'");
    }
    final File f=new File(path);
    if (!f.exists()) {
      throw new CommandFormatException("Content file doesn't exist " + f.getAbsolutePath());
    }
    contentPaths[i]=f;
  }
  final String[] deployments=deployment.getValue(args,true).split(",+");
  if (deployments.length == 0) {
    throw new CommandFormatException("Deployments are missing.");
  }
  final ModelControllerClient client=ctx.getModelControllerClient();
  final List<ModelNode> stepResponses;
{
    final ModelNode composite=new ModelNode();
    final OperationBuilder opBuilder=new OperationBuilder(composite);
    composite.get(Util.OPERATION).set(Util.COMPOSITE);
    composite.get(Util.ADDRESS).setEmptyList();
    final ModelNode steps=composite.get(Util.STEPS);
    for (int i=0; i < contentPaths.length; ++i) {
      final ModelNode op=new ModelNode();
      op.get(Util.ADDRESS).setEmptyList();
      op.get(Util.OPERATION).set(Util.UPLOAD_DEPLOYMENT_STREAM);
      op.get(Util.INPUT_STREAM_INDEX).set(i);
      opBuilder.addFileAsAttachment(contentPaths[i]);
      steps.add(op);
    }
    final Operation compositeOp=opBuilder.build();
    final ModelNode response;
    try {
      response=client.execute(compositeOp);
    }
 catch (    IOException e) {
      throw new CommandFormatException("Failed to upload content",e);
    }
 finally {
      try {
        compositeOp.close();
      }
 catch (      IOException e) {
      }
    }
    if (!response.hasDefined(Util.RESULT)) {
      throw new CommandFormatException("Upload response is missing result.");
    }
    stepResponses=response.get(Util.RESULT).asList();
  }
{
    final ModelNode composite=new ModelNode();
    composite.get(Util.OPERATION).set(Util.COMPOSITE);
    composite.get(Util.ADDRESS).setEmptyList();
    final ModelNode steps=composite.get(Util.STEPS);
    ModelNode op=new ModelNode();
    ModelNode address=op.get(Util.ADDRESS);
    address.add(Util.DEPLOYMENT_OVERLAY,name);
    op.get(Util.OPERATION).set(Util.ADD);
    steps.add(op);
    for (int i=0; i < contentNames.length; ++i) {
      final String contentName=contentNames[i];
      ModelNode result=stepResponses.get(i);
      result=result.get("step-" + (i + 1));
      if (!result.isDefined()) {
        throw new CommandFormatException("Upload step response is missing expected step-" + (i + 1) + " attribute: "+ result);
      }
      result=result.get(Util.RESULT);
      if (!result.isDefined()) {
        throw new CommandFormatException("Upload step response is missing result: " + result);
      }
      op=new ModelNode();
      address=op.get(Util.ADDRESS);
      address.add(Util.DEPLOYMENT_OVERLAY,name);
      address.add(Util.CONTENT,contentName);
      op.get(Util.OPERATION).set(Util.ADD);
      op.get(Util.CONTENT).set(result);
      steps.add(op);
    }
    for (    String deployment : deployments) {
      op=new ModelNode();
      address=op.get(Util.ADDRESS);
      address.add(Util.DEPLOYMENT_OVERLAY_LINK,name + "-" + deployment);
      op.get(Util.OPERATION).set(Util.ADD);
      op.get(Util.DEPLOYMENT).set(deployment);
      op.get(Util.DEPLOYMENT_OVERLAY).set(name);
      steps.add(op);
    }
    final ModelNode response;
    try {
      response=client.execute(composite);
    }
 catch (    IOException e) {
      throw new CommandLineException("Failed to setup overlays",e);
    }
    ctx.printLine(response.toString());
  }
}
