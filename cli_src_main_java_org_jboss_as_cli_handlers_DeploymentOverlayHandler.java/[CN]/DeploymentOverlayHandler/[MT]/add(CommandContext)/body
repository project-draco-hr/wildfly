{
  final ParsedCommandLine args=ctx.getParsedCommandLine();
  final String name=this.name.getValue(args,true);
  final String contentStr=content.getValue(args,true);
  final String[] contentPairs=contentStr.split(",+");
  if (contentPairs.length == 0) {
    throw new CommandFormatException("Overlay content is not specified.");
  }
  final String[] contentNames=new String[contentPairs.length];
  final File[] contentPaths=new File[contentPairs.length];
  for (int i=0; i < contentPairs.length; ++i) {
    final String pair=contentPairs[i];
    final int equalsIndex=pair.indexOf('=');
    if (equalsIndex < 0) {
      throw new CommandFormatException("Content pair is not following archive-path=fs-path format: '" + pair + "'");
    }
    contentNames[i]=pair.substring(0,equalsIndex);
    if (contentNames[i].length() == 0) {
      throw new CommandFormatException("The archive path is missing for the content '" + pair + "'");
    }
    final String path=pair.substring(equalsIndex + 1);
    if (path.length() == 0) {
      throw new CommandFormatException("The filesystem paths is missing for the content '" + pair + "'");
    }
    final File f=new File(path);
    if (!f.exists()) {
      throw new CommandFormatException("Content file doesn't exist " + f.getAbsolutePath());
    }
    contentPaths[i]=f;
  }
  final String sgStr=serverGroups.getValue(args);
  final String[] sg;
  if (ctx.isDomainMode()) {
    if (sgStr == null) {
      throw new CommandFormatException(serverGroups.getFullName() + " is missing.");
    }
    sg=sgStr.split(",+");
    if (sg.length == 0) {
      throw new CommandFormatException(serverGroups.getFullName() + " is missing value.");
    }
  }
 else {
    sg=null;
  }
  final String deploymentsStr=deployments.getValue(args);
  final String[] deployments;
  if (deploymentsStr == null) {
    deployments=null;
  }
 else {
    deployments=deploymentsStr.split(",+");
  }
  final ModelControllerClient client=ctx.getModelControllerClient();
{
    final ModelNode composite=new ModelNode();
    final OperationBuilder opBuilder=new OperationBuilder(composite,true);
    composite.get(Util.OPERATION).set(Util.COMPOSITE);
    composite.get(Util.ADDRESS).setEmptyList();
    final ModelNode steps=composite.get(Util.STEPS);
    ModelNode op=new ModelNode();
    ModelNode address=op.get(Util.ADDRESS);
    address.add(Util.DEPLOYMENT_OVERLAY,name);
    op.get(Util.OPERATION).set(Util.ADD);
    steps.add(op);
    for (int i=0; i < contentNames.length; ++i) {
      final String contentName=contentNames[i];
      op=new ModelNode();
      address=op.get(Util.ADDRESS);
      address.add(Util.DEPLOYMENT_OVERLAY,name);
      address.add(Util.CONTENT,contentName);
      op.get(Util.OPERATION).set(Util.ADD);
      op.get(Util.CONTENT).get(Util.INPUT_STREAM_INDEX).set(i);
      opBuilder.addFileAsAttachment(contentPaths[i]);
      steps.add(op);
    }
    if (deployments != null && deployments.length > 0) {
      if (sg != null) {
        for (        String group : sg) {
          op=new ModelNode();
          address=op.get(Util.ADDRESS);
          address.add(Util.SERVER_GROUP,group);
          address.add(Util.DEPLOYMENT_OVERLAY,name);
          op.get(Util.OPERATION).set(Util.ADD);
          steps.add(op);
          addLinkDeploymentSteps(name,group,deployments,steps);
        }
      }
 else {
        addLinkDeploymentSteps(name,null,deployments,steps);
      }
    }
    try {
      final ModelNode result=client.execute(opBuilder.build());
      if (!Util.isSuccess(result)) {
        throw new CommandFormatException(Util.getFailureDescription(result));
      }
    }
 catch (    IOException e) {
      throw new CommandFormatException("Failed to add overlay",e);
    }
  }
}
