{
  final ParsedCommandLine args=ctx.getParsedCommandLine();
  assertNotPresent(allRelevantServerGroups,args);
  final String name=this.name.getValue(args,true);
  final String contentStr=content.getValue(args,true);
  final String[] contentPairs=contentStr.split(",+");
  if (contentPairs.length == 0) {
    throw new CommandFormatException("Overlay content is not specified.");
  }
  final String[] contentNames=new String[contentPairs.length];
  final File[] contentPaths=new File[contentPairs.length];
  for (int i=0; i < contentPairs.length; ++i) {
    final String pair=contentPairs[i];
    final int equalsIndex=pair.indexOf('=');
    if (equalsIndex < 0) {
      throw new CommandFormatException("Content pair is not following archive-path=fs-path format: '" + pair + "'");
    }
    contentNames[i]=pair.substring(0,equalsIndex);
    if (contentNames[i].length() == 0) {
      throw new CommandFormatException("The archive path is missing for the content '" + pair + "'");
    }
    String path=pair.substring(equalsIndex + 1);
    if (path.length() == 0) {
      throw new CommandFormatException("The filesystem paths is missing for the content '" + pair + "'");
    }
    path=pathCompleter.translatePath(path);
    final File f=new File(path);
    if (!f.exists()) {
      throw new CommandFormatException("Content file doesn't exist " + f.getAbsolutePath());
    }
    contentPaths[i]=f;
  }
  final String[] deployments=getLinks(this.deployments,args);
  final ModelControllerClient client=ctx.getModelControllerClient();
  final ModelNode composite=new ModelNode();
  final OperationBuilder opBuilder=stream ? new OperationBuilder(composite,true) : null;
  composite.get(Util.OPERATION).set(Util.COMPOSITE);
  composite.get(Util.ADDRESS).setEmptyList();
  final ModelNode steps=composite.get(Util.STEPS);
  ModelNode op=new ModelNode();
  ModelNode address=op.get(Util.ADDRESS);
  address.add(Util.DEPLOYMENT_OVERLAY,name);
  op.get(Util.OPERATION).set(Util.ADD);
  steps.add(op);
  for (int i=0; i < contentNames.length; ++i) {
    final String contentName=contentNames[i];
    op=new ModelNode();
    address=op.get(Util.ADDRESS);
    address.add(Util.DEPLOYMENT_OVERLAY,name);
    address.add(Util.CONTENT,contentName);
    op.get(Util.OPERATION).set(Util.ADD);
    if (opBuilder != null) {
      op.get(Util.CONTENT).get(Util.INPUT_STREAM_INDEX).set(i);
      opBuilder.addFileAsAttachment(contentPaths[i]);
    }
 else {
      op.get(Util.CONTENT).get(Util.BYTES).set(Util.readBytes(contentPaths[i]));
    }
    steps.add(op);
  }
  if (deployments != null) {
    if (ctx.isDomainMode()) {
      final List<String> sg=getServerGroupsToLink(ctx);
      for (      String group : sg) {
        op=new ModelNode();
        address=op.get(Util.ADDRESS);
        address.add(Util.SERVER_GROUP,group);
        address.add(Util.DEPLOYMENT_OVERLAY,name);
        op.get(Util.OPERATION).set(Util.ADD);
        steps.add(op);
        addAddRedeployLinksSteps(ctx,steps,name,group,deployments,false);
      }
    }
 else {
      addAddRedeployLinksSteps(ctx,steps,name,null,deployments,false);
    }
  }
 else   if (ctx.isDomainMode() && (serverGroups.isPresent(args) || allServerGroups.isPresent(args))) {
    throw new CommandFormatException("server groups are specified but " + this.deployments.getFullName() + " is not.");
  }
  if (opBuilder == null) {
    return composite;
  }
  try {
    final ModelNode result=client.execute(opBuilder.build());
    if (!Util.isSuccess(result)) {
      throw new CommandFormatException(Util.getFailureDescription(result));
    }
  }
 catch (  IOException e) {
    throw new CommandFormatException("Failed to add overlay",e);
  }
  return null;
}
