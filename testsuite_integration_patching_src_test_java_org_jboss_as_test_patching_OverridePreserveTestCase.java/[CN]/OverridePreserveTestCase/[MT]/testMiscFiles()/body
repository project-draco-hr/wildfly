{
  File tempDir=mkdir(new File(System.getProperty("java.io.tmpdir")),randomString());
  String patchID=randomString();
  File oneOffPatchDir=mkdir(tempDir,patchID);
  final String file1=PatchingTestUtil.AS_DISTRIBUTION + "/README.txt";
  final String file1patchedContent="Patched content for README.txt";
  final String file1originalContent=PatchingTestUtil.readFile(file1);
  final String file1modifiedContent="I manually edited README.txt and it now looks like this.";
  final String file2=PatchingTestUtil.AS_DISTRIBUTION + "/LICENSE.txt";
  final String file2patchedContent="Patched content for LICENSE.txt";
  final String file2originalContent=PatchingTestUtil.readFile(file2);
  final String file2modifiedContent="I manually edited LICENSE.txt and it now looks like this.";
  ContentModification file1Modified=ContentModificationUtils.modifyMisc(oneOffPatchDir,patchID,file1patchedContent,new File(file1),"README.txt");
  ContentModification file2Modified=ContentModificationUtils.modifyMisc(oneOffPatchDir,patchID,file2patchedContent,new File(file2),"LICENSE.txt");
  ProductConfig productConfig=new ProductConfig(PRODUCT,AS_VERSION,"main");
  Patch oneOffPatch=PatchBuilder.create().setPatchId(patchID).setDescription("A one-off patch modifying two misc files.").oneOffPatchIdentity(productConfig.getProductName(),productConfig.getProductVersion()).getParent().addContentModification(file1Modified).addContentModification(file2Modified).build();
  PatchingTestUtil.createPatchXMLFile(oneOffPatchDir,oneOffPatch);
  File zippedPatch=PatchingTestUtil.createZippedPatchFile(oneOffPatchDir,patchID);
  PatchingTestUtil.setFileContent(file1,file1modifiedContent);
  PatchingTestUtil.setFileContent(file2,file2modifiedContent);
  controller.start(CONTAINER);
  Assert.assertFalse("Server should reject patch installation in this case",CliUtilsForPatching.applyPatch(zippedPatch.getAbsolutePath()));
  Assert.assertEquals("Misc file should not be overwritten",file1modifiedContent,PatchingTestUtil.readFile(file1));
  Assert.assertEquals("Misc file should not be overwritten",file2modifiedContent,PatchingTestUtil.readFile(file2));
  Assert.assertTrue("Patch should be accepted",CliUtilsForPatching.applyPatch(zippedPatch.getAbsolutePath(),CliUtilsForPatching.OVERRIDE_ALL));
  Assert.assertTrue("server should be in restart-required mode",CliUtilsForPatching.doesServerRequireRestart());
  controller.stop(CONTAINER);
  controller.start(CONTAINER);
  Assert.assertTrue("The patch " + patchID + " should be listed as installed",CliUtilsForPatching.getInstalledPatches().contains(patchID));
  Assert.assertEquals("Misc file should be overwritten",file1patchedContent,PatchingTestUtil.readFile(file1));
  Assert.assertEquals("Misc file should be overwritten",file2patchedContent,PatchingTestUtil.readFile(file2));
  PatchingTestUtil.setFileContent(file1,file1modifiedContent);
  Assert.assertTrue("Rollback should be accepted",CliUtilsForPatching.rollbackPatch(patchID,String.format(CliUtilsForPatching.PRESERVE,"LICENSE.txt"),String.format(CliUtilsForPatching.OVERRIDE,"README.txt")));
  Assert.assertTrue("server should be in restart-required mode",CliUtilsForPatching.doesServerRequireRestart());
  controller.stop(CONTAINER);
  controller.start(CONTAINER);
  Assert.assertFalse("The patch " + patchID + " NOT should be listed as installed",CliUtilsForPatching.getInstalledPatches().contains(patchID));
  Assert.assertEquals("README.txt should be reverted",file1modifiedContent,PatchingTestUtil.readFile(file1));
  Assert.assertEquals("LICENSE.txt should NOT be reverted",file2patchedContent,PatchingTestUtil.readFile(file2));
  PatchingTestUtil.setFileContent(file1,file1modifiedContent);
  PatchingTestUtil.setFileContent(file2,file2modifiedContent);
  Assert.assertTrue("Patch should be accepted",CliUtilsForPatching.applyPatch(zippedPatch.getAbsolutePath(),String.format(CliUtilsForPatching.OVERRIDE,"LICENSE.txt"),String.format(CliUtilsForPatching.PRESERVE,"README.txt")));
  Assert.assertTrue("server should be in restart-required mode",CliUtilsForPatching.doesServerRequireRestart());
  controller.stop(CONTAINER);
  controller.start(CONTAINER);
  Assert.assertTrue("The patch " + patchID + " should be listed as installed",CliUtilsForPatching.getInstalledPatches().contains(patchID));
  Assert.assertEquals("README.txt should NOT be overwritten",file1modifiedContent,PatchingTestUtil.readFile(file1));
  Assert.assertEquals("LICENSE.txt should be overwritten",file2patchedContent,PatchingTestUtil.readFile(file2));
  Assert.assertTrue("Rollback should be accepted",CliUtilsForPatching.rollbackPatch(patchID,String.format(CliUtilsForPatching.OVERRIDE,"LICENSE.txt")));
  Assert.assertTrue("server should be in restart-required mode",CliUtilsForPatching.doesServerRequireRestart());
  controller.stop(CONTAINER);
  controller.start(CONTAINER);
  Assert.assertFalse("The patch " + patchID + " NOT should be listed as installed",CliUtilsForPatching.getInstalledPatches().contains(patchID));
  Assert.assertEquals("README.txt should NOT be changed",file1modifiedContent,PatchingTestUtil.readFile(file1));
  Assert.assertEquals("LICENSE.txt should be rolled back",file2modifiedContent,PatchingTestUtil.readFile(file2));
  PatchingTestUtil.setFileContent(file1,file1modifiedContent);
  PatchingTestUtil.setFileContent(file2,file2modifiedContent);
  Assert.assertTrue("Patch should be accepted",CliUtilsForPatching.applyPatch(zippedPatch.getAbsolutePath(),String.format(CliUtilsForPatching.PRESERVE,"README.txt,LICENSE.txt")));
  Assert.assertTrue("server should be in restart-required mode",CliUtilsForPatching.doesServerRequireRestart());
  controller.stop(CONTAINER);
  controller.start(CONTAINER);
  Assert.assertTrue("The patch " + patchID + " should be listed as installed",CliUtilsForPatching.getInstalledPatches().contains(patchID));
  Assert.assertEquals("README.txt should NOT be changed",file1modifiedContent,PatchingTestUtil.readFile(file1));
  Assert.assertEquals("LICENSE.txt should NOT be changed",file2modifiedContent,PatchingTestUtil.readFile(file2));
  controller.stop(CONTAINER);
  PatchingTestUtil.setFileContent(file1,file1originalContent);
  PatchingTestUtil.setFileContent(file2,file2originalContent);
}
