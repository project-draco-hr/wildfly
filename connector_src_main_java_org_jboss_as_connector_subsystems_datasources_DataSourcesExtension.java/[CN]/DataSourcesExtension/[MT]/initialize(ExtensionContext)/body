{
  SUBSYSTEM_DATASOURCES_LOGGER.debugf("Initializing Datasources Extension");
  final DisableRequiredWriteAttributeHandler disableRequiredWriteAttributeHandler=new DisableRequiredWriteAttributeHandler();
  final SubsystemRegistration registration=context.registerSubsystem(SUBSYSTEM_NAME);
  registration.registerXMLElementWriter(NewDataSourceSubsystemParser.INSTANCE);
  final ManagementResourceRegistration subsystem=registration.registerSubsystemModel(SUBSYSTEM);
  subsystem.registerOperationHandler(ADD,DataSourcesSubsystemAdd.INSTANCE,SUBSYSTEM_ADD_DESC,false);
  subsystem.registerOperationHandler(DESCRIBE,DataSourcesSubsystemDescribeHandler.INSTANCE,DataSourcesSubsystemDescribeHandler.INSTANCE,false,OperationEntry.EntryType.PRIVATE);
  subsystem.registerOperationHandler("installed-drivers-list",InstalledDriversListOperationHandler.INSTANCE,INSTALLED_DRIVERS_LIST_DESC);
  subsystem.registerOperationHandler("get-installed-driver",GetInstalledDriverOperationHandler.INSTANCE,GET_INSTALLED_DRIVER_DESC);
  final ManagementResourceRegistration jdbcDrivers=subsystem.registerSubModel(PathElement.pathElement(JDBC_DRIVER_NAME),JDBC_DRIVER_DESC);
  jdbcDrivers.registerOperationHandler(ADD,JdbcDriverAdd.INSTANCE,ADD_JDBC_DRIVER_DESC,false);
  jdbcDrivers.registerOperationHandler(REMOVE,JdbcDriverRemove.INSTANCE,REMOVE_JDBC_DRIVER_DESC,false);
  final ManagementResourceRegistration dataSources=subsystem.registerSubModel(PathElement.pathElement(DATA_SOURCE),DATA_SOURCE_DESC);
  dataSources.registerOperationHandler(ADD,DataSourceAdd.INSTANCE,ADD_DATA_SOURCE_DESC,false);
  dataSources.registerOperationHandler(REMOVE,DataSourceRemove.INSTANCE,REMOVE_DATA_SOURCE_DESC,false);
  dataSources.registerOperationHandler(ENABLE,DataSourceEnable.LOCAL_INSTANCE,ENABLE_DATA_SOURCE_DESC,false);
  dataSources.registerOperationHandler(DISABLE,DataSourceDisable.INSTANCE,DISABLE_DATA_SOURCE_DESC,false);
  dataSources.registerOperationHandler("flush-idle-connection-in-pool",PoolOperations.FlushIdleConnectionInPool.DS_INSTANCE,FLUSH_IDLE_CONNECTION_DESC,false);
  dataSources.registerOperationHandler("flush-all-connection-in-pool",PoolOperations.FlushAllConnectionInPool.DS_INSTANCE,FLUSH_ALL_CONNECTION_DESC,false);
  dataSources.registerOperationHandler("test-connection-in-pool",PoolOperations.TestConnectionInPool.DS_INSTANCE,TEST_CONNECTION_DESC,false);
  final ManagementResourceRegistration configAdapter=dataSources.registerSubModel(PathElement.pathElement(CONNECTION_PROPERTIES.getName()),CONNECTION_PROPERTIES_DESC);
  configAdapter.registerOperationHandler(ADD,ConnectionPropertyAdd.INSTANCE,ADD_CONNECTION_PROPERTIES_DESC,false);
  configAdapter.registerOperationHandler(REMOVE,ReloadRequiredRemoveStepHandler.INSTANCE,REMOVE_CONNECTION_PROPERTIES_DESC,false);
  for (  final String attributeName : PoolMetrics.ATTRIBUTES) {
    dataSources.registerMetric(attributeName,PoolMetrics.LocalAndXaDataSourcePoolMetricsHandler.INSTANCE);
  }
  for (  final String attributeName : LocalAndXaDataSourcesJdbcMetrics.ATTRIBUTES) {
    dataSources.registerMetric(attributeName,LocalAndXaDataSourcesJdbcMetrics.INSTANCE);
  }
  for (  final SimpleAttributeDefinition attribute : DataSourcesSubsystemProviders.DATASOURCE_ATTRIBUTE) {
    if (PoolConfigurationRWHandler.ATTRIBUTES.contains(attribute.getName())) {
      dataSources.registerReadWriteAttribute(attribute.getName(),PoolConfigurationReadHandler.INSTANCE,LocalAndXaDataSourcePoolConfigurationWriteHandler.INSTANCE,Storage.CONFIGURATION);
    }
 else {
      dataSources.registerReadWriteAttribute(attribute.getName(),null,disableRequiredWriteAttributeHandler,Storage.CONFIGURATION);
    }
  }
  final ManagementResourceRegistration xaDataSources=subsystem.registerSubModel(PathElement.pathElement(XA_DATASOURCE),XA_DATA_SOURCE_DESC);
  xaDataSources.registerOperationHandler(ADD,XaDataSourceAdd.INSTANCE,ADD_XA_DATA_SOURCE_DESC,false);
  xaDataSources.registerOperationHandler(REMOVE,XaDataSourceRemove.INSTANCE,REMOVE_XA_DATA_SOURCE_DESC,false);
  xaDataSources.registerOperationHandler(ENABLE,DataSourceEnable.XA_INSTANCE,ENABLE_XA_DATA_SOURCE_DESC,false);
  xaDataSources.registerOperationHandler(DISABLE,DataSourceDisable.INSTANCE,DISABLE_XA_DATA_SOURCE_DESC,false);
  xaDataSources.registerOperationHandler("flush-idle-connection-in-pool",PoolOperations.FlushIdleConnectionInPool.DS_INSTANCE,FLUSH_IDLE_CONNECTION_DESC,false);
  xaDataSources.registerOperationHandler("flush-all-connection-in-pool",PoolOperations.FlushAllConnectionInPool.DS_INSTANCE,FLUSH_ALL_CONNECTION_DESC,false);
  xaDataSources.registerOperationHandler("test-connection-in-pool",PoolOperations.TestConnectionInPool.DS_INSTANCE,TEST_CONNECTION_DESC,false);
  final ManagementResourceRegistration xadatasourcePropertyAdapter=xaDataSources.registerSubModel(PathElement.pathElement(XADATASOURCE_PROPERTIES.getName()),XADATASOURCE_PROPERTIES_DESC);
  xadatasourcePropertyAdapter.registerOperationHandler(ADD,XaDataSourcePropertyAdd.INSTANCE,ADD_XADATASOURCE_PROPERTIES_DESC,false);
  xadatasourcePropertyAdapter.registerOperationHandler(REMOVE,ReloadRequiredRemoveStepHandler.INSTANCE,REMOVE_XADATASOURCE_PROPERTIES_DESC,false);
  for (  final String attributeName : PoolMetrics.ATTRIBUTES) {
    xaDataSources.registerMetric(attributeName,PoolMetrics.LocalAndXaDataSourcePoolMetricsHandler.INSTANCE);
  }
  for (  final String attributeName : LocalAndXaDataSourcesJdbcMetrics.ATTRIBUTES) {
    xaDataSources.registerMetric(attributeName,LocalAndXaDataSourcesJdbcMetrics.INSTANCE);
  }
  for (  final SimpleAttributeDefinition attribute : DataSourcesSubsystemProviders.XA_DATASOURCE_ATTRIBUTE) {
    if (PoolConfigurationRWHandler.ATTRIBUTES.contains(attribute.getName())) {
      xaDataSources.registerReadWriteAttribute(attribute.getName(),PoolConfigurationReadHandler.INSTANCE,LocalAndXaDataSourcePoolConfigurationWriteHandler.INSTANCE,Storage.CONFIGURATION);
    }
 else {
      xaDataSources.registerReadWriteAttribute(attribute.getName(),null,disableRequiredWriteAttributeHandler,Storage.CONFIGURATION);
    }
  }
}
