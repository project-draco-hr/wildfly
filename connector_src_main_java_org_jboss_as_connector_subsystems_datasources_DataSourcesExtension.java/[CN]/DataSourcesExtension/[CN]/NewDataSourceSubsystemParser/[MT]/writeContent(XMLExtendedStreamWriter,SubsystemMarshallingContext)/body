{
  context.startSubsystemElement(Namespace.CURRENT.getUriString(),false);
  ModelNode node=context.getModelNode();
  writer.writeStartElement(DATASOURCES);
  if (node.hasDefined(DATA_SOURCE) || node.hasDefined(XA_DATASOURCE)) {
    List<Property> propertyList=node.hasDefined(DATA_SOURCE) ? node.get(DATA_SOURCE).asPropertyList() : new LinkedList<Property>();
    if (node.hasDefined(XA_DATASOURCE)) {
      propertyList.addAll(node.get(XA_DATASOURCE).asPropertyList());
    }
    for (    Property property : propertyList) {
      final ModelNode dataSourceNode=property.getValue();
      boolean isXADataSource=hasAnyOf(dataSourceNode,XA_RESOURCE_TIMEOUT,XADATASOURCECLASS,XADATASOURCE_PROPERTIES);
      writer.writeStartElement(isXADataSource ? DataSources.Tag.XA_DATASOURCE.getLocalName() : DataSources.Tag.DATASOURCE.getLocalName());
      JNDINAME.marshallAsAttribute(dataSourceNode,writer);
      writer.writeAttribute("pool-name",property.getName());
      ENABLED.marshallAsAttribute(dataSourceNode,writer);
      JTA.marshallAsAttribute(dataSourceNode,writer);
      USE_JAVA_CONTEXT.marshallAsAttribute(dataSourceNode,writer);
      SPY.marshallAsAttribute(dataSourceNode,writer);
      USE_CCM.marshallAsAttribute(dataSourceNode,writer);
      if (!isXADataSource) {
        CONNECTION_URL.marshallAsElement(dataSourceNode,writer);
        DRIVER_CLASS.marshallAsElement(dataSourceNode,writer);
        DATASOURCE_CLASS.marshallAsElement(dataSourceNode,writer);
        if (dataSourceNode.hasDefined(CONNECTION_PROPERTIES.getName())) {
          for (          Property connectionProperty : dataSourceNode.get(CONNECTION_PROPERTIES.getName()).asPropertyList()) {
            writeProperty(writer,dataSourceNode,connectionProperty.getName(),connectionProperty.getValue().get("value").asString(),DataSource.Tag.CONNECTION_PROPERTY.getLocalName());
          }
        }
      }
      if (isXADataSource) {
        if (dataSourceNode.hasDefined(XADATASOURCE_PROPERTIES.getName())) {
          for (          Property prop : dataSourceNode.get(XADATASOURCE_PROPERTIES.getName()).asPropertyList()) {
            writeProperty(writer,dataSourceNode,prop.getName(),prop.getValue().get("value").asString(),XaDataSource.Tag.XA_DATASOURCE_PROPERTY.getLocalName());
          }
        }
        XADATASOURCECLASS.marshallAsElement(dataSourceNode,writer);
      }
      DATASOURCE_DRIVER.marshallAsElement(dataSourceNode,writer);
      if (isXADataSource) {
        URL_DELIMITER.marshallAsElement(dataSourceNode,writer);
        URL_SELECTOR_STRATEGY_CLASS_NAME.marshallAsElement(dataSourceNode,writer);
      }
      NEW_CONNECTION_SQL.marshallAsElement(dataSourceNode,writer);
      TRANSACTION_ISOLATION.marshallAsElement(dataSourceNode,writer);
      if (!isXADataSource) {
        URL_DELIMITER.marshallAsElement(dataSourceNode,writer);
        URL_SELECTOR_STRATEGY_CLASS_NAME.marshallAsElement(dataSourceNode,writer);
      }
      boolean poolRequired=MIN_POOL_SIZE.isMarshallable(dataSourceNode) || MAX_POOL_SIZE.isMarshallable(dataSourceNode) || POOL_PREFILL.isMarshallable(dataSourceNode)|| POOL_USE_STRICT_MIN.isMarshallable(dataSourceNode)|| POOL_FLUSH_STRATEGY.isMarshallable(dataSourceNode);
      if (isXADataSource) {
        poolRequired=poolRequired || SAME_RM_OVERRIDE.isMarshallable(dataSourceNode) || INTERLEAVING.isMarshallable(dataSourceNode)|| NOTXSEPARATEPOOL.isMarshallable(dataSourceNode)|| PAD_XID.isMarshallable(dataSourceNode)|| WRAP_XA_RESOURCE.isMarshallable(dataSourceNode);
      }
      if (poolRequired) {
        writer.writeStartElement(isXADataSource ? XaDataSource.Tag.XA_POOL.getLocalName() : DataSource.Tag.POOL.getLocalName());
        MIN_POOL_SIZE.marshallAsElement(dataSourceNode,writer);
        MAX_POOL_SIZE.marshallAsElement(dataSourceNode,writer);
        POOL_PREFILL.marshallAsElement(dataSourceNode,writer);
        POOL_USE_STRICT_MIN.marshallAsElement(dataSourceNode,writer);
        POOL_FLUSH_STRATEGY.marshallAsElement(dataSourceNode,writer);
        if (isXADataSource) {
          SAME_RM_OVERRIDE.marshallAsElement(dataSourceNode,writer);
          INTERLEAVING.marshallAsElement(dataSourceNode,writer);
          NOTXSEPARATEPOOL.marshallAsElement(dataSourceNode,writer);
          PAD_XID.marshallAsElement(dataSourceNode,writer);
          WRAP_XA_RESOURCE.marshallAsElement(dataSourceNode,writer);
        }
        writer.writeEndElement();
      }
      boolean securityRequired=USERNAME.isMarshallable(dataSourceNode) || PASSWORD.isMarshallable(dataSourceNode) || SECURITY_DOMAIN.isMarshallable(dataSourceNode)|| REAUTHPLUGIN_CLASSNAME.isMarshallable(dataSourceNode)|| REAUTHPLUGIN_PROPERTIES.isMarshallable(dataSourceNode);
      if (securityRequired) {
        writer.writeStartElement(DataSource.Tag.SECURITY.getLocalName());
        USERNAME.marshallAsElement(dataSourceNode,writer);
        PASSWORD.marshallAsElement(dataSourceNode,writer);
        SECURITY_DOMAIN.marshallAsElement(dataSourceNode,writer);
        if (dataSourceNode.hasDefined(REAUTHPLUGIN_CLASSNAME.getName())) {
          writer.writeStartElement(DsSecurity.Tag.REAUTH_PLUGIN.getLocalName());
          writer.writeAttribute(org.jboss.jca.common.api.metadata.common.Extension.Attribute.CLASS_NAME.getLocalName(),dataSourceNode.get(REAUTHPLUGIN_CLASSNAME.getName()).asString());
          if (dataSourceNode.hasDefined(REAUTHPLUGIN_PROPERTIES.getName())) {
            for (            Property connectionProperty : dataSourceNode.get(REAUTHPLUGIN_PROPERTIES.getName()).asPropertyList()) {
              writeProperty(writer,dataSourceNode,connectionProperty.getName(),connectionProperty.getValue().asString(),org.jboss.jca.common.api.metadata.common.Extension.Tag.CONFIG_PROPERTY.getLocalName());
            }
          }
          writer.writeEndElement();
        }
        writer.writeEndElement();
      }
      boolean recoveryRequired=RECOVERY_USERNAME.isMarshallable(dataSourceNode) || RECOVERY_PASSWORD.isMarshallable(dataSourceNode) || RECOVERY_SECURITY_DOMAIN.isMarshallable(dataSourceNode)|| RECOVERLUGIN_CLASSNAME.isMarshallable(dataSourceNode)|| NO_RECOVERY.isMarshallable(dataSourceNode)|| RECOVERLUGIN_PROPERTIES.isMarshallable(dataSourceNode);
      if (recoveryRequired) {
        writer.writeStartElement(XaDataSource.Tag.RECOVERY.getLocalName());
        NO_RECOVERY.marshallAsAttribute(dataSourceNode,writer);
        if (hasAnyOf(dataSourceNode,RECOVERY_USERNAME,RECOVERY_PASSWORD,RECOVERY_SECURITY_DOMAIN)) {
          writer.writeStartElement(Recovery.Tag.RECOVER_CREDENTIAL.getLocalName());
          RECOVERY_USERNAME.marshallAsElement(dataSourceNode,writer);
          RECOVERY_PASSWORD.marshallAsElement(dataSourceNode,writer);
          RECOVERY_SECURITY_DOMAIN.marshallAsElement(dataSourceNode,writer);
          writer.writeEndElement();
        }
        if (hasAnyOf(dataSourceNode,RECOVERLUGIN_CLASSNAME)) {
          writer.writeStartElement(Recovery.Tag.RECOVER_PLUGIN.getLocalName());
          writer.writeAttribute(org.jboss.jca.common.api.metadata.common.Extension.Attribute.CLASS_NAME.getLocalName(),dataSourceNode.get(RECOVERLUGIN_CLASSNAME.getName()).asString());
          if (dataSourceNode.hasDefined(RECOVERLUGIN_PROPERTIES.getName())) {
            for (            Property connectionProperty : dataSourceNode.get(RECOVERLUGIN_PROPERTIES.getName()).asPropertyList()) {
              writeProperty(writer,dataSourceNode,connectionProperty.getName(),connectionProperty.getValue().asString(),org.jboss.jca.common.api.metadata.common.Extension.Tag.CONFIG_PROPERTY.getLocalName());
            }
          }
          writer.writeEndElement();
        }
        writer.writeEndElement();
      }
      boolean validationRequired=VALIDCONNECTIONCHECKERCLASSNAME.isMarshallable(dataSourceNode) || VALIDCONNECTIONCHECKER_PROPERTIES.isMarshallable(dataSourceNode) || CHECKVALIDCONNECTIONSQL.isMarshallable(dataSourceNode)|| VALIDATEONMATCH.isMarshallable(dataSourceNode)|| BACKGROUNDVALIDATION.isMarshallable(dataSourceNode)|| BACKGROUNDVALIDATIONMILLIS.isMarshallable(dataSourceNode)|| USE_FAST_FAIL.isMarshallable(dataSourceNode)|| STALECONNECTIONCHECKERCLASSNAME.isMarshallable(dataSourceNode)|| STALECONNECTIONCHECKER_PROPERTIES.isMarshallable(dataSourceNode)|| EXCEPTIONSORTERCLASSNAME.isMarshallable(dataSourceNode)|| EXCEPTIONSORTER_PROPERTIES.isMarshallable(dataSourceNode);
      if (validationRequired) {
        writer.writeStartElement(DataSource.Tag.VALIDATION.getLocalName());
        if (dataSourceNode.hasDefined(VALIDCONNECTIONCHECKERCLASSNAME.getName())) {
          writer.writeStartElement(Validation.Tag.VALID_CONNECTION_CHECKER.getLocalName());
          writer.writeAttribute(org.jboss.jca.common.api.metadata.common.Extension.Attribute.CLASS_NAME.getLocalName(),dataSourceNode.get(VALIDCONNECTIONCHECKERCLASSNAME.getName()).asString());
          if (dataSourceNode.hasDefined(VALIDCONNECTIONCHECKER_PROPERTIES.getName())) {
            for (            Property connectionProperty : dataSourceNode.get(VALIDCONNECTIONCHECKER_PROPERTIES.getName()).asPropertyList()) {
              writeProperty(writer,dataSourceNode,connectionProperty.getName(),connectionProperty.getValue().asString(),org.jboss.jca.common.api.metadata.common.Extension.Tag.CONFIG_PROPERTY.getLocalName());
            }
          }
          writer.writeEndElement();
        }
        CHECKVALIDCONNECTIONSQL.marshallAsElement(dataSourceNode,writer);
        VALIDATEONMATCH.marshallAsElement(dataSourceNode,writer);
        BACKGROUNDVALIDATION.marshallAsElement(dataSourceNode,writer);
        BACKGROUNDVALIDATIONMILLIS.marshallAsElement(dataSourceNode,writer);
        USE_FAST_FAIL.marshallAsElement(dataSourceNode,writer);
        if (dataSourceNode.hasDefined(STALECONNECTIONCHECKERCLASSNAME.getName())) {
          writer.writeStartElement(Validation.Tag.STALE_CONNECTION_CHECKER.getLocalName());
          writer.writeAttribute(org.jboss.jca.common.api.metadata.common.Extension.Attribute.CLASS_NAME.getLocalName(),dataSourceNode.get(STALECONNECTIONCHECKERCLASSNAME.getName()).asString());
          if (dataSourceNode.hasDefined(STALECONNECTIONCHECKER_PROPERTIES.getName())) {
            for (            Property connectionProperty : dataSourceNode.get(STALECONNECTIONCHECKER_PROPERTIES.getName()).asPropertyList()) {
              writeProperty(writer,dataSourceNode,connectionProperty.getName(),connectionProperty.getValue().asString(),org.jboss.jca.common.api.metadata.common.Extension.Tag.CONFIG_PROPERTY.getLocalName());
            }
          }
          writer.writeEndElement();
        }
        if (dataSourceNode.hasDefined(EXCEPTIONSORTERCLASSNAME.getName())) {
          writer.writeStartElement(Validation.Tag.EXCEPTION_SORTER.getLocalName());
          writer.writeAttribute(org.jboss.jca.common.api.metadata.common.Extension.Attribute.CLASS_NAME.getLocalName(),dataSourceNode.get(EXCEPTIONSORTERCLASSNAME.getName()).asString());
          if (dataSourceNode.hasDefined(EXCEPTIONSORTER_PROPERTIES.getName())) {
            for (            Property connectionProperty : dataSourceNode.get(EXCEPTIONSORTER_PROPERTIES.getName()).asPropertyList()) {
              writeProperty(writer,dataSourceNode,connectionProperty.getName(),connectionProperty.getValue().asString(),org.jboss.jca.common.api.metadata.common.Extension.Tag.CONFIG_PROPERTY.getLocalName());
            }
          }
          writer.writeEndElement();
        }
        writer.writeEndElement();
      }
      boolean timeoutRequired=BLOCKING_TIMEOUT_WAIT_MILLIS.isMarshallable(dataSourceNode) || IDLETIMEOUTMINUTES.isMarshallable(dataSourceNode) || SETTXQUERYTIMEOUT.isMarshallable(dataSourceNode)|| QUERYTIMEOUT.isMarshallable(dataSourceNode)|| USETRYLOCK.isMarshallable(dataSourceNode)|| ALLOCATION_RETRY.isMarshallable(dataSourceNode)|| ALLOCATION_RETRY_WAIT_MILLIS.isMarshallable(dataSourceNode)|| XA_RESOURCE_TIMEOUT.isMarshallable(dataSourceNode);
      if (timeoutRequired) {
        writer.writeStartElement(DataSource.Tag.TIMEOUT.getLocalName());
        SETTXQUERYTIMEOUT.marshallAsElement(dataSourceNode,writer);
        BLOCKING_TIMEOUT_WAIT_MILLIS.marshallAsElement(dataSourceNode,writer);
        IDLETIMEOUTMINUTES.marshallAsElement(dataSourceNode,writer);
        QUERYTIMEOUT.marshallAsElement(dataSourceNode,writer);
        USETRYLOCK.marshallAsElement(dataSourceNode,writer);
        ALLOCATION_RETRY.marshallAsElement(dataSourceNode,writer);
        ALLOCATION_RETRY_WAIT_MILLIS.marshallAsElement(dataSourceNode,writer);
        XA_RESOURCE_TIMEOUT.marshallAsElement(dataSourceNode,writer);
        writer.writeEndElement();
      }
      boolean statementRequired=hasAnyOf(dataSourceNode,TRACKSTATEMENTS,PREPAREDSTATEMENTSCACHESIZE,SHAREPREPAREDSTATEMENTS);
      if (statementRequired) {
        writer.writeStartElement(DataSource.Tag.STATEMENT.getLocalName());
        TRACKSTATEMENTS.marshallAsElement(dataSourceNode,writer);
        PREPAREDSTATEMENTSCACHESIZE.marshallAsElement(dataSourceNode,writer);
        SHAREPREPAREDSTATEMENTS.marshallAsElement(dataSourceNode,writer);
        writer.writeEndElement();
      }
      writer.writeEndElement();
    }
  }
  if (node.hasDefined(JDBC_DRIVER_NAME)) {
    writer.writeStartElement(DataSources.Tag.DRIVERS.getLocalName());
    for (    Property driverProperty : node.get(JDBC_DRIVER_NAME).asPropertyList()) {
      writer.writeStartElement(DataSources.Tag.DRIVER.getLocalName());
      writer.writeAttribute(Driver.Attribute.NAME.getLocalName(),driverProperty.getValue().require(DRIVER_NAME.getName()).asString());
      writeAttributeIfHas(writer,driverProperty.getValue(),Driver.Attribute.MODULE,DRIVER_MODULE_NAME.getName());
      writeAttributeIfHas(writer,driverProperty.getValue(),Driver.Attribute.MAJOR_VERSION,DRIVER_MAJOR_VERSION.getName());
      writeAttributeIfHas(writer,driverProperty.getValue(),Driver.Attribute.MINOR_VERSION,DRIVER_MINOR_VERSION.getName());
      writeElementIfHas(writer,driverProperty.getValue(),Driver.Tag.DRIVER_CLASS.getLocalName(),DRIVER_CLASS_NAME.getName());
      writeElementIfHas(writer,driverProperty.getValue(),Driver.Tag.XA_DATASOURCE_CLASS.getLocalName(),DRIVER_XA_DATASOURCE_CLASS_NAME.getName());
      writer.writeEndElement();
    }
    writer.writeEndElement();
  }
  writer.writeEndElement();
  writer.writeEndElement();
}
