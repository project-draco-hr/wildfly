{
  context.startSubsystemElement(Namespace.CURRENT.getUriString(),false);
  ModelNode node=context.getModelNode();
  writer.writeStartElement(DATASOURCES);
  if (node.hasDefined(DATA_SOURCE) || node.hasDefined(XA_DATA_SOURCE)) {
    List<Property> propertyList=node.hasDefined(DATA_SOURCE) ? node.get(DATA_SOURCE).asPropertyList() : new LinkedList<Property>();
    if (node.hasDefined(XA_DATA_SOURCE)) {
      propertyList.addAll(node.get(XA_DATA_SOURCE).asPropertyList());
    }
    for (    Property property : propertyList) {
      final ModelNode dataSourceNode=property.getValue();
      boolean isXADataSource=hasAnyOf(dataSourceNode,XA_RESOURCE_TIMEOUT,XADATASOURCECLASS,XADATASOURCEPROPERTIES);
      writer.writeStartElement(isXADataSource ? DataSources.Tag.XA_DATASOURCE.getLocalName() : DataSources.Tag.DATASOURCE.getLocalName());
      writeAttributeIfHas(writer,dataSourceNode,DataSource.Attribute.JNDINAME,JNDINAME);
      writeAttributeIfHas(writer,dataSourceNode,DataSource.Attribute.POOL_NAME,POOLNAME);
      writeAttributeIfHas(writer,dataSourceNode,DataSource.Attribute.ENABLED,ENABLED);
      writeAttributeIfHas(writer,dataSourceNode,DataSource.Attribute.JTA,JTA);
      writeAttributeIfHas(writer,dataSourceNode,DataSource.Attribute.USEJAVACONTEXT,USE_JAVA_CONTEXT);
      writeAttributeIfHas(writer,dataSourceNode,DataSource.Attribute.SPY,SPY);
      writeAttributeIfHas(writer,dataSourceNode,DataSource.Attribute.USE_CCM,USE_CCM);
      if (!isXADataSource) {
        writeElementIfHas(writer,dataSourceNode,DataSource.Tag.CONNECTIONURL,CONNECTION_URL);
        writeElementIfHas(writer,dataSourceNode,DataSource.Tag.DRIVERCLASS,DATASOURCE_DRIVER_CLASS);
        if (dataSourceNode.hasDefined(CONNECTION_PROPERTIES)) {
          for (          Property connectionProperty : dataSourceNode.get(CONNECTION_PROPERTIES).asPropertyList()) {
            writeProperty(writer,dataSourceNode,connectionProperty.getName(),connectionProperty.getValue().asString(),DataSource.Tag.CONNECTIONPROPERTY.getLocalName());
          }
        }
      }
      if (isXADataSource) {
        if (dataSourceNode.hasDefined(XADATASOURCEPROPERTIES)) {
          for (          Property prop : dataSourceNode.get(XADATASOURCEPROPERTIES).asPropertyList()) {
            writer.writeStartElement(XaDataSource.Tag.XADATASOURCEPROPERTY.getLocalName());
            writer.writeAttribute("name",prop.getName());
            writer.writeCharacters(prop.getValue().asString());
            writer.writeEndElement();
          }
        }
        writeElementIfHas(writer,dataSourceNode,XaDataSource.Tag.XADATASOURCECLASS,XADATASOURCECLASS);
      }
      writeElementIfHas(writer,dataSourceNode,DataSource.Tag.DRIVER,DATASOURCE_DRIVER);
      if (isXADataSource) {
        writeElementIfHas(writer,dataSourceNode,XaDataSource.Tag.URLDELIMITER,URL_DELIMITER);
        writeElementIfHas(writer,dataSourceNode,XaDataSource.Tag.URLSELECTORSTRATEGYCLASSNAME,URL_SELECTOR_STRATEGY_CLASS_NAME);
      }
      writeElementIfHas(writer,dataSourceNode,DataSource.Tag.NEWCONNECTIONSQL,NEW_CONNECTION_SQL);
      writeElementIfHas(writer,dataSourceNode,DataSource.Tag.TRANSACTIONISOLATION,TRANSACTION_ISOLOATION);
      if (!isXADataSource) {
        writeElementIfHas(writer,dataSourceNode,DataSource.Tag.URLDELIMITER,URL_DELIMITER);
        writeElementIfHas(writer,dataSourceNode,DataSource.Tag.URLSELECTORSTRATEGYCLASSNAME,URL_SELECTOR_STRATEGY_CLASS_NAME);
      }
      boolean poolRequired=hasAnyOf(dataSourceNode,MIN_POOL_SIZE,MAX_POOL_SIZE,POOL_PREFILL,POOL_USE_STRICT_MIN,FLUSH_STRATEGY);
      if (isXADataSource) {
        poolRequired=poolRequired || hasAnyOf(dataSourceNode,SAME_RM_OVERRIDE,INTERLEAVING,NOTXSEPARATEPOOL,PAD_XID,WRAP_XA_RESOURCE);
      }
      if (poolRequired) {
        writer.writeStartElement(isXADataSource ? XaDataSource.Tag.XA_POOL.getLocalName() : DataSource.Tag.POOL.getLocalName());
        writeElementIfHas(writer,dataSourceNode,CommonPool.Tag.MIN_POOL_SIZE,MIN_POOL_SIZE);
        writeElementIfHas(writer,dataSourceNode,CommonPool.Tag.MAXPOOLSIZE,MAX_POOL_SIZE);
        writeElementIfHas(writer,dataSourceNode,CommonPool.Tag.PREFILL,POOL_PREFILL);
        writeElementIfHas(writer,dataSourceNode,CommonPool.Tag.USE_STRICT_MIN,POOL_USE_STRICT_MIN);
        writeElementIfHas(writer,dataSourceNode,CommonPool.Tag.FLUSH_STRATEGY,FLUSH_STRATEGY);
        if (isXADataSource) {
          writeEmptyElementIfHasAndTrue(writer,dataSourceNode,CommonXaPool.Tag.ISSAMERMOVERRIDEVALUE,SAME_RM_OVERRIDE);
          writeEmptyElementIfHasAndTrue(writer,dataSourceNode,CommonXaPool.Tag.INTERLEAVING,INTERLEAVING);
          writeEmptyElementIfHasAndTrue(writer,dataSourceNode,CommonXaPool.Tag.NO_TX_SEPARATE_POOLS,NOTXSEPARATEPOOL);
          writeElementIfHas(writer,dataSourceNode,CommonXaPool.Tag.PAD_XID,PAD_XID);
          writeElementIfHas(writer,dataSourceNode,CommonXaPool.Tag.WRAP_XA_RESOURCE,WRAP_XA_RESOURCE);
        }
        writer.writeEndElement();
      }
      boolean securityRequired=hasAnyOf(dataSourceNode,USERNAME,PASSWORD,SECURITY_DOMAIN,REAUTHPLUGIN_CLASSNAME,REAUTHPLUGIN_PROPERTIES);
      if (securityRequired) {
        writer.writeStartElement(DataSource.Tag.SECURITY.getLocalName());
        writeElementIfHas(writer,dataSourceNode,DsSecurity.Tag.USERNAME,USERNAME);
        writeElementIfHas(writer,dataSourceNode,DsSecurity.Tag.PASSWORD,PASSWORD);
        writeElementIfHas(writer,dataSourceNode,DsSecurity.Tag.SECURITY_DOMAIN,SECURITY_DOMAIN);
        if (dataSourceNode.hasDefined(REAUTHPLUGIN_CLASSNAME)) {
          writer.writeStartElement(DsSecurity.Tag.REAUTH_PLUGIN.getLocalName());
          writer.writeAttribute(org.jboss.jca.common.api.metadata.common.Extension.Attribute.CLASS_NAME.getLocalName(),dataSourceNode.get(REAUTHPLUGIN_CLASSNAME).asString());
          if (dataSourceNode.hasDefined(REAUTHPLUGIN_PROPERTIES)) {
            for (            Property connectionProperty : dataSourceNode.get(REAUTHPLUGIN_PROPERTIES).asPropertyList()) {
              writeProperty(writer,dataSourceNode,connectionProperty.getName(),connectionProperty.getValue().asString(),org.jboss.jca.common.api.metadata.common.Extension.Tag.CONFIG_PROPERTY.getLocalName());
            }
          }
          writer.writeEndElement();
        }
        writer.writeEndElement();
      }
      boolean recoveryRequired=hasAnyOf(dataSourceNode,RECOVERY_USERNAME,RECOVERY_PASSWORD,RECOVERY_SECURITY_DOMAIN,RECOVERLUGIN_CLASSNAME,NO_RECOVERY,RECOVERLUGIN_PROPERTIES);
      if (recoveryRequired) {
        writer.writeStartElement(XaDataSource.Tag.RECOVERY.getLocalName());
        writeAttributeIfHas(writer,dataSourceNode,Recovery.Attribute.NO_RECOVERY,NO_RECOVERY);
        if (hasAnyOf(dataSourceNode,RECOVERY_USERNAME,RECOVERY_PASSWORD,RECOVERY_SECURITY_DOMAIN)) {
          writer.writeStartElement(Recovery.Tag.RECOVER_CREDENTIAL.getLocalName());
          writeElementIfHas(writer,dataSourceNode,Credential.Tag.USERNAME.getLocalName(),RECOVERY_USERNAME);
          writeElementIfHas(writer,dataSourceNode,Credential.Tag.PASSWORD.getLocalName(),RECOVERY_PASSWORD);
          writeElementIfHas(writer,dataSourceNode,Credential.Tag.SECURITY_DOMAIN.getLocalName(),RECOVERY_SECURITY_DOMAIN);
          writer.writeEndElement();
        }
        if (hasAnyOf(dataSourceNode,RECOVERLUGIN_CLASSNAME)) {
          writer.writeStartElement(Recovery.Tag.RECOVER_PLUGIN.getLocalName());
          writer.writeAttribute(org.jboss.jca.common.api.metadata.common.Extension.Attribute.CLASS_NAME.getLocalName(),dataSourceNode.get(RECOVERLUGIN_CLASSNAME).asString());
          if (dataSourceNode.hasDefined(RECOVERLUGIN_PROPERTIES)) {
            for (            Property connectionProperty : dataSourceNode.get(RECOVERLUGIN_PROPERTIES).asPropertyList()) {
              writeProperty(writer,dataSourceNode,connectionProperty.getName(),connectionProperty.getValue().asString(),org.jboss.jca.common.api.metadata.common.Extension.Tag.CONFIG_PROPERTY.getLocalName());
            }
          }
          writer.writeEndElement();
        }
        writer.writeEndElement();
      }
      boolean validationRequired=hasAnyOf(dataSourceNode,VALIDCONNECTIONCHECKERCLASSNAME,VALIDCONNECTIONCHECKER_PROPERTIES,CHECKVALIDCONNECTIONSQL,VALIDATEONMATCH,BACKGROUNDVALIDATION,BACKGROUNDVALIDATIONMINUTES,USE_FAST_FAIL,STALECONNECTIONCHECKERCLASSNAME,STALECONNECTIONCHECKER_PROPERTIES,EXCEPTIONSORTERCLASSNAME,EXCEPTIONSORTER_PROPERTIES);
      if (validationRequired) {
        writer.writeStartElement(DataSource.Tag.VALIDATION.getLocalName());
        if (dataSourceNode.hasDefined(VALIDCONNECTIONCHECKERCLASSNAME)) {
          writer.writeStartElement(Validation.Tag.VALIDCONNECTIONCHECKER.getLocalName());
          writer.writeAttribute(org.jboss.jca.common.api.metadata.common.Extension.Attribute.CLASS_NAME.getLocalName(),dataSourceNode.get(VALIDCONNECTIONCHECKERCLASSNAME).asString());
          if (dataSourceNode.hasDefined(VALIDCONNECTIONCHECKER_PROPERTIES)) {
            for (            Property connectionProperty : dataSourceNode.get(VALIDCONNECTIONCHECKER_PROPERTIES).asPropertyList()) {
              writeProperty(writer,dataSourceNode,connectionProperty.getName(),connectionProperty.getValue().asString(),org.jboss.jca.common.api.metadata.common.Extension.Tag.CONFIG_PROPERTY.getLocalName());
            }
          }
          writer.writeEndElement();
        }
        writeElementIfHas(writer,dataSourceNode,Validation.Tag.CHECKVALIDCONNECTIONSQL,CHECKVALIDCONNECTIONSQL);
        writeElementIfHas(writer,dataSourceNode,Validation.Tag.VALIDATEONMATCH,VALIDATEONMATCH);
        writeElementIfHas(writer,dataSourceNode,Validation.Tag.BACKGROUNDVALIDATION,BACKGROUNDVALIDATION);
        writeElementIfHas(writer,dataSourceNode,Validation.Tag.BACKGROUNDVALIDATIONMINUTES,BACKGROUNDVALIDATIONMINUTES);
        writeElementIfHas(writer,dataSourceNode,Validation.Tag.USEFASTFAIL,USE_FAST_FAIL);
        if (dataSourceNode.hasDefined(STALECONNECTIONCHECKERCLASSNAME)) {
          writer.writeStartElement(Validation.Tag.STALECONNECTIONCHECKER.getLocalName());
          writer.writeAttribute(org.jboss.jca.common.api.metadata.common.Extension.Attribute.CLASS_NAME.getLocalName(),dataSourceNode.get(STALECONNECTIONCHECKERCLASSNAME).asString());
          if (dataSourceNode.hasDefined(STALECONNECTIONCHECKER_PROPERTIES)) {
            for (            Property connectionProperty : dataSourceNode.get(STALECONNECTIONCHECKER_PROPERTIES).asPropertyList()) {
              writeProperty(writer,dataSourceNode,connectionProperty.getName(),connectionProperty.getValue().asString(),org.jboss.jca.common.api.metadata.common.Extension.Tag.CONFIG_PROPERTY.getLocalName());
            }
          }
          writer.writeEndElement();
        }
        if (dataSourceNode.hasDefined(EXCEPTIONSORTERCLASSNAME)) {
          writer.writeStartElement(Validation.Tag.EXCEPTIONSORTER.getLocalName());
          writer.writeAttribute(org.jboss.jca.common.api.metadata.common.Extension.Attribute.CLASS_NAME.getLocalName(),dataSourceNode.get(EXCEPTIONSORTERCLASSNAME).asString());
          if (dataSourceNode.hasDefined(EXCEPTIONSORTER_PROPERTIES)) {
            for (            Property connectionProperty : dataSourceNode.get(EXCEPTIONSORTER_PROPERTIES).asPropertyList()) {
              writeProperty(writer,dataSourceNode,connectionProperty.getName(),connectionProperty.getValue().asString(),org.jboss.jca.common.api.metadata.common.Extension.Tag.CONFIG_PROPERTY.getLocalName());
            }
          }
          writer.writeEndElement();
        }
        writer.writeEndElement();
      }
      boolean timeoutRequired=hasAnyOf(dataSourceNode,BLOCKING_TIMEOUT_WAIT_MILLIS,IDLETIMEOUTMINUTES,SETTXQUERYTIMEOUT,QUERYTIMEOUT,USETRYLOCK,ALLOCATION_RETRY,ALLOCATION_RETRY_WAIT_MILLIS,XA_RESOURCE_TIMEOUT);
      if (timeoutRequired) {
        writer.writeStartElement(DataSource.Tag.TIMEOUT.getLocalName());
        writeElementIfHas(writer,dataSourceNode,TimeOut.Tag.BLOCKINGTIMEOUTMILLIS,BLOCKING_TIMEOUT_WAIT_MILLIS);
        writeElementIfHas(writer,dataSourceNode,TimeOut.Tag.IDLETIMEOUTMINUTES,IDLETIMEOUTMINUTES);
        writeEmptyElementIfHasAndTrue(writer,dataSourceNode,TimeOut.Tag.SETTXQUERYTIMEOUT,SETTXQUERYTIMEOUT);
        writeElementIfHas(writer,dataSourceNode,TimeOut.Tag.QUERYTIMEOUT,QUERYTIMEOUT);
        writeElementIfHas(writer,dataSourceNode,TimeOut.Tag.USETRYLOCK,USETRYLOCK);
        writeElementIfHas(writer,dataSourceNode,TimeOut.Tag.ALLOCATIONRETRY,ALLOCATION_RETRY);
        writeElementIfHas(writer,dataSourceNode,TimeOut.Tag.ALLOCATIONRETRYWAITMILLIS,ALLOCATION_RETRY_WAIT_MILLIS);
        writeElementIfHas(writer,dataSourceNode,TimeOut.Tag.XARESOURCETIMEOUT,XA_RESOURCE_TIMEOUT);
        writer.writeEndElement();
      }
      boolean statementRequired=hasAnyOf(dataSourceNode,TRACKSTATEMENTS,PREPAREDSTATEMENTSCACHESIZE,SHAREPREPAREDSTATEMENTS);
      if (statementRequired) {
        writer.writeStartElement(DataSource.Tag.STATEMENT.getLocalName());
        writeElementIfHas(writer,dataSourceNode,Statement.Tag.TRACKSTATEMENTS,TRACKSTATEMENTS);
        writeElementIfHas(writer,dataSourceNode,Statement.Tag.PREPAREDSTATEMENTCACHESIZE,PREPAREDSTATEMENTSCACHESIZE);
        writeEmptyElementIfHasAndTrue(writer,dataSourceNode,Statement.Tag.SHAREPREPAREDSTATEMENTS,SHAREPREPAREDSTATEMENTS);
        writer.writeEndElement();
      }
      writer.writeEndElement();
    }
  }
  if (node.hasDefined(JDBC_DRIVER)) {
    writer.writeStartElement(DataSources.Tag.DRIVERS.getLocalName());
    for (    Property driverProperty : node.get(JDBC_DRIVER).asPropertyList()) {
      writer.writeStartElement(DataSources.Tag.DRIVER.getLocalName());
      writer.writeAttribute(Driver.Attribute.NAME.getLocalName(),driverProperty.getValue().require(DRIVER_NAME).asString());
      writeAttributeIfHas(writer,driverProperty.getValue(),Driver.Attribute.MODULE,DRIVER_MODULE_NAME);
      writeAttributeIfHas(writer,driverProperty.getValue(),Driver.Attribute.MAJOR_VERSION,DRIVER_MAJOR_VERSION);
      writeAttributeIfHas(writer,driverProperty.getValue(),Driver.Attribute.MINOR_VERSION,DRIVER_MINOR_VERSION);
      writeElementIfHas(writer,driverProperty.getValue(),Driver.Tag.DRIVERCLASS.getLocalName(),DRIVER_CLASS_NAME);
      writeElementIfHas(writer,driverProperty.getValue(),Driver.Tag.XADATASOURCECLASS.getLocalName(),DRIVER_XA_DATASOURCE_CLASS_NAME);
      writer.writeEndElement();
    }
    writer.writeEndElement();
  }
  writer.writeEndElement();
  writer.writeEndElement();
}
