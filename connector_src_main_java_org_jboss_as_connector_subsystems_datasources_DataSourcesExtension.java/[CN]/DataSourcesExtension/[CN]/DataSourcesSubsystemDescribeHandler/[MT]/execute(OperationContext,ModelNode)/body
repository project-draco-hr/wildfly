{
  final ModelNode result=context.getResult();
  final PathAddress rootAddress=PathAddress.pathAddress(PathAddress.pathAddress(operation.require(OP_ADDR)).getLastElement());
  final ModelNode subModel=context.readModel(PathAddress.EMPTY_ADDRESS);
  final ModelNode subsystemAdd=new ModelNode();
  subsystemAdd.get(OP).set(ADD);
  subsystemAdd.get(OP_ADDR).set(rootAddress.toModelNode());
  result.add(subsystemAdd);
  if (subModel.hasDefined(JDBC_DRIVER_NAME)) {
    for (    final Property jdbcDriver : subModel.get(Constants.JDBC_DRIVER_NAME).asPropertyList()) {
      final ModelNode address=rootAddress.toModelNode();
      address.add(Constants.JDBC_DRIVER_NAME,jdbcDriver.getName());
      final ModelNode addOperation=Util.getEmptyOperation(ADD,address);
      addOperation.get(DRIVER_NAME.getName()).set(jdbcDriver.getValue().get(DRIVER_NAME.getName()));
      addOperation.get(DRIVER_MODULE_NAME.getName()).set(jdbcDriver.getValue().get(DRIVER_MODULE_NAME.getName()));
      addOperation.get(DRIVER_MAJOR_VERSION.getName()).set(jdbcDriver.getValue().get(DRIVER_MAJOR_VERSION.getName()));
      addOperation.get(DRIVER_MINOR_VERSION.getName()).set(jdbcDriver.getValue().get(DRIVER_MINOR_VERSION.getName()));
      addOperation.get(DRIVER_CLASS_NAME.getName()).set(jdbcDriver.getValue().get(DRIVER_CLASS_NAME.getName()));
      addOperation.get(DRIVER_DATASOURCE_CLASS_NAME.getName()).set(jdbcDriver.getValue().get(DRIVER_DATASOURCE_CLASS_NAME.getName()));
      addOperation.get(DRIVER_XA_DATASOURCE_CLASS_NAME.getName()).set(jdbcDriver.getValue().get(DRIVER_XA_DATASOURCE_CLASS_NAME.getName()));
      result.add(addOperation);
    }
  }
  if (subModel.hasDefined(DATA_SOURCE)) {
    for (    final Property dataSourceProp : subModel.get(Constants.DATA_SOURCE).asPropertyList()) {
      final ModelNode address=rootAddress.toModelNode();
      address.add(Constants.DATA_SOURCE,dataSourceProp.getName());
      final ModelNode addOperation=Util.getEmptyOperation(ADD,address);
      final ModelNode dataSource=dataSourceProp.getValue();
      populateAddModel(dataSource,addOperation,CONNECTION_PROPERTIES.getName(),DATASOURCE_ATTRIBUTE);
      addOperation.get(DATASOURCE_DRIVER.getName()).set(dataSourceProp.getValue().get(DATASOURCE_DRIVER.getName()));
      result.add(addOperation);
      if (dataSource.hasDefined(ENABLED.getName()) && dataSource.get(ENABLED.getName()).asBoolean()) {
        final ModelNode enableOperation=new ModelNode();
        enableOperation.get(OP).set(ENABLE);
        enableOperation.get(OP_ADDR).set(address);
        enableOperation.get(PERSISTENT).set(dataSource.get(PERSISTENT));
        result.add(enableOperation);
      }
    }
  }
  if (subModel.hasDefined(XA_DATASOURCE)) {
    for (    final Property dataSourceProp : subModel.get(Constants.XA_DATASOURCE).asPropertyList()) {
      final ModelNode address=rootAddress.toModelNode();
      address.add(Constants.XA_DATASOURCE,dataSourceProp.getName());
      final ModelNode addOperation=Util.getEmptyOperation(ADD,address);
      final ModelNode dataSource=dataSourceProp.getValue();
      populateAddModel(dataSource,addOperation,XADATASOURCE_PROPERTIES.getName(),XA_DATASOURCE_ATTRIBUTE);
      addOperation.get(DATASOURCE_DRIVER.getName()).set(dataSourceProp.getValue().get(DATASOURCE_DRIVER.getName()));
      result.add(addOperation);
      if (dataSource.hasDefined(ENABLED.getName()) && dataSource.get(ENABLED.getName()).asBoolean()) {
        final ModelNode enableOperation=new ModelNode();
        enableOperation.get(OP).set(ENABLE);
        enableOperation.get(OP_ADDR).set(address);
        enableOperation.get(PERSISTENT).set(dataSource.get(PERSISTENT));
        result.add(enableOperation);
      }
    }
  }
  context.completeStep();
}
