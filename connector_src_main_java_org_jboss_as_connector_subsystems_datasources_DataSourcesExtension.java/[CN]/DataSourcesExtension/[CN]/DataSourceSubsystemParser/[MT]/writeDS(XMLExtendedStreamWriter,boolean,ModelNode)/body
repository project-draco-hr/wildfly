{
  for (  String dsName : datasources.keys()) {
    final ModelNode dataSourceNode=datasources.get(dsName);
    writer.writeStartElement(isXADataSource ? DataSources.Tag.XA_DATASOURCE.getLocalName() : DataSources.Tag.DATASOURCE.getLocalName());
    JTA.marshallAsAttribute(dataSourceNode,writer);
    JNDI_NAME.marshallAsAttribute(dataSourceNode,writer);
    writer.writeAttribute("pool-name",dsName);
    ENABLED.marshallAsAttribute(dataSourceNode,writer);
    USE_JAVA_CONTEXT.marshallAsAttribute(dataSourceNode,writer);
    SPY.marshallAsAttribute(dataSourceNode,writer);
    USE_CCM.marshallAsAttribute(dataSourceNode,writer);
    CONNECTABLE.marshallAsAttribute(dataSourceNode,writer);
    TRACKING.marshallAsAttribute(dataSourceNode,writer);
    MCP.marshallAsAttribute(dataSourceNode,writer);
    ENLISTMENT_TRACE.marshallAsAttribute(dataSourceNode,writer);
    STATISTICS_ENABLED.marshallAsAttribute(dataSourceNode,writer);
    if (!isXADataSource) {
      CONNECTION_URL.marshallAsElement(dataSourceNode,writer);
      DRIVER_CLASS.marshallAsElement(dataSourceNode,writer);
      DATASOURCE_CLASS.marshallAsElement(dataSourceNode,writer);
      if (dataSourceNode.hasDefined(CONNECTION_PROPERTIES.getName())) {
        for (        Property connectionProperty : dataSourceNode.get(CONNECTION_PROPERTIES.getName()).asPropertyList()) {
          writeProperty(writer,dataSourceNode,connectionProperty.getName(),connectionProperty.getValue().get("value").asString(),DataSource.Tag.CONNECTION_PROPERTY.getLocalName());
        }
      }
    }
    if (isXADataSource) {
      if (dataSourceNode.hasDefined(XADATASOURCE_PROPERTIES.getName())) {
        for (        Property prop : dataSourceNode.get(XADATASOURCE_PROPERTIES.getName()).asPropertyList()) {
          writeProperty(writer,dataSourceNode,prop.getName(),prop.getValue().get("value").asString(),XaDataSource.Tag.XA_DATASOURCE_PROPERTY.getLocalName());
        }
      }
      XA_DATASOURCE_CLASS.marshallAsElement(dataSourceNode,writer);
    }
    DATASOURCE_DRIVER.marshallAsElement(dataSourceNode,writer);
    if (isXADataSource) {
      URL_DELIMITER.marshallAsElement(dataSourceNode,writer);
      URL_PROPERTY.marshallAsElement(dataSourceNode,writer);
      URL_SELECTOR_STRATEGY_CLASS_NAME.marshallAsElement(dataSourceNode,writer);
    }
    NEW_CONNECTION_SQL.marshallAsElement(dataSourceNode,writer);
    TRANSACTION_ISOLATION.marshallAsElement(dataSourceNode,writer);
    if (!isXADataSource) {
      URL_DELIMITER.marshallAsElement(dataSourceNode,writer);
      URL_SELECTOR_STRATEGY_CLASS_NAME.marshallAsElement(dataSourceNode,writer);
    }
    boolean poolRequired=INITIAL_POOL_SIZE.isMarshallable(dataSourceNode) || MIN_POOL_SIZE.isMarshallable(dataSourceNode) || MAX_POOL_SIZE.isMarshallable(dataSourceNode)|| POOL_PREFILL.isMarshallable(dataSourceNode)|| POOL_USE_STRICT_MIN.isMarshallable(dataSourceNode)|| POOL_FLUSH_STRATEGY.isMarshallable(dataSourceNode)|| ALLOW_MULTIPLE_USERS.isMarshallable(dataSourceNode)|| CONNECTION_LISTENER_CLASS.isMarshallable(dataSourceNode)|| CONNECTION_LISTENER_PROPERTIES.isMarshallable(dataSourceNode);
    if (isXADataSource) {
      poolRequired=poolRequired || SAME_RM_OVERRIDE.isMarshallable(dataSourceNode) || INTERLEAVING.isMarshallable(dataSourceNode)|| NO_TX_SEPARATE_POOL.isMarshallable(dataSourceNode)|| PAD_XID.isMarshallable(dataSourceNode)|| WRAP_XA_RESOURCE.isMarshallable(dataSourceNode);
    }
    final boolean capacityRequired=CAPACITY_INCREMENTER_CLASS.isMarshallable(dataSourceNode) || CAPACITY_INCREMENTER_PROPERTIES.isMarshallable(dataSourceNode) || CAPACITY_DECREMENTER_CLASS.isMarshallable(dataSourceNode)|| CAPACITY_DECREMENTER_PROPERTIES.isMarshallable(dataSourceNode);
    poolRequired=poolRequired || capacityRequired;
    if (poolRequired) {
      writer.writeStartElement(isXADataSource ? XaDataSource.Tag.XA_POOL.getLocalName() : DataSource.Tag.POOL.getLocalName());
      MIN_POOL_SIZE.marshallAsElement(dataSourceNode,writer);
      INITIAL_POOL_SIZE.marshallAsElement(dataSourceNode,writer);
      MAX_POOL_SIZE.marshallAsElement(dataSourceNode,writer);
      POOL_PREFILL.marshallAsElement(dataSourceNode,writer);
      POOL_USE_STRICT_MIN.marshallAsElement(dataSourceNode,writer);
      POOL_FLUSH_STRATEGY.marshallAsElement(dataSourceNode,writer);
      ALLOW_MULTIPLE_USERS.marshallAsElement(dataSourceNode,writer);
      if (dataSourceNode.hasDefined(CONNECTION_LISTENER_CLASS.getName())) {
        writer.writeStartElement(DsPool.Tag.CONNECTION_LISTENER.getLocalName());
        writer.writeAttribute(org.jboss.jca.common.api.metadata.common.Extension.Attribute.CLASS_NAME.getLocalName(),dataSourceNode.get(CONNECTION_LISTENER_CLASS.getName()).asString());
        if (dataSourceNode.hasDefined(CONNECTION_LISTENER_PROPERTIES.getName())) {
          for (          Property connectionProperty : dataSourceNode.get(CONNECTION_LISTENER_PROPERTIES.getName()).asPropertyList()) {
            writeProperty(writer,dataSourceNode,connectionProperty.getName(),connectionProperty.getValue().asString(),org.jboss.jca.common.api.metadata.common.Extension.Tag.CONFIG_PROPERTY.getLocalName());
          }
        }
        writer.writeEndElement();
      }
      if (capacityRequired) {
        writer.writeStartElement(DsPool.Tag.CAPACITY.getLocalName());
        if (dataSourceNode.hasDefined(CAPACITY_INCREMENTER_CLASS.getName())) {
          writer.writeStartElement(Capacity.Tag.INCREMENTER.getLocalName());
          CAPACITY_INCREMENTER_CLASS.marshallAsAttribute(dataSourceNode,writer);
          CAPACITY_INCREMENTER_PROPERTIES.marshallAsElement(dataSourceNode,writer);
          writer.writeEndElement();
        }
        if (dataSourceNode.hasDefined(CAPACITY_DECREMENTER_CLASS.getName())) {
          writer.writeStartElement(Capacity.Tag.DECREMENTER.getLocalName());
          CAPACITY_DECREMENTER_CLASS.marshallAsAttribute(dataSourceNode,writer);
          CAPACITY_DECREMENTER_PROPERTIES.marshallAsElement(dataSourceNode,writer);
          writer.writeEndElement();
        }
        writer.writeEndElement();
      }
      if (isXADataSource) {
        SAME_RM_OVERRIDE.marshallAsElement(dataSourceNode,writer);
        INTERLEAVING.marshallAsElement(dataSourceNode,writer);
        NO_TX_SEPARATE_POOL.marshallAsElement(dataSourceNode,writer);
        PAD_XID.marshallAsElement(dataSourceNode,writer);
        WRAP_XA_RESOURCE.marshallAsElement(dataSourceNode,writer);
      }
      writer.writeEndElement();
    }
    boolean securityRequired=USERNAME.isMarshallable(dataSourceNode) || PASSWORD.isMarshallable(dataSourceNode) || SECURITY_DOMAIN.isMarshallable(dataSourceNode)|| REAUTH_PLUGIN_CLASSNAME.isMarshallable(dataSourceNode)|| REAUTHPLUGIN_PROPERTIES.isMarshallable(dataSourceNode);
    if (securityRequired) {
      writer.writeStartElement(DataSource.Tag.SECURITY.getLocalName());
      USERNAME.marshallAsElement(dataSourceNode,writer);
      PASSWORD.marshallAsElement(dataSourceNode,writer);
      SECURITY_DOMAIN.marshallAsElement(dataSourceNode,writer);
      if (dataSourceNode.hasDefined(REAUTH_PLUGIN_CLASSNAME.getName())) {
        writer.writeStartElement(DsSecurity.Tag.REAUTH_PLUGIN.getLocalName());
        writer.writeAttribute(org.jboss.jca.common.api.metadata.common.Extension.Attribute.CLASS_NAME.getLocalName(),dataSourceNode.get(REAUTH_PLUGIN_CLASSNAME.getName()).asString());
        if (dataSourceNode.hasDefined(REAUTHPLUGIN_PROPERTIES.getName())) {
          for (          Property connectionProperty : dataSourceNode.get(REAUTHPLUGIN_PROPERTIES.getName()).asPropertyList()) {
            writeProperty(writer,dataSourceNode,connectionProperty.getName(),connectionProperty.getValue().asString(),org.jboss.jca.common.api.metadata.common.Extension.Tag.CONFIG_PROPERTY.getLocalName());
          }
        }
        writer.writeEndElement();
      }
      writer.writeEndElement();
    }
    boolean recoveryRequired=RECOVERY_USERNAME.isMarshallable(dataSourceNode) || RECOVERY_PASSWORD.isMarshallable(dataSourceNode) || RECOVERY_SECURITY_DOMAIN.isMarshallable(dataSourceNode)|| RECOVER_PLUGIN_CLASSNAME.isMarshallable(dataSourceNode)|| NO_RECOVERY.isMarshallable(dataSourceNode)|| RECOVER_PLUGIN_PROPERTIES.isMarshallable(dataSourceNode);
    if (recoveryRequired && isXADataSource) {
      writer.writeStartElement(XaDataSource.Tag.RECOVERY.getLocalName());
      NO_RECOVERY.marshallAsAttribute(dataSourceNode,writer);
      if (hasAnyOf(dataSourceNode,RECOVERY_USERNAME,RECOVERY_PASSWORD,RECOVERY_SECURITY_DOMAIN)) {
        writer.writeStartElement(Recovery.Tag.RECOVER_CREDENTIAL.getLocalName());
        RECOVERY_USERNAME.marshallAsElement(dataSourceNode,writer);
        RECOVERY_PASSWORD.marshallAsElement(dataSourceNode,writer);
        RECOVERY_SECURITY_DOMAIN.marshallAsElement(dataSourceNode,writer);
        writer.writeEndElement();
      }
      if (hasAnyOf(dataSourceNode,RECOVER_PLUGIN_CLASSNAME)) {
        writer.writeStartElement(Recovery.Tag.RECOVER_PLUGIN.getLocalName());
        writer.writeAttribute(org.jboss.jca.common.api.metadata.common.Extension.Attribute.CLASS_NAME.getLocalName(),dataSourceNode.get(RECOVER_PLUGIN_CLASSNAME.getName()).asString());
        if (dataSourceNode.hasDefined(RECOVER_PLUGIN_PROPERTIES.getName())) {
          for (          Property connectionProperty : dataSourceNode.get(RECOVER_PLUGIN_PROPERTIES.getName()).asPropertyList()) {
            writeProperty(writer,dataSourceNode,connectionProperty.getName(),connectionProperty.getValue().asString(),org.jboss.jca.common.api.metadata.common.Extension.Tag.CONFIG_PROPERTY.getLocalName());
          }
        }
        writer.writeEndElement();
      }
      writer.writeEndElement();
    }
    boolean validationRequired=VALID_CONNECTION_CHECKER_CLASSNAME.isMarshallable(dataSourceNode) || VALID_CONNECTION_CHECKER_PROPERTIES.isMarshallable(dataSourceNode) || CHECK_VALID_CONNECTION_SQL.isMarshallable(dataSourceNode)|| VALIDATE_ON_MATCH.isMarshallable(dataSourceNode)|| BACKGROUNDVALIDATION.isMarshallable(dataSourceNode)|| BACKGROUNDVALIDATIONMILLIS.isMarshallable(dataSourceNode)|| USE_FAST_FAIL.isMarshallable(dataSourceNode)|| STALE_CONNECTION_CHECKER_CLASSNAME.isMarshallable(dataSourceNode)|| STALE_CONNECTION_CHECKER_PROPERTIES.isMarshallable(dataSourceNode)|| EXCEPTION_SORTER_CLASSNAME.isMarshallable(dataSourceNode)|| EXCEPTION_SORTER_PROPERTIES.isMarshallable(dataSourceNode);
    if (validationRequired) {
      writer.writeStartElement(DataSource.Tag.VALIDATION.getLocalName());
      if (dataSourceNode.hasDefined(VALID_CONNECTION_CHECKER_CLASSNAME.getName())) {
        writer.writeStartElement(Validation.Tag.VALID_CONNECTION_CHECKER.getLocalName());
        writer.writeAttribute(org.jboss.jca.common.api.metadata.common.Extension.Attribute.CLASS_NAME.getLocalName(),dataSourceNode.get(VALID_CONNECTION_CHECKER_CLASSNAME.getName()).asString());
        if (dataSourceNode.hasDefined(VALID_CONNECTION_CHECKER_PROPERTIES.getName())) {
          for (          Property connectionProperty : dataSourceNode.get(VALID_CONNECTION_CHECKER_PROPERTIES.getName()).asPropertyList()) {
            writeProperty(writer,dataSourceNode,connectionProperty.getName(),connectionProperty.getValue().asString(),org.jboss.jca.common.api.metadata.common.Extension.Tag.CONFIG_PROPERTY.getLocalName());
          }
        }
        writer.writeEndElement();
      }
      CHECK_VALID_CONNECTION_SQL.marshallAsElement(dataSourceNode,writer);
      VALIDATE_ON_MATCH.marshallAsElement(dataSourceNode,writer);
      BACKGROUNDVALIDATION.marshallAsElement(dataSourceNode,writer);
      BACKGROUNDVALIDATIONMILLIS.marshallAsElement(dataSourceNode,writer);
      USE_FAST_FAIL.marshallAsElement(dataSourceNode,writer);
      if (dataSourceNode.hasDefined(STALE_CONNECTION_CHECKER_CLASSNAME.getName())) {
        writer.writeStartElement(Validation.Tag.STALE_CONNECTION_CHECKER.getLocalName());
        writer.writeAttribute(org.jboss.jca.common.api.metadata.common.Extension.Attribute.CLASS_NAME.getLocalName(),dataSourceNode.get(STALE_CONNECTION_CHECKER_CLASSNAME.getName()).asString());
        if (dataSourceNode.hasDefined(STALE_CONNECTION_CHECKER_PROPERTIES.getName())) {
          for (          Property connectionProperty : dataSourceNode.get(STALE_CONNECTION_CHECKER_PROPERTIES.getName()).asPropertyList()) {
            writeProperty(writer,dataSourceNode,connectionProperty.getName(),connectionProperty.getValue().asString(),org.jboss.jca.common.api.metadata.common.Extension.Tag.CONFIG_PROPERTY.getLocalName());
          }
        }
        writer.writeEndElement();
      }
      if (dataSourceNode.hasDefined(EXCEPTION_SORTER_CLASSNAME.getName())) {
        writer.writeStartElement(Validation.Tag.EXCEPTION_SORTER.getLocalName());
        writer.writeAttribute(org.jboss.jca.common.api.metadata.common.Extension.Attribute.CLASS_NAME.getLocalName(),dataSourceNode.get(EXCEPTION_SORTER_CLASSNAME.getName()).asString());
        if (dataSourceNode.hasDefined(EXCEPTION_SORTER_PROPERTIES.getName())) {
          for (          Property connectionProperty : dataSourceNode.get(EXCEPTION_SORTER_PROPERTIES.getName()).asPropertyList()) {
            writeProperty(writer,dataSourceNode,connectionProperty.getName(),connectionProperty.getValue().asString(),org.jboss.jca.common.api.metadata.common.Extension.Tag.CONFIG_PROPERTY.getLocalName());
          }
        }
        writer.writeEndElement();
      }
      writer.writeEndElement();
    }
    boolean timeoutRequired=BLOCKING_TIMEOUT_WAIT_MILLIS.isMarshallable(dataSourceNode) || IDLETIMEOUTMINUTES.isMarshallable(dataSourceNode) || SET_TX_QUERY_TIMEOUT.isMarshallable(dataSourceNode)|| QUERY_TIMEOUT.isMarshallable(dataSourceNode)|| USE_TRY_LOCK.isMarshallable(dataSourceNode)|| ALLOCATION_RETRY.isMarshallable(dataSourceNode)|| ALLOCATION_RETRY_WAIT_MILLIS.isMarshallable(dataSourceNode)|| XA_RESOURCE_TIMEOUT.isMarshallable(dataSourceNode);
    if (timeoutRequired) {
      writer.writeStartElement(DataSource.Tag.TIMEOUT.getLocalName());
      SET_TX_QUERY_TIMEOUT.marshallAsElement(dataSourceNode,writer);
      BLOCKING_TIMEOUT_WAIT_MILLIS.marshallAsElement(dataSourceNode,writer);
      IDLETIMEOUTMINUTES.marshallAsElement(dataSourceNode,writer);
      QUERY_TIMEOUT.marshallAsElement(dataSourceNode,writer);
      USE_TRY_LOCK.marshallAsElement(dataSourceNode,writer);
      ALLOCATION_RETRY.marshallAsElement(dataSourceNode,writer);
      ALLOCATION_RETRY_WAIT_MILLIS.marshallAsElement(dataSourceNode,writer);
      XA_RESOURCE_TIMEOUT.marshallAsElement(dataSourceNode,writer);
      writer.writeEndElement();
    }
    boolean statementRequired=hasAnyOf(dataSourceNode,TRACK_STATEMENTS,PREPARED_STATEMENTS_CACHE_SIZE,SHARE_PREPARED_STATEMENTS);
    if (statementRequired) {
      writer.writeStartElement(DataSource.Tag.STATEMENT.getLocalName());
      TRACK_STATEMENTS.marshallAsElement(dataSourceNode,writer);
      PREPARED_STATEMENTS_CACHE_SIZE.marshallAsElement(dataSourceNode,writer);
      SHARE_PREPARED_STATEMENTS.marshallAsElement(dataSourceNode,writer);
      writer.writeEndElement();
    }
    writer.writeEndElement();
  }
}
