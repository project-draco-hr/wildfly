{
  context.startSubsystemElement(Namespace.CURRENT.getUriString(),false);
  ModelNode node=context.getModelNode();
  writer.writeStartElement(DATASOURCES);
  if (node.hasDefined(DATA_SOURCE) || node.hasDefined(XA_DATASOURCE)) {
    if (node.hasDefined(DATA_SOURCE)) {
      writeDS(writer,false,node.get(DATA_SOURCE));
    }
    if (node.hasDefined(XA_DATASOURCE)) {
      writeDS(writer,true,node.get(XA_DATASOURCE));
    }
  }
  if (node.hasDefined(JDBC_DRIVER_NAME)) {
    writer.writeStartElement(DataSources.Tag.DRIVERS.getLocalName());
    ModelNode drivers=node.get(JDBC_DRIVER_NAME);
    for (    String driverName : drivers.keys()) {
      ModelNode driver=drivers.get(driverName);
      writer.writeStartElement(DataSources.Tag.DRIVER.getLocalName());
      writer.writeAttribute(Driver.Attribute.NAME.getLocalName(),driver.require(DRIVER_NAME.getName()).asString());
      if (has(driver,DRIVER_MODULE_NAME.getName())) {
        String moduleName=driver.get(DRIVER_MODULE_NAME.getName()).asString();
        if (has(driver,MODULE_SLOT.getName())) {
          moduleName=moduleName + ":" + driver.get(MODULE_SLOT.getName()).asString();
        }
        writer.writeAttribute(Driver.Attribute.MODULE.getLocalName(),moduleName);
      }
      writeAttributeIfHas(writer,driver,Driver.Attribute.MAJOR_VERSION,DRIVER_MAJOR_VERSION.getName());
      writeAttributeIfHas(writer,driver,Driver.Attribute.MINOR_VERSION,DRIVER_MINOR_VERSION.getName());
      writeElementIfHas(writer,driver,Driver.Tag.DRIVER_CLASS.getLocalName(),DRIVER_CLASS_NAME.getName());
      writeElementIfHas(writer,driver,Driver.Tag.XA_DATASOURCE_CLASS.getLocalName(),DRIVER_XA_DATASOURCE_CLASS_NAME.getName());
      writeElementIfHas(writer,driver,Driver.Tag.DATASOURCE_CLASS.getLocalName(),DRIVER_DATASOURCE_CLASS_NAME.getName());
      writer.writeEndElement();
    }
    writer.writeEndElement();
  }
  writer.writeEndElement();
  writer.writeEndElement();
}
