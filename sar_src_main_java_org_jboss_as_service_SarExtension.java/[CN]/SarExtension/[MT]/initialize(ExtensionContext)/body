{
  final SubsystemRegistration subsystem=context.registerSubsystem(SUBSYSTEM_NAME,MANAGEMENT_API_MAJOR_VERSION,MANAGEMENT_API_MINOR_VERSION,MANAGEMENT_API_MICRO_VERSION);
  final ManagementResourceRegistration registration=subsystem.registerSubsystemModel(RESOURCE_DEFINITION);
  registration.registerOperationHandler(DESCRIBE,SarDescribeHandler.INSTANCE,SarDescribeHandler.INSTANCE,false,OperationEntry.EntryType.PRIVATE);
  subsystem.registerXMLElementWriter(parser);
  PropertyEditors.init();
  registration.registerReadWriteAttribute("test",null,new OperationStepHandler(){
    @Override public void execute(    OperationContext context,    ModelNode operation) throws OperationFailedException {
      context.completeStep();
    }
  }
,AttributeAccess.Storage.CONFIGURATION);
  final SubSystemTransformersRegistry registry=subsystem.registerModelTransformers(ModelVersion.create(1,0,0));
  registry.registerOperationTransformer(PathAddress.EMPTY_ADDRESS,"read-resource",new AbstractOperationTransformer(){
    @Override protected ModelNode transform(    TransformationContext context,    PathAddress address,    ModelNode operation){
      System.out.print("transforming " + operation);
      return operation;
    }
  }
);
  registry.registerOperationTransformer(PathAddress.EMPTY_ADDRESS,"write-attribute",new AbstractOperationTransformer(){
    @Override protected ModelNode transform(    TransformationContext context,    PathAddress address,    ModelNode operation){
      System.out.print("transforming write-attribute" + operation);
      return operation;
    }
  }
);
}
