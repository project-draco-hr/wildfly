{
  try {
    final PathAddress address=PathAddress.pathAddress(operation.require(ModelDescriptionConstants.OP_ADDR));
    final ProxyController proxyExecutor=getRegistry().getProxyController(address);
    if (proxyExecutor != null) {
      if (proxyExecutor instanceof TransactionalProxyController) {
        ModelNode newOperation=operation.clone();
        newOperation.get(OP_ADDR).set(address.subAddress(proxyExecutor.getProxyNodeAddress().size()).toModelNode());
        return TransactionalProxyController.class.cast(proxyExecutor).execute(newOperation,handler,transaction);
      }
 else {
        throw new IllegalStateException(String.format("ProxyController at address %s does not support transactional operations",address));
      }
    }
    final String operationName=operation.require(ModelDescriptionConstants.OP).asString();
    final OperationHandler operationHandler=getRegistry().getOperationHandler(address,operationName);
    if (operationHandler == null) {
      throw new IllegalStateException("No handler for " + operationName + " at address "+ address);
    }
    final ModelNode subModel;
    if (operationHandler instanceof ModelAddOperationHandler) {
      validateNewAddress(address);
      subModel=new ModelNode();
    }
 else     if (operationHandler instanceof ModelQueryOperationHandler) {
      final ModelNode model=getModel();
synchronized (model) {
        subModel=address.navigate(model,false).clone();
      }
    }
 else {
      subModel=null;
    }
    final OperationContext context=getOperationContext(subModel,operation,operationHandler);
    final ResultHandler useHandler=(operationHandler instanceof ModelUpdateOperationHandler) ? new ResultHandler(){
      @Override public void handleResultFragment(      final String[] location,      final ModelNode result){
        handler.handleResultFragment(location,result);
      }
      @Override public void handleResultComplete(){
        handler.handleResultComplete();
      }
      @Override public void handleFailed(      final ModelNode failureDescription){
        handler.handleFailed(failureDescription);
      }
      @Override public void handleCancellation(){
        handler.handleCancellation();
      }
    }
 : handler;
    try {
      final OperationResult result=operationHandler.execute(context,operation,useHandler);
      ControllerResource txResource=getControllerResource(context,operation,operationHandler,useHandler,address,subModel);
      if (txResource != null) {
        transaction.registerResource(txResource);
      }
      return result;
    }
 catch (    OperationFailedException e) {
      transaction.setRollbackOnly();
      useHandler.handleFailed(e.getFailureDescription());
      return new BasicOperationResult();
    }
  }
 catch (  final Throwable t) {
    transaction.setRollbackOnly();
    log.errorf(t,"operation (%s) failed - address: (%s)",operation.get(OP),operation.get(OP_ADDR));
    handler.handleFailed(getFailureResult(t));
    return new BasicOperationResult();
  }
}
