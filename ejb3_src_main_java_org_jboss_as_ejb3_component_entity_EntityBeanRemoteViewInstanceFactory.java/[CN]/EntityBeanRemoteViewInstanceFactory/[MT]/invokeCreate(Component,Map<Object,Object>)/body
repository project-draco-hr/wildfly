{
  final Method ejbCreate=(Method)contextData.get(EntityBeanHomeCreateInterceptorFactory.EJB_CREATE_METHOD_KEY);
  if (ejbCreate == null) {
    throw MESSAGES.entityCannotBeCreatedDueToMissingCreateMethod(this.beanName);
  }
  final Method ejbPostCreate=(Method)contextData.get(EntityBeanHomeCreateInterceptorFactory.EJB_POST_CREATE_METHOD_KEY);
  final Object[] params=(Object[])contextData.get(EntityBeanHomeCreateInterceptorFactory.PARAMETERS_KEY);
  if (!(component instanceof EntityBeanComponent)) {
    throw MESSAGES.notAnEntityBean(component);
  }
  final EntityBeanComponent entityBeanComponent=(EntityBeanComponent)component;
  final EntityBeanComponentInstance instance=entityBeanComponent.acquireUnAssociatedInstance();
  final Object primaryKey;
  primaryKey=invokeEjbCreate(contextData,ejbCreate,instance,params);
  instance.associate(primaryKey);
  entityBeanComponent.getCache().create(instance);
  boolean synchronizationRegistered=false;
  boolean exception=false;
  try {
    invokeEjbPostCreate(contextData,ejbPostCreate,instance,params);
    final TransactionSynchronizationRegistry transactionSynchronizationRegistry=entityBeanComponent.getTransactionSynchronizationRegistry();
    if (transactionSynchronizationRegistry.getTransactionKey() != null) {
      transactionSynchronizationRegistry.registerInterposedSynchronization(new Synchronization(){
        @Override public void beforeCompletion(){
        }
        @Override public void afterCompletion(        final int status){
          entityBeanComponent.getCache().release(instance,status == Status.STATUS_COMMITTED);
        }
      }
);
      synchronizationRegistered=true;
    }
  }
 catch (  Exception e) {
    entityBeanComponent.getCache().release(instance,false);
    exception=true;
    throw e;
  }
 finally {
    if (!synchronizationRegistered && !exception) {
      entityBeanComponent.getCache().release(instance,true);
    }
  }
  return primaryKey;
}
