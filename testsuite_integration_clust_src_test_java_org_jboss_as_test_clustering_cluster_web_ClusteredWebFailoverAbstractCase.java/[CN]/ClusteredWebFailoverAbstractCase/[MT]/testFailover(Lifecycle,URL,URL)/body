{
  DefaultHttpClient client=org.jboss.as.test.http.util.HttpClientUtils.relaxedCookieHttpClient();
  URI uri1=SimpleServlet.createURI(baseURL1);
  URI uri2=SimpleServlet.createURI(baseURL2);
  try {
    HttpResponse response=client.execute(new HttpGet(uri1));
    try {
      Assert.assertEquals(HttpServletResponse.SC_OK,response.getStatusLine().getStatusCode());
      Assert.assertEquals(1,Integer.parseInt(response.getFirstHeader(SimpleServlet.VALUE_HEADER).getValue()));
      Map.Entry<String,String> entry=parseSessionRoute(response);
      Assert.assertEquals(NODE_1,entry.getValue());
      Assert.assertEquals(entry.getKey(),response.getFirstHeader(SimpleServlet.SESSION_ID_HEADER).getValue());
    }
  finally {
      HttpClientUtils.closeQuietly(response);
    }
    response=client.execute(new HttpGet(uri1));
    try {
      Assert.assertEquals(HttpServletResponse.SC_OK,response.getStatusLine().getStatusCode());
      Assert.assertEquals(2,Integer.parseInt(response.getFirstHeader(SimpleServlet.VALUE_HEADER).getValue()));
      Map.Entry<String,String> entry=parseSessionRoute(response);
      Assert.assertNull(entry);
    }
  finally {
      HttpClientUtils.closeQuietly(response);
    }
    lifecycle.stop(NODE_1);
    response=client.execute(new HttpGet(uri2));
    try {
      Assert.assertEquals(HttpServletResponse.SC_OK,response.getStatusLine().getStatusCode());
      Assert.assertEquals("Session failed to replicate after container 1 was shutdown.",3,Integer.parseInt(response.getFirstHeader(SimpleServlet.VALUE_HEADER).getValue()));
      Map.Entry<String,String> entry=parseSessionRoute(response);
      Assert.assertEquals(NODE_2,entry.getValue());
      Assert.assertEquals(entry.getKey(),response.getFirstHeader(SimpleServlet.SESSION_ID_HEADER).getValue());
    }
  finally {
      HttpClientUtils.closeQuietly(response);
    }
    response=client.execute(new HttpGet(uri2));
    try {
      Assert.assertEquals(HttpServletResponse.SC_OK,response.getStatusLine().getStatusCode());
      Assert.assertEquals(4,Integer.parseInt(response.getFirstHeader(SimpleServlet.VALUE_HEADER).getValue()));
      Map.Entry<String,String> entry=parseSessionRoute(response);
      Assert.assertNull(entry);
    }
  finally {
      HttpClientUtils.closeQuietly(response);
    }
    lifecycle.start(NODE_1);
    response=client.execute(new HttpGet(uri2));
    try {
      Assert.assertEquals(HttpServletResponse.SC_OK,response.getStatusLine().getStatusCode());
      Assert.assertEquals("Session failed to replicate after container 1 was brough up.",5,Integer.parseInt(response.getFirstHeader(SimpleServlet.VALUE_HEADER).getValue()));
      Map.Entry<String,String> entry=parseSessionRoute(response);
      Assert.assertNull(entry);
    }
  finally {
      HttpClientUtils.closeQuietly(response);
    }
    response=client.execute(new HttpGet(uri2));
    try {
      Assert.assertEquals(HttpServletResponse.SC_OK,response.getStatusLine().getStatusCode());
      Assert.assertEquals(6,Integer.parseInt(response.getFirstHeader(SimpleServlet.VALUE_HEADER).getValue()));
      Map.Entry<String,String> entry=parseSessionRoute(response);
      Assert.assertNull(entry);
    }
  finally {
      HttpClientUtils.closeQuietly(response);
    }
    lifecycle.stop(NODE_2);
    response=client.execute(new HttpGet(uri1));
    try {
      Assert.assertEquals(HttpServletResponse.SC_OK,response.getStatusLine().getStatusCode());
      Assert.assertEquals("Session failed to replicate after container 1 was shutdown.",7,Integer.parseInt(response.getFirstHeader(SimpleServlet.VALUE_HEADER).getValue()));
      Map.Entry<String,String> entry=parseSessionRoute(response);
      Assert.assertEquals(NODE_1,entry.getValue());
      Assert.assertEquals(entry.getKey(),response.getFirstHeader(SimpleServlet.SESSION_ID_HEADER).getValue());
    }
  finally {
      HttpClientUtils.closeQuietly(response);
    }
    response=client.execute(new HttpGet(uri1));
    try {
      Assert.assertEquals(HttpServletResponse.SC_OK,response.getStatusLine().getStatusCode());
      Assert.assertEquals(8,Integer.parseInt(response.getFirstHeader(SimpleServlet.VALUE_HEADER).getValue()));
      Map.Entry<String,String> entry=parseSessionRoute(response);
      Assert.assertNull(entry);
    }
  finally {
      HttpClientUtils.closeQuietly(response);
    }
    lifecycle.start(NODE_2);
    response=client.execute(new HttpGet(uri1));
    try {
      Assert.assertEquals(HttpServletResponse.SC_OK,response.getStatusLine().getStatusCode());
      Assert.assertEquals("Session failed to replicate after container 1 was brough up.",9,Integer.parseInt(response.getFirstHeader(SimpleServlet.VALUE_HEADER).getValue()));
      Map.Entry<String,String> entry=parseSessionRoute(response);
      Assert.assertNull(entry);
    }
  finally {
      HttpClientUtils.closeQuietly(response);
    }
    response=client.execute(new HttpGet(uri1));
    try {
      Assert.assertEquals(HttpServletResponse.SC_OK,response.getStatusLine().getStatusCode());
      Assert.assertEquals(10,Integer.parseInt(response.getFirstHeader(SimpleServlet.VALUE_HEADER).getValue()));
      Map.Entry<String,String> entry=parseSessionRoute(response);
      Assert.assertNull(entry);
    }
  finally {
      HttpClientUtils.closeQuietly(response);
    }
  }
  finally {
    HttpClientUtils.closeQuietly(client);
  }
}
