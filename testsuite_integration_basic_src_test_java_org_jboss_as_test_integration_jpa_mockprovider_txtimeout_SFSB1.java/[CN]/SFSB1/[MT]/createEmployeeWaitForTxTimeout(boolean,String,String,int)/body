{
  System.out.println("org.jboss.as.test.integration.jpa.mockprovider.txtimeout.createEmployeeWaitForTxTimeout " + "entered, will wait for tx time out to occur");
  Employee emp=new Employee();
  emp.setId(id);
  emp.setAddress(address);
  emp.setName(name);
  entityManager.persist(emp);
  boolean done=false;
  if (registerTxSync) {
    transactionSynchronizationRegistry.registerInterposedSynchronization(new Synchronization(){
      @Override public void beforeCompletion(){
      }
      @Override public void afterCompletion(      int status){
        afterCompletionCalledByTMTimeoutThread=TxUtils.isTransactionManagerTimeoutThread();
      }
    }
);
  }
  while (!done) {
    try {
      Thread.sleep(250);
      entityManager.find(Employee.class,id);
      int status=transactionSynchronizationRegistry.getTransactionStatus();
switch (status) {
case Status.STATUS_COMMITTED:
        throw new RuntimeException("transaction was committed.");
case Status.STATUS_ROLLEDBACK:
      System.out.println("tx timed out and rolled back as expected, success case reached.");
    done=true;
  break;
case Status.STATUS_ACTIVE:
System.out.println("tx is still active, sleep for 250ms and check tx status again.");
break;
default :
System.out.println("tx status = " + status + ", sleep for 250ms and check tx status again.");
break;
}
}
 catch (InterruptedException e) {
e.printStackTrace();
return;
}
System.out.println("org.jboss.as.test.integration.jpa.mockprovider.txtimeout.createEmployeeWaitForTxTimeout waiting for tx to timeout");
}
}
