{
  final List<Deployment> deployments=new ArrayList<Deployment>(deploymentRoots.length);
  final ServiceContainer serviceContainer=this.serviceContainer;
  final BatchBuilder batchBuilder=serviceContainer.batchBuilder();
  final DeploymentServiceListener deploymentServiceListener=new DeploymentServiceListener(new DeploymentServiceListener.Callback(){
    @Override public void run(    Map<ServiceName,StartException> serviceFailures,    long elapsedTime,    int numServices){
      DeploymentResult.Result result=DeploymentResult.Result.SUCCESS;
      DeploymentException deploymentException=null;
      if (serviceFailures.size() > 0) {
        result=DeploymentResult.Result.FAILURE;
        deploymentException=new DeploymentException("Failed to execute deployments.  Not all services started cleanly.");
      }
      future.setDeploymentResult(new DeploymentResultImpl(result,deploymentException,serviceFailures,elapsedTime,numServices));
    }
  }
);
  batchBuilder.addListener(deploymentServiceListener);
  try {
    for (    VirtualFile deploymentRoot : deploymentRoots) {
      final String deploymentName=deploymentRoot.getName();
      if (!deploymentRoot.exists())       throw new DeploymentException("Deployment root does not exist." + deploymentRoot);
      final DeploymentUnitContextImpl deploymentUnitContext=new DeploymentUnitContextImpl(deploymentName);
      attachVirtualFile(deploymentUnitContext,deploymentRoot);
      final ServiceName mountServiceName=MOUNT_SERVICE_NAME.append(deploymentName);
      final VFSMountService vfsMountService=new VFSMountService(deploymentRoot.getPathName(),tempFileProvider,false);
      batchBuilder.addService(mountServiceName,vfsMountService).setInitialMode(ServiceController.Mode.ON_DEMAND);
      final ServiceName deploymentServiceName=DeploymentService.SERVICE_NAME.append(deploymentName);
      batchBuilder.addService(deploymentServiceName,new DeploymentService(deploymentName)).setInitialMode(ServiceController.Mode.IMMEDIATE).addDependency(mountServiceName);
      final Deployment deployment=new Deployment(deploymentName,deploymentRoot,deploymentServiceName,deploymentUnitContext);
      if (deploymentMap.putIfAbsent(deploymentRoot,deployment) != null)       throw new DeploymentException("Deployment already exists for deployment root: " + deploymentRoot);
      deployments.add(deployment);
    }
    deploymentServiceListener.startBatch(new Runnable(){
      public void run(){
        try {
          executeDeploymentProcessors(deployments);
        }
 catch (        DeploymentException e) {
          future.setDeploymentResult(new DeploymentResultImpl(DeploymentResult.Result.FAILURE,e,Collections.<ServiceName,StartException>emptyMap(),0L,0));
          return;
        }
        try {
          executeDeploymentItems(future,deployments,deploymentServiceListener);
        }
 catch (        DeploymentException e) {
          future.setDeploymentResult(new DeploymentResultImpl(DeploymentResult.Result.FAILURE,e,Collections.<ServiceName,StartException>emptyMap(),0L,0));
        }
      }
    }
);
    batchBuilder.install();
    deploymentServiceListener.finishBatch();
  }
 catch (  DeploymentException e) {
    future.setDeploymentResult(new DeploymentResultImpl(DeploymentResult.Result.FAILURE,e,Collections.<ServiceName,StartException>emptyMap(),0L,0));
  }
catch (  Throwable t) {
    future.setDeploymentResult(new DeploymentResultImpl(DeploymentResult.Result.FAILURE,new DeploymentException(t),Collections.<ServiceName,StartException>emptyMap(),0L,0));
  }
}
