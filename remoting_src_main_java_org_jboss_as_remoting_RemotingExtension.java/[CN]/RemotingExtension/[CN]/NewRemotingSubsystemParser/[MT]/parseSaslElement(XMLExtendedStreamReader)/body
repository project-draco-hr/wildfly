{
  final ModelNode saslElement=new ModelNode();
  final int count=reader.getAttributeCount();
  if (count > 0) {
    throw unexpectedAttribute(reader,0);
  }
  final EnumSet<Element> visited=EnumSet.noneOf(Element.class);
  while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
switch (Namespace.forUri(reader.getNamespaceURI())) {
case REMOTING_1_0:
{
        final Element element=Element.forName(reader.getLocalName());
        if (visited.contains(element)) {
          throw unexpectedElement(reader);
        }
        visited.add(element);
switch (element) {
case INCLUDE_MECHANISMS:
{
            final ModelNode includes=saslElement.get(INCLUDE_MECHANISMS);
            for (            final String s : readArrayAttributeElement(reader,"value",String.class)) {
              includes.add().set(s);
            }
            break;
          }
case POLICY:
{
          saslElement.get(POLICY).set(parsePolicyElement(reader));
          break;
        }
case PROPERTIES:
{
        parseProperties(reader,saslElement.get(PROPERTIES));
        break;
      }
case QOP:
{
      saslElement.get(QOP).set(readArrayAttributeElement(reader,"value",SaslQop.class).toString());
      break;
    }
case REUSE_SESSION:
{
    saslElement.get(REUSE_SESSION).set(readBooleanAttributeElement(reader,"value"));
    break;
  }
case SERVER_AUTH:
{
  saslElement.get(SERVER_AUTH).set(readBooleanAttributeElement(reader,"value"));
  break;
}
case STRENGTH:
{
saslElement.get(STRENGTH).set(readArrayAttributeElement(reader,"value",SaslStrength.class).toString());
break;
}
default :
{
throw unexpectedElement(reader);
}
}
break;
}
default :
{
throw unexpectedElement(reader);
}
}
}
return saslElement;
}
