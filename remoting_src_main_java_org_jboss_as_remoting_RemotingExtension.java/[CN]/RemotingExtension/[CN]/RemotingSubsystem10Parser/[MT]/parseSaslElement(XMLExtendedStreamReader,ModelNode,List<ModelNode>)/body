{
  final ModelNode saslElement=new ModelNode();
  saslElement.get(OP).set(ADD);
  saslElement.get(OP_ADDR).set(address).add(SaslResource.SASL_CONFIG_PATH.getKey(),SaslResource.SASL_CONFIG_PATH.getValue());
  list.add(saslElement);
  final int count=reader.getAttributeCount();
  if (count > 0) {
    throw unexpectedAttribute(reader,0);
  }
  final EnumSet<Element> visited=EnumSet.noneOf(Element.class);
  while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
switch (Namespace.forUri(reader.getNamespaceURI())) {
case REMOTING_1_0:
{
        final Element element=Element.forName(reader.getLocalName());
        if (visited.contains(element)) {
          throw unexpectedElement(reader);
        }
        visited.add(element);
switch (element) {
case INCLUDE_MECHANISMS:
{
            final ModelNode includes=saslElement.get(INCLUDE_MECHANISMS);
            for (            final String s : readArrayAttributeElement(reader,"value",String.class)) {
              includes.add().set(s);
            }
            break;
          }
case POLICY:
{
          parsePolicyElement(reader,saslElement.get(OP_ADDR),list);
          break;
        }
case PROPERTIES:
{
        parseProperties(reader,saslElement.get(OP_ADDR),list);
        break;
      }
case QOP:
{
      String[] qop=readArrayAttributeElement(reader,"value",String.class);
      for (      String q : qop) {
        try {
          saslElement.get(QOP).add(SaslQop.fromString(q).getString().toLowerCase(Locale.ENGLISH));
        }
 catch (        IllegalArgumentException e) {
          throw MESSAGES.invalidQOPV(q);
        }
      }
      break;
    }
case REUSE_SESSION:
{
    saslElement.get(REUSE_SESSION).set(readBooleanAttributeElement(reader,"value"));
    break;
  }
case SERVER_AUTH:
{
  saslElement.get(SERVER_AUTH).set(readBooleanAttributeElement(reader,"value"));
  break;
}
case STRENGTH:
{
String[] strength=readArrayAttributeElement(reader,"value",String.class);
for (String s : strength) {
  try {
    saslElement.get(STRENGTH).add(SaslStrength.valueOf(s.toUpperCase(Locale.ENGLISH)).name().toLowerCase(Locale.ENGLISH));
  }
 catch (  IllegalArgumentException e) {
    throw MESSAGES.invalidStrength(s);
  }
}
break;
}
default :
{
throw unexpectedElement(reader);
}
}
break;
}
default :
{
throw unexpectedElement(reader);
}
}
}
}
