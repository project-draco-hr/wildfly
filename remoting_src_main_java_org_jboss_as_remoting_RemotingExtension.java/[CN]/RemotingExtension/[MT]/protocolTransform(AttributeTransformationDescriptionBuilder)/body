{
  builder.addRejectCheck(new RejectAttributeChecker.DefaultRejectAttributeChecker(){
    @Override protected boolean rejectAttribute(    final PathAddress address,    final String attributeName,    final ModelNode attributeValue,    final TransformationContext context){
      return !attributeValue.isDefined() || !attributeValue.asString().equals(Protocols.REMOTE);
    }
    @Override public String getRejectionLogMessage(    final Map<String,ModelNode> attributes){
      return RemotingMessages.MESSAGES.protocolMustBeRemote();
    }
  }
,RemoteOutboundConnectionResourceDefinition.PROTOCOL).setDiscard(new DiscardAttributeChecker.DefaultDiscardAttributeChecker(){
    @Override protected boolean isValueDiscardable(    final PathAddress address,    final String attributeName,    final ModelNode attributeValue,    final TransformationContext context){
      return attributeValue.isDefined() && attributeValue.asString().equals(Protocols.REMOTE);
    }
  }
,RemoteOutboundConnectionResourceDefinition.PROTOCOL);
  return builder;
}
