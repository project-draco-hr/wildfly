{
  for (  Property cacheTypeList : container.getValue().asPropertyList()) {
    if (cacheTypeList.getName().equals(ModelKeys.LOCAL_CACHE)) {
      for (      Property cache : cacheTypeList.getValue().asPropertyList()) {
        ModelNode cacheAddress=containerAddress.clone();
        cacheAddress.add(ModelKeys.LOCAL_CACHE,cache.getName());
        result.add(LocalCacheAdd.createOperation(cacheAddress,cache.getValue()));
        addCacheConfigCommands(cache,cacheAddress,result);
      }
    }
 else     if (cacheTypeList.getName().equals(ModelKeys.INVALIDATION_CACHE)) {
      for (      Property cache : cacheTypeList.getValue().asPropertyList()) {
        ModelNode cacheAddress=containerAddress.clone();
        cacheAddress.add(ModelKeys.INVALIDATION_CACHE,cache.getName());
        result.add(InvalidationCacheAdd.createOperation(cacheAddress,cache.getValue()));
        addCacheConfigCommands(cache,cacheAddress,result);
      }
    }
 else     if (cacheTypeList.getName().equals(ModelKeys.REPLICATED_CACHE)) {
      for (      Property cache : cacheTypeList.getValue().asPropertyList()) {
        ModelNode cacheAddress=containerAddress.clone();
        cacheAddress.add(ModelKeys.REPLICATED_CACHE,cache.getName());
        result.add(ReplicatedCacheAdd.createOperation(cacheAddress,cache.getValue()));
        addCacheConfigCommands(cache,cacheAddress,result);
        addSharedStateCacheConfigCommands(cache,cacheAddress,result);
      }
    }
 else     if (cacheTypeList.getName().equals(ModelKeys.DISTRIBUTED_CACHE)) {
      for (      Property cache : cacheTypeList.getValue().asPropertyList()) {
        ModelNode cacheAddress=containerAddress.clone();
        cacheAddress.add(ModelKeys.DISTRIBUTED_CACHE,cache.getName());
        result.add(DistributedCacheAdd.createOperation(cacheAddress,cache.getValue()));
        addCacheConfigCommands(cache,cacheAddress,result);
        addSharedStateCacheConfigCommands(cache,cacheAddress,result);
      }
    }
  }
}
