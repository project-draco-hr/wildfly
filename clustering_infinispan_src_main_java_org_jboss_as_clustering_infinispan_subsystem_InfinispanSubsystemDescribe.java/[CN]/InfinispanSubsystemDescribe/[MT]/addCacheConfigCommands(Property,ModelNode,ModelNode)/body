{
  if (cache.getValue().get(ModelKeys.LOCKING,ModelKeys.LOCKING_NAME).isDefined()) {
    ModelNode locking=cache.getValue().get(ModelKeys.LOCKING,ModelKeys.LOCKING_NAME);
    ModelNode lockingAddress=address.clone();
    lockingAddress.add(ModelKeys.LOCKING,ModelKeys.LOCKING_NAME);
    result.add(createOperation(LockingResource.LOCKING_ATTRIBUTES,lockingAddress,locking));
  }
  if (cache.getValue().get(ModelKeys.TRANSACTION,ModelKeys.TRANSACTION_NAME).isDefined()) {
    ModelNode transaction=cache.getValue().get(ModelKeys.TRANSACTION,ModelKeys.TRANSACTION_NAME);
    ModelNode transactionAddress=address.clone();
    transactionAddress.add(ModelKeys.TRANSACTION,ModelKeys.TRANSACTION_NAME);
    result.add(createOperation(TransactionResource.TRANSACTION_ATTRIBUTES,transactionAddress,transaction));
  }
  if (cache.getValue().get(ModelKeys.EVICTION,ModelKeys.EVICTION_NAME).isDefined()) {
    ModelNode eviction=cache.getValue().get(ModelKeys.EVICTION,ModelKeys.EVICTION_NAME);
    ModelNode evictionAddress=address.clone();
    evictionAddress.add(ModelKeys.EVICTION,ModelKeys.EVICTION_NAME);
    result.add(createOperation(EvictionResource.EVICTION_ATTRIBUTES,evictionAddress,eviction));
  }
  if (cache.getValue().get(ModelKeys.EXPIRATION,ModelKeys.EXPIRATION_NAME).isDefined()) {
    ModelNode expiration=cache.getValue().get(ModelKeys.EXPIRATION,ModelKeys.EXPIRATION_NAME);
    ModelNode expirationAddress=address.clone();
    expirationAddress.add(ModelKeys.EXPIRATION,ModelKeys.EXPIRATION_NAME);
    result.add(createOperation(ExpirationResource.EXPIRATION_ATTRIBUTES,expirationAddress,expiration));
  }
  if (cache.getValue().get(ModelKeys.STORE,ModelKeys.STORE_NAME).isDefined()) {
    ModelNode store=cache.getValue().get(ModelKeys.STORE,ModelKeys.STORE_NAME);
    ModelNode storeAddress=address.clone();
    storeAddress.add(ModelKeys.STORE,ModelKeys.STORE_NAME);
    result.add(createStoreOperation(BaseStoreResource.COMMON_STORE_ATTRIBUTES,storeAddress,store,StoreResource.STORE_ATTRIBUTES));
    addStoreWriteBehindConfigCommands(store,storeAddress,result);
    addCacheStorePropertyCommands(store,storeAddress,result);
  }
 else   if (cache.getValue().get(ModelKeys.FILE_STORE,ModelKeys.FILE_STORE_NAME).isDefined()) {
    ModelNode store=cache.getValue().get(ModelKeys.FILE_STORE,ModelKeys.FILE_STORE_NAME);
    ModelNode storeAddress=address.clone();
    storeAddress.add(ModelKeys.FILE_STORE,ModelKeys.FILE_STORE_NAME);
    result.add(createStoreOperation(BaseStoreResource.COMMON_STORE_ATTRIBUTES,storeAddress,store,FileStoreResource.FILE_STORE_ATTRIBUTES));
    addStoreWriteBehindConfigCommands(store,storeAddress,result);
    addCacheStorePropertyCommands(store,storeAddress,result);
  }
 else   if (cache.getValue().get(ModelKeys.STRING_KEYED_JDBC_STORE,ModelKeys.STRING_KEYED_JDBC_STORE_NAME).isDefined()) {
    ModelNode store=cache.getValue().get(ModelKeys.STRING_KEYED_JDBC_STORE,ModelKeys.STRING_KEYED_JDBC_STORE_NAME);
    ModelNode storeAddress=address.clone();
    storeAddress.add(ModelKeys.STRING_KEYED_JDBC_STORE,ModelKeys.STRING_KEYED_JDBC_STORE_NAME);
    result.add(createStringKeyedStoreOperation(storeAddress,store));
    addStoreWriteBehindConfigCommands(store,storeAddress,result);
    addCacheStorePropertyCommands(store,storeAddress,result);
  }
 else   if (cache.getValue().get(ModelKeys.BINARY_KEYED_JDBC_STORE,ModelKeys.BINARY_KEYED_JDBC_STORE_NAME).isDefined()) {
    ModelNode store=cache.getValue().get(ModelKeys.BINARY_KEYED_JDBC_STORE,ModelKeys.BINARY_KEYED_JDBC_STORE_NAME);
    ModelNode storeAddress=address.clone();
    storeAddress.add(ModelKeys.BINARY_KEYED_JDBC_STORE,ModelKeys.BINARY_KEYED_JDBC_STORE_NAME);
    result.add(createBinaryKeyedStoreOperation(storeAddress,store));
    addStoreWriteBehindConfigCommands(store,storeAddress,result);
    addCacheStorePropertyCommands(store,storeAddress,result);
  }
 else   if (cache.getValue().get(ModelKeys.MIXED_KEYED_JDBC_STORE,ModelKeys.MIXED_KEYED_JDBC_STORE_NAME).isDefined()) {
    ModelNode store=cache.getValue().get(ModelKeys.MIXED_KEYED_JDBC_STORE,ModelKeys.MIXED_KEYED_JDBC_STORE_NAME);
    ModelNode storeAddress=address.clone();
    storeAddress.add(ModelKeys.MIXED_KEYED_JDBC_STORE,ModelKeys.MIXED_KEYED_JDBC_STORE_NAME);
    result.add(createMixedKeyedStoreOperation(storeAddress,store));
    addStoreWriteBehindConfigCommands(store,storeAddress,result);
    addCacheStorePropertyCommands(store,storeAddress,result);
  }
 else   if (cache.getValue().get(ModelKeys.REMOTE_STORE,ModelKeys.REMOTE_STORE_NAME).isDefined()) {
    ModelNode store=cache.getValue().get(ModelKeys.REMOTE_STORE,ModelKeys.REMOTE_STORE_NAME);
    ModelNode storeAddress=address.clone();
    storeAddress.add(ModelKeys.REMOTE_STORE,ModelKeys.REMOTE_STORE_NAME);
    result.add(createStoreOperation(BaseStoreResource.COMMON_STORE_ATTRIBUTES,storeAddress,store,RemoteStoreResource.REMOTE_STORE_ATTRIBUTES));
    addStoreWriteBehindConfigCommands(store,storeAddress,result);
    addCacheStorePropertyCommands(store,storeAddress,result);
  }
}
