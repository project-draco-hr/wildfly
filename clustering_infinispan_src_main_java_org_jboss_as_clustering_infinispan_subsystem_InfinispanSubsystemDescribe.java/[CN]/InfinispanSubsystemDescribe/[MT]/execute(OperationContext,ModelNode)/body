{
  ModelNode result=context.getResult();
  PathAddress rootAddress=PathAddress.pathAddress(PathAddress.pathAddress(operation.require(ModelDescriptionConstants.OP_ADDR)).getLastElement());
  ModelNode subModel=Resource.Tools.readModel(context.readResource(PathAddress.EMPTY_ADDRESS));
  result.add(InfinispanSubsystemAdd.createOperation(rootAddress.toModelNode(),subModel));
  if (subModel.hasDefined(ModelKeys.CACHE_CONTAINER)) {
    for (    Property container : subModel.get(ModelKeys.CACHE_CONTAINER).asPropertyList()) {
      ModelNode address=rootAddress.toModelNode();
      address.add(ModelKeys.CACHE_CONTAINER,container.getName());
      result.add(CacheContainerAdd.createOperation(address,container.getValue()));
      if (container.getValue().hasDefined(ModelKeys.SINGLETON)) {
        ModelNode transport=container.getValue().get(ModelKeys.SINGLETON,ModelKeys.TRANSPORT);
        ModelNode transportAddress=address.clone();
        transportAddress.add(ModelKeys.SINGLETON,ModelKeys.TRANSPORT);
        result.add(TransportAdd.createOperation(transportAddress,transport));
      }
      for (      Property cacheTypeList : container.getValue().asPropertyList()) {
        if (cacheTypeList.getName().equals(ModelKeys.LOCAL_CACHE)) {
          for (          Property cache : cacheTypeList.getValue().asPropertyList()) {
            ModelNode cacheAddress=address.clone();
            cacheAddress.add(ModelKeys.LOCAL_CACHE,cache.getName());
            result.add(LocalCacheAdd.createOperation(cacheAddress,cache.getValue()));
          }
        }
 else         if (cacheTypeList.getName().equals(ModelKeys.INVALIDATION_CACHE)) {
          for (          Property cache : cacheTypeList.getValue().asPropertyList()) {
            ModelNode cacheAddress=address.clone();
            cacheAddress.add(ModelKeys.INVALIDATION_CACHE,cache.getName());
            result.add(InvalidationCacheAdd.createOperation(cacheAddress,cache.getValue()));
          }
        }
 else         if (cacheTypeList.getName().equals(ModelKeys.REPLICATED_CACHE)) {
          for (          Property cache : cacheTypeList.getValue().asPropertyList()) {
            ModelNode cacheAddress=address.clone();
            cacheAddress.add(ModelKeys.REPLICATED_CACHE,cache.getName());
            result.add(ReplicatedCacheAdd.createOperation(cacheAddress,cache.getValue()));
          }
        }
 else         if (cacheTypeList.getName().equals(ModelKeys.DISTRIBUTED_CACHE)) {
          for (          Property cache : cacheTypeList.getValue().asPropertyList()) {
            ModelNode cacheAddress=address.clone();
            cacheAddress.add(ModelKeys.DISTRIBUTED_CACHE,cache.getName());
            result.add(DistributedCacheAdd.createOperation(cacheAddress,cache.getValue()));
          }
        }
      }
    }
  }
  context.completeStep();
}
