{
  if (value == null)   return;
  if (value instanceof String && "".equals(value))   return;
  if (value instanceof Integer && ((Integer)value).intValue() == -1)   return;
  StringBuilder builder=new StringBuilder("set").append(name);
  builder.setCharAt(3,Character.toUpperCase(name.charAt(0)));
  final String methodName=builder.toString();
  final Class<?> paramType=value.getClass();
  final MethodIdentifier methodIdentifier=MethodIdentifier.getIdentifier(void.class,methodName,paramType);
  final Method setterMethod=ClassReflectionIndexUtil.findMethod(deploymentReflectionIndex,clazz,methodIdentifier);
  if (setterMethod == null) {
    logger.warn("Ignoring property " + name + " due to missing setter method: "+ methodName+ "("+ paramType.getName()+ ") on datasource class: "+ clazz.getName());
    return;
  }
  try {
    setterMethod.invoke(object,value);
  }
 catch (  Exception e) {
    throw new RuntimeException("Could not set property " + name + " on datasource class "+ clazz.getName(),e);
  }
}
