{
  final Module module=phaseContext.getDeploymentUnit().getAttachment(org.jboss.as.server.deployment.Attachments.MODULE);
  final DeploymentReflectionIndex deploymentReflectionIndex=phaseContext.getDeploymentUnit().getAttachment(org.jboss.as.server.deployment.Attachments.REFLECTION_INDEX);
  Object object;
  ClassReflectionIndex<?> classIndex;
  try {
    Class<?> clazz=module.getClassLoader().loadClass(className);
    classIndex=deploymentReflectionIndex.getClassIndex(clazz);
    Constructor<?> ctor=classIndex.getConstructor(NO_CLASSES);
    if (ctor == null) {
      throw MESSAGES.defaultConstructorNotFound("@DataSourceDefinition",className);
    }
    object=ctor.newInstance();
    setProperties(deploymentReflectionIndex,clazz,object);
    if (transactional) {
      final ServiceController<?> syncController=phaseContext.getServiceRegistry().getService(JBOSS_TXN_SYNCHRONIZATION_REGISTRY);
      final ServiceController<?> managerController=phaseContext.getServiceRegistry().getService(JBOSS_TXN_TRANSACTION_MANAGER);
      if (syncController == null || managerController == null) {
        ROOT_LOGGER.transactionSubsystemNotAvailable(className);
      }
 else {
        try {
          final TransactionSynchronizationRegistry transactionSynchronizationRegistry=(TransactionSynchronizationRegistry)syncController.getValue();
          final TransactionManager transactionManager=(TransactionManager)managerController.getValue();
          final ProxyConfiguration proxyConfiguration=new ProxyConfiguration().setClassLoader(module.getClassLoader()).setSuperClass(clazz).setProxyName(clazz.getName() + "$$DataSourceProxy" + proxyNameCount.incrementAndGet()).setProtectionDomain(clazz.getProtectionDomain());
          ProxyFactory<?> proxyFactory=new ProxyFactory(proxyConfiguration);
          object=proxyFactory.newInstance(new DataSourceTransactionProxyHandler(object,transactionManager,transactionSynchronizationRegistry));
        }
 catch (        Exception e) {
          ROOT_LOGGER.cannotProxyTransactionalDatasource(e,className);
        }
      }
    }
    injector.inject(new ValueManagedReferenceFactory(Values.immediateValue(object)));
  }
 catch (  Exception e) {
    throw new DeploymentUnitProcessingException(e);
  }
}
