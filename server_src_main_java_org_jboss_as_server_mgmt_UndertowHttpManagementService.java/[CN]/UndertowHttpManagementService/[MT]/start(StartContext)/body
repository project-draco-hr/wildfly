{
  final ModelController modelController=modelControllerValue.getValue();
  final ControlledProcessStateService controlledProcessStateService=controlledProcessStateServiceValue.getValue();
  socketBindingManager=injectedSocketBindingManager.getOptionalValue();
  final SecurityRealm securityRealmService=securityRealmServiceValue.getOptionalValue();
  InetSocketAddress bindAddress=null;
  InetSocketAddress secureBindAddress=null;
  SocketBinding basicBinding=injectedSocketBindingValue.getOptionalValue();
  SocketBinding secureBinding=injectedSecureSocketBindingValue.getOptionalValue();
  final NetworkInterfaceBinding interfaceBinding=interfaceBindingValue.getOptionalValue();
  if (interfaceBinding != null) {
    useUnmanagedBindings=true;
    final int port=portValue.getOptionalValue();
    if (port > 0) {
      bindAddress=new InetSocketAddress(interfaceBinding.getAddress(),port);
    }
    final int securePort=securePortValue.getOptionalValue();
    if (securePort > 0) {
      secureBindAddress=new InetSocketAddress(interfaceBinding.getAddress(),securePort);
    }
  }
 else {
    if (basicBinding != null) {
      bindAddress=basicBinding.getSocketAddress();
    }
    if (secureBinding != null) {
      secureBindAddress=secureBinding.getSocketAddress();
    }
  }
  List<ListenerRegistry.Listener> listeners=new ArrayList<>();
  if (bindAddress != null) {
    ListenerRegistry.Listener http=new ListenerRegistry.Listener("http",HTTP_MANAGEMENT,SERVER_NAME,bindAddress);
    http.setContextInformation("socket-binding",basicBinding);
    listeners.add(http);
  }
  if (secureBindAddress != null) {
    ListenerRegistry.Listener https=new ListenerRegistry.Listener("https",HTTPS_MANAGEMENT,SERVER_NAME,bindAddress);
    https.setContextInformation("socket-binding",secureBinding);
    listeners.add(https);
  }
  final ChannelUpgradeHandler upgradeHandler=new ChannelUpgradeHandler();
  context.getChildTarget().addService(HTTP_UPGRADE_SERVICE_NAME,new ValueService<Object>(new ImmediateValue<Object>(upgradeHandler))).addAliases(HTTPS_UPGRADE_SERVICE_NAME).install();
  for (  ListenerRegistry.Listener listener : listeners) {
    listener.addHttpUpgradeMetadata(new ListenerRegistry.HttpUpgradeMetadata(JBOSS_REMOTING,MANAGEMENT_ENDPOINT));
  }
  if (listenerRegistry.getOptionalValue() != null) {
    for (    ListenerRegistry.Listener listener : listeners) {
      listenerRegistry.getOptionalValue().addListener(listener);
    }
  }
  try {
    serverManagement=ManagementHttpServer.create(bindAddress,secureBindAddress,50,modelController,securityRealmService,controlledProcessStateService,consoleMode,consoleSlot,upgradeHandler);
    serverManagement.start();
    if (socketBindingManager != null) {
      if (useUnmanagedBindings) {
        SocketBindingManager.UnnamedBindingRegistry registry=socketBindingManager.getUnnamedRegistry();
        if (bindAddress != null) {
          basicManagedBinding=ManagedBinding.Factory.createSimpleManagedBinding("management-http",bindAddress,null);
          registry.registerBinding(basicManagedBinding);
        }
        if (secureBindAddress != null) {
          secureManagedBinding=ManagedBinding.Factory.createSimpleManagedBinding("management-https",secureBindAddress,null);
          registry.registerBinding(secureManagedBinding);
        }
      }
 else {
        SocketBindingManager.NamedManagedBindingRegistry registry=socketBindingManager.getNamedRegistry();
        if (basicBinding != null) {
          basicManagedBinding=ManagedBinding.Factory.createSimpleManagedBinding(basicBinding);
          registry.registerBinding(basicManagedBinding);
        }
        if (secureBinding != null) {
          secureManagedBinding=ManagedBinding.Factory.createSimpleManagedBinding(secureBinding);
          registry.registerBinding(secureManagedBinding);
        }
      }
    }
  }
 catch (  BindException e) {
    final StringBuilder sb=new StringBuilder().append(e.getMessage());
    if (bindAddress != null)     sb.append(" ").append(bindAddress);
    if (secureBindAddress != null)     sb.append(" ").append(secureBindAddress);
    throw new StartException(sb.toString(),e);
  }
catch (  Exception e) {
    throw ServerMessages.MESSAGES.failedToStartHttpManagementService(e);
  }
}
