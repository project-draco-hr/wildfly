{
  final String selector=properties.containsKey(SELECTOR.getName()) ? properties.get(SELECTOR.getName()) : null;
  final boolean durable=properties.containsKey(DURABLE.getName()) ? Boolean.valueOf(properties.get(DURABLE.getName())) : DURABLE.getDefaultValue().asBoolean();
  ModelNode destination=new ModelNode();
  destination.get(NAME).set(queueName);
  destination.get(DURABLE.getName()).set(durable);
  if (selector != null) {
    destination.get(SELECTOR.getName()).set(selector);
  }
  destination.get(ENTRIES).add(jndiName);
  Service<Queue> queueService=JMSQueueService.installService(queueName,serviceTarget,serverServiceName,selector,durable,new String[0]);
  inject(serviceBuilder,injector,queueService);
  String serverName=getActiveMQServerName(properties);
  final PathElement serverElement=PathElement.pathElement(SERVER,serverName);
  final PathElement dest=PathElement.pathElement(JMS_QUEUE,queueName);
  final DeploymentResourceSupport deploymentResourceSupport=deploymentUnit.getAttachment(Attachments.DEPLOYMENT_RESOURCE_SUPPORT);
  deploymentResourceSupport.getDeploymentSubModel(MessagingExtension.SUBSYSTEM_NAME,serverElement);
  PathAddress registration=PathAddress.pathAddress(serverElement,dest);
  MessagingXmlInstallDeploymentUnitProcessor.createDeploymentSubModel(registration,deploymentUnit);
  JMSQueueConfigurationRuntimeHandler.INSTANCE.registerResource(serverName,queueName,destination);
}
