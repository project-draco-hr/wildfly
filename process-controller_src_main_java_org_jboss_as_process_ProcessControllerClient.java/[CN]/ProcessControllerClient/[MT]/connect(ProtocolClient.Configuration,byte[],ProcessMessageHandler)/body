{
  if (configuration == null) {
    throw new IllegalArgumentException("configuration is null");
  }
  if (authCode == null) {
    throw new IllegalArgumentException("authCode is null");
  }
  if (messageHandler == null) {
    throw new IllegalArgumentException("messageHandler is null");
  }
  configuration.setMessageHandler(new MessageHandler(){
    public void handleMessage(    final Connection connection,    final InputStream dataStream) throws IOException {
      final ProcessControllerClient client=(ProcessControllerClient)connection.getAttachment();
      final int cmd=readUnsignedByte(dataStream);
switch (cmd) {
case Protocol.PROCESS_ADDED:
{
          final String processName=readUTFZBytes(dataStream);
          dataStream.close();
          log.tracef("Received process_added for process %s",processName);
          messageHandler.handleProcessAdded(client,processName);
          break;
        }
case Protocol.PROCESS_STARTED:
{
        final String processName=readUTFZBytes(dataStream);
        dataStream.close();
        log.tracef("Received process_started for process %s",processName);
        messageHandler.handleProcessStarted(client,processName);
        break;
      }
case Protocol.PROCESS_STOPPED:
{
      final String processName=readUTFZBytes(dataStream);
      final long uptimeMillis=readLong(dataStream);
      dataStream.close();
      log.tracef("Received process_stopped for process %s",processName);
      messageHandler.handleProcessStopped(client,processName,uptimeMillis);
      break;
    }
case Protocol.PROCESS_REMOVED:
{
    final String processName=readUTFZBytes(dataStream);
    dataStream.close();
    log.tracef("Received process_removed for process %s",processName);
    messageHandler.handleProcessRemoved(client,processName);
    break;
  }
case Protocol.PROCESS_INVENTORY:
{
  final int cnt=readInt(dataStream);
  final Map<String,ProcessInfo> inventory=new HashMap<String,ProcessInfo>();
  for (int i=0; i < cnt; i++) {
    final String processName=readUTFZBytes(dataStream);
    final byte[] processAuthCode=new byte[16];
    final boolean processRunning=StreamUtils.readBoolean(dataStream);
    readFully(dataStream,processAuthCode);
    inventory.put(processName,new ProcessInfo(processName,authCode,processRunning));
  }
  dataStream.close();
  log.tracef("Received process_inventory");
  messageHandler.handleProcessInventory(client,inventory);
  break;
}
default :
{
log.warnf("Received unknown message with code 0x%02x",Integer.valueOf(cmd));
dataStream.close();
break;
}
}
}
public void handleShutdown(final Connection connection) throws IOException {
final ProcessControllerClient client=(ProcessControllerClient)connection.getAttachment();
messageHandler.handleConnectionShutdown(client);
}
public void handleFailure(final Connection connection,final IOException cause) throws IOException {
final ProcessControllerClient client=(ProcessControllerClient)connection.getAttachment();
messageHandler.handleConnectionFailure(client,cause);
}
public void handleFinished(final Connection connection) throws IOException {
final ProcessControllerClient client=(ProcessControllerClient)connection.getAttachment();
messageHandler.handleConnectionFinished(client);
}
}
);
final ProtocolClient client=new ProtocolClient(configuration);
final Connection connection=client.connect();
boolean ok=false;
try {
final OutputStream os=connection.writeMessage();
try {
os.write(Protocol.AUTH);
os.write(1);
os.write(authCode);
final ProcessControllerClient processControllerClient=new ProcessControllerClient(connection);
connection.attach(processControllerClient);
log.trace("Sent initial greeting message");
os.close();
ok=true;
return processControllerClient;
}
  finally {
safeClose(os);
}
}
  finally {
if (!ok) {
safeClose(connection);
}
}
}
