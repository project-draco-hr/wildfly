{
  requireNoAttributes(reader);
  final Set<String> names=new HashSet<String>();
  while (reader.nextTag() != END_ELEMENT) {
    requireNamespace(reader,expectedNs);
    Element element=Element.forName(reader.getLocalName());
    if (Element.PROFILE != element) {
      throw unexpectedElement(reader);
    }
    requireSingleAttribute(reader,Attribute.NAME.getLocalName());
    final String name=reader.getAttributeValue(0);
    if (!names.add(name)) {
      throw MESSAGES.duplicateDeclaration("profile",name,reader.getLocation());
    }
    final List<ModelNode> subsystems=new ArrayList<ModelNode>();
    final Set<String> includes=new HashSet<String>();
    final ModelNode profileIncludes=new ModelNode();
    final Set<String> configuredSubsystemTypes=new HashSet<String>();
    while (reader.nextTag() != END_ELEMENT) {
switch (Namespace.forUri(reader.getNamespaceURI())) {
case UNKNOWN:
{
          if (Element.forName(reader.getLocalName()) != Element.SUBSYSTEM) {
            throw unexpectedElement(reader);
          }
          if (!configuredSubsystemTypes.add(reader.getNamespaceURI())) {
            throw MESSAGES.duplicateDeclaration("subsystem",name,reader.getLocation());
          }
          reader.handleAny(subsystems);
          break;
        }
case DOMAIN_1_0:
case DOMAIN_1_1:
{
        requireNamespace(reader,expectedNs);
        if (configuredSubsystemTypes.size() > 0) {
          throw unexpectedElement(reader);
        }
        if (Element.forName(reader.getLocalName()) != Element.INCLUDE) {
          throw unexpectedElement(reader);
        }
        final String includedName=readStringAttributeElement(reader,Attribute.PROFILE.getLocalName());
        if (!names.contains(includedName)) {
          throw MESSAGES.profileNotFound(reader.getLocation());
        }
        if (!includes.add(includedName)) {
          throw MESSAGES.duplicateProfile(reader.getLocation());
        }
        profileIncludes.add(includedName);
        break;
      }
default :
{
      throw unexpectedElement(reader);
    }
}
}
final ModelNode profile=new ModelNode();
profile.get(OP).set(ADD);
profile.get(OP_ADDR).set(address).add(ModelDescriptionConstants.PROFILE,name);
profile.get(INCLUDES).set(profileIncludes);
list.add(profile);
for (final ModelNode update : subsystems) {
final ModelNode subsystemAddress=address.clone().set(address).add(ModelDescriptionConstants.PROFILE,name);
for (final Property path : update.get(OP_ADDR).asPropertyList()) {
  subsystemAddress.add(path.getName(),path.getValue().asString());
}
update.get(OP_ADDR).set(subsystemAddress);
list.add(update);
}
if (configuredSubsystemTypes.size() == 0) {
throw MESSAGES.profileHasNoSubsystems(reader.getLocation());
}
}
}
