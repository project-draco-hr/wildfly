{
  requireNoAttributes(reader);
  final Set<String> names=new HashSet<String>();
  while (reader.nextTag() != END_ELEMENT) {
    String uniqueName=null;
    String runtimeName=null;
    byte[] hash=null;
    String enabled=null;
    final int count=reader.getAttributeCount();
    for (int i=0; i < count; i++) {
      final String value=reader.getAttributeValue(i);
      if (!isNoNamespaceAttribute(reader,i)) {
        throw ParseUtils.unexpectedAttribute(reader,i);
      }
 else {
        final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case NAME:
{
            if (!names.add(value)) {
              throw ParseUtils.duplicateNamedElement(reader,value);
            }
            uniqueName=value;
            break;
          }
case RUNTIME_NAME:
{
          runtimeName=value;
          break;
        }
case SHA1:
{
        try {
          hash=HashUtil.hexStringToByteArray(value);
        }
 catch (        final Exception e) {
          throw new XMLStreamException("Value " + value + " for attribute "+ attribute.getLocalName()+ " does not represent a properly hex-encoded SHA1 hash",reader.getLocation(),e);
        }
        break;
      }
case ENABLED:
{
      enabled=value;
      break;
    }
default :
  throw ParseUtils.unexpectedAttribute(reader,i);
}
}
}
if (uniqueName == null) {
throw ParseUtils.missingRequired(reader,Collections.singleton(Attribute.NAME));
}
if (runtimeName == null) {
throw ParseUtils.missingRequired(reader,Collections.singleton(Attribute.RUNTIME_NAME));
}
if (hash == null) {
throw ParseUtils.missingRequired(reader,Collections.singleton(Attribute.SHA1));
}
final boolean toStart=enabled == null ? true : Boolean.parseBoolean(enabled);
ParseUtils.requireNoContent(reader);
final ModelNode deploymentAdd=new ModelNode();
deploymentAdd.get(OP).set(ADD);
deploymentAdd.get(OP_ADDR).set(address).add(DEPLOYMENT,uniqueName);
deploymentAdd.get(RUNTIME_NAME).set(runtimeName);
deploymentAdd.get(HASH).set(hash);
deploymentAdd.get(ENABLED).set(toStart);
list.add(deploymentAdd);
}
}
