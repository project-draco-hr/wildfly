{
  final ModelNode address=operation.require(OP_ADDR);
  final String driverName=PathAddress.pathAddress(address).getLastElement().getValue();
  if (operation.get(DRIVER_NAME.getName()).isDefined() && !driverName.equals(operation.get(DRIVER_NAME.getName()).asString())) {
    throw ConnectorLogger.ROOT_LOGGER.driverNameAndResourceNameNotEquals(operation.get(DRIVER_NAME.getName()).asString(),driverName);
  }
  String moduleName=DRIVER_MODULE_NAME.resolveModelAttribute(context,model).asString();
  final Integer majorVersion=model.hasDefined(DRIVER_MAJOR_VERSION.getName()) ? DRIVER_MAJOR_VERSION.resolveModelAttribute(context,model).asInt() : null;
  final Integer minorVersion=model.hasDefined(DRIVER_MINOR_VERSION.getName()) ? DRIVER_MINOR_VERSION.resolveModelAttribute(context,model).asInt() : null;
  final String driverClassName=model.hasDefined(DRIVER_CLASS_NAME.getName()) ? DRIVER_CLASS_NAME.resolveModelAttribute(context,model).asString() : null;
  final String dataSourceClassName=model.hasDefined(DRIVER_DATASOURCE_CLASS_NAME.getName()) ? DRIVER_DATASOURCE_CLASS_NAME.resolveModelAttribute(context,model).asString() : null;
  final String xaDataSourceClassName=model.hasDefined(DRIVER_XA_DATASOURCE_CLASS_NAME.getName()) ? DRIVER_XA_DATASOURCE_CLASS_NAME.resolveModelAttribute(context,model).asString() : null;
  final ServiceTarget target=context.getServiceTarget();
  final ModuleIdentifier moduleId;
  final Module module;
  String slot=model.hasDefined(MODULE_SLOT.getName()) ? MODULE_SLOT.resolveModelAttribute(context,model).asString() : null;
  try {
    moduleId=ModuleIdentifier.create(moduleName,slot);
    module=Module.getCallerModuleLoader().loadModule(moduleId);
  }
 catch (  ModuleLoadException e) {
    throw new OperationFailedException(ConnectorLogger.ROOT_LOGGER.failedToLoadModuleDriver(moduleName),e);
  }
  if (driverClassName == null) {
    final ServiceLoader<Driver> serviceLoader=module.loadService(Driver.class);
    boolean driverLoaded=false;
    if (serviceLoader != null) {
      for (      Driver driver : serviceLoader) {
        startDriverServices(target,moduleId,driver,driverName,majorVersion,minorVersion,dataSourceClassName,xaDataSourceClassName);
        driverLoaded=true;
        break;
      }
    }
    if (!driverLoaded)     SUBSYSTEM_DATASOURCES_LOGGER.cannotFindDriverClassName(driverName);
  }
 else {
    try {
      final Class<? extends Driver> driverClass=module.getClassLoader().loadClass(driverClassName).asSubclass(Driver.class);
      final Constructor<? extends Driver> constructor=driverClass.getConstructor();
      final Driver driver=constructor.newInstance();
      startDriverServices(target,moduleId,driver,driverName,majorVersion,minorVersion,dataSourceClassName,xaDataSourceClassName);
    }
 catch (    Exception e) {
      SUBSYSTEM_DATASOURCES_LOGGER.cannotInstantiateDriverClass(driverClassName,e);
      throw new OperationFailedException(ConnectorLogger.ROOT_LOGGER.cannotInstantiateDriverClass(driverClassName));
    }
  }
}
