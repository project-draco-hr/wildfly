{
  final ModelNode address=operation.require(OP_ADDR);
  final PathAddress pathAddress=PathAddress.pathAddress(address);
  final String moduleName=operation.require(DRIVER).asString();
  final ModelNode model=context.getSubModel();
  model.get(NAME).set(pathAddress.getLastElement().getValue());
  model.get(DRIVER).set(moduleName);
  final ModelNode compensating=Util.getResourceRemoveOperation(address);
  if (context.getRuntimeContext() != null) {
    context.getRuntimeContext().setRuntimeTask(new RuntimeTask(){
      @Override public void execute(      RuntimeTaskContext context) throws OperationFailedException {
        final ServiceTarget target=context.getServiceTarget();
        final ModuleIdentifier moduleId;
        final Module module;
        try {
          moduleId=ModuleIdentifier.create(moduleName);
          module=Module.getCallerModuleLoader().loadModule(moduleId);
        }
 catch (        ModuleLoadException e) {
          throw new OperationFailedException(e,new ModelNode().set("Failed to load module for driver [" + moduleName + "]"));
        }
        final ServiceLoader<Driver> serviceLoader=module.loadService(Driver.class);
        if (serviceLoader != null)         for (        Driver driver : serviceLoader) {
          final int majorVersion=driver.getMajorVersion();
          final int minorVersion=driver.getMinorVersion();
          final boolean compliant=driver.jdbcCompliant();
          if (compliant) {
            log.infof("Deploying JDBC-compliant driver %s (version %d.%d)",driver.getClass(),Integer.valueOf(majorVersion),Integer.valueOf(minorVersion));
          }
 else {
            log.infof("Deploying non-JDBC-compliant driver %s (version %d.%d)",driver.getClass(),Integer.valueOf(majorVersion),Integer.valueOf(minorVersion));
          }
          InstalledDriver driverMetadata=new InstalledDriver(moduleId,driver.getClass().getName(),majorVersion,minorVersion,compliant);
          DriverService driverService=new DriverService(driverMetadata,driver);
          target.addService(ServiceName.JBOSS.append("jdbc-driver",driver.getClass().getName(),Integer.toString(majorVersion),Integer.toString(minorVersion)),driverService).addDependency(ConnectorServices.JDBC_DRIVER_REGISTRY_SERVICE,DriverRegistry.class,driverService.getDriverRegistryServiceInjector()).setInitialMode(ServiceController.Mode.ACTIVE).install();
        }
        resultHandler.handleResultComplete();
      }
    }
);
  }
 else {
    resultHandler.handleResultComplete();
  }
  return new BasicOperationResult(compensating);
}
