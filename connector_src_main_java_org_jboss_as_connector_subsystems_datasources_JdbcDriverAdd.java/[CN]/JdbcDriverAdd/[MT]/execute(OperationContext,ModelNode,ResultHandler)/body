{
  final ModelNode address=operation.require(OP_ADDR);
  final PathAddress pathAddress=PathAddress.pathAddress(address);
  final String driverName=operation.require(DRIVER_NAME).asString();
  final String moduleName=operation.require(DRIVER_MODULE_NAME).asString();
  final Integer majorVersion=operation.hasDefined(DRIVER_MAJOR_VERSION) ? operation.get(DRIVER_MAJOR_VERSION).asInt() : null;
  final Integer minorVersion=operation.hasDefined(DRIVER_MINOR_VERSION) ? operation.get(DRIVER_MINOR_VERSION).asInt() : null;
  final String driverClassName=operation.hasDefined(DRIVER_CLASS_NAME) ? operation.get(DRIVER_CLASS_NAME).asString() : null;
  final String xaDataSourceClassName=operation.hasDefined(DRIVER_XA_DATASOURCE_CLASS_NAME) ? operation.get(DRIVER_XA_DATASOURCE_CLASS_NAME).asString() : null;
  final ModelNode model=context.getSubModel();
  model.get(DRIVER_NAME).set(driverName);
  model.get(DRIVER_MODULE_NAME).set(moduleName);
  if (majorVersion != null)   model.get(DRIVER_MAJOR_VERSION).set(majorVersion);
  if (minorVersion != null)   model.get(DRIVER_MINOR_VERSION).set(minorVersion);
  if (driverClassName != null)   model.get(DRIVER_CLASS_NAME).set(driverClassName);
  if (xaDataSourceClassName != null)   model.get(DRIVER_XA_DATASOURCE_CLASS_NAME).set(xaDataSourceClassName);
  final ModelNode compensating=Util.getResourceRemoveOperation(address);
  if (context.getRuntimeContext() != null) {
    context.getRuntimeContext().setRuntimeTask(new RuntimeTask(){
      @Override public void execute(      RuntimeTaskContext context) throws OperationFailedException {
        final ServiceTarget target=context.getServiceTarget();
        final ModuleIdentifier moduleId;
        final Module module;
        try {
          moduleId=ModuleIdentifier.create(moduleName);
          module=Module.getCallerModuleLoader().loadModule(moduleId);
        }
 catch (        ModuleLoadException e) {
          throw new OperationFailedException(e,new ModelNode().set("Failed to load module for driver [" + moduleName + "]"));
        }
        if (driverClassName == null) {
          final ServiceLoader<Driver> serviceLoader=module.loadService(Driver.class);
          if (serviceLoader != null)           for (          Driver driver : serviceLoader) {
            startDriverServices(target,moduleId,driver);
          }
        }
 else {
          try {
            final Class<? extends Driver> driverClass=module.getClassLoader().loadClass(driverClassName).asSubclass(Driver.class);
            final Constructor<? extends Driver> constructor=driverClass.getConstructor();
            final Driver driver=constructor.newInstance();
            startDriverServices(target,moduleId,driver);
          }
 catch (          Exception e) {
            log.warnf("Unable to instantiate driver class \"%s\": %s",driverClassName,e);
          }
        }
        resultHandler.handleResultComplete();
      }
      private void startDriverServices(      final ServiceTarget target,      final ModuleIdentifier moduleId,      Driver driver) throws IllegalStateException {
        final int majorVer=driver.getMajorVersion();
        final int minorVer=driver.getMinorVersion();
        if ((majorVersion != null && majorVersion.intValue() != majorVer) || (minorVersion != null && minorVersion.intValue() != minorVer)) {
          throw new IllegalStateException("Specified driver version doesn't match with actual driver version");
        }
        final boolean compliant=driver.jdbcCompliant();
        if (compliant) {
          log.infof("Deploying JDBC-compliant driver %s (version %d.%d)",driver.getClass(),Integer.valueOf(majorVer),Integer.valueOf(minorVer));
        }
 else {
          log.infof("Deploying non-JDBC-compliant driver %s (version %d.%d)",driver.getClass(),Integer.valueOf(majorVer),Integer.valueOf(minorVer));
        }
        InstalledDriver driverMetadata=new InstalledDriver(driverName,moduleId,driver.getClass().getName(),xaDataSourceClassName,majorVer,minorVer,compliant);
        DriverService driverService=new DriverService(driverMetadata,driver);
        target.addService(ServiceName.JBOSS.append("jdbc-driver",driverName.replaceAll("\\.","_")),driverService).addDependency(ConnectorServices.JDBC_DRIVER_REGISTRY_SERVICE,DriverRegistry.class,driverService.getDriverRegistryServiceInjector()).setInitialMode(ServiceController.Mode.ACTIVE).install();
      }
    }
);
  }
 else {
    resultHandler.handleResultComplete();
  }
  return new BasicOperationResult(compensating);
}
