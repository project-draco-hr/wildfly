{
  final DeploymentUnit deploymentUnit=phaseContext.getDeploymentUnit();
  final Module module=deploymentUnit.getAttachment(org.jboss.as.server.deployment.Attachments.MODULE);
  final EEModuleDescription eeModuleDescription=deploymentUnit.getAttachment(Attachments.EE_MODULE_DESCRIPTION);
  String realId=null;
  String cfInterface=null;
  SUBSYSTEM_RA_LOGGER.debugf("@ConnectionFactoryDefinition: %s for %s binding to %s ",interfaceName,resourceAdapter,jndiName);
  try {
    Set<String> rars=mdr.getResourceAdapters();
    if (rars == null || rars.isEmpty()) {
      throw MESSAGES.emptyMdr(jndiName);
    }
    System.out.println(rars);
    for (    String rar : rars) {
      if (rar.indexOf(raId) != -1) {
        realId=rar;
      }
    }
    if (realId == null) {
      throw MESSAGES.raNotFound(resourceAdapter,jndiName);
    }
    Connector cmd=mdr.getResourceAdapter(realId);
    if (cmd.getVersion() == Connector.Version.V_10) {
      Connector10 c10=(Connector10)cmd;
      ResourceAdapter10 ra10=(ResourceAdapter10)c10.getResourceadapter();
      cfInterface=ra10.getConnectionFactoryInterface().getValue();
    }
 else {
      ResourceAdapter1516 ra1516=(ResourceAdapter1516)cmd.getResourceadapter();
      if (ra1516.getOutboundResourceadapter() != null) {
        for (        org.jboss.jca.common.api.metadata.ra.ConnectionDefinition cd : ra1516.getOutboundResourceadapter().getConnectionDefinitions()) {
          if (cd.getConnectionFactoryInterface().getValue().equals(interfaceName))           cfInterface=cd.getConnectionFactoryInterface().getValue();
        }
      }
    }
    if (cfInterface == null || !cfInterface.equals(interfaceName)) {
      throw MESSAGES.invalidConnectionFactory(cfInterface,resourceAdapter,jndiName);
    }
    Map<String,String> raConfigProperties=new HashMap<String,String>();
    Map<String,String> mcfConfigProperties=new HashMap<String,String>();
    String securitySetting=null;
    String securitySettingDomain=null;
    if (properties != null) {
      for (      String prop : properties) {
        if (prop.startsWith("ironjacamar.security")) {
          securitySetting=prop.substring(prop.indexOf("=") + 1);
        }
 else         if (prop.startsWith("ironjacamar.security.domain")) {
          securitySettingDomain=prop.substring(prop.indexOf("=") + 1);
        }
 else {
          String key=prop.substring(0,prop.indexOf("="));
          String value=prop.substring(prop.indexOf("=") + 1);
          if (key.startsWith("ra.")) {
            raConfigProperties.put(key.substring(3),value);
          }
 else           if (key.startsWith("mcf.")) {
            mcfConfigProperties.put(key.substring(4),value);
          }
 else {
            mcfConfigProperties.put(key,value);
          }
        }
      }
    }
    String mcfClass=null;
    if (cmd.getVersion() == Connector.Version.V_10) {
      Connector10 c10=(Connector10)cmd;
      ResourceAdapter10 ra10=(ResourceAdapter10)c10.getResourceadapter();
      mcfClass=ra10.getManagedConnectionFactoryClass().getValue();
    }
 else {
      ResourceAdapter1516 ra1516=(ResourceAdapter1516)cmd.getResourceadapter();
      if (ra1516.getOutboundResourceadapter() != null) {
        for (        org.jboss.jca.common.api.metadata.ra.ConnectionDefinition cd : ra1516.getOutboundResourceadapter().getConnectionDefinitions()) {
          if (cd.getConnectionFactoryInterface().getValue().equals(cfInterface))           mcfClass=cd.getManagedConnectionFactoryClass().getValue();
        }
      }
    }
    CommonSecurity security=null;
    if (securitySetting != null) {
      if ("".equals(securitySetting)) {
        security=new CommonSecurityImpl(null,null,false);
      }
 else       if ("application".equals(securitySetting)) {
        security=new CommonSecurityImpl(null,null,true);
      }
 else       if ("domain".equals(securitySetting) && securitySettingDomain != null) {
        security=new CommonSecurityImpl(securitySettingDomain,null,false);
      }
 else       if ("domain-and-application".equals(securitySetting) && securitySettingDomain != null) {
        security=new CommonSecurityImpl(null,securitySettingDomain,false);
      }
    }
    if (security == null) {
      SUBSYSTEM_RA_LOGGER.noSecurityDefined(jndiName);
    }
    if (transactionSupport == null)     transactionSupport=TransactionSupport.TransactionSupportLevel.NoTransaction;
    CommonPool pool=null;
    if (transactionSupport == TransactionSupport.TransactionSupportLevel.XATransaction) {
      pool=new CommonXaPoolImpl(minPoolSize < 0 ? Defaults.MIN_POOL_SIZE : minPoolSize,maxPoolSize < 0 ? Defaults.MAX_POOL_SIZE : maxPoolSize,Defaults.PREFILL,Defaults.USE_STRICT_MIN,Defaults.FLUSH_STRATEGY,Defaults.IS_SAME_RM_OVERRIDE,Defaults.INTERLEAVING,Defaults.PAD_XID,Defaults.WRAP_XA_RESOURCE,Defaults.NO_TX_SEPARATE_POOL);
    }
 else {
      pool=new CommonPoolImpl(minPoolSize < 0 ? Defaults.MIN_POOL_SIZE : minPoolSize,maxPoolSize < 0 ? Defaults.MAX_POOL_SIZE : maxPoolSize,Defaults.PREFILL,Defaults.USE_STRICT_MIN,Defaults.FLUSH_STRATEGY);
    }
    TransactionSupportEnum transactionSupportValue=TransactionSupportEnum.NoTransaction;
    if (transactionSupport == TransactionSupport.TransactionSupportLevel.XATransaction) {
      transactionSupportValue=TransactionSupportEnum.XATransaction;
    }
 else     if (transactionSupport == TransactionSupport.TransactionSupportLevel.LocalTransaction) {
      transactionSupportValue=TransactionSupportEnum.LocalTransaction;
    }
    CommonConnDef cd=new CommonConnDefImpl(mcfConfigProperties,mcfClass,jndiName,poolName(cfInterface),Boolean.TRUE,Boolean.TRUE,Boolean.TRUE,pool,null,null,security,null);
    IronJacamar ijmd=new IronJacamarImpl(transactionSupportValue,raConfigProperties,null,Collections.singletonList(cd),Collections.<String>emptyList(),null);
    String serviceName=jndiName;
    serviceName=serviceName.replace(':','_');
    serviceName=serviceName.replace('/','_');
    ResourceAdapterActivatorService activator=new ResourceAdapterActivatorService(cmd,ijmd,module.getClassLoader(),serviceName);
    ContextNames.BindInfo bindInfo=ContextNames.bindInfoForEnvEntry(context.getApplicationName(),context.getModuleName(),context.getComponentName(),!context.isCompUsesModule(),jndiName);
    activator.setBindInfo(bindInfo);
    activator.setCreateBinderService(false);
    ServiceTarget serviceTarget=phaseContext.getServiceTarget();
    ServiceName activatorServiceName=ConnectorServices.RESOURCE_ADAPTER_ACTIVATOR_SERVICE.append(serviceName);
    ServiceBuilder connectionFactoryServiceBuilder=serviceTarget.addService(activatorServiceName,activator).addDependency(ConnectorServices.IRONJACAMAR_MDR,AS7MetadataRepository.class,activator.getMdrInjector()).addDependency(ConnectorServices.RA_REPOSITORY_SERVICE,ResourceAdapterRepository.class,activator.getRaRepositoryInjector()).addDependency(ConnectorServices.MANAGEMENT_REPOSITORY_SERVICE,ManagementRepository.class,activator.getManagementRepositoryInjector()).addDependency(ConnectorServices.RESOURCE_ADAPTER_REGISTRY_SERVICE,ResourceAdapterDeploymentRegistry.class,activator.getRegistryInjector()).addDependency(ConnectorServices.CONNECTOR_CONFIG_SERVICE,JcaSubsystemConfiguration.class,activator.getConfigInjector()).addDependency(SubjectFactoryService.SERVICE_NAME,SubjectFactory.class,activator.getSubjectFactoryInjector()).addDependency(ConnectorServices.CCM_SERVICE,CachedConnectionManager.class,activator.getCcmInjector()).addDependency(NamingService.SERVICE_NAME).addDependency(ConnectorServices.TRANSACTION_INTEGRATION_SERVICE,TransactionIntegration.class,activator.getTxIntegrationInjector()).addDependency(TxnServices.JBOSS_TXN_TRANSACTION_MANAGER).addDependency(ConnectorServices.BOOTSTRAP_CONTEXT_SERVICE.append("default"));
    connectionFactoryServiceBuilder.setInitialMode(ServiceController.Mode.ACTIVE).install();
    serviceBuilder.addDependency(ConnectionFactoryReferenceFactoryService.SERVICE_NAME_BASE.append(bindInfo.getBinderServiceName()),ManagedReferenceFactory.class,injector);
    serviceBuilder.addListener(new AbstractServiceListener<Object>(){
      public void transition(      final ServiceController<? extends Object> controller,      final ServiceController.Transition transition){
switch (transition) {
case STARTING_to_UP:
{
            DEPLOYMENT_CONNECTOR_LOGGER.connectionFactoryAnnotation(jndiName);
            break;
          }
case STOPPING_to_DOWN:
{
          break;
        }
case REMOVING_to_REMOVED:
{
        DEPLOYMENT_CONNECTOR_LOGGER.debugf("Removed JCA ConnectionFactory [%s]",jndiName);
      }
  }
}
}
);
}
 catch (Exception e) {
throw new DeploymentUnitProcessingException(e);
}
}
