{
  final ModelNode opAddr=operation.require(OP_ADDR);
  final PathAddress address=PathAddress.pathAddress(opAddr);
  final String name=address.getLastElement().getValue();
  if (context.getRuntimeContext() != null) {
    context.getRuntimeContext().setRuntimeTask(new RuntimeTask(){
      public void execute(      RuntimeTaskContext context) throws OperationFailedException {
        final ServiceController<?> controller=context.getServiceRegistry().getService(ThreadsServices.threadFactoryName(name));
        if (controller != null) {
          controller.setMode(ServiceController.Mode.REMOVE);
        }
        resultHandler.handleResultComplete();
      }
    }
);
  }
 else {
    resultHandler.handleResultComplete();
  }
  final ModelNode model=context.getSubModel();
  final ModelNode compensating=Util.getEmptyOperation(ADD,opAddr);
  if (model.hasDefined(THREAD_FACTORY)) {
    compensating.get(THREAD_FACTORY).set(model.get(THREAD_FACTORY));
  }
  if (model.hasDefined(PROPERTIES)) {
    compensating.get(PROPERTIES).set(model.get(PROPERTIES));
  }
  if (model.hasDefined(MAX_THREADS)) {
    compensating.get(MAX_THREADS).set(model.get(MAX_THREADS));
  }
  if (model.hasDefined(KEEPALIVE_TIME)) {
    compensating.get(KEEPALIVE_TIME).set(model.get(KEEPALIVE_TIME));
  }
  if (model.hasDefined(BLOCKING)) {
    compensating.get(BLOCKING).set(model.get(BLOCKING));
  }
  if (model.hasDefined(HANDOFF_EXECUTOR)) {
    compensating.get(HANDOFF_EXECUTOR).set(model.get(HANDOFF_EXECUTOR));
  }
  return new BasicOperationResult(compensating);
}
