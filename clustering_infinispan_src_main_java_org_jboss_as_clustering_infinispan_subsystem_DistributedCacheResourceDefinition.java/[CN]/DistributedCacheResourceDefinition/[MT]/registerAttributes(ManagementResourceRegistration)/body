{
  super.registerAttributes(registration);
  final OperationStepHandler writeHandler=new ReloadRequiredWriteAttributeHandler(ATTRIBUTES);
  for (  AttributeDefinition attr : ATTRIBUTES) {
    registration.registerReadWriteAttribute(attr,null,writeHandler);
  }
  final OperationStepHandler virtualNodesWriteHandler=new OperationStepHandler(){
    @Override public void execute(    OperationContext context,    ModelNode operation) throws OperationFailedException {
      if (operation.hasDefined(VALUE) && operation.get(VALUE).asInt() != 1) {
        InfinispanLogger.ROOT_LOGGER.virtualNodesAttributeDeprecated();
        ModelNode convertedValue=SegmentsAndVirtualNodeConverter.virtualNodesToSegments(operation.get(VALUE));
        final ModelNode submodel=context.readResourceForUpdate(PathAddress.EMPTY_ADDRESS).getModel();
        final ModelNode syntheticOp=new ModelNode();
        syntheticOp.get(ModelKeys.SEGMENTS).set(convertedValue);
        SEGMENTS.validateAndSet(syntheticOp,submodel);
        if (requiresRuntime(context)) {
          context.addStep(new OperationStepHandler(){
            @Override public void execute(            OperationContext context,            ModelNode operation){
              context.reloadRequired();
              context.completeStep(OperationContext.RollbackHandler.REVERT_RELOAD_REQUIRED_ROLLBACK_HANDLER);
            }
          }
,OperationContext.Stage.RUNTIME);
        }
      }
      context.stepCompleted();
    }
    protected boolean requiresRuntime(    OperationContext context){
      return context.getProcessType().isServer() && !context.isBooting();
    }
  }
;
  registration.registerReadWriteAttribute(VIRTUAL_NODES,null,virtualNodesWriteHandler);
}
