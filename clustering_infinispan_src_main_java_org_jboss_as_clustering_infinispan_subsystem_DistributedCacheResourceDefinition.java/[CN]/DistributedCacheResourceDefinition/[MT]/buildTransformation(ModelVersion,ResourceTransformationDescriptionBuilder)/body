{
  ResourceTransformationDescriptionBuilder builder=parent.addChildResource(WILDCARD_PATH);
  if (InfinispanModel.VERSION_3_0_0.requiresTransformation(version)) {
    builder.getAttributeBuilder().setDiscard(new DiscardAttributeChecker.DiscardAttributeValueChecker(CAPACITY_FACTOR.getDefaultValue()),CAPACITY_FACTOR).addRejectCheck(RejectAttributeChecker.DEFINED,CAPACITY_FACTOR).setDiscard(new DiscardAttributeChecker.DiscardAttributeValueChecker(CONSISTENT_HASH_STRATEGY.getDefaultValue()),CONSISTENT_HASH_STRATEGY).addRejectCheck(RejectAttributeChecker.DEFINED,CONSISTENT_HASH_STRATEGY).end();
  }
  if (InfinispanModel.VERSION_1_4_0.requiresTransformation(version)) {
    AttributeConverter converter=new AttributeConverter.DefaultAttributeConverter(){
      @Override protected void convertAttribute(      PathAddress address,      String attributeName,      ModelNode attributeValue,      TransformationContext context){
        if (attributeValue.isDefined()) {
          attributeValue.set(SegmentsAndVirtualNodeConverter.segmentsToVirtualNodes(attributeValue.asString()));
        }
      }
    }
;
    builder.getAttributeBuilder().setDiscard(DiscardAttributeChecker.UNDEFINED,SEGMENTS).setValueConverter(converter,SEGMENTS).addRename(SEGMENTS,VIRTUAL_NODES.getName()).addRejectCheck(RejectAttributeChecker.SIMPLE_EXPRESSIONS,L1_LIFESPAN,OWNERS,VIRTUAL_NODES,SEGMENTS).end();
  }
 else   if (InfinispanModel.VERSION_1_4_1.requiresTransformation(version)) {
    DiscardAttributeChecker checker=new DiscardAttributeChecker.DefaultDiscardAttributeChecker(false,true){
      @Override protected boolean isValueDiscardable(      PathAddress address,      String attributeName,      ModelNode attributeValue,      TransformationContext context){
        return (attributeValue.isDefined() && attributeValue.equals(new ModelNode(1)));
      }
    }
;
    DefaultCheckersAndConverter checkersAndConverter=new DefaultCheckersAndConverter(){
      @Override public String getRejectionLogMessage(      Map<String,ModelNode> attributes){
        return InfinispanLogger.ROOT_LOGGER.segmentsDoesNotSupportExpressions();
      }
      @Override protected boolean rejectAttribute(      PathAddress address,      String attributeName,      ModelNode attributeValue,      TransformationContext context){
        if (checkForExpression(attributeValue)) {
          return true;
        }
        return false;
      }
      @Override protected void convertAttribute(      PathAddress address,      String attributeName,      ModelNode attributeValue,      TransformationContext context){
        if (attributeValue.isDefined()) {
          attributeValue.set(SegmentsAndVirtualNodeConverter.virtualNodesToSegments(attributeValue));
        }
      }
      @Override protected boolean isValueDiscardable(      PathAddress address,      String attributeName,      ModelNode attributeValue,      TransformationContext context){
        return false;
      }
    }
;
    builder.getAttributeBuilder().setDiscard(checker,VIRTUAL_NODES).addRejectCheck(checkersAndConverter,VIRTUAL_NODES).setValueConverter(checkersAndConverter,VIRTUAL_NODES).addRename(VIRTUAL_NODES,SEGMENTS.getName()).end();
  }
  SharedStateCacheResourceDefinition.buildTransformation(version,builder);
}
