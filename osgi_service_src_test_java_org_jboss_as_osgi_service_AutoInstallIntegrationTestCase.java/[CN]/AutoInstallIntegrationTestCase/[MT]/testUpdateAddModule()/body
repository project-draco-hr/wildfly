{
  final ServiceName dummyService=ServiceName.of("dummy");
  final List<OSGiCapability> installedModules=new ArrayList<SubsystemState.OSGiCapability>();
  final List<OSGiCapability> startedBundles=new ArrayList<SubsystemState.OSGiCapability>();
  AutoInstallIntegration aii=new AutoInstallIntegration(){
  }
;
  List<OSGiCapability> modules=new ArrayList<SubsystemState.OSGiCapability>();
  OSGiCapability module=new OSGiCapability("abc",null);
  modules.add(module);
  SubsystemState state=Mockito.mock(SubsystemState.class);
  Mockito.when(state.getCapabilities()).thenReturn(modules);
  final List<Service<?>> addedServices=new ArrayList<Service<?>>();
  final ServiceBuilder<Void> builder=Mockito.mock(ServiceBuilder.class);
  ServiceContainer container=Mockito.mock(ServiceContainer.class);
  Mockito.when(container.addService((ServiceName)Mockito.any(),(Service<?>)Mockito.any())).thenAnswer(new Answer<ServiceBuilder<Void>>(){
    @Override public ServiceBuilder<Void> answer(    InvocationOnMock invocation) throws Throwable {
      addedServices.add((Service<?>)invocation.getArguments()[1]);
      return builder;
    }
  }
);
  ServiceController<?> controller=Mockito.mock(ServiceController.class);
  Mockito.when(controller.getServiceContainer()).thenReturn(container);
  SubsystemState.ChangeEvent event=new SubsystemState.ChangeEvent(SubsystemState.ChangeType.CAPABILITY,false,"abc");
  Assert.assertEquals("The new module should have been installed in the system",1,installedModules.size());
  Assert.assertEquals(module,installedModules.get(0));
  Assert.assertEquals("The new bundle is not yet started, this is done in a service instead",0,startedBundles.size());
  Mockito.verify(builder).addDependency(dummyService);
  Mockito.verify(builder).install();
  ServiceController innerController=Mockito.mock(ServiceController.class);
  StartContext context=Mockito.mock(StartContext.class);
  Mockito.when(context.getController()).thenReturn(innerController);
  Assert.assertEquals(1,addedServices.size());
  addedServices.get(0).start(context);
  Assert.assertEquals("The bundle should have been started",1,startedBundles.size());
  Assert.assertEquals(module,startedBundles.get(0));
  Mockito.verify(innerController).setMode(Mode.REMOVE);
}
