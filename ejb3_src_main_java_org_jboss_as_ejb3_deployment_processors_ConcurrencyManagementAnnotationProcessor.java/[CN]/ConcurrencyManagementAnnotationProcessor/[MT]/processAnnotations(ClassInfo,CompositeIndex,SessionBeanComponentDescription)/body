{
  if (!componentDescription.allowsConcurrentAccess()) {
    return;
  }
  Map<DotName,List<AnnotationInstance>> annotationsOnBean=beanClass.annotations();
  if (annotationsOnBean == null || annotationsOnBean.isEmpty()) {
    return;
  }
  List<AnnotationInstance> concurrencyMgmtAnnotations=annotationsOnBean.get(DotName.createSimple(ConcurrencyManagement.class.getName()));
  if (concurrencyMgmtAnnotations == null || concurrencyMgmtAnnotations.isEmpty()) {
    return;
  }
  if (concurrencyMgmtAnnotations.size() > 1) {
    throw new DeploymentUnitProcessingException("More than one @ConcurrencyManagement annotation found on bean: " + componentDescription.getEJBName());
  }
  AnnotationInstance concurrencyMgmtAnnotation=concurrencyMgmtAnnotations.get(0);
  if (concurrencyMgmtAnnotation.target() instanceof ClassInfo == false) {
    throw new DeploymentUnitProcessingException("@ConcurrencyManagement can appear only on a class. Target: " + concurrencyMgmtAnnotation.target() + " is not a class");
  }
  AnnotationValue conMgmtAnnVal=concurrencyMgmtAnnotation.value();
  ConcurrencyManagementType concurrencyManagementType=ConcurrencyManagementType.valueOf(conMgmtAnnVal.asEnum());
switch (concurrencyManagementType) {
case CONTAINER:
    componentDescription.containerManagedConcurrency();
  break;
case BEAN:
componentDescription.beanManagedConcurrency();
default :
throw new DeploymentUnitProcessingException("Unexpected concurrency management type: " + concurrencyManagementType + " on bean "+ componentDescription.getEJBName());
}
logger.debug(componentDescription.getEJBName() + " bean has been marked for " + componentDescription.getConcurrencyManagementType()+ " concurrency management type");
}
