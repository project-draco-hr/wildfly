{
  if (!(target instanceof MethodInfo)) {
    throw EeLogger.ROOT_LOGGER.methodOnlyAnnotation(AROUND_INVOKE_ANNOTATION_NAME);
  }
  final MethodInfo methodInfo=MethodInfo.class.cast(target);
  final ClassInfo classInfo=methodInfo.declaringClass();
  final EEModuleClassDescription classDescription=eeModuleDescription.addOrGetLocalClassDescription(classInfo.name().toString());
  final List<AnnotationInstance> classAroundInvokes=classInfo.annotations().get(AROUND_INVOKE_ANNOTATION_NAME);
  if (classAroundInvokes.size() > 1) {
    throw EeLogger.ROOT_LOGGER.aroundInvokeAnnotationUsedTooManyTimes(classInfo.name(),classAroundInvokes.size());
  }
  validateArgumentType(classInfo,methodInfo);
  InterceptorClassDescription.Builder builder=InterceptorClassDescription.builder(classDescription.getInterceptorClassDescription());
  builder.setAroundInvoke(MethodIdentifier.getIdentifier(Object.class,methodInfo.name(),InvocationContext.class));
  classDescription.setInterceptorClassDescription(builder.build());
}
