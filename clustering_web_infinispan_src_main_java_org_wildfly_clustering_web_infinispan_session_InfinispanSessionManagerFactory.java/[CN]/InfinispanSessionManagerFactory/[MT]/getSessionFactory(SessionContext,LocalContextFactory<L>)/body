{
  SessionManagerConfiguration config=this.config.getSessionManagerConfiguration();
  Module module=config.getModule();
  MarshallingContext marshallingContext=new SimpleMarshallingContextFactory().createMarshallingContext(new SimpleMarshallingConfigurationRepository(MarshallingVersion.class,MarshallingVersion.CURRENT,module),module.getClassLoader());
  MarshalledValueFactory<MarshallingContext> factory=new SimpleMarshalledValueFactory(marshallingContext);
switch (config.getAttributePersistenceStrategy()) {
case FINE:
{
      Cache<String,FineSessionCacheEntry<L>> sessionCache=this.getSessionCache();
      Cache<SessionAttributeCacheKey,MarshalledValue<Object,MarshallingContext>> attributeCache=this.config.getCache();
      Marshaller<Object,MarshalledValue<Object,MarshallingContext>,MarshallingContext> marshaller=new MarshalledValueMarshaller<>(factory,marshallingContext);
      return new FineSessionFactory<>(sessionCache,attributeCache,context,marshaller,localContextFactory);
    }
case COARSE:
{
    Cache<String,CoarseSessionCacheEntry<L>> sessionCache=this.getSessionCache();
    Cache<SessionAttributesCacheKey,MarshalledValue<Map<String,Object>,MarshallingContext>> attributesCache=this.config.getCache();
    Marshaller<Map<String,Object>,MarshalledValue<Map<String,Object>,MarshallingContext>,MarshallingContext> marshaller=new MarshalledValueMarshaller<>(factory,marshallingContext);
    return new CoarseSessionFactory<>(sessionCache,attributesCache,context,marshaller,localContextFactory);
  }
default :
{
  throw new IllegalStateException();
}
}
}
