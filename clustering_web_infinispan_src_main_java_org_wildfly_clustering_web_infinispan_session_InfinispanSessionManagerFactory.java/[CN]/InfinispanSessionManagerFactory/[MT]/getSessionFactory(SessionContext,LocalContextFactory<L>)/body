{
  Module module=this.config.getModule();
  MarshallingContext marshallingContext=new SimpleMarshallingContextFactory().createMarshallingContext(new SessionAttributeMarshallingContext(module),module.getClassLoader());
  MarshalledValueFactory<MarshallingContext> factory=new SimpleMarshalledValueFactory(marshallingContext);
switch (this.config.getAttributePersistenceStrategy()) {
case FINE:
{
      Cache<String,FineSessionCacheEntry<L>> sessionCache=this.cache.getValue();
      Cache<SessionAttributeCacheKey,MarshalledValue<Object,MarshallingContext>> attributeCache=this.cache.getValue();
      SessionAttributeMarshaller<Object,MarshalledValue<Object,MarshallingContext>> marshaller=new MarshalledValueSessionAttributeMarshaller<>(factory,marshallingContext);
      return new FineSessionFactory<>(sessionCache,attributeCache,context,marshaller,localContextFactory);
    }
case COARSE:
{
    Cache<String,CoarseSessionCacheEntry<L>> sessionCache=this.cache.getValue();
    Cache<SessionAttributesCacheKey,MarshalledValue<Map<String,Object>,MarshallingContext>> attributesCache=this.cache.getValue();
    SessionAttributeMarshaller<Map<String,Object>,MarshalledValue<Map<String,Object>,MarshallingContext>> marshaller=new MarshalledValueSessionAttributeMarshaller<>(factory,marshallingContext);
    return new CoarseSessionFactory<>(sessionCache,attributesCache,context,marshaller,localContextFactory);
  }
default :
{
  throw new IllegalStateException();
}
}
}
