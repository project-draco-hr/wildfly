{
  SessionManagerConfiguration config=this.config.getSessionManagerConfiguration();
  Module module=config.getModule();
  MarshallingContext marshallingContext=new SimpleMarshallingContextFactory().createMarshallingContext(new SimpleMarshallingConfigurationRepository(MarshallingVersion.class,MarshallingVersion.CURRENT,module),module.getClassLoader());
  MarshalledValueFactory<MarshallingContext> factory=new SimpleMarshalledValueFactory(marshallingContext);
  Cache<Key<String>,?> cache=this.config.getCache();
  Configuration cacheConfig=cache.getCacheConfiguration();
  boolean lockOnRead=cacheConfig.transaction().transactionMode().isTransactional() && (cacheConfig.transaction().lockingMode() == LockingMode.PESSIMISTIC) && cacheConfig.locking().isolationLevel() == IsolationLevel.REPEATABLE_READ;
switch (config.getAttributePersistenceStrategy()) {
case FINE:
{
      Marshaller<Object,MarshalledValue<Object,MarshallingContext>,MarshallingContext> marshaller=new MarshalledValueMarshaller<>(factory,marshallingContext);
      return new FineSessionFactory<>(cache,context,marshaller,localContextFactory,lockOnRead);
    }
case COARSE:
{
    Marshaller<Map<String,Object>,MarshalledValue<Map<String,Object>,MarshallingContext>,MarshallingContext> marshaller=new MarshalledValueMarshaller<>(factory,marshallingContext);
    return new CoarseSessionFactory<>(cache,context,marshaller,localContextFactory,lockOnRead);
  }
default :
{
  throw new IllegalStateException();
}
}
}
