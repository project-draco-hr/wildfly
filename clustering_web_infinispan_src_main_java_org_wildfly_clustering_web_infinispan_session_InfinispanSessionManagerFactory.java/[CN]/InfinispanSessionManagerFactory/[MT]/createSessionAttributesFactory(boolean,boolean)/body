{
  SessionManagerFactoryConfiguration config=this.config.getSessionManagerFactoryConfiguration();
  Module module=config.getModule();
  MarshallingContext marshallingContext=new SimpleMarshallingContextFactory().createMarshallingContext(new SimpleMarshallingConfigurationRepository(MarshallingVersion.class,MarshallingVersion.CURRENT,module),module.getClassLoader());
  MarshalledValueFactory<MarshallingContext> factory=new SimpleMarshalledValueFactory(marshallingContext);
switch (this.config.getSessionManagerFactoryConfiguration().getAttributePersistenceStrategy()) {
case FINE:
{
      Marshaller<Object,MarshalledValue<Object,MarshallingContext>,MarshallingContext> marshaller=new MarshalledValueMarshaller<>(factory,marshallingContext);
      return new FineSessionAttributesFactory(this.config.getCache(),marshaller,requireMarshallable);
    }
case COARSE:
{
    Marshaller<Map<String,Object>,MarshalledValue<Map<String,Object>,MarshallingContext>,MarshallingContext> marshaller=new MarshalledValueMarshaller<>(factory,marshallingContext);
    return new CoarseSessionAttributesFactory(this.config.getCache(),marshaller,lockOnRead,requireMarshallable);
  }
default :
{
  throw new IllegalStateException();
}
}
}
