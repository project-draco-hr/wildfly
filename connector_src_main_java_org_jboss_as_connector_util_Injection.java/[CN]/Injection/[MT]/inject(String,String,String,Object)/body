{
  if (propertyName == null || propertyName.trim().equals(""))   throw new IllegalArgumentException("PropertyName is undefined");
  if (object == null)   throw new IllegalArgumentException("Object is null");
  String methodName="set" + propertyName.substring(0,1).toUpperCase(Locale.US);
  if (propertyName.length() > 1) {
    methodName+=propertyName.substring(1);
  }
  if (propertyType == null || propertyType.trim().equals("")) {
    Method[] methods=object.getClass().getMethods();
    if (methods != null) {
      for (int i=0; propertyType == null && i < methods.length; i++) {
        Method method=methods[i];
        if (methodName.equals(method.getName()) && method.getParameterTypes().length == 1) {
          propertyType=method.getParameterTypes()[0].getName();
        }
      }
    }
  }
  if (propertyType == null || propertyType.trim().equals(""))   throw new IllegalArgumentException("PropertyType is undefined");
  Class parameterClass=null;
  Object parameterValue=null;
  String substituredValue=getSubstitutionValue(propertyValue);
  if (propertyType.equals("java.lang.String")) {
    parameterClass=String.class;
    parameterValue=substituredValue;
  }
 else   if (propertyType.equals("byte") || propertyType.equals("java.lang.Byte")) {
    parameterClass=Byte.class;
    if (substituredValue != null && !substituredValue.trim().equals(""))     parameterValue=Byte.valueOf(substituredValue);
  }
 else   if (propertyType.equals("short") || propertyType.equals("java.lang.Short")) {
    parameterClass=Short.class;
    if (substituredValue != null && !substituredValue.trim().equals(""))     parameterValue=Short.valueOf(substituredValue);
  }
 else   if (propertyType.equals("int") || propertyType.equals("java.lang.Integer")) {
    parameterClass=Integer.class;
    if (substituredValue != null && !substituredValue.trim().equals(""))     parameterValue=Integer.valueOf(substituredValue);
  }
 else   if (propertyType.equals("long") || propertyType.equals("java.lang.Long")) {
    parameterClass=Long.class;
    if (substituredValue != null && !substituredValue.trim().equals(""))     parameterValue=Long.valueOf(substituredValue);
  }
 else   if (propertyType.equals("float") || propertyType.equals("java.lang.Float")) {
    parameterClass=Float.class;
    if (substituredValue != null && !substituredValue.trim().equals(""))     parameterValue=Float.valueOf(substituredValue);
  }
 else   if (propertyType.equals("double") || propertyType.equals("java.lang.Double")) {
    parameterClass=Double.class;
    if (substituredValue != null && !substituredValue.trim().equals(""))     parameterValue=Double.valueOf(substituredValue);
  }
 else   if (propertyType.equals("boolean") || propertyType.equals("java.lang.Boolean")) {
    parameterClass=Boolean.class;
    if (substituredValue != null && !substituredValue.trim().equals(""))     parameterValue=Boolean.valueOf(substituredValue);
  }
 else   if (propertyType.equals("char") || propertyType.equals("java.lang.Character")) {
    parameterClass=Character.class;
    if (substituredValue != null && !substituredValue.trim().equals(""))     parameterValue=Character.valueOf(substituredValue.charAt(0));
  }
 else {
    throw new IllegalArgumentException("Unknown property type: " + propertyType + " for "+ "property "+ propertyName);
  }
  Method method=null;
  boolean objectInjection=true;
  try {
    method=object.getClass().getMethod(methodName,parameterClass);
  }
 catch (  NoSuchMethodException nsme) {
    objectInjection=false;
    if (parameterClass.equals(Byte.class)) {
      parameterClass=byte.class;
    }
 else     if (parameterClass.equals(Short.class)) {
      parameterClass=short.class;
    }
 else     if (parameterClass.equals(Integer.class)) {
      parameterClass=int.class;
    }
 else     if (parameterClass.equals(Long.class)) {
      parameterClass=long.class;
    }
 else     if (parameterClass.equals(Float.class)) {
      parameterClass=float.class;
    }
 else     if (parameterClass.equals(Double.class)) {
      parameterClass=double.class;
    }
 else     if (parameterClass.equals(Boolean.class)) {
      parameterClass=boolean.class;
    }
 else     if (parameterClass.equals(Character.class)) {
      parameterClass=char.class;
    }
    method=object.getClass().getMethod(methodName,parameterClass);
  }
  if (objectInjection || parameterValue != null)   method.invoke(object,new Object[]{parameterValue});
}
