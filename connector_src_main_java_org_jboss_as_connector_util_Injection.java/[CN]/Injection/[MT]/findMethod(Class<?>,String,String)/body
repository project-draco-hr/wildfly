{
  while (!clz.equals(Object.class)) {
    List<Method> hits=null;
    Method[] methods=clz.getDeclaredMethods();
    for (int i=0; i < methods.length; i++) {
      Method method=methods[i];
      if (methodName.equals(method.getName()) && method.getParameterTypes().length == 1) {
        if (propertyType == null || propertyType.equals(method.getParameterTypes()[0].getName())) {
          if (hits == null)           hits=new ArrayList<Method>(1);
          method.setAccessible(true);
          hits.add(method);
        }
      }
    }
    if (hits != null) {
      if (hits.size() == 1) {
        return hits.get(0);
      }
 else {
        Collections.sort(hits,new MethodSorter());
        if (propertyType != null) {
          for (          Method m : hits) {
            if (propertyType.equals(m.getParameterTypes()[0].getName()))             return m;
          }
        }
        return hits.get(0);
      }
    }
    clz=clz.getSuperclass();
  }
  return null;
}
