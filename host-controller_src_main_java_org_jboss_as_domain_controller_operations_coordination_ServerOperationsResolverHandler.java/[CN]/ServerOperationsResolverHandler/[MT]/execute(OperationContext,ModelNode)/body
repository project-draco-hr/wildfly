{
  if (context.hasResult()) {
    localResponse.get(RESULT).set(context.getResult());
  }
  if (context.hasFailureDescription()) {
    localResponse.get(FAILURE_DESCRIPTION).set(context.getFailureDescription());
    context.setRollbackOnly();
  }
 else {
    final ModelNode domainModel=Resource.Tools.readModel(context.getRootResource());
    ParsedOp.ServerOperationProvider provider=new ParsedOp.ServerOperationProvider(){
      @Override public Map<Set<ServerIdentity>,ModelNode> getServerOperations(      ModelNode domainOp,      PathAddress address){
        return ServerOperationsResolverHandler.this.getServerOperations(context,domainOp,address,domainModel,domainModel.get(HOST).get(localHostName));
      }
    }
;
    ModelNode localResult=localResponse.get(RESULT);
    localResponse.remove(RESULT);
    ModelNode responseNode=recordResponse ? context.getResult() : localResponse.get(RESULT);
    if (ModelType.STRING == localResult.getType() && IGNORED.equals(localResult.asString())) {
      responseNode.set(localResult);
    }
 else {
      Map<Set<ServerIdentity>,ModelNode> serverOps=parsedOp.getServerOps(provider);
      createOverallResult(serverOps,localResult,responseNode);
    }
    if (HOST_CONTROLLER_LOGGER.isTraceEnabled()) {
      HOST_CONTROLLER_LOGGER.tracef("%s responseNode is %s",getClass().getSimpleName(),responseNode);
    }
  }
  context.completeStep();
}
