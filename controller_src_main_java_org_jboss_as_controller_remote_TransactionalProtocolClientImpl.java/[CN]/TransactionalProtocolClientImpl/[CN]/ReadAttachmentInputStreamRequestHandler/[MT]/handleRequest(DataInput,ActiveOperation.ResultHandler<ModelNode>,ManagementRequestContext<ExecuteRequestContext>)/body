{
  expectHeader(input,ModelControllerProtocol.PARAM_INPUTSTREAM_INDEX);
  final int index=input.readInt();
  context.executeAsync(new ManagementRequestContext.AsyncTask<ExecuteRequestContext>(){
    @Override public void execute(    final ManagementRequestContext<ExecuteRequestContext> context) throws Exception {
      final ExecuteRequestContext exec=context.getAttachment();
      final ManagementRequestHeader header=ManagementRequestHeader.class.cast(context.getRequestHeader());
      final ManagementResponseHeader response=new ManagementResponseHeader(header.getVersion(),header.getRequestId(),null);
      final InputStream is=exec.getAttachments().getInputStreams().get(index);
      try {
        final File temp=copyStream(is,exec.tempDir);
        try {
          final FlushableDataOutput output=context.writeMessage(response);
          try {
            output.writeByte(ModelControllerProtocol.PARAM_INPUTSTREAM_LENGTH);
            output.writeInt((int)temp.length());
            output.writeByte(ModelControllerProtocol.PARAM_INPUTSTREAM_CONTENTS);
            final FileInputStream fis=new FileInputStream(temp);
            try {
              StreamUtils.copyStream(fis,output);
              fis.close();
            }
  finally {
              StreamUtils.safeClose(fis);
            }
            output.writeByte(ManagementProtocol.RESPONSE_END);
            output.close();
          }
  finally {
            StreamUtils.safeClose(output);
          }
        }
  finally {
          temp.delete();
        }
      }
  finally {
      }
    }
  }
);
}
