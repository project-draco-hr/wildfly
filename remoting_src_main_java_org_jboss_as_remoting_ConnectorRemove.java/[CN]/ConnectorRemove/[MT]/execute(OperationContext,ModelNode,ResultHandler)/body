{
  final PathAddress address=PathAddress.pathAddress(operation.require(OP_ADDR));
  final String name=address.getLastElement().getValue();
  final ModelNode connector=context.getSubModel();
  final ModelNode compensating=new ModelNode();
  compensating.get(OP_ADDR).set(operation.require(OP_ADDR));
  compensating.get(OP).set(ADD);
  compensating.get(SASL).set(connector.get(SASL));
  compensating.get(AUTHENTICATION_PROVIDER).set(connector.get(AUTHENTICATION_PROVIDER));
  compensating.get(PROPERTIES).set(connector.get(PROPERTIES));
  if (context instanceof RuntimeOperationContext) {
    ServiceName connectorServiceName=RemotingServices.connectorServiceName(name);
    final ServiceController<?> controller=((RuntimeOperationContext)context).getServiceRegistry().getService(connectorServiceName);
    if (controller != null) {
      controller.addListener(new AbstractServiceListener<Object>(){
        @Override public void listenerAdded(        final ServiceController<? extends Object> controller){
          controller.setMode(Mode.REMOVE);
        }
        @Override public void serviceRemoved(        final ServiceController<? extends Object> controller){
        }
      }
);
    }
  }
  resultHandler.handleResultComplete(compensating);
  return Cancellable.NULL;
}
