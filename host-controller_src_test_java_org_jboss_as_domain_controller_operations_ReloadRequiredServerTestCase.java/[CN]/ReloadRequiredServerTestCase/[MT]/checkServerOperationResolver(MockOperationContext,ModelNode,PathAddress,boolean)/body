{
  Map<String,ProxyController> serverProxies=new HashMap<String,ProxyController>();
  serverProxies.put("server-one",new MockServerProxy());
  serverProxies.put("server-two",new MockServerProxy());
  serverProxies.put("server-three",new MockServerProxy());
  ServerOperationResolver resolver=new ServerOperationResolver("localhost",serverProxies);
  final Resource backup=context.root;
  context.root=getServerResolutionResource();
  try {
    Map<Set<ServerIdentity>,ModelNode> serverOps=resolver.getServerOperations(context,operation,address);
    if (expectServerOps) {
      Assert.assertEquals(1,serverOps.size());
      Set<ServerIdentity> ids=serverOps.entrySet().iterator().next().getKey();
      Assert.assertEquals(1,ids.size());
      ServerIdentity expected=new ServerIdentity("localhost","group-one","server-one");
      assertEquals(expected,ids.iterator().next());
      ModelNode expectedOp=new ModelNode();
      expectedOp.get(OP).set(ServerRestartRequiredHandler.OPERATION_NAME);
      expectedOp.get(OP_ADDR).setEmptyList();
      Assert.assertEquals(expectedOp,serverOps.get(ids));
    }
 else {
      Assert.assertEquals(0,serverOps.size());
    }
  }
  finally {
    context.root=backup;
  }
}
