{
  Map<String,ProxyController> serverProxies=new HashMap<String,ProxyController>();
  serverProxies.put("server-one",new MockServerProxy());
  serverProxies.put("server-two",new MockServerProxy());
  serverProxies.put("server-three",new MockServerProxy());
  ServerOperationResolver resolver=new ServerOperationResolver("localhost",serverProxies);
  ModelNode domain=new ModelNode();
  ModelNode host=new ModelNode();
  host.get(SERVER_CONFIG,"server-one",GROUP).set("group-one");
  host.get(SERVER_CONFIG,"server-two",GROUP).set("nope");
  host.get(SERVER_CONFIG,"server-three",GROUP).set("nope");
  Map<Set<ServerIdentity>,ModelNode> serverOps=resolver.getServerOperations(operation,address,domain,host);
  Assert.assertEquals(1,serverOps.size());
  Set<ServerIdentity> ids=serverOps.entrySet().iterator().next().getKey();
  Assert.assertEquals(1,ids.size());
  ServerIdentity expected=new ServerIdentity("localhost","group-one","server-one");
  assertEquals(expected,ids.iterator().next());
  ModelNode expectedOp=new ModelNode();
  expectedOp.get(OP).set(ServerRestartRequiredHandler.OPERATION_NAME);
  expectedOp.get(OP_ADDR).setEmptyList();
  Assert.assertEquals(expectedOp,serverOps.get(ids));
}
