{
  if (!Util.isSuccess(response)) {
    throw new CommandFormatException(Util.getFailureDescription(response));
  }
  if (!response.hasDefined(Util.RESULT)) {
    return;
  }
  boolean opDescr;
  try {
    opDescr=name.isPresent(ctx.getParsedCommandLine());
  }
 catch (  CommandFormatException e) {
    throw new CommandFormatException("Failed to read argument " + name.getFullName() + ": "+ e.getLocalizedMessage());
  }
  if (opDescr) {
    final ModelNode result=response.get(Util.RESULT);
    if (result.has(Util.DESCRIPTION)) {
      ctx.printLine("\n\t" + result.get(Util.DESCRIPTION).asString());
    }
 else {
      ctx.printLine("Operation description is not available.");
    }
    final StringBuilder buf=new StringBuilder();
    buf.append("\n\nPARAMETERS\n");
    if (result.has(Util.REQUEST_PROPERTIES)) {
      final List<Property> props=result.get(Util.REQUEST_PROPERTIES).asPropertyList();
      if (props.isEmpty()) {
        buf.append("\n\tn/a\n");
      }
 else {
        for (        Property prop : props) {
          buf.append('\n');
          buf.append(prop.getName()).append("\n\n");
          final List<Property> propProps=prop.getValue().asPropertyList();
          final SimpleTable table=new SimpleTable(2);
          for (          Property propProp : propProps) {
            if (propProp.getName().equals(Util.DESCRIPTION)) {
              buf.append('\t').append(propProp.getValue().asString()).append("\n\n");
            }
 else             if (!propProp.getName().equals(Util.VALUE_TYPE)) {
              table.addLine(new String[]{'\t' + propProp.getName() + ':',propProp.getValue().asString()});
            }
          }
          table.append(buf,false);
          buf.append('\n');
        }
      }
    }
 else {
      buf.append("\n\tn/a\n");
    }
    ctx.printLine(buf.toString());
    buf.setLength(0);
    buf.append("\nRESPONSE\n");
    if (result.has(Util.REPLY_PROPERTIES)) {
      final List<Property> props=result.get(Util.REPLY_PROPERTIES).asPropertyList();
      if (props.isEmpty()) {
        buf.append("\n\tn/a\n");
      }
 else {
        buf.append('\n');
        final SimpleTable table=new SimpleTable(2);
        StringBuilder vtBuf=null;
        for (        Property prop : props) {
          if (prop.getName().equals(Util.DESCRIPTION)) {
            buf.append('\t').append(prop.getValue().asString()).append("\n\n");
          }
 else           if (prop.getName().equals(Util.VALUE_TYPE)) {
            final List<Property> vtProps=prop.getValue().asPropertyList();
            if (!vtProps.isEmpty()) {
              vtBuf=new StringBuilder();
              for (              Property vtProp : vtProps) {
                vtBuf.append('\n').append(vtProp.getName()).append("\n\n");
                final List<Property> vtPropProps=vtProp.getValue().asPropertyList();
                final SimpleTable vtTable=new SimpleTable(2);
                for (                Property vtPropProp : vtPropProps) {
                  if (vtPropProp.getName().equals(Util.DESCRIPTION)) {
                    vtBuf.append('\t').append(vtPropProp.getValue().asString()).append("\n\n");
                  }
 else                   if (!vtPropProp.getName().equals(Util.VALUE_TYPE)) {
                    vtTable.addLine(new String[]{'\t' + vtPropProp.getName() + ':',vtPropProp.getValue().asString()});
                  }
                }
                vtTable.append(vtBuf,false);
                vtBuf.append('\n');
              }
            }
          }
 else {
            table.addLine(new String[]{'\t' + prop.getName() + ':',prop.getValue().asString()});
          }
        }
        table.append(buf,false);
        buf.append('\n');
        if (vtBuf != null) {
          buf.append(vtBuf);
        }
      }
    }
 else {
      buf.append("\n\tn/a\n");
    }
    ctx.printLine(buf.toString());
  }
 else {
    ctx.printColumns(Util.getList(response));
  }
}
