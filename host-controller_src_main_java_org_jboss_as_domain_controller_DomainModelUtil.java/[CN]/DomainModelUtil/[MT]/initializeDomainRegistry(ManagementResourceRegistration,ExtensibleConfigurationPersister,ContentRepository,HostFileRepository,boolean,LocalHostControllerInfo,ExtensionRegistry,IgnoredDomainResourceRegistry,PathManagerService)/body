{
  final EnumSet<OperationEntry.Flag> readOnly=EnumSet.of(OperationEntry.Flag.READ_ONLY);
  final EnumSet<OperationEntry.Flag> masterOnly=EnumSet.of(OperationEntry.Flag.MASTER_HOST_CONTROLLER_ONLY);
  XmlMarshallingHandler xmh=new XmlMarshallingHandler(configurationPersister);
  root.registerOperationHandler(XmlMarshallingHandler.OPERATION_NAME,xmh,xmh,false,OperationEntry.EntryType.PUBLIC,readOnly);
  root.registerOperationHandler(NamespaceAddHandler.OPERATION_NAME,NamespaceAddHandler.INSTANCE,NamespaceAddHandler.INSTANCE,false);
  root.registerOperationHandler(NamespaceRemoveHandler.OPERATION_NAME,NamespaceRemoveHandler.INSTANCE,NamespaceRemoveHandler.INSTANCE,false);
  root.registerOperationHandler(SchemaLocationAddHandler.OPERATION_NAME,SchemaLocationAddHandler.INSTANCE,SchemaLocationAddHandler.INSTANCE,false);
  root.registerOperationHandler(SchemaLocationRemoveHandler.OPERATION_NAME,SchemaLocationRemoveHandler.INSTANCE,SchemaLocationRemoveHandler.INSTANCE,false);
  root.registerReadOnlyAttribute(RELEASE_VERSION,null,Storage.CONFIGURATION);
  root.registerReadOnlyAttribute(RELEASE_CODENAME,null,Storage.CONFIGURATION);
  root.registerReadOnlyAttribute(MANAGEMENT_MAJOR_VERSION,null,Storage.CONFIGURATION);
  root.registerReadOnlyAttribute(MANAGEMENT_MINOR_VERSION,null,Storage.CONFIGURATION);
  root.registerReadOnlyAttribute(MANAGEMENT_MICRO_VERSION,null,Storage.CONFIGURATION);
  root.registerReadOnlyAttribute(PRODUCT_NAME,null,Storage.CONFIGURATION);
  root.registerReadOnlyAttribute(PRODUCT_VERSION,null,Storage.CONFIGURATION);
  root.registerReadOnlyAttribute(NAMESPACES,null,Storage.CONFIGURATION);
  root.registerReadOnlyAttribute(SCHEMA_LOCATIONS,null,Storage.CONFIGURATION);
  if (isMaster) {
    DeploymentUploadURLHandler.registerMaster(root,contentRepo);
    DeploymentUploadStreamAttachmentHandler.registerMaster(root,contentRepo);
    DeploymentUploadBytesHandler.registerMaster(root,contentRepo);
  }
 else {
    DeploymentUploadURLHandler.registerSlave(root);
    DeploymentUploadStreamAttachmentHandler.registerSlave(root);
    DeploymentUploadBytesHandler.registerSlave(root);
  }
  root.registerOperationHandler(DeploymentAttributes.FULL_REPLACE_DEPLOYMENT_DEFINITION,isMaster ? new DeploymentFullReplaceHandler(contentRepo) : new DeploymentFullReplaceHandler(fileRepository));
  if (isMaster) {
    SnapshotDeleteHandler snapshotDelete=new SnapshotDeleteHandler(configurationPersister);
    root.registerOperationHandler(SnapshotDeleteHandler.OPERATION_NAME,snapshotDelete,snapshotDelete,false,EntryType.PUBLIC,masterOnly);
    SnapshotListHandler snapshotList=new SnapshotListHandler(configurationPersister);
    root.registerOperationHandler(SnapshotListHandler.OPERATION_NAME,snapshotList,snapshotList,false,EntryType.PUBLIC,masterOnly);
    SnapshotTakeHandler snapshotTake=new SnapshotTakeHandler(configurationPersister);
    root.registerOperationHandler(SnapshotTakeHandler.OPERATION_NAME,snapshotTake,snapshotTake,false,EntryType.PUBLIC,masterOnly);
  }
  root.registerReadOnlyAttribute(PROCESS_TYPE,isMaster ? ProcessTypeHandler.MASTER : ProcessTypeHandler.SLAVE,Storage.RUNTIME);
  root.registerReadOnlyAttribute(ServerDescriptionConstants.LAUNCH_TYPE,new LaunchTypeHandler(ServerEnvironment.LaunchType.DOMAIN),Storage.RUNTIME);
  root.registerReadOnlyAttribute(LOCAL_HOST_NAME,new LocalHostNameOperationHandler(hostControllerInfo),Storage.RUNTIME);
  root.registerReadWriteAttribute(DomainAttributes.NAME,null,new WriteAttributeHandlers.StringLengthValidatingHandler(1,true,true));
  root.registerOperationHandler(ValidateAddressOperationHandler.OPERATION_NAME,ValidateAddressOperationHandler.INSTANCE,ValidateAddressOperationHandler.INSTANCE,false,EnumSet.of(OperationEntry.Flag.READ_ONLY));
  root.registerOperationHandler(ResolveExpressionOnDomainHandler.OPERATION_NAME,ResolveExpressionOnDomainHandler.INSTANCE,ResolveExpressionOnDomainHandler.INSTANCE,EnumSet.of(OperationEntry.Flag.READ_ONLY,OperationEntry.Flag.DOMAIN_PUSH_TO_SERVERS));
  DomainServerLifecycleHandlers.registerDomainHandlers(root);
  root.registerSubModel(SystemPropertyResourceDefinition.createForDomainOrHost(Location.DOMAIN));
  final ManagementResourceRegistration interfaces=root.registerSubModel(new InterfaceDefinition(InterfaceAddHandler.NAMED_INSTANCE,InterfaceRemoveHandler.INSTANCE,false));
  final ManagementResourceRegistration profile=root.registerSubModel(PathElement.pathElement(PROFILE),DomainDescriptionProviders.PROFILE);
  profile.registerOperationHandler(ADD,ProfileAddHandler.INSTANCE,ProfileAddHandler.INSTANCE,false);
  profile.registerOperationHandler(REMOVE,ProfileRemoveHandler.INSTANCE,ProfileRemoveHandler.INSTANCE,false);
  profile.registerOperationHandler(DESCRIBE,ProfileDescribeHandler.INSTANCE,ProfileDescribeHandler.INSTANCE,false,OperationEntry.EntryType.PRIVATE,readOnly);
  profile.registerReadOnlyAttribute(NAME,ReadResourceNameOperationStepHandler.INSTANCE,Storage.CONFIGURATION);
  root.registerSubModel(PathResourceDefinition.createNamed(pathManager));
  final ManagementResourceRegistration socketBindingGroup=root.registerSubModel(new SocketBindingGroupResourceDefinition(SocketBindingGroupAddHandler.INSTANCE,DomainSocketBindingGroupRemoveHandler.INSTANCE,true));
  socketBindingGroup.registerSubModel(SocketBindingResourceDefinition.INSTANCE);
  socketBindingGroup.registerSubModel(RemoteDestinationOutboundSocketBindingResourceDefinition.INSTANCE);
  socketBindingGroup.registerSubModel(LocalDestinationOutboundSocketBindingResourceDefinition.INSTANCE);
  final ManagementResourceRegistration serverGroups=root.registerSubModel(PathElement.pathElement(SERVER_GROUP),DomainDescriptionProviders.SERVER_GROUP);
  serverGroups.registerOperationHandler(ADD,ServerGroupAddHandler.INSTANCE,ServerGroupAddHandler.INSTANCE,false);
  serverGroups.registerOperationHandler(REMOVE,ServerGroupRemoveHandler.INSTANCE,ServerGroupRemoveHandler.INSTANCE,false);
  serverGroups.registerReadWriteAttribute(SOCKET_BINDING_GROUP,null,WriteAttributeHandlers.WriteAttributeOperationHandler.INSTANCE,Storage.CONFIGURATION);
  serverGroups.registerReadWriteAttribute(SOCKET_BINDING_PORT_OFFSET,null,new IntRangeValidatingHandler(0,true),Storage.CONFIGURATION);
  serverGroups.registerReadWriteAttribute(PROFILE,null,ServerGroupProfileWriteAttributeHandler.INSTANCE,Storage.CONFIGURATION);
  serverGroups.registerReadOnlyAttribute(MANAGEMENT_SUBSYSTEM_ENDPOINT,null,Storage.CONFIGURATION);
  DomainServerLifecycleHandlers.registerServerGroupHandlers(serverGroups);
  serverGroups.registerSubModel(JvmResourceDefinition.GLOBAL);
  serverGroups.registerOperationHandler(DeploymentAttributes.SERVER_GROUP_REPLACE_DEPLOYMENT_DEFINITION,new ServerGroupDeploymentReplaceHandler(fileRepository));
  serverGroups.registerSubModel(DomainDeploymentResourceDescription.createForServerGroup(contentRepo,fileRepository));
  serverGroups.registerSubModel(SystemPropertyResourceDefinition.createForDomainOrHost(Location.SERVER_GROUP));
  root.registerSubModel(DomainDeploymentResourceDescription.createForDomainRoot(isMaster,contentRepo,fileRepository));
  final ManagementResourceRegistration deploymentOverlays=root.registerSubModel(DeploymentOverlayDefinition.INSTANCE);
  deploymentOverlays.registerSubModel(new ContentDefinition(contentRepo,fileRepository));
  final ManagementResourceRegistration serverGroupDeploymentOverlay=serverGroups.registerSubModel(DeploymentOverlayDefinition.INSTANCE);
  serverGroupDeploymentOverlay.registerSubModel(new DeploymentOverlayDeploymentDefinition(DeploymentOverlayPriority.SERVER_GROUP));
  ManagedDMRContentTypeResourceDefinition plansDef=new ManagedDMRContentTypeResourceDefinition(contentRepo,ROLLOUT_PLAN,PathElement.pathElement(MANAGEMENT_CLIENT_CONTENT,ROLLOUT_PLANS),DomainRootDescription.getResourceDescriptionResolver(ROLLOUT_PLANS));
  ManagementResourceRegistration mgmtContent=root.registerSubModel(plansDef);
  ParameterValidator contentValidator=new AbstractParameterValidator(){
    @Override public void validateParameter(    String parameterName,    ModelNode value) throws OperationFailedException {
      validateRolloutPlanStructure(value);
    }
  }
;
  ManagedDMRContentResourceDefinition planDef=ManagedDMRContentResourceDefinition.create(ROLLOUT_PLAN,contentValidator,DomainRootDescription.getResourceDescriptionResolver(ROLLOUT_PLAN));
  mgmtContent.registerSubModel(planDef);
  root.registerSubModel(new ExtensionResourceDefinition(extensionRegistry,true,!isMaster));
  extensionRegistry.setSubsystemParentResourceRegistrations(profile,null);
  if (!isMaster) {
    final ApplyExtensionsHandler aexh=new ApplyExtensionsHandler(extensionRegistry,hostControllerInfo,ignoredDomainResourceRegistry);
    root.registerOperationHandler(ApplyExtensionsHandler.OPERATION_NAME,aexh,aexh,false,EntryType.PRIVATE);
    ApplyRemoteMasterDomainModelHandler armdmh=new ApplyRemoteMasterDomainModelHandler(fileRepository,contentRepo,hostControllerInfo,ignoredDomainResourceRegistry);
    root.registerOperationHandler(ApplyRemoteMasterDomainModelHandler.OPERATION_NAME,armdmh,armdmh,false,OperationEntry.EntryType.PRIVATE);
  }
 else {
    final SubsystemDescriptionDump dumper=new SubsystemDescriptionDump(extensionRegistry);
    root.registerOperationHandler(SubsystemDescriptionDump.DEFINITION,dumper,false);
  }
  DomainTransformers.initializeDomainRegistry(extensionRegistry.getTransformerRegistry());
}
