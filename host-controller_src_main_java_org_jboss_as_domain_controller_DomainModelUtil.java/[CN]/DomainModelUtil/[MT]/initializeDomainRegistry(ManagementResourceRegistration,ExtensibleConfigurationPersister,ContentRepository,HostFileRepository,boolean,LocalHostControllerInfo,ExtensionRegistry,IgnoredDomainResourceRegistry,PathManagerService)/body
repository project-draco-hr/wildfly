{
  final EnumSet<OperationEntry.Flag> readOnly=EnumSet.of(OperationEntry.Flag.READ_ONLY);
  final EnumSet<OperationEntry.Flag> masterOnly=EnumSet.of(OperationEntry.Flag.MASTER_HOST_CONTROLLER_ONLY);
  root.registerSubModel(SystemPropertyResourceDefinition.createForDomainOrHost(Location.DOMAIN));
  final ManagementResourceRegistration interfaces=root.registerSubModel(new InterfaceDefinition(InterfaceAddHandler.NAMED_INSTANCE,InterfaceRemoveHandler.INSTANCE,false));
  final ManagementResourceRegistration profile=root.registerSubModel(PathElement.pathElement(PROFILE),DomainDescriptionProviders.PROFILE);
  profile.registerOperationHandler(ADD,ProfileAddHandler.INSTANCE,ProfileAddHandler.INSTANCE,false);
  profile.registerOperationHandler(REMOVE,ProfileRemoveHandler.INSTANCE,ProfileRemoveHandler.INSTANCE,false);
  profile.registerOperationHandler(DESCRIBE,ProfileDescribeHandler.INSTANCE,ProfileDescribeHandler.INSTANCE,false,OperationEntry.EntryType.PRIVATE,readOnly);
  profile.registerReadOnlyAttribute(NAME,ReadResourceNameOperationStepHandler.INSTANCE,Storage.CONFIGURATION);
  root.registerSubModel(PathResourceDefinition.createNamed(pathManager));
  final ManagementResourceRegistration socketBindingGroup=root.registerSubModel(new SocketBindingGroupResourceDefinition(SocketBindingGroupAddHandler.INSTANCE,DomainSocketBindingGroupRemoveHandler.INSTANCE,true));
  socketBindingGroup.registerSubModel(SocketBindingResourceDefinition.INSTANCE);
  socketBindingGroup.registerSubModel(RemoteDestinationOutboundSocketBindingResourceDefinition.INSTANCE);
  socketBindingGroup.registerSubModel(LocalDestinationOutboundSocketBindingResourceDefinition.INSTANCE);
  final ManagementResourceRegistration serverGroups=root.registerSubModel(PathElement.pathElement(SERVER_GROUP),DomainDescriptionProviders.SERVER_GROUP);
  serverGroups.registerOperationHandler(ADD,ServerGroupAddHandler.INSTANCE,ServerGroupAddHandler.INSTANCE,false);
  serverGroups.registerOperationHandler(REMOVE,ServerGroupRemoveHandler.INSTANCE,ServerGroupRemoveHandler.INSTANCE,false);
  serverGroups.registerReadWriteAttribute(SOCKET_BINDING_GROUP,null,WriteAttributeHandlers.WriteAttributeOperationHandler.INSTANCE,Storage.CONFIGURATION);
  serverGroups.registerReadWriteAttribute(SOCKET_BINDING_PORT_OFFSET,null,new IntRangeValidatingHandler(0,true),Storage.CONFIGURATION);
  serverGroups.registerReadWriteAttribute(PROFILE,null,ServerGroupProfileWriteAttributeHandler.INSTANCE,Storage.CONFIGURATION);
  serverGroups.registerReadOnlyAttribute(MANAGEMENT_SUBSYSTEM_ENDPOINT,null,Storage.CONFIGURATION);
  DomainServerLifecycleHandlers.registerServerGroupHandlers(serverGroups);
  serverGroups.registerSubModel(JvmResourceDefinition.GLOBAL);
  serverGroups.registerOperationHandler(DeploymentAttributes.SERVER_GROUP_REPLACE_DEPLOYMENT_DEFINITION,new ServerGroupDeploymentReplaceHandler(fileRepository));
  serverGroups.registerSubModel(DomainDeploymentResourceDescription.createForServerGroup(contentRepo,fileRepository));
  serverGroups.registerSubModel(SystemPropertyResourceDefinition.createForDomainOrHost(Location.SERVER_GROUP));
  root.registerSubModel(DomainDeploymentResourceDescription.createForDomainRoot(isMaster,contentRepo,fileRepository));
  final ManagementResourceRegistration deploymentOverlays=root.registerSubModel(DeploymentOverlayDefinition.INSTANCE);
  deploymentOverlays.registerSubModel(new ContentDefinition(contentRepo,fileRepository));
  final ManagementResourceRegistration serverGroupDeploymentOverlay=serverGroups.registerSubModel(DeploymentOverlayDefinition.INSTANCE);
  serverGroupDeploymentOverlay.registerSubModel(new DeploymentOverlayDeploymentDefinition(DeploymentOverlayPriority.SERVER_GROUP));
  ManagedDMRContentTypeResourceDefinition plansDef=new ManagedDMRContentTypeResourceDefinition(contentRepo,ROLLOUT_PLAN,PathElement.pathElement(MANAGEMENT_CLIENT_CONTENT,ROLLOUT_PLANS),DomainRootDescription.getResourceDescriptionResolver(ROLLOUT_PLANS));
  ManagementResourceRegistration mgmtContent=root.registerSubModel(plansDef);
  ParameterValidator contentValidator=new AbstractParameterValidator(){
    @Override public void validateParameter(    String parameterName,    ModelNode value) throws OperationFailedException {
      validateRolloutPlanStructure(value);
    }
  }
;
  ManagedDMRContentResourceDefinition planDef=ManagedDMRContentResourceDefinition.create(ROLLOUT_PLAN,contentValidator,DomainRootDescription.getResourceDescriptionResolver(ROLLOUT_PLAN));
  mgmtContent.registerSubModel(planDef);
  root.registerSubModel(new ExtensionResourceDefinition(extensionRegistry,true,!isMaster));
  extensionRegistry.setSubsystemParentResourceRegistrations(profile,null);
  DomainTransformers.initializeDomainRegistry(extensionRegistry.getTransformerRegistry());
}
