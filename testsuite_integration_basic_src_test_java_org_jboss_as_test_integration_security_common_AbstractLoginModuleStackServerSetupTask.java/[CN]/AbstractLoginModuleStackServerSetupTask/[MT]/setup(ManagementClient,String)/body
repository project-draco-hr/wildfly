{
  this.managementClient=managementClient;
  final LoginModuleConfiguration[] configurations=getLoginModuleConfigurations();
  if (ArrayUtils.isEmpty(configurations)) {
    throw new IllegalStateException("No LoginModuleConfiguration provided.");
  }
  final List<ModelNode> updates=new ArrayList<ModelNode>();
  ModelNode op=new ModelNode();
  op.get(OP).set(ADD);
  op.get(OP_ADDR).add(SUBSYSTEM,"security");
  final String securityDomainName=getSecurityDomainName();
  op.get(OP_ADDR).add(SECURITY_DOMAIN,securityDomainName);
  updates.add(op);
  op=new ModelNode();
  op.get(OP).set(ADD);
  op.get(OP_ADDR).add(SUBSYSTEM,"security");
  op.get(OP_ADDR).add(SECURITY_DOMAIN,securityDomainName);
  op.get(OP_ADDR).add(Constants.AUTHENTICATION,Constants.CLASSIC);
  for (  final LoginModuleConfiguration config : configurations) {
    final ModelNode loginModule=op.get(Constants.LOGIN_MODULES).add();
    loginModule.get(ModelDescriptionConstants.CODE).set(config.getName());
    loginModule.get(FLAG).set(StringUtils.defaultIfEmpty(config.getFlag(),"required"));
    Map<String,String> configOptions=config.getOptions();
    if (configOptions == null) {
      configOptions=Collections.emptyMap();
    }
    final ModelNode moduleOptionsNode=loginModule.get(MODULE_OPTIONS);
    for (    final Map.Entry<String,String> entry : configOptions.entrySet()) {
      moduleOptionsNode.add(entry.getKey(),entry.getValue());
    }
    op.get(OPERATION_HEADERS).get(ALLOW_RESOURCE_SERVICE_RESTART).set(true);
  }
  updates.add(op);
  applyUpdates(managementClient.getControllerClient(),updates);
}
