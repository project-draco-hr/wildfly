{
  return executeRequest(new AbstractManagementRequest<ModelNode,OperationExecutionContext>(){
    @Override public byte getOperationType(){
      return ModelControllerProtocol.EXECUTE_ASYNC_CLIENT_REQUEST;
    }
    @Override protected void sendRequest(    final ActiveOperation.ResultHandler<ModelNode> resultHandler,    final ManagementRequestContext<OperationExecutionContext> context,    final FlushableDataOutput output) throws IOException {
      final List<InputStream> streams=executionContext.operation.getInputStreams();
      final ModelNode operation=executionContext.operation.getOperation();
      int inputStreamLength=0;
      if (streams != null) {
        inputStreamLength=streams.size();
      }
      output.write(ModelControllerProtocol.PARAM_OPERATION);
      operation.writeExternal(output);
      output.write(ModelControllerProtocol.PARAM_INPUTSTREAMS_LENGTH);
      output.writeInt(inputStreamLength);
    }
    @Override public void handleRequest(    final DataInput input,    final ActiveOperation.ResultHandler<ModelNode> resultHandler,    final ManagementRequestContext<OperationExecutionContext> context) throws IOException {
      expectHeader(input,ModelControllerProtocol.PARAM_RESPONSE);
      final ModelNode node=new ModelNode();
      node.readExternal(input);
      resultHandler.done(node);
      expectHeader(input,ManagementProtocol.RESPONSE_END);
    }
  }
,executionContext);
}
