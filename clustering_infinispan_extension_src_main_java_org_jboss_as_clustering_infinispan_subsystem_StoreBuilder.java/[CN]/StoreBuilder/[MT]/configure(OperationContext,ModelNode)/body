{
  this.storeBuilder=this.createStore(context,model);
  this.storeBuilder.persistence().passivation(PASSIVATION.resolveModelAttribute(context,model).asBoolean());
  this.storeBuilder.fetchPersistentState(FETCH_STATE.resolveModelAttribute(context,model).asBoolean()).preload(PRELOAD.resolveModelAttribute(context,model).asBoolean()).purgeOnStartup(PURGE.resolveModelAttribute(context,model).asBoolean()).shared(SHARED.resolveModelAttribute(context,model).asBoolean()).singleton().enabled(SINGLETON.resolveModelAttribute(context,model).asBoolean()).withProperties(ModelNodes.asProperties(PROPERTIES.resolveModelAttribute(context,model)));
  return this;
}
