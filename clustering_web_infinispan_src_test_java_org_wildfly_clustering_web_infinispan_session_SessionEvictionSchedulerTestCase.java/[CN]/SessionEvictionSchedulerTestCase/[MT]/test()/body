{
  String name="cache";
  String evictedSessionId="evicted";
  String activeSessionId="active";
  ImmutableSession evictedSession=mock(ImmutableSession.class);
  ImmutableSession activeSession=mock(ImmutableSession.class);
  CommandDispatcherFactory dispatcherFactory=mock(CommandDispatcherFactory.class);
  CommandDispatcher<SessionEvictionContext> dispatcher=mock(CommandDispatcher.class);
  Evictor<String> evictor=mock(Evictor.class);
  ArgumentCaptor<Command> capturedCommand=ArgumentCaptor.forClass(Command.class);
  ArgumentCaptor<SessionEvictionContext> capturedContext=ArgumentCaptor.forClass(SessionEvictionContext.class);
  when(dispatcherFactory.createCommandDispatcher(same(name),capturedContext.capture())).thenReturn(dispatcher);
  try (Scheduler scheduler=new SessionEvictionScheduler(name,evictor,dispatcherFactory,1)){
    SessionEvictionContext context=capturedContext.getValue();
    assertSame(scheduler,context);
    when(evictedSession.getId()).thenReturn(evictedSessionId);
    when(activeSession.getId()).thenReturn(activeSessionId);
    scheduler.schedule(evictedSession);
    verifyZeroInteractions(dispatcher);
    scheduler.schedule(activeSession);
    verify(dispatcher).submitOnCluster(capturedCommand.capture());
    capturedCommand.getValue().execute(context);
    verify(evictor).evict(evictedSessionId);
    verify(evictor,never()).evict(activeSessionId);
  }
   verify(dispatcher).close();
}
