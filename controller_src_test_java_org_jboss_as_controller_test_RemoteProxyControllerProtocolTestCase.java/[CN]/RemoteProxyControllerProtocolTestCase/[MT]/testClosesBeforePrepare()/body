{
  final CountDownLatch latch=new CountDownLatch(1);
  final AtomicReference<Exception> errorRef=new AtomicReference<Exception>();
  MockModelController controller=new MockModelController(){
    @Override public ModelNode execute(    ModelNode operation,    OperationMessageHandler handler,    OperationTransactionControl control,    OperationAttachments attachments){
      try {
        channels.getClientChannel().writeShutdown();
        channels.getClientChannel().awaitClosed();
      }
 catch (      InterruptedException e) {
      }
catch (      Exception e) {
        errorRef.set(e);
        throw new RuntimeException();
      }
 finally {
        latch.countDown();
      }
      try {
        channels.getServerChannel().writeShutdown();
        channels.getServerChannel().awaitClosed();
      }
 catch (      Exception e) {
        errorRef.set(e);
      }
      IoUtils.safeClose(channels.getClientChannel());
      IoUtils.safeClose(channels.getServerChannel());
      return new ModelNode();
    }
  }
;
  final RemoteProxyController proxyController=setupProxyHandlers(controller);
  ModelNode operation=new ModelNode();
  operation.get("test").set("123");
  CommitProxyOperationControl commitControl=new CommitProxyOperationControl();
  proxyController.execute(operation,OperationMessageHandler.DISCARD,commitControl,OperationAttachments.EMPTY);
  Assert.assertNull(errorRef.get());
  latch.await(15,TimeUnit.SECONDS);
  Assert.assertEquals(1,commitControl.txCompletionStatus.get());
}
