{
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    final EJBClientDescriptorXMLAttribute attribute=EJBClientDescriptorXMLAttribute.forName(reader.getAttributeLocalName(i));
    final String val=reader.getAttributeValue(i);
switch (attribute) {
case INVOCATION_TIMEOUT:
      final Long invocationTimeout=Long.parseLong(val.trim());
    ejbClientDescriptorMetaData.setInvocationTimeout(invocationTimeout);
  break;
case DEPLOYMENT_NODE_SELECTOR:
ejbClientDescriptorMetaData.setDeploymentNodeSelector(val.trim());
break;
default :
unexpectedContent(reader);
}
}
final Set<EJBClientDescriptorXMLElement> visited=EnumSet.noneOf(EJBClientDescriptorXMLElement.class);
while (reader.hasNext()) {
switch (reader.nextTag()) {
case END_ELEMENT:
{
return;
}
case START_ELEMENT:
{
final EJBClientDescriptorXMLElement element=EJBClientDescriptorXMLElement.forName(reader.getLocalName());
if (visited.contains(element)) {
unexpectedElement(reader);
}
visited.add(element);
switch (element) {
case EJB_RECEIVERS:
this.parseEJBReceivers(reader,ejbClientDescriptorMetaData);
break;
case CLUSTERS:
this.parseClusters(reader,ejbClientDescriptorMetaData);
break;
case PROFILE:
this.parseProfile(reader,ejbClientDescriptorMetaData);
break;
default :
unexpectedElement(reader);
}
break;
}
default :
{
unexpectedContent(reader);
}
}
}
unexpectedEndOfDocument(reader.getLocation());
}
