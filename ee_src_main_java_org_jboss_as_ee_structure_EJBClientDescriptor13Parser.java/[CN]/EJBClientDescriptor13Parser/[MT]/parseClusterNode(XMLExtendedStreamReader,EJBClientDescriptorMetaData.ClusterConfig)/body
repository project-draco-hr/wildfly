{
  final Set<EJBClientDescriptorXMLAttribute> required=EnumSet.of(EJBClientDescriptorXMLAttribute.NAME);
  final int count=reader.getAttributeCount();
  String nodeName=null;
  long connectTimeout=5000;
  String userName=null;
  String securityRealm=null;
  for (int i=0; i < count; i++) {
    final EJBClientDescriptorXMLAttribute attribute=EJBClientDescriptorXMLAttribute.forName(reader.getAttributeLocalName(i));
    required.remove(attribute);
    final String value=readResolveValue(reader,i);
switch (attribute) {
case NAME:
      nodeName=value;
    break;
case CONNECT_TIMEOUT:
  connectTimeout=Long.parseLong(value);
break;
case USERNAME:
userName=value;
break;
case SECURITY_REALM:
securityRealm=value;
break;
default :
unexpectedContent(reader);
}
}
if (!required.isEmpty()) {
missingAttributes(reader.getLocation(),required);
}
final EJBClientDescriptorMetaData.ClusterNodeConfig clusterNodeConfig=clusterConfig.newClusterNode(nodeName);
clusterNodeConfig.setConnectTimeout(connectTimeout);
clusterNodeConfig.setSecurityRealm(securityRealm);
clusterNodeConfig.setUserName(userName);
while (reader.hasNext()) {
switch (reader.nextTag()) {
case END_ELEMENT:
{
return;
}
case START_ELEMENT:
{
final EJBClientDescriptorXMLElement element=EJBClientDescriptorXMLElement.forName(reader.getLocalName());
switch (element) {
case CONNECTION_CREATION_OPTIONS:
final Properties connectionCreationOptions=this.parseConnectionCreationOptions(reader);
clusterNodeConfig.setConnectionOptions(connectionCreationOptions);
break;
case CHANNEL_CREATION_OPTIONS:
final Properties channelCreationOptions=this.parseChannelCreationOptions(reader);
clusterNodeConfig.setChannelCreationOptions(channelCreationOptions);
break;
default :
unexpectedElement(reader);
}
break;
}
default :
{
unexpectedContent(reader);
}
}
}
unexpectedEndOfDocument(reader.getLocation());
}
