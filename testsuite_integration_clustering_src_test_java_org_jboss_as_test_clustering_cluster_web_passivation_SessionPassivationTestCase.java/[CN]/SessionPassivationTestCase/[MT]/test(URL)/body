{
  String session1=null;
  String session2=null;
  try (CloseableHttpClient client1=TestHttpClientUtils.promiscuousCookieHttpClient();CloseableHttpClient client2=TestHttpClientUtils.promiscuousCookieHttpClient()){
    HttpResponse response=client1.execute(new HttpGet(SessionOperationServlet.createSetURI(baseURL1,"a","1")));
    try {
      assertEquals(HttpServletResponse.SC_OK,response.getStatusLine().getStatusCode());
      session1=getRequiredHeaderValue(response,SessionOperationServlet.SESSION_ID);
    }
  finally {
      HttpClientUtils.closeQuietly(response);
    }
    long now=System.currentTimeMillis();
    long start=now;
    Map<String,Queue<SessionOperationServlet.EventType>> events=new HashMap<>();
    Map<String,SessionOperationServlet.EventType> expectedEvents=new HashMap<>();
    events.put(session1,new LinkedList<>());
    expectedEvents.put(session1,SessionOperationServlet.EventType.PASSIVATION);
    while (events.get(session1).isEmpty() && ((now - start) < MAX_PASSIVATION_WAIT)) {
      response=client2.execute(new HttpGet(SessionOperationServlet.createSetURI(baseURL1,"a","2")));
      try {
        assertEquals(HttpServletResponse.SC_OK,response.getStatusLine().getStatusCode());
        session2=getRequiredHeaderValue(response,SessionOperationServlet.SESSION_ID);
        if (!events.containsKey(session2)) {
          events.put(session2,new LinkedList<>());
          expectedEvents.put(session2,SessionOperationServlet.EventType.PASSIVATION);
        }
        collectEvents(response,events);
      }
  finally {
        HttpClientUtils.closeQuietly(response);
      }
      Thread.yield();
      now=System.currentTimeMillis();
    }
    assertFalse(events.get(session1).isEmpty());
    validateEvents(session1,events,expectedEvents);
    now=System.currentTimeMillis();
    start=now;
    response=client1.execute(new HttpGet(SessionOperationServlet.createGetURI(baseURL1,"a")));
    try {
      assertEquals(HttpServletResponse.SC_OK,response.getStatusLine().getStatusCode());
      assertEquals("1",getRequiredHeaderValue(response,SessionOperationServlet.RESULT));
      collectEvents(response,events);
      assertFalse(events.get(session1).isEmpty());
      assertTrue(events.get(session1).contains(SessionOperationServlet.EventType.ACTIVATION));
    }
  finally {
      HttpClientUtils.closeQuietly(response);
    }
    while (events.get(session2).isEmpty() && ((now - start) < MAX_PASSIVATION_WAIT)) {
      response=client1.execute(new HttpGet(SessionOperationServlet.createGetURI(baseURL1,"a")));
      try {
        assertEquals(HttpServletResponse.SC_OK,response.getStatusLine().getStatusCode());
        assertEquals("1",getRequiredHeaderValue(response,SessionOperationServlet.RESULT));
        collectEvents(response,events);
      }
  finally {
        HttpClientUtils.closeQuietly(response);
      }
      Thread.yield();
      now=System.currentTimeMillis();
    }
    assertFalse(events.get(session2).isEmpty());
    validateEvents(session2,events,expectedEvents);
    now=System.currentTimeMillis();
    start=now;
    response=client2.execute(new HttpGet(SessionOperationServlet.createGetURI(baseURL1,"a")));
    try {
      assertEquals(HttpServletResponse.SC_OK,response.getStatusLine().getStatusCode());
      assertEquals("2",getRequiredHeaderValue(response,SessionOperationServlet.RESULT));
      collectEvents(response,events);
      assertFalse(events.get(session2).isEmpty());
      assertTrue(events.get(session2).contains(SessionOperationServlet.EventType.ACTIVATION));
    }
  finally {
      HttpClientUtils.closeQuietly(response);
    }
    while (!events.get(session1).isEmpty() && ((now - start) < MAX_PASSIVATION_WAIT)) {
      response=client2.execute(new HttpGet(SessionOperationServlet.createGetURI(baseURL1,"a")));
      try {
        assertEquals(HttpServletResponse.SC_OK,response.getStatusLine().getStatusCode());
        assertEquals("2",getRequiredHeaderValue(response,SessionOperationServlet.RESULT));
        collectEvents(response,events);
      }
  finally {
        HttpClientUtils.closeQuietly(response);
      }
      Thread.yield();
      now=System.currentTimeMillis();
    }
    assertFalse(events.get(session1).isEmpty());
    validateEvents(session1,events,expectedEvents);
    validateEvents(session2,events,expectedEvents);
  }
 }
