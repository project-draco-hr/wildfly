{
  String session1=null;
  String session2=null;
  try (CloseableHttpClient client1=TestHttpClientUtils.relaxedCookieHttpClient();CloseableHttpClient client2=TestHttpClientUtils.relaxedCookieHttpClient()){
    HttpResponse response=client1.execute(new HttpGet(SessionOperationServlet.createSetURI(baseURL1,"a","1")));
    try {
      Assert.assertFalse(response.containsHeader(SessionOperationServlet.ACTIVATED_SESSIONS));
      Assert.assertFalse(response.containsHeader(SessionOperationServlet.PASSIVATED_SESSIONS));
      session1=response.getFirstHeader(SessionOperationServlet.SESSION_ID).getValue();
    }
  finally {
      HttpClientUtils.closeQuietly(response);
    }
    long now=System.currentTimeMillis();
    long start=now;
    boolean passivated=false;
    while (!passivated && ((now - start) < MAX_PASSIVATION_WAIT)) {
      response=client2.execute(new HttpGet(SessionOperationServlet.createSetURI(baseURL1,"a","2")));
      try {
        checkResponseForHeader(response,SessionOperationServlet.SESSION_ID);
        Assert.assertFalse(response.containsHeader(SessionOperationServlet.ACTIVATED_SESSIONS));
        passivated=response.containsHeader(SessionOperationServlet.PASSIVATED_SESSIONS);
        session2=response.getFirstHeader(SessionOperationServlet.SESSION_ID).getValue();
      }
  finally {
        HttpClientUtils.closeQuietly(response);
      }
      Thread.yield();
      now=System.currentTimeMillis();
    }
    Assert.assertTrue(passivated);
    Assert.assertEquals(session1,response.getFirstHeader(SessionOperationServlet.PASSIVATED_SESSIONS).getValue());
    now=System.currentTimeMillis();
    start=now;
    passivated=false;
    response=client1.execute(new HttpGet(SessionOperationServlet.createGetURI(baseURL1,"a")));
    try {
      checkResponseForHeader(response,SessionOperationServlet.RESULT);
      Assert.assertEquals("1",response.getFirstHeader(SessionOperationServlet.RESULT).getValue());
      checkResponseForHeader(response,SessionOperationServlet.ACTIVATED_SESSIONS);
      passivated=response.containsHeader(SessionOperationServlet.PASSIVATED_SESSIONS);
      Assert.assertEquals(session1,response.getFirstHeader(SessionOperationServlet.ACTIVATED_SESSIONS).getValue());
    }
  finally {
      HttpClientUtils.closeQuietly(response);
    }
    while (!passivated && ((now - start) < MAX_PASSIVATION_WAIT)) {
      response=client1.execute(new HttpGet(SessionOperationServlet.createGetURI(baseURL1,"a")));
      try {
        checkResponseForHeader(response,SessionOperationServlet.RESULT);
        Assert.assertEquals("1",response.getFirstHeader(SessionOperationServlet.RESULT).getValue());
        Assert.assertFalse(response.containsHeader(SessionOperationServlet.ACTIVATED_SESSIONS));
        passivated=response.containsHeader(SessionOperationServlet.PASSIVATED_SESSIONS);
      }
  finally {
        HttpClientUtils.closeQuietly(response);
      }
      Thread.yield();
      now=System.currentTimeMillis();
    }
    Assert.assertTrue(passivated);
    Assert.assertEquals(session2,response.getFirstHeader(SessionOperationServlet.PASSIVATED_SESSIONS).getValue());
    now=System.currentTimeMillis();
    start=now;
    passivated=false;
    response=client2.execute(new HttpGet(SessionOperationServlet.createGetURI(baseURL1,"a")));
    try {
      checkResponseForHeader(response,SessionOperationServlet.RESULT);
      Assert.assertEquals("2",response.getFirstHeader(SessionOperationServlet.RESULT).getValue());
      checkResponseForHeader(response,SessionOperationServlet.ACTIVATED_SESSIONS);
      passivated=response.containsHeader(SessionOperationServlet.PASSIVATED_SESSIONS);
      Assert.assertEquals(session2,response.getFirstHeader(SessionOperationServlet.ACTIVATED_SESSIONS).getValue());
    }
  finally {
      HttpClientUtils.closeQuietly(response);
    }
    while (!passivated && ((now - start) < MAX_PASSIVATION_WAIT)) {
      response=client2.execute(new HttpGet(SessionOperationServlet.createGetURI(baseURL1,"a")));
      try {
        checkResponseForHeader(response,SessionOperationServlet.RESULT);
        Assert.assertEquals("2",response.getFirstHeader(SessionOperationServlet.RESULT).getValue());
        Assert.assertFalse(response.containsHeader(SessionOperationServlet.ACTIVATED_SESSIONS));
        passivated=response.containsHeader(SessionOperationServlet.PASSIVATED_SESSIONS);
      }
  finally {
        HttpClientUtils.closeQuietly(response);
      }
      Thread.yield();
      now=System.currentTimeMillis();
    }
    Assert.assertTrue(passivated);
    Assert.assertEquals(session1,response.getFirstHeader(SessionOperationServlet.PASSIVATED_SESSIONS).getValue());
  }
 }
