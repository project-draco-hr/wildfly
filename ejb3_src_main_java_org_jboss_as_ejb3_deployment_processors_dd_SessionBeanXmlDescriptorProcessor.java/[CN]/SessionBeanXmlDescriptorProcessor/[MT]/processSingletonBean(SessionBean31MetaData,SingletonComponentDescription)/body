{
  Boolean initOnStartup=singletonBeanMetaData.isInitOnStartup();
  if (initOnStartup != null && initOnStartup.booleanValue() == true) {
    singletonComponentDescription.initOnStartup();
  }
  LockType lockType=singletonBeanMetaData.getLockType();
  singletonComponentDescription.setBeanLevelLockType(lockType);
  ConcurrentMethodsMetaData concurrentMethods=singletonBeanMetaData.getConcurrentMethods();
  if (concurrentMethods != null) {
    for (    ConcurrentMethodMetaData concurrentMethod : concurrentMethods) {
      LockType methodLockType=concurrentMethod.getLockType();
      EJBMethodDescription method=this.getEJBMethodDescription(concurrentMethod.getMethod());
      singletonComponentDescription.setLockType(methodLockType,method);
    }
  }
  ConcurrencyManagementType concurrencyManagementType=singletonBeanMetaData.getConcurrencyManagementType();
  if (concurrencyManagementType == ConcurrencyManagementType.BEAN) {
    singletonComponentDescription.beanManagedConcurrency();
  }
 else {
    singletonComponentDescription.containerManagedConcurrency();
  }
  AccessTimeoutMetaData accessTimeoutMetaData=singletonBeanMetaData.getAccessTimeout();
  if (accessTimeoutMetaData != null) {
    final long timeout=accessTimeoutMetaData.getTimeout();
    final TimeUnit unit=accessTimeoutMetaData.getUnit();
    AccessTimeout accessTimeout=new AccessTimeout(){
      @Override public long value(){
        return timeout;
      }
      @Override public TimeUnit unit(){
        return unit;
      }
      @Override public Class<? extends Annotation> annotationType(){
        return AccessTimeout.class;
      }
    }
;
    singletonComponentDescription.setBeanLevelAccessTimeout(accessTimeout);
  }
}
