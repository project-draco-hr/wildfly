{
  DeploymentUnit deploymentUnit=phaseContext.getDeploymentUnit();
  final EjbJarDescription ejbJarDescription=deploymentUnit.getAttachment(EjbDeploymentAttachmentKeys.EJB_JAR_DESCRIPTION);
  final EEModuleDescription moduleDescription=deploymentUnit.getAttachment(org.jboss.as.ee.component.Attachments.EE_MODULE_DESCRIPTION);
  final String applicationName=moduleDescription.getApplicationName();
  final String beanName=sessionBean.getName();
  final SessionBeanComponentDescription sessionBeanDescription=(SessionBeanComponentDescription)moduleDescription.getComponentByName(beanName);
  sessionBeanDescription.setDeploymentDescriptorEnvironment(new DeploymentDescriptorEnvironment("java:comp/env/",sessionBean));
  sessionBeanDescription.setMappedName(sessionBean.getMappedName());
  BusinessLocalsMetaData businessLocals=sessionBean.getBusinessLocals();
  if (businessLocals != null && !businessLocals.isEmpty()) {
    sessionBeanDescription.addLocalBusinessInterfaceViews(businessLocals);
  }
  BusinessRemotesMetaData businessRemotes=sessionBean.getBusinessRemotes();
  if (businessRemotes != null && !businessRemotes.isEmpty()) {
    sessionBeanDescription.addRemoteBusinessInterfaceViews(businessRemotes);
  }
  if (sessionBean.getTransactionType() != null) {
    sessionBeanDescription.setTransactionManagementType(sessionBean.getTransactionType());
  }
  if (sessionBean.getTransactionType() != TransactionManagementType.BEAN) {
    ContainerTransactionsMetaData containerTransactions=sessionBean.getContainerTransactions();
    if (containerTransactions != null && !containerTransactions.isEmpty()) {
      for (      ContainerTransactionMetaData containerTx : containerTransactions) {
        TransactionAttributeType txAttr=containerTx.getTransAttribute();
        MethodsMetaData methods=containerTx.getMethods();
        for (        MethodMetaData method : methods) {
          String methodName=method.getMethodName();
          MethodIntf methodIntf=this.getMethodIntf(method.getMethodIntf());
          if (methodName.equals("*")) {
            sessionBeanDescription.setTransactionAttribute(methodIntf,txAttr);
          }
 else {
            MethodParametersMetaData methodParams=method.getMethodParams();
            sessionBeanDescription.setTransactionAttribute(methodIntf,txAttr,methodName,this.getMethodParams(methodParams));
          }
        }
      }
    }
  }
  this.processInterceptors(sessionBean,sessionBeanDescription);
  if (sessionBean instanceof SessionBean31MetaData) {
    this.processSessionBean31((SessionBean31MetaData)sessionBean,sessionBeanDescription);
  }
}
