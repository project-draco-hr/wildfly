{
  new SensitiveTargetAccessConstraintDefinition(new SensitivityClassification("play","security-realm",true,true,true));
  new ApplicationTypeAccessConstraintDefinition(new ApplicationTypeConfig("play","deployment",false));
  KernelServices kernelServices=createKernelServicesBuilder(TestModelType.STANDALONE).setXmlResource("standalone.xml").validateDescription().build();
  Assert.assertTrue(kernelServices.isSuccessfulBoot());
  String marshalled=kernelServices.getPersistedSubsystemXml();
  ModelTestUtils.compareXml(ModelTestUtils.readResource(this.getClass(),"standalone.xml"),marshalled);
  System.out.println(kernelServices.readWholeModel());
  ModelNode result=ModelTestUtils.checkOutcome(kernelServices.executeOperation(Util.getReadAttributeOperation(PathAddress.pathAddress(pathElement(CORE_SERVICE,MANAGEMENT),pathElement(ACCESS,AUTHORIZATION),pathElement(CONSTRAINT,SENSITIVITY_CLASSIFICATION),pathElement(TYPE,CORE),pathElement(CLASSIFICATION,SOCKET_CONFIG)),SensitivityResourceDefinition.CONFIGURED_REQUIRES_ADDRESSABLE.getName())));
  checkResultExists(result,new ModelNode());
  result=ModelTestUtils.checkOutcome(kernelServices.executeOperation(Util.getReadAttributeOperation(PathAddress.pathAddress(pathElement(CORE_SERVICE,MANAGEMENT),pathElement(ACCESS,AUTHORIZATION),pathElement(CONSTRAINT,SENSITIVITY_CLASSIFICATION),pathElement(TYPE,"play"),pathElement(CLASSIFICATION,SECURITY_REALM)),SensitivityResourceDefinition.CONFIGURED_REQUIRES_ADDRESSABLE.getName())));
  checkResultExists(result,new ModelNode(false));
  PathAddress vaultAddress=PathAddress.pathAddress(pathElement(CORE_SERVICE,MANAGEMENT),pathElement(ACCESS,AUTHORIZATION),pathElement(CONSTRAINT,VAULT_EXPRESSION));
  result=ModelTestUtils.checkOutcome(kernelServices.executeOperation(Util.getReadAttributeOperation(vaultAddress,SensitivityResourceDefinition.CONFIGURED_REQUIRES_ADDRESSABLE.getName())));
  checkResultExists(result,new ModelNode(false));
  ModelTestUtils.checkOutcome(kernelServices.executeOperation(Util.getUndefineAttributeOperation(vaultAddress,SensitivityResourceDefinition.CONFIGURED_REQUIRES_ADDRESSABLE.getName())));
  result=ModelTestUtils.checkOutcome(kernelServices.executeOperation(Util.getReadAttributeOperation(vaultAddress,SensitivityResourceDefinition.CONFIGURED_REQUIRES_ADDRESSABLE.getName())));
  checkResultExists(result,new ModelNode());
  PathAddress applicationAddress=PathAddress.pathAddress(pathElement(CORE_SERVICE,MANAGEMENT),pathElement(ACCESS,AUTHORIZATION),pathElement(CONSTRAINT,APPLICATION_CLASSIFICATION),pathElement(TYPE,"play"),pathElement(CLASSIFICATION,"deployment"));
  result=ModelTestUtils.checkOutcome(kernelServices.executeOperation(Util.getReadAttributeOperation(applicationAddress,ApplicationClassificationConfigResourceDefinition.CONFIGURED_APPLICATION.getName())));
  checkResultExists(result,new ModelNode(false));
  ModelTestUtils.checkOutcome(kernelServices.executeOperation(Util.getUndefineAttributeOperation(applicationAddress,ApplicationClassificationConfigResourceDefinition.CONFIGURED_APPLICATION.getName())));
  result=ModelTestUtils.checkOutcome(kernelServices.executeOperation(Util.getReadAttributeOperation(applicationAddress,ApplicationClassificationConfigResourceDefinition.CONFIGURED_APPLICATION.getName())));
  checkResultExists(result,new ModelNode());
}
