{
  try {
    final String processName=ManagedServer.getServerProcessName(serverName);
    final ManagedServer server=servers.get(processName);
    boolean canStart=true;
    if (server != null) {
      if (server.getState() != ServerState.STOPPED) {
        log.warnf("Received request to start server %s but it is not stopped; server state is ",serverName,server.getState());
        canStart=false;
      }
 else {
        server.removeServerProcess();
        servers.remove(processName);
      }
    }
    if (canStart) {
      startServer(serverName,managementSocketAddress);
    }
  }
 catch (  final Exception e) {
    log.errorf(e,"Failed to start server %s",serverName);
  }
  ServerStatus status=determineServerStatus(serverName);
  for (int i=0; i < 50; i++) {
    status=determineServerStatus(serverName);
    if (status == ServerStatus.STARTING) {
      try {
        Thread.sleep(100);
      }
 catch (      final InterruptedException e) {
        Thread.currentThread().interrupt();
        break;
      }
    }
 else {
      break;
    }
  }
  return status;
}
