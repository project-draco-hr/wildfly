{
  List<HostUpdateResult<?>> result;
  Map<AbstractHostModelUpdate<?>,AbstractServerModelUpdate<?>> serverByHost=new HashMap<AbstractHostModelUpdate<?>,AbstractServerModelUpdate<?>>();
  Map<AbstractServerModelUpdate<?>,HostUpdateResult<Object>> resultsByUpdate=new HashMap<AbstractServerModelUpdate<?>,HostUpdateResult<Object>>();
  for (int i=0; i < updates.size(); i++) {
    AbstractHostModelUpdate<?> hostUpdate=updates.get(i);
    AbstractServerModelUpdate<?> serverUpdate=hostUpdate.getServerModelUpdate();
    if (serverUpdate != null) {
      serverByHost.put(hostUpdate,serverUpdate);
      resultsByUpdate.put(serverUpdate,new HostUpdateResult<Object>());
    }
  }
  Map<ServerIdentity,List<AbstractServerModelUpdate<?>>> updatesByServer=getUpdatesByServer(updates,hostResults,serverByHost);
  for (  Map.Entry<ServerIdentity,List<AbstractServerModelUpdate<?>>> entry : updatesByServer.entrySet()) {
    ServerIdentity server=entry.getKey();
    List<AbstractServerModelUpdate<?>> serverUpdates=entry.getValue();
    List<UpdateResultHandlerResponse<?>> rsps=applyUpdatesToServer(server,serverUpdates,allowOverallRollback);
    for (int i=0; i < serverUpdates.size(); i++) {
      UpdateResultHandlerResponse<?> rsp=rsps.get(i);
      AbstractServerModelUpdate<?> serverUpdate=entry.getValue().get(i);
      HostUpdateResult<Object> hur=resultsByUpdate.get(serverUpdate);
      if (rsp.isCancelled()) {
        hur=hur.newWithAddedCancellation(server);
      }
 else       if (rsp.isTimedOut()) {
        hur=hur.newWithAddedTimeout(server);
      }
 else       if (rsp.isRolledBack()) {
        hur=hur.newWithAddedRollback(server);
      }
 else       if (rsp.getFailureResult() != null) {
        hur=hur.newWithAddedFailure(server,rsp.getFailureResult());
      }
 else {
        hur=hur.newWithAddedResult(server,rsp.getSuccessResult());
      }
      resultsByUpdate.put(serverUpdate,hur);
    }
  }
  result=new ArrayList<HostUpdateResult<?>>();
  for (  AbstractHostModelUpdate<?> hostUpdate : updates) {
    AbstractServerModelUpdate<?> serverUpdate=serverByHost.get(hostUpdate);
    HostUpdateResult<?> hur=resultsByUpdate.get(serverUpdate);
    if (hur == null) {
      hur=new HostUpdateResult<Object>();
    }
    result.add(hur);
  }
  return result;
}
