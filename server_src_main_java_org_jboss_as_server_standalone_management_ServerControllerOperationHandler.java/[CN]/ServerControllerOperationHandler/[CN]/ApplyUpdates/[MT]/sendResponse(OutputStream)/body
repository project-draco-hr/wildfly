{
  List<ResultHandler<?,Void>> results=new ArrayList<ResultHandler<?,Void>>(updates.size());
  final CountDownLatch latch=new CountDownLatch(1);
  final ServerUpdateController controller=new ServerUpdateController(serverController.getServerModel(),ServiceContainer.Factory.create(),executor,new ServerUpdateCommitHandler(){
    public void handleUpdateRollback(    ServerUpdateController controller,    Status priorStatus){
      latch.countDown();
    }
    public void handleUpdateCommit(    ServerUpdateController controller,    Status priorStatus){
      configurationPersister.configurationModified();
      latch.countDown();
    }
  }
,true,preventShutdown);
  boolean requiresRestart=false;
  for (  final AbstractServerModelUpdate<?> update : updates) {
    requiresRestart|=update.requiresRestart();
    results.add(addUpdate(update,controller));
  }
  controller.executeUpdates();
  try {
    latch.await();
  }
 catch (  Exception e) {
    throw new ManagementException("failed to execute updates",e);
  }
  final Marshaller marshaller=getMarshaller();
  marshaller.start(createByteOutput(output));
  marshaller.writeByte(StandaloneClientProtocol.PARAM_APPLY_UPDATES_RESULT_COUNT);
  marshaller.writeInt(results.size());
  for (  ResultHandler<?,Void> result : results) {
    marshaller.writeByte(StandaloneClientProtocol.PARAM_APPLY_UPDATE_RESULT);
    if (result.failure != null) {
      marshaller.writeByte(StandaloneClientProtocol.PARAM_APPLY_UPDATE_RESULT_EXCEPTION);
      marshaller.writeObject(result.failure);
    }
 else {
      marshaller.writeByte(StandaloneClientProtocol.APPLY_UPDATE_RESULT_SERVER_MODEL_SUCCESS);
      marshaller.writeObject(result.result);
    }
  }
  marshaller.finish();
  if (!preventShutdown && requiresRestart) {
    executor.execute(new Runnable(){
      public void run(){
        try {
          shutdownHandler.shutdownRequested();
        }
 catch (        Exception e) {
          log.warn(e);
        }
      }
    }
);
  }
}
