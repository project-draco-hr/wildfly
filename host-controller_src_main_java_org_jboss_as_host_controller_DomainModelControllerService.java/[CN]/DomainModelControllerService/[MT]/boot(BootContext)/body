{
  final ServiceTarget serviceTarget=context.getServiceTarget();
  boolean ok=false;
  boolean reachedServers=false;
  try {
    ServerInventoryCallbackService.install(serviceTarget);
    List<ModelNode> hostBootOps=hostControllerConfigurationPersister.load();
    ModelNode addHostOp=hostBootOps.remove(0);
    ok=boot(Collections.singletonList(addHostOp),true);
    ok=ok && boot(hostBootOps,true);
    final RunningMode currentRunningMode=runningModeControl.getRunningMode();
    if (ok) {
      Future<ServerInventory> inventoryFuture=ServerInventoryService.install(serviceTarget,this,runningModeControl,environment,extensionRegistry,hostControllerInfo.getNativeManagementInterface(),hostControllerInfo.getNativeManagementPort());
      if (!hostControllerInfo.isMasterDomainController() && !environment.isUseCachedDc()) {
        serverInventory=getFuture(inventoryFuture);
        if (hostControllerInfo.getRemoteDomainControllerHost() != null) {
          Future<MasterDomainControllerClient> clientFuture=RemoteDomainConnectionService.install(serviceTarget,getValue(),extensionRegistry,hostControllerInfo,environment.getProductConfig(),hostControllerInfo.getRemoteDomainControllerSecurityRealm(),remoteFileRepository,ignoredRegistry);
          MasterDomainControllerClient masterDomainControllerClient=getFuture(clientFuture);
          try {
            masterDomainControllerClient.register();
          }
 catch (          Exception e) {
            ROOT_LOGGER.cannotConnectToMaster(e);
            System.exit(ExitCodes.HOST_CONTROLLER_ABORT_EXIT_CODE);
          }
        }
 else         if (currentRunningMode != RunningMode.ADMIN_ONLY) {
          ROOT_LOGGER.noDomainControllerConfigurationProvided(currentRunningMode,CommandLineConstants.ADMIN_ONLY,RunningMode.ADMIN_ONLY);
          System.exit(ExitCodes.HOST_CONTROLLER_ABORT_EXIT_CODE);
        }
      }
 else {
        if (environment.isUseCachedDc()) {
          remoteFileRepository.setRemoteFileRepositoryExecutor(new RemoteDomainConnectionService.RemoteFileRepositoryExecutor(){
            @Override public File getFile(            String relativePath,            byte repoId,            HostFileRepository localFileRepository){
              return localFileRepository.getFile(relativePath);
            }
          }
);
        }
        ConfigurationPersister domainPersister=hostControllerConfigurationPersister.getDomainPersister();
        ok=boot(domainPersister.load(),false);
        if (!ok && runningModeControl.getRunningMode().equals(RunningMode.ADMIN_ONLY)) {
          ROOT_LOGGER.reportAdminOnlyDomainXmlFailure();
          ok=true;
        }
        if (ok) {
          ManagementRemotingServices.installManagementChannelServices(serviceTarget,ManagementRemotingServices.MANAGEMENT_ENDPOINT,new MasterDomainControllerOperationHandlerService(this,new HostControllerRegistrationHandler.OperationExecutor(){
            @Override public ModelNode execute(            final ModelNode operation,            final OperationMessageHandler handler,            final ModelController.OperationTransactionControl control,            final OperationAttachments attachments,            final OperationStepHandler step){
              return internalExecute(operation,handler,control,attachments,step);
            }
          }
),DomainModelControllerService.SERVICE_NAME,ManagementRemotingServices.DOMAIN_CHANNEL,null,null);
          serverInventory=getFuture(inventoryFuture);
        }
      }
    }
    if (ok) {
      ServerToHostOperationHandlerFactoryService.install(serviceTarget,ServerInventoryService.SERVICE_NAME,proxyExecutor,new ServerToHostProtocolHandler.OperationExecutor(){
        @Override public ModelNode execute(        ModelNode operation,        OperationMessageHandler handler,        ModelController.OperationTransactionControl control,        OperationAttachments attachments,        OperationStepHandler step){
          return internalExecute(operation,handler,control,attachments,step);
        }
      }
,this,expressionResolver);
      serviceTarget.addService(ServiceName.JBOSS.append("native-mgmt-startup"),Service.NULL).addDependency(ManagementRemotingServices.channelServiceName(ManagementRemotingServices.MANAGEMENT_ENDPOINT,ManagementRemotingServices.SERVER_CHANNEL)).setInitialMode(ServiceController.Mode.ACTIVE).install();
      serviceTarget.addService(ServiceName.JBOSS.append("http-mgmt-startup"),Service.NULL).addDependency(ServiceBuilder.DependencyType.OPTIONAL,HttpManagementService.SERVICE_NAME).setInitialMode(ServiceController.Mode.ACTIVE).install();
      reachedServers=true;
      if (currentRunningMode == RunningMode.NORMAL) {
        startServers();
      }
    }
  }
 catch (  Exception e) {
    ROOT_LOGGER.caughtExceptionDuringBoot(e);
    if (!reachedServers) {
      ok=false;
    }
  }
 finally {
    if (ok) {
      try {
        finishBoot();
      }
  finally {
        bootstrapListener.tick();
      }
    }
 else {
      ROOT_LOGGER.unsuccessfulBoot();
      System.exit(ExitCodes.HOST_CONTROLLER_ABORT_EXIT_CODE);
    }
  }
}
