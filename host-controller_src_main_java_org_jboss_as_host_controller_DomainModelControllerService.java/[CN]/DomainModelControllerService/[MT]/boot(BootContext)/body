{
  final ServiceTarget serviceTarget=context.getServiceTarget();
  try {
    super.boot(configurationPersister.load());
    NewServerInventoryService inventory=setupInventoryAndStartRemoting(serviceTarget);
    if (!hostControllerInfo.isMasterDomainController()) {
      NewRemoteDomainConnectionService service;
      try {
        service=new NewRemoteDomainConnectionService(getValue(),hostControllerInfo.getLocalHostName(),InetAddress.getByName(hostControllerInfo.getRemoteDomainControllerHost()),hostControllerInfo.getRemoteDomainControllertPort(),localFileRepository);
      }
 catch (      UnknownHostException e) {
        throw new RuntimeException(e);
      }
      serviceTarget.addService(MasterDomainControllerClient.SERVICE_NAME,service).setInitialMode(ServiceController.Mode.ACTIVE).install();
    }
 else {
      ConfigurationPersister domainPersister=configurationPersister.getDomainPersister();
      super.boot(domainPersister.load());
      RemotingServices.installChannelServices(serviceTarget,new NewMasterDomainControllerOperationHandlerService(this),DomainModelControllerService.SERVICE_NAME,RemotingServices.DOMAIN_CHANNEL,null,null);
    }
    Future<NewServerInventory> future=inventory.getInventoryFuture();
    try {
      serverInventory=future.get();
      startServers();
    }
 catch (    InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new RuntimeException(e);
    }
catch (    ExecutionException e) {
      throw new RuntimeException(e);
    }
  }
  finally {
    finishBoot();
  }
}
