{
  final ServiceTarget serviceTarget=context.getServiceTarget();
  try {
    super.boot(hostControllerConfigurationPersister.load());
    final RunningMode currentRunningMode=runningModeControl.getRunningMode();
    ManagementRemotingServices.installRemotingEndpoint(serviceTarget,ManagementRemotingServices.MANAGEMENT_ENDPOINT,hostControllerInfo.getLocalHostName(),EndpointService.EndpointType.MANAGEMENT,null,null);
    ManagementChannelRegistryService.addService(serviceTarget);
    Future<ServerInventory> inventoryFuture=ServerInventoryService.install(serviceTarget,this,runningModeControl,environment,hostControllerInfo.getNativeManagementInterface(),hostControllerInfo.getNativeManagementPort());
    if (!hostControllerInfo.isMasterDomainController() && !environment.isUseCachedDc()) {
      serverInventory=getFuture(inventoryFuture);
      if (hostControllerInfo.getRemoteDomainControllerHost() != null) {
        Future<MasterDomainControllerClient> clientFuture=RemoteDomainConnectionService.install(serviceTarget,getValue(),hostControllerInfo.getLocalHostName(),hostControllerInfo.getRemoteDomainControllerHost(),hostControllerInfo.getRemoteDomainControllertPort(),hostControllerInfo.getRemoteDomainControllerSecurityRealm(),remoteFileRepository);
        MasterDomainControllerClient masterDomainControllerClient=getFuture(clientFuture);
        try {
          masterDomainControllerClient.register();
        }
 catch (        IllegalStateException e) {
          ROOT_LOGGER.cannotConnectToMaster(e);
          System.exit(ExitCodes.HOST_CONTROLLER_ABORT_EXIT_CODE);
        }
      }
 else       if (currentRunningMode != RunningMode.ADMIN_ONLY) {
        ROOT_LOGGER.noDomainControllerConfigurationProvided(currentRunningMode,CommandLineConstants.ADMIN_ONLY,RunningMode.ADMIN_ONLY);
        System.exit(ExitCodes.HOST_CONTROLLER_ABORT_EXIT_CODE);
      }
    }
 else {
      ConfigurationPersister domainPersister=hostControllerConfigurationPersister.getDomainPersister();
      super.boot(domainPersister.load());
      ManagementRemotingServices.installManagementChannelServices(serviceTarget,ManagementRemotingServices.MANAGEMENT_ENDPOINT,new MasterDomainControllerOperationHandlerService(this),DomainModelControllerService.SERVICE_NAME,ManagementRemotingServices.DOMAIN_CHANNEL,null,null);
      serverInventory=getFuture(inventoryFuture);
    }
    ServerToHostOperationHandlerFactoryService.install(serviceTarget,ServerInventoryService.SERVICE_NAME,proxyExecutor,localFileRepository);
    NativeManagementAddHandler.installNativeManagementServices(serviceTarget,hostControllerInfo,null,null);
    if (hostControllerInfo.getHttpManagementInterface() != null) {
      HttpManagementAddHandler.installHttpManagementServices(currentRunningMode,serviceTarget,hostControllerInfo,environment,null);
    }
    if (currentRunningMode == RunningMode.NORMAL) {
      startServers();
    }
  }
  finally {
    try {
      finishBoot();
    }
  finally {
      bootstrapListener.tick();
    }
  }
}
