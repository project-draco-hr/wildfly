{
  final ServiceTarget serviceTarget=context.getServiceTarget();
  boolean ok=false;
  boolean reachedServers=false;
  try {
    ServerInventoryCallbackService.install(serviceTarget);
    List<ModelNode> hostBootOps=hostControllerConfigurationPersister.load();
    ModelNode addHostOp=hostBootOps.remove(0);
    ok=boot(Collections.singletonList(addHostOp),true);
    ok=ok && boot(hostBootOps,true);
    final RunningMode currentRunningMode=runningModeControl.getRunningMode();
    if (ok) {
      Future<ServerInventory> inventoryFuture=ServerInventoryService.install(serviceTarget,this,runningModeControl,environment,extensionRegistry,hostControllerInfo.getNativeManagementInterface(),hostControllerInfo.getNativeManagementPort());
      List<DiscoveryOption> discoveryOptions=hostControllerInfo.getRemoteDomainControllerDiscoveryOptions();
      if (hostControllerInfo.isMasterDomainController() && (discoveryOptions != null)) {
        DiscoveryService.install(serviceTarget,discoveryOptions,hostControllerInfo.getNativeManagementInterface(),hostControllerInfo.getNativeManagementPort(),hostControllerInfo.isMasterDomainController());
      }
      runPerformControllerInitialization(context);
      if (!hostControllerInfo.isMasterDomainController() && !environment.isUseCachedDc()) {
        establishServerInventory(inventoryFuture);
        boolean discoveryConfigured=(discoveryOptions != null) && !discoveryOptions.isEmpty();
        if (currentRunningMode != RunningMode.ADMIN_ONLY) {
          if (discoveryConfigured) {
            connectToDomainMaster(serviceTarget,currentRunningMode);
          }
 else {
            ROOT_LOGGER.noDomainControllerConfigurationProvided(currentRunningMode,CommandLineConstants.ADMIN_ONLY,RunningMode.ADMIN_ONLY);
            System.exit(ExitCodes.HOST_CONTROLLER_ABORT_EXIT_CODE);
          }
        }
 else {
switch (hostControllerInfo.getAdminOnlyDomainConfigPolicy()) {
case ALLOW_NO_CONFIG:
            break;
case FETCH_FROM_MASTER:
          if (discoveryConfigured) {
            connectToDomainMaster(serviceTarget,currentRunningMode);
          }
 else {
            ROOT_LOGGER.noDomainControllerConfigurationProvidedForAdminOnly(ModelDescriptionConstants.ADMIN_ONLY_POLICY,AdminOnlyDomainConfigPolicy.REQUIRE_LOCAL_CONFIG,CommandLineConstants.CACHED_DC,RunningMode.ADMIN_ONLY);
            System.exit(ExitCodes.HOST_CONTROLLER_ABORT_EXIT_CODE);
            break;
          }
        break;
case REQUIRE_LOCAL_CONFIG:
      ROOT_LOGGER.noAccessControlConfigurationAvailable(currentRunningMode,ModelDescriptionConstants.ADMIN_ONLY_POLICY,AdminOnlyDomainConfigPolicy.REQUIRE_LOCAL_CONFIG,CommandLineConstants.CACHED_DC,currentRunningMode);
    System.exit(ExitCodes.HOST_CONTROLLER_ABORT_EXIT_CODE);
  break;
default :
throw new IllegalStateException(hostControllerInfo.getAdminOnlyDomainConfigPolicy().toString());
}
}
}
 else {
if (environment.isUseCachedDc()) {
ROOT_LOGGER.usingCachedDC(CommandLineConstants.CACHED_DC,ConfigurationPersisterFactory.CACHED_DOMAIN_XML);
remoteFileRepository.setRemoteFileRepositoryExecutor(new RemoteDomainConnectionService.RemoteFileRepositoryExecutor(){
@Override public File getFile(String relativePath,byte repoId,HostFileRepository localFileRepository){
return localFileRepository.getFile(relativePath);
}
}
);
}
ConfigurationPersister domainPersister=hostControllerConfigurationPersister.getDomainPersister();
ok=boot(domainPersister.load(),false);
if (!ok && runningModeControl.getRunningMode().equals(RunningMode.ADMIN_ONLY)) {
ROOT_LOGGER.reportAdminOnlyDomainXmlFailure();
ok=true;
}
if (ok) {
InternalExecutor executor=new InternalExecutor();
ManagementRemotingServices.installManagementChannelServices(serviceTarget,ManagementRemotingServices.MANAGEMENT_ENDPOINT,new MasterDomainControllerOperationHandlerService(this,executor,executor,runtimeIgnoreTransformationRegistry,environment.getDomainTempDir()),DomainModelControllerService.SERVICE_NAME,ManagementRemotingServices.DOMAIN_CHANNEL,HostControllerService.HC_EXECUTOR_SERVICE_NAME,null,null);
establishServerInventory(inventoryFuture);
}
}
}
if (ok) {
ServerToHostOperationHandlerFactoryService.install(serviceTarget,ServerInventoryService.SERVICE_NAME,getExecutorServiceInjector().getValue(),new InternalExecutor(),this,expressionResolver,environment.getDomainTempDir());
serviceTarget.addService(ServiceName.JBOSS.append("native-mgmt-startup"),Service.NULL).addDependency(ManagementRemotingServices.channelServiceName(ManagementRemotingServices.MANAGEMENT_ENDPOINT,ManagementRemotingServices.SERVER_CHANNEL)).setInitialMode(ServiceController.Mode.ACTIVE).install();
serviceTarget.addService(ServiceName.JBOSS.append("http-mgmt-startup"),Service.NULL).addDependency(ServiceBuilder.DependencyType.OPTIONAL,UndertowHttpManagementService.SERVICE_NAME).setInitialMode(ServiceController.Mode.ACTIVE).install();
reachedServers=true;
if (currentRunningMode == RunningMode.NORMAL) {
startServers();
}
}
}
 catch (Exception e) {
ROOT_LOGGER.caughtExceptionDuringBoot(e);
if (!reachedServers) {
ok=false;
}
}
 finally {
if (ok) {
try {
finishBoot();
}
  finally {
bootstrapListener.printBootStatistics();
}
}
 else {
ROOT_LOGGER.unsuccessfulBoot();
System.exit(ExitCodes.HOST_CONTROLLER_ABORT_EXIT_CODE);
}
}
}
