{
  final ModelVersion version=ModelVersion.create(1,1,0);
  final ResourceTransformationDescriptionBuilder subsystemBuilder=TransformationDescriptionBuilder.Factory.createSubsystemInstance();
  final ResourceTransformationDescriptionBuilder stackBuilder=subsystemBuilder.addChildResource(StackResourceDefinition.WILDCARD_PATH);
  final ResourceTransformationDescriptionBuilder transportBuilder=stackBuilder.addChildResource(TransportResourceDefinition.PATH);
  transportBuilder.getAttributeBuilder().addRejectCheck(RejectAttributeChecker.SIMPLE_EXPRESSIONS,TransportResourceDefinition.SHARED).addRejectCheck(RejectAttributeChecker.SIMPLE_EXPRESSIONS,TransportResourceDefinition.PROPERTIES).end();
  final ResourceTransformationDescriptionBuilder transportPropertyBuilder=transportBuilder.addChildResource(PropertyResourceDefinition.WILDCARD_PATH);
  transportPropertyBuilder.getAttributeBuilder().addRejectCheck(RejectAttributeChecker.SIMPLE_EXPRESSIONS,PropertyResourceDefinition.VALUE).end();
  final ResourceTransformationDescriptionBuilder protocolBuilder=stackBuilder.addChildResource(ProtocolResourceDefinition.WILDCARD_PATH);
  protocolBuilder.getAttributeBuilder().addRejectCheck(RejectAttributeChecker.SIMPLE_EXPRESSIONS,ProtocolResourceDefinition.PROPERTIES).end();
  final ResourceTransformationDescriptionBuilder protocolPropertyBuilder=protocolBuilder.addChildResource(PropertyResourceDefinition.WILDCARD_PATH);
  protocolPropertyBuilder.getAttributeBuilder().addRejectCheck(RejectAttributeChecker.SIMPLE_EXPRESSIONS,PropertyResourceDefinition.VALUE).end();
  stackBuilder.rejectChildResource(RelayResourceDefinition.PATH);
  TransformationDescription.Tools.register(subsystemBuilder.build(),subsystem,version);
}
