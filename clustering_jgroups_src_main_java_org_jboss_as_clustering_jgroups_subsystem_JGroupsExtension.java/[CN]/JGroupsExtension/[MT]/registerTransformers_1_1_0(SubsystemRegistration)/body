{
  final ModelVersion version=ModelVersion.create(1,1,0);
  final RejectExpressionValuesTransformer transformer=new RejectExpressionValuesTransformer(PropertyResourceDefinition.VALUE,TransportResourceDefinition.PROPERTIES,ProtocolResourceDefinition.PROPERTIES,TransportResourceDefinition.SHARED);
  final ResourceTransformer resourceTransformer=transformer;
  final TransformersSubRegistration registration=subsystem.registerModelTransformers(version,ResourceTransformer.DEFAULT);
  final TransformersSubRegistration stack=registration.registerSubResource(StackResourceDefinition.STACK_PATH);
  final TransformersSubRegistration transport=stack.registerSubResource(TransportResourceDefinition.TRANSPORT_PATH,resourceTransformer);
  transport.registerOperationTransformer(ADD,transformer);
  transport.registerOperationTransformer(WRITE_ATTRIBUTE_OPERATION,transformer.getWriteAttributeTransformer());
  final TransformersSubRegistration transport_property=transport.registerSubResource(PropertyResourceDefinition.PROPERTY_PATH);
  transport_property.registerOperationTransformer(ADD,transformer);
  transport_property.registerOperationTransformer(WRITE_ATTRIBUTE_OPERATION,transformer.getWriteAttributeTransformer());
  final TransformersSubRegistration protocol=stack.registerSubResource(ProtocolResourceDefinition.PROTOCOL_PATH,resourceTransformer);
  protocol.registerOperationTransformer(ADD,transformer);
  final TransformersSubRegistration protocol_property=protocol.registerSubResource(PropertyResourceDefinition.PROPERTY_PATH);
  protocol_property.registerOperationTransformer(ADD,transformer);
  protocol_property.registerOperationTransformer(WRITE_ATTRIBUTE_OPERATION,transformer.getWriteAttributeTransformer());
  registerRelayTransformers(stack);
}
