{
  if (entry.getInjectionTargets() != null) {
    for (    ResourceInjectionTargetMetaData injectionTarget : entry.getInjectionTargets()) {
      final String injectionTargetClassName=injectionTarget.getInjectionTargetClass();
      final String injectionTargetName=injectionTarget.getInjectionTargetName();
      final AccessibleObject fieldOrMethod=getInjectionTarget(injectionTargetClassName,injectionTargetName,classLoader,deploymentReflectionIndex);
      final Class<?> injectionTargetType=fieldOrMethod instanceof Field ? ((Field)fieldOrMethod).getType() : ((Method)fieldOrMethod).getParameterTypes()[0];
      final String memberName=fieldOrMethod instanceof Field ? ((Field)fieldOrMethod).getName() : ((Method)fieldOrMethod).getName();
      if (classType != null) {
        if (!injectionTargetType.isAssignableFrom(classType)) {
          boolean ok=false;
          if (classType.isPrimitive()) {
            if (BOXED_TYPES.get(classType).equals(injectionTargetType)) {
              ok=true;
            }
          }
 else           if (injectionTargetType.isPrimitive()) {
            if (BOXED_TYPES.get(injectionTargetType).equals(classType)) {
              ok=true;
            }
          }
          if (!ok) {
            throw MESSAGES.invalidInjectionTarget(injectionTarget.getInjectionTargetName(),injectionTarget.getInjectionTargetClass(),classType);
          }
          classType=injectionTargetType;
        }
      }
 else {
        classType=injectionTargetType;
      }
      final InjectionTarget injectionTargetDescription=fieldOrMethod instanceof Field ? new FieldInjectionTarget(injectionTargetClassName,memberName,classType.getName()) : new MethodInjectionTarget(injectionTargetClassName,memberName,classType.getName());
      final ResourceInjectionConfiguration injectionConfiguration=new ResourceInjectionConfiguration(injectionTargetDescription,injectionSource);
      resourceInjectionTarget.addResourceInjection(injectionConfiguration);
    }
  }
  return classType;
}
