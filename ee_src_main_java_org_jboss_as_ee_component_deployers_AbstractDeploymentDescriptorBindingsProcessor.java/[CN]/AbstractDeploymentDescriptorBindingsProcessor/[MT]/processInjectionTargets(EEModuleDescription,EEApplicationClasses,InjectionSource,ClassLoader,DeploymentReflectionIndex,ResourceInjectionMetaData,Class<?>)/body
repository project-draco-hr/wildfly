{
  if (entry.getInjectionTargets() != null) {
    for (    ResourceInjectionTargetMetaData injectionTarget : entry.getInjectionTargets()) {
      final String injectionTargetClassName=injectionTarget.getInjectionTargetClass();
      final String injectionTargetName=injectionTarget.getInjectionTargetName();
      final AccessibleObject fieldOrMethod=getInjectionTarget(injectionTargetClassName,injectionTargetName,classLoader,deploymentReflectionIndex);
      final Class<?> injectionTargetType=fieldOrMethod instanceof Field ? ((Field)fieldOrMethod).getType() : ((Method)fieldOrMethod).getParameterTypes()[0];
      final String memberName=fieldOrMethod instanceof Field ? ((Field)fieldOrMethod).getName() : ((Method)fieldOrMethod).getName();
      if (classType != null) {
        if (!classType.isAssignableFrom(injectionTargetType)) {
          throw new DeploymentUnitProcessingException("Injection target " + injectionTarget.getInjectionTargetName() + " on class "+ injectionTarget.getInjectionTargetClass()+ " is not compatible with the type of injection");
        }
      }
 else {
        classType=injectionTargetType;
      }
      final InjectionTarget injectionTargetDescription=fieldOrMethod instanceof Field ? new FieldInjectionTarget(injectionTargetClassName,memberName,classType.getName()) : new MethodInjectionTarget(injectionTargetClassName,memberName,classType.getName());
      final ResourceInjectionConfiguration injectionConfiguration=new ResourceInjectionConfiguration(injectionTargetDescription,injectionSource);
      EEModuleClassDescription eeModuleClassDescription=applicationClasses.getOrAddClassByName(injectionTargetClassName);
      eeModuleClassDescription.getConfigurators().add(new InjectionConfigurator(injectionConfiguration));
    }
  }
  return classType;
}
