{
  validator.validate(operation);
  final Resource root=context.readResource(PathAddress.EMPTY_ADDRESS);
  String name=operation.require(NAME).asString();
  String toReplace=operation.require(TO_REPLACE).asString();
  if (name.equals(toReplace)) {
    throw operationFailed(String.format("Cannot use %s with the same value for parameters %s and %s. " + "Use %s to redeploy the same content or %s to replace content with a new version with the same name.",OPERATION_NAME,NAME,TO_REPLACE,DeploymentRedeployHandler.OPERATION_NAME,DeploymentFullReplaceHandler.OPERATION_NAME));
  }
  final PathElement deployPath=PathElement.pathElement(DEPLOYMENT,name);
  final PathElement replacePath=PathElement.pathElement(DEPLOYMENT,toReplace);
  if (!root.hasChild(replacePath)) {
    throw operationFailed(String.format("No deployment with name %s found",toReplace));
  }
  final Resource resource=context.readResource(PathAddress.pathAddress(replacePath));
  final ModelNode replaceNode=resource.getModel();
  final String replacedName=replaceNode.require(RUNTIME_NAME).asString();
  Resource deployResource=root.getChild(deployPath);
  if (deployResource == null) {
    if (!operation.hasDefined(CONTENT)) {
      throw operationFailed(String.format("No deployment with name %s found",name));
    }
    final ModelNode content=operation.require(CONTENT).clone();
    final ModelNode contentItemNode=content.require(0);
    if (contentItemNode.hasDefined(HASH)) {
      managedContentValidator.validate(contentItemNode);
      byte[] hash=contentItemNode.require(HASH).asBytes();
      if (!contentRepository.hasContent(hash))       throw createFailureException("No deployment content with hash %s is available in the deployment content repository.",HashUtil.bytesToHexString(hash));
    }
 else {
      unmanagedContentValidator.validate(contentItemNode);
    }
    final String runtimeName=operation.hasDefined(RUNTIME_NAME) ? operation.get(RUNTIME_NAME).asString() : replacedName;
    deployResource=context.createResource(PathAddress.pathAddress(deployPath));
    final ModelNode deployNode=deployResource.getModel();
    deployNode.get(RUNTIME_NAME).set(runtimeName);
    deployNode.get(CONTENT).set(content);
    final DeploymentHandlerUtil.ContentItem[] contents=getContents(deployNode.require(CONTENT));
    DeploymentHandlerUtil.replace(context,replaceNode,runtimeName,name,replacedName,contents);
  }
 else   if (deployResource.getModel().get(ENABLED).asBoolean()) {
    throw operationFailed(String.format("Deployment %s is already started",toReplace));
  }
  replaceNode.get(ENABLED).set(false);
  context.completeStep();
}
