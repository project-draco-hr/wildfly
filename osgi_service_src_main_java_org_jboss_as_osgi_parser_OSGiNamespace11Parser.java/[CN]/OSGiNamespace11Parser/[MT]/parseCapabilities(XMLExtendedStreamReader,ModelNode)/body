{
  List<ModelNode> nodes=new ArrayList<ModelNode>();
  requireNoAttributes(reader);
  while (reader.hasNext() && reader.nextTag() != XMLStreamConstants.END_ELEMENT) {
switch (Namespace.forUri(reader.getNamespaceURI())) {
case VERSION_1_1:
{
        final Element element=Element.forName(reader.getLocalName());
        if (element == Element.CAPABILITY) {
          String name=null;
          String start=null;
          final int count=reader.getAttributeCount();
          for (int i=0; i < count; i++) {
            requireNoNamespaceAttribute(reader,i);
            final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case NAME:
{
                name=reader.getAttributeValue(i);
                break;
              }
case STARTLEVEL:
{
              start=reader.getAttributeValue(i);
              break;
            }
default :
          throw unexpectedAttribute(reader,i);
      }
    }
    if (name == null)     throw missingRequired(reader,Collections.singleton(Attribute.NAME));
    ModelNode moduleNode=new ModelNode();
    moduleNode.get(OP).set(ADD);
    moduleNode.get(OP_ADDR).set(address).add(ModelConstants.CAPABILITY,name);
    if (start != null)     moduleNode.get(ModelConstants.STARTLEVEL).set(start);
    nodes.add(moduleNode);
    requireNoContent(reader);
    break;
  }
 else {
    throw unexpectedElement(reader);
  }
}
default :
throw unexpectedElement(reader);
}
}
return nodes;
}
