{
  final JndiName localContextName=managedBeanContextJndiName.append(resourceConfiguration.getLocalContextName());
  final String targetContextName=resourceConfiguration.getTargetContextName();
  final NamingLookupValue<T> lookupValue=new NamingLookupValue<T>(localContextName);
  final ResourceInjection<T> resourceInjection=getResourceInjection(resourceConfiguration,lookupValue);
  final ServiceName binderName=beanContextServiceName.append(localContextName.getLocalName());
  if (resourceInjection != null) {
    serviceBuilder.addDependency(binderName);
    serviceBuilder.addDependency(beanContextServiceName,Context.class,lookupValue.getContextInjector());
  }
  final LinkRef linkRef=new LinkRef(targetContextName.startsWith("java") ? targetContextName : ContextNames.MODULE_CONTEXT_NAME.append(targetContextName).getAbsoluteName());
  final boolean shouldBind;
  try {
    shouldBind=getNamespaceBindings(deploymentContext).addBinding(localContextName,linkRef);
  }
 catch (  DuplicateBindingException e) {
    throw new DeploymentUnitProcessingException("Unable to process managed bean resource.",e);
  }
  if (shouldBind) {
    final ResourceBinder<LinkRef> resourceBinder=new ResourceBinder<LinkRef>(localContextName,Values.immediateValue(linkRef));
    final ServiceBuilder<Object> binderServiceBuilder=serviceTarget.addService(binderName,resourceBinder);
    binderServiceBuilder.addDependency(beanContextServiceName,Context.class,resourceBinder.getContextInjector());
    if (targetContextName.startsWith("java:")) {
      binderServiceBuilder.addOptionalDependency(ResourceBinder.JAVA_BINDER.append(targetContextName));
    }
 else {
      binderServiceBuilder.addOptionalDependency(moduleContext.getContextServiceName().append(targetContextName));
    }
    binderServiceBuilder.install();
  }
  return resourceInjection;
}
