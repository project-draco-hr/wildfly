{
  final RuntimeAnnotationInformation<Integer> data=MethodAnnotationAggregator.runtimeAnnotationInformation(componentClass,applicationClasses,deploymentReflectionIndex,TransactionTimeout.class);
  for (  Map.Entry<String,List<Integer>> entry : data.getClassAnnotations().entrySet()) {
    if (!entry.getValue().isEmpty()) {
      final String className=methodIntf == null ? entry.getKey() : null;
      componentConfiguration.getTransactionTimeouts().setAttribute(methodIntf,className,entry.getValue().get(0));
    }
  }
  for (  Map.Entry<Method,List<Integer>> entry : data.getMethodAnnotations().entrySet()) {
    if (!entry.getValue().isEmpty()) {
      final MethodIdentifier method=MethodIdentifier.getIdentifierForMethod(entry.getKey());
      final String className=entry.getKey().getDeclaringClass().getName();
      componentConfiguration.getTransactionTimeouts().setAttribute(methodIntf,entry.getValue().get(0),className,method.getName(),method.getParameterTypes());
    }
  }
}
