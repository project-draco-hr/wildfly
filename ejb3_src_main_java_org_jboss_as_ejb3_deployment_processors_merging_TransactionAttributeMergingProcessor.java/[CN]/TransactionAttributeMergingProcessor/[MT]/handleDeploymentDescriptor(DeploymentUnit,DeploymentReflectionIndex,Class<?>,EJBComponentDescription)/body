{
  EjbJarMetaData ejbJarMetadata=deploymentUnit.getAttachment(EjbDeploymentAttachmentKeys.EJB_JAR_METADATA);
  if (ejbJarMetadata != null) {
    boolean wildcardAttributeSet=false;
    boolean wildcardTimeoutSet=false;
    ContainerTransactionMetaData global=null;
    final AssemblyDescriptorMetaData assemblyDescriptor=ejbJarMetadata.getAssemblyDescriptor();
    if (assemblyDescriptor != null) {
      final ContainerTransactionsMetaData globalTransactions=assemblyDescriptor.getContainerTransactionsByEjbName("*");
      if (globalTransactions != null) {
        if (globalTransactions.size() > 1) {
          throw EjbLogger.ROOT_LOGGER.mustOnlyBeSingleContainerTransactionElementWithWildcard();
        }
        global=globalTransactions.iterator().next();
        for (        MethodMetaData method : global.getMethods()) {
          if (!method.getMethodName().equals("*")) {
            throw EjbLogger.ROOT_LOGGER.wildcardContainerTransactionElementsMustHaveWildcardMethodName();
          }
        }
      }
      final ContainerTransactionsMetaData containerTransactions=assemblyDescriptor.getContainerTransactionsByEjbName(componentDescription.getEJBName());
      if (containerTransactions != null) {
        for (        final ContainerTransactionMetaData containerTx : containerTransactions) {
          final TransactionAttributeType txAttr=containerTx.getTransAttribute();
          final Integer timeout=timeout(containerTx);
          final MethodsMetaData methods=containerTx.getMethods();
          for (          final MethodMetaData method : methods) {
            final String methodName=method.getMethodName();
            final MethodIntf defaultMethodIntf=(componentDescription instanceof MessageDrivenComponentDescription) ? MethodIntf.MESSAGE_ENDPOINT : MethodIntf.BEAN;
            final MethodIntf methodIntf=this.getMethodIntf(method.getMethodIntf(),defaultMethodIntf);
            if (methodName.equals("*")) {
              if (txAttr != null) {
                wildcardAttributeSet=true;
                componentDescription.getTransactionAttributes().setAttribute(methodIntf,null,txAttr);
              }
              if (timeout != null) {
                wildcardTimeoutSet=true;
                componentDescription.getTransactionTimeouts().setAttribute(methodIntf,null,timeout);
              }
            }
 else {
              final MethodParametersMetaData methodParams=method.getMethodParams();
              if (methodParams == null) {
                if (txAttr != null)                 componentDescription.getTransactionAttributes().setAttribute(methodIntf,txAttr,methodName);
                if (timeout != null)                 componentDescription.getTransactionTimeouts().setAttribute(methodIntf,timeout,methodName);
              }
 else {
                if (txAttr != null)                 componentDescription.getTransactionAttributes().setAttribute(methodIntf,txAttr,null,methodName,this.getMethodParams(methodParams));
                if (timeout != null)                 componentDescription.getTransactionTimeouts().setAttribute(methodIntf,timeout,null,methodName,this.getMethodParams(methodParams));
              }
            }
          }
        }
      }
    }
    if (global != null) {
      if (!wildcardAttributeSet && global.getTransAttribute() != null) {
        for (        MethodMetaData method : global.getMethods()) {
          final MethodIntf defaultMethodIntf=(componentDescription instanceof MessageDrivenComponentDescription) ? MethodIntf.MESSAGE_ENDPOINT : MethodIntf.BEAN;
          final MethodIntf methodIntf=this.getMethodIntf(method.getMethodIntf(),defaultMethodIntf);
          componentDescription.getTransactionAttributes().setAttribute(methodIntf,null,global.getTransAttribute());
        }
      }
      final Integer timeout=timeout(global);
      if (!wildcardTimeoutSet && timeout != null) {
        for (        MethodMetaData method : global.getMethods()) {
          final MethodIntf defaultMethodIntf=(componentDescription instanceof MessageDrivenComponentDescription) ? MethodIntf.MESSAGE_ENDPOINT : MethodIntf.BEAN;
          final MethodIntf methodIntf=this.getMethodIntf(method.getMethodIntf(),defaultMethodIntf);
          componentDescription.getTransactionTimeouts().setAttribute(methodIntf,null,timeout);
        }
      }
    }
  }
}
