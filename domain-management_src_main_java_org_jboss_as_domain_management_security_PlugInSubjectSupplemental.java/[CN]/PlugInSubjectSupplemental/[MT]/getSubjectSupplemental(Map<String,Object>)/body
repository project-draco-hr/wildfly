{
  final String name=getPlugInName();
  final AuthorizationPlugIn ap=getPlugInLoader().loadAuthorizationPlugIn(name);
  if (ap instanceof PlugInConfigurationSupport) {
    PlugInConfigurationSupport pcf=(PlugInConfigurationSupport)ap;
    try {
      pcf.init(getConfiguration(),sharedState);
    }
 catch (    IOException e) {
      throw DomainManagementLogger.ROOT_LOGGER.unableToInitialisePlugIn(name,e.getMessage());
    }
  }
  return new SubjectSupplemental(){
    public void supplementSubject(    Subject subject) throws IOException {
      Set<RealmUser> users=subject.getPrincipals(RealmUser.class);
      Set<Principal> principals=subject.getPrincipals();
      for (      RealmUser current : users) {
        principals.addAll(loadGroups(current));
      }
    }
    private Set<RealmGroup> loadGroups(    final RealmUser user) throws IOException {
      Set<RealmGroup> response;
      String[] groups=ap.loadRoles(user.getName(),getRealmName());
      response=new HashSet<RealmGroup>(groups.length);
      for (      String current : groups) {
        RealmGroup newGroup=new RealmGroup(getRealmName(),current);
        SECURITY_LOGGER.tracef("Adding group '%s' for user '%s'.",newGroup,user);
        response.add(newGroup);
      }
      return response;
    }
  }
;
}
