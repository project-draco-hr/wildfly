{
  serviceContainer=context.getController().getServiceContainer();
  ManagedServiceContainer mbean=new ManagedServiceContainer(){
    @Override public List<String> listServices(){
      return getServiceList(null);
    }
    @Override public List<String> listServicesByMode(    String mode){
      if (mode == null)       return getServiceList(null);
      String pattern="mode " + Mode.valueOf(mode.trim().toUpperCase());
      return getServiceList(pattern);
    }
    @Override public List<String> listServicesByState(    String state){
      if (state == null)       return getServiceList(null);
      String pattern="state=" + State.valueOf(state.trim().toUpperCase());
      return getServiceList(pattern);
    }
    @Override public String getState(    String name){
      if (name == null)       throw new IllegalArgumentException("Null name");
      ServiceName serviceName=ServiceName.parse(name.trim());
      ServiceController<?> controller=serviceContainer.getService(serviceName);
      return controller != null ? controller.getState().toString() : null;
    }
    @Override public String getMode(    String name){
      if (name == null)       throw new IllegalArgumentException("Null name");
      ServiceName serviceName=ServiceName.parse(name.trim());
      ServiceController<?> controller=serviceContainer.getService(serviceName);
      return controller != null ? controller.getMode().toString() : null;
    }
    @Override public void setMode(    String name,    String mode){
      if (name == null)       throw new IllegalArgumentException("Null name");
      if (mode == null)       throw new IllegalArgumentException("Null mode");
      ServiceName serviceName=ServiceName.parse(name.trim());
      ServiceController<?> controller=serviceContainer.getService(serviceName);
      if (controller == null)       throw new IllegalArgumentException("Cannot obtain service: " + name);
      controller.setMode(Mode.valueOf(mode.trim().toUpperCase()));
    }
    private List<String> getServiceList(    String pattern){
      List<String> entries=new ArrayList<String>();
      ByteArrayOutputStream baos=new ByteArrayOutputStream();
      serviceContainer.dumpServices(new PrintStream(baos));
      BufferedReader reader=new BufferedReader(new StringReader(new String(baos.toByteArray())));
      try {
        String line=reader.readLine();
        while (line != null) {
          if (pattern == null || line.contains(pattern))           entries.add(line);
          line=reader.readLine();
        }
      }
 catch (      IOException ex) {
        log.errorf(ex,"Cannot process service list");
      }
      Collections.sort(entries);
      return entries;
    }
  }
;
  try {
    MBeanServer mbeanServer=injectedMBeanServer.getValue();
    mbeanServer.registerMBean(new StandardMBean(mbean,ManagedServiceContainer.class),ManagedServiceContainer.OBJECT_NAME);
  }
 catch (  Exception ex) {
    new StartException("Cannot register: " + ManagedServiceContainer.OBJECT_NAME,ex);
  }
}
