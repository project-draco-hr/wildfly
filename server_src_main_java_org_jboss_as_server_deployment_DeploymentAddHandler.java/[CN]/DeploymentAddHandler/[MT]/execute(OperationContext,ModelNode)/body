{
  validator.validate(operation);
  final ModelNode opAddr=operation.get(OP_ADDR);
  PathAddress address=PathAddress.pathAddress(opAddr);
  final String name=address.getLastElement().getValue();
  final String runtimeName=operation.hasDefined(RUNTIME_NAME) ? operation.get(RUNTIME_NAME).asString() : name;
  final ModelNode content=operation.require(CONTENT).clone();
  final DeploymentHandlerUtil.ContentItem contentItem;
  final ModelNode contentItemNode=content.require(0);
  if (contentItemNode.hasDefined(HASH)) {
    managedContentValidator.validate(contentItemNode);
    byte[] hash=contentItemNode.require(HASH).asBytes();
    contentItem=addFromHash(hash,name,context);
  }
 else   if (hasValidContentAdditionParameterDefined(contentItemNode)) {
    contentItem=addFromContentAdditionParameter(context,contentItemNode);
  }
 else {
    contentItem=addUnmanaged(contentItemNode);
  }
  final Resource resource=context.createResource(PathAddress.EMPTY_ADDRESS);
  ModelNode subModel=resource.getModel();
  subModel.get(NAME).set(name);
  subModel.get(RUNTIME_NAME).set(runtimeName);
  subModel.get(CONTENT).set(content);
  subModel.get(ENABLED).set(operation.has(ENABLED) && operation.get(ENABLED).asBoolean());
  subModel.get(PERSISTENT).set(!operation.hasDefined(PERSISTENT) || operation.get(PERSISTENT).asBoolean());
  if (subModel.get(ENABLED).asBoolean() && context.isNormalServer()) {
    DeploymentHandlerUtil.deploy(context,runtimeName,name,contentItem);
  }
  context.completeStep();
}
