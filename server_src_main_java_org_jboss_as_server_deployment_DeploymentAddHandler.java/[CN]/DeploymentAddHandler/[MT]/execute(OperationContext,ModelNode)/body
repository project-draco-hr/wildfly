{
  validator.validate(operation);
  final ModelNode opAddr=operation.get(OP_ADDR);
  PathAddress address=PathAddress.pathAddress(opAddr);
  final String name=address.getLastElement().getValue();
  final String runtimeName=operation.hasDefined(RUNTIME_NAME) ? operation.get(RUNTIME_NAME).asString() : name;
  final byte[] hash;
  final ModelNode content=operation.require(CONTENT).clone();
  final DeploymentHandlerUtil.ContentItem contentItem;
  final ModelNode contentItemNode=content.require(0);
  if (contentItemNode.hasDefined(HASH)) {
    managedContentValidator.validate(contentItemNode);
    hash=contentItemNode.require(HASH).asBytes();
    if (!contentRepository.hasContent(hash))     throw createFailureException("No deployment content with hash %s is available in the deployment content repository.",HashUtil.bytesToHexString(hash));
    contentItem=new DeploymentHandlerUtil.ContentItem(hash);
  }
 else   if (hasValidContentAdditionParameterDefined(contentItemNode)) {
    InputStream in=getInputStream(context,contentItemNode);
    try {
      try {
        hash=contentRepository.addContent(in);
      }
 catch (      IOException e) {
        throw createFailureException(e.toString());
      }
    }
  finally {
      StreamUtils.safeClose(in);
    }
    contentItemNode.clear();
    contentItemNode.get(HASH).set(hash);
    contentItem=new DeploymentHandlerUtil.ContentItem(hash);
  }
 else {
    unmanagedContentValidator.validate(contentItemNode);
    final String path=contentItemNode.require(PATH).asString();
    final String relativeTo=asString(contentItemNode,RELATIVE_TO);
    final boolean archive=contentItemNode.require(ARCHIVE).asBoolean();
    contentItem=new DeploymentHandlerUtil.ContentItem(path,relativeTo,archive);
  }
  final Resource resource=context.createResource(PathAddress.EMPTY_ADDRESS);
  ModelNode subModel=resource.getModel();
  subModel.get(NAME).set(name);
  subModel.get(RUNTIME_NAME).set(runtimeName);
  subModel.get(CONTENT).set(content);
  subModel.get(ENABLED).set(operation.has(ENABLED) && operation.get(ENABLED).asBoolean());
  subModel.get(PERSISTENT).set(!operation.hasDefined(PERSISTENT) || operation.get(PERSISTENT).asBoolean());
  if (subModel.get(ENABLED).asBoolean() && (context.getType() == OperationContext.Type.SERVER)) {
    DeploymentHandlerUtil.deploy(context,runtimeName,name,contentItem);
  }
  context.completeStep();
}
