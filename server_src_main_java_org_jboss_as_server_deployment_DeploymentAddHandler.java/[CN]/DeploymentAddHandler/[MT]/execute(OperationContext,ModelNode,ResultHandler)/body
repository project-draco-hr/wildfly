{
  validator.validate(operation);
  ModelNode opAddr=operation.get(OP_ADDR);
  PathAddress address=PathAddress.pathAddress(opAddr);
  String name=address.getLastElement().getValue();
  String runtimeName=operation.hasDefined(RUNTIME_NAME) ? operation.get(RUNTIME_NAME).asString() : name;
  final byte[] hash;
  final ModelNode content=operation.require(CONTENT);
  final ModelNode contentItem=content.require(0);
  if (contentItem.hasDefined(HASH)) {
    hash=contentItem.require(HASH).asBytes();
  }
 else   if (hasValidContentParameterDefined(contentItem)) {
    InputStream in=getContents(context,contentItem);
    try {
      try {
        hash=contentRepository.addContent(in);
      }
 catch (      IOException e) {
        throw createFailureException(e.toString());
      }
    }
  finally {
      StreamUtils.safeClose(in);
    }
  }
 else {
    throw createFailureException("None of the following parameters were defined %s.",VALID_DEPLOYMENT_PARAMETERS);
  }
  boolean isResultComplete=false;
  if (contentRepository.hasContent(hash)) {
    ModelNode subModel=context.getSubModel();
    subModel.get(NAME).set(name);
    subModel.get(RUNTIME_NAME).set(runtimeName);
    subModel.get(HASH).set(hash);
    subModel.get(ENABLED).set(operation.has(ENABLED) && operation.get(ENABLED).asBoolean());
    if (context.getRuntimeContext() != null && subModel.get(ENABLED).asBoolean()) {
      DeploymentHandlerUtil.deploy(subModel,context,resultHandler);
      isResultComplete=true;
    }
  }
 else {
    throw createFailureException("No deployment content with hash %s is available in the deployment content repository.",HashUtil.bytesToHexString(hash));
  }
  if (!isResultComplete) {
    resultHandler.handleResultComplete();
  }
  return new BasicOperationResult(Util.getResourceRemoveOperation(operation.get(OP_ADDR)));
}
