{
  final ApplicationClientMetaData metaData=deploymentUnit.getAttachment(AppClientAttachments.APPLICATION_CLIENT_META_DATA);
  if (metaData == null) {
    return;
  }
  AppClientEnvironmentRefsGroupMetaData environment=metaData.getEnvironmentRefsGroupMetaData();
  if (environment == null) {
    return;
  }
  final ClassIndex componentClass=classIndex.classIndex(component.getComponentClassName());
  LifecycleCallbacksMetaData postConstructs=environment.getPostConstructs();
  if (postConstructs != null) {
    for (    LifecycleCallbackMetaData postConstruct : postConstructs) {
      final InterceptorClassDescription.Builder builder=InterceptorClassDescription.builder();
      String methodName=postConstruct.getMethodName();
      MethodIdentifier methodIdentifier=MethodIdentifier.getIdentifier(void.class,methodName);
      builder.setPostConstruct(methodIdentifier);
      if (postConstruct.getClassName() == null || postConstruct.getClassName().isEmpty()) {
        final String className=ClassReflectionIndexUtil.findRequiredMethod(reflectionIndex,componentClass.getModuleClass(),methodIdentifier).getDeclaringClass().getName();
        component.addInterceptorMethodOverride(className,builder.build());
      }
 else {
        component.addInterceptorMethodOverride(postConstruct.getClassName(),builder.build());
      }
    }
  }
  LifecycleCallbacksMetaData preDestroys=environment.getPreDestroys();
  if (preDestroys != null) {
    for (    LifecycleCallbackMetaData preDestroy : preDestroys) {
      final InterceptorClassDescription.Builder builder=InterceptorClassDescription.builder();
      String methodName=preDestroy.getMethodName();
      MethodIdentifier methodIdentifier=MethodIdentifier.getIdentifier(void.class,methodName);
      builder.setPreDestroy(methodIdentifier);
      if (preDestroy.getClassName() == null || preDestroy.getClassName().isEmpty()) {
        final String className=ClassReflectionIndexUtil.findRequiredMethod(reflectionIndex,componentClass.getModuleClass(),methodIdentifier).getDeclaringClass().getName();
        component.addInterceptorMethodOverride(className,builder.build());
      }
 else {
        component.addInterceptorMethodOverride(preDestroy.getClassName(),builder.build());
      }
    }
  }
}
