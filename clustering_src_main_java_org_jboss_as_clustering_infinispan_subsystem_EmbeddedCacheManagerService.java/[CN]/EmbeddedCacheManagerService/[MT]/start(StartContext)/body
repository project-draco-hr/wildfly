{
  EmbeddedCacheManagerDefaults defaults=this.configuration.getDefaults();
  GlobalConfiguration global=defaults.getGlobalConfiguration().clone();
  TransportConfiguration transport=this.configuration.getTransportConfiguration();
  if (transport != null) {
    Long timeout=transport.getLockTimeout();
    if (timeout != null) {
      global.setDistributedSyncTimeout(timeout.longValue());
    }
    String site=transport.getSite();
    if (site != null) {
      global.setSiteId(site);
    }
    String rack=transport.getRack();
    if (rack != null) {
      global.setRackId(rack);
    }
    String machine=transport.getMachine();
    if (machine != null) {
      global.setMachineId(machine);
    }
    String nodeName=transport.getEnvironment().getNodeName();
    global.setTransportNodeName(nodeName);
    global.setClusterName(String.format("%s-%s",nodeName,this.configuration.getName()));
    ChannelProvider.init(global,transport.getChannelFactory());
    Executor executor=transport.getExecutor();
    if (executor != null) {
      ExecutorProvider.initTransportExecutor(global,executor);
    }
  }
  global.setCacheManagerName(this.configuration.getName());
  Configuration defaultConfig=new Configuration();
  MBeanServer server=this.configuration.getMBeanServer();
  if (server != null) {
    global.setExposeGlobalJmxStatistics(true);
    global.setMBeanServerLookupInstance(new MBeanServerProvider(server));
    global.setJmxDomain(server.getDefaultDomain());
    defaultConfig.setExposeJmxStatistics(true);
  }
 else {
    global.setExposeGlobalJmxStatistics(false);
    defaultConfig.setExposeJmxStatistics(false);
  }
  Executor listenerExecutor=this.configuration.getListenerExecutor();
  if (listenerExecutor != null) {
    ExecutorProvider.initListenerExecutor(global,listenerExecutor);
  }
  ScheduledExecutorService evictionExecutor=this.configuration.getEvictionExecutor();
  if (evictionExecutor != null) {
    ExecutorProvider.initEvictionExecutor(global,evictionExecutor);
  }
  ScheduledExecutorService replicationQueueExecutor=this.configuration.getReplicationQueueExecutor();
  if (replicationQueueExecutor != null) {
    ExecutorProvider.initReplicationQueueExecutor(global,replicationQueueExecutor);
  }
  TransactionManager transactionManager=this.configuration.getTransactionManager();
  if (transactionManager != null) {
    defaultConfig.setTransactionManagerLookup(new TransactionManagerProvider(transactionManager));
  }
  SwitchContext switchContext=switcher.getSwitchContext(this.getClass().getClassLoader());
  try {
    EmbeddedCacheManager manager=new DefaultCacheManager(global,defaultConfig,false);
    for (    Map.Entry<String,Configuration> entry : this.configuration.getConfigurations().entrySet()) {
      Configuration overrides=entry.getValue();
      Configuration configuration=defaults.getDefaultConfiguration(overrides.getCacheMode()).clone();
      configuration.applyOverrides(overrides);
      manager.defineConfiguration(entry.getKey(),configuration);
    }
    this.container=new DefaultEmbeddedCacheManager(manager,this.configuration.getDefaultCache());
    this.container.start();
  }
  finally {
    switchContext.reset();
  }
}
