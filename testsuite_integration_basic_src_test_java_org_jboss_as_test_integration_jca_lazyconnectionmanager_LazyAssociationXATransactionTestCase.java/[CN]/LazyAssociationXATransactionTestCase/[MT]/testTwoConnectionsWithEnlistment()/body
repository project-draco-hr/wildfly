{
  assertNotNull(lcf);
  assertNotNull(userTransaction);
  boolean status=true;
  userTransaction.begin();
  LazyConnection lc1=null;
  LazyConnection lc2=null;
  try {
    lc1=lcf.getConnection();
    assertTrue(lc1.isManagedConnectionSet());
    assertFalse(lc1.isEnlisted());
    assertTrue(lc1.enlist());
    assertTrue(lc1.isEnlisted());
    lc2=lcf.getConnection();
    assertTrue(lc2.isManagedConnectionSet());
    assertFalse(lc1.isManagedConnectionSet());
    assertTrue(lc2.closeManagedConnection());
    assertFalse(lc1.isManagedConnectionSet());
    assertFalse(lc2.isManagedConnectionSet());
    assertTrue(lc1.associate());
    assertTrue(lc1.isManagedConnectionSet());
    assertFalse(lc2.isManagedConnectionSet());
  }
 catch (  Throwable t) {
    logger.error(t.getMessage(),t);
    status=false;
    fail("Throwable:" + t.getMessage());
  }
 finally {
    if (lc1 != null) {
      lc1.close();
    }
    if (lc2 != null) {
      lc2.close();
    }
    if (status) {
      userTransaction.commit();
    }
 else {
      userTransaction.rollback();
    }
  }
}
