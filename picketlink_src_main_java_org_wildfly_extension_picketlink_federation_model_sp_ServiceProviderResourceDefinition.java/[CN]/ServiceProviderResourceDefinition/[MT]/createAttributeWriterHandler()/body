{
  List<SimpleAttributeDefinition> attributes=getAttributes();
  return new AbstractWriteAttributeHandler(attributes.toArray(new AttributeDefinition[attributes.size()])){
    @Override protected boolean applyUpdateToRuntime(    OperationContext context,    ModelNode operation,    String attributeName,    ModelNode resolvedValue,    ModelNode currentValue,    HandbackHolder handbackHolder) throws OperationFailedException {
      PathAddress pathAddress=PathAddress.pathAddress(operation.get(ModelDescriptionConstants.OP_ADDR));
      updateConfiguration(context,pathAddress,false);
      return false;
    }
    @Override protected void revertUpdateToRuntime(    OperationContext context,    ModelNode operation,    String attributeName,    ModelNode valueToRestore,    ModelNode valueToRevert,    Object handback) throws OperationFailedException {
      PathAddress pathAddress=PathAddress.pathAddress(operation.get(ModelDescriptionConstants.OP_ADDR));
      updateConfiguration(context,pathAddress,true);
    }
    private void updateConfiguration(    OperationContext context,    PathAddress pathAddress,    boolean rollback) throws OperationFailedException {
      String alias=pathAddress.getLastElement().getValue();
      ServiceRegistry serviceRegistry=context.getServiceRegistry(false);
      ServiceController<ServiceProviderService> serviceController=(ServiceController<ServiceProviderService>)serviceRegistry.getService(ServiceProviderService.createServiceName(alias));
      if (serviceController != null) {
        ServiceProviderService service=serviceController.getValue();
        ModelNode serviceProviderNode;
        if (!rollback) {
          serviceProviderNode=context.readResource(PathAddress.EMPTY_ADDRESS,false).getModel();
        }
 else {
          Resource rc=context.getOriginalRootResource().navigate(pathAddress);
          serviceProviderNode=rc.getModel();
        }
        service.setConfiguration(ServiceProviderAddHandler.toSPConfig(context,serviceProviderNode,alias));
      }
    }
  }
;
}
