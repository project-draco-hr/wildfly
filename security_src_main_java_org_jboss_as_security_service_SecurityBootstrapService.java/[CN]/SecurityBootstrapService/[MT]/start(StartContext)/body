{
  log.debugf("Starting SecurityBootstrapService");
  try {
    log.info("Picketbox version=" + org.picketbox.Version.VERSION);
    oldPolicy=Policy.getPolicy();
    String provider=SecurityActions.getSystemProperty(JACC_POLICY_PROVIDER,"org.jboss.security.jacc.DelegatingPolicy");
    Class<?> providerClass=SecurityActions.loadClass(provider);
    try {
      Class<?>[] ctorSig={Policy.class};
      Constructor<?> ctor=providerClass.getConstructor(ctorSig);
      Object[] ctorArgs={oldPolicy};
      jaccPolicy=(Policy)ctor.newInstance(ctorArgs);
    }
 catch (    NoSuchMethodException e) {
      log.debugf("Provider does not support ctor(Policy)");
      try {
        jaccPolicy=(Policy)providerClass.newInstance();
      }
 catch (      Exception e1) {
        throw new StartException(e1);
      }
    }
catch (    Exception e) {
      throw new StartException(e);
    }
    Policy.setPolicy(jaccPolicy);
    jaccPolicy.refresh();
    SubjectPolicyContextHandler handler=new SubjectPolicyContextHandler();
    PolicyContext.registerHandler(SecurityConstants.SUBJECT_CONTEXT_KEY,handler,true);
    CallbackHandlerPolicyContextHandler chandler=new CallbackHandlerPolicyContextHandler();
    PolicyContext.registerHandler(SecurityConstants.CALLBACK_HANDLER_KEY,chandler,true);
    ClassLoaderLocatorFactory.set(new ModuleClassLoaderLocator());
  }
 catch (  Exception e) {
    throw new StartException(e);
  }
}
