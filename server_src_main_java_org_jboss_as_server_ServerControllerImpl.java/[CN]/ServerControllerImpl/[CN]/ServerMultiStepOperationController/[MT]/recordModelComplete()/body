{
  if (isModelUpdated()) {
    updateModelAndPersist();
  }
  if (runtimeTasks.size() > 0) {
    RuntimeTaskContext rtc=new RuntimeTaskContext(){
      @Override public ServiceTarget getServiceTarget(){
        return serviceTarget;
      }
      @Override public ServiceRegistry getServiceRegistry(){
        return serviceRegistry;
      }
    }
;
    for (int i=0; i < steps.size(); i++) {
      Integer id=Integer.valueOf(i);
      RuntimeTask runtimeTask=runtimeTasks.get(id);
      if (runtimeTask == null) {
        continue;
      }
      try {
        runtimeTask.execute(rtc);
      }
 catch (      OperationFailedException e) {
        stepResultHandlers.get(id).handleFailed(e.getFailureDescription());
      }
catch (      Throwable t) {
        stepResultHandlers.get(id).handleFailed(new ModelNode().set(t.toString()));
      }
    }
  }
  if (state.getReference() != State.STARTING && !(resultHandler instanceof StepResultHandler)) {
    overallFailure=serverStateMonitorListener.awaitUninterruptibly();
  }
  for (int i=0; i < steps.size(); i++) {
    Integer id=Integer.valueOf(i);
    StepResultHandler stepHandler=stepResultHandlers.get(id);
    if (!stepHandler.isTerminalState()) {
      stepHandler.handleResultComplete();
    }
  }
  if (!hasFailures() && overallFailure != null && !(resultHandler instanceof StepResultHandler)) {
    hasFailures=true;
  }
  modelComplete.set(true);
  processComplete();
}
