{
synchronized (resultsNode) {
    for (int i=0; i < steps.size(); i++) {
      String stepKey=getStepKey(i);
      ModelNode stepResult=resultsNode.get(stepKey);
      if (stepResult.hasDefined(OUTCOME) && !CANCELLED.equals(stepResult.get(OUTCOME).asString())) {
        ModelNode rollbackStepOutcome=null;
        ModelNode rollbackStepResult=null;
        String rollbackKey=rollbackStepNames.get(Integer.valueOf(i));
        if (rollbackKey != null) {
          rollbackStepResult=rollbackResult.get(rollbackKey);
          rollbackStepOutcome=rollbackStepResult.isDefined() ? rollbackStepResult.get(OUTCOME) : null;
        }
        if (rollbackStepOutcome == null || !rollbackStepOutcome.isDefined()) {
          stepResult.get(ROLLED_BACK).set(false);
          stepResult.get(ROLLBACK_FAILURE_DESCRIPTION).set(new ModelNode().set("No compensating operations was available"));
        }
 else         if (CANCELLED.equals(rollbackStepOutcome.asString())) {
          stepResult.get(ROLLED_BACK).set(false);
          stepResult.get(ROLLBACK_FAILURE_DESCRIPTION).set(new ModelNode().set("Execution of the compensating operation was cancelled"));
        }
 else         if (SUCCESS.equals(rollbackStepOutcome.asString())) {
          stepResult.get(ROLLED_BACK).set(true);
        }
 else {
          stepResult.get(ROLLED_BACK).set(false);
          ModelNode rollbackFailureCause=rollbackStepResult.get(FAILURE_DESCRIPTION);
          if (!rollbackFailureCause.isDefined()) {
            rollbackFailureCause=new ModelNode().set("Compensating operation was reverted due to failure of other compensating operations");
          }
          stepResult.get(ROLLBACK_FAILURE_DESCRIPTION).set(rollbackFailureCause);
        }
      }
    }
  }
  super.handleFailures();
}
