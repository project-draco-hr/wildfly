{
  int tick=busyServiceCount.decrementAndGet();
  if (tick == 0) {
synchronized (this) {
      notifyAll();
      final Map<ServiceName,Set<ServiceName>> missingDeps=new HashMap<ServiceName,Set<ServiceName>>();
      for (      ServiceController<?> controller : servicesWithMissingDeps) {
        for (        ServiceName missing : controller.getImmediateUnavailableDependencies()) {
          if (!missingDeps.containsKey(missing)) {
            missingDeps.put(missing,new HashSet<ServiceName>());
          }
          missingDeps.get(missing).add(controller.getName());
        }
      }
      final Set<ServiceName> previousMissing=previousMissingDeps.keySet();
      final Set<ServiceName> noLongerMissing=new TreeSet<ServiceName>();
      for (      ServiceName name : previousMissing) {
        if (!missingDeps.containsKey(name)) {
          noLongerMissing.add(name);
        }
      }
      final Map<ServiceName,Set<ServiceName>> newlyMissing=new TreeMap<ServiceName,Set<ServiceName>>();
      newlyMissing.clear();
      for (      Map.Entry<ServiceName,Set<ServiceName>> entry : missingDeps.entrySet()) {
        if (!previousMissing.contains(entry.getKey())) {
          newlyMissing.put(entry.getKey(),entry.getValue());
        }
      }
      previousMissingDeps=missingDeps;
      latestSettledFailedControllers.clear();
      latestSettledFailedControllers.putAll(failedControllers);
      final StringBuilder msg=new StringBuilder();
      msg.append("Service status report\n");
      boolean print=false;
      if (!newlyMissing.isEmpty()) {
        print=true;
        msg.append("   New missing/unsatisfied dependencies:\n");
        for (        Map.Entry<ServiceName,Set<ServiceName>> entry : newlyMissing.entrySet()) {
          final ServiceName name=entry.getKey();
          ServiceController<?> controller=serviceRegistry.getService(name);
          if (controller == null) {
            msg.append("      ").append(name).append(" (missing)");
          }
 else {
            msg.append("      ").append(name).append(" (unavailable)");
          }
          msg.append(" required by [");
          Iterator<ServiceName> it=entry.getValue().iterator();
          while (it.hasNext()) {
            ServiceName requiring=it.next();
            msg.append(requiring);
            if (it.hasNext()) {
              msg.append(", ");
            }
          }
          msg.append("]");
          msg.append('\n');
        }
      }
      if (!noLongerMissing.isEmpty()) {
        print=true;
        msg.append("   Newly corrected services:\n");
        for (        ServiceName name : noLongerMissing) {
          ServiceController<?> controller=serviceRegistry.getService(name);
          if (controller == null) {
            msg.append("      ").append(name).append(" (no longer required)\n");
          }
 else {
            msg.append("      ").append(name).append(" (now available)\n");
          }
        }
      }
      if (!failedControllers.isEmpty()) {
        print=true;
        msg.append("  Services which failed to start:\n");
        for (        Map.Entry<ServiceController<?>,String> entry : failedControllers.entrySet()) {
          msg.append("      ").append(entry.getKey().getName()).append(": ").append(entry.getValue()).append('\n');
        }
        failedControllers.clear();
      }
      if (print) {
        log.info(msg);
      }
    }
  }
}
