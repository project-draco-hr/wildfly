{
  ManagementResourceRegistration registration=parentRegistration.registerSubModel(this);
  ResourceDescriptor descriptor=new ResourceDescriptor(this.getResourceDescriptionResolver()).addCapabilities(Capability.class);
  ResourceServiceHandler handler=new ForkServiceHandler(this.builderFactory);
  new AddStepHandler(descriptor,handler).register(registration);
  new RemoveStepHandler(descriptor,handler){
    @Override protected void performRemove(    OperationContext context,    ModelNode operation,    ModelNode model) throws OperationFailedException {
      super.performRemove(context,operation,model);
      if (ForkResourceDefinition.this.allowRuntimeOnlyRegistration && (context.getRunningMode() == RunningMode.NORMAL)) {
        Resource resource=context.readResource(PathAddress.EMPTY_ADDRESS);
        for (        ResourceEntry entry : resource.getChildren(ProtocolResourceDefinition.WILDCARD_PATH.getKey())) {
          context.removeResource(PathAddress.pathAddress(entry.getPathElement()));
        }
        context.getResourceRegistrationForUpdate().unregisterOverrideModel(context.getCurrentAddressValue());
      }
    }
  }
.register(registration);
  new ForkProtocolResourceDefinition(this.builderFactory,this.allowRuntimeOnlyRegistration).register(registration);
}
