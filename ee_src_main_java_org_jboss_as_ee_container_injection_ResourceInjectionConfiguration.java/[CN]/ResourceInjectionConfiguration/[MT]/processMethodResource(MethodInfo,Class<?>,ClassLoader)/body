{
  final String methodName=methodInfo.name();
  if (!methodName.startsWith("set") || methodInfo.args().length != 1) {
    throw new IllegalArgumentException("@Resource injection target is invalid.  Only setter methods are allowed: " + methodInfo);
  }
  final Class<?> argClass;
  try {
    argClass=beanClassLoader.loadClass(methodInfo.args()[0].name().toString());
  }
 catch (  ClassNotFoundException e) {
    throw new IllegalArgumentException("Failed to load " + owningClass.getName() + "."+ methodName+ "'s argument type "+ methodInfo.args()[0].name(),e);
  }
  final Method method;
  try {
    method=owningClass.getMethod(methodName,argClass);
    method.setAccessible(true);
  }
 catch (  NoSuchMethodException e) {
    throw new IllegalArgumentException("Failed to get method '" + methodName + "' from class '"+ owningClass+ "'",e);
  }
  final Resource resource=method.getAnnotation(Resource.class);
  if (resource != null) {
    final String contextNameSuffix=methodName.substring(3,4).toLowerCase() + methodName.substring(4);
    final Class<?> injectionType=resource.type().equals(Object.class) ? argClass : resource.type();
    final String localContextName=resource.name().isEmpty() ? contextNameSuffix : resource.name();
    return new ResourceInjectionConfiguration(methodName,method,ResourceInjectionConfiguration.TargetType.METHOD,injectionType,localContextName,getTargetContextName(resource,contextNameSuffix,injectionType));
  }
  return null;
}
