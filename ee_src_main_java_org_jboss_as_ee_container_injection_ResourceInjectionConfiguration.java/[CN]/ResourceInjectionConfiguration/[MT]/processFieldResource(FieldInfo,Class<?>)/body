{
  final String fieldName=fieldInfo.name();
  final Field field;
  try {
    field=beanClass.getDeclaredField(fieldName);
    field.setAccessible(true);
  }
 catch (  NoSuchFieldException e) {
    throw new IllegalArgumentException("Failed to get field '" + fieldName + "' from class '"+ beanClass+ "'",e);
  }
  final Resource resource=field.getAnnotation(Resource.class);
  if (resource != null) {
    final String localContextName=resource.name().isEmpty() ? fieldName : resource.name();
    final Class<?> injectionType=resource.type().equals(Object.class) ? field.getType() : resource.type();
    return new ResourceInjectionConfiguration(fieldName,field,ResourceInjectionConfiguration.TargetType.FIELD,injectionType,localContextName,getTargetContextName(resource,fieldName,injectionType));
  }
  return null;
}
