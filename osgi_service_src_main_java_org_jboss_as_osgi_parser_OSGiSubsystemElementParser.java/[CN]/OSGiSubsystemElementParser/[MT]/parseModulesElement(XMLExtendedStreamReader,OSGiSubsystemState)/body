{
  ParseUtils.requireNoAttributes(reader);
  Set<ModuleIdentifier> identifiers=new HashSet<ModuleIdentifier>();
  while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
switch (Namespace.forUri(reader.getNamespaceURI())) {
case OSGI_1_0:
{
        final Element element=Element.forName(reader.getLocalName());
        if (element == Element.MODULE) {
          ModuleIdentifier identifier=null;
          boolean start=false;
          final int count=reader.getAttributeCount();
          for (int i=0; i < count; i++) {
            if (reader.getAttributeNamespace(i) != null) {
              throw ParseUtils.unexpectedAttribute(reader,i);
            }
            final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case IDENTIFIER:
{
                identifier=ModuleIdentifier.fromString(reader.getAttributeValue(i));
                break;
              }
case START:
{
              start=Boolean.parseBoolean(reader.getAttributeValue(i));
              break;
            }
default :
          throw ParseUtils.unexpectedAttribute(reader,i);
      }
    }
    if (identifier == null)     throw ParseUtils.missingRequired(reader,Collections.singleton(Attribute.IDENTIFIER));
    if (identifiers.contains(identifier))     throw new XMLStreamException(element.getLocalName() + " already declared",reader.getLocation());
    subsystemState.addModule(new OSGiModule(identifier,start));
    identifiers.add(identifier);
    ParseUtils.requireNoContent(reader);
  }
 else {
    throw ParseUtils.unexpectedElement(reader);
  }
  break;
}
default :
throw ParseUtils.unexpectedElement(reader);
}
}
if (subsystemState.getModules().size() == 0) {
throw ParseUtils.missingRequiredElement(reader,Collections.singleton(Element.MODULE));
}
}
