{
  final DeploymentUnit deploymentUnit=context.getDeploymentUnit();
  final DeploymentReflectionIndex deploymentReflectionIndex=deploymentUnit.getAttachment(Attachments.REFLECTION_INDEX);
  configuration.addClientPostConstructInterceptor(org.jboss.invocation.Interceptors.getTerminalInterceptorFactory(),InterceptorOrder.ClientPostConstruct.TERMINAL_INTERCEPTOR);
  configuration.addClientPreDestroyInterceptor(org.jboss.invocation.Interceptors.getTerminalInterceptorFactory(),InterceptorOrder.ClientPreDestroy.TERMINAL_INTERCEPTOR);
  final boolean localHome=EjbHomeViewDescription.class.cast(description).getMethodIntf() == MethodIntf.LOCAL_HOME;
  final EntityBeanComponentDescription componentDescription=(EntityBeanComponentDescription)componentConfiguration.getComponentDescription();
  final EJBViewDescription createdView=localHome ? componentDescription.getEjbLocalView() : componentDescription.getEjbRemoteView();
  final DeploymentClassIndex classIndex=deploymentUnit.getAttachment(Attachments.CLASS_INDEX);
  for (  final Method method : configuration.getProxyFactory().getCachedMethods()) {
    configuration.addClientInterceptor(method,ViewDescription.CLIENT_DISPATCHER_INTERCEPTOR_FACTORY,InterceptorOrder.Client.CLIENT_DISPATCHER);
    if (method.getName().equals("equals") && method.getParameterTypes().length == 1 && method.getParameterTypes()[0] == Object.class) {
      configuration.addClientInterceptor(method,ComponentTypeIdentityInterceptorFactory.INSTANCE,InterceptorOrder.Client.EJB_EQUALS_HASHCODE);
    }
 else     if (method.getName().equals("hashCode") && method.getParameterTypes().length == 0) {
      configuration.addClientInterceptor(method,ComponentTypeIdentityInterceptorFactory.INSTANCE,InterceptorOrder.Client.EJB_EQUALS_HASHCODE);
    }
 else     if (method.getName().equals("toString") && method.getParameterTypes().length == 0) {
    }
 else     if (method.getName().startsWith("create")) {
      final Method ejbCreate=resolveEjbMethod("create","ejbCreate",componentDescription.getPrimaryKeyType(),componentConfiguration.getComponentClass(),deploymentReflectionIndex,method,componentConfiguration.getComponentName());
      final Method ejbPostCreate=resolveEjbMethod("create","ejbPostCreate",void.class.getName(),componentConfiguration.getComponentClass(),deploymentReflectionIndex,method,componentConfiguration.getComponentName());
      final EntityBeanHomeCreateInterceptorFactory factory=new EntityBeanHomeCreateInterceptorFactory(ejbCreate,ejbPostCreate);
      componentConfiguration.getStartDependencies().add(new DependencyConfigurator<ComponentStartService>(){
        @Override public void configureDependency(        final ServiceBuilder<?> serviceBuilder,        final ComponentStartService service) throws DeploymentUnitProcessingException {
          serviceBuilder.addDependency(createdView.getServiceName(),ComponentView.class,factory.getViewToCreate());
        }
      }
);
      configuration.addViewInterceptor(method,factory,InterceptorOrder.View.HOME_METHOD_INTERCEPTOR);
    }
 else     if (method.getName().startsWith("find")) {
      final Method ejbFind=resolveEjbFinderMethod(componentConfiguration.getComponentClass(),deploymentReflectionIndex,method,componentConfiguration.getComponentName(),componentDescription.getPersistenceType());
      final EntityBeanHomeFinderInterceptorFactory interceptorFactory=createHomeFindInterceptorFactory(ejbFind,localHome);
      componentConfiguration.getStartDependencies().add(new DependencyConfigurator<ComponentStartService>(){
        @Override public void configureDependency(        final ServiceBuilder<?> serviceBuilder,        final ComponentStartService service) throws DeploymentUnitProcessingException {
          serviceBuilder.addDependency(createdView.getServiceName(),ComponentView.class,interceptorFactory.getViewToCreate());
        }
      }
);
      configuration.addViewInterceptor(method,interceptorFactory,InterceptorOrder.View.COMPONENT_DISPATCHER);
    }
 else     if (method.getName().equals("remove") && method.getParameterTypes().length == 1 && method.getParameterTypes()[0] == Object.class) {
      final Method remove=resolveRemoveMethod(componentConfiguration.getComponentClass(),deploymentReflectionIndex,componentConfiguration.getComponentName());
      configuration.addViewInterceptor(method,createHomeRemoveInterceptorFactory(remove),InterceptorOrder.View.COMPONENT_DISPATCHER);
    }
 else     if (method.getName().equals("remove") && method.getParameterTypes().length == 1 && method.getParameterTypes()[0] == Handle.class) {
      configuration.addViewInterceptor(method,EntityBeanHomeRemoveByHandleInterceptorFactory.INSTANCE,InterceptorOrder.View.COMPONENT_DISPATCHER);
    }
 else     if (method.getName().equals("getEJBMetaData") && method.getParameterTypes().length == 0) {
      final Class<?> ejbObjectClass;
      final Class<?> pkClass;
      try {
        ejbObjectClass=classIndex.classIndex(createdView.getViewClassName()).getModuleClass();
        pkClass=classIndex.classIndex(componentDescription.getPrimaryKeyType()).getModuleClass();
      }
 catch (      ClassNotFoundException e) {
        throw new DeploymentUnitProcessingException("Could not load view class for " + componentDescription.getComponentName(),e);
      }
      final EjbMetadataInterceptorFactory factory=new EjbMetadataInterceptorFactory(ejbObjectClass,configuration.getViewClass(),pkClass,false,false);
      componentConfiguration.getStartDependencies().add(new DependencyConfigurator<ComponentStartService>(){
        @Override public void configureDependency(        final ServiceBuilder<?> serviceBuilder,        final ComponentStartService service) throws DeploymentUnitProcessingException {
          serviceBuilder.addDependency(configuration.getViewServiceName(),ComponentView.class,factory.getHomeView());
        }
      }
);
      configuration.addViewInterceptor(method,factory,InterceptorOrder.View.HOME_METHOD_INTERCEPTOR);
    }
 else     if (method.getName().equals("getHomeHandle") && method.getParameterTypes().length == 0) {
    }
 else {
      Method home=resolveEjbHomeBusinessMethod(componentConfiguration.getComponentClass(),deploymentReflectionIndex,method,componentConfiguration.getComponentName());
      configuration.addViewInterceptor(method,new EntityBeanHomeMethodInterceptorFactory(home),InterceptorOrder.View.COMPONENT_DISPATCHER);
    }
  }
}
