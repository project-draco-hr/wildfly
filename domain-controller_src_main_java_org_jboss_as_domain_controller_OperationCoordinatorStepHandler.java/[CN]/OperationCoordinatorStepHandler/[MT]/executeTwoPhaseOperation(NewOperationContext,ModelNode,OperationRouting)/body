{
  DomainOperationContext overallContext=new DomainOperationContext(localHostControllerInfo);
  final ModelNode slaveOp=operation.clone();
  slaveOp.get(OPERATION_HEADERS,PrepareStepHandler.EXECUTE_FOR_COORDINATOR).set(true);
  slaveOp.protect();
  String localHostName=localHostControllerInfo.getLocalHostName();
  if (routing.isLocalCallNeeded(localHostName)) {
    ModelNode localResponse=new ModelNode();
    overallContext.setCoordinatorResult(localResponse);
    localSlaveHandler.addSteps(context,slaveOp,localResponse,false);
  }
  if (localHostControllerInfo.isMasterDomainController()) {
    Set<String> remoteHosts=new HashSet<String>(routing.getHosts());
    boolean global=remoteHosts.size() == 0;
    remoteHosts.remove(localHostName);
    if (remoteHosts.size() > 0 || global) {
      context.getServiceRegistry(true);
      if (global) {
        remoteHosts.addAll(hostProxies.keySet());
      }
      Map<String,NewProxyController> remoteProxies=new HashMap<String,NewProxyController>();
      for (      String host : remoteHosts) {
        NewProxyController proxy=hostProxies.get(host);
        if (proxy != null) {
          remoteProxies.put(host,proxy);
        }
 else         if (!global) {
          throw new OperationFailedException(new ModelNode().set(String.format("Operation targets host %s but that host is not registered",host)));
        }
      }
      context.addStep(new ModelNode(),slaveOp,new DomainSlaveHandler(remoteProxies,overallContext,executorService),NewOperationContext.Stage.DOMAIN);
    }
  }
  context.addStep(new DomainRolloutStepHandler(overallContext,getExecutorService()),NewOperationContext.Stage.DOMAIN);
  context.completeStep();
}
