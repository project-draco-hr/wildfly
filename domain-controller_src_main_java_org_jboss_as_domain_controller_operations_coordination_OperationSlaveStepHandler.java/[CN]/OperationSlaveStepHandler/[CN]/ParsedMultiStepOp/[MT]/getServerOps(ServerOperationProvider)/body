{
  Map<Set<ServerIdentity>,List<ModelNode>> buildingBlocks=new HashMap<Set<ServerIdentity>,List<ModelNode>>();
  for (  ParsedOp step : steps) {
    Map<Set<ServerIdentity>,ModelNode> stepResult=step.getServerOps(provider);
    if (stepResult.size() == 0) {
      continue;
    }
 else     if (buildingBlocks.size() == 0) {
      for (      Map.Entry<Set<ServerIdentity>,ModelNode> entry : stepResult.entrySet()) {
        List<ModelNode> list=new ArrayList<ModelNode>();
        list.add(entry.getValue());
        buildingBlocks.put(entry.getKey(),list);
      }
    }
 else {
      for (      Map.Entry<Set<ServerIdentity>,ModelNode> entry : stepResult.entrySet()) {
        List<ModelNode> existingOp=buildingBlocks.get(entry.getKey());
        if (existingOp != null) {
          existingOp.add(entry.getValue());
        }
 else {
          Set<ServerIdentity> newSet=new HashSet<ServerIdentity>(entry.getKey());
          Set<Set<ServerIdentity>> existingSets=new HashSet<Set<ServerIdentity>>(buildingBlocks.keySet());
          for (          Set<ServerIdentity> existing : existingSets) {
            Set<ServerIdentity> copy=new HashSet<ServerIdentity>(existing);
            copy.retainAll(newSet);
            if (copy.size() > 0) {
              if (copy.size() == existing.size()) {
                buildingBlocks.get(existing).add(entry.getValue());
              }
 else {
                List<ModelNode> existingSteps=buildingBlocks.remove(existing);
                List<ModelNode> newSteps=new ArrayList<ModelNode>(existingSteps);
                buildingBlocks.put(copy,newSteps);
                existing.removeAll(copy);
                buildingBlocks.put(existing,existingSteps);
              }
              newSet.removeAll(copy);
            }
          }
          if (newSet.size() > 0) {
            List<ModelNode> toAdd=new ArrayList<ModelNode>();
            toAdd.add(entry.getValue());
            buildingBlocks.put(newSet,toAdd);
          }
        }
      }
    }
  }
  Map<Set<ServerIdentity>,ModelNode> result=null;
  if (buildingBlocks.size() > 0) {
    result=new HashMap<Set<ServerIdentity>,ModelNode>();
    for (    Map.Entry<Set<ServerIdentity>,List<ModelNode>> entry : buildingBlocks.entrySet()) {
      List<ModelNode> ops=entry.getValue();
      if (ops.size() == 1) {
        result.put(entry.getKey(),ops.get(0));
      }
 else {
        ModelNode composite=Util.getEmptyOperation(COMPOSITE,new ModelNode());
        ModelNode steps=composite.get(STEPS);
        for (        ModelNode step : entry.getValue()) {
          steps.add(step);
        }
        result.put(entry.getKey(),composite);
      }
    }
  }
 else {
    result=Collections.emptyMap();
  }
  return result;
}
