{
  if (ANONYMOUS.equals(mechanismName) && realm == null) {
    return new CallbackHandler(){
      public void handle(      Callback[] callbacks) throws IOException, UnsupportedCallbackException {
        for (        Callback current : callbacks) {
          throw new UnsupportedCallbackException(current,"ANONYMOUS mechanism so not expecting a callback");
        }
      }
    }
;
  }
  if (JBOSS_LOCAL_USER.equals(mechanismName)) {
    return new CallbackHandler(){
      @Override public void handle(      Callback[] callbacks) throws IOException, UnsupportedCallbackException {
        for (        Callback current : callbacks) {
          if (current instanceof NameCallback) {
            NameCallback ncb=(NameCallback)current;
            if (DOLLAR_LOCAL.equals(ncb.getDefaultName()) == false) {
              throw new SaslException("Only " + DOLLAR_LOCAL + " user is acceptable.");
            }
          }
 else           if (current instanceof AuthorizeCallback) {
            AuthorizeCallback acb=(AuthorizeCallback)current;
            acb.setAuthorized(acb.getAuthenticationID().equals(acb.getAuthorizationID()));
          }
 else {
            throw new UnsupportedCallbackException(current);
          }
        }
      }
    }
;
  }
  CallbackHandler realmCallbackHandler=null;
  if (DIGEST_MD5.equals(mechanismName) && digestMd5Supported() || PLAIN.equals(mechanismName) && plainSupported()) {
    realmCallbackHandler=realm.getCallbackHandler();
  }
 else {
    throw new IllegalStateException("Unsupported Callback '" + mechanismName + "'");
  }
  if (serverCallbackHandler == null) {
    return realmCallbackHandler;
  }
  final CallbackHandler wrappedHandler=realmCallbackHandler;
  return new CallbackHandler(){
    public void handle(    Callback[] callbacks) throws IOException, UnsupportedCallbackException {
      serverCallbackHandler.handle(callbacks);
      if (handled(callbacks) == false) {
        wrappedHandler.handle(callbacks);
      }
    }
    private boolean handled(    Callback[] callbacks){
      for (      Callback current : callbacks) {
        if (current instanceof PasswordCallback) {
          PasswordCallback pcb=(PasswordCallback)current;
          char[] password=pcb.getPassword();
          return (password != null && password.length > 0);
        }
 else         if (current instanceof VerifyPasswordCallback) {
          return ((VerifyPasswordCallback)current).isVerified();
        }
 else         if (current instanceof DigestHashCallback) {
          return ((DigestHashCallback)current).getHash() != null;
        }
      }
      return false;
    }
  }
;
}
