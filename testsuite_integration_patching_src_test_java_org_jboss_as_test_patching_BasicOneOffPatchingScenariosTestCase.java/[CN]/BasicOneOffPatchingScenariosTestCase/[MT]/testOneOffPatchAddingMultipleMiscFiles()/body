{
  String patchID=randomString();
  File oneOffPatchDir=mkdir(tempDir,patchID);
  final String[] testFileSegments1=new String[]{"testDir1","testFile1.txt"};
  final String testFilePath1=AS_DISTRIBUTION + FILE_SEPARATOR + Joiner.on(FILE_SEPARATOR).join(testFileSegments1);
  final String testContent1="test content1";
  final String[] testFileSegments2=new String[]{"directory with spaces","file with spaces"};
  final String testFilePath2=AS_DISTRIBUTION + FILE_SEPARATOR + Joiner.on(FILE_SEPARATOR).join(testFileSegments2);
  final String testContent2="test content2";
  ContentModification miscFileAdded1=ContentModificationUtils.addMisc(oneOffPatchDir,patchID,testContent1,testFileSegments1);
  ContentModification miscFileAdded2=ContentModificationUtils.addMisc(oneOffPatchDir,patchID,testContent2,testFileSegments2);
  ProductConfig productConfig=new ProductConfig(PRODUCT,AS_VERSION,"main");
  Patch oneOffPatch=PatchBuilder.create().setPatchId(patchID).setDescription("A one-off patch adding a misc file.").oneOffPatchIdentity(productConfig.getProductName(),productConfig.getProductVersion()).getParent().addContentModification(miscFileAdded1).addContentModification(miscFileAdded2).build();
  createPatchXMLFile(oneOffPatchDir,oneOffPatch);
  File zippedPatch=createZippedPatchFile(oneOffPatchDir,patchID);
  controller.start(CONTAINER);
  Assert.assertTrue("Patch should be accepted",CliUtilsForPatching.applyPatch(zippedPatch.getAbsolutePath()));
  Assert.assertTrue("server should be in restart-required mode",CliUtilsForPatching.doesServerRequireRestart());
  controller.stop(CONTAINER);
  controller.start(CONTAINER);
  Assert.assertTrue("The patch " + patchID + " should be listed as installed",CliUtilsForPatching.getInstalledPatches().contains(patchID));
  Assert.assertTrue("File1 " + testFilePath1 + " should exist",new File(testFilePath1).exists());
  Assert.assertTrue("File2 " + testFilePath2 + " should exist",new File(testFilePath2).exists());
  String patchContent=readFile(testFilePath1);
  Assert.assertEquals("check content of file1 after applying patch",testContent1,patchContent);
  patchContent=readFile(testFilePath2);
  Assert.assertEquals("check content of file2 after applying patch",testContent2,patchContent);
  Assert.assertTrue("Rollback should be accepted",CliUtilsForPatching.rollbackPatch(patchID));
  Assert.assertTrue("server should be in restart-required mode",CliUtilsForPatching.doesServerRequireRestart());
  controller.stop(CONTAINER);
  controller.start(CONTAINER);
  Assert.assertFalse("The patch " + patchID + " NOT should be listed as installed",CliUtilsForPatching.getInstalledPatches().contains(patchID));
  Assert.assertFalse("File1 + " + testFilePath1 + " should have been deleted",new File(testFilePath1).exists());
  Assert.assertFalse("File2 + " + testFilePath1 + " should have been deleted",new File(testFilePath1).exists());
  Assert.assertTrue("Patch should be accepted",CliUtilsForPatching.applyPatch(zippedPatch.getAbsolutePath()));
  Assert.assertTrue("server should be in restart-required mode",CliUtilsForPatching.doesServerRequireRestart());
  controller.stop(CONTAINER);
  controller.start(CONTAINER);
  Assert.assertTrue("The patch " + patchID + " should be listed as installed",CliUtilsForPatching.getInstalledPatches().contains(patchID));
  Assert.assertTrue("File1 " + testFilePath1 + " should exist",new File(testFilePath1).exists());
  Assert.assertTrue("File2 " + testFilePath2 + " should exist",new File(testFilePath2).exists());
  patchContent=readFile(testFilePath1);
  Assert.assertEquals("check content of file1 after applying patch",testContent1,patchContent);
  patchContent=readFile(testFilePath2);
  Assert.assertEquals("check content of file2 after applying patch",testContent2,patchContent);
  controller.stop(CONTAINER);
}
