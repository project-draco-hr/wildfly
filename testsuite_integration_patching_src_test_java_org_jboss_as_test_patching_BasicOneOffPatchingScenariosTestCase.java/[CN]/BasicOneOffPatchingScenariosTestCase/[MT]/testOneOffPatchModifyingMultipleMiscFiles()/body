{
  File tempDir=mkdir(new File(System.getProperty("java.io.tmpdir")),randomString());
  String patchID=randomString();
  File oneOffPatchDir=mkdir(tempDir,patchID);
  final String testFilePath1=AS_DISTRIBUTION + FILE_SEPARATOR + "README.txt";
  final String testContent1="test content1";
  final String originalContent1=readFile(testFilePath1);
  final String testFilePath2=AS_DISTRIBUTION + FILE_SEPARATOR + "LICENSE.txt";
  final String testContent2="test content2";
  final String originalContent2=readFile(testFilePath2);
  ContentModification miscFileModified1=ContentModificationUtils.modifyMisc(oneOffPatchDir,patchID,testContent1,new File(testFilePath1),"README.txt");
  ContentModification miscFileModified2=ContentModificationUtils.modifyMisc(oneOffPatchDir,patchID,testContent2,new File(testFilePath2),"LICENSE.txt");
  ProductConfig productConfig=new ProductConfig(PRODUCT,AS_VERSION,"consoleSlot");
  Patch oneOffPatch=PatchBuilder.create().setPatchId(patchID).setDescription("A one-off patch modifying multiple misc files.").oneOffPatchIdentity(productConfig.getProductName(),productConfig.getProductVersion()).getParent().addContentModification(miscFileModified1).addContentModification(miscFileModified2).build();
  createPatchXMLFile(oneOffPatchDir,oneOffPatch);
  File zippedPatch=createZippedPatchFile(oneOffPatchDir,patchID);
  controller.start(CONTAINER);
  CliUtilsForPatching.applyPatch(zippedPatch.getAbsolutePath());
  Assert.assertTrue("server should be in restart-required mode",CliUtilsForPatching.doesServerRequireRestart());
  controller.stop(CONTAINER);
  controller.start(CONTAINER);
  Assert.assertTrue("The patch " + patchID + " should be listed as installed",CliUtilsForPatching.getInstalledPatches().contains(patchID));
  String patchContent1=readFile(testFilePath1);
  Assert.assertEquals("check content of applying patch1",testContent1,patchContent1);
  String patchContent2=readFile(testFilePath2);
  Assert.assertEquals("check content of applying patch2",testContent2,patchContent2);
  CliUtilsForPatching.rollbackPatch(patchID);
  Assert.assertTrue("server should be in restart-required mode",CliUtilsForPatching.doesServerRequireRestart());
  controller.stop(CONTAINER);
  controller.start(CONTAINER);
  Assert.assertFalse("The patch " + patchID + " NOT should be listed as installed",CliUtilsForPatching.getInstalledPatches().contains(patchID));
  patchContent1=readFile(testFilePath1);
  Assert.assertEquals("check content of file after rollback1",originalContent1,patchContent1);
  patchContent2=readFile(testFilePath2);
  Assert.assertEquals("check content of file after rollback2",originalContent2,patchContent2);
  CliUtilsForPatching.applyPatch(zippedPatch.getAbsolutePath());
  Assert.assertTrue("server should be in restart-required mode",CliUtilsForPatching.doesServerRequireRestart());
  controller.stop(CONTAINER);
  controller.start(CONTAINER);
  Assert.assertTrue("The patch " + patchID + " should be listed as installed",CliUtilsForPatching.getInstalledPatches().contains(patchID));
  patchContent1=readFile(testFilePath1);
  Assert.assertEquals("check content of file after reapplying1",testContent1,patchContent1);
  patchContent2=readFile(testFilePath2);
  Assert.assertEquals("check content of file after reapplying2",testContent2,patchContent2);
  controller.stop(CONTAINER);
}
