{
  ProductConfig productConfig=new ProductConfig(PRODUCT,AS_VERSION,"main");
  String moduleName=randomString();
  File baseModuleDir=newFile(new File(PatchingTestUtil.AS_DISTRIBUTION),"modules",SYSTEM,LAYERS,BASE);
  File moduleDir=createModule0(baseModuleDir,moduleName);
  System.out.println("moduleDir = " + moduleDir.getAbsolutePath());
  String patchID=randomString();
  String baseLayerPatchID=randomString();
  File tempDir=mkdir(new File(System.getProperty("java.io.tmpdir")),randomString());
  File patchDir=mkdir(tempDir,patchID);
  ContentModification moduleModified=ContentModificationUtils.modifyModule(patchDir,baseLayerPatchID,moduleDir,new ResourceItem("res1","new resource in the module".getBytes()));
  Patch patch=PatchBuilder.create().setPatchId(patchID).setDescription(randomString()).oneOffPatchIdentity(productConfig.getProductName(),productConfig.getProductVersion()).getParent().oneOffPatchElement(baseLayerPatchID,BASE,false).addContentModification(moduleModified).getParent().build();
  createPatchXMLFile(patchDir,patch);
  File zippedPatch=createZippedPatchFile(patchDir,patchID);
  System.out.println(zippedPatch.getAbsolutePath());
  controller.start(CONTAINER);
  CliUtilsForPatching.applyPatch(zippedPatch.getAbsolutePath());
  Assert.assertTrue("server should be in restart-required mode",CliUtilsForPatching.doesServerRequireRestart());
  controller.stop(CONTAINER);
  controller.start(CONTAINER);
  Assert.assertTrue("The patch " + patchID + " should be listed as installed",CliUtilsForPatching.getInstalledPatches().contains(patchID));
  String newFilePath=Joiner.on(FILE_SEPARATOR).join(new String[]{PATCHES_PATH,baseLayerPatchID,moduleName,"main","res1"});
  Assert.assertTrue("File " + newFilePath + " should exist",new File(newFilePath).exists());
  CliUtilsForPatching.rollbackPatch(patchID);
  Assert.assertTrue("server should be in restart-required mode",CliUtilsForPatching.doesServerRequireRestart());
  controller.stop(CONTAINER);
  controller.start(CONTAINER);
  Assert.assertFalse("The patch " + patchID + " NOT should be listed as installed",CliUtilsForPatching.getInstalledPatches().contains(patchID));
  Assert.assertFalse("File " + newFilePath + " should not exist",new File(newFilePath).exists());
  CliUtilsForPatching.applyPatch(zippedPatch.getAbsolutePath());
  Assert.assertTrue("server should be in restart-required mode",CliUtilsForPatching.doesServerRequireRestart());
  controller.stop(CONTAINER);
  controller.start(CONTAINER);
  Assert.assertTrue("The patch " + patchID + " should be listed as installed",CliUtilsForPatching.getInstalledPatches().contains(patchID));
  Assert.assertTrue("File " + newFilePath + " should exist",new File(newFilePath).exists());
  controller.stop(CONTAINER);
}
