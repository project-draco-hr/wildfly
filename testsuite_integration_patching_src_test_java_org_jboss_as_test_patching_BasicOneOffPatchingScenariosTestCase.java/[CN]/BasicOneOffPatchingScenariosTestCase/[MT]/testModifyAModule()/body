{
  ProductConfig productConfig=new ProductConfig(PRODUCT,AS_VERSION,"main");
  final String moduleName="org.wildfly.test." + randomString();
  Module module=new Module.Builder(moduleName).build();
  File moduleDir=module.writeToDisk(new File(MODULES_PATH));
  logger.info("moduleDir = " + moduleDir.getAbsolutePath());
  String patchID=randomString();
  String baseLayerPatchID=randomString();
  File patchDir=mkdir(tempDir,patchID);
  Module updatedModule=new Module.Builder(moduleName).miscFile(new ResourceItem("res1","new resource in the module".getBytes())).build();
  ContentModification moduleModified=ContentModificationUtils.modifyModule(patchDir,baseLayerPatchID,HashUtils.hashFile(moduleDir),updatedModule);
  Patch patch=PatchBuilder.create().setPatchId(patchID).setDescription(randomString()).oneOffPatchIdentity(productConfig.getProductName(),productConfig.getProductVersion()).getParent().oneOffPatchElement(baseLayerPatchID,BASE,false).addContentModification(moduleModified).getParent().build();
  createPatchXMLFile(patchDir,patch);
  File zippedPatch=createZippedPatchFile(patchDir,patchID);
  logger.info(zippedPatch.getAbsolutePath());
  controller.start(CONTAINER);
  Assert.assertTrue("Patch should be accepted",CliUtilsForPatching.applyPatch(zippedPatch.getAbsolutePath()));
  Assert.assertTrue("server should be in restart-required mode",CliUtilsForPatching.doesServerRequireRestart());
  controller.stop(CONTAINER);
  controller.start(CONTAINER);
  Assert.assertTrue("The patch " + patchID + " should be listed as installed",CliUtilsForPatching.getInstalledPatches().contains(patchID));
  File newFile=newFile(new File(PATCHES_PATH),baseLayerPatchID);
  newFile=newFile(newFile,moduleName.split("\\."));
  newFile=newFile(newFile,"main","res1");
  Assert.assertTrue("File " + newFile.getAbsolutePath() + " should exist",newFile.exists());
  List<String> paths=CliUtilsForPatching.getResourceLoaderPathsForModule(moduleName,false);
  Assert.assertTrue("Module should be loaded from the .overlays directory but was: " + paths.get(0),paths.get(0).contains(".overlays" + File.separator + baseLayerPatchID));
  Assert.assertTrue("Rollback should be accepted",CliUtilsForPatching.rollbackPatch(patchID));
  Assert.assertTrue("server should be in restart-required mode",CliUtilsForPatching.doesServerRequireRestart());
  controller.stop(CONTAINER);
  controller.start(CONTAINER);
  Assert.assertFalse("The patch " + patchID + " NOT should be listed as installed",CliUtilsForPatching.getInstalledPatches().contains(patchID));
  Assert.assertFalse("File " + newFile.getAbsolutePath() + " should not exist",newFile.exists());
  Assert.assertTrue("Patch should be accepted",CliUtilsForPatching.applyPatch(zippedPatch.getAbsolutePath()));
  Assert.assertTrue("server should be in restart-required mode",CliUtilsForPatching.doesServerRequireRestart());
  controller.stop(CONTAINER);
  controller.start(CONTAINER);
  Assert.assertTrue("The patch " + patchID + " should be listed as installed",CliUtilsForPatching.getInstalledPatches().contains(patchID));
  paths=CliUtilsForPatching.getResourceLoaderPathsForModule(moduleName,false);
  Assert.assertTrue("Module should be loaded from the .overlays directory but was: " + paths.get(0),paths.get(0).contains(".overlays" + File.separator + baseLayerPatchID));
  Assert.assertTrue("File " + newFile.getAbsolutePath() + " should exist",newFile.exists());
  controller.stop(CONTAINER);
}
