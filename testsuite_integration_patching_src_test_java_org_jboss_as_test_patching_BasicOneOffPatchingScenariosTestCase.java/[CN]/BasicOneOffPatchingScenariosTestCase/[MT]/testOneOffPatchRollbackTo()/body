{
  final String fileContent="Hello World!";
  String patchID=randomString();
  File oneOffPatchDir=mkdir(tempDir,patchID);
  ContentModification miscFileAdded=ContentModificationUtils.addMisc(oneOffPatchDir,patchID,fileContent,"awesomeDirectory","awesomeFile");
  ProductConfig productConfig=new ProductConfig(PRODUCT,AS_VERSION,"main");
  Patch oneOffPatch=PatchBuilder.create().setPatchId(patchID).setDescription("A one-off patch adding a misc file.").oneOffPatchIdentity(productConfig.getProductName(),productConfig.getProductVersion()).getParent().addContentModification(miscFileAdded).build();
  createPatchXMLFile(oneOffPatchDir,oneOffPatch);
  File zippedPatch=createZippedPatchFile(oneOffPatchDir,patchID);
  String patchID2=randomString();
  File oneOffPatchDir2=mkdir(tempDir,patchID2);
  ContentModification miscFileAdded2=ContentModificationUtils.addMisc(oneOffPatchDir2,patchID2,fileContent,"awesomeDirectory","awesomeFile2");
  Patch oneOffPatch2=PatchBuilder.create().setPatchId(patchID2).setDescription("A one-off patch adding a misc file.").oneOffPatchIdentity(productConfig.getProductName(),productConfig.getProductVersion()).getParent().addContentModification(miscFileAdded2).build();
  createPatchXMLFile(oneOffPatchDir2,oneOffPatch2);
  File zippedPatch2=createZippedPatchFile(oneOffPatchDir2,patchID2);
  String patchID3=randomString();
  File oneOffPatchDir3=mkdir(tempDir,patchID3);
  ContentModification miscFileAdded3=ContentModificationUtils.addMisc(oneOffPatchDir3,patchID3,fileContent,"awesomeDirectory","awesomeFile3");
  Patch oneOffPatch3=PatchBuilder.create().setPatchId(patchID3).setDescription("A one-off patch adding a misc file.").oneOffPatchIdentity(productConfig.getProductName(),productConfig.getProductVersion()).getParent().addContentModification(miscFileAdded3).build();
  createPatchXMLFile(oneOffPatchDir3,oneOffPatch3);
  File zippedPatch3=createZippedPatchFile(oneOffPatchDir3,patchID3);
  controller.start(CONTAINER);
  Assert.assertTrue("Patch should be accepted",CliUtilsForPatching.applyPatch(zippedPatch.getAbsolutePath()));
  Assert.assertTrue("server should be in restart-required mode",CliUtilsForPatching.doesServerRequireRestart());
  controller.stop(CONTAINER);
  controller.start(CONTAINER);
  Assert.assertTrue("The patch " + patchID + " should be listed as installed",CliUtilsForPatching.getInstalledPatches().contains(patchID));
  Assert.assertTrue("Patch should be accepted",CliUtilsForPatching.applyPatch(zippedPatch2.getAbsolutePath()));
  Assert.assertTrue("server should be in restart-required mode",CliUtilsForPatching.doesServerRequireRestart());
  controller.stop(CONTAINER);
  controller.start(CONTAINER);
  Assert.assertTrue("The patch " + patchID2 + " should be listed as installed",CliUtilsForPatching.getInstalledPatches().contains(patchID2));
  Assert.assertTrue("Patch should be accepted",CliUtilsForPatching.applyPatch(zippedPatch3.getAbsolutePath()));
  Assert.assertTrue("server should be in restart-required mode",CliUtilsForPatching.doesServerRequireRestart());
  controller.stop(CONTAINER);
  controller.start(CONTAINER);
  Assert.assertTrue("The patch " + patchID3 + " should be listed as installed",CliUtilsForPatching.getInstalledPatches().contains(patchID3));
  Assert.assertTrue("Rollback should be accepted",CliUtilsForPatching.rollbackToPatch(patchID2));
  controller.stop(CONTAINER);
  controller.start(CONTAINER);
  Assert.assertFalse("The patch " + patchID3 + " should not be listed as installed",CliUtilsForPatching.getInstalledPatches().contains(patchID3));
  Assert.assertFalse("The patch " + patchID2 + " should not be listed as installed",CliUtilsForPatching.getInstalledPatches().contains(patchID2));
  Assert.assertTrue("The patch " + patchID + " should be listed as installed",CliUtilsForPatching.getInstalledPatches().contains(patchID));
  controller.stop(CONTAINER);
}
