{
  File tempDir=mkdir(new File(System.getProperty("java.io.tmpdir")),randomString());
  String patchID=randomString();
  File oneOffPatchDir=mkdir(tempDir,patchID);
  final String[] testFileSegmentsAdded=new String[]{"testDir1","testFile1.txt"};
  final String testFilePathAdded=AS_DISTRIBUTION + FILE_SEPARATOR + Joiner.on(FILE_SEPARATOR).join(testFileSegmentsAdded);
  final String testContentAdded="test content1";
  final String testFilePathDeleted=AS_DISTRIBUTION + FILE_SEPARATOR + "LICENSE.txt";
  final String originalContentOfDeletedFile=readFile(testFilePathDeleted);
  ContentModification miscFileAdded=ContentModificationUtils.addMisc(oneOffPatchDir,patchID,testContentAdded,testFileSegmentsAdded);
  ContentModification miscFileDeleted=ContentModificationUtils.removeMisc(new File(testFilePathDeleted),"");
  ProductConfig productConfig=new ProductConfig(PRODUCT,AS_VERSION,"main");
  Patch oneOffPatch=PatchBuilder.create().setPatchId(patchID).setDescription("A one-off patch adding one misc file and deleting another misc file.").oneOffPatchIdentity(productConfig.getProductName(),productConfig.getProductVersion()).getParent().addContentModification(miscFileAdded).addContentModification(miscFileDeleted).build();
  createPatchXMLFile(oneOffPatchDir,oneOffPatch);
  File zippedPatch=createZippedPatchFile(oneOffPatchDir,patchID);
  controller.start(CONTAINER);
  CliUtilsForPatching.applyPatch(zippedPatch.getAbsolutePath());
  Assert.assertTrue("server should be in restart-required mode",CliUtilsForPatching.doesServerRequireRestart());
  controller.stop(CONTAINER);
  controller.start(CONTAINER);
  Assert.assertTrue("The patch " + patchID + " should be listed as installed",CliUtilsForPatching.getInstalledPatches().contains(patchID));
  Assert.assertTrue("File1 " + testFilePathAdded + " should exist",new File(testFilePathAdded).exists());
  Assert.assertFalse("File2 " + testFilePathDeleted + " should have been deleted",new File(testFilePathDeleted).exists());
  Assert.assertEquals("check content of file after applying patch",testContentAdded,readFile(testFilePathAdded));
  CliUtilsForPatching.rollbackPatch(patchID);
  Assert.assertTrue("server should be in restart-required mode",CliUtilsForPatching.doesServerRequireRestart());
  controller.stop(CONTAINER);
  controller.start(CONTAINER);
  Assert.assertFalse("The patch " + patchID + " NOT should be listed as installed",CliUtilsForPatching.getInstalledPatches().contains(patchID));
  Assert.assertFalse("File1 + " + testFilePathAdded + " should have been deleted",new File(testFilePathAdded).exists());
  Assert.assertTrue("File2 + " + testFilePathDeleted + " should exist",new File(testFilePathDeleted).exists());
  Assert.assertEquals("check content of file after patch rollback",originalContentOfDeletedFile,readFile(testFilePathDeleted));
  CliUtilsForPatching.applyPatch(zippedPatch.getAbsolutePath());
  Assert.assertTrue("server should be in restart-required mode",CliUtilsForPatching.doesServerRequireRestart());
  controller.stop(CONTAINER);
  controller.start(CONTAINER);
  Assert.assertTrue("The patch " + patchID + " should be listed as installed",CliUtilsForPatching.getInstalledPatches().contains(patchID));
  Assert.assertTrue("File1 " + testFilePathAdded + " should exist",new File(testFilePathAdded).exists());
  Assert.assertFalse("File2 " + testFilePathDeleted + " should have been deleted",new File(testFilePathDeleted).exists());
  Assert.assertEquals("check content of file after applying patch",testContentAdded,readFile(testFilePathAdded));
  controller.stop(CONTAINER);
}
