{
  String patchID=randomString();
  String layerPatchID=randomString();
  File oneOffPatchDir=mkdir(tempDir,patchID);
  final String moduleName1="org.wildfly.test." + randomString();
  Module module1=new Module.Builder(moduleName1).build();
  File moduleDir1=module1.writeToDisk(new File(MODULES_PATH));
  File patchModuleDir1=newFile(new File(PATCHES_PATH),layerPatchID);
  patchModuleDir1=newFile(patchModuleDir1,moduleName1.split("\\."));
  File moduleXml1=newFile(patchModuleDir1,"main","module.xml");
  final String moduleName2="org.wildfly.test." + randomString();
  Module module2=new Module.Builder(moduleName2).build();
  File moduleDir2=module2.writeToDisk(new File(MODULES_PATH));
  File patchModuleDir2=newFile(new File(PATCHES_PATH),layerPatchID);
  patchModuleDir2=newFile(patchModuleDir2,moduleName2.split("\\."));
  File moduleXml2=newFile(patchModuleDir2,"main","module.xml");
  ContentModification moduleRemoved1=ContentModificationUtils.removeModule(moduleName1,moduleDir1);
  ContentModification moduleRemoved2=ContentModificationUtils.removeModule(moduleName2,moduleDir2);
  ProductConfig productConfig=new ProductConfig(PRODUCT,AS_VERSION,"main");
  Patch oneOffPatch=PatchBuilder.create().setPatchId(patchID).setDescription("A one-off patch removing multiple modules.").oneOffPatchIdentity(productConfig.getProductName(),productConfig.getProductVersion()).getParent().oneOffPatchElement(layerPatchID,"base",false).setDescription("Remove modules").addContentModification(moduleRemoved1).addContentModification(moduleRemoved2).getParent().build();
  createPatchXMLFile(oneOffPatchDir,oneOffPatch);
  File zippedPatch=createZippedPatchFile(oneOffPatchDir,patchID);
  controller.start(CONTAINER);
  Assert.assertTrue("Patch should be accepted",CliUtilsForPatching.applyPatch(zippedPatch.getAbsolutePath()));
  Assert.assertTrue("server should be in restart-required mode",CliUtilsForPatching.doesServerRequireRestart());
  controller.stop(CONTAINER);
  controller.start(CONTAINER);
  Assert.assertTrue("The patch " + patchID + " should be listed as installed",CliUtilsForPatching.getInstalledPatches().contains(patchID));
  try {
    CliUtilsForPatching.getResourceLoaderPathsForModule(moduleName1,true);
    Assert.fail("Module " + moduleName1 + " should have been removed by the patch");
  }
 catch (  RuntimeException expected) {
  }
  Assert.assertTrue("Rollback should be accepted",CliUtilsForPatching.rollbackPatch(patchID));
  Assert.assertTrue("server should be in restart-required mode",CliUtilsForPatching.doesServerRequireRestart());
  controller.stop(CONTAINER);
  controller.start(CONTAINER);
  Assert.assertFalse("The patch " + patchID + " NOT should be listed as installed",CliUtilsForPatching.getInstalledPatches().contains(patchID));
  CliUtilsForPatching.getResourceLoaderPathsForModule(moduleName1,true);
  Assert.assertTrue("Patch should be accepted",CliUtilsForPatching.applyPatch(zippedPatch.getAbsolutePath()));
  Assert.assertTrue("server should be in restart-required mode",CliUtilsForPatching.doesServerRequireRestart());
  controller.stop(CONTAINER);
  controller.start(CONTAINER);
  Assert.assertTrue("The patch " + patchID + " should be listed as installed",CliUtilsForPatching.getInstalledPatches().contains(patchID));
  try {
    CliUtilsForPatching.getResourceLoaderPathsForModule(moduleName1,true);
    Assert.fail("Module " + moduleName1 + " should have been removed by the patch");
  }
 catch (  RuntimeException expected) {
  }
  controller.stop(CONTAINER);
}
