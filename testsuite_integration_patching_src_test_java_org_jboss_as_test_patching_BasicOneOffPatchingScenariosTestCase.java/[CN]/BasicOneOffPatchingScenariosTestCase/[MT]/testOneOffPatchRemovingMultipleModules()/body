{
  String patchID=randomString();
  String layerPatchID=randomString();
  File oneOffPatchDir=mkdir(tempDir,patchID);
  final String moduleName1=randomString();
  File baseModuleDir1=newFile(new File(PatchingTestUtil.AS_DISTRIBUTION),MODULES,SYSTEM,LAYERS,BASE);
  File moduleDir1=createModule0(baseModuleDir1,moduleName1);
  File patchModuleDir1=new File(PATCHES_PATH + FILE_SEPARATOR + layerPatchID+ FILE_SEPARATOR+ moduleName1);
  File moduleXml1=new File(patchModuleDir1,"main" + FILE_SEPARATOR + "module.xml");
  final String moduleName2=randomString();
  File baseModuleDir2=newFile(new File(PatchingTestUtil.AS_DISTRIBUTION),MODULES,SYSTEM,LAYERS,BASE);
  File moduleDir2=createModule0(baseModuleDir2,moduleName2);
  File patchModuleDir2=new File(PATCHES_PATH + FILE_SEPARATOR + layerPatchID+ FILE_SEPARATOR+ moduleName2);
  File moduleXml2=new File(patchModuleDir2,"main" + FILE_SEPARATOR + "module.xml");
  ContentModification moduleRemoved1=ContentModificationUtils.removeModule(moduleDir1);
  ContentModification moduleRemoved2=ContentModificationUtils.removeModule(moduleDir2);
  ProductConfig productConfig=new ProductConfig(PRODUCT,AS_VERSION,"main");
  Patch oneOffPatch=PatchBuilder.create().setPatchId(patchID).setDescription("A one-off patch removing multiple modules.").oneOffPatchIdentity(productConfig.getProductName(),productConfig.getProductVersion()).getParent().oneOffPatchElement(layerPatchID,"base",false).setDescription("Remove modules").addContentModification(moduleRemoved1).addContentModification(moduleRemoved2).getParent().build();
  createPatchXMLFile(oneOffPatchDir,oneOffPatch);
  File zippedPatch=createZippedPatchFile(oneOffPatchDir,patchID);
  controller.start(CONTAINER);
  Assert.assertTrue("Patch should be accepted",CliUtilsForPatching.applyPatch(zippedPatch.getAbsolutePath()));
  Assert.assertTrue("server should be in restart-required mode",CliUtilsForPatching.doesServerRequireRestart());
  controller.stop(CONTAINER);
  controller.start(CONTAINER);
  Assert.assertTrue("The patch " + patchID + " should be listed as installed",CliUtilsForPatching.getInstalledPatches().contains(patchID));
  Assert.assertTrue("The file " + moduleXml1.getName() + " should exist",moduleXml1.exists());
  Assert.assertTrue("The file " + moduleXml2.getName() + " should exist",moduleXml2.exists());
  Assert.assertTrue("Rollback should be accepted",CliUtilsForPatching.rollbackPatch(patchID));
  Assert.assertTrue("server should be in restart-required mode",CliUtilsForPatching.doesServerRequireRestart());
  controller.stop(CONTAINER);
  controller.start(CONTAINER);
  Assert.assertFalse("The patch " + patchID + " NOT should be listed as installed",CliUtilsForPatching.getInstalledPatches().contains(patchID));
  Assert.assertFalse("The file " + patchModuleDir1 + "should have been deleted",patchModuleDir1.exists());
  Assert.assertFalse("The file " + patchModuleDir2 + "should have been deleted",patchModuleDir2.exists());
  Assert.assertTrue("Patch should be accepted",CliUtilsForPatching.applyPatch(zippedPatch.getAbsolutePath()));
  Assert.assertTrue("server should be in restart-required mode",CliUtilsForPatching.doesServerRequireRestart());
  controller.stop(CONTAINER);
  controller.start(CONTAINER);
  Assert.assertTrue("The patch " + patchID + " should be listed as installed",CliUtilsForPatching.getInstalledPatches().contains(patchID));
  Assert.assertTrue("The file " + moduleXml1.getName() + " should exist",moduleXml1.exists());
  Assert.assertTrue("The file " + moduleXml2.getName() + " should exist",moduleXml2.exists());
  controller.stop(CONTAINER);
}
