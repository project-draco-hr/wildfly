{
  String patchID=randomString();
  File oneOffPatchDir=mkdir(tempDir,patchID);
  final String testFilePath1=AS_DISTRIBUTION + FILE_SEPARATOR + "README.txt";
  final String testContent1="test content1";
  final String originalContent1=readFile(testFilePath1);
  final String testFilePathDeleted=AS_DISTRIBUTION + FILE_SEPARATOR + "LICENSE.txt";
  final String originalContentOfDeletedFile=readFile(testFilePathDeleted);
  ContentModification miscFileModified=ContentModificationUtils.modifyMisc(oneOffPatchDir,patchID,testContent1,new File(testFilePath1),"README.txt");
  ContentModification miscFileDeleted=ContentModificationUtils.removeMisc(new File(testFilePathDeleted),"");
  ProductConfig productConfig=new ProductConfig(PRODUCT,AS_VERSION,"main");
  Patch oneOffPatch=PatchBuilder.create().setPatchId(patchID).setDescription("A one-off patch modifying one misc file and deleting another misc file.").oneOffPatchIdentity(productConfig.getProductName(),productConfig.getProductVersion()).getParent().addContentModification(miscFileModified).addContentModification(miscFileDeleted).build();
  createPatchXMLFile(oneOffPatchDir,oneOffPatch);
  File zippedPatch=createZippedPatchFile(oneOffPatchDir,patchID);
  controller.start(CONTAINER);
  Assert.assertTrue("Patch should be accepted",CliUtilsForPatching.applyPatch(zippedPatch.getAbsolutePath()));
  Assert.assertTrue("server should be in restart-required mode",CliUtilsForPatching.doesServerRequireRestart());
  controller.stop(CONTAINER);
  controller.start(CONTAINER);
  Assert.assertTrue("The patch " + patchID + " should be listed as installed",CliUtilsForPatching.getInstalledPatches().contains(patchID));
  Assert.assertEquals("Unexpected contents of misc file",testContent1,readFile(testFilePath1));
  Assert.assertFalse("File " + testFilePathDeleted + " should have been deleted",new File(testFilePathDeleted).exists());
  Assert.assertTrue("Rollback should be accepted",CliUtilsForPatching.rollbackPatch(patchID));
  Assert.assertTrue("server should be in restart-required mode",CliUtilsForPatching.doesServerRequireRestart());
  controller.stop(CONTAINER);
  controller.start(CONTAINER);
  Assert.assertFalse("The patch " + patchID + " NOT should be listed as installed",CliUtilsForPatching.getInstalledPatches().contains(patchID));
  Assert.assertEquals("Unexpected contents of misc file",originalContent1,readFile(testFilePath1));
  Assert.assertTrue("File + " + testFilePathDeleted + " should exist",new File(testFilePathDeleted).exists());
  Assert.assertEquals("Unexpected contents of misc file",originalContentOfDeletedFile,readFile(testFilePathDeleted));
  Assert.assertTrue("Patch should be accepted",CliUtilsForPatching.applyPatch(zippedPatch.getAbsolutePath()));
  Assert.assertTrue("server should be in restart-required mode",CliUtilsForPatching.doesServerRequireRestart());
  controller.stop(CONTAINER);
  controller.start(CONTAINER);
  Assert.assertTrue("The patch " + patchID + " should be listed as installed",CliUtilsForPatching.getInstalledPatches().contains(patchID));
  Assert.assertEquals("Unexpected contents of misc file",testContent1,readFile(testFilePath1));
  Assert.assertFalse("File " + testFilePathDeleted + " should have been deleted",new File(testFilePathDeleted).exists());
  controller.stop(CONTAINER);
}
