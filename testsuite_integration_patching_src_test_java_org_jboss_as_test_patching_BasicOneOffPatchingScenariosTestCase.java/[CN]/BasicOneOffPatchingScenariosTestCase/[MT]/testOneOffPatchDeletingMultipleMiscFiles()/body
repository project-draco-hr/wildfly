{
  File tempDir=mkdir(new File(System.getProperty("java.io.tmpdir")),randomString());
  String patchID=randomString();
  File oneOffPatchDir=mkdir(tempDir,patchID);
  final String testFilePath1=AS_DISTRIBUTION + FILE_SEPARATOR + "README.txt";
  final String testFilePath2=AS_DISTRIBUTION + FILE_SEPARATOR + "LICENSE.txt";
  String originalContent1=readFile(testFilePath1);
  String originalContent2=readFile(testFilePath2);
  ContentModification miscFileRemoved1=ContentModificationUtils.removeMisc(new File(testFilePath1),"");
  ContentModification miscFileRemoved2=ContentModificationUtils.removeMisc(new File(testFilePath2),"");
  ProductConfig productConfig=new ProductConfig(PRODUCT,AS_VERSION,"main");
  Patch oneOffPatch=PatchBuilder.create().setPatchId(patchID).setDescription("A one-off patch removing a misc file.").oneOffPatchIdentity(productConfig.getProductName(),productConfig.getProductVersion()).getParent().addContentModification(miscFileRemoved1).addContentModification(miscFileRemoved2).build();
  createPatchXMLFile(oneOffPatchDir,oneOffPatch);
  File zippedPatch=createZippedPatchFile(oneOffPatchDir,patchID);
  controller.start(CONTAINER);
  CliUtilsForPatching.applyPatch(zippedPatch.getAbsolutePath());
  Assert.assertTrue("server should be in restart-required mode",CliUtilsForPatching.doesServerRequireRestart());
  controller.stop(CONTAINER);
  controller.start(CONTAINER);
  Assert.assertTrue("The patch " + patchID + " should be listed as installed",CliUtilsForPatching.getInstalledPatches().contains(patchID));
  Assert.assertFalse("File " + testFilePath1 + " should have been deleted",new File(testFilePath1).exists());
  Assert.assertFalse("File " + testFilePath2 + " should have been deleted",new File(testFilePath2).exists());
  CliUtilsForPatching.rollbackPatch(patchID);
  Assert.assertTrue("server should be in restart-required mode",CliUtilsForPatching.doesServerRequireRestart());
  controller.stop(CONTAINER);
  controller.start(CONTAINER);
  Assert.assertFalse("The patch " + patchID + " NOT should be listed as installed",CliUtilsForPatching.getInstalledPatches().contains(patchID));
  Assert.assertTrue("File + " + testFilePath1 + " should be restored",new File(testFilePath1).exists());
  Assert.assertTrue("File + " + testFilePath2 + " should be restored",new File(testFilePath2).exists());
  Assert.assertEquals("Unexpected contents of misc file",originalContent1,readFile(testFilePath1));
  Assert.assertEquals("Unexpected contents of misc file",originalContent2,readFile(testFilePath2));
  CliUtilsForPatching.applyPatch(zippedPatch.getAbsolutePath());
  Assert.assertTrue("server should be in restart-required mode",CliUtilsForPatching.doesServerRequireRestart());
  controller.stop(CONTAINER);
  controller.start(CONTAINER);
  Assert.assertTrue("The patch " + patchID + " should be listed as installed",CliUtilsForPatching.getInstalledPatches().contains(patchID));
  Assert.assertFalse("File " + testFilePath1 + " should have been deleted",new File(testFilePath1).exists());
  Assert.assertFalse("File " + testFilePath2 + " should have been deleted",new File(testFilePath2).exists());
  controller.stop(CONTAINER);
}
