{
  String patchID=randomString();
  File oneOffPatchDir=mkdir(tempDir,patchID);
  final String[] testFileSegmentsAdded1=new String[]{"testDir1","testFile2.txt"};
  final String testFilePathAdded1=AS_DISTRIBUTION + FILE_SEPARATOR + Joiner.on(FILE_SEPARATOR).join(testFileSegmentsAdded1);
  final String testContentAdded1="test content2";
  final String[] testFileSegmentsAdded2=new String[]{"testFile2.txt"};
  final String testFilePathAdded2=AS_DISTRIBUTION + FILE_SEPARATOR + Joiner.on(FILE_SEPARATOR).join(testFileSegmentsAdded2);
  final String testContentAdded2="test content2";
  final String testFilePathDeleted1=AS_DISTRIBUTION + FILE_SEPARATOR + "README.txt";
  final String testFilePathDeleted2=AS_DISTRIBUTION + FILE_SEPARATOR + "LICENSE.txt";
  final String originalContentOfDeletedFile1=readFile(testFilePathDeleted1);
  final String originalContentOfDeletedFile2=readFile(testFilePathDeleted2);
  ContentModification miscFileAdded1=ContentModificationUtils.addMisc(oneOffPatchDir,patchID,testContentAdded1,testFileSegmentsAdded1);
  ContentModification miscFileAdded2=ContentModificationUtils.addMisc(oneOffPatchDir,patchID,testContentAdded2,testFileSegmentsAdded2);
  ContentModification miscFileDeleted1=ContentModificationUtils.removeMisc(new File(testFilePathDeleted1),"");
  ContentModification miscFileDeleted2=ContentModificationUtils.removeMisc(new File(testFilePathDeleted2),"");
  ProductConfig productConfig=new ProductConfig(PRODUCT,AS_VERSION,"main");
  Patch oneOffPatch=PatchBuilder.create().setPatchId(patchID).setDescription("A one-off patch adding one misc file and deleting another misc file.").oneOffPatchIdentity(productConfig.getProductName(),productConfig.getProductVersion()).getParent().addContentModification(miscFileAdded1).addContentModification(miscFileAdded2).addContentModification(miscFileDeleted1).addContentModification(miscFileDeleted2).build();
  createPatchXMLFile(oneOffPatchDir,oneOffPatch);
  File zippedPatch=createZippedPatchFile(oneOffPatchDir,patchID);
  controller.start(CONTAINER);
  Assert.assertTrue("Patch should be accepted",CliUtilsForPatching.applyPatch(zippedPatch.getAbsolutePath()));
  Assert.assertTrue("server should be in restart-required mode",CliUtilsForPatching.doesServerRequireRestart());
  controller.stop(CONTAINER);
  controller.start(CONTAINER);
  Assert.assertTrue("The patch " + patchID + " should be listed as installed",CliUtilsForPatching.getInstalledPatches().contains(patchID));
  Assert.assertTrue("File1 " + testFilePathAdded1 + " should exist",new File(testFilePathAdded1).exists());
  Assert.assertTrue("File2 " + testFilePathAdded2 + " should exist",new File(testFilePathAdded2).exists());
  Assert.assertFalse("File3 " + testFilePathDeleted1 + " should have been deleted",new File(testFilePathDeleted1).exists());
  Assert.assertFalse("File4 " + testFilePathDeleted2 + " should have been deleted",new File(testFilePathDeleted2).exists());
  Assert.assertEquals("check content of file after applying patch",testContentAdded1,readFile(testFilePathAdded1));
  Assert.assertEquals("check content of file after applying patch",testContentAdded2,readFile(testFilePathAdded2));
  Assert.assertTrue("Rollback should be accepted",CliUtilsForPatching.rollbackPatch(patchID));
  Assert.assertTrue("server should be in restart-required mode",CliUtilsForPatching.doesServerRequireRestart());
  controller.stop(CONTAINER);
  controller.start(CONTAINER);
  Assert.assertFalse("The patch " + patchID + " NOT should be listed as installed",CliUtilsForPatching.getInstalledPatches().contains(patchID));
  Assert.assertFalse("File1 + " + testFilePathAdded1 + " should have been deleted",new File(testFilePathAdded1).exists());
  Assert.assertFalse("File2 + " + testFilePathAdded2 + " should have been deleted",new File(testFilePathAdded2).exists());
  Assert.assertTrue("File3 + " + testFilePathDeleted1 + " should exist",new File(testFilePathDeleted1).exists());
  Assert.assertTrue("File4 + " + testFilePathDeleted2 + " should exist",new File(testFilePathDeleted2).exists());
  Assert.assertEquals("check content of file after patch rollback",originalContentOfDeletedFile1,readFile(testFilePathDeleted1));
  Assert.assertEquals("check content of file after patch rollback",originalContentOfDeletedFile2,readFile(testFilePathDeleted2));
  Assert.assertTrue("Patch should be accepted",CliUtilsForPatching.applyPatch(zippedPatch.getAbsolutePath()));
  Assert.assertTrue("server should be in restart-required mode",CliUtilsForPatching.doesServerRequireRestart());
  controller.stop(CONTAINER);
  controller.start(CONTAINER);
  Assert.assertTrue("The patch " + patchID + " should be listed as installed",CliUtilsForPatching.getInstalledPatches().contains(patchID));
  Assert.assertTrue("File1 " + testFilePathAdded1 + " should exist",new File(testFilePathAdded1).exists());
  Assert.assertTrue("File2 " + testFilePathAdded2 + " should exist",new File(testFilePathAdded2).exists());
  Assert.assertFalse("File3 " + testFilePathDeleted1 + " should have been deleted",new File(testFilePathDeleted1).exists());
  Assert.assertFalse("File4 " + testFilePathDeleted2 + " should have been deleted",new File(testFilePathDeleted2).exists());
  Assert.assertEquals("check content of file after applying patch",testContentAdded1,readFile(testFilePathAdded1));
  Assert.assertEquals("check content of file after applying patch",testContentAdded2,readFile(testFilePathAdded2));
  controller.stop(CONTAINER);
}
