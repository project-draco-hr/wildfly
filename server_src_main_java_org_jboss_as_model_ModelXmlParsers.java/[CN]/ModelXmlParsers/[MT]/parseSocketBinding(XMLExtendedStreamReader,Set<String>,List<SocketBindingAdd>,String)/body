{
  String name=null;
  String interfaceName=null;
  Integer port=null;
  Boolean fixPort=null;
  InetAddress mcastAddr=null;
  Integer mcastPort=null;
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    final String value=reader.getAttributeValue(i);
    if (reader.getAttributeNamespace(i) != null) {
      throw ParseUtils.unexpectedAttribute(reader,i);
    }
 else {
      final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case NAME:
{
          name=value;
          break;
        }
case INTERFACE:
{
        if (!interfaces.contains(value)) {
          throw new XMLStreamException("Unknown interface " + value + " "+ attribute.getLocalName()+ " must be declared in element "+ Element.INTERFACES.getLocalName(),reader.getLocation());
        }
        interfaceName=value;
        break;
      }
case PORT:
{
      port=Integer.valueOf(parsePort(value,attribute,reader,true));
      break;
    }
case FIXED_PORT:
{
    fixPort=Boolean.valueOf(value);
    break;
  }
case MULTICAST_ADDRESS:
{
  try {
    mcastAddr=InetAddress.getByName(value);
    if (!mcastAddr.isMulticastAddress()) {
      throw new XMLStreamException("Value " + value + " for attribute "+ attribute.getLocalName()+ " is not a valid multicast address",reader.getLocation());
    }
  }
 catch (  UnknownHostException e) {
    throw new XMLStreamException("Value " + value + " for attribute "+ attribute.getLocalName()+ " is not a valid multicast address",reader.getLocation(),e);
  }
}
case MULTICAST_PORT:
{
mcastPort=Integer.valueOf(parsePort(value,attribute,reader,false));
break;
}
default :
throw ParseUtils.unexpectedAttribute(reader,i);
}
}
}
if (name == null) {
throw ParseUtils.missingRequired(reader,Collections.singleton(Attribute.NAME));
}
ParseUtils.requireNoContent(reader);
final SocketBindingAdd update=new SocketBindingAdd(interfaceName == null ? inheritedInterfaceName : interfaceName,name,port == null ? 0 : port.intValue());
update.setFixedPort(fixPort == null ? false : fixPort.booleanValue());
update.setMulticastAddress(mcastAddr);
update.setMulticastPort(mcastAddr == null ? -1 : mcastPort != null ? mcastPort.intValue() : -1);
updates.add(update);
return name;
}
