{
  final List<NamespacePrefix> prefixes=readNamespaces(reader);
  if (!prefixes.isEmpty())   list.add(new ServerNamespaceUpdate(prefixes));
  String serverName=null;
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
switch (Namespace.forUri(reader.getAttributeNamespace(i))) {
case DOMAIN_1_0:
{
        final String value=reader.getAttributeValue(i);
        final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case NAME:
{
            if (serverName != null)             throw unexpectedAttribute(reader,i);
            serverName=value;
            break;
          }
default :
        throw unexpectedAttribute(reader,i);
    }
    break;
  }
case XML_SCHEMA_INSTANCE:
{
switch (Attribute.forName(reader.getAttributeLocalName(i))) {
case SCHEMA_LOCATION:
{
      final List<SchemaLocation> locationList=readSchemaLocations(reader,i);
      list.add(new ServerSchemaLocationUpdate(locationList));
      break;
    }
case NO_NAMESPACE_SCHEMA_LOCATION:
{
    break;
  }
default :
{
  throw unexpectedAttribute(reader,i);
}
}
break;
}
case UNKNOWN:
{
if (reader.getAttributeNamespace(i) != null) throw unexpectedAttribute(reader,i);
final String value=reader.getAttributeValue(i);
final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case NAME:
{
if (serverName != null) throw unexpectedAttribute(reader,i);
serverName=value;
break;
}
default :
throw unexpectedAttribute(reader,i);
}
break;
}
}
}
if (serverName != null && serverName.length() != 0) {
list.add(new ServerNameUpdate(serverName));
}
Element element=nextElement(reader);
if (element == Element.EXTENSIONS) {
Set<String> extensionModules=parseExtensions(reader);
for (String moduleName : extensionModules) {
list.add(new ServerExtensionAdd(moduleName));
}
element=nextElement(reader);
}
if (element == Element.PATHS) {
parseServerModelPaths(reader,list);
element=nextElement(reader);
}
if (element == Element.MANAGEMENT) {
parseServerManagement(reader,list);
element=nextElement(reader);
}
if (element == Element.PROFILE) {
parseServerProfile(reader,list);
element=nextElement(reader);
}
Set<String> interfaceNames=null;
if (element == Element.INTERFACES) {
interfaceNames=parseServerModelInterfaces(reader,list);
element=nextElement(reader);
}
if (element == Element.SOCKET_BINDING_GROUP) {
final List<SocketBindingAdd> bindingUpdates=new ArrayList<SocketBindingAdd>();
final SocketBindingGroupUpdate group=parseSocketBindingGroup(reader,bindingUpdates,interfaceNames,false);
list.add(new ServerSocketBindingGroupUpdate(group));
for (final SocketBindingAdd bindingUpdate : bindingUpdates) {
list.add(new ServerSocketBindingUpdate(bindingUpdate));
}
element=nextElement(reader);
}
if (element == Element.SYSTEM_PROPERTIES) {
parseServerModelSystemProperties(reader,list);
element=nextElement(reader);
}
if (element == Element.DEPLOYMENT_REPOSITORY) {
boolean enabled=true;
int interval=0;
String path=null;
String name=null;
String relativeTo=null;
final int attrCount=reader.getAttributeCount();
for (int i=0; i < attrCount; i++) {
final String value=reader.getAttributeValue(i);
if (reader.getAttributeNamespace(i) != null) {
throw ParseUtils.unexpectedAttribute(reader,i);
}
 else {
final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case PATH:
{
path=value;
break;
}
case NAME:
{
name=value;
break;
}
case RELATIVE_TO:
{
relativeTo=value;
break;
}
case SCAN_INTERVAL:
{
interval=Integer.parseInt(value);
break;
}
case SCAN_ENABLED:
{
enabled=Boolean.parseBoolean(value);
break;
}
default :
throw ParseUtils.unexpectedAttribute(reader,i);
}
}
}
if (path == null) {
ParseUtils.missingRequired(reader,Collections.singleton("path"));
}
requireNoContent(reader);
final ServerDeploymentRepositoryAdd action=new ServerDeploymentRepositoryAdd(path,interval,enabled);
action.setName(name);
action.setRelativeTo(relativeTo);
list.add(action);
element=nextElement(reader);
}
if (element == Element.DEPLOYMENTS) {
parseServerDeployments(reader,list);
element=nextElement(reader);
}
if (element != null) {
throw unexpectedElement(reader);
}
}
