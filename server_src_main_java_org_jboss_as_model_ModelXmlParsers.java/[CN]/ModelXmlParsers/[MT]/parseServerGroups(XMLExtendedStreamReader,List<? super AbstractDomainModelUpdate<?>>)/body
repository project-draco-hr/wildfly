{
  requireNoAttributes(reader);
  final Set<String> names=new HashSet<String>();
  while (reader.nextTag() != END_ELEMENT) {
    String name=null;
    String profile=null;
    Collection<PropertyAdd> systemProperties=null;
    final int count=reader.getAttributeCount();
    for (int i=0; i < count; i++) {
      final String value=reader.getAttributeValue(i);
      if (reader.getAttributeNamespace(i) != null) {
        throw ParseUtils.unexpectedAttribute(reader,i);
      }
 else {
        final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case NAME:
{
            if (name != null) {
              throw ParseUtils.duplicateAttribute(reader,attribute.getLocalName());
            }
            if (!names.add(value)) {
              throw ParseUtils.duplicateNamedElement(reader,value);
            }
            name=value;
            break;
          }
case PROFILE:
{
          if (profile != null) {
            throw ParseUtils.duplicateAttribute(reader,attribute.getLocalName());
          }
          profile=value;
          break;
        }
default :
      throw ParseUtils.unexpectedAttribute(reader,i);
  }
}
}
if (name == null) {
throw ParseUtils.missingRequired(reader,Collections.singleton(Attribute.NAME));
}
if (profile == null) {
throw ParseUtils.missingRequired(reader,Collections.singleton(Attribute.PROFILE));
}
list.add(new DomainServerGroupAdd(name,profile));
NamedModelUpdates<JvmElement> jvm=null;
NameOffset socketBinding=null;
boolean sawDeployments=false;
while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
switch (Namespace.forUri(reader.getNamespaceURI())) {
case DOMAIN_1_0:
{
    final Element element=Element.forName(reader.getLocalName());
switch (element) {
case JVM:
{
        if (jvm != null) {
          throw new XMLStreamException(element.getLocalName() + " already defined",reader.getLocation());
        }
        jvm=parseJvm(reader);
        list.add(DomainServerGroupUpdate.create(name,new ServerGroupJvmAdd(jvm.name)));
        for (        AbstractModelUpdate<JvmElement,?> update : jvm.updates) {
          list.add(DomainServerGroupUpdate.create(name,ServerGroupJvmUpdate.create(update)));
        }
        break;
      }
case SOCKET_BINDING_GROUP:
{
      if (socketBinding != null) {
        throw new XMLStreamException(element.getLocalName() + " already defined",reader.getLocation());
      }
      socketBinding=parseSocketBindingGroupRef(reader);
      list.add(DomainServerGroupUpdate.create(name,new ServerGroupSocketBindingGroupUpdate(socketBinding.name)));
      if (socketBinding.offset > 0) {
        list.add(DomainServerGroupUpdate.create(name,new ServerGroupSocketBindingPortOffsetUpdate(socketBinding.offset)));
      }
      break;
    }
case DEPLOYMENTS:
{
    if (sawDeployments) {
      throw new XMLStreamException(element.getLocalName() + " already defined",reader.getLocation());
    }
    sawDeployments=true;
    parseDeployments(reader,list,name);
    break;
  }
case SYSTEM_PROPERTIES:
{
  if (systemProperties != null) {
    throw new XMLStreamException(element.getLocalName() + " already declared",reader.getLocation());
  }
  systemProperties=parseProperties(reader,Element.PROPERTY,true);
  for (  final PropertyAdd propertyUpdate : systemProperties) {
    list.add(DomainServerGroupUpdate.create(name,new ServerGroupPropertiesUpdate(name,propertyUpdate)));
  }
  break;
}
default :
throw ParseUtils.unexpectedElement(reader);
}
break;
}
default :
throw ParseUtils.unexpectedElement(reader);
}
}
}
}
