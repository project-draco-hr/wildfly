{
  OptionMap.Builder builder=OptionMap.builder().addAll(socketOptions);
  HttpsListenerResourceDefinition.VERIFY_CLIENT.resolveOption(context,model,builder);
  ModelNode value=HttpsListenerResourceDefinition.ENABLED_CIPHER_SUITES.resolveModelAttribute(context,model);
  if (value.isDefined()) {
    String[] cipherList;
    String ciphers=value.asString();
    if (!("ALL".equals(ciphers)) && ciphers.indexOf(':') == -1) {
      cipherList=ciphers.split("\\s*,\\s*");
    }
 else {
      List<String> temp=OpenSSLCipherConfigurationParser.parseExpression(ciphers);
      cipherList=temp.toArray(new String[temp.size()]);
    }
    builder.setSequence((Option<Sequence<String>>)HttpsListenerResourceDefinition.ENABLED_CIPHER_SUITES.getOption(),cipherList);
  }
  HttpsListenerResourceDefinition.ENABLED_PROTOCOLS.resolveOption(context,model,builder);
  HttpsListenerResourceDefinition.SSL_SESSION_CACHE_SIZE.resolveOption(context,model,builder);
  HttpsListenerResourceDefinition.SSL_SESSION_TIMEOUT.resolveOption(context,model,builder);
  OptionMap.Builder listenerBuilder=OptionMap.builder().addAll(listenerOptions);
  HttpsListenerResourceDefinition.ENABLE_HTTP2.resolveOption(context,model,listenerBuilder);
  HttpsListenerResourceDefinition.ENABLE_SPDY.resolveOption(context,model,listenerBuilder);
  return new HttpsListenerService(name,serverName,listenerBuilder.getMap(),builder.getMap());
}
