{
  PathAddress subsystemAddress=PathAddress.pathAddress(SecurityExtension.PATH_SUBSYSTEM);
  PathAddress securityDomain=subsystemAddress.append(SecurityExtension.SECURITY_DOMAIN_PATH);
  PathAddress securityDomainOther=subsystemAddress.append(PathElement.pathElement(SecurityExtension.SECURITY_DOMAIN_PATH.getKey(),"other"));
  FailedOperationTransformationConfig config=new FailedOperationTransformationConfig();
  config.addFailedAttribute(subsystemAddress,new RejectExpressionsConfig(SecuritySubsystemRootResourceDefinition.DEEP_COPY_SUBJECT_MODE));
  config.addFailedAttribute(securityDomain,new RejectExpressionsConfig(SecurityDomainResourceDefinition.CACHE_TYPE));
  config.addFailedAttribute(securityDomainOther.append(SecurityExtension.JSSE_PATH),new RejectExpressionsConfig(JSSEResourceDefinition.ADDITIONAL_PROPERTIES));
  config.addFailedAttribute(subsystemAddress.append(SecurityExtension.VAULT_PATH),new RejectExpressionsConfig(VaultResourceDefinition.OPTIONS));
  PathAddress securityDomainOtherClassicAuthentication=securityDomainOther.append(SecurityExtension.PATH_CLASSIC_AUTHENTICATION);
  PathAddress securityDomainOtherClassicAuthenticationLoginRemoting=securityDomainOtherClassicAuthentication.append(PathElement.pathElement(Constants.LOGIN_MODULE,"Remoting"));
  config.addFailedAttribute(securityDomainOtherClassicAuthenticationLoginRemoting,createCorrectModelRejectExpressionsConfig(mainServices,securityDomainOtherClassicAuthenticationLoginRemoting,Constants.FLAG,Constants.MODULE_OPTIONS));
  PathAddress securityDomainOtherJaspiAuthentication=securityDomainOtherClassicAuthentication.append(PathElement.pathElement(Constants.LOGIN_MODULE,"lm"));
  config.addFailedAttribute(securityDomainOtherJaspiAuthentication,createCorrectModelRejectExpressionsConfig(mainServices,securityDomainOtherJaspiAuthentication,Constants.FLAG,Constants.MODULE_OPTIONS));
  PathAddress securityDomainOtherClassicAuthenticationLoginRealmUsersRoles=securityDomainOtherClassicAuthentication.append(PathElement.pathElement(Constants.LOGIN_MODULE,"RealmUsersRoles"));
  config.addFailedAttribute(securityDomainOtherClassicAuthenticationLoginRealmUsersRoles,createCorrectModelRejectExpressionsConfig(mainServices,securityDomainOtherClassicAuthenticationLoginRealmUsersRoles,Constants.MODULE_OPTIONS));
  PathAddress securityDomainOtherClassicAuthorizationPolicyDenyAll=securityDomainOther.append(SecurityExtension.PATH_AUTHORIZATION_CLASSIC,PathElement.pathElement(Constants.POLICY_MODULE,"DenyAll"));
  config.addFailedAttribute(securityDomainOtherClassicAuthorizationPolicyDenyAll,createCorrectModelRejectExpressionsConfig(mainServices,securityDomainOtherClassicAuthorizationPolicyDenyAll,Constants.FLAG,Constants.MODULE_OPTIONS));
  PathAddress securityDomainOtherClassicAcl=securityDomainOther.append(SecurityExtension.ACL_PATH,PathElement.pathElement(Constants.ACL_MODULE,"acl"));
  config.addFailedAttribute(securityDomainOtherClassicAcl,createCorrectModelRejectExpressionsConfig(mainServices,securityDomainOtherClassicAcl,Constants.FLAG,Constants.MODULE_OPTIONS));
  PathAddress securityDomainOtherMappingClassicMapping=securityDomainOther.append(SecurityExtension.PATH_MAPPING_CLASSIC,PathElement.pathElement(Constants.MAPPING_MODULE,"test"));
  config.addFailedAttribute(securityDomainOtherMappingClassicMapping,createCorrectModelRejectExpressionsConfig(mainServices,securityDomainOtherMappingClassicMapping,Constants.TYPE,Constants.MODULE_OPTIONS));
  PathAddress securityDomainOtherAudit=securityDomainOther.append(SecurityExtension.PATH_AUDIT_CLASSIC,PathElement.pathElement(Constants.PROVIDER_MODULE,"customModule"));
  config.addFailedAttribute(securityDomainOtherAudit,createCorrectModelRejectExpressionsConfig(mainServices,securityDomainOtherAudit,Constants.MODULE_OPTIONS));
  PathAddress securityDomainOtherIdentity=securityDomainOther.append(SecurityExtension.PATH_IDENTITY_TRUST_CLASSIC,PathElement.pathElement(Constants.TRUST_MODULE,"IdentityThingy"));
  config.addFailedAttribute(securityDomainOtherIdentity,createCorrectModelRejectExpressionsConfig(mainServices,securityDomainOtherIdentity,Constants.FLAG,Constants.MODULE_OPTIONS));
  PathAddress jaspiAuthenticationAuthModule=subsystemAddress.append(PathElement.pathElement(Constants.SECURITY_DOMAIN,"jaspi-test"),SecurityExtension.PATH_JASPI_AUTH,PathElement.pathElement(Constants.AUTH_MODULE,"org.jboss.as.web.security.jaspi.modules.HTTPBasicServerAuthModule"));
  config.addFailedAttribute(jaspiAuthenticationAuthModule,ChainedConfig.createBuilder(Constants.FLAG,Constants.MODULE_OPTIONS,Constants.MODULE).addConfig(new CorrectModelConfig(mainServices,jaspiAuthenticationAuthModule,Constants.FLAG)).addConfig(new CorrectModelConfig(mainServices,jaspiAuthenticationAuthModule,Constants.MODULE_OPTIONS)).addConfig(new NewAttributesConfig(Constants.MODULE)).build());
  return config;
}
