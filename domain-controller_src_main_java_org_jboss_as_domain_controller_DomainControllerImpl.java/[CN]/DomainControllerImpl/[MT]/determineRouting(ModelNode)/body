{
  OperationRouting routing;
  String targetHost=null;
  List<Property> address=operation.hasDefined(OP_ADDR) ? operation.get(OP_ADDR).asPropertyList() : EMPTY_ADDRESS;
  if (address.size() > 0) {
    Property first=address.get(0);
    if (HOST.equals(first.getName())) {
      targetHost=first.getValue().asString();
    }
  }
  if (localHostName.equals(targetHost)) {
    if (isReadOnly(operation,address)) {
      return new OperationRouting(false);
    }
    if (address.size() > 1) {
      Property first=address.get(1);
      if (SERVER.equals(first.getName())) {
        return new OperationRouting(false);
      }
    }
    routing=new OperationRouting(Collections.singleton(targetHost));
  }
 else   if (masterDomainControllerClient != null) {
    routing=new OperationRouting(true);
  }
 else   if (targetHost != null) {
    List<String> hosts=Collections.singletonList(targetHost);
    routing=new OperationRouting(hosts);
  }
 else   if (isReadOnly(operation,address)) {
    routing=new OperationRouting(false);
  }
 else   if (COMPOSITE.equals(operation.require(OP).asString())) {
    if (operation.hasDefined(STEPS)) {
      Set<String> allHosts=new HashSet<String>();
      boolean routeToMaster=false;
      boolean hasLocal=false;
      for (      ModelNode step : operation.get(STEPS).asList()) {
        OperationRouting stepRouting=determineRouting(step);
        if (stepRouting.isRouteToMaster()) {
          routeToMaster=true;
          break;
        }
 else         if (stepRouting.isLocalOnly()) {
          hasLocal=true;
        }
 else {
          allHosts.addAll(stepRouting.getHosts());
        }
      }
      if (routeToMaster) {
        routing=new OperationRouting(true);
      }
 else       if (allHosts.size() == 0) {
        routing=new OperationRouting(false);
      }
 else {
        if (hasLocal) {
          allHosts.add(localHostName);
        }
        routing=new OperationRouting(allHosts);
      }
    }
 else {
      routing=new OperationRouting(false);
    }
  }
 else {
    routing=new OperationRouting(this.hosts.keySet());
  }
  return routing;
}
