{
  OperationRouting routing;
  String targetHost=null;
  PathAddress address=PathAddress.pathAddress(operation.get(OP_ADDR));
  if (address.size() > 0) {
    PathElement first=address.getElement(0);
    if (HOST.equals(first.getKey())) {
      targetHost=first.getValue();
    }
  }
  if (targetHost != null) {
    routing=null;
    if (isReadOnly(operation,address)) {
      routing=new OperationRouting(targetHost,false);
    }
 else     if (address.size() > 1) {
      PathElement first=address.getElement(1);
      if (SERVER.equals(first.getKey())) {
        routing=new OperationRouting(targetHost,false);
      }
    }
    if (routing == null) {
      final String operationName=operation.get(OP).asString();
      if ("start".equals(operationName) || "stop".equals(operationName) || "restart".equals(operationName)) {
        routing=new OperationRouting(targetHost,false);
      }
 else {
        routing=new OperationRouting(targetHost,true);
      }
    }
  }
 else   if (masterDomainControllerClient != null) {
    routing=new OperationRouting();
  }
 else   if (isReadOnly(operation,address)) {
    routing=new OperationRouting(localHostName,false);
  }
 else   if (COMPOSITE.equals(operation.require(OP).asString())) {
    if (operation.hasDefined(STEPS)) {
      Set<String> allHosts=new HashSet<String>();
      boolean twoStep=false;
      for (      ModelNode step : operation.get(STEPS).asList()) {
        OperationRouting stepRouting=determineRouting(step);
        if (stepRouting.isTwoStep()) {
          twoStep=true;
        }
        allHosts.addAll(stepRouting.getHosts());
      }
      if (allHosts.size() == 1) {
        routing=new OperationRouting(allHosts.iterator().next(),twoStep);
      }
 else {
        routing=new OperationRouting(allHosts);
      }
    }
 else {
      routing=new OperationRouting(localHostName,false);
    }
  }
 else {
    routing=new OperationRouting(this.hosts.keySet());
  }
  return routing;
}
