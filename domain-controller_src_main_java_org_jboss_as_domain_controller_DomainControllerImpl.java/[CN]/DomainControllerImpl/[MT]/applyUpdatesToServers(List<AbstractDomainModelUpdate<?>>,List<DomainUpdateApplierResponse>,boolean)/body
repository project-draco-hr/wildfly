{
  List<DomainUpdateResult<?>> result;
  final Map<AbstractDomainModelUpdate<?>,AbstractServerModelUpdate<?>> serverByDomain=new HashMap<AbstractDomainModelUpdate<?>,AbstractServerModelUpdate<?>>();
  final Map<AbstractServerModelUpdate<?>,DomainUpdateResult<Object>> resultsByUpdate=new HashMap<AbstractServerModelUpdate<?>,DomainUpdateResult<Object>>();
  for (int i=0; i < updates.size(); i++) {
    final AbstractDomainModelUpdate<?> domainUpdate=updates.get(i);
    final AbstractServerModelUpdate<?> serverUpdate=domainUpdate.getServerModelUpdate();
    if (serverUpdate != null) {
      serverByDomain.put(domainUpdate,serverUpdate);
      resultsByUpdate.put(serverUpdate,new DomainUpdateResult<Object>());
    }
  }
  final Map<ServerIdentity,List<AbstractServerModelUpdate<?>>> updatesByServer=getUpdatesByServer(updates,domainResults,serverByDomain);
  log.debugf("updates affect %s",updatesByServer.keySet());
  for (  final Map.Entry<ServerIdentity,List<AbstractServerModelUpdate<?>>> entry : updatesByServer.entrySet()) {
    final ServerIdentity server=entry.getKey();
    final List<AbstractServerModelUpdate<?>> serverUpdates=entry.getValue();
    final List<UpdateResultHandlerResponse<?>> rsps=applyUpdatesToServer(server,serverUpdates,allowOverallRollback);
    for (int i=0; i < serverUpdates.size(); i++) {
      final UpdateResultHandlerResponse<?> rsp=rsps.get(i);
      final AbstractServerModelUpdate<?> serverUpdate=entry.getValue().get(i);
      DomainUpdateResult<Object> dur=resultsByUpdate.get(serverUpdate);
      if (rsp.isCancelled()) {
        dur=dur.newWithAddedCancellation(server);
      }
 else       if (rsp.isTimedOut()) {
        dur=dur.newWithAddedTimeout(server);
      }
 else       if (rsp.isRolledBack()) {
        dur=dur.newWithAddedRollback(server);
      }
 else       if (rsp.getFailureResult() != null) {
        dur=dur.newWithAddedFailure(server,rsp.getFailureResult());
      }
 else {
        dur=dur.newWithAddedResult(server,rsp.getSuccessResult());
      }
      resultsByUpdate.put(serverUpdate,dur);
    }
  }
  result=new ArrayList<DomainUpdateResult<?>>();
  for (  final AbstractDomainModelUpdate<?> domainUpdate : updates) {
    final AbstractServerModelUpdate<?> serverUpdate=serverByDomain.get(domainUpdate);
    DomainUpdateResult<?> dur=resultsByUpdate.get(serverUpdate);
    if (dur == null) {
      dur=new DomainUpdateResult<Object>();
    }
    result.add(dur);
  }
  return result;
}
