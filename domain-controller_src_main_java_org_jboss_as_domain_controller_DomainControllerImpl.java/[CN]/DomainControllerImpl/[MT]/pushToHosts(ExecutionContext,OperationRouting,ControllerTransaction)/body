{
  final Map<String,ModelNode> hostResults=new HashMap<String,ModelNode>();
  final Map<String,Future<OperationResult>> futures=new HashMap<String,Future<OperationResult>>();
  final Set<String> targets=routing.getHosts();
  if (targets.remove(localHostName)) {
    pushToHost(executionContext,transaction,localHostName,hostResults,futures);
    processHostFuture(localHostName,futures.remove(localHostName),hostResults);
    ModelNode hostResult=hostResults.get(localHostName);
    if (!transaction.isRollbackOnly()) {
      if (hostResult.hasDefined(OUTCOME) && "failed".equals(hostResult.get(OUTCOME).asString())) {
        transaction.setRollbackOnly();
      }
    }
  }
  if (!transaction.isRollbackOnly()) {
    for (    final String host : targets) {
      pushToHost(executionContext,transaction,host,hostResults,futures);
    }
    log.debugf("Domain updates pushed to %s host controller(s)",futures.size());
    for (    final Map.Entry<String,Future<OperationResult>> entry : futures.entrySet()) {
      String host=entry.getKey();
      Future<OperationResult> future=entry.getValue();
      processHostFuture(host,future,hostResults);
    }
  }
  return hostResults;
}
