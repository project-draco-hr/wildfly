{
  ModelNode result=null;
  if (isMultistepOperation(operation)) {
    SortedSet<String> keys=new TreeSet<String>(operation.get(STEPS).keys());
    Map<String,ModelNode> compSteps=new HashMap<String,ModelNode>();
    ModelNode masterResult=hostResults.get(localHostName);
    if (masterResult != null && !IGNORED.equals(masterResult.get(OUTCOME).asString()) && masterResult.hasDefined(COMPENSATING_OPERATION)) {
      for (      Property prop : masterResult.get(COMPENSATING_OPERATION).asPropertyList()) {
        ModelNode value=prop.getValue();
        if (value.getType() == ModelType.OBJECT) {
          compSteps.put(prop.getName(),value);
        }
      }
    }
    if (compSteps.size() < keys.size()) {
      for (      ModelNode hostResult : hostResults.values()) {
        if (hostResult != null && !IGNORED.equals(hostResult.get(OUTCOME).asString()) && hostResult.hasDefined(COMPENSATING_OPERATION)) {
          for (          Property prop : masterResult.get(COMPENSATING_OPERATION).asPropertyList()) {
            if (!compSteps.containsKey(prop.getName())) {
              ModelNode value=prop.getValue();
              if (value.getType() == ModelType.OBJECT) {
                compSteps.put(prop.getName(),value);
              }
            }
          }
        }
      }
    }
    result=new ModelNode();
    for (    String step : keys) {
      ModelNode stepComp=compSteps.get(step);
      if (stepComp != null && stepComp.isDefined()) {
        result.add(stepComp);
      }
    }
  }
 else {
    ModelNode masterResult=hostResults.get(localHostName);
    if (masterResult != null && !IGNORED.equals(masterResult.get(OUTCOME).asString())) {
      result=masterResult.get(COMPENSATING_OPERATION);
    }
    if (result == null) {
      for (      ModelNode hostResult : hostResults.values()) {
        if (hostResult != null && !IGNORED.equals(hostResult.get(OUTCOME).asString())) {
          result=hostResult.get(COMPENSATING_OPERATION);
          break;
        }
      }
    }
  }
  return result;
}
