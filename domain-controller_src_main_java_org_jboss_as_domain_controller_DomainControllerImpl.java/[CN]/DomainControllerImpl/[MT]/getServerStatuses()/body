{
  final Map<ServerIdentity,ServerStatus> result=new HashMap<ServerIdentity,ServerStatus>();
  final Map<String,Future<Map<ServerIdentity,ServerStatus>>> futures=new HashMap<String,Future<Map<ServerIdentity,ServerStatus>>>();
  for (  final Map.Entry<String,HostControllerClient> entry : clients.entrySet()) {
    final HostControllerClient client=entry.getValue();
    final Callable<Map<ServerIdentity,ServerStatus>> callable=new Callable<Map<ServerIdentity,ServerStatus>>(){
      @Override public Map<ServerIdentity,ServerStatus> call(){
        return client.getServerStatuses();
      }
    }
;
    futures.put(entry.getKey(),scheduledExecutorService.getValue().submit(callable));
  }
  for (  final Map.Entry<String,Future<Map<ServerIdentity,ServerStatus>>> entry : futures.entrySet()) {
    try {
      final Map<ServerIdentity,ServerStatus> map=entry.getValue().get();
      if (map != null) {
        result.putAll(map);
      }
    }
 catch (    final InterruptedException e) {
      log.errorf("Interrupted while reading server statuses from host controller %s -- aborting",entry.getKey());
      Thread.currentThread().interrupt();
      break;
    }
catch (    final ExecutionException e) {
      log.errorf(e,"Caught exception while reading server statuses from host controller %s -- ignoring that host controller",entry.getKey());
    }
  }
  return result;
}
