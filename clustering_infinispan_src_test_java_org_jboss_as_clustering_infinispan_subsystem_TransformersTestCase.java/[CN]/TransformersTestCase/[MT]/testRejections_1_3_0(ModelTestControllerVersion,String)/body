{
  ModelVersion version_1_3_0=ModelVersion.create(1,3,0);
  KernelServicesBuilder builderA=createKernelServicesBuilder(AdditionalInitialization.MANAGEMENT);
  LegacyKernelServicesInitializer legacyInitializerA=builderA.createLegacyKernelServicesBuilder(null,controllerVersion,version_1_3_0);
  for (  String mavenResourceURL : mavenResourceURLs) {
    legacyInitializerA.addMavenResourceURL(mavenResourceURL);
  }
  legacyInitializerA.dontPersistXml();
  KernelServices mainServicesA=builderA.build();
  KernelServices legacyServicesA=mainServicesA.getLegacyServices(version_1_3_0);
  Assert.assertNotNull(legacyServicesA);
  Assert.assertTrue("main services did not boot",mainServicesA.isSuccessfulBoot());
  Assert.assertTrue(legacyServicesA.isSuccessfulBoot());
  List<ModelNode> xmlOps_expressions=builderA.parseXmlResource("infinispan-transformer-2_0-expressions.xml");
  ModelTestUtils.checkFailedTransformedBootOperations(mainServicesA,version_1_3_0,xmlOps_expressions,getFailedOperationConfig130());
  mainServicesA.shutdown();
  KernelServicesBuilder builderB=createKernelServicesBuilder(AdditionalInitialization.MANAGEMENT);
  LegacyKernelServicesInitializer legacyInitializerB=builderB.createLegacyKernelServicesBuilder(null,controllerVersion,version_1_3_0);
  for (  String mavenResourceURL : mavenResourceURLs) {
    legacyInitializerB.addMavenResourceURL(mavenResourceURL);
  }
  legacyInitializerB.dontPersistXml();
  KernelServices mainServicesB=builderB.build();
  KernelServices legacyServicesB=mainServicesB.getLegacyServices(version_1_3_0);
  Assert.assertNotNull(legacyServicesB);
  Assert.assertTrue("main services did not boot",mainServicesB.isSuccessfulBoot());
  Assert.assertTrue(legacyServicesB.isSuccessfulBoot());
  List<ModelNode> xmlOps_backup=builderB.parseXmlResource("infinispan-transformer-2_0-backup.xml");
  ModelTestUtils.checkFailedTransformedBootOperations(mainServicesB,version_1_3_0,xmlOps_backup,getFailedOperationConfig130());
  mainServicesB.shutdown();
}
