{
  ModelVersion version=InfinispanModel.VERSION_1_3_0.getVersion();
  KernelServicesBuilder builderA=this.createKernelServicesBuilder();
  builderA.createLegacyKernelServicesBuilder(AdditionalInitialization.MANAGEMENT,controllerVersion,version).addMavenResourceURL(mavenResourceURLs).dontPersistXml();
  KernelServices mainServicesA=builderA.build();
  KernelServices legacyServicesA=mainServicesA.getLegacyServices(version);
  Assert.assertNotNull(legacyServicesA);
  Assert.assertTrue("main services did not boot",mainServicesA.isSuccessfulBoot());
  Assert.assertTrue(legacyServicesA.isSuccessfulBoot());
  List<ModelNode> xmlOps_expressions=builderA.parseXmlResource("infinispan-transformer-expressions.xml");
  ModelTestUtils.checkFailedTransformedBootOperations(mainServicesA,version,xmlOps_expressions,getFailedOperationConfig130());
  mainServicesA.shutdown();
  KernelServicesBuilder builderB=this.createKernelServicesBuilder();
  builderB.createLegacyKernelServicesBuilder(AdditionalInitialization.MANAGEMENT,controllerVersion,version).addMavenResourceURL(mavenResourceURLs).dontPersistXml();
  KernelServices mainServicesB=builderB.build();
  KernelServices legacyServicesB=mainServicesB.getLegacyServices(version);
  Assert.assertNotNull(legacyServicesB);
  Assert.assertTrue("main services did not boot",mainServicesB.isSuccessfulBoot());
  Assert.assertTrue(legacyServicesB.isSuccessfulBoot());
  List<ModelNode> xmlOps_backup=builderB.parseXmlResource("infinispan-transformer-backup.xml");
  ModelTestUtils.checkFailedTransformedBootOperations(mainServicesB,version,xmlOps_backup,getFailedOperationConfig130());
  mainServicesB.shutdown();
}
