{
  ModelVersion version=InfinispanModel.VERSION_1_4_0.getVersion();
  KernelServices services=this.buildKernelServices(controllerVersion,version,mavenResourceURLs);
  checkSubsystemModelTransformation(services,version,new VirtualNodesModelFixer());
  PathAddress address=PathAddress.pathAddress(InfinispanSubsystemResourceDefinition.PATH,CacheContainerResourceDefinition.pathElement("container"),DistributedCacheResourceDefinition.pathElement("cache"));
  ModelNode operation=Util.createAddOperation(address);
  operation.get(DistributedCacheResourceDefinition.VIRTUAL_NODES.getName()).set(4);
  operation.get(CacheResourceDefinition.STATISTICS_ENABLED.getName()).set(true);
  OperationTransformer.TransformedOperation transformedOperation=services.transformOperation(version,operation);
  Assert.assertFalse(transformedOperation.getTransformedOperation().has(DistributedCacheResourceDefinition.VIRTUAL_NODES.getName()));
  Assert.assertEquals(24,transformedOperation.getTransformedOperation().get(DistributedCacheResourceDefinition.SEGMENTS.getName()).asInt());
  ModelNode result=new ModelNode();
  result.get(OUTCOME).set(SUCCESS);
  result.get(RESULT);
  Assert.assertFalse(transformedOperation.rejectOperation(result));
  Assert.assertEquals(result,transformedOperation.transformResult(result));
  operation=OperationFactory.createWriteAttributeOperation(address,DistributedCacheResourceDefinition.VIRTUAL_NODES.getName(),new ModelNode(4));
  transformedOperation=services.transformOperation(version,operation);
  Assert.assertEquals(DistributedCacheResourceDefinition.SEGMENTS.getName(),transformedOperation.getTransformedOperation().get(NAME).asString());
  Assert.assertEquals(24,transformedOperation.getTransformedOperation().get(VALUE).asInt());
  Assert.assertFalse(transformedOperation.rejectOperation(result));
  Assert.assertEquals(result,transformedOperation.transformResult(result));
}
