{
  ModelVersion version=model.getVersion();
  KernelServices services=this.buildKernelServices(controller,version,dependencies);
  checkSubsystemModelTransformation(services,version,createModelFixer(model),false);
  ModelNode transformed=services.readTransformedModel(version);
  if (InfinispanModel.VERSION_3_0_0.requiresTransformation(version)) {
    ModelNode cache=transformed.get(InfinispanSubsystemResourceDefinition.PATH.getKeyValuePair()).get(CacheContainerResourceDefinition.pathElement("maximal").getKeyValuePair()).get(CacheType.LOCAL.pathElement("local").getKeyValuePair());
    Assert.assertTrue(cache.hasDefined(CacheResourceDefinition.BATCHING.getName()));
    Assert.assertTrue(cache.get(CacheResourceDefinition.BATCHING.getName()).asBoolean());
    ModelNode transaction=cache.get(TransactionResourceDefinition.PATH.getKeyValuePair());
    if (transaction.hasDefined(TransactionResourceDefinition.MODE.getName())) {
      Assert.assertEquals(TransactionMode.NONE.name(),transaction.get(TransactionResourceDefinition.MODE.getName()).asString());
    }
  }
  if (InfinispanModel.VERSION_1_4_0.requiresTransformation(version)) {
    ModelNode cache=transformed.get(InfinispanSubsystemResourceDefinition.PATH.getKeyValuePair()).get(CacheContainerResourceDefinition.pathElement("maximal").getKeyValuePair()).get(CacheType.DISTRIBUTED.pathElement("dist").getKeyValuePair());
    Assert.assertFalse(cache.has(ModelKeys.INDEXING_PROPERTIES));
    Assert.assertFalse(cache.has(ModelKeys.SEGMENTS));
    Assert.assertTrue(cache.get(ModelKeys.VIRTUAL_NODES).isDefined());
  }
 else   if (InfinispanModel.VERSION_1_4_1.requiresTransformation(version)) {
    PathAddress address=PathAddress.pathAddress(InfinispanSubsystemResourceDefinition.PATH,CacheContainerResourceDefinition.pathElement("container"),CacheType.DISTRIBUTED.pathElement("cache"));
    ModelNode operation=Util.createAddOperation(address);
    operation.get(DistributedCacheResourceDefinition.VIRTUAL_NODES.getName()).set(4);
    operation.get(CacheResourceDefinition.STATISTICS_ENABLED.getName()).set(true);
    OperationTransformer.TransformedOperation transformedOperation=services.transformOperation(version,operation);
    Assert.assertFalse(transformedOperation.getTransformedOperation().has(DistributedCacheResourceDefinition.VIRTUAL_NODES.getName()));
    Assert.assertEquals(24,transformedOperation.getTransformedOperation().get(DistributedCacheResourceDefinition.SEGMENTS.getName()).asInt());
    ModelNode result=new ModelNode();
    result.get(OUTCOME).set(SUCCESS);
    result.get(RESULT);
    Assert.assertFalse(transformedOperation.rejectOperation(result));
    Assert.assertEquals(result,transformedOperation.transformResult(result));
    operation=Operations.createWriteAttributeOperation(address,DistributedCacheResourceDefinition.VIRTUAL_NODES.getName(),new ModelNode(4));
    transformedOperation=services.transformOperation(version,operation);
    Assert.assertEquals(DistributedCacheResourceDefinition.SEGMENTS.getName(),transformedOperation.getTransformedOperation().get(NAME).asString());
    Assert.assertEquals(24,transformedOperation.getTransformedOperation().get(VALUE).asInt());
    Assert.assertFalse(transformedOperation.rejectOperation(result));
    Assert.assertEquals(result,transformedOperation.transformResult(result));
  }
}
