{
  ModelVersion version130=ModelVersion.create(1,3);
  KernelServicesBuilder builder=createKernelServicesBuilder(AdditionalInitialization.MANAGEMENT);
  builder.setSubsystemXml(getSubsystemXml());
  builder.createLegacyKernelServicesBuilder(null,controllerVersion,version130).addMavenResourceURL(mavenResourceURLs).configureReverseControllerCheck(null,new FixReverseControllerModel130()).dontPersistXml();
  KernelServices mainServices=builder.build();
  Assert.assertTrue("main services did not boot",mainServices.isSuccessfulBoot());
  Assert.assertTrue(mainServices.getLegacyServices(version130).isSuccessfulBoot());
  checkSubsystemModelTransformation(mainServices,version130);
  ModelNode model=mainServices.readTransformedModel(version130);
  ModelNode distCache=model.get(SUBSYSTEM,"infinispan",ModelKeys.CACHE_CONTAINER,"maximal",ModelKeys.DISTRIBUTED_CACHE,"dist");
  Assert.assertFalse(distCache.has(ModelKeys.INDEXING_PROPERTIES));
  Assert.assertFalse(distCache.has(ModelKeys.SEGMENTS));
  Assert.assertTrue(distCache.get(ModelKeys.VIRTUAL_NODES).isDefined());
}
