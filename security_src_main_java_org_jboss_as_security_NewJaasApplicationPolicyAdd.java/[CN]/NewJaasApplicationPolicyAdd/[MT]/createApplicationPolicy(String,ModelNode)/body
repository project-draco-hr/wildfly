{
  Set<String> keys=new HashSet<String>(operation.keys());
  keys.remove(OP);
  keys.remove(OP_ADDR);
  keys.remove(NAME);
  keys.remove(Element.AUTHENTICATION.getLocalName());
  if (!keys.isEmpty()) {
    throw new UnsupportedOperationException("NYI: full handling of JAAS application policies");
  }
  ApplicationPolicy applicationPolicy=new ApplicationPolicy(policyName);
  ModelNode authenticationNode=operation.get(Element.AUTHENTICATION.getLocalName());
  AuthenticationInfo authInfo=new AuthenticationInfo();
  List<ModelNode> modules=authenticationNode.asList();
  for (  ModelNode module : modules) {
    String codeName=module.require(Attribute.CODE.getLocalName()).asString();
    LoginModuleControlFlag controlFlag=getControlFlag(module.require(Attribute.FLAG.getLocalName()).asString());
    Map<String,String> options=new HashMap<String,String>();
    if (module.hasDefined(MODULE_OPTIONS)) {
      for (      Property prop : module.get(MODULE_OPTIONS).asPropertyList()) {
        options.put(prop.getName(),prop.getValue().asString());
      }
    }
    authInfo.addAppConfigurationEntry(new AppConfigurationEntry(codeName,controlFlag,options));
  }
  applicationPolicy.setAuthenticationInfo(authInfo);
  return applicationPolicy;
}
