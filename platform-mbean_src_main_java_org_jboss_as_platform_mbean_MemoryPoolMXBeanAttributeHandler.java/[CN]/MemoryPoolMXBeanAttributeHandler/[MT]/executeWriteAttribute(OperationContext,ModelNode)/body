{
  final String memPoolName=PathAddress.pathAddress(operation.require(ModelDescriptionConstants.OP_ADDR)).getLastElement().getValue();
  MemoryPoolMXBean memoryPoolMXBean=getMemoryPoolMXBean(memPoolName);
  final String name=operation.require(ModelDescriptionConstants.NAME).asString();
  try {
    if (PlatformMBeanConstants.USAGE_THRESHOLD.equals(name)) {
      usageValidator.validate(operation);
      memoryPoolMXBean.setUsageThreshold(operation.require(ModelDescriptionConstants.VALUE).asLong());
    }
 else     if (PlatformMBeanConstants.COLLECTION_USAGE_THRESHOLD.equals(name)) {
      usageValidator.validate(operation);
      memoryPoolMXBean.setCollectionUsageThreshold(operation.require(ModelDescriptionConstants.VALUE).asLong());
    }
 else     if (PlatformMBeanConstants.MEMORY_POOL_READ_WRITE_ATTRIBUTES.contains(name)) {
      throw new IllegalStateException(String.format("Write support for attribute %s was not properly implemented",name));
    }
 else {
      throw unknownAttribute(operation);
    }
  }
 catch (  SecurityException e) {
    throw new OperationFailedException(new ModelNode().set(e.toString()));
  }
catch (  UnsupportedOperationException e) {
    throw new OperationFailedException(new ModelNode().set(e.toString()));
  }
}
