{
  MetaDataElementParser.requireNoAttributes(reader);
  String permissionClass=null;
  String permissionName=null;
  String permissionActions=null;
  EnumSet<Element> requiredElements=EnumSet.of(Element.CLASS_NAME);
  while (reader.hasNext()) {
switch (reader.nextTag()) {
case XMLStreamConstants.END_ELEMENT:
{
        if (!requiredElements.isEmpty())         throw missingRequiredElement(reader,requiredElements);
        PermissionFactory factory=new ModularPermissionFactory(loader,identifier,permissionClass,permissionName,permissionActions);
        return factory;
      }
case XMLStreamConstants.START_ELEMENT:
{
      Element element=Element.forName(reader.getLocalName());
      requiredElements.remove(element);
switch (element) {
case CLASS_NAME:
{
          MetaDataElementParser.requireNoAttributes(reader);
          permissionClass=reader.getElementText();
          break;
        }
case NAME:
{
        MetaDataElementParser.requireNoAttributes(reader);
        permissionName=reader.getElementText();
        break;
      }
case ACTIONS:
{
      MetaDataElementParser.requireNoAttributes(reader);
      permissionActions=reader.getElementText();
      break;
    }
default :
{
    throw MetaDataElementParser.unexpectedElement(reader);
  }
}
break;
}
default :
{
throw unexpectedContent(reader);
}
}
}
throw endOfDocument(reader.getLocation());
}
