{
  List<PermissionFactory> factories=new ArrayList<PermissionFactory>();
  EnumSet<Attribute> requiredAttributes=EnumSet.of(Attribute.VERSION);
  for (int i=0; i < reader.getAttributeCount(); i++) {
    final String attributeNamespace=reader.getAttributeNamespace(i);
    if (attributeNamespace != null && !attributeNamespace.isEmpty()) {
      continue;
    }
    Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case VERSION:
{
        String version=reader.getAttributeValue(i);
        if (!"7".equals(version))         throw SecurityManagerMessages.MESSAGES.invalidPermissionsXMLVersion(version,"7");
        break;
      }
default :
{
      throw MetaDataElementParser.unexpectedAttribute(reader,i);
    }
}
requiredAttributes.remove(attribute);
}
if (!requiredAttributes.isEmpty()) throw MetaDataElementParser.missingRequired(reader,requiredAttributes);
while (reader.hasNext()) {
switch (reader.nextTag()) {
case XMLStreamConstants.END_ELEMENT:
{
    return factories;
  }
case XMLStreamConstants.START_ELEMENT:
{
  Element element=Element.forName(reader.getLocalName());
switch (element) {
case PERMISSION:
{
      PermissionFactory factory=parsePermission(reader,loader,identifier);
      factories.add(factory);
      break;
    }
default :
{
    throw MetaDataElementParser.unexpectedElement(reader);
  }
}
break;
}
default :
{
throw unexpectedContent(reader);
}
}
}
throw endOfDocument(reader.getLocation());
}
