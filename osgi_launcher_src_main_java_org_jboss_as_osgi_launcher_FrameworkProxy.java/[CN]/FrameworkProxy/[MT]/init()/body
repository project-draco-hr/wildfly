{
  int state=getState();
  if (state == Bundle.STARTING || state == Bundle.ACTIVE || state == Bundle.STOPPING)   return;
  try {
    server.start();
  }
 catch (  Throwable th) {
    throw new BundleException("Cannot start the server",th);
  }
  try {
    ModelControllerClient client=server.getModelControllerClient();
    ModelNode op=createOpNode("subsystem=osgi","activate");
    executeOperation(client,op,true);
  }
 catch (  Throwable th) {
    throw new BundleException("Cannot activate the osgi subsystem",th);
  }
  try {
    ServiceController<BundleContext> controller=(ServiceController<BundleContext>)server.getService(Services.FRAMEWORK_INIT);
    FutureServiceValue<BundleContext> future=new FutureServiceValue<BundleContext>(controller);
    bundleContext=future.get(30,TimeUnit.SECONDS);
  }
 catch (  Throwable th) {
    throw new BundleException("Cannot get bundle context",th);
  }
}
