{
  validator.validate(operation);
  String name=operation.require(NAME).asString();
  String runtimeName=operation.hasDefined(RUNTIME_NAME) ? operation.get(RUNTIME_NAME).asString() : name;
  byte[] hash;
  final ModelNode content=operation.require(CONTENT).clone();
  final ModelNode contentItemNode=content.require(0);
  if (contentItemNode.hasDefined(HASH)) {
    managedContentValidator.validate(contentItemNode);
    hash=contentItemNode.require(HASH).asBytes();
    if (contentRepository != null && !contentRepository.hasContent(hash))     throw createFailureException("No deployment content with hash %s is available in the deployment content repository.",HashUtil.bytesToHexString(hash));
  }
 else   if (hasValidContentAdditionParameterDefined(contentItemNode)) {
    if (contentRepository == null) {
      throw createFailureException("A slave domain controller cannot accept deployment content uploads");
    }
    InputStream in=getInputStream(context,contentItemNode);
    try {
      try {
        hash=contentRepository.addContent(in);
      }
 catch (      IOException e) {
        throw createFailureException(e.toString());
      }
    }
  finally {
      StreamUtils.safeClose(in);
    }
    contentItemNode.get(HASH).set(hash);
  }
 else {
    unmanagedContentValidator.validate(contentItemNode);
  }
  ModelNode rootModel=context.getModel();
  ModelNode deployments=rootModel.get(DEPLOYMENT);
  ModelNode replaceNode=deployments.hasDefined(name) ? deployments.get(name) : null;
  if (replaceNode == null) {
    throw createFailureException("No deployment with name %s found",name);
  }
  final PathAddress address=PathAddress.EMPTY_ADDRESS.append(PathElement.pathElement(DEPLOYMENT,name));
  final ModelNode deployNode=context.readModelForUpdate(address);
  deployNode.get(NAME).set(name);
  deployNode.get(RUNTIME_NAME).set(runtimeName);
  deployNode.get(CONTENT).set(content);
  if (rootModel.hasDefined(SERVER_GROUP)) {
    for (    Property server : rootModel.get(SERVER_GROUP).asPropertyList()) {
      ModelNode serverConfig=server.getValue();
      if (serverConfig.hasDefined(DEPLOYMENT) && serverConfig.get(DEPLOYMENT).hasDefined(name)) {
        ModelNode groupDeployNode=serverConfig.get(DEPLOYMENT,name);
        groupDeployNode.get(RUNTIME_NAME).set(runtimeName);
      }
    }
  }
  removeContentAdditions(deployNode.require(CONTENT));
  context.completeStep();
}
