{
  TesteeSet<T> testeeSet=getTesteeSet(node1,1,3);
  AbstractClusterLockSupport testee=testeeSet.impl;
  GroupRpcDispatcher rpcDispatcher=testee.getGroupRpcDispatcher();
  LocalLockHandler handler=testee.getLocalHandler();
  ClusterNode inferior=testee.getCurrentView().get(2);
  List<RemoteLockResponse> rspList=new ArrayList<RemoteLockResponse>();
  rspList.add(new RemoteLockResponse(null,RemoteLockResponse.Flag.OK));
  rspList.add(new RemoteLockResponse(null,RemoteLockResponse.Flag.REJECT,inferior));
  when(rpcDispatcher.getMethodCallTimeout()).thenReturn(60000l);
  when(rpcDispatcher.callMethodOnCluster(eq("test"),eq("remoteLock"),eqLockParams(node1,200000),aryEq(AbstractClusterLockSupport.REMOTE_LOCK_TYPES),eq(RemoteLockResponse.class),eq(true),eq(NULL_FILTER),anyInt(),eq(false))).thenReturn(rspList);
  when((List<Object>)rpcDispatcher.callMethodOnCluster(eq("test"),eq("releaseRemoteLock"),aryEq(new Object[]{"test",node1}),aryEq(AbstractClusterLockSupport.RELEASE_REMOTE_LOCK_TYPES),eq(true))).thenReturn(new ArrayList<Object>());
  rspList=new ArrayList<RemoteLockResponse>();
  rspList.add(new RemoteLockResponse(null,RemoteLockResponse.Flag.OK));
  rspList.add(new RemoteLockResponse(null,RemoteLockResponse.Flag.OK));
  when(rpcDispatcher.getMethodCallTimeout()).thenReturn(60000l);
  when(rpcDispatcher.callMethodOnCluster(eq("test"),eq("remoteLock"),eqLockParams(node1,200000),aryEq(AbstractClusterLockSupport.REMOTE_LOCK_TYPES),eq(RemoteLockResponse.class),eq(true),eq(NULL_FILTER),anyInt(),eq(false))).thenReturn(rspList);
  assertTrue(testee.lock("test",50));
  verify(handler).lockFromCluster(eq("test"),eq(node1),anyLong());
}
