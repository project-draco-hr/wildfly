{
  final KernelServices kernelServices=boot();
  final ModelNode jobRepositoryAddress=createAddress(null);
  ModelNode op=SubsystemOperations.CompositeOperationBuilder.create().addStep(SubsystemOperations.createRemoveOperation(jobRepositoryAddress)).addStep(SubsystemOperations.createAddOperation(jobRepositoryAddress)).build().getOperation();
  ModelNode result=kernelServices.executeOperation(op);
  Assert.assertTrue(SubsystemOperations.getFailureDescriptionAsString(result),SubsystemOperations.isSuccessfulOutcome(result));
  op=SubsystemOperations.CompositeOperationBuilder.create().addStep(SubsystemOperations.createRemoveOperation(jobRepositoryAddress)).build().getOperation();
  result=kernelServices.executeOperation(op);
  Assert.assertFalse(SubsystemOperations.getFailureDescriptionAsString(result),SubsystemOperations.isSuccessfulOutcome(result));
  final ModelNode threadPoolAddress=createAddress("thread-pool","batch");
  ModelNode addThreadPoolOp=SubsystemOperations.createAddOperation(threadPoolAddress);
  addThreadPoolOp.get("max-threads").set(4);
  op=SubsystemOperations.CompositeOperationBuilder.create().addStep(SubsystemOperations.createRemoveOperation(threadPoolAddress)).addStep(addThreadPoolOp).build().getOperation();
  result=kernelServices.executeOperation(op);
  Assert.assertTrue(SubsystemOperations.getFailureDescriptionAsString(result),SubsystemOperations.isSuccessfulOutcome(result));
  addThreadPoolOp=SubsystemOperations.createAddOperation(createAddress("thread-pool","foo"));
  addThreadPoolOp.get("max-threads").set(4);
  op=SubsystemOperations.CompositeOperationBuilder.create().addStep(SubsystemOperations.createRemoveOperation(threadPoolAddress)).addStep(addThreadPoolOp).build().getOperation();
  result=kernelServices.executeOperation(op);
  Assert.assertFalse(SubsystemOperations.getFailureDescriptionAsString(result),SubsystemOperations.isSuccessfulOutcome(result));
}
