{
  final String fieldName=fieldInfo.name();
  final AnnotationValue declaredNameValue=annotation.value("name");
  final String declaredName=declaredNameValue != null ? declaredNameValue.asString() : null;
  final String localContextName;
  if (declaredName == null || declaredName.isEmpty()) {
    localContextName="java:comp/env/persistence" + "/" + fieldName;
  }
 else {
    localContextName=declaredName;
  }
  final DotName declaredType=fieldInfo.type().name();
  final DotName injectionType=declaredType == null || declaredType.toString().equals(Object.class.getName()) ? fieldInfo.type().name() : declaredType;
  BindingDescription bindingDescription=new BindingDescription(localContextName,componentDescription);
  bindingDescription.setDependency(true);
  final String injectionTypeName=injectionType.toString();
  bindingDescription.setBindingType(injectionTypeName);
  ServiceName injectorName=getInjectorServiceName(deploymentUnit,annotation,componentDescription,phaseContext,fieldName,injectionTypeName);
  bindingDescription.setReferenceSourceDescription(new ServiceBindingSourceDescription(injectorName));
  final InjectionTargetDescription targetDescription=new InjectionTargetDescription();
  targetDescription.setName(fieldName);
  targetDescription.setClassName(fieldInfo.declaringClass().name().toString());
  targetDescription.setType(InjectionTargetDescription.Type.FIELD);
  targetDescription.setValueClassName(injectionTypeName);
  bindingDescription.getInjectionTargetDescriptions().add(targetDescription);
  return bindingDescription;
}
