{
  final String methodName=methodInfo.name();
  if (!methodName.startsWith("set") || methodInfo.args().length != 1) {
    throw new IllegalArgumentException("@PersistenceContext injection target is invalid.  Only setter methods are allowed: " + methodInfo);
  }
  final String contextNameSuffix=methodName.substring(3,4).toLowerCase() + methodName.substring(4);
  final AnnotationValue declaredNameValue=annotation.value("name");
  final String declaredName=declaredNameValue != null ? declaredNameValue.asString() : null;
  final String localContextName;
  if (declaredName == null || declaredName.isEmpty()) {
    localContextName=methodInfo.declaringClass().name().toString() + "/" + contextNameSuffix;
  }
 else {
    localContextName=declaredName;
  }
  final DotName declaredType=methodInfo.returnType().name();
  final DotName injectionType=declaredType == null || declaredType.toString().equals(Object.class.getName()) ? methodInfo.returnType().name() : declaredType;
  final BindingDescription bindingDescription=new BindingDescription();
  bindingDescription.setDependency(true);
  bindingDescription.setBindingName(localContextName);
  final String injectionTypeName=injectionType.toString();
  bindingDescription.setBindingType(injectionTypeName);
  ServiceName injectorName=getInjectorServiceName(deploymentUnit,annotation,componentDescription,phaseContext,methodName);
  bindingDescription.setReferenceSourceDescription(new ServiceBindingSourceDescription(injectorName));
  final InjectionTargetDescription targetDescription=new InjectionTargetDescription();
  targetDescription.setName(methodName);
  targetDescription.setClassName(methodInfo.declaringClass().name().toString());
  targetDescription.setType(InjectionTargetDescription.Type.METHOD);
  targetDescription.setValueClassName(injectionTypeName);
  bindingDescription.getInjectionTargetDescriptions().add(targetDescription);
  return bindingDescription;
}
