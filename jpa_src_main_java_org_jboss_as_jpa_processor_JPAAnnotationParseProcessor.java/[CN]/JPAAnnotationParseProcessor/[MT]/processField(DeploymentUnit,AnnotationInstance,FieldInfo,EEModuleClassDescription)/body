{
  final String fieldName=fieldInfo.name();
  final AnnotationValue declaredNameValue=annotation.value("name");
  final String declaredName=declaredNameValue != null ? declaredNameValue.asString() : null;
  final String localContextName;
  if (declaredName == null || declaredName.isEmpty()) {
    localContextName=fieldName;
  }
 else {
    localContextName=declaredName;
  }
  final DotName declaredTypeDotName=fieldInfo.type().name();
  final DotName injectionTypeDotName=declaredTypeDotName == null || declaredTypeDotName.toString().equals(Object.class.getName()) ? fieldInfo.type().name() : declaredTypeDotName;
  final String injectionType=injectionTypeDotName.toString();
  final InjectionSource bindingSource=this.getBindingSource(deploymentUnit,annotation,injectionType);
  final BindingConfiguration bindingConfiguration=new BindingConfiguration(localContextName,bindingSource);
  eeModuleClassDescription.getConfigurators().add(new ClassConfigurator(){
    @Override public void configure(    DeploymentPhaseContext context,    EEModuleClassDescription description,    EEModuleClassConfiguration configuration) throws DeploymentUnitProcessingException {
      configuration.getBindingConfigurations().add(bindingConfiguration);
    }
  }
);
  final InjectionTarget injectionTarget=new FieldInjectionTarget(fieldName,fieldInfo.declaringClass().name().toString(),fieldInfo.type().name().toString());
  final InjectionSource injectionSource=new LookupInjectionSource(localContextName);
  final ResourceInjectionConfiguration injectionConfiguration=new ResourceInjectionConfiguration(injectionTarget,injectionSource);
  eeModuleClassDescription.getConfigurators().add(new ClassConfigurator(){
    @Override public void configure(    DeploymentPhaseContext context,    EEModuleClassDescription description,    EEModuleClassConfiguration configuration) throws DeploymentUnitProcessingException {
      configuration.getInjectionConfigurations().add(injectionConfiguration);
    }
  }
);
}
