{
  for (  AnnotationInstance annotation : persistenceContexts) {
    ClassInfo declaringClass=null;
    final AnnotationTarget annotationTarget=annotation.target();
    if (annotationTarget instanceof FieldInfo) {
      FieldInfo fieldInfo=(FieldInfo)annotationTarget;
      declaringClass=fieldInfo.declaringClass();
      EEModuleClassDescription eeModuleClassDescription=eeModuleDescription.getOrAddClassByName(declaringClass.name().toString());
      this.processField(deploymentUnit,annotation,fieldInfo,eeModuleClassDescription);
    }
 else     if (annotationTarget instanceof MethodInfo) {
      MethodInfo methodInfo=(MethodInfo)annotationTarget;
      declaringClass=methodInfo.declaringClass();
      EEModuleClassDescription eeModuleClassDescription=eeModuleDescription.getOrAddClassByName(declaringClass.name().toString());
      this.processMethod(deploymentUnit,annotation,methodInfo,eeModuleClassDescription);
    }
 else     if (annotationTarget instanceof ClassInfo) {
      declaringClass=(ClassInfo)annotationTarget;
      EEModuleClassDescription eeModuleClassDescription=eeModuleDescription.getOrAddClassByName(declaringClass.name().toString());
      this.processClass(deploymentUnit,annotation,declaringClass,eeModuleClassDescription);
    }
    if (declaringClass != null) {
      List<ComponentDescription> componentDescriptions=eeModuleDescription.getComponentsByClassName(declaringClass.name().toString());
      for (      ComponentDescription componentDescription : componentDescriptions) {
        if (componentDescription instanceof SessionBeanComponentDescription) {
          this.registerInterceptorsForExtendedPersistenceContext((SessionBeanComponentDescription)componentDescription,annotation);
        }
      }
    }
  }
}
