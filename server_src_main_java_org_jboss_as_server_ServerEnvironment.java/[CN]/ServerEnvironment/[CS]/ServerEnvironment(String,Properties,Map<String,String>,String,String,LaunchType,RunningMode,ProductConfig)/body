{
  if (props == null) {
    throw ControllerLogger.ROOT_LOGGER.nullVar("props");
  }
  this.launchType=launchType;
  this.standalone=launchType != LaunchType.DOMAIN;
  this.initialRunningMode=initialRunningMode == null ? RunningMode.NORMAL : initialRunningMode;
  this.runningModeControl=new RunningModeControl(this.initialRunningMode);
  this.hostControllerName=hostControllerName;
  if (standalone && hostControllerName != null) {
    throw MESSAGES.hostControllerNameNonNullInStandalone();
  }
  if (!standalone && hostControllerName == null) {
    throw MESSAGES.hostControllerNameNullInDomain();
  }
  configureQualifiedHostName(props.getProperty(QUALIFIED_HOST_NAME),props.getProperty(HOST_NAME),props,env);
  javaExtDirs=getFilesFromProperty(JAVA_EXT_DIRS,props);
  homeDir=getFileFromProperty(HOME_DIR,props);
  if (homeDir == null) {
    throw MESSAGES.missingHomeDirConfiguration(HOME_DIR);
  }
  if (!homeDir.exists() || !homeDir.isDirectory()) {
    throw MESSAGES.homeDirectoryDoesNotExist(homeDir);
  }
  @SuppressWarnings("deprecation") File tmp=getFileFromProperty(MODULES_DIR,props);
  if (tmp == null) {
    tmp=new File(homeDir,"modules");
  }
 else   if (!tmp.exists() || !tmp.isDirectory()) {
    throw MESSAGES.modulesDirectoryDoesNotExist(tmp);
  }
  modulesDir=tmp;
  configureBundlesDir(props.getProperty(BUNDLES_DIR),props);
  tmp=getFileFromProperty(SERVER_BASE_DIR,props);
  if (tmp == null) {
    tmp=new File(homeDir,standalone ? "standalone" : "domain/servers/" + serverName);
  }
  if (standalone) {
    if (!tmp.exists()) {
      throw MESSAGES.serverBaseDirectoryDoesNotExist(tmp);
    }
 else     if (!tmp.isDirectory()) {
      throw MESSAGES.serverBaseDirectoryIsNotADirectory(tmp);
    }
  }
 else {
    if (tmp.exists()) {
      if (!tmp.isDirectory()) {
        throw MESSAGES.serverBaseDirectoryIsNotADirectory(tmp);
      }
    }
 else     if (!tmp.mkdirs()) {
      throw MESSAGES.couldNotCreateServerBaseDirectory(tmp);
    }
  }
  serverBaseDir=tmp;
  tmp=getFileFromProperty(SERVER_CONFIG_DIR,props);
  if (tmp == null) {
    tmp=new File(serverBaseDir,"configuration");
  }
  serverConfigurationDir=tmp;
  if (standalone && (!serverConfigurationDir.exists() || !serverConfigurationDir.isDirectory())) {
    throw MESSAGES.configDirectoryDoesNotExist(serverConfigurationDir);
  }
  String defaultServerConfig=WildFlySecurityManager.getPropertyPrivileged(JBOSS_SERVER_DEFAULT_CONFIG,"standalone.xml");
  String config=initialServerConfig == null ? serverConfig : initialServerConfig;
  boolean persist=initialServerConfig == null;
  serverConfigurationFile=standalone ? new ConfigurationFile(serverConfigurationDir,defaultServerConfig,config,persist) : null;
  @SuppressWarnings("deprecation") final String propertyKey=JBOSS_PERSIST_SERVER_CONFIG;
  WildFlySecurityManager.setPropertyPrivileged(propertyKey,Boolean.toString(persist));
  tmp=getFileFromProperty(SERVER_DATA_DIR,props);
  if (tmp == null) {
    tmp=new File(serverBaseDir,"data");
  }
  serverDataDir=tmp;
  if (serverDataDir.exists()) {
    if (!serverDataDir.isDirectory()) {
      throw MESSAGES.serverDataDirectoryIsNotDirectory(serverDataDir);
    }
  }
 else {
    if (!serverDataDir.mkdirs()) {
      throw MESSAGES.couldNotCreateServerDataDirectory(serverDataDir);
    }
  }
  tmp=getFileFromProperty(SERVER_CONTENT_DIR,props);
  if (tmp == null) {
    @SuppressWarnings("deprecation") String deprecatedProp=SERVER_DEPLOY_DIR;
    tmp=getFileFromProperty(deprecatedProp,props);
  }
  if (tmp == null) {
    tmp=new File(serverDataDir,"content");
  }
  serverContentDir=tmp;
  if (serverContentDir.exists()) {
    if (!serverContentDir.isDirectory()) {
      throw MESSAGES.serverContentDirectoryIsNotDirectory(serverContentDir);
    }
  }
 else   if (!serverContentDir.mkdirs()) {
    throw MESSAGES.couldNotCreateServerContentDirectory(serverContentDir);
  }
  tmp=getFileFromProperty(SERVER_LOG_DIR,props);
  if (tmp == null) {
    tmp=new File(serverBaseDir,"log");
  }
  if (tmp.exists()) {
    if (!tmp.isDirectory()) {
      throw MESSAGES.logDirectoryIsNotADirectory(tmp);
    }
  }
 else   if (!tmp.mkdirs()) {
    throw MESSAGES.couldNotCreateLogDirectory(tmp);
  }
  serverLogDir=tmp;
  tmp=configureServerTempDir(props.getProperty(SERVER_TEMP_DIR),props);
  if (tmp.exists()) {
    if (!tmp.isDirectory()) {
      throw MESSAGES.serverTempDirectoryIsNotADirectory(tmp);
    }
  }
 else   if (!tmp.mkdirs()) {
    throw MESSAGES.couldNotCreateServerTempDirectory(tmp);
  }
  tmp=getFileFromProperty(CONTROLLER_TEMP_DIR,props);
  if (tmp == null) {
    tmp=serverTempDir;
  }
  if (tmp.exists()) {
    if (!tmp.isDirectory()) {
      throw MESSAGES.controllerTempDirectoryIsNotADirectory(tmp);
    }
  }
 else   if (!tmp.mkdirs()) {
    throw MESSAGES.couldNotCreateControllerTempDirectory(tmp);
  }
  controllerTempDir=tmp;
  tmp=getFileFromProperty(DOMAIN_BASE_DIR,props);
  if (tmp != null) {
    if (!tmp.exists() || !tmp.isDirectory()) {
      throw MESSAGES.domainBaseDirDoesNotExist(tmp);
    }
    this.domainBaseDir=tmp;
  }
 else {
    this.domainBaseDir=null;
  }
  tmp=getFileFromProperty(DOMAIN_CONFIG_DIR,props);
  if (tmp != null) {
    if (!tmp.exists() || !tmp.isDirectory()) {
      throw MESSAGES.domainConfigDirDoesNotExist(tmp);
    }
    this.domainConfigurationDir=tmp;
  }
 else {
    this.domainConfigurationDir=null;
  }
  boolean allowExecutor=true;
  String maxThreads=WildFlySecurityManager.getPropertyPrivileged(BOOTSTRAP_MAX_THREADS,null);
  if (maxThreads != null && maxThreads.length() > 0) {
    try {
      Integer.decode(maxThreads);
      allowExecutor=false;
    }
 catch (    NumberFormatException ex) {
      ServerLogger.ROOT_LOGGER.failedToParseCommandLineInteger(BOOTSTRAP_MAX_THREADS,maxThreads);
    }
  }
  allowModelControllerExecutor=allowExecutor;
  this.productConfig=productConfig;
  this.primordialProperties=new Properties();
  copyProperties(props,primordialProperties);
  this.providedProperties=new Properties();
  copyProperties(primordialProperties,providedProperties);
  WildFlySecurityManager.setPropertyPrivileged(QUALIFIED_HOST_NAME,qualifiedHostName);
  WildFlySecurityManager.setPropertyPrivileged(HOST_NAME,hostName);
  WildFlySecurityManager.setPropertyPrivileged(SERVER_NAME,serverName);
  WildFlySecurityManager.setPropertyPrivileged(NODE_NAME,nodeName);
  WildFlySecurityManager.setPropertyPrivileged(HOME_DIR,homeDir.getAbsolutePath());
  WildFlySecurityManager.setPropertyPrivileged(MODULES_DIR,modulesDir.getAbsolutePath());
  WildFlySecurityManager.setPropertyPrivileged(SERVER_BASE_DIR,serverBaseDir.getAbsolutePath());
  WildFlySecurityManager.setPropertyPrivileged(SERVER_CONFIG_DIR,serverConfigurationDir.getAbsolutePath());
  WildFlySecurityManager.setPropertyPrivileged(SERVER_DATA_DIR,serverDataDir.getAbsolutePath());
  WildFlySecurityManager.setPropertyPrivileged(SERVER_DEPLOY_DIR,serverContentDir.getAbsolutePath());
  WildFlySecurityManager.setPropertyPrivileged(SERVER_LOG_DIR,serverLogDir.getAbsolutePath());
  WildFlySecurityManager.setPropertyPrivileged(SERVER_TEMP_DIR,serverTempDir.getAbsolutePath());
  if (launchType.getProcessType() == ProcessType.DOMAIN_SERVER) {
    if (domainBaseDir != null) {
      WildFlySecurityManager.setPropertyPrivileged(DOMAIN_BASE_DIR,domainBaseDir.getAbsolutePath());
    }
    if (domainConfigurationDir != null) {
      WildFlySecurityManager.setPropertyPrivileged(DOMAIN_CONFIG_DIR,domainConfigurationDir.getAbsolutePath());
    }
  }
  try {
    ModuleLoader bootLoader=Module.getBootModuleLoader();
    Module vfsModule=bootLoader.loadModule(ModuleIdentifier.create(VFS_MODULE_IDENTIFIER));
    Module.registerURLStreamHandlerFactoryModule(vfsModule);
  }
 catch (  Exception ex) {
    ServerLogger.ROOT_LOGGER.cannotAddURLStreamHandlerFactory(ex,VFS_MODULE_IDENTIFIER);
  }
}
