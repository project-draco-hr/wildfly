{
  if (props == null) {
    throw ControllerMessages.MESSAGES.nullVar("props");
  }
  this.launchType=launchType;
  this.standalone=launchType != LaunchType.DOMAIN;
  this.initialRunningMode=initialRunningMode == null ? RunningMode.NORMAL : initialRunningMode;
  this.hostControllerName=hostControllerName;
  if (standalone && hostControllerName != null) {
    throw ServerMessages.MESSAGES.hostControllerNameNonNullInStandalone();
  }
  if (!standalone && hostControllerName == null) {
    throw ServerMessages.MESSAGES.hostControllerNameNullInDomain();
  }
  configureQualifiedHostName(props.getProperty(QUALIFIED_HOST_NAME),props.getProperty(HOST_NAME),props,env);
  javaExtDirs=getFilesFromProperty(JAVA_EXT_DIRS,props);
  homeDir=getFileFromProperty(HOME_DIR,props);
  if (homeDir == null)   throw ServerMessages.MESSAGES.missingHomeDirConfiguration(HOME_DIR);
  @SuppressWarnings("deprecation") File tmp=getFileFromProperty(MODULES_DIR,props);
  if (tmp == null) {
    tmp=new File(homeDir,"modules");
  }
  modulesDir=tmp;
  configureBundlesDir(props.getProperty(BUNDLES_DIR),props);
  tmp=getFileFromProperty(SERVER_BASE_DIR,props);
  if (tmp == null) {
    tmp=new File(homeDir,standalone ? "standalone" : "domain/servers/" + serverName);
  }
  serverBaseDir=tmp;
  tmp=getFileFromProperty(SERVER_CONFIG_DIR,props);
  if (tmp == null) {
    tmp=new File(serverBaseDir,"configuration");
  }
  serverConfigurationDir=tmp;
  String defaultServerConfig=SecurityActions.getSystemProperty(JBOSS_SERVER_DEFAULT_CONFIG,"standalone.xml");
  serverConfigurationFile=standalone ? new ConfigurationFile(serverConfigurationDir,defaultServerConfig,serverConfig) : null;
  tmp=getFileFromProperty(SERVER_DATA_DIR,props);
  if (tmp == null) {
    tmp=new File(serverBaseDir,"data");
  }
  serverDataDir=tmp;
  tmp=getFileFromProperty(SERVER_CONTENT_DIR,props);
  if (tmp == null) {
    @SuppressWarnings("deprecation") String deprecatedProp=SERVER_DEPLOY_DIR;
    tmp=getFileFromProperty(deprecatedProp,props);
  }
  if (tmp == null) {
    tmp=new File(serverDataDir,"content");
  }
  serverContentDir=tmp;
  tmp=getFileFromProperty(SERVER_LOG_DIR,props);
  if (tmp == null) {
    tmp=new File(serverBaseDir,"log");
  }
  serverLogDir=tmp;
  configureServerTempDir(props.getProperty(SERVER_TEMP_DIR),props);
  tmp=getFileFromProperty(CONTROLLER_TEMP_DIR,props);
  if (tmp == null) {
    tmp=serverTempDir;
  }
  controllerTempDir=tmp;
  tmp=getFileFromProperty(DOMAIN_BASE_DIR,props);
  if (tmp != null) {
    this.domainBaseDir=tmp;
  }
 else {
    this.domainBaseDir=null;
  }
  tmp=getFileFromProperty(DOMAIN_CONFIG_DIR,props);
  if (tmp != null) {
    this.domainConfigurationDir=tmp;
  }
 else {
    this.domainConfigurationDir=null;
  }
  boolean allowExecutor=true;
  String maxThreads=SecurityActions.getSystemProperty(BOOTSTRAP_MAX_THREADS);
  if (maxThreads != null && maxThreads.length() > 0) {
    try {
      Integer.decode(maxThreads);
      allowExecutor=false;
    }
 catch (    NumberFormatException ex) {
      ServerLogger.ROOT_LOGGER.failedToParseCommandLineInteger(BOOTSTRAP_MAX_THREADS,maxThreads);
    }
  }
  allowModelControllerExecutor=allowExecutor;
  this.productConfig=productConfig;
  this.primordialProperties=new Properties();
  copyProperties(props,primordialProperties);
  this.providedProperties=new Properties();
  copyProperties(primordialProperties,providedProperties);
}
