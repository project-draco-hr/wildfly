{
  if (props == null) {
    throw ControllerMessages.MESSAGES.nullVar("props");
  }
  this.launchType=launchType;
  this.standalone=launchType != LaunchType.DOMAIN;
  this.initialRunningMode=initialRunningMode == null ? RunningMode.NORMAL : initialRunningMode;
  this.hostControllerName=hostControllerName;
  if (standalone && hostControllerName != null) {
    throw ServerMessages.MESSAGES.hostControllerNameNonNullInStandalone();
  }
  if (!standalone && hostControllerName == null) {
    throw ServerMessages.MESSAGES.hostControllerNameNullInDomain();
  }
  String hostName=props.getProperty(HOST_NAME);
  String qualifiedHostName=props.getProperty(QUALIFIED_HOST_NAME);
  if (qualifiedHostName == null) {
    qualifiedHostName=hostName;
    if (qualifiedHostName == null) {
      qualifiedHostName=env.get("HOSTNAME");
    }
    if (qualifiedHostName == null) {
      qualifiedHostName=env.get("COMPUTERNAME");
    }
    if (qualifiedHostName == null) {
      try {
        qualifiedHostName=InetAddressUtil.getLocalHost().getHostName();
      }
 catch (      UnknownHostException e) {
        qualifiedHostName=null;
      }
    }
    if (qualifiedHostName != null && qualifiedHostName.matches("^\\d+\\.\\d+\\.\\d+\\.\\d+$|:")) {
      qualifiedHostName=null;
    }
    if (qualifiedHostName == null) {
      qualifiedHostName="unknown-host.unknown-domain";
    }
    qualifiedHostName=qualifiedHostName.trim().toLowerCase();
  }
  this.qualifiedHostName=qualifiedHostName;
  if (hostName == null) {
    final int idx=qualifiedHostName.indexOf('.');
    hostName=idx == -1 ? qualifiedHostName : qualifiedHostName.substring(0,idx);
  }
  this.hostName=hostName;
  String serverName=props.getProperty(SERVER_NAME);
  if (serverName == null) {
    serverName=hostName;
  }
  this.serverName=serverName;
  String nodeName=props.getProperty(NODE_NAME);
  if (nodeName == null) {
    nodeName=serverName;
  }
  this.nodeName=nodeName;
  javaExtDirs=getFilesFromProperty(JAVA_EXT_DIRS,props);
  homeDir=getFileFromProperty(HOME_DIR,props);
  if (homeDir == null)   throw ServerMessages.MESSAGES.missingHomeDirConfiguration(HOME_DIR);
  File tmp=getFileFromProperty(MODULES_DIR,props);
  if (tmp == null) {
    tmp=new File(homeDir,"modules");
  }
  modulesDir=tmp;
  tmp=getFileFromProperty(BUNDLES_DIR,props);
  if (tmp == null) {
    tmp=new File(homeDir,"bundles");
  }
  bundlesDir=tmp;
  tmp=getFileFromProperty(SERVER_BASE_DIR,props);
  if (tmp == null) {
    tmp=new File(homeDir,standalone ? "standalone" : "domain/servers/" + serverName);
  }
  serverBaseDir=tmp;
  tmp=getFileFromProperty(SERVER_CONFIG_DIR,props);
  if (tmp == null) {
    tmp=new File(serverBaseDir,"configuration");
  }
  serverConfigurationDir=tmp;
  serverConfigurationFile=standalone ? new ConfigurationFile(serverConfigurationDir,"standalone.xml",serverConfig) : null;
  tmp=getFileFromProperty(SERVER_DATA_DIR,props);
  if (tmp == null) {
    tmp=new File(serverBaseDir,"data");
  }
  serverDataDir=tmp;
  tmp=getFileFromProperty(SERVER_DEPLOY_DIR,props);
  if (tmp == null) {
    tmp=new File(serverDataDir,"content");
  }
  serverDeployDir=tmp;
  tmp=getFileFromProperty(SERVER_LOG_DIR,props);
  if (tmp == null) {
    tmp=new File(serverBaseDir,"log");
  }
  serverLogDir=tmp;
  tmp=getFileFromProperty(SERVER_TEMP_DIR,props);
  if (tmp == null) {
    tmp=new File(serverBaseDir,"tmp");
  }
  serverTempDir=tmp;
  tmp=getFileFromProperty(CONTROLLER_TEMP_DIR,props);
  if (tmp == null) {
    tmp=new File(serverBaseDir,"tmp");
  }
  controllerTempDir=tmp;
  boolean allowExecutor=true;
  String maxThreads=SecurityActions.getSystemProperty(BOOTSTRAP_MAX_THREADS);
  if (maxThreads != null && maxThreads.length() > 0) {
    try {
      Integer.decode(maxThreads);
      allowExecutor=false;
    }
 catch (    NumberFormatException ex) {
      ServerLogger.ROOT_LOGGER.failedToParseCommandLineInteger(BOOTSTRAP_MAX_THREADS,maxThreads);
    }
  }
  allowModelControllerExecutor=allowExecutor;
  this.productConfig=productConfig;
}
