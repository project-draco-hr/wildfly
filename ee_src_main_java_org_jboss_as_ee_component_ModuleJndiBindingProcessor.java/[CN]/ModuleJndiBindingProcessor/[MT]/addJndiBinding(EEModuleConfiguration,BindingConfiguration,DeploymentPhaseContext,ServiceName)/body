{
  final String bindingName=bindingConfiguration.getName().startsWith("java:") ? bindingConfiguration.getName() : "java:module/env/" + bindingConfiguration.getName();
  Value<ManagedReferenceFactory> resourceValue;
  if (bindingName != null) {
    final BinderService service=new BinderService(bindingName);
    if (serviceName == null) {
      throw new IllegalArgumentException("Invalid context name '" + bindingName + "' for binding");
    }
    ServiceBuilder<ManagedReferenceFactory> sourceServiceBuilder=phaseContext.getServiceTarget().addService(serviceName,service);
    InjectionSource.ResolutionContext resolutionContext=new InjectionSource.ResolutionContext(true,module.getModuleName(),module.getModuleName(),module.getApplicationName());
    bindingConfiguration.getSource().getResourceValue(resolutionContext,sourceServiceBuilder,phaseContext,service.getManagedObjectInjector());
    try {
      resourceValue=sourceServiceBuilder.addDependency(serviceName.getParent(),NamingStore.class,service.getNamingStoreInjector()).install();
    }
 catch (    DuplicateServiceException e) {
      logger.error("Duplicate global jndi binding: " + bindingName,e);
    }
  }
 else {
    throw new DeploymentUnitProcessingException("Binding name must not be null: " + bindingConfiguration);
  }
}
