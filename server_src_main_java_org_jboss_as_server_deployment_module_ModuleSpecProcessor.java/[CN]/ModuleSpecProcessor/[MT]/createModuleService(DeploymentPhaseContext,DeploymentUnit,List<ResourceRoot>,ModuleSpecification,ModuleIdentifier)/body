{
  final ModuleSpec.Builder specBuilder=ModuleSpec.build(moduleIdentifier);
  final List<ModuleDependency> dependencies=moduleSpecification.getSystemDependencies();
  final List<ModuleDependency> localDependencies=moduleSpecification.getLocalDependencies();
  final List<ModuleDependency> userDependencies=moduleSpecification.getUserDependencies();
  for (  final ResourceLoaderSpec resourceLoaderSpec : moduleSpecification.getResourceLoaders()) {
    specBuilder.addResourceRoot(resourceLoaderSpec);
  }
  for (  final ResourceRoot resourceRoot : resourceRoots) {
    addResourceRoot(specBuilder,resourceRoot);
  }
  createDependencies(phaseContext,specBuilder,dependencies);
  createDependencies(phaseContext,specBuilder,userDependencies);
  if (moduleSpecification.isLocalLast()) {
    createDependencies(phaseContext,specBuilder,localDependencies);
    specBuilder.addDependency(DependencySpec.createLocalDependencySpec());
  }
 else {
    specBuilder.addDependency(DependencySpec.createLocalDependencySpec());
    createDependencies(phaseContext,specBuilder,localDependencies);
  }
  final DelegatingClassFileTransformer delegatingClassFileTransformer=new DelegatingClassFileTransformer();
  specBuilder.setClassFileTransformer(delegatingClassFileTransformer);
  deploymentUnit.putAttachment(DelegatingClassFileTransformer.ATTACHMENT_KEY,delegatingClassFileTransformer);
  final ModuleSpec moduleSpec=specBuilder.create();
  final ServiceName moduleSpecServiceName=ServiceModuleLoader.moduleSpecServiceName(moduleIdentifier);
  final ValueService<ModuleSpec> moduleSpecService=new ValueService<ModuleSpec>(new ImmediateValue<ModuleSpec>(moduleSpec));
  phaseContext.getServiceTarget().addService(moduleSpecServiceName,moduleSpecService).addDependencies(deploymentUnit.getServiceName()).addDependencies(phaseContext.getPhaseServiceName()).setInitialMode(Mode.ON_DEMAND).install();
  final List<ModuleDependency> allDependencies=new ArrayList<ModuleDependency>();
  allDependencies.addAll(dependencies);
  allDependencies.addAll(localDependencies);
  allDependencies.addAll(userDependencies);
  return ModuleLoadService.install(phaseContext.getServiceTarget(),moduleIdentifier,allDependencies);
}
