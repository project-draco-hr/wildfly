{
  final ModuleSpec.Builder specBuilder=ModuleSpec.build(moduleIdentifier);
  final List<ModuleDependency> dependencies=moduleSpecification.getSystemDependencies();
  final List<ModuleDependency> localDependencies=moduleSpecification.getLocalDependencies();
  for (  ResourceLoaderSpec resourceLoaderSpec : moduleSpecification.getResourceLoaders()) {
    specBuilder.addResourceRoot(resourceLoaderSpec);
  }
  for (  ResourceRoot resourceRoot : resourceRoots) {
    addResourceRoot(specBuilder,resourceRoot);
  }
  createDependencies(phaseContext,specBuilder,moduleSpecification.getUserDependencies());
  createDependencies(phaseContext,specBuilder,dependencies);
  specBuilder.addDependency(DependencySpec.createLocalDependencySpec());
  createDependencies(phaseContext,specBuilder,localDependencies);
  final ModuleSpec moduleSpec=specBuilder.create();
  final ServiceName moduleSpecServiceName=ServiceModuleLoader.moduleSpecServiceName(moduleIdentifier);
  final ValueService<ModuleSpec> moduleSpecService=new ValueService<ModuleSpec>(new ImmediateValue<ModuleSpec>(moduleSpec));
  phaseContext.getServiceTarget().addService(moduleSpecServiceName,moduleSpecService).addDependencies(deploymentUnit.getServiceName()).addDependencies(phaseContext.getPhaseServiceName()).setInitialMode(Mode.ON_DEMAND).install();
  return ModuleLoadService.install(phaseContext.getServiceTarget(),moduleIdentifier,dependencies);
}
