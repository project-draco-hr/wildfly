{
  logger.debug("Creating module: " + moduleIdentifier);
  final ModuleSpec.Builder specBuilder=ModuleSpec.build(moduleIdentifier);
  for (  final DependencySpec dep : moduleSpecification.getModuleSystemDependencies()) {
    specBuilder.addDependency(dep);
  }
  final List<ModuleDependency> dependencies=moduleSpecification.getSystemDependencies();
  final List<ModuleDependency> localDependencies=moduleSpecification.getLocalDependencies();
  final List<ModuleDependency> userDependencies=moduleSpecification.getUserDependencies();
  final Permissions permissions=moduleSpecification.getPermissions();
  installAliases(moduleSpecification,moduleIdentifier,deploymentUnit,phaseContext);
  for (  final ResourceLoaderSpec resourceLoaderSpec : moduleSpecification.getResourceLoaders()) {
    logger.debug("Adding resource loader " + resourceLoaderSpec + " to module "+ moduleIdentifier);
    specBuilder.addResourceRoot(resourceLoaderSpec);
  }
  for (  final ResourceRoot resourceRoot : resourceRoots) {
    logger.debug("Adding resource " + resourceRoot.getRoot() + " to module "+ moduleIdentifier);
    addResourceRoot(specBuilder,resourceRoot,permissions);
  }
  createDependencies(specBuilder,dependencies,false);
  createDependencies(specBuilder,userDependencies,false);
  if (moduleSpecification.isLocalLast()) {
    createDependencies(specBuilder,localDependencies,moduleSpecification.isLocalDependenciesTransitive());
    specBuilder.addDependency(DependencySpec.createLocalDependencySpec());
  }
 else {
    specBuilder.addDependency(DependencySpec.createLocalDependencySpec());
    createDependencies(specBuilder,localDependencies,moduleSpecification.isLocalDependenciesTransitive());
  }
  final Enumeration<Permission> e=DEFAULT_PERMISSIONS.elements();
  while (e.hasMoreElements()) {
    permissions.add(e.nextElement());
  }
  specBuilder.setPermissionCollection(permissions);
  final DelegatingClassFileTransformer delegatingClassFileTransformer=new DelegatingClassFileTransformer();
  specBuilder.setClassFileTransformer(delegatingClassFileTransformer);
  deploymentUnit.putAttachment(DelegatingClassFileTransformer.ATTACHMENT_KEY,delegatingClassFileTransformer);
  final ModuleSpec moduleSpec=specBuilder.create();
  final ServiceName moduleSpecServiceName=ServiceModuleLoader.moduleSpecServiceName(moduleIdentifier);
  ModuleDefinition moduleDefinition=new ModuleDefinition(moduleIdentifier,new HashSet<>(moduleSpecification.getAllDependencies()),moduleSpec);
  final ValueService<ModuleDefinition> moduleSpecService=new ValueService<>(new ImmediateValue<>(moduleDefinition));
  phaseContext.getServiceTarget().addService(moduleSpecServiceName,moduleSpecService).addDependencies(deploymentUnit.getServiceName()).addDependencies(phaseContext.getPhaseServiceName()).setInitialMode(Mode.ON_DEMAND).install();
  final List<ModuleDependency> allDependencies=new ArrayList<ModuleDependency>();
  allDependencies.addAll(dependencies);
  allDependencies.addAll(localDependencies);
  allDependencies.addAll(userDependencies);
  ModuleResolvePhaseService.installService(phaseContext.getServiceTarget(),moduleDefinition);
  return ModuleLoadService.install(phaseContext.getServiceTarget(),moduleIdentifier,allDependencies);
}
