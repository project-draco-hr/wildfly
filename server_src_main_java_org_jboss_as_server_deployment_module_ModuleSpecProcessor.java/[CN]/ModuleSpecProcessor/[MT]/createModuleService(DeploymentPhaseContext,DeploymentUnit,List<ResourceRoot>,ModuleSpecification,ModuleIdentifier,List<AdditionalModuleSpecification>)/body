{
  logger.debug("Creating module: " + moduleIdentifier);
  final ModuleSpec.Builder specBuilder=ModuleSpec.build(moduleIdentifier);
  for (  final DependencySpec dep : moduleSpecification.getModuleSystemDependencies()) {
    specBuilder.addDependency(dep);
  }
  final List<ModuleDependency> dependencies=moduleSpecification.getSystemDependencies();
  final List<ModuleDependency> localDependencies=moduleSpecification.getLocalDependencies();
  final List<ModuleDependency> userDependencies=moduleSpecification.getUserDependencies();
  installAliases(moduleSpecification,moduleIdentifier,deploymentUnit,phaseContext);
  for (  final ResourceLoaderSpec resourceLoaderSpec : moduleSpecification.getResourceLoaders()) {
    logger.debug("Adding resource loader " + resourceLoaderSpec + " to module "+ moduleIdentifier);
    specBuilder.addResourceRoot(resourceLoaderSpec);
  }
  for (  final ResourceRoot resourceRoot : resourceRoots) {
    logger.debug("Adding resource " + resourceRoot.getRoot() + " to module "+ moduleIdentifier);
    addResourceRoot(specBuilder,resourceRoot);
  }
  createDependencies(specBuilder,dependencies,moduleSpecification.isRequiresTransitiveDependencies());
  createDependencies(specBuilder,userDependencies,moduleSpecification.isRequiresTransitiveDependencies());
  if (moduleSpecification.isLocalLast()) {
    createDependencies(specBuilder,localDependencies,moduleSpecification.isRequiresTransitiveDependencies());
    specBuilder.addDependency(DependencySpec.createLocalDependencySpec());
  }
 else {
    specBuilder.addDependency(DependencySpec.createLocalDependencySpec());
    createDependencies(specBuilder,localDependencies,moduleSpecification.isRequiresTransitiveDependencies());
  }
  final DelegatingClassFileTransformer delegatingClassFileTransformer=new DelegatingClassFileTransformer();
  specBuilder.setClassFileTransformer(delegatingClassFileTransformer);
  deploymentUnit.putAttachment(DelegatingClassFileTransformer.ATTACHMENT_KEY,delegatingClassFileTransformer);
  final ModuleSpec moduleSpec=specBuilder.create();
  final ServiceName moduleSpecServiceName=ServiceModuleLoader.moduleSpecServiceName(moduleIdentifier);
  final ValueService<ModuleSpec> moduleSpecService=new ValueService<ModuleSpec>(new ImmediateValue<ModuleSpec>(moduleSpec));
  phaseContext.getServiceTarget().addService(moduleSpecServiceName,moduleSpecService).addDependencies(deploymentUnit.getServiceName()).addDependencies(phaseContext.getPhaseServiceName()).setInitialMode(Mode.ON_DEMAND).install();
  final List<ModuleDependency> allDependencies=new ArrayList<ModuleDependency>();
  allDependencies.addAll(dependencies);
  allDependencies.addAll(localDependencies);
  allDependencies.addAll(userDependencies);
  for (  AdditionalModuleSpecification module : additionalModuleSpecifications) {
    allDependencies.add(new ModuleDependency(null,module.getModuleIdentifier(),false,false,false,false));
  }
  return ModuleLoadService.install(phaseContext.getServiceTarget(),moduleIdentifier,allDependencies);
}
