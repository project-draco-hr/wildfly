def py_scanstring(s, end, encoding=None, strict=True, _b=BACKSLASH, _m=STRINGCHUNK.match):
    'Scan the string s for a JSON string. End is the index of the\n    character in s after the quote that started the JSON string.\n    Unescapes all valid JSON string escape sequences and raises ValueError\n    on attempt to decode an invalid string. If strict is False then literal\n    control characters are allowed in the string.\n\n    Returns a tuple of the decoded string and the index of the character in s\n    after the end quote.'
    if (encoding is None):
        encoding = DEFAULT_ENCODING
    chunks = []
    _append = chunks.append
    begin = (end - 1)
    while 1:
        chunk = _m(s, end)
        if (chunk is None):
            raise JSONDecodeError('Unterminated string starting at', s, begin)
        end = chunk.end()
        (content, terminator) = chunk.groups()
        if content:
            if (not isinstance(content, unicode)):
                content = unicode(content, encoding)
            _append(content)
        if (terminator == '"'):
            break
        elif (terminator != '\\'):
            if strict:
                msg = ('Invalid control character %r at' % (terminator,))
                raise JSONDecodeError(msg, s, end)
            else:
                _append(terminator)
                continue
        try:
            esc = s[end]
        except IndexError:
            raise JSONDecodeError('Unterminated string starting at', s, begin)
        if (esc != 'u'):
            try:
                char = _b[esc]
            except KeyError:
                msg = ('Invalid \\escape: ' + repr(esc))
                raise JSONDecodeError(msg, s, end)
            end += 1
        else:
            esc = s[(end + 1):(end + 5)]
            next_end = (end + 5)
            if (len(esc) != 4):
                msg = 'Invalid \\uXXXX escape'
                raise JSONDecodeError(msg, s, end)
            uni = int(esc, 16)
            if ((55296 <= uni <= 56319) and (sys.maxunicode > 65535)):
                msg = 'Invalid \\uXXXX\\uXXXX surrogate pair'
                if (not (s[(end + 5):(end + 7)] == '\\u')):
                    raise JSONDecodeError(msg, s, end)
                esc2 = s[(end + 7):(end + 11)]
                if (len(esc2) != 4):
                    raise JSONDecodeError(msg, s, end)
                uni2 = int(esc2, 16)
                uni = (65536 + (((uni - 55296) << 10) | (uni2 - 56320)))
                next_end += 6
            char = unichr(uni)
            end = next_end
        _append(char)
    return (u''.join(chunks), end)
