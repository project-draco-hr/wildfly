{
  final PathAddress address=PathAddress.pathAddress(operation.get(OP_ADDR));
  final String name=address.getLastElement().getValue();
  final ServiceTarget serviceTarget=context.getServiceTarget();
  final AsyncHandlerService service=new AsyncHandlerService();
  final ServiceBuilder<Handler> serviceBuilder=serviceTarget.addService(LogServices.handlerName(name),service);
  final List<InjectedValue<Handler>> list=new ArrayList<InjectedValue<Handler>>();
  final ModelNode subhandlers=model.get(SUBHANDLERS);
  if (subhandlers.isDefined())   for (  final ModelNode handlerName : subhandlers.asList()) {
    final InjectedValue<Handler> injectedValue=new InjectedValue<Handler>();
    serviceBuilder.addDependency(LogServices.handlerName(handlerName.asString()),Handler.class,injectedValue);
    list.add(injectedValue);
  }
  service.addHandlers(list);
  service.setQueueLength(QUEUE_LENGTH.validateResolvedOperation(model).asInt());
  final ModelNode level=LEVEL.validateResolvedOperation(model);
  if (level.isDefined()) {
    service.setLevel(Level.parse(level.asString()));
  }
  final ModelNode overflowAction=OVERFLOW_ACTION.validateResolvedOperation(model);
  if (overflowAction.isDefined()) {
    service.setOverflowAction(OverflowAction.valueOf(overflowAction.asString().toUpperCase(Locale.US)));
  }
  serviceBuilder.addListener(verificationHandler);
  serviceBuilder.setInitialMode(ServiceController.Mode.ACTIVE);
  newControllers.add(serviceBuilder.install());
}
