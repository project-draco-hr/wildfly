{
  final ServiceBuilder<T> serviceBuilder=target.addService(this.targetServiceName,this.service).setInitialMode(ServiceController.Mode.NEVER);
  final ServiceListener<T> listener=new AbstractServiceListener<T>(){
    @Override public void serviceRemoveRequested(    ServiceController<? extends T> controller){
      ServiceController<?> service=controller.getServiceContainer().getService(CacheSingletonServiceBuilder.this.targetServiceName);
      if (service != null) {
        service.setMode(ServiceController.Mode.REMOVE);
        controller.removeListener(this);
      }
    }
  }
;
  final ServiceBuilder<T> singletonBuilder=new AsynchronousServiceBuilder<>(this.singletonServiceName,this).build(target).addAliases(this.singletonServiceName.append("singleton")).addDependency(CacheGroupServiceName.GROUP.getServiceName(this.containerName,this.cacheName),Group.class,this.group).addDependency(CacheGroupServiceName.SERVICE_PROVIDER_REGISTRATION.getServiceName(this.containerName,this.cacheName),ServiceProviderRegistrationFactory.class,this.registrationFactory).addDependency(GroupServiceName.COMMAND_DISPATCHER.getServiceName(this.containerName),CommandDispatcherFactory.class,this.dispatcherFactory).addListener(listener);
  return new DelegatingServiceBuilder<T>(serviceBuilder,ServiceControllerFactory.SIMPLE){
    @Override public ServiceBuilder<T> addAliases(    ServiceName... aliases){
      singletonBuilder.addAliases(aliases);
      return this;
    }
    @Override public ServiceBuilder<T> setInitialMode(    ServiceController.Mode mode){
      singletonBuilder.setInitialMode(mode);
      return this;
    }
    @Override public ServiceBuilder<T> addMonitor(    StabilityMonitor monitor){
      singletonBuilder.addMonitor(monitor);
      return this;
    }
    @Override public ServiceBuilder<T> addMonitors(    StabilityMonitor... monitors){
      singletonBuilder.addMonitors(monitors);
      return this;
    }
    @Override public ServiceBuilder<T> addListener(    ServiceListener<? super T> listener){
      singletonBuilder.addListener(listener);
      return this;
    }
    @Override public ServiceBuilder<T> addListener(    @SuppressWarnings("unchecked") ServiceListener<? super T>... listeners){
      singletonBuilder.addListener(listeners);
      return this;
    }
    @Override public ServiceBuilder<T> addListener(    Collection<? extends ServiceListener<? super T>> listeners){
      singletonBuilder.addListener(listeners);
      return this;
    }
    @Override public ServiceController<T> install(){
      super.install();
      return singletonBuilder.install();
    }
  }
;
}
