{
  final ServiceName dataSourceServiceName=AbstractDataSourceService.SERVICE_NAME_BASE.append("DataSourceDefinition",moduleDescription.getApplicationName(),moduleDescription.getModuleName(),jndiName);
  final ServiceBuilder<?> dataSourceServiceBuilder=Services.addServerExecutorDependency(serviceTarget.addService(dataSourceServiceName,dataSourceService),dataSourceService.getExecutorServiceInjector(),false).addDependency(ConnectorServices.TRANSACTION_INTEGRATION_SERVICE,TransactionIntegration.class,dataSourceService.getTransactionIntegrationInjector()).addDependency(ConnectorServices.MANAGEMENT_REPOSITORY_SERVICE,ManagementRepository.class,dataSourceService.getManagementRepositoryInjector()).addDependency(SubjectFactoryService.SERVICE_NAME,SubjectFactory.class,dataSourceService.getSubjectFactoryInjector()).addDependency(ConnectorServices.CCM_SERVICE,CachedConnectionManager.class,dataSourceService.getCcmInjector()).addDependency(ConnectorServices.JDBC_DRIVER_REGISTRY_SERVICE,DriverRegistry.class,dataSourceService.getDriverRegistryInjector()).addDependency(NamingService.SERVICE_NAME);
  final ContextNames.BindInfo bindInfo=ContextNames.bindInfoForEnvEntry(context.getApplicationName(),context.getModuleName(),context.getComponentName(),!context.isCompUsesModule(),jndiName);
  final DataSourceReferenceFactoryService referenceFactoryService=new DataSourceReferenceFactoryService();
  final ServiceName referenceFactoryServiceName=DataSourceReferenceFactoryService.SERVICE_NAME_BASE.append(bindInfo.getBinderServiceName());
  final ServiceBuilder<?> referenceBuilder=serviceTarget.addService(referenceFactoryServiceName,referenceFactoryService).addDependency(dataSourceServiceName,javax.sql.DataSource.class,referenceFactoryService.getDataSourceInjector());
  final BinderService binderService=new BinderService(bindInfo.getBindName(),this);
  final ServiceBuilder<?> binderBuilder=serviceTarget.addService(bindInfo.getBinderServiceName(),binderService).addDependency(referenceFactoryServiceName,ManagedReferenceFactory.class,binderService.getManagedObjectInjector()).addDependency(bindInfo.getParentContextServiceName(),ServiceBasedNamingStore.class,binderService.getNamingStoreInjector()).addListener(new AbstractServiceListener<Object>(){
    public void transition(    final ServiceController<? extends Object> controller,    final ServiceController.Transition transition){
switch (transition) {
case STARTING_to_UP:
{
          SUBSYSTEM_DATASOURCES_LOGGER.boundDataSource(jndiName);
          break;
        }
case START_REQUESTED_to_DOWN:
{
        SUBSYSTEM_DATASOURCES_LOGGER.unboundDataSource(jndiName);
        break;
      }
case REMOVING_to_REMOVED:
{
      SUBSYSTEM_DATASOURCES_LOGGER.debugf("Removed JDBC Data-source [%s]",jndiName);
      break;
    }
}
}
}
);
dataSourceServiceBuilder.setInitialMode(ServiceController.Mode.ACTIVE).install();
referenceBuilder.setInitialMode(ServiceController.Mode.ACTIVE).install();
binderBuilder.setInitialMode(ServiceController.Mode.ACTIVE).install();
valueSourceServiceBuilder.addDependency(bindInfo.getBinderServiceName(),ManagedReferenceFactory.class,injector);
}
