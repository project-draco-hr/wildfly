{
  final Iterator<Map.Entry<String,String>> it=props.entrySet().iterator();
  while (it.hasNext()) {
    final Map.Entry<String,String> entry=it.next();
    String value=entry.getKey();
    if (value == null || "".equals(value)) {
      it.remove();
    }
 else {
      StringBuilder builder=new StringBuilder("set").append(entry.getKey());
      builder.setCharAt(3,Character.toUpperCase(entry.getKey().charAt(0)));
      final String methodName=builder.toString();
      final Class<?> paramType=value.getClass();
      final MethodIdentifier methodIdentifier=MethodIdentifier.getIdentifier(void.class,methodName,paramType);
      final Method setterMethod=ClassReflectionIndexUtil.findMethod(reflectionIndex,dataSourceClass,methodIdentifier);
      if (setterMethod == null) {
        it.remove();
        ConnectorLogger.DS_DEPLOYER_LOGGER.methodNotFoundOnDataSource(methodName,dataSourceClass);
      }
    }
  }
}
