{
  DataSourceMetaData dataSource=new DataSourceMetaData();
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    final String value=reader.getAttributeValue(i);
    if (reader.getAttributeNamespace(i) != null) {
      continue;
    }
    final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case ID:
{
        dataSource.setId(value);
        break;
      }
default :
    throw unexpectedAttribute(reader,i);
}
}
DescriptionsImpl descriptions=new DescriptionsImpl();
while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
if (DescriptionsMetaDataParser.parse(reader,descriptions)) {
  if (dataSource.getDescriptions() == null) {
    dataSource.setDescriptions(descriptions);
  }
  continue;
}
final Element element=Element.forName(reader.getLocalName());
switch (element) {
case NAME:
  dataSource.setName(reader.getElementText());
break;
case CLASS_NAME:
dataSource.setClassName(reader.getElementText());
break;
case SERVER_NAME:
dataSource.setServerName(reader.getElementText());
break;
case PORT_NUMBER:
dataSource.setPortNumber(Integer.valueOf(reader.getElementText()));
break;
case DATABASE_NAME:
dataSource.setDatabaseName(reader.getElementText());
break;
case URL:
dataSource.setUrl(reader.getElementText());
break;
case USER:
dataSource.setUser(reader.getElementText());
break;
case PASSWORD:
dataSource.setPassword(reader.getElementText());
break;
case PROPERTY:
PropertiesMetaData properties=dataSource.getProperties();
if (properties == null) {
properties=new PropertiesMetaData();
dataSource.setProperties(properties);
}
properties.add(PropertyMetaDataParser.parse(reader));
break;
case LOGIN_TIMEOUT:
dataSource.setLoginTimeout(Integer.valueOf(reader.getElementText()));
break;
case TRANSACTIONAL:
dataSource.setTransactional(Boolean.valueOf(reader.getElementText()));
break;
case ISOLATION_LEVEL:
dataSource.setIsolationLevel(IsolationLevelType.valueOf(reader.getElementText()));
break;
case INITAL_POOL_SIZE:
dataSource.setInitialPoolSize(Integer.valueOf(reader.getElementText()));
break;
case MAX_POOL_SIZE:
dataSource.setMaxPoolSize(Integer.valueOf(reader.getElementText()));
break;
case MIN_POOL_SIZE:
dataSource.setMinPoolSize(Integer.valueOf(reader.getElementText()));
break;
case MAX_IDLE_TIME:
dataSource.setMaxIdleTime(Integer.valueOf(reader.getElementText()));
break;
case MAX_STATEMENTS:
dataSource.setMaxStatements(Integer.valueOf(reader.getElementText()));
break;
default :
throw unexpectedElement(reader);
}
}
return dataSource;
}
