{
  return new ParsingStateCallbackHandler(){
    private int nameValueSeparator=-1;
    private String name;
    final StringBuilder buffer=new StringBuilder();
    int bufferStartIndex=0;
    boolean inValue;
    @Override public void enteredState(    ParsingContext ctx) throws OperationFormatException {
      final String id=ctx.getState().getId();
      if (!inValue) {
        bufferStartIndex=ctx.getLocation();
      }
      if (id.equals(PropertyListState.ID)) {
        handler.propertyListStart(ctx.getLocation());
      }
 else       if (ArgumentValueState.ID.equals(id)) {
        inValue=true;
      }
 else       if ("ADDR_OP_SEP".equals(id)) {
        handler.addressOperationSeparator(ctx.getLocation());
      }
 else       if (NodeState.ID.equals(id)) {
        inValue=true;
      }
 else       if ("NAME_VALUE_SEPARATOR".equals(id)) {
        nameValueSeparator=ctx.getLocation();
        if (buffer.length() > 0) {
          name=buffer.toString().trim();
          buffer.setLength(0);
        }
      }
    }
    @Override public void leavingState(    ParsingContext ctx) throws CommandFormatException {
      final String id=ctx.getState().getId();
      if (id.equals(PropertyListState.ID)) {
        if (!ctx.isEndOfContent()) {
          handler.propertyListEnd(ctx.getLocation());
        }
      }
 else       if (ArgumentState.ID.equals(id)) {
        if (this.name != null) {
          final String value=buffer.toString().trim();
          if (value.length() > 0) {
            handler.property(this.name,value,bufferStartIndex);
          }
 else {
            handler.propertyName(bufferStartIndex,this.name);
            if (nameValueSeparator != -1) {
              handler.propertyNameValueSeparator(nameValueSeparator);
            }
          }
        }
 else {
          handler.propertyName(bufferStartIndex,buffer.toString().trim());
          if (nameValueSeparator != -1) {
            handler.propertyNameValueSeparator(nameValueSeparator);
          }
        }
        if (!ctx.isEndOfContent()) {
          handler.propertySeparator(ctx.getLocation());
        }
        buffer.setLength(0);
        name=null;
        nameValueSeparator=-1;
      }
 else       if (ArgumentValueState.ID.equals(id)) {
        if (name == null) {
          handler.property(null,buffer.toString().trim(),bufferStartIndex);
          buffer.setLength(0);
          if (!ctx.isEndOfContent()) {
            handler.propertySeparator(ctx.getLocation());
          }
        }
        inValue=false;
      }
 else       if (CommandNameState.ID.equals(id)) {
        handler.operationName(bufferStartIndex,buffer.toString().trim());
        buffer.setLength(0);
      }
 else       if (NodeState.ID.equals(id)) {
        char ch=ctx.getCharacter();
        if (buffer.length() == 0) {
          if (ch == '/') {
            handler.rootNode(bufferStartIndex);
            handler.nodeSeparator(ctx.getLocation());
          }
        }
 else {
          final String value=buffer.toString().trim();
          if (ch == '=') {
            handler.nodeType(bufferStartIndex,value);
            handler.nodeTypeNameSeparator(ctx.getLocation());
          }
 else           if (ch == ':') {
            handler.nodeName(bufferStartIndex,value);
          }
 else {
            if (".".equals(value)) {
            }
 else             if ("..".equals(value)) {
              handler.parentNode(ctx.getLocation() - 2);
            }
 else             if (".type".equals(value)) {
              handler.nodeType(ctx.getLocation() - 5);
            }
 else {
              if (ch == '/') {
                if ("".equals(value)) {
                  handler.rootNode(ctx.getLocation());
                }
 else {
                  handler.nodeName(bufferStartIndex,value);
                }
              }
 else {
                handler.nodeTypeOrName(bufferStartIndex,value);
              }
            }
            if (ch == '/') {
              handler.nodeSeparator(ctx.getLocation());
            }
          }
        }
        buffer.setLength(0);
        inValue=false;
      }
 else       if (OutputTargetState.ID.equals(id)) {
        handler.outputTarget(bufferStartIndex,buffer.toString().trim());
        buffer.setLength(0);
      }
    }
    @Override public void character(    ParsingContext ctx) throws OperationFormatException {
      buffer.append(ctx.getCharacter());
    }
  }
;
}
