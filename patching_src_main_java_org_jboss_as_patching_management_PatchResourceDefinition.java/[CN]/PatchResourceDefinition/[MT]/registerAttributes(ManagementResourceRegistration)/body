{
  super.registerAttributes(registry);
  registry.registerReadOnlyAttribute(VERSION,new PatchAttributeReadHandler(){
    @Override void handle(    ModelNode result,    Identity info){
      result.set(info.getVersion());
    }
  }
);
  registry.registerReadOnlyAttribute(CUMULATIVE_PATCH_ID,new PatchAttributeReadHandler(){
    @Override void handle(    ModelNode result,    Identity info) throws IOException {
      result.set(info.loadTargetInfo().getCumulativePatchID());
    }
  }
);
  registry.registerReadOnlyAttribute(PATCHES,new PatchAttributeReadHandler(){
    @Override void handle(    ModelNode result,    Identity info) throws IOException {
      result.setEmptyList();
      for (      final String id : info.loadTargetInfo().getPatchIDs()) {
        result.add(id);
      }
    }
  }
);
  StandardResourceDescriptionResolver resolver=new StandardResourceDescriptionResolver("patching.layer","org.jboss.as.patching.management.LocalDescriptions",PatchResourceDefinition.class.getClassLoader());
  registry.registerSubModel(new SimpleResourceDefinition(PathElement.pathElement("layer"),resolver){
    @Override public void registerAttributes(    final ManagementResourceRegistration resource){
      resource.registerReadOnlyAttribute(CUMULATIVE_PATCH_ID,new ElementProviderAttributeReadHandler.LayerAttributeReadHandler(){
        @Override void handle(        ModelNode result,        PatchableTarget layer) throws OperationFailedException {
          try {
            result.set(layer.loadTargetInfo().getCumulativePatchID());
          }
 catch (          IOException e) {
            throw new OperationFailedException(PatchManagementMessages.MESSAGES.failedToLoadIdentity(),e);
          }
        }
      }
);
      resource.registerReadOnlyAttribute(PATCHES,new ElementProviderAttributeReadHandler.LayerAttributeReadHandler(){
        @Override void handle(        ModelNode result,        PatchableTarget layer) throws OperationFailedException {
          result.setEmptyList();
          try {
            for (            final String id : layer.loadTargetInfo().getPatchIDs()) {
              result.add(id);
            }
          }
 catch (          IOException e) {
            throw new OperationFailedException(PatchManagementMessages.MESSAGES.failedToLoadIdentity(),e);
          }
        }
      }
);
    }
  }
);
  resolver=new StandardResourceDescriptionResolver("patching.addon","org.jboss.as.patching.management.LocalDescriptions",PatchResourceDefinition.class.getClassLoader());
  registry.registerSubModel(new SimpleResourceDefinition(PathElement.pathElement("addon"),resolver){
    @Override public void registerAttributes(    final ManagementResourceRegistration resource){
      resource.registerReadOnlyAttribute(CUMULATIVE_PATCH_ID,new ElementProviderAttributeReadHandler.AddOnAttributeReadHandler(){
        @Override void handle(        ModelNode result,        PatchableTarget addon) throws OperationFailedException {
          try {
            result.set(addon.loadTargetInfo().getCumulativePatchID());
          }
 catch (          IOException e) {
            throw new OperationFailedException(PatchManagementMessages.MESSAGES.failedToLoadIdentity(),e);
          }
        }
      }
);
      resource.registerReadOnlyAttribute(PATCHES,new ElementProviderAttributeReadHandler.AddOnAttributeReadHandler(){
        @Override void handle(        ModelNode result,        PatchableTarget addon) throws OperationFailedException {
          result.setEmptyList();
          try {
            for (            final String id : addon.loadTargetInfo().getPatchIDs()) {
              result.add(id);
            }
          }
 catch (          IOException e) {
            throw new OperationFailedException(PatchManagementMessages.MESSAGES.failedToLoadIdentity(),e);
          }
        }
      }
);
    }
  }
);
}
