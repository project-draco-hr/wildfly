{
  if (request == null) {
    throw new IllegalArgumentException("HTTP request may not be null");
  }
  if (state == State.TOKEN_GENERATED) {
    return new BasicHeader("X-dummy","Token already generated");
  }
  if (state != State.CHALLENGE_RECEIVED) {
    throw new IllegalStateException("Negotiation authentication process has not been initiated");
  }
  try {
    String key=null;
    if (isProxy()) {
      key=ExecutionContext.HTTP_PROXY_HOST;
    }
 else {
      key=ExecutionContext.HTTP_TARGET_HOST;
    }
    HttpHost host=(HttpHost)context.getAttribute(key);
    if (host == null) {
      throw new AuthenticationException("Authentication host is not set " + "in the execution context");
    }
    String authServer;
    if (!this.stripPort && host.getPort() > 0) {
      authServer=host.toHostString();
    }
 else {
      authServer=host.getHostName();
    }
    if (LOGGER.isDebugEnabled()) {
      LOGGER.debug("init " + authServer);
    }
    final Oid negotiationOid=new Oid(SPNEGO_OID);
    final GSSManager manager=GSSManager.getInstance();
    final GSSName serverName=manager.createName("HTTP@" + authServer,GSSName.NT_HOSTBASED_SERVICE);
    final GSSContext gssContext=manager.createContext(serverName.canonicalize(negotiationOid),negotiationOid,null,DEFAULT_LIFETIME);
    gssContext.requestMutualAuth(true);
    gssContext.requestCredDeleg(true);
    if (token == null) {
      token=new byte[0];
    }
    token=gssContext.initSecContext(token,0,token.length);
    if (token == null) {
      state=State.FAILED;
      throw new AuthenticationException("GSS security context initialization failed");
    }
    state=State.TOKEN_GENERATED;
    String tokenstr=new String(base64codec.encode(token));
    if (LOGGER.isDebugEnabled()) {
      LOGGER.debug("Sending response '" + tokenstr + "' back to the auth server");
    }
    CharArrayBuffer buffer=new CharArrayBuffer(32);
    if (isProxy()) {
      buffer.append(AUTH.PROXY_AUTH_RESP);
    }
 else {
      buffer.append(AUTH.WWW_AUTH_RESP);
    }
    buffer.append(": Negotiate ");
    buffer.append(tokenstr);
    return new BufferedHeader(buffer);
  }
 catch (  GSSException gsse) {
    state=State.FAILED;
    if (gsse.getMajor() == GSSException.DEFECTIVE_CREDENTIAL || gsse.getMajor() == GSSException.CREDENTIALS_EXPIRED)     throw new InvalidCredentialsException(gsse.getMessage(),gsse);
    if (gsse.getMajor() == GSSException.NO_CRED)     throw new InvalidCredentialsException(gsse.getMessage(),gsse);
    if (gsse.getMajor() == GSSException.DEFECTIVE_TOKEN || gsse.getMajor() == GSSException.DUPLICATE_TOKEN || gsse.getMajor() == GSSException.OLD_TOKEN)     throw new AuthenticationException(gsse.getMessage(),gsse);
    throw new AuthenticationException(gsse.getMessage());
  }
}
