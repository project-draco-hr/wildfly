{
  final ModelNode dmr;
  ModelNode response;
  HeaderMap requestHeaders=exchange.getRequestHeaders();
  final boolean cachable;
  final boolean get=exchange.getRequestMethod().equals(Methods.GET);
  final boolean encode=Common.APPLICATION_DMR_ENCODED.equals(requestHeaders.getFirst(Headers.ACCEPT)) || Common.APPLICATION_DMR_ENCODED.equals(requestHeaders.getFirst(Headers.CONTENT_TYPE));
  final OperationParameter.Builder operationParameterBuilder=new OperationParameter.Builder(get).encode(encode);
  try {
    if (get) {
      GetOperation operation=getOperation(exchange);
      operationParameterBuilder.maxAge(operation.getMaxAge());
      dmr=convertGetRequest(exchange,operation);
      cachable=operation.getMaxAge() > 0;
    }
 else {
      dmr=convertPostRequest(exchange,encode);
      cachable=false;
    }
  }
 catch (  Exception e) {
    ROOT_LOGGER.debugf("Unable to construct ModelNode '%s'",e.getMessage());
    Common.sendError(exchange,get,false,e.getLocalizedMessage());
    return;
  }
  final ResponseCallback callback=new ResponseCallback(){
    @Override void doSendResponse(    final ModelNode response){
      if (response.hasDefined(OUTCOME) && FAILED.equals(response.get(OUTCOME).asString())) {
        Common.sendError(exchange,get,encode,response.get(FAILURE_DESCRIPTION).asString());
        return;
      }
      writeResponse(exchange,200,response,operationParameterBuilder.build());
    }
  }
;
  final boolean sendPreparedResponse=sendPreparedResponse(dmr);
  final ModelController.OperationTransactionControl control=sendPreparedResponse ? new ModelController.OperationTransactionControl(){
    @Override public void operationPrepared(    final ModelController.OperationTransaction transaction,    final ModelNode result){
      transaction.commit();
      result.get(OUTCOME).set(SUCCESS);
      result.get(RESULT);
      callback.sendResponse(result);
    }
  }
 : ModelController.OperationTransactionControl.COMMIT;
  try {
    response=modelController.execute(dmr,OperationMessageHandler.logging,control,new OperationBuilder(dmr).build());
    if (cachable) {
      MessageDigest md=MessageDigest.getInstance("MD5");
      md.update(response.toString().getBytes());
      ETag etag=new ETag(false,HexConverter.convertToHexString(md.digest()));
      operationParameterBuilder.etag(etag);
      if (!ETagUtils.handleIfNoneMatch(exchange,etag,false)) {
        exchange.setResponseCode(304);
        DomainUtil.writeCacheHeaders(exchange,304,operationParameterBuilder.build());
        exchange.endExchange();
        return;
      }
    }
  }
 catch (  Throwable t) {
    ROOT_LOGGER.modelRequestError(t);
    Common.sendError(exchange,get,encode,t.getLocalizedMessage());
    return;
  }
  callback.sendResponse(response);
}
