{
  @SuppressWarnings("deprecation") ControlledProcessState.State currentState=controlledProcessStateService.getCurrentState();
  if (currentState == ControlledProcessState.State.STARTING || currentState == ControlledProcessState.State.STOPPING) {
    http.getResponseHeaders().add(RETRY_AFTER,"2");
    http.sendResponseHeaders(SERVICE_UNAVAILABLE,-1);
    return;
  }
  final String requestMethod=http.getRequestMethod();
  if (OPTIONS.equals(requestMethod)) {
    drain(http);
    ROOT_LOGGER.debug("Request rejected due to 'OPTIONS' method which is not supported.");
    http.sendResponseHeaders(METHOD_NOT_ALLOWED,-1);
    return;
  }
  final Headers headers=http.getRequestHeaders();
  final URI request=http.getRequestURI();
  if (headers.containsKey(ORIGIN)) {
    String origin=headers.getFirst(ORIGIN);
    String host=headers.getFirst(HOST);
    String protocol=http.getHttpContext().getServer() instanceof HttpServer ? HTTP : HTTPS;
    String allowedOrigin=protocol + "://" + host;
    if (origin.equals(allowedOrigin) == false) {
      drain(http);
      ROOT_LOGGER.debug("Request rejected due to HOST/ORIGIN mis-match.");
      http.sendResponseHeaders(FORBIDDEN,-1);
      return;
    }
  }
  final boolean uploadRequest=UPLOAD_REQUEST.equals(request.getPath());
  if (POST.equals(requestMethod)) {
    if (uploadRequest) {
      processUploadRequest(http);
      return;
    }
    String contentType=extractContentType(headers.getFirst(CONTENT_TYPE));
    if (!(APPLICATION_JSON.equals(contentType) || APPLICATION_DMR_ENCODED.equals(contentType))) {
      drain(http);
      ROOT_LOGGER.debug("Request rejected due to unsupported media type - should be one of (application/json,application/dmr-encoded).");
      sendResponse(http,UNSUPPORTED_MEDIA_TYPE,contentType + "\n");
      return;
    }
  }
  processRequest(http);
}
