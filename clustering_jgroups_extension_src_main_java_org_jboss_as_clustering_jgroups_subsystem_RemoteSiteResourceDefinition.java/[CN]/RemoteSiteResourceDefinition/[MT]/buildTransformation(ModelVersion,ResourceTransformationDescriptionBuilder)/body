{
  ResourceTransformationDescriptionBuilder builder=parent.addChildResource(WILDCARD_PATH);
  if (JGroupsModel.VERSION_3_0_0.requiresTransformation(version)) {
    AttributeConverter converter=new AttributeConverter(){
      @Override public void convertOperationParameter(      PathAddress address,      String name,      ModelNode value,      ModelNode operation,      TransformationContext context){
      }
      @Override public void convertResourceAttribute(      PathAddress address,      String name,      ModelNode value,      TransformationContext context){
        ModelNode remoteSite=context.readResourceFromRoot(address).getModel();
        String channelName=remoteSite.get(Attribute.CHANNEL.getName()).asString();
        if (DeprecatedAttribute.STACK.getName().equals(name)) {
          PathAddress subsystemAddress=address.subAddress(0,address.size() - 3);
          PathAddress channelAddress=subsystemAddress.append(ChannelResourceDefinition.pathElement(channelName));
          ModelNode channel=context.readResourceFromRoot(channelAddress).getModel();
          if (channel.hasDefined(ChannelResourceDefinition.Attribute.STACK.getName())) {
            value.set(channel.get(ChannelResourceDefinition.Attribute.STACK.getName()).asString());
          }
 else {
            ModelNode subsystem=context.readResourceFromRoot(subsystemAddress).getModel();
            value.set(subsystem.get(JGroupsSubsystemResourceDefinition.Attribute.DEFAULT_STACK.getName()).asString());
          }
        }
 else         if (DeprecatedAttribute.CLUSTER.getName().equals(name)) {
          value.set(channelName);
        }
 else {
          throw new IllegalStateException();
        }
      }
    }
;
    builder.getAttributeBuilder().setValueConverter(converter,DeprecatedAttribute.STACK.getDefinition(),DeprecatedAttribute.CLUSTER.getDefinition()).setDiscard(DiscardAttributeChecker.ALWAYS,Attribute.CHANNEL.getDefinition()).end();
  }
}
