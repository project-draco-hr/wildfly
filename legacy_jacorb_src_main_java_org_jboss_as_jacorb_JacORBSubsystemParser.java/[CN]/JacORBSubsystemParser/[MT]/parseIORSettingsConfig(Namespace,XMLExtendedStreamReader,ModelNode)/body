{
  EnumSet<Attribute> expectedAttributes=EnumSet.noneOf(Attribute.class);
  this.parseAttributes(reader,node,expectedAttributes,null);
  EnumSet<Element> encountered=EnumSet.noneOf(Element.class);
  while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
    if (namespace != Namespace.forUri(reader.getNamespaceURI()))     throw unexpectedElement(reader);
    final Element element=Element.forName(reader.getLocalName());
    if (!encountered.add(element)) {
      throw duplicateNamedElement(reader,element.getLocalName());
    }
switch (element) {
case IOR_TRANSPORT_CONFIG:
{
        this.parseIORTransportConfig(reader,node);
        break;
      }
case IOR_AS_CONTEXT:
{
      this.parseIORASContext(reader,node);
      break;
    }
case IOR_SAS_CONTEXT:
{
    this.parseIORSASContext(reader,node);
    break;
  }
default :
{
  throw unexpectedElement(reader);
}
}
}
}
