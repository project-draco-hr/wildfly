{
  ServiceController<Bundle> controller=(ServiceController<Bundle>)serviceContainer.getRequiredService(serviceName);
  pendingServices.put(serviceName,new Tuple(controller,deployment));
  controller.addListener(new AbstractServiceListener<Bundle>(){
    @Override public void listenerAdded(    ServiceController<? extends Bundle> controller){
      State state=controller.getState();
      if (state == State.UP || state == State.START_FAILED)       processService(controller);
    }
    @Override public void transition(    final ServiceController<? extends Bundle> controller,    final ServiceController.Transition transition){
      if (transition.getBefore() == ServiceController.Substate.STARTING) {
switch (transition.getAfter()) {
case UP:
          ServiceName key=controller.getName();
        Tuple value=pendingServices.get(key);
      startedServices.put(key,value);
case START_FAILED:
    processService(controller);
}
}
}
private void processService(ServiceController<? extends Bundle> controller){
controller.removeListener(this);
Map<ServiceName,Tuple> bundlesToStart=null;
synchronized (this) {
ServiceName key=controller.getName();
pendingServices.remove(key);
if (pendingServices.isEmpty()) {
  bundlesToStart=new HashMap<ServiceName,Tuple>(startedServices);
  startedServices.clear();
}
}
if (bundlesToStart != null) {
PackageAdmin packageAdmin=injectedPackageAdmin.getValue();
for (Tuple tuple : bundlesToStart.values()) {
  Bundle bundle=tuple.controller.getValue();
  Deployment dep=tuple.deployment;
  if (dep.isAutoStart()) {
    try {
      int bundleType=packageAdmin.getBundleType(bundle);
      if (bundleType != BUNDLE_TYPE_FRAGMENT) {
        bundle.start(Bundle.START_TRANSIENT | Bundle.START_ACTIVATION_POLICY);
      }
    }
 catch (    BundleException ex) {
      LOGGER.errorCannotStartBundle(ex,bundle);
    }
  }
}
}
}
}
);
}
