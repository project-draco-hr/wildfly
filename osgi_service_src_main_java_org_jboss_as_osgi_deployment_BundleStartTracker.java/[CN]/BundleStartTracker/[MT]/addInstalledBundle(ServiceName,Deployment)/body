{
  ServiceController<Bundle> controller=(ServiceController<Bundle>)serviceContainer.getRequiredService(serviceName);
  pendingServices.put(serviceName,new Tuple(controller,deployment));
  controller.addListener(new AbstractServiceListener<Bundle>(){
    @Override public void listenerAdded(    ServiceController<? extends Bundle> controller){
      State state=controller.getState();
      if (state == State.UP || state == State.START_FAILED)       processService(controller);
    }
    @Override public void serviceStarted(    ServiceController<? extends Bundle> controller){
      ServiceName key=controller.getName();
      Tuple value=pendingServices.get(key);
      startedServices.put(key,value);
      processService(controller);
    }
    @Override public void serviceFailed(    ServiceController<? extends Bundle> controller,    StartException reason){
      processService(controller);
    }
    private void processService(    ServiceController<? extends Bundle> controller){
      controller.removeListener(this);
      Map<ServiceName,Tuple> bundlesToStart=null;
synchronized (this) {
        ServiceName key=controller.getName();
        pendingServices.remove(key);
        if (pendingServices.isEmpty()) {
          bundlesToStart=new HashMap<ServiceName,Tuple>(startedServices);
          startedServices.clear();
        }
      }
      if (bundlesToStart != null) {
        PackageAdmin packageAdmin=injectedPackageAdmin.getValue();
        for (        Tuple tuple : bundlesToStart.values()) {
          Bundle bundle=tuple.controller.getValue();
          Deployment dep=tuple.deployment;
          if (dep.isAutoStart()) {
            try {
              int bundleType=packageAdmin.getBundleType(bundle);
              if (bundleType != BUNDLE_TYPE_FRAGMENT) {
                bundle.start();
              }
            }
 catch (            BundleException ex) {
              log.errorf(ex,"Cannot start bundle: %s",bundle);
            }
          }
        }
      }
    }
  }
);
}
