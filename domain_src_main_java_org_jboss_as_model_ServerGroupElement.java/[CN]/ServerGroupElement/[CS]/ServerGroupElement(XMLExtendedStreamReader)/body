{
  super(reader);
  String name=null;
  String profile=null;
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    final String value=reader.getAttributeValue(i);
    if (reader.getAttributeNamespace(i) != null) {
      throw unexpectedAttribute(reader,i);
    }
 else {
      final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case NAME:
{
          name=value;
          break;
        }
case PROFILE:
{
        profile=value;
        break;
      }
default :
    throw unexpectedAttribute(reader,i);
}
}
}
if (name == null) {
throw missingRequired(reader,Collections.singleton(Attribute.NAME));
}
if (profile == null) {
throw missingRequired(reader,Collections.singleton(Attribute.PROFILE));
}
this.name=name;
this.profile=profile;
while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
switch (Namespace.forUri(reader.getNamespaceURI())) {
case DOMAIN_1_0:
{
  final Element element=Element.forName(reader.getLocalName());
switch (element) {
case JVM:
{
      throw new UnsupportedOperationException("implement jvm");
    }
case SOCKET_BINDING_GROUP:
{
    throw new UnsupportedOperationException("implement socket-binding-group");
  }
case DEPLOYMENTS:
{
  parseDeployments(reader);
  break;
}
case SYSTEM_PROPERTIES:
{
throw new UnsupportedOperationException("implement system-properties");
}
default :
throw unexpectedElement(reader);
}
break;
}
default :
throw unexpectedElement(reader);
}
}
}
