{
  resourceModel.get("old").set("existing");
  final ResourceTransformationDescriptionBuilder builder=TransformationDescriptionBuilder.Factory.createInstance(PATH);
  builder.getAttributeBuilder().addAttribute("added",(new DefaultAttributeConverter(){
    @Override public void convertAttribute(    PathAddress address,    String name,    ModelNode attributeValue,    TransformationContext context){
      attributeValue.set("extra");
    }
  }
)).end().build().register(transformersSubRegistration);
  final Resource resource=transformResource();
  Assert.assertNotNull(resource);
  final Resource toto=resource.getChild(PATH);
  Assert.assertNotNull(toto);
  final ModelNode model=toto.getModel();
  Assert.assertEquals(2,model.keys().size());
  Assert.assertEquals("existing",model.get("old").asString());
  Assert.assertEquals("extra",model.get("added").asString());
  ModelNode add=Util.createAddOperation(PathAddress.pathAddress(PATH));
  add.get("old").set("existing");
  OperationTransformer.TransformedOperation transformedAdd=transformOperation(add);
  Assert.assertFalse(transformedAdd.rejectOperation(success()));
  Assert.assertEquals("existing",transformedAdd.getTransformedOperation().get("old").asString());
  Assert.assertEquals("extra",transformedAdd.getTransformedOperation().get("added").asString());
}
