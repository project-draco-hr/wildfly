{
  resourceModel.get("checked").set("test");
  resourceModel.get("other").set("value");
  VisibilityCheckerAndConverter checker=new VisibilityCheckerAndConverter();
  final ResourceTransformationDescriptionBuilder builder=TransformationDescriptionBuilder.Factory.createInstance(PATH);
  builder.getAttributeBuilder().addRejectCheck(checker,"checked").setDiscard(checker,"checked").setValueConverter(checker,"checked").end();
  TransformationDescription.Tools.register(builder.build(),transformersSubRegistration);
  final Resource resource=transformResource();
  Assert.assertNotNull(resource);
  final Resource toto=resource.getChild(PATH);
  Assert.assertNotNull(toto);
  final ModelNode model=toto.getModel();
  Assert.assertTrue(model.hasDefined("checked"));
  checker.checkValues("value");
  checker.reset();
  ModelNode add=Util.createAddOperation(PathAddress.pathAddress(PATH));
  add.get("checked").set("test");
  add.get("other").set("value");
  OperationTransformer.TransformedOperation transformedAdd=transformOperation(add);
  Assert.assertFalse(transformedAdd.rejectOperation(success()));
  checker.checkValues("value");
  checker.reset();
  ModelNode write=Util.getWriteAttributeOperation(PathAddress.pathAddress(PATH),"checked",new ModelNode("test"));
  OperationTransformer.TransformedOperation transformedWrite=transformOperation(write);
  Assert.assertFalse(transformedWrite.rejectOperation(success()));
  checker.checkValues("value");
}
