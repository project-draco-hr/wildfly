{
  resourceModel.get("old").set("value");
  final ResourceTransformationDescriptionBuilder builder=TransformationDescriptionBuilder.Factory.createInstance(PATH);
  builder.getStringAttributeBuilder().rename(Collections.singletonMap("old","new")).end().build().register(transformersSubRegistration);
  final Resource resource=transformResource();
  Assert.assertNotNull(resource);
  final Resource toto=resource.getChild(PATH);
  Assert.assertNotNull(toto);
  final ModelNode model=toto.getModel();
  Assert.assertEquals(1,model.keys().size());
  Assert.assertEquals("value",model.get("new").asString());
  ModelNode add=Util.createAddOperation(PathAddress.pathAddress(PATH));
  add.get("old").set("value");
  OperationTransformer.TransformedOperation transformedAdd=transformOperation(add);
  Assert.assertFalse(transformedAdd.rejectOperation(success()));
  Assert.assertFalse(transformedAdd.getTransformedOperation().hasDefined("old"));
  Assert.assertEquals("value",transformedAdd.getTransformedOperation().get("new").asString());
  ModelNode write=Util.getWriteAttributeOperation(PathAddress.pathAddress(PATH),"old",new ModelNode("value"));
  OperationTransformer.TransformedOperation transformedWrite=transformOperation(write);
  Assert.assertFalse(transformedWrite.rejectOperation(success()));
  Assert.assertEquals("new",transformedWrite.getTransformedOperation().get(NAME));
  Assert.assertEquals("value",transformedWrite.getTransformedOperation().get(VALUE));
}
