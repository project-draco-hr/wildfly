{
  resourceModel.get("one").set("a");
  resourceModel.get("two").set("b");
  resourceModel.get("three").set("TRES");
  resourceModel.get("four");
  resourceModel.get("five");
  resourceModel.get("six");
  Map<String,String> renames=new HashMap<String,String>();
  renames.put("one","uno");
  renames.put("two","dos");
  renames.put("three","TRES");
  CustomRejectExpressionsChecker rejectAttributeChecker=new CustomRejectExpressionsChecker();
  final ResourceTransformationDescriptionBuilder builder=TransformationDescriptionBuilder.Factory.createInstance(PATH);
  builder.getStringAttributeBuilder().addRejectCheck(rejectAttributeChecker,"one","two").addAttribute("one",new AttributeConverter(){
    @Override public void convertAttribute(    String name,    ModelNode attributeValue,    TransformationContext context){
      attributeValue.set("ONE");
    }
  }
).setDiscard(DiscardAttributeChecker.UNDEFINED,"four","five").setDiscard(DiscardAttributeChecker.UNDEFINED,"six").setValueConverter(new AttributeConverter(){
    @Override public void convertAttribute(    String name,    ModelNode attributeValue,    TransformationContext context){
      if (name.equals("one")) {
        attributeValue.set("UNO");
      }
 else       if (name.equals("two")) {
        attributeValue.set("DOS");
      }
    }
  }
,"one","two").addRenames(renames).addRename("three","tres").end().build().register(transformersSubRegistration);
  rejectAttributeChecker.rejected=false;
  final Resource resource=transformResource();
  Assert.assertNotNull(resource);
  final Resource toto=resource.getChild(PATH);
  Assert.assertNotNull(toto);
  final ModelNode model=toto.getModel();
  Assert.assertEquals(4,model.keys().size());
  Assert.assertEquals("ONE",model.get("one").asString());
  Assert.assertEquals("UNO",model.get("uno").asString());
  Assert.assertEquals("DOS",model.get("dos").asString());
  Assert.assertEquals("TRES",model.get("tres").asString());
  Assert.assertFalse(rejectAttributeChecker.rejected);
  final ModelNode add=Util.createAddOperation(PathAddress.pathAddress(PATH));
  add.get("one").set("a");
  add.get("two").set("b");
  add.get("three").set("TRES");
  add.get("four");
  add.get("five");
  add.get("six");
  final OperationTransformer.TransformedOperation transformedAdd=transformOperation(add);
  Assert.assertFalse(transformedAdd.rejectOperation(success()));
  final ModelNode transAdd=transformedAdd.getTransformedOperation();
  transAdd.remove(OP);
  transAdd.remove(OP_ADDR);
  Assert.assertEquals(4,transAdd.keys().size());
  Assert.assertEquals("ONE",transAdd.get("one").asString());
  Assert.assertEquals("UNO",transAdd.get("uno").asString());
  Assert.assertEquals("DOS",transAdd.get("dos").asString());
  Assert.assertEquals("TRES",transAdd.get("tres").asString());
  Assert.assertFalse(rejectAttributeChecker.rejected);
  checkWriteOp(Util.getWriteAttributeOperation(PathAddress.pathAddress(PATH),"one",new ModelNode("a")),"uno",new ModelNode("UNO"));
  checkWriteOp(Util.getWriteAttributeOperation(PathAddress.pathAddress(PATH),"two",new ModelNode("b")),"dos",new ModelNode("DOS"));
  checkWriteOp(Util.getWriteAttributeOperation(PathAddress.pathAddress(PATH),"three",new ModelNode("THREE")),"tres",new ModelNode("THREE"));
  checkWriteOpDiscarded(Util.getWriteAttributeOperation(PathAddress.pathAddress(PATH),"four",new ModelNode()));
  checkWriteOpDiscarded(Util.getWriteAttributeOperation(PathAddress.pathAddress(PATH),"five",new ModelNode()));
  checkWriteOpDiscarded(Util.getWriteAttributeOperation(PathAddress.pathAddress(PATH),"six",new ModelNode()));
  Assert.assertFalse(rejectAttributeChecker.rejected);
  resourceModel.clear();
  resourceModel.get("one").setExpression("${test}");
  resourceModel.get("two").set("b");
  resourceModel.get("three").set("TRES");
  resourceModel.get("four");
  resourceModel.get("five");
  resourceModel.get("six");
  rejectAttributeChecker.rejected=false;
  final Resource resource2=transformResource();
  Assert.assertNotNull(resource2);
  final Resource toto2=resource2.getChild(PATH);
  Assert.assertNotNull(toto2);
  final ModelNode model2=toto2.getModel();
  Assert.assertEquals(4,model2.keys().size());
  Assert.assertEquals("ONE",model2.get("one").asString());
  Assert.assertEquals("UNO",model2.get("uno").asString());
  Assert.assertEquals("DOS",model2.get("dos").asString());
  Assert.assertEquals("TRES",model2.get("tres").asString());
  Assert.assertTrue(rejectAttributeChecker.rejected);
  rejectAttributeChecker.rejected=false;
  final ModelNode add2=Util.createAddOperation(PathAddress.pathAddress(PATH));
  add2.get("one").setExpression("${test}");
  add2.get("two").set("b");
  add2.get("three").set("TRES");
  add2.get("four");
  add2.get("five");
  add2.get("six");
  final OperationTransformer.TransformedOperation transformedAdd2=transformOperation(add2);
  Assert.assertTrue(transformedAdd2.rejectOperation(success()));
  Assert.assertTrue(rejectAttributeChecker.rejected);
  rejectAttributeChecker.rejected=false;
  OperationTransformer.TransformedOperation write=transformOperation(Util.getWriteAttributeOperation(PathAddress.pathAddress(PATH),"one",new ModelNode().setExpression("${test}")));
  Assert.assertTrue(write.rejectOperation(success()));
  Assert.assertTrue(rejectAttributeChecker.rejected);
}
