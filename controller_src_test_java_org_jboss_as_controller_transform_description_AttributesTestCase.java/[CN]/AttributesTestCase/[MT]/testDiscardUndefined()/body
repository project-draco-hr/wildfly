{
  resourceModel.get("discard");
  resourceModel.get("keep").set("here");
  final ResourceTransformationDescriptionBuilder builder=TransformationDescriptionBuilder.Factory.createInstance(PATH);
  builder.getStringAttributeBuilder().discard(DiscardAttributeChecker.UNDEFINED,"discard","keep").end().build().register(transformersSubRegistration);
  final Resource resource=transformResource();
  Assert.assertNotNull(resource);
  final Resource toto=resource.getChild(PATH);
  Assert.assertNotNull(toto);
  final ModelNode model=toto.getModel();
  Assert.assertTrue(model.hasDefined("keep"));
  Assert.assertFalse(model.has("discard"));
  ModelNode add=Util.createAddOperation(PathAddress.pathAddress(PATH));
  add.get("discard");
  add.get("keep").set("here");
  OperationTransformer.TransformedOperation transformedAdd=transformOperation(add);
  Assert.assertFalse(transformedAdd.rejectOperation(success()));
  Assert.assertTrue(transformedAdd.getTransformedOperation().hasDefined("keep"));
  Assert.assertFalse(transformedAdd.getTransformedOperation().has("discard"));
  ModelNode write=Util.getWriteAttributeOperation(PathAddress.pathAddress(PATH),"discard",new ModelNode());
  OperationTransformer.TransformedOperation transformedWrite=transformOperation(write);
  Assert.assertFalse(transformedWrite.rejectOperation(success()));
  ModelNode write2=Util.getWriteAttributeOperation(PathAddress.pathAddress(PATH),"discard",new ModelNode("nothing"));
  OperationTransformer.TransformedOperation transformedWrite2=transformOperation(write2);
  Assert.assertFalse(transformedWrite2.rejectOperation(success()));
  Assert.assertEquals(write2,transformedWrite2.getTransformedOperation());
}
