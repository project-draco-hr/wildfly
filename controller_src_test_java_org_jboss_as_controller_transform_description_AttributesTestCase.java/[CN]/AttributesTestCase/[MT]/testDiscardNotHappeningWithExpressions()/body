{
  resourceModel.get("discard").setExpression("${xxx}");
  final ResourceTransformationDescriptionBuilder builder=TransformationDescriptionBuilder.Factory.createInstance(PATH);
  builder.getStringAttributeBuilder().discard(new DefaultAttributeChecker(false,false){
    @Override public boolean isValueDiscardable(    String attributeName,    ModelNode attributeValue,    TransformationContext context){
      return true;
    }
  }
,"discard").end().build().register(transformersSubRegistration);
  final Resource resource=transformResource();
  Assert.assertNotNull(resource);
  final Resource toto=resource.getChild(PATH);
  Assert.assertNotNull(toto);
  final ModelNode model=toto.getModel();
  Assert.assertEquals(new ModelNode().setExpression("${xxx}"),model.get("discard"));
  ModelNode add=Util.createAddOperation(PathAddress.pathAddress(PATH));
  add.get("discard").setExpression("${xxx}");
  OperationTransformer.TransformedOperation transformedAdd=transformOperation(add);
  Assert.assertFalse(transformedAdd.rejectOperation(success()));
  Assert.assertEquals(add,transformedAdd.getTransformedOperation());
  ModelNode write=Util.getWriteAttributeOperation(PathAddress.pathAddress(PATH),"discard",new ModelNode().setExpression("${xxx}"));
  OperationTransformer.TransformedOperation transformedWrite=transformOperation(write);
  Assert.assertFalse(transformedWrite.rejectOperation(success()));
  Assert.assertEquals(write,transformedWrite.getTransformedOperation());
}
