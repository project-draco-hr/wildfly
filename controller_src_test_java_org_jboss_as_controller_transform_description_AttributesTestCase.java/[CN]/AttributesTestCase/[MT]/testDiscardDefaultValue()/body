{
  resourceModel.get("discard").set("default");
  resourceModel.get("keep").set("non-default");
  final ResourceTransformationDescriptionBuilder builder=TransformationDescriptionBuilder.Factory.createInstance(PATH);
  builder.getAttributeBuilder().setDiscard(new DefaultDiscardAttributeChecker(false,true){
    @Override public boolean isValueDiscardable(    PathAddress address,    String attributeName,    ModelNode attributeValue,    TransformationContext context){
      if (attributeName.equals("discard") || attributeName.equals("keep")) {
        if (attributeValue.asString().equals("default")) {
          return true;
        }
      }
      return false;
    }
  }
,"discard","keep").end();
  TransformationDescription.Tools.register(builder.build(),transformersSubRegistration);
  final Resource resource=transformResource();
  Assert.assertNotNull(resource);
  final Resource toto=resource.getChild(PATH);
  Assert.assertNotNull(toto);
  final ModelNode model=toto.getModel();
  Assert.assertTrue(model.hasDefined("keep"));
  Assert.assertFalse(model.has("discard"));
  ModelNode add=Util.createAddOperation(PathAddress.pathAddress(PATH));
  add.get("discard");
  add.get("keep").set("here");
  OperationTransformer.TransformedOperation transformedAdd=transformOperation(add);
  Assert.assertFalse(transformedAdd.rejectOperation(success()));
  Assert.assertTrue(transformedAdd.getTransformedOperation().hasDefined("keep"));
  Assert.assertFalse(transformedAdd.getTransformedOperation().has("discard"));
  checkOpDiscarded(Util.getWriteAttributeOperation(PathAddress.pathAddress(PATH),"discard",new ModelNode("default")));
  checkWriteOp(Util.getWriteAttributeOperation(PathAddress.pathAddress(PATH),"discard",new ModelNode("something")),"discard",new ModelNode("something"));
}
