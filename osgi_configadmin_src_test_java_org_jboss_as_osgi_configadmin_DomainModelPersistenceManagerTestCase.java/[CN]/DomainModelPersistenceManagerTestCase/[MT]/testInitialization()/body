{
  ConfigurationAdmin mockOSGiCAS=Mockito.mock(ConfigurationAdmin.class);
  ServiceReference mockCASSR=Mockito.mock(ServiceReference.class);
  ServiceReference mockSCSR=Mockito.mock(ServiceReference.class);
  ConfigAdminService mockJBCAS=Mockito.mock(ConfigAdminService.class);
  Set<String> pids=new HashSet<String>(Arrays.asList("a.b","1"));
  Mockito.when(mockJBCAS.getConfigurations()).thenReturn(pids);
  ServiceController mockJBCASController=Mockito.mock(ServiceController.class);
  Mockito.when(mockJBCASController.getValue()).thenReturn(mockJBCAS);
  ServiceContainer mockServiceContainer=Mockito.mock(ServiceContainer.class);
  Mockito.when(mockServiceContainer.getRequiredService(ConfigAdminService.SERVICE_NAME)).thenReturn(mockJBCASController);
  BundleContext mockBundleContext=Mockito.mock(BundleContext.class);
  Mockito.when(mockBundleContext.getServiceReferences(ConfigurationAdmin.class.getName(),null)).thenReturn(new ServiceReference[]{mockCASSR});
  Mockito.when(mockBundleContext.getServiceReference(ServiceContainer.class.getName())).thenReturn(mockSCSR);
  Mockito.when(mockBundleContext.getService(mockSCSR)).thenReturn(mockServiceContainer);
  Mockito.when(mockBundleContext.getService(mockCASSR)).thenReturn(mockOSGiCAS);
  DomainModelPersistenceManager dmpm=new DomainModelPersistenceManager();
  dmpm.start(mockBundleContext);
  Hashtable<String,Object> props=new Hashtable<String,Object>();
  props.put(Constants.SERVICE_RANKING,Integer.MAX_VALUE);
  Mockito.verify(mockBundleContext).registerService(PersistenceManager.class.getName(),dmpm,props);
  Mockito.verify(mockOSGiCAS).getConfiguration("a.b",null);
  Mockito.verify(mockOSGiCAS).getConfiguration("1",null);
}
