{
  context.startSubsystemElement(Namespace.CURRENT.getUriString(),false);
  final ModelNode model=context.getModelNode();
  if (model.hasDefined(JobRepositoryDefinition.NAME)) {
    writer.writeStartElement(JobRepositoryDefinition.NAME);
    final String value=model.get(JobRepositoryDefinition.NAME).asProperty().getName();
    if (JobRepositoryDefinition.JDBC.getPathElement().getValue().equals(value)) {
      writer.writeStartElement(Element.JDBC.getLocalName());
      JobRepositoryDefinition.JNDI_NAME.marshallAsAttribute(model.get(JobRepositoryDefinition.NAME),writer);
      writer.writeEndElement();
    }
 else {
      writer.writeStartElement(Element.IN_MEMORY.getLocalName());
      writer.writeEndElement();
    }
    writer.writeEndElement();
    threadsParser.writeUnboundedQueueThreadPool(writer,model.get(BatchConstants.THREAD_POOL).asProperty(),Element.THREAD_POOL.getLocalName(),false);
    if (model.hasDefined(BatchConstants.THREAD_FACTORY)) {
      threadsParser.writeThreadFactory(writer,model.get(BatchConstants.THREAD_FACTORY).asProperty());
    }
  }
 else {
    writer.writeStartElement(JobRepositoryDefinition.NAME);
    writer.writeStartElement(Element.IN_MEMORY.getLocalName());
    writer.writeEndElement();
    writer.writeEndElement();
  }
  writer.writeEndElement();
}
