{
  final PathAddress subsystemAddress=PathAddress.pathAddress(BatchSubsystemDefinition.SUBSYSTEM_PATH);
  list.add(Util.createAddOperation(subsystemAddress));
  while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
    final Namespace namespace=Namespace.forUri(reader.getNamespaceURI());
    if (namespace == Namespace.BATCH_1_0) {
      final String localName=reader.getLocalName();
      final Element element=Element.forName(localName);
      if (element == Element.JOB_REPOSITORY) {
        parseJobRepository(reader,subsystemAddress,list);
      }
 else       if (element == Element.THREAD_POOL) {
        threadsParser.parseUnboundedQueueThreadPool(reader,namespace.getUriString(),org.jboss.as.threads.Namespace.THREADS_1_1,subsystemAddress.toModelNode(),list,BatchConstants.THREAD_POOL,BatchConstants.THREAD_POOL_NAME);
      }
 else       if (element == Element.THREAD_FACTORY) {
        threadsParser.parseThreadFactory(reader,namespace.getUriString(),org.jboss.as.threads.Namespace.THREADS_1_1,subsystemAddress.toModelNode(),list,BatchConstants.THREAD_FACTORY,null);
      }
 else {
        throw ParseUtils.unexpectedElement(reader);
      }
    }
 else {
      throw ParseUtils.unexpectedElement(reader);
    }
  }
  ParseUtils.requireNoContent(reader);
}
