{
  final String path=PATH.resolveModelAttribute(context,model).asString();
  final boolean directoryListing=DIRECTORY_LISTING.resolveModelAttribute(context,model).asBoolean();
  final boolean followSymlink=FOLLOW_SYMLINK.resolveModelAttribute(context,model).asBoolean();
  final boolean caseSensitive=CASE_SENSITIVE.resolveModelAttribute(context,model).asBoolean();
  final int cacheBufferSize=CACHE_BUFFER_SIZE.resolveModelAttribute(context,model).asInt();
  final int cacheBuffers=CACHE_BUFFERS.resolveModelAttribute(context,model).asInt();
  final List<String> safePaths=SAFE_SYMLINK_PATHS.unwrap(context,model);
  final String[] paths=safePaths.toArray(new String[safePaths.size()]);
  UndertowLogger.ROOT_LOGGER.creatingFileHandler(path,directoryListing,followSymlink,caseSensitive,safePaths);
  FileResourceManager resourceManager=new FileResourceManager(new File(path),cacheBufferSize * cacheBuffers,caseSensitive,followSymlink,paths);
  ResourceHandler handler=new ResourceHandler(resourceManager);
  handler.setDirectoryListingEnabled(directoryListing);
  return handler;
}
