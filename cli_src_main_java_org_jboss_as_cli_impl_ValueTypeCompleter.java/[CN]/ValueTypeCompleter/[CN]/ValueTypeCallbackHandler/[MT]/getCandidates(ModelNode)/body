{
  if (propDescr == null || !propDescr.isDefined()) {
    return Collections.emptyList();
  }
  if (!propDescr.has(Util.VALUE_TYPE)) {
    return Collections.emptyList();
  }
  ModelNode propType=propDescr.get(Util.VALUE_TYPE);
  int mentionedIndex=0;
  if (propStack != null && !propStack.isEmpty()) {
    mentionedIndex=propStack.size();
    for (int i=0; i < propStack.size(); ++i) {
      final String propName=propStack.get(i);
      if (!propType.has(propName)) {
        return Collections.emptyList();
      }
      final ModelNode propNode=propType.get(propName);
      if (propNode.has(Util.VALUE_TYPE)) {
        propType=propNode.get(Util.VALUE_TYPE);
        if (!propType.isDefined()) {
          return Collections.emptyList();
        }
      }
 else {
        return Collections.emptyList();
      }
    }
  }
  if (prop == null) {
    if ((PropertyState.ID.equals(lastEnteredState) || EqualsState.ID.equals(lastEnteredState)) && propBuf.length() > 0) {
      prop=propBuf.toString();
      propBuf.setLength(0);
    }
 else {
      if (lastEnteredState == null) {
        if (propDescr.has(Util.TYPE)) {
          final ModelType type=propDescr.get(Util.TYPE).asType();
          if (type.equals(ModelType.OBJECT)) {
            return Collections.singletonList("{");
          }
 else           if (type.equals(ModelType.LIST)) {
            return Collections.singletonList("[");
          }
        }
      }
      final List<String> mentionedProps=getMentionedProps(mentionedIndex);
      if (mentionedProps == null || mentionedProps.isEmpty() || lastEnteredState.equals(ListItemSeparatorState.ID)) {
        final List<String> candidates=new ArrayList<String>(propType.keys());
        if (mentionedProps != null) {
          candidates.removeAll(mentionedProps);
        }
        Collections.sort(candidates);
        return candidates;
      }
 else {
        return Collections.emptyList();
      }
    }
  }
  if (TextState.ID.equals(lastEnteredState)) {
    if (!propType.has(prop)) {
      return Collections.emptyList();
    }
    propType=propType.get(prop);
    final List<ModelNode> allowed;
    if (!propType.has(Util.ALLOWED)) {
      if (isBoolean(propType)) {
        allowed=BOOLEAN_LIST;
      }
 else {
        return Collections.<String>emptyList();
      }
    }
 else {
      allowed=propType.get(Util.ALLOWED).asList();
    }
    final List<String> candidates=new ArrayList<String>();
    if (propBuf.length() > 0) {
      final String value=propBuf.toString();
      for (      ModelNode candidate : allowed) {
        final String candidateStr=candidate.asString();
        if (candidateStr.startsWith(value)) {
          candidates.add(candidateStr);
        }
      }
    }
 else {
      for (      ModelNode candidate : allowed) {
        candidates.add(candidate.asString());
      }
    }
    Collections.sort(candidates);
    return candidates;
  }
  final List<String> candidates;
  if (EqualsState.ID.equals(lastEnteredState)) {
    final List<ModelNode> allowed;
    if (isBoolean(propType)) {
      allowed=BOOLEAN_LIST;
    }
 else {
      if (!propType.has(prop)) {
        return Collections.emptyList();
      }
      propType=propType.get(prop);
      if (!propType.has(Util.ALLOWED)) {
        if (propType.has(Util.VALUE_TYPE)) {
          final ModelNode propValueType=propType.get(Util.VALUE_TYPE);
          try {
            propValueType.asType();
            return Collections.emptyList();
          }
 catch (          IllegalArgumentException e) {
            if (propType.has(Util.TYPE)) {
              final ModelType type=propType.get(Util.TYPE).asType();
              if (type.equals(ModelType.OBJECT)) {
                return Collections.singletonList("{");
              }
 else               if (type.equals(ModelType.LIST)) {
                return Collections.singletonList("[");
              }
            }
          }
        }
        if (isBoolean(propType)) {
          allowed=BOOLEAN_LIST;
        }
 else {
          return Collections.<String>emptyList();
        }
      }
 else {
        allowed=propType.get(Util.ALLOWED).asList();
      }
    }
    candidates=new ArrayList<String>();
    for (    ModelNode candidate : allowed) {
      candidates.add(candidate.asString());
    }
  }
 else   if (StartObjectState.ID.equals(lastEnteredState) || StartListState.ID.equals(lastEnteredState)) {
    if (!propType.has(prop)) {
      return Collections.emptyList();
    }
    propType=propType.get(prop);
    if (!propType.has(Util.VALUE_TYPE)) {
      return Collections.emptyList();
    }
    final ModelNode propValueType=propType.get(Util.VALUE_TYPE);
    try {
      propValueType.asType();
      return Collections.emptyList();
    }
 catch (    IllegalArgumentException e) {
    }
    candidates=new ArrayList<String>(propValueType.keys());
  }
 else {
    if (propBuf.length() > 0) {
      if (!propType.has(prop)) {
        return Collections.emptyList();
      }
      final ModelNode propNode=propType.get(prop);
      if (propNode.has(Util.VALUE_TYPE)) {
        propType=propNode.get(Util.VALUE_TYPE);
      }
 else {
        return Collections.emptyList();
      }
      prop=propBuf.toString();
      ++mentionedIndex;
    }
 else     if (ListItemSeparatorState.ID.equals(lastEnteredState)) {
      if (!propType.has(prop)) {
        return Collections.emptyList();
      }
      final ModelNode propNode=propType.get(prop);
      if (propNode.has(Util.VALUE_TYPE)) {
        propType=propNode.get(Util.VALUE_TYPE);
      }
 else {
        return Collections.emptyList();
      }
      prop=null;
      ++mentionedIndex;
    }
    candidates=new ArrayList<String>();
    final List<String> mentionedProps=getMentionedProps(mentionedIndex);
    for (    String candidate : propType.keys()) {
      if (prop == null || candidate.startsWith(prop)) {
        if (mentionedProps == null) {
          candidates.add(candidate);
        }
 else         if (!mentionedProps.contains(candidate)) {
          candidates.add(candidate);
        }
      }
    }
  }
  Collections.sort(candidates);
  return candidates;
}
