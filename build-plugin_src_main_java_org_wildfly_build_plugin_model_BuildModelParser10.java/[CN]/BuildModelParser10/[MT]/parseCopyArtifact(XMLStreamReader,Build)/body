{
  String artifact=null;
  String location=null;
  boolean extract=false;
  final Set<Attribute> required=EnumSet.of(Attribute.ARTIFACT,Attribute.TO_LOCATION);
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    final Attribute attribute=Attribute.of(reader.getAttributeName(i));
    required.remove(attribute);
switch (attribute) {
case ARTIFACT:
      artifact=propertyReplacer.replaceProperties(reader.getAttributeValue(i));
    break;
case TO_LOCATION:
  location=propertyReplacer.replaceProperties(reader.getAttributeValue(i));
break;
case EXTRACT:
extract=Boolean.parseBoolean(propertyReplacer.replaceProperties(reader.getAttributeValue(i)));
break;
default :
throw unexpectedContent(reader);
}
}
if (!required.isEmpty()) {
throw missingAttributes(reader.getLocation(),required);
}
CopyArtifact copyArtifact=new CopyArtifact(artifact,location,extract);
result.getCopyArtifacts().add(copyArtifact);
while (reader.hasNext()) {
switch (reader.nextTag()) {
case XMLStreamConstants.END_ELEMENT:
{
return;
}
case XMLStreamConstants.START_ELEMENT:
{
final Element element=Element.of(reader.getName());
switch (element) {
case FILTER:
parseFilter(reader,copyArtifact.getFilters());
break;
default :
throw unexpectedContent(reader);
}
break;
}
default :
{
throw unexpectedContent(reader);
}
}
}
throw endOfDocument(reader.getLocation());
}
