{
  String pattern=null;
  boolean include=false;
  final Set<Attribute> required=EnumSet.of(Attribute.PATTERN,Attribute.INCLUDE);
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    final Attribute attribute=Attribute.of(reader.getAttributeName(i));
    required.remove(attribute);
switch (attribute) {
case PATTERN:
      pattern=propertyReplacer.replaceProperties(reader.getAttributeValue(i));
    break;
case INCLUDE:
  include=Boolean.parseBoolean(propertyReplacer.replaceProperties(reader.getAttributeValue(i)));
break;
default :
throw unexpectedContent(reader);
}
}
if (!required.isEmpty()) {
throw missingAttributes(reader.getLocation(),required);
}
parseNoContent(reader);
filters.add(new FileFilter(wildcardToJavaRegexp(pattern),include));
}
