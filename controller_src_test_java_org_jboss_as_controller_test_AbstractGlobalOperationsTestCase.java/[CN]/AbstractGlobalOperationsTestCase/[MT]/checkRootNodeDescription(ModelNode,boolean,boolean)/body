{
  assertEquals("The root node of the test management API",result.require(DESCRIPTION).asString());
  assertEquals("A list of profiles",result.require(CHILDREN).require(PROFILE).require(DESCRIPTION).asString());
  assertEquals(1,result.require(CHILDREN).require(PROFILE).require(MIN_OCCURS).asInt());
  if (operations) {
    assertTrue(result.require(OPERATIONS).isDefined());
    Set<String> ops=result.require(OPERATIONS).keys();
    assertTrue(ops.contains(READ_ATTRIBUTE_OPERATION));
    assertTrue(ops.contains(READ_CHILDREN_NAMES_OPERATION));
    assertTrue(ops.contains(READ_CHILDREN_TYPES_OPERATION));
    assertTrue(ops.contains(READ_OPERATION_DESCRIPTION_OPERATION));
    assertTrue(ops.contains(READ_OPERATION_NAMES_OPERATION));
    assertTrue(ops.contains(READ_RESOURCE_DESCRIPTION_OPERATION));
    assertTrue(ops.contains(READ_RESOURCE_OPERATION));
    assertEquals(processType != ProcessType.DOMAIN_SERVER,ops.contains(WRITE_ATTRIBUTE_OPERATION));
    for (    String op : ops) {
      assertEquals(op,result.require(OPERATIONS).require(op).require(OPERATION_NAME).asString());
    }
  }
 else {
    assertFalse(result.get(OPERATIONS).isDefined());
  }
  if (!recursive) {
    assertFalse(result.require(CHILDREN).require(PROFILE).require(MODEL_DESCRIPTION).isDefined());
    return;
  }
  assertTrue(result.require(CHILDREN).require(PROFILE).require(MODEL_DESCRIPTION).isDefined());
  assertEquals(1,result.require(CHILDREN).require(PROFILE).require(MODEL_DESCRIPTION).keys().size());
  checkProfileNodeDescription(result.require(CHILDREN).require(PROFILE).require(MODEL_DESCRIPTION).require("*"),true,operations);
}
