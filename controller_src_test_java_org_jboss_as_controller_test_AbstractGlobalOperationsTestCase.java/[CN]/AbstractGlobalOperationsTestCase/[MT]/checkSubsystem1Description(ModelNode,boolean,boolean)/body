{
  assertNotNull(result);
  assertEquals("A test subsystem 1",result.require(DESCRIPTION).asString());
  assertEquals(ModelType.LIST,result.require(ATTRIBUTES).require("attr1").require(TYPE).asType());
  assertEquals(ModelType.INT,result.require(ATTRIBUTES).require("attr1").require(VALUE_TYPE).asType());
  assertEquals("The values",result.require(ATTRIBUTES).require("attr1").require(DESCRIPTION).asString());
  assertTrue(result.require(ATTRIBUTES).require("attr1").require(REQUIRED).asBoolean());
  assertEquals(AccessType.READ_ONLY.toString(),result.require(ATTRIBUTES).require("attr1").get(ACCESS_TYPE).asString());
  assertEquals(ModelType.INT,result.require(ATTRIBUTES).require("read-only").require(TYPE).asType());
  assertEquals("A r/o int",result.require(ATTRIBUTES).require("read-only").require(DESCRIPTION).asString());
  assertFalse(result.require(ATTRIBUTES).require("read-only").require(REQUIRED).asBoolean());
  assertEquals(AccessType.READ_ONLY.toString(),result.require(ATTRIBUTES).require("read-only").get(ACCESS_TYPE).asString());
  assertEquals(ModelType.INT,result.require(ATTRIBUTES).require("metric1").require(TYPE).asType());
  assertEquals("A random metric",result.require(ATTRIBUTES).require("metric1").require(DESCRIPTION).asString());
  assertEquals(AccessType.METRIC.toString(),result.require(ATTRIBUTES).require("metric1").get(ACCESS_TYPE).asString());
  assertEquals(AccessType.METRIC.toString(),result.require(ATTRIBUTES).require("metric2").get(ACCESS_TYPE).asString());
  assertEquals(ModelType.INT,result.require(ATTRIBUTES).require("read-write").require(TYPE).asType());
  assertEquals("A r/w int",result.require(ATTRIBUTES).require("read-write").require(DESCRIPTION).asString());
  assertFalse(result.require(ATTRIBUTES).require("read-write").require(REQUIRED).asBoolean());
  assertEquals(expectedRwAttributeAccess.toString(),result.require(ATTRIBUTES).require("read-write").get(ACCESS_TYPE).asString());
  assertEquals("The children1",result.require(CHILDREN).require("type1").require(DESCRIPTION).asString());
  assertEquals(1,result.require(CHILDREN).require("type1").require(MIN_OCCURS).asInt());
  assertEquals("The children1",result.require(CHILDREN).require("type1").require(DESCRIPTION).asString());
  assertEquals("The children2",result.require(CHILDREN).require("type2").require(DESCRIPTION).asString());
  assertEquals(1,result.require(CHILDREN).require("type2").require(MIN_OCCURS).asInt());
  assertEquals(1,result.require(CHILDREN).require("type2").require(MIN_OCCURS).asInt());
  if (operations) {
    assertTrue(result.require(OPERATIONS).isDefined());
    Set<String> ops=result.require(OPERATIONS).keys();
    assertEquals(processType == ProcessType.DOMAIN_SERVER ? 8 : 11,ops.size());
    boolean runtimeOnly=processType != ProcessType.DOMAIN_SERVER;
    assertEquals(runtimeOnly,ops.contains("testA1-1"));
    assertEquals(runtimeOnly,ops.contains("testA1-2"));
    assertTrue(ops.contains(READ_RESOURCE_OPERATION));
    assertTrue(ops.contains(READ_ATTRIBUTE_OPERATION));
    assertTrue(ops.contains(READ_RESOURCE_DESCRIPTION_OPERATION));
    assertTrue(ops.contains(READ_CHILDREN_NAMES_OPERATION));
    assertTrue(ops.contains(READ_CHILDREN_TYPES_OPERATION));
    assertTrue(ops.contains(READ_CHILDREN_RESOURCES_OPERATION));
    assertTrue(ops.contains(READ_OPERATION_NAMES_OPERATION));
    assertTrue(ops.contains(READ_OPERATION_DESCRIPTION_OPERATION));
    assertEquals(runtimeOnly,ops.contains(WRITE_ATTRIBUTE_OPERATION));
  }
 else {
    assertFalse(result.get(OPERATIONS).isDefined());
  }
  if (!recursive) {
    assertFalse(result.require(CHILDREN).require("type1").require(MODEL_DESCRIPTION).isDefined());
    assertFalse(result.require(CHILDREN).require("type2").require(MODEL_DESCRIPTION).isDefined());
    return;
  }
  checkType1Description(result.require(CHILDREN).require("type1").require(MODEL_DESCRIPTION).require("*"));
  checkType2Description(result.require(CHILDREN).require("type2").require(MODEL_DESCRIPTION).require("other"));
}
