{
  final String attribute=operation.require(NAME).asString();
  boolean containsExpression=false;
  if (attributeNames.contains(attribute)) {
    if (operation.hasDefined(VALUE)) {
      AttributeTransformationRequirementChecker checker;
      if (attributeCheckers != null && (checker=attributeCheckers.get(attribute)) != null) {
        if (checker.isAttributeTransformationRequired(attribute,operation.get(VALUE),context)) {
          containsExpression=true;
        }
      }
 else       if (SIMPLE_EXPRESSIONS.isAttributeTransformationRequired(attribute,operation.get(VALUE),context)) {
        containsExpression=true;
      }
    }
  }
  final boolean rejectResult=containsExpression;
  if (rejectResult) {
    final OperationRejectionPolicy rejectPolicy=new OperationRejectionPolicy(){
      @Override public boolean rejectOperation(      ModelNode preparedResult){
        return true;
      }
      @Override public String getFailureDescription(){
        return context.getLogger().getAttributeWarning(address,operation,ControllerLogger.ROOT_LOGGER.attributesDontSupportExpressions(),attribute);
      }
    }
;
    return new TransformedOperation(operation,rejectPolicy,OperationResultTransformer.ORIGINAL_RESULT);
  }
  return new TransformedOperation(operation,OperationResultTransformer.ORIGINAL_RESULT);
}
