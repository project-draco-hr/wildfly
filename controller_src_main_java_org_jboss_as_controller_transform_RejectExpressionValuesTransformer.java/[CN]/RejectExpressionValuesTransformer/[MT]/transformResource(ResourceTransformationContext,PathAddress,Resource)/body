{
  final ModelNode model=resource.getModel();
  final Set<String> attributes=checkModel(model,context);
  if (attributes.size() > 0) {
    if (context.getTarget().isIgnoredResourceListAvailableAtRegistration()) {
      List<String> msg=Collections.singletonList(context.getLogger().getAttributeWarning(address,null,ControllerLogger.ROOT_LOGGER.attributesDontSupportExpressions(),attributes));
      final TransformationTarget tgt=context.getTarget();
      final String legacyHostName=tgt.getHostName();
      final ModelVersion coreVersion=tgt.getVersion();
      final String subsystemName=findSubsystemName(address);
      final ModelVersion usedVersion=subsystemName == null ? coreVersion : tgt.getSubsystemVersion(subsystemName);
      if (subsystemName != null) {
        throw ControllerLogger.ROOT_LOGGER.rejectAttributesSubsystemModelResourceTransformer(address,legacyHostName,subsystemName,usedVersion,msg);
      }
      throw ControllerLogger.ROOT_LOGGER.rejectAttributesCoreModelResourceTransformer(address,legacyHostName,usedVersion,msg);
    }
 else {
      context.getLogger().logAttributeWarning(address,ControllerLogger.ROOT_LOGGER.attributesDontSupportExpressions(),attributes);
    }
  }
  final ResourceTransformationContext childContext=context.addTransformedResource(PathAddress.EMPTY_ADDRESS,resource);
  childContext.processChildren(resource);
}
