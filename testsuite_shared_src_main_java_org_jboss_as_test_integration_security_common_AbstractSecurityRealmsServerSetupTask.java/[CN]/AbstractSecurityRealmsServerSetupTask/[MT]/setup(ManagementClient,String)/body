{
  this.managementClient=managementClient;
  securityRealms=getSecurityRealms();
  if (securityRealms == null || securityRealms.length == 0) {
    LOGGER.warn("Empty security realm configuration.");
    return;
  }
  final List<ModelNode> updates=new LinkedList<ModelNode>();
  for (  final SecurityRealm securityRealm : securityRealms) {
    final String securityRealmName=securityRealm.getName();
    LOGGER.info("Adding security realm " + securityRealmName);
    final ModelNode compositeOp=new ModelNode();
    compositeOp.get(OP).set(COMPOSITE);
    compositeOp.get(OP_ADDR).setEmptyList();
    ModelNode steps=compositeOp.get(STEPS);
    final PathAddress realmAddr=PathAddress.pathAddress().append(CORE_SERVICE,MANAGEMENT).append(SECURITY_REALM,securityRealmName);
    ModelNode op=Util.createAddOperation(realmAddr);
    steps.add(op);
    final ServerIdentity serverIdentity=securityRealm.getServerIdentity();
    if (serverIdentity != null) {
      if (StringUtils.isNotEmpty(serverIdentity.getSecret())) {
        final ModelNode secretModuleNode=Util.createAddOperation(realmAddr.append(SERVER_IDENTITY,SECRET));
        secretModuleNode.get(Constants.VALUE).set(serverIdentity.getSecret());
        secretModuleNode.get(OPERATION_HEADERS,ALLOW_RESOURCE_SERVICE_RESTART).set(true);
        steps.add(secretModuleNode);
      }
      final RealmKeystore ssl=serverIdentity.getSsl();
      if (ssl != null) {
        final ModelNode sslModuleNode=Util.createAddOperation(realmAddr.append(SERVER_IDENTITY,SSL));
        sslModuleNode.get(KEYSTORE_PATH).set(ssl.getKeystorePath());
        sslModuleNode.get(Constants.KEYSTORE_PASSWORD).set(ssl.getKeystorePassword());
        sslModuleNode.get(OPERATION_HEADERS,ALLOW_RESOURCE_SERVICE_RESTART).set(true);
        steps.add(sslModuleNode);
      }
    }
    final Authentication authentication=securityRealm.getAuthentication();
    if (authentication != null) {
      final RealmKeystore truststore=authentication.getTruststore();
      if (truststore != null) {
        final ModelNode sslModuleNode=Util.createAddOperation(realmAddr.append(AUTHENTICATION,TRUSTSTORE));
        sslModuleNode.get(KEYSTORE_PATH).set(truststore.getKeystorePath());
        sslModuleNode.get(Constants.KEYSTORE_PASSWORD).set(truststore.getKeystorePassword());
        sslModuleNode.get(OPERATION_HEADERS,ALLOW_RESOURCE_SERVICE_RESTART).set(true);
        steps.add(sslModuleNode);
      }
      final LdapAuthentication ldap=authentication.getLdap();
      if (ldap != null) {
        final PathAddress ldapConnectionAddr=PathAddress.pathAddress().append(CORE_SERVICE,MANAGEMENT).append(LDAP_CONNECTION,ldap.getConnection());
        final ModelNode ldapConnectionNode=Util.createAddOperation(ldapConnectionAddr);
        setModelAttribute(ldapConnectionNode,SEARCH_DN,ldap.getSearchDn());
        setModelAttribute(ldapConnectionNode,SEARCH_CREDENTIAL,ldap.getSearchCredential());
        setModelAttribute(ldapConnectionNode,SECURITY_REALM,ldap.getSecurityRealm());
        setModelAttribute(ldapConnectionNode,URL,ldap.getUrl());
        setModelAttribute(ldapConnectionNode,INITIAL_CONTEXT_FACTORY,ldap.getInitialContextFactory());
        ldapConnectionNode.get(OPERATION_HEADERS,ALLOW_RESOURCE_SERVICE_RESTART).set(true);
        steps.add(ldapConnectionNode);
        final ModelNode ldapNode=Util.createAddOperation(realmAddr.append(AUTHENTICATION,LDAP));
        setModelAttribute(ldapNode,CONNECTION,ldap.getConnection());
        setModelAttribute(ldapNode,ADVANCED_FILTER,ldap.getAdvancedFilter());
        setModelAttribute(ldapNode,BASE_DN,ldap.getBaseDn());
        setModelAttribute(ldapNode,USER_DN,ldap.getUserDn());
        setModelAttribute(ldapNode,RECURSIVE,ldap.getRecursive());
        setModelAttribute(ldapNode,USERNAME_ATTRIBUTE,ldap.getUsernameAttribute());
        setModelAttribute(ldapNode,ALLOW_EMPTY_PASSWORDS,ldap.getAllowEmptyPasswords());
        ldapNode.get(OPERATION_HEADERS,ALLOW_RESOURCE_SERVICE_RESTART).set(true);
        steps.add(ldapNode);
      }
    }
    final Authorization authorization=securityRealm.getAuthorization();
    if (authorization != null) {
      final ModelNode authorizationNode=Util.createAddOperation(realmAddr.append(AUTHORIZATION,PROPERTIES));
      setModelAttribute(authorizationNode,PATH,authorization.getPath());
      setModelAttribute(authorizationNode,RELATIVE_TO,authorization.getRelativeTo());
      authorizationNode.get(OPERATION_HEADERS,ALLOW_RESOURCE_SERVICE_RESTART).set(true);
      steps.add(authorizationNode);
    }
    updates.add(compositeOp);
  }
  Utils.applyUpdates(updates,managementClient.getControllerClient());
}
