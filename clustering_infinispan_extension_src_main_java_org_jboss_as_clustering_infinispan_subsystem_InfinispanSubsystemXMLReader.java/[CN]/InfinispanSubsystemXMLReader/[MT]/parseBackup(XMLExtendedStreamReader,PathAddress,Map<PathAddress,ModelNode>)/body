{
  String site=require(reader,XMLAttribute.SITE);
  PathAddress address=backupsAddress.append(BackupResourceDefinition.pathElement(site));
  ModelNode operation=Util.createAddOperation(address);
  operations.put(address,operation);
  for (int i=0; i < reader.getAttributeCount(); i++) {
    XMLAttribute attribute=XMLAttribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case SITE:
{
        break;
      }
case STRATEGY:
{
      readAttribute(reader,i,operation,BackupResourceDefinition.Attribute.STRATEGY);
      break;
    }
case BACKUP_FAILURE_POLICY:
{
    readAttribute(reader,i,operation,BackupResourceDefinition.Attribute.FAILURE_POLICY);
    break;
  }
case TIMEOUT:
{
  readAttribute(reader,i,operation,BackupResourceDefinition.Attribute.TIMEOUT);
  break;
}
case ENABLED:
{
readAttribute(reader,i,operation,BackupResourceDefinition.Attribute.ENABLED);
break;
}
default :
{
throw ParseUtils.unexpectedAttribute(reader,i);
}
}
}
while (reader.hasNext() && (reader.nextTag() != XMLStreamConstants.END_ELEMENT)) {
XMLElement element=XMLElement.forName(reader.getLocalName());
switch (element) {
case TAKE_OFFLINE:
{
for (int i=0; i < reader.getAttributeCount(); i++) {
XMLAttribute attribute=XMLAttribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case TAKE_OFFLINE_AFTER_FAILURES:
{
  readAttribute(reader,i,operation,BackupResourceDefinition.Attribute.TAKE_OFFLINE_AFTER_FAILURES);
  break;
}
case TAKE_OFFLINE_MIN_WAIT:
{
readAttribute(reader,i,operation,BackupResourceDefinition.Attribute.TAKE_OFFLINE_MIN_WAIT);
break;
}
default :
{
throw ParseUtils.unexpectedAttribute(reader,i);
}
}
}
ParseUtils.requireNoContent(reader);
break;
}
default :
{
throw ParseUtils.unexpectedElement(reader);
}
}
}
}
