{
  PathAddress address=null;
  PathAddress operationKey=cacheAddress.append(StoreResourceDefinition.WILDCARD_PATH);
  if (operations.containsKey(operationKey)) {
    throw ParseUtils.unexpectedElement(reader);
  }
  ModelNode operation=Util.createAddOperation();
  operations.put(operationKey,operation);
  this.parseJDBCStoreAttributes(reader,operation);
  while (reader.hasNext() && (reader.nextTag() != XMLStreamConstants.END_ELEMENT)) {
    XMLElement element=XMLElement.forName(reader.getLocalName());
switch (element) {
case ENTRY_TABLE:
{
        if (address != null) {
          this.removeStoreOperations(address,operations);
        }
        address=cacheAddress.append((address == null) ? StringKeyedJDBCStoreResourceDefinition.PATH : MixedKeyedJDBCStoreResourceDefinition.PATH);
        Operations.setPathAddress(operation,address);
        ModelNode binaryTableOperation=operations.get(operationKey.append(BinaryTableResourceDefinition.PATH));
        if (binaryTableOperation != null) {
          Operations.setPathAddress(binaryTableOperation,address.append(BinaryTableResourceDefinition.PATH));
        }
        this.parseJDBCStoreStringTable(reader,address,operations);
        break;
      }
case BUCKET_TABLE:
{
      if (address != null) {
        this.removeStoreOperations(address,operations);
      }
      address=cacheAddress.append((address == null) ? BinaryKeyedJDBCStoreResourceDefinition.PATH : MixedKeyedJDBCStoreResourceDefinition.PATH);
      Operations.setPathAddress(operation,address);
      ModelNode stringTableOperation=operations.get(operationKey.append(StringTableResourceDefinition.PATH));
      if (stringTableOperation != null) {
        Operations.setPathAddress(stringTableOperation,address.append(StringTableResourceDefinition.PATH));
      }
      this.parseJDBCStoreBinaryTable(reader,address,operations);
      break;
    }
default :
{
    this.parseStoreElement(reader,address,operations);
  }
}
}
}
