{
  PathAddress address=null;
  ModelNode operation=Util.createAddOperation();
  this.parseJDBCStoreAttributes(reader,operation);
  while (reader.hasNext() && (reader.nextTag() != XMLStreamConstants.END_ELEMENT)) {
    Element element=Element.forName(reader.getLocalName());
switch (element) {
case ENTRY_TABLE:
{
        if (address != null) {
          operations.remove(address);
        }
        address=cacheAddress.append((address == null) ? BinaryKeyedJDBCStoreResourceDefinition.PATH : MixedKeyedJDBCStoreResourceDefinition.PATH);
        operation.get(ModelDescriptionConstants.OP_ADDR).set(address.toModelNode());
        operations.put(address,operation);
        this.parseJDBCStoreTable(reader,operation.get(JDBCStoreResourceDefinition.STRING_KEYED_TABLE.getName()).setEmptyObject());
        break;
      }
case BUCKET_TABLE:
{
      if (address != null) {
        operations.remove(address);
      }
      address=cacheAddress.append((address == null) ? StringKeyedJDBCStoreResourceDefinition.PATH : MixedKeyedJDBCStoreResourceDefinition.PATH);
      operation.get(ModelDescriptionConstants.OP_ADDR).set(address.toModelNode());
      operations.put(address,operation);
      this.parseJDBCStoreTable(reader,operation.get(JDBCStoreResourceDefinition.BINARY_KEYED_TABLE.getName()).setEmptyObject());
      break;
    }
default :
{
    this.parseStoreElement(reader,address,operations);
  }
}
}
}
