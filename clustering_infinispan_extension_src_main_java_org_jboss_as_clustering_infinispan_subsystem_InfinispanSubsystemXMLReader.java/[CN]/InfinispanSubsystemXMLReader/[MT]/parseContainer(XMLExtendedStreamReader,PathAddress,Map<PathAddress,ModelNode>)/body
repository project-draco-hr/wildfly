{
  String name=require(reader,Attribute.NAME);
  PathAddress address=subsystemAddress.append(CacheContainerResourceDefinition.pathElement(name));
  ModelNode operation=Util.createAddOperation(address);
  operations.put(address,operation);
  for (int i=0; i < reader.getAttributeCount(); i++) {
    ParseUtils.requireNoNamespaceAttribute(reader,i);
    String value=reader.getAttributeValue(i);
    Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case NAME:
{
        break;
      }
case DEFAULT_CACHE:
{
      CacheContainerResourceDefinition.DEFAULT_CACHE.parseAndSetParameter(value,operation,reader);
      break;
    }
case JNDI_NAME:
{
    CacheContainerResourceDefinition.JNDI_NAME.parseAndSetParameter(value,operation,reader);
    break;
  }
case LISTENER_EXECUTOR:
{
  CacheContainerResourceDefinition.LISTENER_EXECUTOR.parseAndSetParameter(value,operation,reader);
  break;
}
case EVICTION_EXECUTOR:
{
CacheContainerResourceDefinition.EVICTION_EXECUTOR.parseAndSetParameter(value,operation,reader);
break;
}
case REPLICATION_QUEUE_EXECUTOR:
{
CacheContainerResourceDefinition.REPLICATION_QUEUE_EXECUTOR.parseAndSetParameter(value,operation,reader);
break;
}
case ALIASES:
{
if (this.schema.since(InfinispanSchema.VERSION_1_1)) {
for (String alias : reader.getListAttributeValue(i)) {
CacheContainerResourceDefinition.ALIASES.parseAndAddParameterElement(alias,operation,reader);
}
break;
}
}
case START:
{
if (this.schema.since(InfinispanSchema.VERSION_1_1)) {
CacheContainerResourceDefinition.START.parseAndSetParameter(value,operation,reader);
break;
}
}
case MODULE:
{
if (this.schema.since(InfinispanSchema.VERSION_1_3)) {
CacheContainerResourceDefinition.MODULE.parseAndSetParameter(value,operation,reader);
break;
}
}
case STATISTICS_ENABLED:
{
if (this.schema.since(InfinispanSchema.VERSION_1_5)) {
CacheContainerResourceDefinition.STATISTICS_ENABLED.parseAndSetParameter(value,operation,reader);
break;
}
}
default :
{
throw ParseUtils.unexpectedAttribute(reader,i);
}
}
}
if (!this.schema.since(InfinispanSchema.VERSION_1_5)) {
operation.get(CacheContainerResourceDefinition.STATISTICS_ENABLED.getName()).set(true);
}
while (reader.hasNext() && (reader.nextTag() != XMLStreamConstants.END_ELEMENT)) {
Element element=Element.forName(reader.getLocalName());
switch (element) {
case ALIAS:
{
if (InfinispanSchema.VERSION_1_0.since(this.schema)) {
CacheContainerResourceDefinition.ALIASES.parseAndAddParameterElement(reader.getElementText(),operation,reader);
break;
}
}
case TRANSPORT:
{
this.parseTransport(reader,address,operations);
break;
}
case LOCAL_CACHE:
{
this.parseLocalCache(reader,address,operations);
break;
}
case INVALIDATION_CACHE:
{
this.parseInvalidationCache(reader,address,operations);
break;
}
case REPLICATED_CACHE:
{
this.parseReplicatedCache(reader,address,operations);
break;
}
case DISTRIBUTED_CACHE:
{
this.parseDistributedCache(reader,address,operations);
break;
}
default :
{
throw ParseUtils.unexpectedElement(reader);
}
}
}
}
