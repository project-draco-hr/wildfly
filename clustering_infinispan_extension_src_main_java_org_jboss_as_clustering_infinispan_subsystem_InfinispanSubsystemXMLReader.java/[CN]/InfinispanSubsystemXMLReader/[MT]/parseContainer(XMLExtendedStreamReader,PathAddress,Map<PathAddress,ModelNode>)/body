{
  String name=require(reader,XMLAttribute.NAME);
  PathAddress address=subsystemAddress.append(CacheContainerResourceDefinition.pathElement(name));
  ModelNode operation=Util.createAddOperation(address);
  operations.put(address,operation);
  for (int i=0; i < reader.getAttributeCount(); i++) {
    ParseUtils.requireNoNamespaceAttribute(reader,i);
    XMLAttribute attribute=XMLAttribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case NAME:
{
        break;
      }
case DEFAULT_CACHE:
{
      readAttribute(reader,i,operation,CacheContainerResourceDefinition.Attribute.DEFAULT_CACHE);
      break;
    }
case JNDI_NAME:
{
    readAttribute(reader,i,operation,CacheContainerResourceDefinition.Attribute.JNDI_NAME);
    break;
  }
case LISTENER_EXECUTOR:
{
  readAttribute(reader,i,operation,CacheContainerResourceDefinition.ExecutorAttribute.LISTENER);
  break;
}
case EVICTION_EXECUTOR:
{
readAttribute(reader,i,operation,CacheContainerResourceDefinition.ExecutorAttribute.EVICTION);
break;
}
case REPLICATION_QUEUE_EXECUTOR:
{
readAttribute(reader,i,operation,CacheContainerResourceDefinition.ExecutorAttribute.REPLICATION_QUEUE);
break;
}
case START:
{
if (this.schema.since(InfinispanSchema.VERSION_1_1) && !this.schema.since(InfinispanSchema.VERSION_3_0)) {
ROOT_LOGGER.attributeDeprecated(attribute.getLocalName(),reader.getLocalName());
}
 else {
throw ParseUtils.unexpectedAttribute(reader,i);
}
break;
}
case ALIASES:
{
if (this.schema.since(InfinispanSchema.VERSION_1_1)) {
for (String value : reader.getListAttributeValue(i)) {
setAttribute(reader,value,operation,CacheContainerResourceDefinition.Attribute.ALIASES);
}
break;
}
}
case MODULE:
{
if (this.schema.since(InfinispanSchema.VERSION_1_3)) {
readAttribute(reader,i,operation,CacheContainerResourceDefinition.Attribute.MODULE);
break;
}
}
case STATISTICS_ENABLED:
{
if (this.schema.since(InfinispanSchema.VERSION_1_5)) {
readAttribute(reader,i,operation,CacheContainerResourceDefinition.Attribute.STATISTICS_ENABLED);
break;
}
}
default :
{
throw ParseUtils.unexpectedAttribute(reader,i);
}
}
}
if (!this.schema.since(InfinispanSchema.VERSION_1_5)) {
operation.get(CacheContainerResourceDefinition.Attribute.STATISTICS_ENABLED.getDefinition().getName()).set(true);
}
operations.put(address.append(TransportResourceDefinition.WILDCARD_PATH),Util.createAddOperation(address.append(NoTransportResourceDefinition.PATH)));
while (reader.hasNext() && (reader.nextTag() != XMLStreamConstants.END_ELEMENT)) {
XMLElement element=XMLElement.forName(reader.getLocalName());
switch (element) {
case ALIAS:
{
if (InfinispanSchema.VERSION_1_0.since(this.schema)) {
readElement(reader,operation,CacheContainerResourceDefinition.Attribute.ALIASES);
break;
}
throw ParseUtils.unexpectedElement(reader);
}
case TRANSPORT:
{
this.parseTransport(reader,address,operations);
break;
}
case LOCAL_CACHE:
{
this.parseLocalCache(reader,address,operations);
break;
}
case INVALIDATION_CACHE:
{
this.parseInvalidationCache(reader,address,operations);
break;
}
case REPLICATED_CACHE:
{
this.parseReplicatedCache(reader,address,operations);
break;
}
case DISTRIBUTED_CACHE:
{
this.parseDistributedCache(reader,address,operations);
break;
}
default :
{
throw ParseUtils.unexpectedElement(reader);
}
}
}
}
