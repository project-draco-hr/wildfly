{
  XMLElement element=XMLElement.forName(reader.getLocalName());
switch (element) {
case EVICTION:
{
      this.parseEviction(reader,cacheAddress,operations);
      break;
    }
case EXPIRATION:
{
    this.parseExpiration(reader,cacheAddress,operations);
    break;
  }
case LOCKING:
{
  this.parseLocking(reader,cacheAddress,operations);
  break;
}
case TRANSACTION:
{
this.parseTransaction(reader,cacheAddress,operations);
break;
}
case STORE:
{
this.parseCustomStore(reader,cacheAddress,operations);
break;
}
case FILE_STORE:
{
this.parseFileStore(reader,cacheAddress,operations);
break;
}
case REMOTE_STORE:
{
this.parseRemoteStore(reader,cacheAddress,operations);
break;
}
case JDBC_STORE:
{
if (this.schema.since(InfinispanSchema.VERSION_1_2)) {
throw ParseUtils.unexpectedElement(reader);
}
this.parseJDBCStore(reader,cacheAddress,operations);
break;
}
case STRING_KEYED_JDBC_STORE:
{
if (this.schema.since(InfinispanSchema.VERSION_1_2)) {
this.parseStringKeyedJDBCStore(reader,cacheAddress,operations);
break;
}
}
case BINARY_KEYED_JDBC_STORE:
{
if (this.schema.since(InfinispanSchema.VERSION_1_2)) {
this.parseBinaryKeyedJDBCStore(reader,cacheAddress,operations);
break;
}
}
case MIXED_KEYED_JDBC_STORE:
{
if (this.schema.since(InfinispanSchema.VERSION_1_2)) {
this.parseMixedKeyedJDBCStore(reader,cacheAddress,operations);
break;
}
}
case INDEXING:
{
if (this.schema.since(InfinispanSchema.VERSION_1_4) && !this.schema.since(InfinispanSchema.VERSION_4_0)) {
this.parseIndexing(reader,cacheAddress,operations);
break;
}
}
default :
{
throw ParseUtils.unexpectedElement(reader);
}
}
}
