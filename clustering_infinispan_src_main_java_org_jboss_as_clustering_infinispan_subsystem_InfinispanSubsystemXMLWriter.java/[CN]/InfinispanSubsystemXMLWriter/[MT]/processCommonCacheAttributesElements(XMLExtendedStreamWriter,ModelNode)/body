{
  this.writeOptional(writer,Attribute.START,cache,ModelKeys.START);
  this.writeOptional(writer,Attribute.BATCHING,cache,ModelKeys.BATCHING);
  this.writeOptional(writer,Attribute.JNDI_NAME,cache,ModelKeys.JNDI_NAME);
  this.writeOptional(writer,Attribute.MODULE,cache,ModelKeys.MODULE);
  if (cache.get(ModelKeys.LOCKING,ModelKeys.LOCKING_NAME).isDefined()) {
    writer.writeStartElement(Element.LOCKING.getLocalName());
    ModelNode locking=cache.get(ModelKeys.LOCKING,ModelKeys.LOCKING_NAME);
    this.writeOptional(writer,Attribute.ISOLATION,locking,ModelKeys.ISOLATION);
    this.writeOptional(writer,Attribute.STRIPING,locking,ModelKeys.STRIPING);
    this.writeOptional(writer,Attribute.ACQUIRE_TIMEOUT,locking,ModelKeys.ACQUIRE_TIMEOUT);
    this.writeOptional(writer,Attribute.CONCURRENCY_LEVEL,locking,ModelKeys.CONCURRENCY_LEVEL);
    writer.writeEndElement();
  }
  if (cache.get(ModelKeys.TRANSACTION,ModelKeys.TRANSACTION_NAME).isDefined()) {
    writer.writeStartElement(Element.TRANSACTION.getLocalName());
    ModelNode transaction=cache.get(ModelKeys.TRANSACTION,ModelKeys.TRANSACTION_NAME);
    this.writeOptional(writer,Attribute.STOP_TIMEOUT,transaction,ModelKeys.STOP_TIMEOUT);
    this.writeOptional(writer,Attribute.MODE,transaction,ModelKeys.MODE);
    this.writeOptional(writer,Attribute.LOCKING,transaction,ModelKeys.LOCKING);
    writer.writeEndElement();
  }
  if (cache.get(ModelKeys.EVICTION,ModelKeys.EVICTION_NAME).isDefined()) {
    writer.writeStartElement(Element.EVICTION.getLocalName());
    ModelNode eviction=cache.get(ModelKeys.EVICTION,ModelKeys.EVICTION_NAME);
    this.writeOptional(writer,Attribute.STRATEGY,eviction,ModelKeys.STRATEGY);
    this.writeOptional(writer,Attribute.MAX_ENTRIES,eviction,ModelKeys.MAX_ENTRIES);
    writer.writeEndElement();
  }
  if (cache.get(ModelKeys.EXPIRATION,ModelKeys.EXPIRATION_NAME).isDefined()) {
    writer.writeStartElement(Element.EXPIRATION.getLocalName());
    ModelNode expiration=cache.get(ModelKeys.EXPIRATION,ModelKeys.EXPIRATION_NAME);
    this.writeOptional(writer,Attribute.MAX_IDLE,expiration,ModelKeys.MAX_IDLE);
    this.writeOptional(writer,Attribute.LIFESPAN,expiration,ModelKeys.LIFESPAN);
    this.writeOptional(writer,Attribute.INTERVAL,expiration,ModelKeys.INTERVAL);
    writer.writeEndElement();
  }
  if (cache.get(ModelKeys.STATE_TRANSFER,ModelKeys.STATE_TRANSFER_NAME).isDefined()) {
    ModelNode stateTransfer=cache.get(ModelKeys.STATE_TRANSFER,ModelKeys.STATE_TRANSFER_NAME);
    writer.writeStartElement(Element.STATE_TRANSFER.getLocalName());
    this.writeOptional(writer,Attribute.ENABLED,stateTransfer,ModelKeys.ENABLED);
    this.writeOptional(writer,Attribute.TIMEOUT,stateTransfer,ModelKeys.TIMEOUT);
    this.writeOptional(writer,Attribute.CHUNK_SIZE,stateTransfer,ModelKeys.CHUNK_SIZE);
    writer.writeEndElement();
  }
  if (cache.get(ModelKeys.STORE,ModelKeys.STORE_NAME).isDefined()) {
    ModelNode store=cache.get(ModelKeys.STORE,ModelKeys.STORE_NAME);
    writer.writeStartElement(Element.STORE.getLocalName());
    this.writeRequired(writer,Attribute.CLASS,store,ModelKeys.CLASS);
    this.writeStoreAttributes(writer,store);
    this.writeStoreWriteBehind(writer,store);
    this.writeStoreProperties(writer,store);
    writer.writeEndElement();
  }
  if (cache.get(ModelKeys.FILE_STORE,ModelKeys.FILE_STORE_NAME).isDefined()) {
    ModelNode store=cache.get(ModelKeys.FILE_STORE,ModelKeys.FILE_STORE_NAME);
    writer.writeStartElement(Element.FILE_STORE.getLocalName());
    this.writeOptional(writer,Attribute.RELATIVE_TO,store,ModelKeys.RELATIVE_TO);
    this.writeOptional(writer,Attribute.PATH,store,ModelKeys.PATH);
    this.writeStoreAttributes(writer,store);
    this.writeStoreWriteBehind(writer,store);
    this.writeStoreProperties(writer,store);
    writer.writeEndElement();
  }
  if (cache.get(ModelKeys.STRING_KEYED_JDBC_STORE,ModelKeys.STRING_KEYED_JDBC_STORE_NAME).isDefined()) {
    ModelNode store=cache.get(ModelKeys.STRING_KEYED_JDBC_STORE,ModelKeys.STRING_KEYED_JDBC_STORE_NAME);
    writer.writeStartElement(Element.STRING_KEYED_JDBC_STORE.getLocalName());
    this.writeRequired(writer,Attribute.DATASOURCE,store,ModelKeys.DATASOURCE);
    this.writeStoreAttributes(writer,store);
    this.writeStoreWriteBehind(writer,store);
    this.writeStoreProperties(writer,store);
    this.writeJDBCStoreTable(writer,Element.STRING_KEYED_TABLE,store,ModelKeys.STRING_KEYED_TABLE);
    writer.writeEndElement();
  }
  if (cache.get(ModelKeys.BINARY_KEYED_JDBC_STORE,ModelKeys.BINARY_KEYED_JDBC_STORE_NAME).isDefined()) {
    ModelNode store=cache.get(ModelKeys.BINARY_KEYED_JDBC_STORE,ModelKeys.BINARY_KEYED_JDBC_STORE_NAME);
    writer.writeStartElement(Element.BINARY_KEYED_JDBC_STORE.getLocalName());
    this.writeRequired(writer,Attribute.DATASOURCE,store,ModelKeys.DATASOURCE);
    this.writeStoreAttributes(writer,store);
    this.writeStoreWriteBehind(writer,store);
    this.writeStoreProperties(writer,store);
    this.writeJDBCStoreTable(writer,Element.BINARY_KEYED_TABLE,store,ModelKeys.BINARY_KEYED_TABLE);
    writer.writeEndElement();
  }
  if (cache.get(ModelKeys.MIXED_KEYED_JDBC_STORE,ModelKeys.MIXED_KEYED_JDBC_STORE_NAME).isDefined()) {
    ModelNode store=cache.get(ModelKeys.MIXED_KEYED_JDBC_STORE,ModelKeys.MIXED_KEYED_JDBC_STORE_NAME);
    writer.writeStartElement(Element.MIXED_KEYED_JDBC_STORE.getLocalName());
    this.writeRequired(writer,Attribute.DATASOURCE,store,ModelKeys.DATASOURCE);
    this.writeStoreAttributes(writer,store);
    this.writeStoreWriteBehind(writer,store);
    this.writeStoreProperties(writer,store);
    this.writeJDBCStoreTable(writer,Element.STRING_KEYED_TABLE,store,ModelKeys.STRING_KEYED_TABLE);
    this.writeJDBCStoreTable(writer,Element.BINARY_KEYED_TABLE,store,ModelKeys.BINARY_KEYED_TABLE);
    writer.writeEndElement();
  }
  if (cache.get(ModelKeys.REMOTE_STORE,ModelKeys.REMOTE_STORE_NAME).isDefined()) {
    ModelNode store=cache.get(ModelKeys.REMOTE_STORE,ModelKeys.REMOTE_STORE_NAME);
    writer.writeStartElement(Element.REMOTE_STORE.getLocalName());
    this.writeOptional(writer,Attribute.CACHE,store,ModelKeys.CACHE);
    this.writeOptional(writer,Attribute.SOCKET_TIMEOUT,store,ModelKeys.SOCKET_TIMEOUT);
    this.writeOptional(writer,Attribute.TCP_NO_DELAY,store,ModelKeys.TCP_NO_DELAY);
    this.writeStoreAttributes(writer,store);
    this.writeStoreWriteBehind(writer,store);
    this.writeStoreProperties(writer,store);
    for (    ModelNode remoteServer : store.get(ModelKeys.REMOTE_SERVERS).asList()) {
      writer.writeStartElement(Element.REMOTE_SERVER.getLocalName());
      writer.writeAttribute(Attribute.OUTBOUND_SOCKET_BINDING.getLocalName(),remoteServer.get(ModelKeys.OUTBOUND_SOCKET_BINDING).asString());
      writer.writeEndElement();
    }
    writer.writeEndElement();
  }
  if (cache.get(ModelKeys.INDEXING).isDefined() || cache.get(ModelKeys.INDEXING_PROPERTIES).isDefined()) {
    writer.writeStartElement(Element.INDEXING.getLocalName());
    CommonAttributes.INDEXING.marshallAsAttribute(cache,writer);
    CommonAttributes.INDEXING_PROPERTIES.marshallAsElement(cache,writer);
    writer.writeEndElement();
  }
}
