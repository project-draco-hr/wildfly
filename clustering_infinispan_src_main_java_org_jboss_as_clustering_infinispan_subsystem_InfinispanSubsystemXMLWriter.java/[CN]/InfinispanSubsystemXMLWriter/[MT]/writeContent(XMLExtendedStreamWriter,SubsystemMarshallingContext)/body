{
  context.startSubsystemElement(InfinispanSchema.CURRENT.getNamespaceUri(),false);
  ModelNode model=context.getModelNode();
  if (model.isDefined()) {
    if (model.hasDefined(CacheContainerResourceDefinition.WILDCARD_PATH.getKey())) {
      for (      Property entry : model.get(CacheContainerResourceDefinition.WILDCARD_PATH.getKey()).asPropertyList()) {
        String containerName=entry.getName();
        ModelNode container=entry.getValue();
        writer.writeStartElement(Element.CACHE_CONTAINER.getLocalName());
        writer.writeAttribute(Attribute.NAME.getLocalName(),containerName);
        CacheContainerResourceDefinition.DEFAULT_CACHE.marshallAsAttribute(container,writer);
        CacheContainerResourceDefinition.EVICTION_EXECUTOR.marshallAsAttribute(container,writer);
        CacheContainerResourceDefinition.JNDI_NAME.marshallAsAttribute(container,writer);
        CacheContainerResourceDefinition.LISTENER_EXECUTOR.marshallAsAttribute(container,writer);
        CacheContainerResourceDefinition.REPLICATION_QUEUE_EXECUTOR.marshallAsAttribute(container,writer);
        CacheContainerResourceDefinition.START.marshallAsAttribute(container,writer);
        CacheContainerResourceDefinition.MODULE.marshallAsAttribute(container,writer);
        CacheContainerResourceDefinition.STATISTICS_ENABLED.marshallAsAttribute(container,writer);
        CacheContainerResourceDefinition.ALIASES.marshallAsElement(container,writer);
        if (container.hasDefined(TransportResourceDefinition.PATH.getKey())) {
          writer.writeStartElement(Element.TRANSPORT.getLocalName());
          ModelNode transport=container.get(TransportResourceDefinition.PATH.getKeyValuePair());
          TransportResourceDefinition.CHANNEL.marshallAsAttribute(transport,writer);
          TransportResourceDefinition.EXECUTOR.marshallAsAttribute(transport,writer);
          TransportResourceDefinition.LOCK_TIMEOUT.marshallAsAttribute(transport,writer);
          writer.writeEndElement();
        }
        if (container.hasDefined(CacheType.LOCAL.pathElement().getKey())) {
          for (          Property property : container.get(CacheType.LOCAL.pathElement().getKey()).asPropertyList()) {
            ModelNode cache=property.getValue();
            writer.writeStartElement(Element.LOCAL_CACHE.getLocalName());
            writeCacheAttributes(writer,property.getName(),cache);
            writeCacheElements(writer,cache);
            writer.writeEndElement();
          }
        }
        if (container.hasDefined(CacheType.INVALIDATION.pathElement().getKey())) {
          for (          Property property : container.get(CacheType.INVALIDATION.pathElement().getKey()).asPropertyList()) {
            ModelNode cache=property.getValue();
            writer.writeStartElement(Element.INVALIDATION_CACHE.getLocalName());
            writeClusteredCacheAttributes(writer,property.getName(),cache);
            writeCacheElements(writer,cache);
            writer.writeEndElement();
          }
        }
        if (container.hasDefined(CacheType.REPLICATED.pathElement().getKey())) {
          for (          Property property : container.get(CacheType.REPLICATED.pathElement().getKey()).asPropertyList()) {
            ModelNode cache=property.getValue();
            writer.writeStartElement(Element.REPLICATED_CACHE.getLocalName());
            writeClusteredCacheAttributes(writer,property.getName(),cache);
            writeCacheElements(writer,cache);
            writer.writeEndElement();
          }
        }
        if (container.hasDefined(CacheType.DISTRIBUTED.pathElement().getKey())) {
          for (          Property property : container.get(CacheType.DISTRIBUTED.pathElement().getKey()).asPropertyList()) {
            ModelNode cache=property.getValue();
            writer.writeStartElement(Element.DISTRIBUTED_CACHE.getLocalName());
            writeClusteredCacheAttributes(writer,property.getName(),cache);
            DistributedCacheResourceDefinition.OWNERS.marshallAsAttribute(cache,writer);
            DistributedCacheResourceDefinition.SEGMENTS.marshallAsAttribute(cache,writer);
            DistributedCacheResourceDefinition.L1_LIFESPAN.marshallAsAttribute(cache,writer);
            DistributedCacheResourceDefinition.CAPACITY_FACTOR.marshallAsAttribute(cache,writer);
            DistributedCacheResourceDefinition.CONSISTENT_HASH_STRATEGY.marshallAsAttribute(cache,writer);
            writeCacheElements(writer,cache);
            writer.writeEndElement();
          }
        }
        writer.writeEndElement();
      }
    }
  }
  writer.writeEndElement();
}
