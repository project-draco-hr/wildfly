{
  context.startSubsystemElement(Namespace.CURRENT.getUri(),false);
  ModelNode model=context.getModelNode();
  if (model.isDefined()) {
    for (    Property entry : model.get(ModelKeys.CACHE_CONTAINER).asPropertyList()) {
      String containerName=entry.getName();
      ModelNode container=entry.getValue();
      writer.writeStartElement(Element.CACHE_CONTAINER.getLocalName());
      writer.writeAttribute(Attribute.NAME.getLocalName(),containerName);
      CacheContainerResourceDefinition.DEFAULT_CACHE.marshallAsAttribute(container,writer);
      CacheContainerResourceDefinition.EVICTION_EXECUTOR.marshallAsAttribute(container,writer);
      CacheContainerResourceDefinition.JNDI_NAME.marshallAsAttribute(container,writer);
      CacheContainerResourceDefinition.LISTENER_EXECUTOR.marshallAsAttribute(container,writer);
      CacheContainerResourceDefinition.REPLICATION_QUEUE_EXECUTOR.marshallAsAttribute(container,writer);
      CacheContainerResourceDefinition.START.marshallAsAttribute(container,writer);
      CacheContainerResourceDefinition.MODULE.marshallAsAttribute(container,writer);
      CacheContainerResourceDefinition.STATISTICS_ENABLED.marshallAsAttribute(container,writer);
      CacheContainerResourceDefinition.ALIASES.marshallAsElement(container,writer);
      if (container.hasDefined(ModelKeys.TRANSPORT)) {
        writer.writeStartElement(Element.TRANSPORT.getLocalName());
        ModelNode transport=container.get(ModelKeys.TRANSPORT,ModelKeys.TRANSPORT_NAME);
        TransportResourceDefinition.STACK.marshallAsAttribute(transport,false,writer);
        TransportResourceDefinition.CLUSTER.marshallAsAttribute(transport,false,writer);
        TransportResourceDefinition.EXECUTOR.marshallAsAttribute(transport,false,writer);
        TransportResourceDefinition.LOCK_TIMEOUT.marshallAsAttribute(transport,false,writer);
        writer.writeEndElement();
      }
      if (container.get(ModelKeys.LOCAL_CACHE).isDefined()) {
        for (        Property property : container.get(ModelKeys.LOCAL_CACHE).asPropertyList()) {
          ModelNode cache=property.getValue();
          writer.writeStartElement(Element.LOCAL_CACHE.getLocalName());
          writeCacheAttributes(writer,property.getName(),cache);
          writeCacheElements(writer,cache);
          writer.writeEndElement();
        }
      }
      if (container.get(ModelKeys.INVALIDATION_CACHE).isDefined()) {
        for (        Property property : container.get(ModelKeys.INVALIDATION_CACHE).asPropertyList()) {
          ModelNode cache=property.getValue();
          writer.writeStartElement(Element.INVALIDATION_CACHE.getLocalName());
          writeClusteredCacheAttributes(writer,property.getName(),cache);
          writeCacheElements(writer,cache);
          writer.writeEndElement();
        }
      }
      if (container.get(ModelKeys.REPLICATED_CACHE).isDefined()) {
        for (        Property property : container.get(ModelKeys.REPLICATED_CACHE).asPropertyList()) {
          ModelNode cache=property.getValue();
          writer.writeStartElement(Element.REPLICATED_CACHE.getLocalName());
          writeClusteredCacheAttributes(writer,property.getName(),cache);
          writeCacheElements(writer,cache);
          writer.writeEndElement();
        }
      }
      if (container.get(ModelKeys.DISTRIBUTED_CACHE).isDefined()) {
        for (        Property property : container.get(ModelKeys.DISTRIBUTED_CACHE).asPropertyList()) {
          ModelNode cache=property.getValue();
          writer.writeStartElement(Element.DISTRIBUTED_CACHE.getLocalName());
          writeClusteredCacheAttributes(writer,property.getName(),cache);
          DistributedCacheResourceDefinition.OWNERS.marshallAsAttribute(cache,writer);
          DistributedCacheResourceDefinition.SEGMENTS.marshallAsAttribute(cache,writer);
          DistributedCacheResourceDefinition.L1_LIFESPAN.marshallAsAttribute(cache,writer);
          writeCacheElements(writer,cache);
          writer.writeEndElement();
        }
      }
      writer.writeEndElement();
    }
  }
  writer.writeEndElement();
}
