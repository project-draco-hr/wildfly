{
  if (!gate) {
synchronized (this) {
      while (!gate) {
        try {
          wait();
        }
 catch (        InterruptedException e) {
          Thread.currentThread().interrupt();
          throw new IllegalStateException("Component not available (interrupted)");
        }
      }
    }
  }
  SimpleInterceptorFactoryContext interceptorContext=new SimpleInterceptorFactoryContext();
  Object objectInstance=createObjectInstance();
  List<Interceptor> preDestoryInterceptors=new ArrayList<Interceptor>();
  createPreDestroyMethods(interceptorContext,preDestoryInterceptors);
  preDestoryInterceptors.addAll(applyInjections(objectInstance));
  performPostConstructLifecycle(objectInstance,interceptorContext);
  return constructComponentInstance(objectInstance,preDestoryInterceptors,interceptorContext);
}
