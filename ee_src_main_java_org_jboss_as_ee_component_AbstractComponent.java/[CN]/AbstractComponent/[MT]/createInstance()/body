{
  if (!gate) {
synchronized (this) {
      while (!gate) {
        try {
          wait();
        }
 catch (        InterruptedException e) {
          Thread.currentThread().interrupt();
          throw new IllegalStateException("Component not available (interrupted)");
        }
      }
    }
  }
  SimpleInterceptorFactoryContext interceptorContext=new SimpleInterceptorFactoryContext();
  Object objectInstance=createObjectInstance();
  List<Interceptor> preDestoryInterceptors=new ArrayList<Interceptor>();
  createPreDestroyMethods(interceptorContext,preDestoryInterceptors);
  preDestoryInterceptors.addAll(applyInjections(objectInstance));
  AbstractComponentInstance instance=constructComponentInstance(objectInstance,preDestoryInterceptors,interceptorContext);
  performPostConstructLifecycle(instance,interceptorContext);
  final Map<Method,InterceptorFactory> factoryMap=getInterceptorFactoryMap();
  final Map<Method,Interceptor> methodMap=new IdentityHashMap<Method,Interceptor>(factoryMap.size());
  interceptorContext.getContextData().put(AbstractComponent.INSTANCE_KEY,objectInstance);
  for (  Map.Entry<Method,InterceptorFactory> entry : factoryMap.entrySet()) {
    Method method=entry.getKey();
    PerViewMethodInterceptorFactory.populate(interceptorContext,this,instance,method);
    methodMap.put(method,entry.getValue().create(interceptorContext));
  }
  instance.setMethodMap(methodMap);
  return instance;
}
