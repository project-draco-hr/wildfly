{
  KernelServicesBuilder builder=createKernelServicesBuilder(TestModelType.DOMAIN).setXmlResource(xmlResource);
  if (serverGroup) {
    builder.setModelInitializer(StandardServerGroupInitializers.XML_MODEL_INITIALIZER,StandardServerGroupInitializers.XML_MODEL_WRITE_SANITIZER);
  }
  LegacyKernelServicesInitializer legacyInitializer=builder.createLegacyKernelServicesBuilder(modelVersion,testControllerVersion);
  if (serverGroup) {
    StandardServerGroupInitializers.addServerGroupInitializers(legacyInitializer);
  }
  KernelServices mainServices=builder.build();
  Assert.assertTrue(mainServices.isSuccessfulBoot());
  KernelServices legacyServices=mainServices.getLegacyServices(modelVersion);
  Assert.assertTrue(legacyServices.isSuccessfulBoot());
  ModelNode legacyModel=checkCoreModelTransformation(mainServices,modelVersion,StandardServerGroupInitializers.MODEL_FIXER,StandardServerGroupInitializers.MODEL_FIXER);
  ModelNode properties=legacyModel;
  if (serverGroup) {
    properties=legacyModel.get(SERVER_GROUP,"test");
  }
  properties=properties.get(SYSTEM_PROPERTY);
  Assert.assertEquals(expectedUndefined,properties.get("sys.prop.test.one",BOOT_TIME));
  Assert.assertEquals(1,properties.get("sys.prop.test.one",VALUE).asInt());
  Assert.assertEquals(new ModelNode(true),properties.get("sys.prop.test.two",BOOT_TIME));
  Assert.assertEquals(2,properties.get("sys.prop.test.two",VALUE).asInt());
  Assert.assertEquals(new ModelNode(false),properties.get("sys.prop.test.three",BOOT_TIME));
  Assert.assertEquals(3,properties.get("sys.prop.test.three",VALUE).asInt());
  Assert.assertEquals(expectedUndefined,properties.get("sys.prop.test.four",BOOT_TIME));
  Assert.assertFalse(properties.get("sys.prop.test.four",VALUE).isDefined());
}
