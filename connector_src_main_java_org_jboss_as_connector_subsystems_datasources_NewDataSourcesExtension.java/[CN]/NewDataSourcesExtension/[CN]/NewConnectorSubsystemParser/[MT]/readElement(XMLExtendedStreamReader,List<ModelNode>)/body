{
  final ModelNode address=new ModelNode();
  address.add(ModelDescriptionConstants.SUBSYSTEM,DATASOURCES);
  address.protect();
  final ModelNode subsystem=new ModelNode();
  subsystem.get(OP).set(ADD);
  subsystem.get(OP_ADDR).set(address);
  list.add(subsystem);
  DataSources dataSources=null;
  try {
    String localName=null;
switch (Namespace.forUri(reader.getNamespaceURI())) {
case DATASOURCES_1_0:
{
        localName=reader.getLocalName();
        final Element element=Element.forName(reader.getLocalName());
        log.tracef("%s -> %s",localName,element);
switch (element) {
case SUBSYSTEM:
{
            DsParser parser=new DsParser();
            dataSources=parser.parse(reader);
            break;
          }
      }
    }
}
}
 catch (Exception e) {
throw new XMLStreamException(e);
}
ModelNode datasourcesNode=subsystem.get(DATASOURCES);
for (DataSource ds : dataSources.getDataSource()) {
ModelNode dsModel=new ModelNode();
for (Entry<String,String> entry : ds.getConnectionProperties().entrySet()) {
  dsModel.get(CONNECTION_PROPERTIES,entry.getKey()).set(entry.getValue());
}
dsModel.get(CONNECTION_URL).set(ds.getConnectionUrl());
dsModel.get(DRIVER_CLASS).set(ds.getDriverClass());
dsModel.get(JNDINAME).set(ds.getJndiName());
dsModel.get(MODULE).set(ds.getModule());
dsModel.get(NEW_CONNECTION_SQL).set(ds.getNewConnectionSql());
dsModel.get(POOLNAME).set(ds.getPoolName());
dsModel.get(URL_DELIMITER).set(ds.getUrlDelimiter());
dsModel.get(URL_SELECTOR_STRATEGY_CLASS_NAME).set(ds.getUrlSelectorStrategyClassName());
dsModel.get(USE_JAVA_CONTEXT).set(ds.isUseJavaContext());
dsModel.get(ENABLED).set(ds.isEnabled());
if (ds.getPool() != null) {
  dsModel.get(MAX_POOL_SIZE).set(ds.getPool().getMaxPoolSize());
  dsModel.get(MIN_POOL_SIZE).set(ds.getPool().getMinPoolSize());
  dsModel.get(POOL_PREFILL).set(ds.getPool().isPrefill());
  dsModel.get(POOL_USE_STRICT_MIN).set(ds.getPool().isUseStrictMin());
}
if (ds.getSecurity() != null) {
  dsModel.get(USERNAME).set(ds.getSecurity().getUserName());
  dsModel.get(PASSWORD).set(ds.getSecurity().getPassword());
}
if (ds.getStatement() != null) {
  dsModel.get(PREPAREDSTATEMENTSCACHESIZE).set(ds.getStatement().getPreparedStatementsCacheSize());
  dsModel.get(SHAREPREPAREDSTATEMENTS).set(ds.getStatement().isSharePreparedStatements());
  dsModel.get(TRACKSTATEMENTS).set(ds.getStatement().getTrackStatements().name());
}
if (ds.getTimeOut() != null) {
  dsModel.get(ALLOCATION_RETRY).set(ds.getTimeOut().getAllocationRetry());
  dsModel.get(ALLOCATION_RETRY_WAIT_MILLIS).set(ds.getTimeOut().getAllocationRetryWaitMillis());
  dsModel.get(BLOCKING_TIMEOUT_WAIT_MILLIS).set(ds.getTimeOut().getBlockingTimeoutMillis());
  dsModel.get(IDLETIMEOUTMINUTES).set(ds.getTimeOut().getIdleTimeoutMinutes());
  dsModel.get(QUERYTIMEOUT).set(ds.getTimeOut().getQueryTimeout());
  dsModel.get(USETRYLOCK).set(ds.getTimeOut().getUseTryLock());
  dsModel.get(SETTXQUERTTIMEOUT).set(ds.getTimeOut().isSetTxQueryTimeout());
}
dsModel.get(TRANSACTION_ISOLOATION).set(ds.getTransactionIsolation().name());
if (ds.getValidation() != null) {
  dsModel.get(CHECKVALIDCONNECTIONSQL).set(ds.getValidation().getCheckValidConnectionSql());
  dsModel.get(EXCEPTIONSORTERCLASSNAME).set(ds.getValidation().getExceptionSorterClassName());
  dsModel.get(STALECONNECTIONCHECKERCLASSNAME).set(ds.getValidation().getStaleConnectionCheckerClassName());
  dsModel.get(VALIDCONNECTIONCHECKERCLASSNAME).set(ds.getValidation().getValidConnectionCheckerClassName());
  dsModel.get(BACKGROUNDVALIDATIONMINUTES).set(ds.getValidation().getBackgroundValidationMinutes());
  dsModel.get(BACKGROUNDVALIDATION).set(ds.getValidation().isBackgroundValidation());
  dsModel.get(USE_FAST_FAIL).set(ds.getValidation().isUseFastFail());
  dsModel.get(VALIDATEONMATCH).set(ds.getValidation().isValidateOnMatch());
}
datasourcesNode.add(dsModel);
}
ModelNode XAdatasourcesNode=subsystem.get(DATASOURCES);
for (XaDataSource xads : dataSources.getXaDataSource()) {
ModelNode xadsModel=new ModelNode();
for (Entry<String,String> entry : xads.getXaDataSourceProperty().entrySet()) {
  xadsModel.get(XADATASOURCEPROPERTIES,entry.getKey()).set(entry.getValue());
}
xadsModel.get(XADATASOURCECLASS).set(xads.getXaDataSourceClass());
xadsModel.get(JNDINAME).set(xads.getJndiName());
xadsModel.get(MODULE).set(xads.getModule());
xadsModel.get(NEW_CONNECTION_SQL).set(xads.getNewConnectionSql());
xadsModel.get(POOLNAME).set(xads.getPoolName());
xadsModel.get(URL_DELIMITER).set(xads.getUrlDelimiter());
xadsModel.get(URL_SELECTOR_STRATEGY_CLASS_NAME).set(xads.getUrlSelectorStrategyClassName());
xadsModel.get(USE_JAVA_CONTEXT).set(xads.isUseJavaContext());
xadsModel.get(ENABLED).set(xads.isEnabled());
if (xads.getXaPool() != null) {
  xadsModel.get(MAX_POOL_SIZE).set(xads.getXaPool().getMaxPoolSize());
  xadsModel.get(MIN_POOL_SIZE).set(xads.getXaPool().getMinPoolSize());
  xadsModel.get(POOL_PREFILL).set(xads.getXaPool().isPrefill());
  xadsModel.get(POOL_USE_STRICT_MIN).set(xads.getXaPool().isUseStrictMin());
  xadsModel.get(INTERLIVING).set(xads.getXaPool().isInterleaving());
  xadsModel.get(NOTXSEPARATEPOOL).set(xads.getXaPool().isNoTxSeparatePool());
  xadsModel.get(PAD_XID).set(xads.getXaPool().isPadXid());
  xadsModel.get(SAME_RM_OVERRIDE).set(xads.getXaPool().isSameRmOverride());
  xadsModel.get(WRAP_XA_DATASOURCE).set(xads.getXaPool().isWrapXaDataSource());
}
if (xads.getSecurity() != null) {
  xadsModel.get(USERNAME).set(xads.getSecurity().getUserName());
  xadsModel.get(PASSWORD).set(xads.getSecurity().getPassword());
}
if (xads.getStatement() != null) {
  xadsModel.get(PREPAREDSTATEMENTSCACHESIZE).set(xads.getStatement().getPreparedStatementsCacheSize());
  xadsModel.get(SHAREPREPAREDSTATEMENTS).set(xads.getStatement().isSharePreparedStatements());
  xadsModel.get(TRACKSTATEMENTS).set(xads.getStatement().getTrackStatements().name());
}
if (xads.getTimeOut() != null) {
  xadsModel.get(ALLOCATION_RETRY).set(xads.getTimeOut().getAllocationRetry());
  xadsModel.get(ALLOCATION_RETRY_WAIT_MILLIS).set(xads.getTimeOut().getAllocationRetryWaitMillis());
  xadsModel.get(BLOCKING_TIMEOUT_WAIT_MILLIS).set(xads.getTimeOut().getBlockingTimeoutMillis());
  xadsModel.get(IDLETIMEOUTMINUTES).set(xads.getTimeOut().getIdleTimeoutMinutes());
  xadsModel.get(QUERYTIMEOUT).set(xads.getTimeOut().getQueryTimeout());
  xadsModel.get(USETRYLOCK).set(xads.getTimeOut().getUseTryLock());
  xadsModel.get(SETTXQUERTTIMEOUT).set(xads.getTimeOut().isSetTxQueryTimeout());
  xadsModel.get(XA_RESOURCE_TIMEOUT).set(xads.getTimeOut().getXaResourceTimeout());
}
xadsModel.get(TRANSACTION_ISOLOATION).set(xads.getTransactionIsolation().name());
if (xads.getValidation() != null) {
  xadsModel.get(CHECKVALIDCONNECTIONSQL).set(xads.getValidation().getCheckValidConnectionSql());
  xadsModel.get(EXCEPTIONSORTERCLASSNAME).set(xads.getValidation().getExceptionSorterClassName());
  xadsModel.get(STALECONNECTIONCHECKERCLASSNAME).set(xads.getValidation().getStaleConnectionCheckerClassName());
  xadsModel.get(VALIDCONNECTIONCHECKERCLASSNAME).set(xads.getValidation().getValidConnectionCheckerClassName());
  xadsModel.get(BACKGROUNDVALIDATIONMINUTES).set(xads.getValidation().getBackgroundValidationMinutes());
  xadsModel.get(BACKGROUNDVALIDATION).set(xads.getValidation().isBackgroundValidation());
  xadsModel.get(USE_FAST_FAIL).set(xads.getValidation().isUseFastFail());
  xadsModel.get(VALIDATEONMATCH).set(xads.getValidation().isValidateOnMatch());
}
XAdatasourcesNode.add(xadsModel);
}
}
