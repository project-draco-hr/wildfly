{
  PassivationInterceptor.reset();
  TestPassivationRemote remote1=(TestPassivationRemote)ctx.lookup("java:module/" + TestPassivationBean.class.getSimpleName());
  Assert.assertEquals("Returned remote1 result was not expected",TestPassivationRemote.EXPECTED_RESULT,remote1.returnTrueString());
  remote1.addEntity(1,"Bob");
  remote1.setManagedBeanMessage("bar");
  Assert.assertTrue(remote1.isPersistenceContextSame());
  TestPassivationRemote remote2=(TestPassivationRemote)ctx.lookup("java:module/" + TestPassivationBean.class.getSimpleName());
  Assert.assertEquals("Returned remote2 result was not expected",TestPassivationRemote.EXPECTED_RESULT,remote2.returnTrueString());
  Assert.assertTrue(remote2.isPersistenceContextSame());
  ctx.lookup("java:module/" + TestPassivationBean.class.getSimpleName());
  Assert.assertTrue("@PrePassivate not called, check cache configuration and client sleep time",remote1.hasBeenPassivated());
  Assert.assertTrue("@PrePassivate not called, check cache configuration and client sleep time",remote2.hasBeenPassivated());
  Assert.assertTrue(remote1.isPersistenceContextSame());
  Assert.assertTrue(remote2.isPersistenceContextSame());
  Assert.assertEquals("Super",remote1.getSuperEmployee().getName());
  Assert.assertEquals("Super",remote2.getSuperEmployee().getName());
  Assert.assertEquals("bar",remote1.getManagedBeanMessage());
  Assert.assertEquals("bar",remote2.getManagedBeanMessage());
  remote1.remove();
  remote2.remove();
  Assert.assertTrue("invalid: " + PassivationInterceptor.getPrePassivateTarget(),PassivationInterceptor.getPrePassivateTarget() instanceof TestPassivationBean);
  Assert.assertTrue("invalid: " + PassivationInterceptor.getPostActivateTarget(),PassivationInterceptor.getPostActivateTarget() instanceof TestPassivationBean);
}
