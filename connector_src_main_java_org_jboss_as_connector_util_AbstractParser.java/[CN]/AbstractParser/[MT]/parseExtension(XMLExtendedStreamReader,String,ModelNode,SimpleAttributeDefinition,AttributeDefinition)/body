{
  String className=null;
  Map<String,String> properties=null;
  for (  Extension.Attribute attribute : Extension.Attribute.values()) {
switch (attribute) {
case CLASS_NAME:
{
        requireSingleAttribute(reader,attribute.getLocalName());
        final String value=reader.getAttributeValue(0);
        extensionClassName.parseAndSetParameter(value,operation,reader);
        break;
      }
default :
    break;
}
}
while (reader.hasNext()) {
switch (reader.nextTag()) {
case END_ELEMENT:
{
    if (reader.getLocalName().equals(enclosingTag)) {
      return;
    }
 else {
      if (Extension.Tag.forName(reader.getLocalName()) == Extension.Tag.UNKNOWN) {
        throw ParseUtils.unexpectedEndElement(reader);
      }
    }
    break;
  }
case START_ELEMENT:
{
switch (Extension.Tag.forName(reader.getLocalName())) {
case CONFIG_PROPERTY:
{
      requireSingleAttribute(reader,"name");
      final String name=reader.getAttributeValue(0);
      String value=rawElementText(reader);
      final String trimmed=value == null ? null : value.trim();
      ModelNode node=new ModelNode();
      if (trimmed != null) {
        if (extensionProperties.isAllowExpression()) {
          node=ParseUtils.parsePossibleExpression(trimmed);
        }
 else {
          node=new ModelNode().set(trimmed);
        }
      }
      operation.get(extensionProperties.getName(),name).set(node);
      break;
    }
default :
  throw new ParserException(bundle.unexpectedElement(reader.getLocalName()));
}
break;
}
}
}
throw new ParserException(bundle.unexpectedEndOfDocument());
}
