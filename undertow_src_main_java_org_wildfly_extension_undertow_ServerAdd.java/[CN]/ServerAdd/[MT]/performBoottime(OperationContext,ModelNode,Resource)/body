{
  final PathAddress address=context.getCurrentAddress();
  final PathAddress parentAddress=address.subAddress(0,address.size() - 1);
  final ModelNode subsystemModel=Resource.Tools.readModel(context.readResourceFromRoot(parentAddress));
  final String name=context.getCurrentAddressValue();
  final String defaultHost=ServerDefinition.DEFAULT_HOST.resolveModelAttribute(context,resource.getModel()).asString();
  final String servletContainer=ServerDefinition.SERVLET_CONTAINER.resolveModelAttribute(context,resource.getModel()).asString();
  final String defaultServerName=UndertowRootDefinition.DEFAULT_SERVER.resolveModelAttribute(context,subsystemModel).asString();
  final ServiceName serverName=UndertowService.SERVER.append(name);
  final Server service=new Server(name,defaultHost);
  final ServiceBuilder<Server> builder=context.getServiceTarget().addService(serverName,service).addDependency(UndertowService.SERVLET_CONTAINER.append(servletContainer),ServletContainerService.class,service.getServletContainerInjector()).addDependency(UndertowService.UNDERTOW,UndertowService.class,service.getUndertowServiceInjector());
  builder.setInitialMode(ServiceController.Mode.ACTIVE);
  boolean isDefaultServer=name.equals(defaultServerName);
  if (isDefaultServer) {
    builder.addAliases(UndertowService.DEFAULT_SERVER);
    WebServerService commonWebServer=new WebServerService();
    final ServiceBuilder<WebServerService> commonServerBuilder=context.getServiceTarget().addService(CommonWebServer.SERVICE_NAME,commonWebServer).addDependency(serverName,Server.class,commonWebServer.getServerInjectedValue()).setInitialMode(ServiceController.Mode.PASSIVE);
    addCommonHostListenerDeps(context,commonServerBuilder,UndertowExtension.HTTP_LISTENER_PATH);
    addCommonHostListenerDeps(context,commonServerBuilder,UndertowExtension.AJP_LISTENER_PATH);
    addCommonHostListenerDeps(context,commonServerBuilder,UndertowExtension.HTTPS_LISTENER_PATH);
    commonServerBuilder.install();
  }
  builder.install();
}
