{
  this.classLoader=classLoader;
  defaultEntity=new JDBCEntityMetaData(this);
  for (  EnterpriseBeanMetaData bean : ejbJarMetaData.getEnterpriseBeans()) {
    if (bean.isEntity()) {
      final EntityBeanMetaData entity=EntityBeanMetaData.class.cast(bean);
      if (entity.isCMP()) {
        JDBCEntityMetaData jdbcEntity=new JDBCEntityMetaData(this,entity);
        entities.put(entity.getEjbName(),jdbcEntity);
        String schemaName=jdbcEntity.getAbstractSchemaName();
        if (schemaName != null) {
          entitiesByAbstractSchemaName.put(schemaName,jdbcEntity);
        }
        final Class<?> remote=jdbcEntity.getRemoteClass();
        if (remote != null) {
          entitiesByInterface.put(remote,jdbcEntity);
        }
        final Class<?> local=jdbcEntity.getLocalClass();
        if (local != null) {
          entitiesByInterface.put(local,jdbcEntity);
        }
        entityRoles.put(entity.getEjbName(),new HashSet<JDBCRelationshipRoleMetaData>());
      }
    }
  }
  if (ejbJarMetaData.getRelationships() != null)   for (  RelationMetaData relationMetaData : ejbJarMetaData.getRelationships()) {
    JDBCRelationMetaData jdbcRelation=new JDBCRelationMetaData(this,relationMetaData);
    relationships.put(jdbcRelation.getRelationName(),jdbcRelation);
    JDBCRelationshipRoleMetaData left=jdbcRelation.getLeftRelationshipRole();
    Set<JDBCRelationshipRoleMetaData> leftEntityRoles=entityRoles.get(left.getEntity().getName());
    leftEntityRoles.add(left);
    JDBCRelationshipRoleMetaData right=jdbcRelation.getRightRelationshipRole();
    Set<JDBCRelationshipRoleMetaData> rightEntityRoles=entityRoles.get(right.getEntity().getName());
    rightEntityRoles.add(right);
  }
}
