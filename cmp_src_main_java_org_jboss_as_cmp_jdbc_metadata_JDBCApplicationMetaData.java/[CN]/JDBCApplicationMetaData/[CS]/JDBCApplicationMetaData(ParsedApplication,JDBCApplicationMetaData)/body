{
  classLoader=defaultValues.classLoader;
  if (parsed.getDefaultEntity() != null) {
    defaultEntity=new JDBCEntityMetaData(this,parsed.getDefaultEntity(),defaultValues.getDefaultEntity());
  }
 else {
    defaultEntity=new JDBCEntityMetaData(this,defaultValues.getDefaultEntity());
  }
  if (parsed.getUserTypeMappings() != null) {
    for (    JDBCUserTypeMappingMetaData userTypeMapping : parsed.getUserTypeMappings()) {
      userTypeMappings.put(userTypeMapping.getJavaType(),userTypeMapping);
    }
  }
 else {
    userTypeMappings.putAll(defaultValues.userTypeMappings);
  }
  typeMappings.putAll(defaultValues.typeMappings);
  if (parsed.getTypeMappings() != null) {
    for (    JDBCTypeMappingMetaData typeMapping : parsed.getTypeMappings()) {
      typeMappings.put(typeMapping.getName(),typeMapping);
    }
  }
  valueClasses.putAll(defaultValues.valueClasses);
  if (parsed.getValueClasses() != null) {
    for (    JDBCValueClassMetaData valueClass : parsed.getValueClasses()) {
      valueClasses.put(valueClass.getJavaType(),valueClass);
    }
  }
  entityCommands.putAll(defaultValues.entityCommands);
  if (parsed.getEntityCommands() != null) {
    for (    JDBCEntityCommandMetaData entityCommand : parsed.getEntityCommands()) {
      entityCommands.put(entityCommand.getCommandName(),entityCommand);
    }
  }
  entities.putAll(defaultValues.entities);
  entitiesByAbstractSchemaName.putAll(defaultValues.entitiesByAbstractSchemaName);
  entitiesByInterface.putAll(defaultValues.entitiesByInterface);
  if (parsed.getDefaultEntity() != null) {
    final List<JDBCEntityMetaData> values=new ArrayList<JDBCEntityMetaData>(entities.values());
    for (    JDBCEntityMetaData entityMetaData : values) {
      entityMetaData=new JDBCEntityMetaData(this,parsed.getDefaultEntity(),entityMetaData);
      entities.put(entityMetaData.getName(),entityMetaData);
      String schemaName=entityMetaData.getAbstractSchemaName();
      if (schemaName != null) {
        entitiesByAbstractSchemaName.put(schemaName,entityMetaData);
      }
      Class<?> remote=entityMetaData.getRemoteClass();
      if (remote != null) {
        entitiesByInterface.put(remote,entityMetaData);
      }
      Class<?> local=entityMetaData.getLocalClass();
      if (local != null) {
        entitiesByInterface.put(local,entityMetaData);
      }
    }
  }
  if (parsed.getEntities() != null) {
    for (    ParsedEntity parsedEntity : parsed.getEntities()) {
      String ejbName=parsedEntity.getEntityName();
      JDBCEntityMetaData entityMetaData=getBeanByEjbName(ejbName);
      if (entityMetaData == null) {
        throw new RuntimeException("Configuration found in " + "jbosscmp-jdbc.xml for entity " + ejbName + " but bean "+ "is not a jbosscmp-jdbc-managed cmp entity in "+ "ejb-jar.xml");
      }
      entityMetaData=new JDBCEntityMetaData(this,parsedEntity,entityMetaData);
      entities.put(entityMetaData.getName(),entityMetaData);
      String schemaName=entityMetaData.getAbstractSchemaName();
      if (schemaName != null) {
        entitiesByAbstractSchemaName.put(schemaName,entityMetaData);
      }
      Class<?> remote=entityMetaData.getRemoteClass();
      if (remote != null) {
        entitiesByInterface.put(remote,entityMetaData);
      }
      Class<?> local=entityMetaData.getLocalClass();
      if (local != null) {
        entitiesByInterface.put(local,entityMetaData);
      }
    }
  }
  if (parsed.getDefaultEntity() == null) {
    relationships.putAll(defaultValues.relationships);
    entityRoles.putAll(defaultValues.entityRoles);
  }
 else {
    for (    JDBCEntityMetaData entity : entities.values()) {
      entityRoles.put(entity.getName(),new HashSet<JDBCRelationshipRoleMetaData>());
    }
    for (    JDBCRelationMetaData relationMetaData : defaultValues.relationships.values()) {
      relationMetaData=new JDBCRelationMetaData(this,parsed.getDefaultEntity(),relationMetaData);
      relationships.put(relationMetaData.getRelationName(),relationMetaData);
      JDBCRelationshipRoleMetaData left=relationMetaData.getLeftRelationshipRole();
      Set<JDBCRelationshipRoleMetaData> leftEntityRoles=entityRoles.get(left.getEntity().getName());
      leftEntityRoles.add(left);
      JDBCRelationshipRoleMetaData right=relationMetaData.getRightRelationshipRole();
      Set<JDBCRelationshipRoleMetaData> rightEntityRoles=entityRoles.get(right.getEntity().getName());
      rightEntityRoles.add(right);
    }
  }
  if (parsed.getRelationships() != null) {
    for (    ParsedRelationship parsedRelationship : parsed.getRelationships()) {
      String relationName=parsedRelationship.getRelationName();
      JDBCRelationMetaData oldRelation=relationships.get(relationName);
      if (oldRelation == null) {
        throw new RuntimeException("Configuration found in " + "jbosscmp-jdbc.xml for relation " + relationName + " but relation is not a jbosscmp-jdbc-managed relation "+ "in ejb-jar.xml");
      }
      JDBCRelationMetaData newRelation=new JDBCRelationMetaData(this,parsedRelationship,oldRelation);
      relationships.put(newRelation.getRelationName(),newRelation);
      JDBCRelationshipRoleMetaData newLeft=newRelation.getLeftRelationshipRole();
      Set<JDBCRelationshipRoleMetaData> leftEntityRoles=entityRoles.get(newLeft.getEntity().getName());
      leftEntityRoles.remove(oldRelation.getLeftRelationshipRole());
      leftEntityRoles.add(newLeft);
      JDBCRelationshipRoleMetaData newRight=newRelation.getRightRelationshipRole();
      Set<JDBCRelationshipRoleMetaData> rightEntityRoles=entityRoles.get(newRight.getEntity().getName());
      rightEntityRoles.remove(oldRelation.getRightRelationshipRole());
      rightEntityRoles.add(newRight);
    }
  }
}
