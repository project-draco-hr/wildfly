{
  final ComponentInterceptorFactories interceptorFactories=componentConfiguration.getComponentInterceptorFactories();
  final List<Method> allMethods=new ArrayList<Method>();
  Class<?> current=componentClass;
  while (current != null) {
    final ClassReflectionIndex<?> classReflectionIndex=deploymentReflectionIndex.getClassIndex(current);
    allMethods.addAll(classReflectionIndex.getMethods());
    current=current.getSuperclass();
  }
  for (  MethodInterceptorConfiguration interceptorConfiguration : componentConfiguration.getClassInterceptorConfigs()) {
    final MethodInterceptorFilter methodFilter=interceptorConfiguration.getMethodFilter();
    final InterceptorFactory interceptorFactory=createInterceptorFactory(componentConfiguration,classLoader,componentClass,deploymentReflectionIndex,interceptorConfiguration);
    for (    Method method : allMethods) {
      if (methodFilter.intercepts(method)) {
        interceptorFactories.addClassInterceptorFactory(method,interceptorFactory);
      }
    }
  }
  for (  MethodInterceptorConfiguration interceptorConfiguration : componentConfiguration.getMethodInterceptorConfigs()) {
    final MethodInterceptorFilter methodFilter=interceptorConfiguration.getMethodFilter();
    final InterceptorFactory interceptorFactory=createInterceptorFactory(componentConfiguration,classLoader,componentClass,deploymentReflectionIndex,interceptorConfiguration);
    for (    Method method : allMethods) {
      if (methodFilter.intercepts(method)) {
        interceptorFactories.addMethodInterceptorFactory(method,interceptorFactory);
      }
    }
  }
  for (  MethodInterceptorConfiguration interceptorConfiguration : componentConfiguration.getComponentInterceptorConfigs()) {
    final MethodInterceptorFilter methodFilter=interceptorConfiguration.getMethodFilter();
    final InterceptorFactory interceptorFactory=createInterceptorFactory(componentConfiguration,classLoader,componentClass,deploymentReflectionIndex,interceptorConfiguration);
    for (    Method method : allMethods) {
      if (methodFilter.intercepts(method)) {
        interceptorFactories.addComponentInterceptorFactory(method,interceptorFactory);
      }
    }
  }
  for (  Method method : allMethods) {
    interceptorFactories.addComponentInterceptorFactory(method,Interceptors.getInvokingInterceptorFactory());
  }
}
