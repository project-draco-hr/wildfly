{
  final Class<?> interceptorClass;
  try {
    interceptorClass=classLoader.loadClass(interceptorConfiguration.getInterceptorClassName());
  }
 catch (  ClassNotFoundException e) {
    throw new DeploymentUnitProcessingException("Failed to load interceptors class " + interceptorConfiguration.getInterceptorClassName(),e);
  }
  final ClassReflectionIndex<?> interceptorReflectionIndex=deploymentReflectionIndex.getClassIndex(interceptorClass);
  final Method interceptorMethod=interceptorReflectionIndex.getMethod(Object.class,interceptorConfiguration.getMethodName(),InvocationContext.class);
  if (interceptorMethod == null) {
    throw new DeploymentUnitProcessingException("Unable to find interceptor method [" + interceptorConfiguration.getMethodName() + "] on interceptor class ["+ interceptorClass+ "]");
  }
  final InterceptorInstanceFactory interceptorInstanceFactory;
  if (interceptorClass.equals(componentClass)) {
    interceptorInstanceFactory=AbstractComponent.INSTANCE_FACTORY;
  }
 else {
    final List<ResourceInjection> interceptorInjections=new ArrayList<ResourceInjection>(interceptorConfiguration.getResourceInjectionConfigs().size());
    final ServiceName envContextServiceName=componentConfiguration.getEnvContextServiceName();
    for (    ResourceInjectionConfiguration resourceConfiguration : interceptorConfiguration.getResourceInjectionConfigs()) {
      final NamingLookupValue<Object> lookupValue=new NamingLookupValue<Object>(resourceConfiguration.getLocalContextName());
      final ResourceInjection injection=ResourceInjection.Factory.create(resourceConfiguration,interceptorClass,interceptorReflectionIndex,lookupValue);
      if (injection != null) {
        interceptorInjections.add(injection);
      }
      componentConfiguration.addDependency(new ResourceInjectionDependency<Context>(envContextServiceName,Context.class,lookupValue.getContextInjector()));
    }
    interceptorInstanceFactory=new InjectingInterceptorInstanceFactory(new SimpleInterceptorInstanceFactory(interceptorClass),interceptorInjections);
  }
  return new MethodInterceptorFactory(interceptorInstanceFactory,interceptorMethod);
}
