{
  final AbstractEJBComponentRuntimeHandler<?> handler=componentType.getRuntimeHandler();
  resourceRegistration.registerReadOnlyAttribute(COMPONENT_CLASS_NAME,handler);
  resourceRegistration.registerReadOnlyAttribute(SECURITY_DOMAIN,handler);
  resourceRegistration.registerReadOnlyAttribute(RUN_AS_ROLE,handler);
  resourceRegistration.registerReadOnlyAttribute(DECLARED_ROLES,handler);
  if (componentType.hasTimer()) {
    resourceRegistration.registerReadOnlyAttribute(TimerAttributeDefinition.INSTANCE,handler);
  }
  if (componentType.hasPool()) {
    resourceRegistration.registerReadOnlyAttribute(POOL_AVAILABLE_COUNT,handler);
    resourceRegistration.registerReadOnlyAttribute(POOL_CREATE_COUNT,handler);
    resourceRegistration.registerReadOnlyAttribute(POOL_NAME,handler);
    resourceRegistration.registerReadOnlyAttribute(POOL_REMOVE_COUNT,handler);
    resourceRegistration.registerReadOnlyAttribute(POOL_CURRENT_SIZE,handler);
    resourceRegistration.registerReadWriteAttribute(POOL_MAX_SIZE,handler,handler);
  }
  resourceRegistration.registerMetric(EXECUTION_TIME,new AbstractRuntimeMetricsHandler(){
    @Override protected void executeReadMetricStep(    final OperationContext context,    final ModelNode operation,    final EJBComponent component) throws OperationFailedException {
      context.getResult().set(component.getInvocationMetrics().getExecutionTime());
    }
  }
);
  resourceRegistration.registerMetric(INVOCATIONS,new AbstractRuntimeMetricsHandler(){
    @Override protected void executeReadMetricStep(    final OperationContext context,    final ModelNode operation,    final EJBComponent component) throws OperationFailedException {
      context.getResult().set(component.getInvocationMetrics().getInvocations());
    }
  }
);
  resourceRegistration.registerMetric(PEAK_CONCURRENT_INVOCATIONS,new AbstractRuntimeMetricsHandler(){
    @Override protected void executeReadMetricStep(    final OperationContext context,    final ModelNode operation,    final EJBComponent component) throws OperationFailedException {
      context.getResult().set(component.getInvocationMetrics().getPeakConcurrent());
    }
  }
);
  resourceRegistration.registerMetric(WAIT_TIME,new AbstractRuntimeMetricsHandler(){
    @Override protected void executeReadMetricStep(    final OperationContext context,    final ModelNode operation,    final EJBComponent component) throws OperationFailedException {
      context.getResult().set(component.getInvocationMetrics().getWaitTime());
    }
  }
);
  resourceRegistration.registerMetric(METHODS,new AbstractRuntimeMetricsHandler(){
    @Override protected void executeReadMetricStep(    final OperationContext context,    final ModelNode operation,    final EJBComponent component) throws OperationFailedException {
      context.getResult().setEmptyList();
      for (      final Map.Entry<String,InvocationMetrics.Values> entry : component.getInvocationMetrics().getMethods().entrySet()) {
        final InvocationMetrics.Values values=entry.getValue();
        final ModelNode result=new ModelNode();
        result.get("execution-time").set(values.getExecutionTime());
        result.get("invocations").set(values.getInvocations());
        result.get("wait-time").set(values.getWaitTime());
        context.getResult().add(entry.getKey(),result);
      }
    }
  }
);
}
