{
  final ComponentFactory containerFactory=containerConfig.getContainerFactory();
  final String beanName=containerConfig.getName();
  final Class<?> beanClass;
  try {
    beanClass=classLoader.loadClass(containerConfig.getBeanClass());
  }
 catch (  ClassNotFoundException e) {
    throw new DeploymentUnitProcessingException("Failed to load component class",e);
  }
  final ResourceInjectionResolver resolver=containerFactory.getResourceInjectionResolver();
  final List<ResourceInjection> injections=new ArrayList<ResourceInjection>(containerConfig.getResourceInjectionConfigs().size());
  final Set<ResourceInjectionResolver.ResolverDependency<?>> resourceDependencies=new HashSet<ResourceInjectionResolver.ResolverDependency<?>>();
  processInjections(deploymentUnit,serviceTarget,containerConfig,beanName,beanClass,resolver,injections,resourceDependencies);
  final List<ComponentLifecycle> postConstructLifecycles=processPostConstructs(containerConfig,classLoader);
  final List<ComponentLifecycle> preDestroyLifecycles=processPreDestroys(containerConfig,classLoader);
  final Map<Method,InterceptorFactory> methodInterceptorFactories=processInterceptors(deploymentUnit,serviceTarget,containerConfig,classLoader,beanName,beanClass,resolver,resourceDependencies,deploymentReflectionIndex);
  final ComponentFactory.ConstructedComponent constructedContainer=containerFactory.createComponent(deploymentUnit,beanName,beanClass,classLoader,injections,postConstructLifecycles,preDestroyLifecycles,methodInterceptorFactories);
  final ServiceName beanEnvContextServiceName=constructedContainer.getEnvContextServiceName().append(beanName);
  final ContextService actualBeanContext=new ContextService(beanName);
  serviceTarget.addService(beanEnvContextServiceName,actualBeanContext).addDependency(constructedContainer.getEnvContextServiceName(),Context.class,actualBeanContext.getParentContextInjector()).install();
  final ServiceName bindContextServiceName=constructedContainer.getBindContextServiceName();
  final Reference containerFactoryReference=ServiceReferenceObjectFactory.createReference(constructedContainer.getComponentServiceName(),ComponentObjectFactory.class);
  final ResourceBinder<Reference> factoryBinder=new ResourceBinder<Reference>(constructedContainer.getBindName(),Values.immediateValue(containerFactoryReference));
  final ServiceName referenceBinderName=bindContextServiceName.append(constructedContainer.getBindName());
  serviceTarget.addService(referenceBinderName,factoryBinder).addDependency(bindContextServiceName,Context.class,factoryBinder.getContextInjector()).setInitialMode(ServiceController.Mode.ON_DEMAND).install();
  final ComponentService componentService=new ComponentService(constructedContainer.getBeanContainer());
  final ServiceBuilder<?> serviceBuilder=serviceTarget.addService(constructedContainer.getComponentServiceName(),componentService).addDependency(referenceBinderName).addDependency(constructedContainer.getCompContextServiceName(),Context.class,componentService.getCompContextInjector()).addDependency(constructedContainer.getModuleContextServiceName(),Context.class,componentService.getModuleContextInjector()).addDependency(constructedContainer.getAppContextServiceName(),Context.class,componentService.getAppContextInjector()).setInitialMode(ServiceController.Mode.ACTIVE);
  for (  ResourceInjectionResolver.ResolverDependency<?> resolverDependency : resourceDependencies) {
    addDependency(serviceBuilder,resolverDependency);
  }
  serviceBuilder.install();
}
