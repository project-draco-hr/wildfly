{
  int start=pos;
  if (Chars.isCharASCII(chars,pos,'[')) {
    while ((pos < chars.length) && (chars[pos] != ']')) {
      pos++;
    }
    if (!Chars.isCharASCII(chars,pos,']')) {
      return -1;
    }
    pos++;
  }
 else {
    boolean hadDot=false;
    boolean hadMinus=false;
    boolean isHostNumber=true;
    boolean invalidIp=false;
    int nbDots=0;
    int[] ipElem=new int[4];
    if (Chars.isCharASCII(chars,pos,'-')) {
      return -1;
    }
    while ((pos < chars.length) && (chars[pos] != ':') && (chars[pos] != '/')) {
      if (Chars.isCharASCII(chars,pos,'.')) {
        if ((hadMinus) || (hadDot)) {
          return -1;
        }
        if (isHostNumber && (nbDots < 4)) {
          if (ipElem[nbDots] > 65535) {
            invalidIp=true;
          }
        }
        hadDot=true;
        nbDots++;
        pos++;
        continue;
      }
 else {
        if (hadDot && Chars.isCharASCII(chars,pos,'-')) {
          return -1;
        }
        hadDot=false;
      }
      if (Chars.isDigit(chars,pos)) {
        if (isHostNumber && (nbDots < 4)) {
          ipElem[nbDots]=(ipElem[nbDots] * 10) + (chars[pos] - '0');
          if (ipElem[nbDots] > 65535) {
            invalidIp=true;
          }
        }
        hadMinus=false;
      }
 else       if (Chars.isAlphaDigitMinus(chars,pos)) {
        isHostNumber=false;
        hadMinus=Chars.isCharASCII(chars,pos,'-');
      }
 else {
        return -1;
      }
      pos++;
    }
    if (start == pos) {
      return pos;
    }
    if (isHostNumber) {
      if (nbDots != 3) {
        return -1;
      }
      if (invalidIp) {
        return -1;
      }
    }
    if (hadDot || hadMinus) {
      return -1;
    }
  }
  host=new String(chars,start,pos - start);
  return pos;
}
