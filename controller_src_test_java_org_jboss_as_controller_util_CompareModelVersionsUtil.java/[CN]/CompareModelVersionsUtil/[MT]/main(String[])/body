{
  String version=System.getProperty("jboss.as.compare.version",null);
  String fromTgt=System.getProperty("jboss.as.compare.from.target",null);
  String diff=System.getProperty("jboss.as.compare.different.versions",null);
  String type=System.getProperty("jboss.as.compare.type",null);
  if (version == null) {
    System.out.print("Enter legacy AS version: ");
    version=readInput(null);
  }
  System.out.println("Using target model: " + version);
  if (type == null) {
    System.out.print("Enter type [S](standalone)/H(host)/D(domain)/F(domain + host):");
    type=readInput("S");
  }
  final ResourceType[] resourceTypes;
  if (ResourceType.STANDALONE.toString().startsWith(type.toUpperCase())) {
    resourceTypes=new ResourceType[]{ResourceType.STANDALONE};
  }
 else   if (ResourceType.HOST.toString().startsWith(type.toUpperCase())) {
    resourceTypes=new ResourceType[]{ResourceType.HOST};
  }
 else   if (ResourceType.DOMAIN.toString().startsWith(type.toUpperCase())) {
    resourceTypes=new ResourceType[]{ResourceType.DOMAIN};
  }
 else   if (type.toUpperCase().equals("F")) {
    resourceTypes=new ResourceType[]{ResourceType.DOMAIN,ResourceType.HOST};
  }
 else {
    throw new IllegalArgumentException("Could not determine type for: '" + type + "'");
  }
  if (fromTgt == null) {
    System.out.print("Read from target directory or from the legacy-models directory - t/[l]:");
    fromTgt=readInput("l");
  }
  final String fromDirectory;
  if (fromTgt.equals("l")) {
    fromDirectory="target/test-classes/legacy-models/";
  }
 else   if (fromTgt.equals("t")) {
    fromDirectory="target/";
  }
 else {
    throw new IllegalArgumentException("Please enter 'l' for legacy-models directory or 't' for target directory");
  }
  if (diff == null) {
    System.out.print("Report on differences in the model when the management versions are different? y/[n]: ");
    diff=readInput("n").toLowerCase();
  }
  boolean compareDifferentVersions;
  if (diff.equals("n")) {
    System.out.println("Reporting on differences in the model when the management versions are different");
    compareDifferentVersions=false;
  }
 else   if (diff.equals("y")) {
    System.out.println("Not reporting on differences in the model when the management versions are different");
    compareDifferentVersions=true;
  }
 else {
    throw new IllegalArgumentException("Please enter 'y' or 'n'");
  }
  System.out.println("Loading legacy model versions for " + version + "....");
  ModelNode legacyModelVersions=Tools.loadModelNodeFromFile(new File(fromDirectory + "standalone-model-versions-" + version+ ".dmr"));
  System.out.println("Loaded legacy model versions");
  System.out.println("Loading model versions for currently running server...");
  ModelNode currentModelVersions=Tools.getCurrentModelVersions();
  System.out.println("Loaded current model versions");
  for (  ResourceType resourceType : resourceTypes) {
    doCompare(resourceType,fromDirectory,compareDifferentVersions,version,legacyModelVersions,currentModelVersions);
  }
}
