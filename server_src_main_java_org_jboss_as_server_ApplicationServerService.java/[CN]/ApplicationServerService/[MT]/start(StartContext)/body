{
  final ServiceContainer container=context.getController().getServiceContainer();
  final TrackingServiceTarget serviceTarget=new TrackingServiceTarget(container);
  final DelegatingServiceRegistry serviceRegistry=new DelegatingServiceRegistry(container);
  final ServiceActivatorContext serviceActivatorContext=new ServiceActivatorContext(){
    public ServiceTarget getServiceTarget(){
      return serviceTarget;
    }
    public ServiceRegistry getServiceRegistry(){
      return serviceRegistry;
    }
  }
;
  serverController=new ServerControllerImpl(new ServerModel(configuration.getName(),configuration.getPortOffset()),container,configuration.getServerEnvironment());
  final List<AbstractServerModelUpdate<?>> updates;
  try {
    updates=persister.load(serverController);
  }
 catch (  Exception e) {
    throw new StartException(e);
  }
  final BootUpdateContext bootUpdateContext=new BootUpdateContext(){
    public ServiceTarget getServiceTarget(){
      return serviceTarget;
    }
    public ServiceContainer getServiceContainer(){
      throw new UnsupportedOperationException();
    }
    public ServiceRegistry getServiceRegistry(){
      return serviceRegistry;
    }
    public void addDeploymentProcessor(    DeploymentUnitProcessor processor,    long priority){
      deploymentChain.addProcessor(processor,priority);
    }
  }
;
  for (  AbstractServerModelUpdate<?> update : updates) {
    update.applyUpdateBootAction(bootUpdateContext);
  }
  bootServices=serviceTarget.getSet();
}
