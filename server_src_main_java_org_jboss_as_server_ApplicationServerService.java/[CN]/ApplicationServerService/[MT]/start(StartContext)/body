{
  processState.setStarting();
  final Bootstrap.Configuration configuration=this.configuration;
  final ServerEnvironment serverEnvironment=configuration.getServerEnvironment();
  serverEnvironment.install();
  AS_ROOT_LOGGER.serverStarting(Version.AS_VERSION,Version.AS_RELEASE_CODENAME);
  if (CONFIG_LOGGER.isDebugEnabled()) {
    final Properties properties=System.getProperties();
    final StringBuilder b=new StringBuilder(8192);
    b.append("Configured system properties:");
    for (    String property : new TreeSet<String>(properties.stringPropertyNames())) {
      b.append("\n\t").append(property).append(" = ").append(properties.getProperty(property,"<undefined>"));
    }
    CONFIG_LOGGER.debug(b);
    CONFIG_LOGGER.debugf("VM Arguments: %s",getVMArguments());
    if (CONFIG_LOGGER.isTraceEnabled()) {
      b.setLength(0);
      final Map<String,String> env=System.getenv();
      b.append("Configured system environment:");
      for (      String key : new TreeSet<String>(env.keySet())) {
        b.append("\n\t").append(key).append(" = ").append(env.get(key));
      }
      CONFIG_LOGGER.trace(b);
    }
  }
  final ServiceTarget serviceTarget=context.getChildTarget();
  final ServiceController<?> myController=context.getController();
  final ServiceContainer container=myController.getServiceContainer();
  futureContainer=new FutureServiceContainer();
  long startTime=this.startTime;
  if (startTime == -1) {
    startTime=System.currentTimeMillis();
  }
 else {
    this.startTime=-1;
  }
  CurrentServiceContainer.setServiceContainer(context.getController().getServiceContainer());
  final BootstrapListener bootstrapListener=new BootstrapListener(container,startTime,serviceTarget,futureContainer,configuration);
  serviceTarget.addListener(ServiceListener.Inheritance.ALL,bootstrapListener);
  myController.addListener(bootstrapListener);
  ContentRepositoryImpl contentRepository=ContentRepositoryImpl.addService(serviceTarget,serverEnvironment.getServerDeployDir());
  ServerDeploymentRepositoryImpl.addService(serviceTarget,contentRepository);
  ServiceModuleLoader.addService(serviceTarget,configuration);
  ExternalModuleService.addService(serviceTarget);
  ModuleIndexService.addService(serviceTarget);
  final AbstractVaultReader vaultReader=service(AbstractVaultReader.class);
  AS_ROOT_LOGGER.debugf("Using VaultReader %s",vaultReader);
  ServerService.addService(serviceTarget,configuration,processState,bootstrapListener,vaultReader);
  final ServiceActivatorContext serviceActivatorContext=new ServiceActivatorContext(){
    @Override public ServiceTarget getServiceTarget(){
      return serviceTarget;
    }
    @Override public ServiceRegistry getServiceRegistry(){
      return container;
    }
  }
;
  for (  ServiceActivator activator : extraServices) {
    activator.activate(serviceActivatorContext);
  }
  serviceTarget.addService(ShutdownHandler.SERVICE_NAME,new ShutdownHandlerImpl()).install();
  ServerEnvironmentService.addService(serverEnvironment,serviceTarget);
  AbsolutePathService.addService(ServerEnvironment.HOME_DIR,serverEnvironment.getHomeDir().getAbsolutePath(),serviceTarget);
  AbsolutePathService.addService(ServerEnvironment.SERVER_BASE_DIR,serverEnvironment.getServerBaseDir().getAbsolutePath(),serviceTarget);
  AbsolutePathService.addService(ServerEnvironment.SERVER_CONFIG_DIR,serverEnvironment.getServerConfigurationDir().getAbsolutePath(),serviceTarget);
  AbsolutePathService.addService(ServerEnvironment.SERVER_DATA_DIR,serverEnvironment.getServerDataDir().getAbsolutePath(),serviceTarget);
  AbsolutePathService.addService(ServerEnvironment.SERVER_LOG_DIR,serverEnvironment.getServerLogDir().getAbsolutePath(),serviceTarget);
  AbsolutePathService.addService(ServerEnvironment.SERVER_TEMP_DIR,serverEnvironment.getServerTempDir().getAbsolutePath(),serviceTarget);
  AbsolutePathService.addService(ServerEnvironment.CONTROLLER_TEMP_DIR,serverEnvironment.getControllerTempDir().getAbsolutePath(),serviceTarget);
  AbsolutePathService.addService("user.dir",System.getProperty("user.dir"),serviceTarget);
  AbsolutePathService.addService("user.home",System.getProperty("user.home"),serviceTarget);
  AbsolutePathService.addService("java.home",System.getProperty("java.home"),serviceTarget);
  if (AS_ROOT_LOGGER.isDebugEnabled()) {
    final long nanos=context.getElapsedTime();
    AS_ROOT_LOGGER.debugf("JBoss AS root service started in %d.%06d ms",Long.valueOf(nanos / 1000000L),Long.valueOf(nanos % 1000000L));
  }
}
