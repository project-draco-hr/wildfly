{
  final ExecutorService executor=executorInjector.getValue();
  final AccessControlContext accessControlContext=AccessController.doPrivileged(GetAccessControlContextAction.getInstance());
  final Runnable task=new Runnable(){
    @Override public void run(){
      PrivilegedAction<Void> privilegedAction=new PrivilegedAction<Void>(){
        @Override public Void run(){
          try {
            JPA_LOGGER.startingPersistenceUnitService(1,pu.getScopedPersistenceUnitName());
            pu.setTempClassLoaderFactory(new TempClassLoaderFactoryImpl(classLoader));
            pu.setJtaDataSource(jtaDataSource.getOptionalValue());
            pu.setNonJtaDataSource(nonJtaDataSource.getOptionalValue());
            if (proxyBeanManager != null) {
              properties.getValue().put(CDI_BEAN_MANAGER,proxyBeanManager);
            }
            WritableServiceBasedNamingStore.pushOwner(deploymentUnitServiceName);
            entityManagerFactoryBuilder=createContainerEntityManagerFactoryBuilder();
            context.complete();
          }
 catch (          Throwable t) {
            context.failed(new StartException(t));
          }
 finally {
            pu.setTempClassLoaderFactory(null);
            WritableServiceBasedNamingStore.popOwner();
          }
          return null;
        }
      }
;
      WildFlySecurityManager.doChecked(privilegedAction,accessControlContext);
    }
  }
;
  try {
    executor.execute(task);
  }
 catch (  RejectedExecutionException e) {
    task.run();
  }
 finally {
    context.asynchronous();
  }
}
