{
  final ClassLoader cl=WildFlySecurityManager.getCurrentContextClassLoaderPrivileged();
  try {
    WildFlySecurityManager.setCurrentContextClassLoaderPrivileged(classLoader);
    beanManager=weldContainer.getValue().getBeanManager(beanDeploymentArchiveId);
    for (    final Class<?> interceptor : interceptorClasses) {
      AnnotatedType<?> type=beanManager.createAnnotatedType(interceptor);
      @SuppressWarnings("rawtypes") InjectionTarget injectionTarget=beanManager.getInjectionTargetFactory(type).createInterceptorInjectionTarget();
      interceptorInjections.put(interceptor,beanManager.fireProcessInjectionTarget(type,injectionTarget));
    }
    if (ejbName != null) {
      EjbDescriptor<Object> descriptor=beanManager.getEjbDescriptor(ejbName);
      if (descriptor != null) {
        bean=beanManager.getBean(descriptor);
      }
    }
    if (bean instanceof SessionBean<?>) {
      SessionBean<?> sessionBean=(SessionBean<?>)bean;
      this.injectionTarget=sessionBean.getInjectionTarget();
      return;
    }
    WeldInjectionTarget injectionTarget=InjectionTargets.createInjectionTarget(componentClass,bean,beanManager,!Utils.isComponentWithView(componentDescription));
    if (componentDescription instanceof MessageDrivenComponentDescription || componentDescription instanceof WebComponentDescription || componentDescription instanceof WSComponentDescription) {
      this.injectionTarget=beanManager.fireProcessInjectionTarget(injectionTarget.getAnnotatedType(),injectionTarget);
    }
 else {
      this.injectionTarget=injectionTarget;
    }
    beanManager.getServices().get(InjectionTargetService.class).validateProducer(injectionTarget);
  }
  finally {
    WildFlySecurityManager.setCurrentContextClassLoaderPrivileged(cl);
  }
}
