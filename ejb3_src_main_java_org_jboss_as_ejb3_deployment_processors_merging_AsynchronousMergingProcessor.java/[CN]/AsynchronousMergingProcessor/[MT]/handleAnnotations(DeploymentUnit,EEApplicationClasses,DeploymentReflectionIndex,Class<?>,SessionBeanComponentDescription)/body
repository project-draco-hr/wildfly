{
  final RuntimeAnnotationInformation<Boolean> data=MethodAnnotationAggregator.runtimeAnnotationInformation(componentClass,applicationClasses,deploymentReflectionIndex,Asynchronous.class);
  for (  Map.Entry<String,List<Boolean>> entry : data.getClassAnnotations().entrySet()) {
    if (!entry.getValue().isEmpty()) {
      description.addAsynchronousClass(entry.getKey());
    }
  }
  for (  Map.Entry<Method,List<Boolean>> entry : data.getMethodAnnotations().entrySet()) {
    if (!entry.getValue().isEmpty()) {
      description.addAsynchronousMethod(MethodIdentifier.getIdentifierForMethod(entry.getKey()));
    }
  }
  for (  ViewDescription view : description.getViews()) {
    if (!view.getViewClassName().equals(description.getComponentClassName())) {
      final EEModuleClassDescription viewClass=applicationClasses.getClassByName(view.getViewClassName());
      if (viewClass != null) {
        final ClassAnnotationInformation<Asynchronous,Boolean> annotations=viewClass.getAnnotationInformation(Asynchronous.class);
        if (annotations != null) {
          if (!annotations.getClassLevelAnnotations().isEmpty()) {
            description.addAsynchronousView(view.getViewClassName());
          }
        }
      }
    }
  }
}
