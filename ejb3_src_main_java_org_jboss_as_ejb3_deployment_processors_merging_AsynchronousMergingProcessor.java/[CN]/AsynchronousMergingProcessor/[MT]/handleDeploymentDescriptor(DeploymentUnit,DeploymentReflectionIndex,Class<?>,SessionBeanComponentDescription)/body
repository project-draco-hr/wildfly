{
  final SessionBeanMetaData data=description.getDescriptorData();
  if (data != null) {
    if (data instanceof SessionBean31MetaData) {
      final SessionBean31MetaData sessionBeanData=(SessionBean31MetaData)data;
      final AsyncMethodsMetaData asyn=sessionBeanData.getAsyncMethods();
      if (asyn != null) {
        for (        AsyncMethodMetaData method : asyn) {
          final Method m=MethodResolutionUtils.resolveMethod(method.getMethodName(),method.getMethodParams(),componentClass,deploymentReflectionIndex);
          description.addAsynchronousMethod(MethodIdentifier.getIdentifierForMethod(m));
        }
      }
    }
  }
  if (!description.getAsynchronousClasses().isEmpty() || !description.getAsynchronousMethods().isEmpty()) {
    description.getConfigurators().add(new ComponentConfigurator(){
      @Override public void configure(      final DeploymentPhaseContext context,      final ComponentDescription description,      final ComponentConfiguration configuration) throws DeploymentUnitProcessingException {
        configuration.getCreateDependencies().add(new DependencyConfigurator<SessionBeanComponentCreateService>(){
          @Override public void configureDependency(          final ServiceBuilder<?> serviceBuilder,          final SessionBeanComponentCreateService service) throws DeploymentUnitProcessingException {
            serviceBuilder.addDependency(SessionBeanComponent.ASYNC_EXECUTOR_SERVICE_NAME,ExecutorService.class,service.getAsyncExecutorService());
          }
        }
);
      }
    }
);
    for (    final ViewDescription view : description.getViews()) {
      final EJBViewDescription ejbView=(EJBViewDescription)view;
      ejbView.getConfigurators().add(new ViewConfigurator(){
        @Override public void configure(        final DeploymentPhaseContext context,        final ComponentConfiguration componentConfiguration,        final ViewDescription description,        final ViewConfiguration configuration) throws DeploymentUnitProcessingException {
          final SessionBeanComponentDescription componentDescription=(SessionBeanComponentDescription)componentConfiguration.getComponentDescription();
          for (          final Method method : configuration.getProxyFactory().getCachedMethods()) {
            final Method componentMethod=ClassReflectionIndexUtil.findMethod(deploymentReflectionIndex,deploymentReflectionIndex.getClassIndex(componentClass),method);
            if (componentMethod != null) {
              if (componentDescription.getAsynchronousClasses().contains(componentMethod.getDeclaringClass().getName())) {
                addAsyncInterceptor(configuration,method);
                configuration.addAsyncMethod(method);
              }
 else {
                MethodIdentifier id=MethodIdentifier.getIdentifierForMethod(method);
                if (componentDescription.getAsynchronousMethods().contains(id)) {
                  addAsyncInterceptor(configuration,method);
                  configuration.addAsyncMethod(method);
                }
              }
            }
          }
        }
      }
);
    }
  }
}
