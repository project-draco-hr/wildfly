{
  final DomainClient masterClient=domainMasterLifecycleUtil.getDomainClient();
  final ModelNode address=new ModelNode();
  address.add("server-group","other-server-group");
  address.protect();
{
    final ModelNode operation=new ModelNode();
    operation.get(OP).set(READ_ATTRIBUTE_OPERATION);
    operation.get(OP_ADDR).set(address);
    operation.get(NAME).set("socket-binding-port-offset");
    operation.get(INCLUDE_DEFAULTS).set(false);
    final ModelNode response=masterClient.execute(operation);
    validateResponse(response);
    Assert.assertFalse(response.get(RESULT).isDefined());
  }
{
    final ModelNode operation=new ModelNode();
    operation.get(OP).set(WRITE_ATTRIBUTE_OPERATION);
    operation.get(OP_ADDR).set(address);
    operation.get(NAME).set("socket-binding-port-offset");
    operation.get(VALUE).set(0);
    final ModelNode response=masterClient.execute(operation);
    validateResponse(response);
  }
{
    final ModelNode operation=new ModelNode();
    operation.get(OP).set(READ_ATTRIBUTE_OPERATION);
    operation.get(OP_ADDR).set(address);
    operation.get(NAME).set("socket-binding-port-offset");
    operation.get(INCLUDE_DEFAULTS).set(false);
    final ModelNode response=masterClient.execute(operation);
    validateResponse(response);
    Assert.assertTrue(response.get(RESULT).isDefined());
    Assert.assertEquals(0,response.get(RESULT).asInt());
  }
{
    final ModelNode operation=new ModelNode();
    operation.get(OP).set(UNDEFINE_ATTRIBUTE_OPERATION);
    operation.get(OP_ADDR).set(address);
    operation.get(NAME).set("socket-binding-port-offset");
    final ModelNode response=masterClient.execute(operation);
    validateResponse(response);
  }
{
    final ModelNode operation=new ModelNode();
    operation.get(OP).set(READ_ATTRIBUTE_OPERATION);
    operation.get(OP_ADDR).set(address);
    operation.get(NAME).set("socket-binding-port-offset");
    operation.get(INCLUDE_DEFAULTS).set(false);
    final ModelNode response=masterClient.execute(operation);
    validateResponse(response);
    Assert.assertFalse(response.get(RESULT).isDefined());
  }
}
