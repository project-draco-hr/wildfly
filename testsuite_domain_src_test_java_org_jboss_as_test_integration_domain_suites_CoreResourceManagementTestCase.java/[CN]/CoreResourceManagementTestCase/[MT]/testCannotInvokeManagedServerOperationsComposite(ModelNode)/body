{
  final DomainClient masterClient=domainMasterLifecycleUtil.getDomainClient();
  ModelNode composite=new ModelNode();
  composite.get(OP).set(CompositeOperationHandler.NAME);
  composite.get(OP_ADDR).setEmptyList();
  composite.get(OPERATION_HEADERS,ROLLBACK_ON_RUNTIME_FAILURE).set(false);
  ModelNode goodServerOp=new ModelNode();
  goodServerOp.get(OP).set(READ_RESOURCE_OPERATION);
  goodServerOp.get(OP_ADDR).set(stepAddress);
  composite.get(STEPS).add(goodServerOp);
  composite.get(STEPS).add(getAddThreadFactoryOperation(stepAddress.clone().add("thread-factory","test-pool-123abc")));
  ModelNode result=masterClient.execute(composite);
  validateFailedResponse(result);
  String errorCode=getNotAuthorizedErrorCode();
  List<Property> steps=result.get(RESULT,DOMAIN_RESULTS).asPropertyList();
  Assert.assertEquals(2,steps.size());
  int i=0;
  for (  Property property : steps) {
    ModelNode stepResult=property.getValue();
    Assert.assertEquals(FAILED,stepResult.get(OUTCOME).asString());
    if (i == 0) {
      Assert.assertFalse(stepResult.hasDefined(FAILURE_DESCRIPTION));
    }
    if (i++ == 1) {
      ModelNode desc=validateFailedResponse(stepResult);
      Assert.assertTrue(desc.toString() + " does not contain " + errorCode,desc.toString().contains(errorCode));
    }
    i++;
  }
}
