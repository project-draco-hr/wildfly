{
  final DomainClient masterClient=domainMasterLifecycleUtil.getDomainClient();
  ModelNode composite=new ModelNode();
  composite.get(OP).set(CompositeOperationHandler.NAME);
  composite.get(OP_ADDR).setEmptyList();
  composite.get(OPERATION_HEADERS,ROLLBACK_ON_RUNTIME_FAILURE).set(false);
  ModelNode server1=new ModelNode();
  server1.get(OP).set(ADD);
  server1.get(OP_ADDR).add("host","master").add("server","main-one").add("system-property","domain-test-property");
  ModelNode server3=new ModelNode();
  server3.get(OP).set(ADD);
  server3.get(OP_ADDR).add("host","slave").add("server","main-three").add("system-property","domain-test-property");
  composite.get(STEPS).add(server1);
  composite.get(STEPS).add(server3);
  ModelNode response=masterClient.execute(composite);
  validateFailedResponse(response);
  String errorCode=getNotAuthorizedErrorCode();
  Assert.assertEquals(1,response.get(SERVER_GROUPS,"main-server-group",HOST,"master").keys().size());
  Assert.assertEquals(1,response.get(SERVER_GROUPS,"main-server-group",HOST,"slave").keys().size());
  ModelNode mainOneResult=response.get(SERVER_GROUPS,"main-server-group",HOST,"master","main-one");
  ModelNode mainThreeResult=response.get(SERVER_GROUPS,"main-server-group",HOST,"slave","main-three");
  Assert.assertTrue(mainOneResult.isDefined());
  Assert.assertTrue(mainThreeResult.isDefined());
  List<ModelNode> steps=new ArrayList<ModelNode>();
  steps.add(mainOneResult);
  steps.add(mainThreeResult);
  for (  ModelNode stepResponse : steps) {
    ModelNode stepResult=stepResponse.get("response");
    ModelNode desc=validateFailedResponse(stepResult);
    Assert.assertTrue(desc.toString() + " does not contain " + errorCode,desc.toString().contains(errorCode));
  }
}
