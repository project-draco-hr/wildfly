{
  List<String> itemNames=new ArrayList<String>();
  List<String> itemDescriptions=new ArrayList<String>();
  List<OpenType<?>> itemTypes=new ArrayList<OpenType<?>>();
  if (!typeNode.isDefined() || typeNode.getType() == ModelType.STRING) {
    return SimpleType.STRING;
  }
  for (  String name : typeNode.keys()) {
    ModelNode current=typeNode.get(name);
    itemNames.add(name);
    String description=null;
    if (!current.hasDefined(DESCRIPTION)) {
      description="-";
    }
 else {
      description=current.get(DESCRIPTION).asString().trim();
      if (description.length() == 0) {
        description="-";
      }
    }
    itemDescriptions.add(getDescription(current));
    itemTypes.add(getConverter(current).getOpenType());
  }
  try {
    return new CompositeType(JmxLogger.ROOT_LOGGER.complexCompositeEntryTypeName(),JmxLogger.ROOT_LOGGER.complexCompositeEntryTypeDescription(),itemNames.toArray(new String[itemNames.size()]),itemDescriptions.toArray(new String[itemDescriptions.size()]),itemTypes.toArray(new OpenType[itemTypes.size()]));
  }
 catch (  OpenDataException e) {
    throw new RuntimeException(e);
  }
}
