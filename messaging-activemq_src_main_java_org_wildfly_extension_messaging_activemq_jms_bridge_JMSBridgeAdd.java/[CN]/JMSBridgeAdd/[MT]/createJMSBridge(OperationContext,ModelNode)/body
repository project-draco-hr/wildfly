{
  final Properties sourceContextProperties=resolveContextProperties(JMSBridgeDefinition.SOURCE_CONTEXT,context,model);
  final String sourceConnectionFactoryName=JMSBridgeDefinition.SOURCE_CONNECTION_FACTORY.resolveModelAttribute(context,model).asString();
  final ConnectionFactoryFactory sourceCff=new JNDIConnectionFactoryFactory(sourceContextProperties,sourceConnectionFactoryName);
  final String sourceDestinationName=JMSBridgeDefinition.SOURCE_DESTINATION.resolveModelAttribute(context,model).asString();
  final DestinationFactory sourceDestinationFactory=new JNDIDestinationFactory(sourceContextProperties,sourceDestinationName);
  final Properties targetContextProperties=resolveContextProperties(JMSBridgeDefinition.TARGET_CONTEXT,context,model);
  final String targetConnectionFactoryName=JMSBridgeDefinition.TARGET_CONNECTION_FACTORY.resolveModelAttribute(context,model).asString();
  final ConnectionFactoryFactory targetCff=new JNDIConnectionFactoryFactory(targetContextProperties,targetConnectionFactoryName);
  final String targetDestinationName=JMSBridgeDefinition.TARGET_DESTINATION.resolveModelAttribute(context,model).asString();
  final DestinationFactory targetDestinationFactory=new JNDIDestinationFactory(targetContextProperties,targetDestinationName);
  final String sourceUsername=resolveAttribute(JMSBridgeDefinition.SOURCE_USER,context,model);
  final String sourcePassword=resolveAttribute(JMSBridgeDefinition.SOURCE_PASSWORD,context,model);
  final String targetUsername=resolveAttribute(JMSBridgeDefinition.TARGET_USER,context,model);
  final String targetPassword=resolveAttribute(JMSBridgeDefinition.TARGET_PASSWORD,context,model);
  final String selector=resolveAttribute(CommonAttributes.SELECTOR,context,model);
  final long failureRetryInterval=JMSBridgeDefinition.FAILURE_RETRY_INTERVAL.resolveModelAttribute(context,model).asLong();
  final int maxRetries=JMSBridgeDefinition.MAX_RETRIES.resolveModelAttribute(context,model).asInt();
  final QualityOfServiceMode qosMode=QualityOfServiceMode.valueOf(JMSBridgeDefinition.QUALITY_OF_SERVICE.resolveModelAttribute(context,model).asString());
  final int maxBatchSize=JMSBridgeDefinition.MAX_BATCH_SIZE.resolveModelAttribute(context,model).asInt();
  final long maxBatchTime=JMSBridgeDefinition.MAX_BATCH_TIME.resolveModelAttribute(context,model).asLong();
  final String subName=resolveAttribute(JMSBridgeDefinition.SUBSCRIPTION_NAME,context,model);
  final String clientID=resolveAttribute(JMSBridgeDefinition.CLIENT_ID,context,model);
  final boolean addMessageIDInHeader=JMSBridgeDefinition.ADD_MESSAGE_ID_IN_HEADER.resolveModelAttribute(context,model).asBoolean();
  final String moduleName=resolveAttribute(JMSBridgeDefinition.MODULE,context,model);
  final ClassLoader oldTccl=WildFlySecurityManager.getCurrentContextClassLoaderPrivileged();
  try {
    if (moduleName != null) {
      ModuleIdentifier moduleID=ModuleIdentifier.fromString(moduleName);
      Module module=Module.getCallerModuleLoader().loadModule(moduleID);
      WildFlySecurityManager.setCurrentContextClassLoaderPrivileged(module.getClassLoader());
    }
    return new JMSBridgeImpl(sourceCff,targetCff,sourceDestinationFactory,targetDestinationFactory,sourceUsername,sourcePassword,targetUsername,targetPassword,selector,failureRetryInterval,maxRetries,qosMode,maxBatchSize,maxBatchTime,subName,clientID,addMessageIDInHeader);
  }
 catch (  ModuleLoadException e) {
    throw MessagingLogger.ROOT_LOGGER.unableToLoadModule(moduleName,e);
  }
 finally {
    WildFlySecurityManager.setCurrentContextClassLoaderPrivileged(oldTccl);
  }
}
