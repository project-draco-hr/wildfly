{
  context.addStep(new OperationStepHandler(){
    @Override public void execute(    OperationContext context,    ModelNode operation) throws OperationFailedException {
      final PathAddress address=PathAddress.pathAddress(operation.get(OP_ADDR));
      String moduleName=resolveAttribute(JMSBridgeDefinition.MODULE,context,model);
      final JMSBridge bridge=createJMSBridge(context,model);
      final String bridgeName=address.getLastElement().getValue();
      final JMSBridgeService bridgeService=new JMSBridgeService(moduleName,bridgeName,bridge);
      final ServiceName bridgeServiceName=MessagingServices.getJMSBridgeServiceName(bridgeName);
      final ServiceBuilder<JMSBridge> jmsBridgeServiceBuilder=context.getServiceTarget().addService(bridgeServiceName,bridgeService).addDependency(TxnServices.JBOSS_TXN_TRANSACTION_MANAGER).setInitialMode(Mode.ACTIVE);
      addServerExecutorDependency(jmsBridgeServiceBuilder,bridgeService.getExecutorInjector(),false);
      if (dependsOnLocalResources(model,JMSBridgeDefinition.SOURCE_CONTEXT)) {
        addDependencyForJNDIResource(jmsBridgeServiceBuilder,model,context,JMSBridgeDefinition.SOURCE_CONNECTION_FACTORY);
        addDependencyForJNDIResource(jmsBridgeServiceBuilder,model,context,JMSBridgeDefinition.SOURCE_DESTINATION);
      }
      if (dependsOnLocalResources(model,JMSBridgeDefinition.TARGET_CONTEXT)) {
        addDependencyForJNDIResource(jmsBridgeServiceBuilder,model,context,JMSBridgeDefinition.TARGET_CONNECTION_FACTORY);
        addDependencyForJNDIResource(jmsBridgeServiceBuilder,model,context,JMSBridgeDefinition.TARGET_DESTINATION);
      }
      jmsBridgeServiceBuilder.install();
      context.completeStep(OperationContext.RollbackHandler.NOOP_ROLLBACK_HANDLER);
    }
  }
,OperationContext.Stage.RUNTIME);
}
