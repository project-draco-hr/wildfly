{
  logger.debug(cls + " analyzeConstants");
  ArrayList a=new ArrayList();
  for (int i=0; i < fields.length; ++i) {
    logger.debug("f_flags[" + i + "]="+ f_flags[i]);
    if ((f_flags[i] & F_CONSTANT) == 0)     continue;
    Class type=fields[i].getType();
    if (!type.isPrimitive() && type != java.lang.String.class) {
      if (cls.isInterface())       throw new RMIIIOPViolationException("Field \"" + fields[i].getName() + "\" of interface \""+ cls.getName()+ "\" is a constant, but not of one "+ "of the primitive types, or String.","1.2.3");
      continue;
    }
    String name=fields[i].getName();
    Object value;
    try {
      value=fields[i].get(null);
    }
 catch (    Exception ex) {
      throw new RuntimeException(ex.toString());
    }
    logger.debug("Constant[" + i + "] name= "+ name);
    logger.debug("Constant[" + i + "] type= "+ type.getName());
    logger.debug("Constant[" + i + "] value= "+ value);
    a.add(new ConstantAnalysis(name,type,value));
  }
  constants=new ConstantAnalysis[a.size()];
  constants=(ConstantAnalysis[])a.toArray(constants);
  logger.debug(cls + " analyzeConstants constant=" + a.size());
}
