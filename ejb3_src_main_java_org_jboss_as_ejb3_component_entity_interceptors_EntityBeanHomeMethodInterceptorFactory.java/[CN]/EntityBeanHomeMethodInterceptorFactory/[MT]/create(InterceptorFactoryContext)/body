{
  final EntityBeanComponent component=(EntityBeanComponent)context.getContextData().get(Component.class);
  return new Interceptor(){
    @Override public Object processInvocation(    final InterceptorContext context) throws Exception {
      final EntityBeanComponentInstance instance=component.getPool().get();
      final Object result;
      final InvocationType invocationType=context.getPrivateData(InvocationType.class);
      try {
        context.putPrivateData(InvocationType.class,InvocationType.HOME_METHOD);
        Method oldMethod=context.getMethod();
        try {
          context.putPrivateData(ComponentInstance.class,instance);
          context.setMethod(businessMethod);
          context.setTarget(instance.getInstance());
          return instance.getInterceptor(businessMethod).processInvocation(context);
        }
  finally {
          context.setMethod(oldMethod);
          context.setTarget(null);
          context.putPrivateData(ComponentInstance.class,null);
        }
      }
  finally {
        context.putPrivateData(InvocationType.class,invocationType);
        component.getPool().release(instance);
      }
    }
  }
;
}
