{
  final PathAddress securityDomainAddress=PathAddress.pathAddress(PathElement.pathElement(SUBSYSTEM,SecurityExtension.SUBSYSTEM_NAME),PathElement.pathElement(Constants.SECURITY_DOMAIN,"jaspi-test"));
  final PathAddress jaspiAuth=securityDomainAddress.append(SecurityExtension.PATH_JASPI_AUTH);
  final ModelNode addJaspiAuth=Util.createAddOperation(jaspiAuth);
  addJaspiAuth.protect();
  final PathAddress authModule=jaspiAuth.append(Constants.AUTH_MODULE,"org.jboss.Blah");
  final ModelNode addAuthModule=Util.createAddOperation(authModule);
  addAuthModule.get(Constants.CODE).set("org.jboss.Blah");
  addAuthModule.get(Constants.FLAG).set("optional");
  addAuthModule.protect();
  final PathAddress loginModuleStack=jaspiAuth.append(Constants.LOGIN_MODULE_STACK,"test");
  final ModelNode addLoginModuleStack=Util.createAddOperation(loginModuleStack);
  addLoginModuleStack.protect();
  final PathAddress loginModuleStackModule=loginModuleStack.append(Constants.LOGIN_MODULE,"UserRoles");
  final ModelNode addLoginModuleStackModule=Util.createAddOperation(loginModuleStackModule);
  addLoginModuleStackModule.get(Constants.CODE).set("UserRoles");
  addLoginModuleStackModule.get(Constants.FLAG).set("required");
  addLoginModuleStackModule.get(Constants.MODULE_OPTIONS).add("usersProperties","testA");
  addLoginModuleStackModule.get(Constants.MODULE_OPTIONS).add("rolesProperties","testB");
  addLoginModuleStackModule.protect();
  executeOpsInBothControllers(mainServices,modelVersion,addJaspiAuth,addLoginModuleStack,addLoginModuleStackModule,addAuthModule);
  compareModules(mainServices,modelVersion,jaspiAuth,Constants.AUTH_MODULES,Constants.AUTH_MODULE);
  compareModules(mainServices,modelVersion,loginModuleStack,Constants.LOGIN_MODULES,Constants.LOGIN_MODULE);
  executeOpsInBothControllers(mainServices,modelVersion,Util.createRemoveOperation(loginModuleStackModule));
  ModelTestUtils.checkOutcome(mainServices.executeOperation(Util.createOperation(ReadResourceHandler.DEFINITION,loginModuleStack)));
  ModelTestUtils.checkFailed(mainServices.executeOperation(modelVersion,mainServices.transformOperation(modelVersion,Util.createOperation(ReadResourceHandler.DEFINITION,loginModuleStack))));
  executeOpsInBothControllers(mainServices,modelVersion,Util.createRemoveOperation(authModule));
  ModelTestUtils.checkOutcome(mainServices.executeOperation(Util.createOperation(ReadResourceHandler.DEFINITION,jaspiAuth)));
  ModelTestUtils.checkFailed(mainServices.executeOperation(modelVersion,mainServices.transformOperation(modelVersion,Util.createOperation(ReadResourceHandler.DEFINITION,jaspiAuth))));
  ModelTestUtils.checkOutcome(mainServices.executeOperation(Util.createRemoveOperation(jaspiAuth)));
  executeOpsInBothControllers(mainServices,modelVersion,addJaspiAuth,addAuthModule,addLoginModuleStack,addLoginModuleStackModule);
  compareModules(mainServices,modelVersion,jaspiAuth,Constants.AUTH_MODULES,Constants.AUTH_MODULE);
  compareModules(mainServices,modelVersion,loginModuleStack,Constants.LOGIN_MODULES,Constants.LOGIN_MODULE);
  executeOpsInBothControllers(mainServices,modelVersion,Util.createRemoveOperation(jaspiAuth));
  ModelTestUtils.checkFailed(mainServices.executeOperation(Util.createOperation(ReadResourceHandler.DEFINITION,jaspiAuth)));
  ModelTestUtils.checkFailed(mainServices.executeOperation(modelVersion,mainServices.transformOperation(modelVersion,Util.createOperation(ReadResourceHandler.DEFINITION,jaspiAuth))));
  final ModelNode addJaspiAuthCollapsed=addJaspiAuth.clone();
  ModelNode modules=new ModelNode();
  modules.get(Constants.CODE).set("org.jboss.Blah");
  modules.get(Constants.FLAG).set("optional");
  addJaspiAuthCollapsed.get(Constants.AUTH_MODULES).add(modules);
  addJaspiAuthCollapsed.protect();
  final ModelNode addLoginStackCollapsed=addLoginModuleStack.clone();
  modules=new ModelNode();
  modules.get(Constants.CODE).set("UserRoles");
  modules.get(Constants.FLAG).set("required");
  modules.get(Constants.MODULE_OPTIONS).add("usersProperties","testA");
  modules.get(Constants.MODULE_OPTIONS).add("rolesProperties","testB");
  addLoginStackCollapsed.get(Constants.LOGIN_MODULES).add(modules);
  addLoginStackCollapsed.protect();
  executeOpsInBothControllers(mainServices,modelVersion,addJaspiAuthCollapsed,addLoginStackCollapsed);
  compareModules(mainServices,modelVersion,jaspiAuth,Constants.AUTH_MODULES,Constants.AUTH_MODULE);
  compareModules(mainServices,modelVersion,loginModuleStack,Constants.LOGIN_MODULES,Constants.LOGIN_MODULE);
  final PathAddress authModule2=jaspiAuth.append(Constants.AUTH_MODULE,"X");
  final ModelNode addAuthModule2=Util.createAddOperation(authModule2);
  addAuthModule2.get(Constants.CODE).set("X");
  addAuthModule2.get(Constants.FLAG).set("optional");
  addAuthModule2.protect();
  executeOpsInBothControllers(mainServices,modelVersion,addAuthModule2);
  compareModules(mainServices,modelVersion,jaspiAuth,Constants.AUTH_MODULES,Constants.AUTH_MODULE);
  compareModules(mainServices,modelVersion,loginModuleStack,Constants.LOGIN_MODULES,Constants.LOGIN_MODULE);
  final PathAddress loginModuleStackModule2=loginModuleStack.append(Constants.LOGIN_MODULE,"UserRoles2");
  final ModelNode addLoginModuleStackModule2=Util.createAddOperation(loginModuleStackModule2);
  addLoginModuleStackModule2.get(Constants.CODE).set("UserRoles2");
  addLoginModuleStackModule2.get(Constants.FLAG).set("required");
  addLoginModuleStackModule2.get(Constants.MODULE_OPTIONS).add("usersProperties","testA");
  addLoginModuleStackModule2.get(Constants.MODULE_OPTIONS).add("rolesProperties","testB");
  addLoginModuleStackModule2.protect();
  executeOpsInBothControllers(mainServices,modelVersion,addLoginModuleStackModule2);
  compareModules(mainServices,modelVersion,jaspiAuth,Constants.AUTH_MODULES,Constants.AUTH_MODULE);
  compareModules(mainServices,modelVersion,loginModuleStack,Constants.LOGIN_MODULES,Constants.LOGIN_MODULE);
  executeOpsInBothControllers(mainServices,modelVersion,Util.createRemoveOperation(loginModuleStackModule));
  compareModules(mainServices,modelVersion,jaspiAuth,Constants.AUTH_MODULES,Constants.AUTH_MODULE);
  compareModules(mainServices,modelVersion,loginModuleStack,Constants.LOGIN_MODULES,Constants.LOGIN_MODULE);
  executeOpsInBothControllers(mainServices,modelVersion,Util.createRemoveOperation(loginModuleStackModule2));
  compareModules(mainServices,modelVersion,jaspiAuth,Constants.AUTH_MODULES,Constants.AUTH_MODULE);
  ModelTestUtils.checkOutcome(mainServices.executeOperation(Util.createOperation(ReadResourceHandler.DEFINITION,loginModuleStack)));
  ModelTestUtils.checkFailed(mainServices.executeOperation(modelVersion,mainServices.transformOperation(modelVersion,Util.createOperation(ReadResourceHandler.DEFINITION,loginModuleStack))));
  executeOpsInBothControllers(mainServices,modelVersion,Util.createRemoveOperation(authModule));
  compareModules(mainServices,modelVersion,jaspiAuth,Constants.AUTH_MODULES,Constants.AUTH_MODULE);
  ModelTestUtils.checkOutcome(mainServices.executeOperation(Util.createOperation(ReadResourceHandler.DEFINITION,loginModuleStack)));
  ModelTestUtils.checkFailed(mainServices.executeOperation(modelVersion,mainServices.transformOperation(modelVersion,Util.createOperation(ReadResourceHandler.DEFINITION,loginModuleStack))));
  executeOpsInBothControllers(mainServices,modelVersion,Util.createRemoveOperation(authModule2));
  ModelTestUtils.checkOutcome(mainServices.executeOperation(Util.createOperation(ReadResourceHandler.DEFINITION,jaspiAuth)));
  ModelTestUtils.checkFailed(mainServices.executeOperation(modelVersion,mainServices.transformOperation(modelVersion,Util.createOperation(ReadResourceHandler.DEFINITION,jaspiAuth))));
  mainServices.executeOperation(Util.createRemoveOperation(loginModuleStack));
  mainServices.executeOperation(Util.createRemoveOperation(jaspiAuth));
  executeOpsInBothControllers(mainServices,modelVersion,addJaspiAuth,addLoginModuleStack);
  ModelTestUtils.checkOutcome(mainServices.executeOperation(Util.createOperation(ReadResourceHandler.DEFINITION,loginModuleStack)));
  ModelTestUtils.checkFailed(mainServices.executeOperation(modelVersion,mainServices.transformOperation(modelVersion,Util.createOperation(ReadResourceHandler.DEFINITION,loginModuleStack))));
  ModelTestUtils.checkOutcome(mainServices.executeOperation(Util.createOperation(ReadResourceHandler.DEFINITION,jaspiAuth)));
  ModelTestUtils.checkFailed(mainServices.executeOperation(modelVersion,mainServices.transformOperation(modelVersion,Util.createOperation(ReadResourceHandler.DEFINITION,jaspiAuth))));
  modules=new ModelNode();
  modules.get(Constants.CODE).set("org.jboss.Blah");
  modules.get(Constants.FLAG).set("optional");
  ModelNode temp=modules.clone();
  modules.clear().add(temp.clone());
  final ModelNode writeJaspiAuthAuthModules=Util.getWriteAttributeOperation(jaspiAuth,Constants.AUTH_MODULES,modules);
  writeJaspiAuthAuthModules.protect();
  executeOpsInBothControllers(mainServices,modelVersion,writeJaspiAuthAuthModules);
  compareModules(mainServices,modelVersion,jaspiAuth,Constants.AUTH_MODULES,Constants.AUTH_MODULE);
  modules=new ModelNode();
  modules.get(Constants.CODE).set("UserRoles");
  modules.get(Constants.FLAG).set("required");
  modules.get(Constants.MODULE_OPTIONS).add("usersProperties","testA");
  modules.get(Constants.MODULE_OPTIONS).add("rolesProperties","testB");
  temp=modules.clone();
  modules.clear().add(temp.clone());
  final ModelNode writeLoginModuleStackModules=Util.getWriteAttributeOperation(loginModuleStack,Constants.LOGIN_MODULES,modules);
  writeLoginModuleStackModules.protect();
  executeOpsInBothControllers(mainServices,modelVersion,writeLoginModuleStackModules);
  compareModules(mainServices,modelVersion,loginModuleStack,Constants.LOGIN_MODULES,Constants.LOGIN_MODULE);
  final ModelNode writeJaspiAuthAuthModules2=writeJaspiAuthAuthModules.clone();
  modules=new ModelNode();
  modules.get(Constants.CODE).set("org.jboss.Blah2");
  modules.get(Constants.FLAG).set("optional");
  writeJaspiAuthAuthModules2.get(Constants.VALUE).add(modules);
  executeOpsInBothControllers(mainServices,modelVersion,writeJaspiAuthAuthModules2);
  compareModules(mainServices,modelVersion,jaspiAuth,Constants.AUTH_MODULES,Constants.AUTH_MODULE);
  final ModelNode writeLoginModuleStackModules2=writeLoginModuleStackModules.clone();
  modules=new ModelNode();
  modules.get(Constants.CODE).set("UserRoles");
  modules.get(Constants.FLAG).set("required");
  modules.get(Constants.MODULE_OPTIONS).add("usersProperties","testA");
  modules.get(Constants.MODULE_OPTIONS).add("rolesProperties","testB");
  writeJaspiAuthAuthModules2.get(Constants.VALUE).add(modules);
  executeOpsInBothControllers(mainServices,modelVersion,writeLoginModuleStackModules2);
  compareModules(mainServices,modelVersion,loginModuleStack,Constants.LOGIN_MODULES,Constants.LOGIN_MODULE);
  executeOpsInBothControllers(mainServices,modelVersion,Util.getUndefineAttributeOperation(loginModuleStack,Constants.LOGIN_MODULES));
  compareModules(mainServices,modelVersion,jaspiAuth,Constants.AUTH_MODULES,Constants.AUTH_MODULE);
  ModelTestUtils.checkOutcome(mainServices.executeOperation(Util.createOperation(ReadResourceHandler.DEFINITION,loginModuleStack)));
  ModelTestUtils.checkFailed(mainServices.executeOperation(modelVersion,mainServices.transformOperation(modelVersion,Util.createOperation(ReadResourceHandler.DEFINITION,loginModuleStack))));
  executeOpsInBothControllers(mainServices,modelVersion,Util.getUndefineAttributeOperation(jaspiAuth,Constants.AUTH_MODULES));
  ModelTestUtils.checkOutcome(mainServices.executeOperation(Util.createOperation(ReadResourceHandler.DEFINITION,jaspiAuth)));
  ModelTestUtils.checkFailed(mainServices.executeOperation(modelVersion,mainServices.transformOperation(modelVersion,Util.createOperation(ReadResourceHandler.DEFINITION,jaspiAuth))));
  mainServices.executeOperation(Util.createRemoveOperation(loginModuleStack));
  mainServices.executeOperation(Util.createRemoveOperation(jaspiAuth));
  executeOpsInBothControllers(mainServices,modelVersion,addJaspiAuth,addLoginModuleStack);
  ModelTestUtils.checkOutcome(mainServices.executeOperation(Util.createOperation(ReadResourceHandler.DEFINITION,loginModuleStack)));
  ModelTestUtils.checkFailed(mainServices.executeOperation(modelVersion,mainServices.transformOperation(modelVersion,Util.createOperation(ReadResourceHandler.DEFINITION,loginModuleStack))));
  ModelTestUtils.checkOutcome(mainServices.executeOperation(Util.createOperation(ReadResourceHandler.DEFINITION,jaspiAuth)));
  ModelTestUtils.checkFailed(mainServices.executeOperation(modelVersion,mainServices.transformOperation(modelVersion,Util.createOperation(ReadResourceHandler.DEFINITION,jaspiAuth))));
  executeOpsInBothControllers(mainServices,modelVersion,writeLoginModuleStackModules);
  ModelTestUtils.checkOutcome(mainServices.executeOperation(Util.createOperation(ReadResourceHandler.DEFINITION,loginModuleStack)));
  ModelTestUtils.checkFailed(mainServices.executeOperation(modelVersion,mainServices.transformOperation(modelVersion,Util.createOperation(ReadResourceHandler.DEFINITION,loginModuleStack))));
  executeOpsInBothControllers(mainServices,modelVersion,writeJaspiAuthAuthModules);
  compareModules(mainServices,modelVersion,jaspiAuth,Constants.AUTH_MODULES,Constants.AUTH_MODULE);
  compareModules(mainServices,modelVersion,loginModuleStack,Constants.LOGIN_MODULES,Constants.LOGIN_MODULE);
  executeOpsInBothControllers(mainServices,modelVersion,Util.getWriteAttributeOperation(loginModuleStack,Constants.LOGIN_MODULES,new ModelNode()));
  compareModules(mainServices,modelVersion,jaspiAuth,Constants.AUTH_MODULES,Constants.AUTH_MODULE);
  ModelTestUtils.checkOutcome(mainServices.executeOperation(Util.createOperation(ReadResourceHandler.DEFINITION,loginModuleStack)));
  ModelTestUtils.checkFailed(mainServices.executeOperation(modelVersion,mainServices.transformOperation(modelVersion,Util.createOperation(ReadResourceHandler.DEFINITION,loginModuleStack))));
  executeOpsInBothControllers(mainServices,modelVersion,Util.getWriteAttributeOperation(jaspiAuth,Constants.AUTH_MODULES,new ModelNode()));
  ModelTestUtils.checkOutcome(mainServices.executeOperation(Util.createOperation(ReadResourceHandler.DEFINITION,jaspiAuth)));
  ModelTestUtils.checkFailed(mainServices.executeOperation(modelVersion,mainServices.transformOperation(modelVersion,Util.createOperation(ReadResourceHandler.DEFINITION,jaspiAuth))));
  mainServices.executeOperation(Util.createRemoveOperation(loginModuleStack));
  mainServices.executeOperation(Util.createRemoveOperation(jaspiAuth));
}
