{
  final ModelNode parentModel=ModelTestUtils.getSubModel(subsystemModel,parentAddress);
  Set<String> originalKeys=new HashSet<String>(parentModel.get(resourceType).keys());
  KernelServices legacyServices=mainServices.getLegacyServices(modelVersion);
  final List<ModelNode> originalAttribute=getLegacyAttribute(legacyServices,parentAddress,attributeName);
  Assert.assertEquals(originalKeys.size(),originalAttribute.size());
  checkSimilarEntries(originalAttribute,parentModel.get(resourceType));
  ModelNode add=Util.createAddOperation(parentAddress.append(PathElement.pathElement(resourceType,"new-added-by-test")));
  add.get(Constants.CODE).set("new-added-by-test");
  add.get(Constants.FLAG).set("required");
  if (resourceType.equals(Constants.MAPPING_MODULE)) {
    add.get(Constants.TYPE).set("role");
  }
  add.get("module-options","password-stacking").set("useFirstPass");
  executeOpsInBothControllers(mainServices,modelVersion,add);
  List<ModelNode> attributes=getLegacyAttribute(legacyServices,parentAddress,attributeName);
  Assert.assertEquals(originalKeys.size() + 1,attributes.size());
  final ModelNode removeAdded=Util.createRemoveOperation(parentAddress.append(PathElement.pathElement(resourceType,"new-added-by-test")));
  executeOpsInBothControllers(mainServices,modelVersion,removeAdded);
  attributes=getLegacyAttribute(legacyServices,parentAddress,attributeName);
  Assert.assertEquals(originalKeys.size(),attributes.size());
  checkSimilarEntries(attributes,parentModel.get(resourceType));
  int i=originalKeys.size();
  for (  String childName : originalKeys) {
    final ModelNode remove=Util.createRemoveOperation(parentAddress.append(PathElement.pathElement(resourceType,childName)));
    ModelTestUtils.checkOutcome(mainServices.executeOperation(remove));
    ModelTestUtils.checkOutcome(mainServices.executeOperation(modelVersion,mainServices.transformOperation(modelVersion,remove)));
    if (--i > 0) {
      legacyServices.executeForResult(Util.createOperation(ReadResourceHandler.DEFINITION,parentAddress));
      attributes=getLegacyAttribute(legacyServices,parentAddress,attributeName);
      Assert.assertEquals(i,attributes.size());
    }
 else {
      legacyServices.executeForFailure(Util.createOperation(ReadResourceHandler.DEFINITION,parentAddress));
      ModelTestUtils.checkOutcome(mainServices.executeOperation(Util.createRemoveOperation(parentAddress)));
    }
  }
  ModelNode addResource=parentModel.clone();
  addResource.remove(resourceType);
  addResource.get(OP).set(ADD);
  addResource.get(OP_ADDR).set(parentAddress.toModelNode());
  ModelTestUtils.checkOutcome(mainServices.executeOperation(addResource));
  ModelTestUtils.checkOutcome(mainServices.executeOperation(modelVersion,mainServices.transformOperation(modelVersion,addResource)));
  executeOpsInBothControllers(mainServices,modelVersion,Util.createOperation(ReadResourceHandler.DEFINITION,parentAddress));
  executeOpsInBothControllers(mainServices,modelVersion,Util.createRemoveOperation(parentAddress));
  addResource=parentModel.clone();
  addResource.remove(attributeName);
  List<Property> children=parentModel.clone().remove(resourceType).asPropertyList();
  addResource.get(OP).set(ADD);
  addResource.get(OP_ADDR).set(parentAddress.toModelNode());
  ModelTestUtils.checkOutcome(mainServices.executeOperation(addResource));
  ModelTestUtils.checkOutcome(mainServices.executeOperation(modelVersion,mainServices.transformOperation(modelVersion,addResource)));
  for (  Property childProp : children) {
    ModelNode addChild=Util.createAddOperation(parentAddress.append(resourceType,childProp.getName()));
    for (    String key : childProp.getValue().keys()) {
      addChild.get(key).set(childProp.getValue().get(key));
    }
    executeOpsInBothControllers(mainServices,modelVersion,addChild);
  }
  executeOpsInBothControllers(mainServices,modelVersion,Util.createOperation(ReadResourceHandler.DEFINITION,parentAddress));
  attributes=getLegacyAttribute(legacyServices,parentAddress,attributeName);
  Assert.assertEquals(originalKeys.size(),attributes.size());
  checkSimilarEntries(attributes,parentModel.get(resourceType));
  executeOpsInBothControllers(mainServices,modelVersion,Util.createRemoveOperation(parentAddress));
}
