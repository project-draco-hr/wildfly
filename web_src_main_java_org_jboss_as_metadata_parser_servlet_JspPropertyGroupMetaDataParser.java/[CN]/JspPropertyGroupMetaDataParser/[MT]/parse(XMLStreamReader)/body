{
  JspPropertyGroupMetaData jspPropertyGroup=new JspPropertyGroupMetaData();
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    final String value=reader.getAttributeValue(i);
    if (reader.getAttributeNamespace(i) != null) {
      continue;
    }
    final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case ID:
{
        jspPropertyGroup.setId(value);
        break;
      }
default :
    throw unexpectedAttribute(reader,i);
}
}
DescriptionGroupMetaData descriptionGroup=new DescriptionGroupMetaData();
while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
if (DescriptionGroupMetaDataParser.parse(reader,descriptionGroup)) {
  if (jspPropertyGroup.getDescriptionGroup() == null) {
    jspPropertyGroup.setDescriptionGroup(descriptionGroup);
  }
  continue;
}
final Element element=Element.forName(reader.getLocalName());
switch (element) {
case URL_PATTERN:
  List<String> urlPatterns=jspPropertyGroup.getUrlPatterns();
if (urlPatterns == null) {
  urlPatterns=new ArrayList<String>();
  jspPropertyGroup.setUrlPatterns(urlPatterns);
}
urlPatterns.add(reader.getElementText());
break;
case EL_IGNORED:
jspPropertyGroup.setElIgnored(reader.getElementText());
break;
case PAGE_ENCODING:
jspPropertyGroup.setPageEncoding(reader.getElementText());
break;
case SCRIPTING_INVALID:
jspPropertyGroup.setScriptingInvalid(reader.getElementText());
break;
case IS_XML:
jspPropertyGroup.setIsXml(reader.getElementText());
break;
case INCLUDE_PRELUDE:
List<String> includePreludes=jspPropertyGroup.getIncludePreludes();
if (includePreludes == null) {
includePreludes=new ArrayList<String>();
jspPropertyGroup.setIncludePreludes(includePreludes);
}
includePreludes.add(reader.getElementText());
break;
case INCLUDE_CODA:
List<String> includeCodas=jspPropertyGroup.getIncludeCodas();
if (includeCodas == null) {
includeCodas=new ArrayList<String>();
jspPropertyGroup.setIncludeCodas(includeCodas);
}
includeCodas.add(reader.getElementText());
break;
case DEFERRED_SYNTAX_ALLOWED_AS_LITERAL:
jspPropertyGroup.setDeferredSyntaxAllowedAsLiteral(reader.getElementText());
break;
case TRIM_DIRECTIVE_WHITESPACES:
jspPropertyGroup.setTrimDirectiveWhitespaces(reader.getElementText());
break;
case DEFAULT_CONTENT_TYPE:
jspPropertyGroup.setDefaultContentType(reader.getElementText());
break;
case BUFFER:
jspPropertyGroup.setBuffer(reader.getElementText());
break;
case ERROR_ON_UNDECLARED_NAMESPACE:
jspPropertyGroup.setErrorOnUndeclaredNamespace(reader.getElementText());
break;
default :
throw unexpectedElement(reader);
}
}
return jspPropertyGroup;
}
