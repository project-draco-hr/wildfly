{
  if (relativeDayOfMonth == null || relativeDayOfMonth.trim().isEmpty()) {
    throw EjbLogger.ROOT_LOGGER.relativeDayOfMonthIsNull();
  }
  String trimmedRelativeDayOfMonth=relativeDayOfMonth.trim();
  if (trimmedRelativeDayOfMonth.equalsIgnoreCase("last")) {
    int lastDayOfCurrentMonth=CalendarUtil.getLastDateOfMonth(cal);
    return lastDayOfCurrentMonth;
  }
  if (this.isValidNegativeDayOfMonth(trimmedRelativeDayOfMonth)) {
    Integer negativeRelativeDayOfMonth=Integer.parseInt(trimmedRelativeDayOfMonth);
    int lastDayOfCurrentMonth=CalendarUtil.getLastDateOfMonth(cal);
    return lastDayOfCurrentMonth + negativeRelativeDayOfMonth;
  }
  if (this.isDayOfWeekBased(trimmedRelativeDayOfMonth)) {
    String[] parts=trimmedRelativeDayOfMonth.split("\\s+");
    String ordinal=parts[0];
    String day=parts[1];
    int dayOfWeek=DAY_OF_MONTH_ALIAS.get(day.toLowerCase(Locale.ENGLISH));
    Integer date=null;
    if (ordinal.equalsIgnoreCase("last")) {
      date=CalendarUtil.getDateOfLastDayOfWeekInMonth(cal,dayOfWeek);
    }
 else {
      int weekNumber=ORDINAL_TO_WEEK_NUMBER_MAPPING.get(ordinal.toLowerCase(Locale.ENGLISH));
      date=CalendarUtil.getNthDayOfMonth(cal,weekNumber,dayOfWeek);
    }
    if (date == null) {
      date=CalendarUtil.getLastDateOfMonth(cal);
    }
    return date;
  }
  throw EjbLogger.ROOT_LOGGER.invalidRelativeValue(relativeDayOfMonth);
}
