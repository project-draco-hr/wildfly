{
  if (this.hasRelativeDayOfMonth() == false) {
    return this.absoluteValues;
  }
  SortedSet<Integer> eligibleDaysOfMonth=new TreeSet<Integer>(this.absoluteValues);
  for (  ScheduleValue relativeValue : this.relativeValues) {
    if (relativeValue instanceof SingleValue) {
      SingleValue singleValue=(SingleValue)relativeValue;
      String value=singleValue.getValue();
      Integer absoluteDayOfMonth=this.getAbsoluteDayOfMonth(cal,value);
      eligibleDaysOfMonth.add(absoluteDayOfMonth);
    }
 else     if (relativeValue instanceof RangeValue) {
      RangeValue range=(RangeValue)relativeValue;
      String start=range.getStart();
      String end=range.getEnd();
      Integer dayOfMonthStart=null;
      if (this.isRelativeValue(start)) {
        dayOfMonthStart=this.getAbsoluteDayOfMonth(cal,start);
      }
 else {
        dayOfMonthStart=this.parseInt(start);
      }
      Integer dayOfMonthEnd=null;
      if (this.isRelativeValue(end)) {
        dayOfMonthEnd=this.getAbsoluteDayOfMonth(cal,end);
      }
 else {
        dayOfMonthEnd=this.parseInt(end);
      }
      this.assertValid(dayOfMonthStart);
      this.assertValid(dayOfMonthEnd);
      if (dayOfMonthStart == dayOfMonthEnd) {
        eligibleDaysOfMonth.add(dayOfMonthEnd);
        continue;
      }
      if (dayOfMonthStart > dayOfMonthEnd) {
        for (int i=dayOfMonthStart; i <= this.getMaxValue(); i++) {
          eligibleDaysOfMonth.add(i);
        }
        for (int i=this.getMinValue(); i <= dayOfMonthEnd; i++) {
          eligibleDaysOfMonth.add(i);
        }
      }
 else {
        for (int i=dayOfMonthStart; i <= dayOfMonthEnd; i++) {
          eligibleDaysOfMonth.add(i);
        }
      }
    }
  }
  return eligibleDaysOfMonth;
}
