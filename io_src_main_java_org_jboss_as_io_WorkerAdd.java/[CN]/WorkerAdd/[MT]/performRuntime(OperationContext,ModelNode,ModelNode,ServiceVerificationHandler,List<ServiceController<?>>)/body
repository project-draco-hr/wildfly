{
  final PathAddress address=PathAddress.pathAddress(operation.get(OP_ADDR));
  final String name=address.getLastElement().getValue();
  final OptionMap.Builder builder=OptionMap.builder();
  for (  OptionAttributeDefinition attr : WorkerResourceDefinition.ATTRIBUTES) {
    Option option=attr.getOption();
    ModelNode value=attr.resolveModelAttribute(context,model);
    if (attr.getType() == ModelType.INT) {
      builder.set((Option<Integer>)option,value.asInt());
    }
 else     if (attr.getType() == ModelType.LONG) {
      builder.set(option,value.asLong());
    }
 else     if (attr.getType() == ModelType.BOOLEAN) {
      builder.set(option,value.asBoolean());
    }
  }
  builder.set(Options.WORKER_NAME,name);
  final WorkerService workerService=new WorkerService(builder.getMap());
  final ServiceBuilder<XnioWorker> serviceBuilder=context.getServiceTarget().addService(IOServices.WORKER.append(name),workerService);
  serviceBuilder.setInitialMode(ServiceController.Mode.ACTIVE);
  final ServiceController<XnioWorker> serviceController=serviceBuilder.install();
  if (newControllers != null) {
    newControllers.add(serviceController);
  }
}
