{
  List<ModelNode> nodes=new ArrayList<ModelNode>();
  requireNoAttributes(reader);
  while (reader.hasNext() && reader.nextTag() != XMLStreamConstants.END_ELEMENT) {
switch (Namespace.forUri(reader.getNamespaceURI())) {
case OSGI_1_0:
{
        final Element element=Element.forName(reader.getLocalName());
        if (element == Element.MODULE) {
          String identifier=null;
          String startlevel=null;
          final int count=reader.getAttributeCount();
          for (int i=0; i < count; i++) {
            requireNoNamespaceAttribute(reader,i);
            final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case IDENTIFIER:
{
                identifier=reader.getAttributeValue(i);
                break;
              }
case STARTLEVEL:
{
              startlevel=reader.getAttributeValue(i);
              break;
            }
default :
          throw unexpectedAttribute(reader,i);
      }
    }
    if (identifier == null)     throw missingRequired(reader,Collections.singleton(Attribute.NAME));
    ModelNode moduleNode=new ModelNode();
    moduleNode.get(OP).set(ADD);
    moduleNode.get(OP_ADDR).set(address).add(Namespace11.Constants.CAPABILITY,identifier);
    if (startlevel != null)     moduleNode.get(Constants.STARTLEVEL).set(startlevel);
    nodes.add(moduleNode);
    requireNoContent(reader);
    break;
  }
 else {
    throw unexpectedElement(reader);
  }
}
default :
throw unexpectedElement(reader);
}
}
return nodes;
}
