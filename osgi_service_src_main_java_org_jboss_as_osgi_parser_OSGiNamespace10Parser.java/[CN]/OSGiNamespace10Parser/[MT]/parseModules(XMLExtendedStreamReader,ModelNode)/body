{
  List<ModelNode> nodes=new ArrayList<ModelNode>();
  requireNoAttributes(reader);
  while (reader.hasNext() && reader.nextTag() != XMLStreamConstants.END_ELEMENT) {
switch (Namespace.forUri(reader.getNamespaceURI())) {
case VERSION_1_0:
{
        final Element element=Element.forName(reader.getLocalName());
        if (element == Element.MODULE) {
          final int count=reader.getAttributeCount();
          ModelNode moduleNode=new ModelNode();
          moduleNode.get(OP).set(ADD);
          for (int i=0; i < count; i++) {
            requireNoNamespaceAttribute(reader,i);
            final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case IDENTIFIER:
{
                moduleNode.get(OP_ADDR).set(address).add(ModelConstants.CAPABILITY,reader.getAttributeValue(i));
                break;
              }
case STARTLEVEL:
{
              FrameworkCapabilityResource.STARTLEVEL.parseAndSetParameter(reader.getAttributeValue(i),moduleNode,reader);
              break;
            }
default :
          throw unexpectedAttribute(reader,i);
      }
    }
    if (!moduleNode.hasDefined(OP_ADDR)) {
      throw missingRequired(reader,Collections.singleton(Attribute.NAME));
    }
    nodes.add(moduleNode);
    requireNoContent(reader);
    break;
  }
 else {
    throw unexpectedElement(reader);
  }
}
default :
throw unexpectedElement(reader);
}
}
return nodes;
}
