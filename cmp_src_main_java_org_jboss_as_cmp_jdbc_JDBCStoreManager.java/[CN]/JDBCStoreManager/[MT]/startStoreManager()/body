{
  tm=getComponent().getTransactionManager();
  cascadeDeleteSet=new TransactionLocal(tm){
    protected Object initialValue(){
      return new CascadeDeleteRegistry();
    }
    public Transaction getTransaction(){
      try {
        return transactionManager.getTransaction();
      }
 catch (      SystemException e) {
        throw CmpMessages.MESSAGES.errorGettingCurrentTransaction(e);
      }
    }
  }
;
  entityBridge.start();
  startCommand=commandFactory.createStartCommand();
  stopCommand=commandFactory.createStopCommand();
  destroyCommand=commandFactory.createDestroyCommand();
  initEntityCommand=commandFactory.createInitEntityCommand();
  findEntityCommand=commandFactory.createFindEntityCommand();
  findEntitiesCommand=commandFactory.createFindEntitiesCommand();
  createEntityCommand=commandFactory.createCreateEntityCommand();
  postCreateEntityCommand=commandFactory.createPostCreateEntityCommand();
  removeEntityCommand=commandFactory.createRemoveEntityCommand();
  loadEntityCommand=commandFactory.createLoadEntityCommand();
  isModifiedCommand=commandFactory.createIsModifiedCommand();
  storeEntityCommand=commandFactory.createStoreEntityCommand();
  activateEntityCommand=commandFactory.createActivateEntityCommand();
  passivateEntityCommand=commandFactory.createPassivateEntityCommand();
  loadRelationCommand=commandFactory.createLoadRelationCommand();
  deleteRelationsCommand=commandFactory.createDeleteRelationsCommand();
  insertRelationsCommand=commandFactory.createInsertRelationsCommand();
  queryManager=new JDBCQueryManager(this);
  startCommand.execute();
  queryManager.start();
  readAheadCache.start();
}
