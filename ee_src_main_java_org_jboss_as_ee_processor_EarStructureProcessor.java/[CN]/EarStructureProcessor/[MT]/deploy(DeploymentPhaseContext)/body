{
  final DeploymentUnit deploymentUnit=phaseContext.getDeploymentUnit();
  final ResourceRoot resourceRoot=phaseContext.getDeploymentUnit().getAttachment(Attachments.DEPLOYMENT_ROOT);
  final VirtualFile virtualFile=resourceRoot.getRoot();
  if (!virtualFile.getName().toLowerCase().endsWith(EAR_EXTENSION)) {
    return;
  }
  markDeployment(deploymentUnit);
  resourceRoot.putAttachment(Attachments.INDEX_RESOURCE_ROOT,false);
  ModuleRootMarker.markRoot(resourceRoot,false);
  try {
    final List<VirtualFile> childArchives=new ArrayList<VirtualFile>(virtualFile.getChildren(CHILD_ARCHIVE_FILTER));
    final VirtualFile libDir=virtualFile.getChild(DEFAULT_LIB_DIR);
    if (libDir.exists()) {
      childArchives.addAll(libDir.getChildren(CHILD_ARCHIVE_FILTER));
    }
    for (    final VirtualFile child : childArchives) {
      final Closeable closable=child.isFile() ? VFS.mountZip(child,child,TempFileProviderService.provider()) : NO_OP_CLOSEABLE;
      final MountHandle mountHandle=new MountHandle(closable);
      final ResourceRoot childResource=new ResourceRoot(child,mountHandle,false);
      if (child.getName().toLowerCase().endsWith(JAR_EXTENSION)) {
        ModuleRootMarker.markRoot(childResource);
      }
 else {
        SubDeploymentMarker.markRoot(childResource);
      }
      deploymentUnit.addToAttachmentList(Attachments.RESOURCE_ROOTS,childResource);
    }
  }
 catch (  IOException e) {
    throw new DeploymentUnitProcessingException("Failed to process children for EAR [" + virtualFile + "]",e);
  }
}
