{
  DeploymentInfo info=deployment.getDeploymentInfo();
  boolean statisticsEnabled=info.getMetricsCollector() != null;
  RecordableInactiveSessionStatistics inactiveSessionStatistics=statisticsEnabled ? new RecordableInactiveSessionStatistics() : null;
  IdentifierFactory<String> factory=new IdentifierFactoryAdapter(info.getSessionIdGenerator());
  LocalContextFactory<LocalSessionContext> localContextFactory=new LocalSessionContextFactory();
  SessionListeners listeners=new SessionListeners();
  SessionExpirationListener expirationListener=new UndertowSessionExpirationListener(deployment,listeners);
  SessionManagerConfiguration<LocalSessionContext> configuration=new SessionManagerConfiguration<LocalSessionContext>(){
    @Override public ServletContext getServletContext(){
      return deployment.getServletContext();
    }
    @Override public IdentifierFactory<String> getIdentifierFactory(){
      return factory;
    }
    @Override public SessionExpirationListener getExpirationListener(){
      return expirationListener;
    }
    @Override public LocalContextFactory<LocalSessionContext> getLocalContextFactory(){
      return localContextFactory;
    }
    @Override public Recordable<ImmutableSession> getInactiveSessionRecorder(){
      return inactiveSessionStatistics;
    }
  }
;
  SessionManager<LocalSessionContext,Batch> manager=this.factory.createSessionManager(configuration);
  Batcher<Batch> batcher=manager.getBatcher();
  info.addThreadSetupAction(new ThreadSetupHandler(){
    @Override public <T,C>Action<T,C> create(    Action<T,C> action){
      return new Action<T,C>(){
        @Override public T call(        HttpServerExchange exchange,        C context) throws Exception {
          Batch batch=batcher.suspendBatch();
          try (BatchContext ctx=batcher.resumeBatch(batch)){
            return action.call(exchange,context);
          }
         }
      }
;
    }
  }
);
  RecordableSessionManagerStatistics statistics=(inactiveSessionStatistics != null) ? new DistributableSessionManagerStatistics(manager,inactiveSessionStatistics) : null;
  return new DistributableSessionManager(info.getDeploymentName(),manager,listeners,statistics);
}
