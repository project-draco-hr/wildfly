{
  super.processModelNode(context,containerName,containerModel,cache,configBuilder);
  ConfigurationBuilder builder=configBuilder.getConfigurationBuilder();
  configBuilder.setConsistentHashStrategy(ConsistentHashStrategy.valueOf(DistributedCacheResourceDefinition.CONSISTENT_HASH_STRATEGY.resolveModelAttribute(context,cache).asString()));
  builder.clustering().hash().numOwners(DistributedCacheResourceDefinition.OWNERS.resolveModelAttribute(context,cache).asInt()).numSegments(DistributedCacheResourceDefinition.SEGMENTS.resolveModelAttribute(context,cache).asInt()).capacityFactor(ModelNodes.asFloat(DistributedCacheResourceDefinition.CAPACITY_FACTOR.resolveModelAttribute(context,cache)));
  long lifespan=DistributedCacheResourceDefinition.L1_LIFESPAN.resolveModelAttribute(context,cache).asLong();
  if (lifespan > 0) {
    builder.clustering().l1().enable().lifespan(lifespan);
  }
 else {
    builder.clustering().l1().disable();
  }
}
