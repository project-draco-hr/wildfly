{
  KernelServices kernelServices=createEmptyRoot();
  ModelNode add=Util.createAddOperation(vaultAddress);
  ModelTestUtils.checkOutcome(kernelServices.executeOperation(add));
  ModelNode writeCode=Util.createOperation(WRITE_ATTRIBUTE_OPERATION,vaultAddress);
  writeCode.get(NAME).set(CODE);
  writeCode.get(VALUE).add("bad");
  kernelServices.executeForFailure(writeCode);
  ModelNode writeOptions=Util.createOperation(WRITE_ATTRIBUTE_OPERATION,vaultAddress);
  writeOptions.get(NAME).set(VAULT_OPTIONS);
  writeOptions.get(VALUE).set("bad");
  kernelServices.executeForFailure(writeOptions);
  writeOptions=Util.createOperation(WRITE_ATTRIBUTE_OPERATION,vaultAddress);
  writeOptions.get(NAME).set(VAULT_OPTIONS);
  writeOptions.get(VALUE).add("one");
  kernelServices.executeForFailure(writeOptions);
  writeOptions=Util.createOperation(WRITE_ATTRIBUTE_OPERATION,vaultAddress);
  writeOptions.get(NAME).set(VAULT_OPTIONS);
  writeOptions.get(VALUE,"one").set("111");
  ModelTestUtils.checkOutcome(kernelServices.executeOperation(writeOptions));
  writeCode=Util.createOperation(WRITE_ATTRIBUTE_OPERATION,vaultAddress);
  writeCode.get(NAME).set(CODE);
  writeCode.get(VALUE).set("thecode");
  ModelTestUtils.checkOutcome(kernelServices.executeOperation(writeCode));
  ModelNode model=readVaultModel(kernelServices);
  Assert.assertEquals("thecode",model.get(CODE).asString());
  Assert.assertEquals(1,model.get(VAULT_OPTIONS).keys().size());
  Assert.assertEquals("111",model.get(VAULT_OPTIONS,"one").asString());
}
