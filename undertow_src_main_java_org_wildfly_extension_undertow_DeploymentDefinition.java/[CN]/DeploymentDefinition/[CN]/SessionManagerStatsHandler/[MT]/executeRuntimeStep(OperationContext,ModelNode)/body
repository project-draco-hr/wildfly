{
  final PathAddress address=PathAddress.pathAddress(operation.get(ModelDescriptionConstants.OP_ADDR));
  final Resource web=context.readResourceFromRoot(address.subAddress(0,address.size()),false);
  final ModelNode subModel=web.getModel();
  final String host=VIRTUAL_HOST.resolveModelAttribute(context,subModel).asString();
  final String path=CONTEXT_ROOT.resolveModelAttribute(context,subModel).asString();
  final String server=SERVER.resolveModelAttribute(context,subModel).asString();
  final ServiceController<?> controller=context.getServiceRegistry(false).getService(UndertowService.deploymentServiceName(server,host,path));
  final UndertowDeploymentService deploymentService=(UndertowDeploymentService)controller.getService();
  SessionStat stat=SessionStat.getStat(operation.require(ModelDescriptionConstants.NAME).asString());
  if (stat == null) {
    context.getFailureDescription().set(UndertowLogger.ROOT_LOGGER.unknownMetric(operation.require(ModelDescriptionConstants.NAME).asString()));
  }
 else {
    ModelNode result=new ModelNode();
    Deployment deployment=deploymentService.getDeployment();
    SessionManager sessionManager=deployment.getSessionManager();
    SessionManagerStatistics sms=sessionManager.getStatistics();
switch (stat) {
case ACTIVE_SESSIONS:
      result.set(sessionManager.getActiveSessions().size());
    break;
case EXPIRED_SESSIONS:
  if (sms == null) {
    result.set(0);
  }
 else {
    result.set((int)sms.getExpiredSessionCount());
  }
break;
case MAX_ACTIVE_SESSIONS:
if (sms == null) {
result.set(0);
}
 else {
result.set((int)sms.getMaxActiveSessions());
}
break;
case SESSIONS_CREATED:
if (sms == null) {
result.set(0);
}
 else {
result.set((int)sms.getCreatedSessionCount());
}
break;
case SESSION_AVG_ALIVE_TIME:
if (sms == null) {
result.set(0);
}
 else {
result.set((int)sms.getAverageSessionAliveTime());
}
break;
case SESSION_MAX_ALIVE_TIME:
if (sms == null) {
result.set(0);
}
 else {
result.set((int)sms.getMaxSessionAliveTime());
}
break;
case REJECTED_SESSIONS:
if (sms == null) {
result.set(0);
}
 else {
result.set((int)sms.getRejectedSessions());
}
break;
default :
throw new IllegalStateException(UndertowLogger.ROOT_LOGGER.unknownMetric(stat));
}
context.getResult().set(result);
}
}
