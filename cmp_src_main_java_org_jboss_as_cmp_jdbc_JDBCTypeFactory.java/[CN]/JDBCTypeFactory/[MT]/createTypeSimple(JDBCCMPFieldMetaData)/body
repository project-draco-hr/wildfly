{
  String columnName=cmpField.getColumnName();
  Class javaType=cmpField.getFieldType();
  JDBCMappingMetaData typeMappingMD=typeMapping.getTypeMappingMetaData(javaType);
  String paramSetter=typeMappingMD.getParamSetter();
  String resultReader=typeMappingMD.getResultReader();
  int jdbcType;
  String sqlType=cmpField.getSQLType();
  if (sqlType != null) {
    jdbcType=cmpField.getJDBCType();
  }
 else {
    sqlType=typeMappingMD.getSqlType();
    jdbcType=typeMappingMD.getJdbcType();
  }
  boolean notNull=cmpField.isNotNull();
  boolean autoIncrement=cmpField.isAutoIncrement();
  Mapper mapper=null;
  JDBCUserTypeMappingMetaData userTypeMapping=(JDBCUserTypeMappingMetaData)userTypeMappings.get(javaType.getName());
  if (userTypeMapping != null) {
    String mappedTypeStr=userTypeMapping.getMappedType();
    try {
      final ClassLoader contextClassLoader=TCLAction.UTIL.getContextClassLoader();
      Class mapperClass=contextClassLoader.loadClass(userTypeMapping.getMapper());
      mapper=(Mapper)mapperClass.newInstance();
      javaType=contextClassLoader.loadClass(mappedTypeStr);
      if (cmpField.getSQLType() == null) {
        JDBCMappingMetaData mappingMD=typeMapping.getTypeMappingMetaData(javaType);
        sqlType=mappingMD.getSqlType();
        jdbcType=mappingMD.getJdbcType();
        paramSetter=mappingMD.getParamSetter();
        resultReader=mappingMD.getResultReader();
      }
    }
 catch (    ClassNotFoundException e) {
      throw MESSAGES.couldNotCreateTypeMapper(userTypeMapping.getMapper(),e);
    }
catch (    Exception e) {
      throw MESSAGES.couldNotCreateTypeMapper(userTypeMapping.getMapper(),e);
    }
  }
  JDBCParameterSetter paramSetterImpl;
  if (paramSetter == null) {
    paramSetterImpl=JDBCUtil.getParameterSetter(jdbcType,javaType);
  }
 else {
    paramSetterImpl=(JDBCParameterSetter)newInstance(paramSetter);
  }
  JDBCResultSetReader resultReaderImpl;
  if (resultReader == null) {
    resultReaderImpl=JDBCUtil.getResultSetReader(jdbcType,javaType);
  }
 else {
    resultReaderImpl=(JDBCResultSetReader)newInstance(resultReader);
  }
  return new JDBCTypeSimple(columnName,javaType,jdbcType,sqlType,notNull,autoIncrement,mapper,paramSetterImpl,resultReaderImpl);
}
