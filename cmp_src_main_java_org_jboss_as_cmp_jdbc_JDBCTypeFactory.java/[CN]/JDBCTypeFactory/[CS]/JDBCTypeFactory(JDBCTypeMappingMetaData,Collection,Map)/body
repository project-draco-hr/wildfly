{
  this.typeMapping=typeMapping;
  this.userTypeMappings=userTypeMappings;
  HashMap valueClassesByType=new HashMap();
  for (Iterator i=valueClasses.iterator(); i.hasNext(); ) {
    JDBCValueClassMetaData valueClass=(JDBCValueClassMetaData)i.next();
    valueClassesByType.put(valueClass.getJavaType(),valueClass);
  }
  for (Iterator i=valueClasses.iterator(); i.hasNext(); ) {
    JDBCValueClassMetaData valueClass=(JDBCValueClassMetaData)i.next();
    JDBCTypeComplex type=createTypeComplex(valueClass,valueClassesByType);
    complexTypes.put(valueClass.getJavaType(),type);
  }
  Iterator i=typeMapping.getMappings().iterator();
  while (i.hasNext()) {
    JDBCMappingMetaData mapping=(JDBCMappingMetaData)i.next();
    String sqlType=mapping.getSqlType();
    int jdbcType=mapping.getJdbcType();
    Class javaType=loadClass(mapping.getJavaType());
    boolean notNull=javaType.isPrimitive();
    boolean autoIncrement=false;
    JDBCParameterSetter paramSetter;
    if (mapping.getParamSetter() != null) {
      paramSetter=(JDBCParameterSetter)newInstance(mapping.getParamSetter());
    }
 else {
      paramSetter=JDBCUtil.getParameterSetter(jdbcType,javaType);
    }
    JDBCResultSetReader resultReader;
    if (mapping.getResultReader() != null) {
      resultReader=(JDBCResultSetReader)newInstance(mapping.getResultReader());
    }
 else {
      resultReader=JDBCUtil.getResultSetReader(jdbcType,javaType);
    }
    JDBCTypeSimple type=new JDBCTypeSimple(null,javaType,jdbcType,sqlType,notNull,autoIncrement,null,paramSetter,resultReader);
    mappedSimpleTypes.put(javaType,type);
  }
}
