{
  String name=null;
  final String myNamespace=reader.getNamespaceURI();
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    if (reader.getAttributeNamespace(i) != null)     throw unexpectedAttribute(reader,i);
switch (Attribute.forName(reader.getAttributeLocalName(i))) {
case NAME:
{
        name=reader.getAttributeValue(i);
        break;
      }
case GROUP_NAME:
{
      groupName=reader.getAttributeValue(i);
      break;
    }
case THREAD_NAME_PATTERN:
{
    threadNamePattern=reader.getAttributeValue(i);
    break;
  }
case PRIORITY:
{
  final int priorityValue=reader.getIntAttributeValue(i);
  if (priorityValue < 1 || priorityValue > 10) {
    throw new XMLStreamException("Out-of-range value for priority attribute");
  }
  priority=Integer.valueOf(priorityValue);
  break;
}
default :
throw unexpectedAttribute(reader,i);
}
}
if (name == null) {
throw missingRequired(reader,Collections.singleton(Attribute.NAME));
}
this.name=name;
boolean gotProperties=false;
while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
if (!myNamespace.equals(reader.getNamespaceURI()) || Element.forName(reader.getLocalName()) != Element.PROPERTIES || gotProperties) {
throw unexpectedElement(reader);
}
gotProperties=true;
propertiesElement=new PropertiesElement(reader);
}
}
