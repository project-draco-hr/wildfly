{
  EmbeddedCacheManagerDefaults defaults=this.configuration.getDefaults();
  GlobalConfiguration global=defaults.getGlobalConfiguration().clone();
  TransportConfiguration transport=this.configuration.getTransportConfiguration();
  FluentGlobalConfiguration.TransportConfig fluentTransport=global.fluent().transport();
  if (transport != null) {
    fluentTransport.transportClass(JGroupsTransport.class);
    Long timeout=transport.getLockTimeout();
    if (timeout != null) {
      fluentTransport.distributedSyncTimeout(timeout.longValue());
    }
    String site=transport.getSite();
    if (site != null) {
      fluentTransport.siteId(site);
    }
    String rack=transport.getRack();
    if (rack != null) {
      fluentTransport.rackId(rack);
    }
    String machine=transport.getMachine();
    if (machine != null) {
      fluentTransport.machineId(machine);
    }
    fluentTransport.nodeName(transport.getEnvironment().getNodeName());
    fluentTransport.clusterName(this.configuration.getName());
    ChannelProvider.init(global,transport.getChannelFactory());
    Executor executor=transport.getExecutor();
    if (executor != null) {
      ExecutorProvider.initTransportExecutor(global,executor);
    }
  }
 else {
    fluentTransport.transportClass(null);
  }
  Executor listenerExecutor=this.configuration.getListenerExecutor();
  if (listenerExecutor != null) {
    ExecutorProvider.initListenerExecutor(global,listenerExecutor);
  }
  ScheduledExecutorService evictionExecutor=this.configuration.getEvictionExecutor();
  if (evictionExecutor != null) {
    ExecutorProvider.initEvictionExecutor(global,evictionExecutor);
  }
  ScheduledExecutorService replicationQueueExecutor=this.configuration.getReplicationQueueExecutor();
  if (replicationQueueExecutor != null) {
    ExecutorProvider.initReplicationQueueExecutor(global,replicationQueueExecutor);
  }
  FluentGlobalConfiguration.GlobalJmxStatisticsConfig globalJmx=fluentTransport.globalJmxStatistics();
  globalJmx.cacheManagerName(this.configuration.getName());
  Configuration defaultConfig=new Configuration();
  FluentConfiguration fluent=defaultConfig.fluent();
  MBeanServer server=this.configuration.getMBeanServer();
  if (server != null) {
    globalJmx.mBeanServerLookup(new MBeanServerProvider(server)).jmxDomain(SERVICE_NAME.getCanonicalName());
    fluent.jmxStatistics();
  }
 else {
    globalJmx.disable();
  }
  FluentConfiguration.TransactionConfig tx=fluent.transaction();
  TransactionManager txManager=this.configuration.getTransactionManager();
  if (txManager != null) {
    tx.transactionManagerLookup(new TransactionManagerProvider(txManager));
  }
  TransactionSynchronizationRegistry txSyncRegistry=this.configuration.getTransactionSynchronizationRegistry();
  if (txSyncRegistry != null) {
    tx.transactionSynchronizationRegistryLookup(new TransactionSynchronizationRegistryProvider(txSyncRegistry));
  }
  EmbeddedCacheManager manager=new DefaultCacheManager(global,defaultConfig,false);
  manager.addListener(this);
  for (  Map.Entry<String,Configuration> entry : this.configuration.getConfigurations().entrySet()) {
    Configuration overrides=entry.getValue();
    Configuration configuration=defaults.getDefaultConfiguration(overrides.getCacheMode()).clone();
    configuration.applyOverrides(overrides);
    manager.defineConfiguration(entry.getKey(),configuration);
  }
  this.container=new DefaultEmbeddedCacheManager(manager,this.configuration.getDefaultCache());
  this.container.start();
}
