{
  CacheConfigurationDependencies cacheConfigurationDependencies=new CacheConfigurationDependencies(containerInjection);
  CacheConfigurationService cacheConfigurationService=new CacheConfigurationService(cacheName,builder,cacheConfigurationDependencies);
  ServiceName containerServiceName=EmbeddedCacheManagerService.getServiceName(containerName);
  ServiceName cacheConfigurationServiceName=CacheConfigurationService.getServiceName(containerName,cacheName);
  ServiceBuilder<Configuration> configBuilder=target.addService(cacheConfigurationServiceName,cacheConfigurationService).addDependency(containerServiceName,EmbeddedCacheManager.class,containerInjection).setInitialMode(ServiceController.Mode.PASSIVE);
  Configuration config=builder.build();
  if (config.invocationBatching().enabled()) {
    cacheConfigurationDependencies.getTransactionManagerInjector().inject(BatchModeTransactionManager.getInstance());
  }
 else   if (config.transaction().transactionMode() == org.infinispan.transaction.TransactionMode.TRANSACTIONAL) {
    configBuilder.addDependency(TxnServices.JBOSS_TXN_TRANSACTION_MANAGER,TransactionManager.class,cacheConfigurationDependencies.getTransactionManagerInjector());
    if (config.transaction().useSynchronization()) {
      configBuilder.addDependency(TxnServices.JBOSS_TXN_SYNCHRONIZATION_REGISTRY,TransactionSynchronizationRegistry.class,cacheConfigurationDependencies.getTransactionSynchronizationRegistryInjector());
    }
  }
  for (  Dependency<?> dependency : dependencies) {
    this.addDependency(configBuilder,dependency);
  }
  if (cacheName.equals(defaultCache)) {
    configBuilder.addAliases(CacheConfigurationService.getServiceName(containerName,null));
  }
  return configBuilder.install();
}
