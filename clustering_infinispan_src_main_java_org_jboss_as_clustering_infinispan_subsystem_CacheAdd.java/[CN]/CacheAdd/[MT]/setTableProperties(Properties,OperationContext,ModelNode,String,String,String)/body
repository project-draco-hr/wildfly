{
  final int batchSize=CommonAttributes.BATCH_SIZE.resolveModelAttribute(context,table).asInt();
  final int fetchSize=CommonAttributes.FETCH_SIZE.resolveModelAttribute(context,table).asInt();
  ModelNode resolvedValue=null;
  final String prefixString=((resolvedValue=CommonAttributes.PREFIX.resolveModelAttribute(context,table)).isDefined()) ? resolvedValue.asString() : defaultTableNamePrefix;
  properties.setProperty("batchSize",Integer.toString(batchSize));
  properties.setProperty("fetchSize",Integer.toString(fetchSize));
  properties.setProperty(tableNamePrefixProperty,prefixString);
  properties.setProperty("idColumnName" + propertySuffix,this.getColumnProperty(table,ModelKeys.ID_COLUMN,ModelKeys.NAME,"id"));
  properties.setProperty("idColumnType" + propertySuffix,this.getColumnProperty(table,ModelKeys.ID_COLUMN,ModelKeys.TYPE,"VARCHAR"));
  properties.setProperty("dataColumnName" + propertySuffix,this.getColumnProperty(table,ModelKeys.DATA_COLUMN,ModelKeys.NAME,"datum"));
  properties.setProperty("dataColumnType" + propertySuffix,this.getColumnProperty(table,ModelKeys.DATA_COLUMN,ModelKeys.TYPE,"BINARY"));
  properties.setProperty("timestampColumnName" + propertySuffix,this.getColumnProperty(table,ModelKeys.TIMESTAMP_COLUMN,ModelKeys.NAME,"version"));
  properties.setProperty("timestampColumnType" + propertySuffix,this.getColumnProperty(table,ModelKeys.TIMESTAMP_COLUMN,ModelKeys.TYPE,"BIGINT"));
}
