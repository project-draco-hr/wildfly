{
  model=Resource.Tools.readModel(context.readResource(PathAddress.EMPTY_ADDRESS));
  Configuration overrides=new Configuration();
  List<AdditionalDependency<?>> additionalDeps=new LinkedList<AdditionalDependency<?>>();
  processModelNode(model,overrides,additionalDeps);
  PathAddress cacheAddress=PathAddress.pathAddress(operation.get(OP_ADDR));
  PathAddress containerAddress=cacheAddress.subAddress(0,cacheAddress.size() - 1);
  String cacheName=cacheAddress.getLastElement().getValue();
  String containerName=containerAddress.getLastElement().getValue();
  ServiceName containerServiceName=EmbeddedCacheManagerService.getServiceName(containerName);
  ServiceName cacheServiceName=containerServiceName.append(cacheName);
  ServiceName cacheConfigurationServiceName=CacheConfigurationService.getServiceName(containerName,cacheName);
  Resource rootResource=context.getRootResource();
  ModelNode container=rootResource.navigate(containerAddress).getModel();
  String defaultCache=container.require(ModelKeys.DEFAULT_CACHE).asString();
  StartMode startMode=model.hasDefined(ModelKeys.START) ? StartMode.valueOf(model.get(ModelKeys.START).asString()) : StartMode.LAZY;
  CacheConfigurationService.CacheConfigurationHelperImpl helper=new CacheConfigurationService.CacheConfigurationHelperImpl(cacheName);
  ServiceTarget target=context.getServiceTarget();
  CacheConfigurationService cacheConfigurationService=new CacheConfigurationService(cacheName,overrides,helper);
  ServiceBuilder<Configuration> configBuilder=target.addService(cacheConfigurationServiceName,cacheConfigurationService).addDependency(containerServiceName,EmbeddedCacheManager.class,helper.getCacheContainerInjector()).addDependency(EmbeddedCacheManagerDefaultsService.SERVICE_NAME,EmbeddedCacheManagerDefaults.class,helper.getDefaultsInjector()).addDependency(ServiceBuilder.DependencyType.OPTIONAL,TxnServices.JBOSS_TXN_TRANSACTION_MANAGER,TransactionManager.class,helper.getTransactionManagerInjector()).addDependency(ServiceBuilder.DependencyType.OPTIONAL,TxnServices.JBOSS_TXN_SYNCHRONIZATION_REGISTRY,TransactionSynchronizationRegistry.class,helper.getTransactionSynchronizationRegistryInjector()).setInitialMode(ServiceController.Mode.ON_DEMAND);
  for (  AdditionalDependency<?> dep : additionalDeps) {
    this.addDependency(configBuilder,dep);
  }
  if (cacheName.equals(defaultCache)) {
    configBuilder.addAliases(CacheConfigurationService.getServiceName(containerName,null));
  }
  newControllers.add(configBuilder.install());
  log.debug("cache configuration service for " + cacheName + " installed for container "+ containerName);
  CacheService<Object,Object> cacheService=new CacheService<Object,Object>(cacheName);
  ServiceBuilder<Cache<Object,Object>> cacheBuilder=target.addService(cacheServiceName,cacheService);
  cacheBuilder.addDependency(containerServiceName,CacheContainer.class,cacheService.getCacheContainerInjector());
  cacheBuilder.addDependency(cacheConfigurationServiceName);
  cacheBuilder.setInitialMode(startMode.getMode());
  if (overrides.getCacheMode().isClustered()) {
    ServiceName transportServiceName=EmbeddedCacheManagerService.getTransportServiceName(containerName);
    cacheBuilder.addDependency(transportServiceName);
    context.getServiceRegistry(true).getRequiredService(transportServiceName).setMode(ServiceController.Mode.ON_DEMAND);
  }
  if (cacheName.equals(defaultCache)) {
    cacheBuilder.addAliases(CacheService.getServiceName(containerName,null));
  }
  if (startMode.getMode() == ServiceController.Mode.ACTIVE) {
    cacheBuilder.addListener(verificationHandler);
  }
  newControllers.add(cacheBuilder.install());
  log.debugf("Cache service for cache %s installed for container %s",cacheName,containerName);
}
