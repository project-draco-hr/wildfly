{
  properties.setProperty("batchSize",Integer.toString(table.isDefined() && table.hasDefined(ModelKeys.BATCH_SIZE) ? table.get(ModelKeys.BATCH_SIZE).asInt() : TableManipulation.DEFAULT_BATCH_SIZE));
  properties.setProperty("fetchSize",Integer.toString(table.isDefined() && table.hasDefined(ModelKeys.FETCH_SIZE) ? table.get(ModelKeys.FETCH_SIZE).asInt() : TableManipulation.DEFAULT_FETCH_SIZE));
  properties.setProperty(tableNamePrefixProperty,table.isDefined() && table.hasDefined(ModelKeys.PREFIX) ? table.get(ModelKeys.PREFIX).asString() : defaultTableNamePrefix);
  properties.setProperty("idColumnName" + propertySuffix,this.getColumnProperty(table,ModelKeys.ID_COLUMN,ModelKeys.NAME,"id"));
  properties.setProperty("idColumnType" + propertySuffix,this.getColumnProperty(table,ModelKeys.ID_COLUMN,ModelKeys.TYPE,"VARCHAR"));
  properties.setProperty("dataColumnName" + propertySuffix,this.getColumnProperty(table,ModelKeys.DATA_COLUMN,ModelKeys.NAME,"datum"));
  properties.setProperty("dataColumnType" + propertySuffix,this.getColumnProperty(table,ModelKeys.DATA_COLUMN,ModelKeys.TYPE,"BINARY"));
  properties.setProperty("timestampColumnName" + propertySuffix,this.getColumnProperty(table,ModelKeys.TIMESTAMP_COLUMN,ModelKeys.NAME,"version"));
  properties.setProperty("timestampColumnType" + propertySuffix,this.getColumnProperty(table,ModelKeys.TIMESTAMP_COLUMN,ModelKeys.TYPE,"BIGINT"));
}
