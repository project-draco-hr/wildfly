{
  Configuration overrides=new Configuration();
  List<AdditionalDependency> additionalDeps=new LinkedList<AdditionalDependency>();
  processCacheModelNode(model,overrides,additionalDeps);
  PathAddress cacheAddress=PathAddress.pathAddress(operation.get(OP_ADDR));
  PathAddress containerAddress=cacheAddress.subAddress(0,cacheAddress.size() - 1);
  String cacheName=cacheAddress.getLastElement().getValue();
  String containerName=containerAddress.getLastElement().getValue();
  ServiceName containerServiceName=EmbeddedCacheManagerService.getServiceName(containerName);
  ServiceName cacheServiceName=containerServiceName.append(cacheName);
  ServiceName cacheConfigurationServiceName=CacheConfigurationService.getServiceName(containerName,cacheName);
  Resource rootResource=context.getRootResource();
  ModelNode container=rootResource.navigate(containerAddress).getModel();
  String defaultCache=container.require(ModelKeys.DEFAULT_CACHE).asString();
  StartMode startMode=operation.hasDefined(ModelKeys.START) ? StartMode.valueOf(operation.get(ModelKeys.START).asString()) : StartMode.LAZY;
  CacheConfigurationService.CacheConfigurationHelperImpl helper=new CacheConfigurationService.CacheConfigurationHelperImpl(cacheName);
  ServiceTarget target=context.getServiceTarget();
  CacheConfigurationService cacheConfigurationService=new CacheConfigurationService(cacheName,overrides,helper);
  ServiceBuilder<Configuration> configBuilder=target.addService(cacheConfigurationServiceName,cacheConfigurationService);
  configBuilder.addDependency(containerServiceName,CacheContainer.class,helper.getCacheContainerInjector());
  configBuilder.addDependency(EmbeddedCacheManagerDefaultsService.SERVICE_NAME,EmbeddedCacheManagerDefaults.class,helper.getDefaultsInjector());
  configBuilder.addDependency(ServiceBuilder.DependencyType.OPTIONAL,TxnServices.JBOSS_TXN_TRANSACTION_MANAGER,TransactionManager.class,helper.getTransactionManagerInjector());
  configBuilder.addDependency(ServiceBuilder.DependencyType.OPTIONAL,TxnServices.JBOSS_TXN_SYNCHRONIZATION_REGISTRY,TransactionSynchronizationRegistry.class,helper.getTransactionSynchronizationRegistryInjector());
  for (  AdditionalDependency dep : additionalDeps) {
    if (dep.hasInjector()) {
      configBuilder.addDependency(dep.getName(),dep.getType(),dep.getTarget());
    }
 else {
      configBuilder.addDependency(dep.getName());
    }
  }
  configBuilder.setInitialMode(ServiceController.Mode.ON_DEMAND);
  if (cacheName.equals(defaultCache)) {
    configBuilder.addAliases(CacheConfigurationService.getServiceName(containerName,null));
  }
  newControllers.add(configBuilder.install());
  log.debug("cache configuration service for " + cacheName + " installed for container "+ containerName);
  CacheService<Object,Object> cacheService=new CacheService<Object,Object>(cacheName);
  ServiceBuilder<Cache<Object,Object>> cacheBuilder=target.addService(cacheServiceName,cacheService);
  cacheBuilder.addDependency(containerServiceName,CacheContainer.class,cacheService.getCacheContainerInjector());
  cacheBuilder.addDependency(cacheConfigurationServiceName);
  cacheBuilder.setInitialMode(startMode.getMode());
  if (cacheName.equals(defaultCache)) {
    cacheBuilder.addAliases(CacheService.getServiceName(containerName,null));
  }
  if (startMode.getMode() == ServiceController.Mode.ACTIVE) {
    cacheBuilder.addListener(verificationHandler);
  }
  newControllers.add(cacheBuilder.install());
  log.debugf("Cache service for cache %s installed for container %s",cacheName,containerName);
}
