{
  String name=null;
  for (int i=0; i < reader.getAttributeCount(); i++) {
    ParseUtils.requireNoNamespaceAttribute(reader,i);
    String value=reader.getAttributeValue(i);
    Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case NAME:
{
        name=value;
        break;
      }
default :
{
      throw ParseUtils.unexpectedAttribute(reader,i);
    }
}
}
if (name == null) {
throw ParseUtils.missingRequired(reader,EnumSet.of(Attribute.NAME));
}
PathAddress stackAddress=subsystemAddress.append(ModelKeys.STACK,name);
final ModelNode stack=Util.createAddOperation(stackAddress);
stack.get(OP_ADDR).set(stackAddress.toModelNode());
if (!reader.hasNext() || (reader.nextTag() == XMLStreamConstants.END_ELEMENT) || Element.forName(reader.getLocalName()) != Element.TRANSPORT) {
throw ParseUtils.missingRequiredElement(reader,Collections.singleton(Element.TRANSPORT));
}
operations.add(stack);
this.parseTransport(reader,stackAddress,operations);
while (reader.hasNext() && (reader.nextTag() != XMLStreamConstants.END_ELEMENT)) {
Element element=Element.forName(reader.getLocalName());
switch (element) {
case PROTOCOL:
{
    this.parseProtocol(reader,stackAddress,operations);
    break;
  }
case RELAY:
{
  this.parseRelay(reader,stackAddress,operations);
  break;
}
default :
{
throw ParseUtils.unexpectedElement(reader);
}
}
}
}
