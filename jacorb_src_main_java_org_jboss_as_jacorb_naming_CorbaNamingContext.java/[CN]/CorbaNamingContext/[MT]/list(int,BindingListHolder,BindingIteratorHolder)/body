{
  if (this.destroyed)   return;
  Binding[] result;
  this.cleanup();
  int size=how_many();
  Iterator<Name> names=this.names.keySet().iterator();
  Iterator<Name> contexts=this.contexts.keySet().iterator();
  if (how_many < size) {
    int how_many_ctr=how_many;
    result=new Binding[how_many];
    for (; names.hasNext() && how_many_ctr > 0; how_many_ctr--)     result[how_many_ctr - 1]=new Binding((names.next()).components(),BindingType.nobject);
    for (; contexts.hasNext() && how_many_ctr > 0; how_many_ctr--)     result[how_many_ctr - 1]=new Binding((contexts.next()).components(),BindingType.ncontext);
    size-=how_many;
    Binding[] rest=new Binding[size];
    for (; names.hasNext() && size > 0; size--)     rest[size - 1]=new Binding((names.next()).components(),BindingType.nobject);
    for (; contexts.hasNext() && size > 0; size--)     rest[size - 1]=new Binding((contexts.next()).components(),BindingType.ncontext);
    org.omg.CORBA.Object o;
    try {
      byte[] oid=rootPoa.activate_object(new BindingIteratorImpl(rest));
      o=rootPoa.id_to_reference(oid);
    }
 catch (    Exception e) {
      JacORBLogger.ROOT_LOGGER.logInternalError(e);
      throw new INTERNAL(e.toString());
    }
    bi.value=BindingIteratorHelper.narrow(o);
  }
 else {
    result=new Binding[size];
    for (; names.hasNext() && size > 0; size--)     result[size - 1]=new Binding((names.next()).components(),BindingType.nobject);
    for (; contexts.hasNext() && size > 0; size--)     result[size - 1]=new Binding((contexts.next()).components(),BindingType.ncontext);
  }
  bl.value=result;
}
