{
  final ParsedEntity metaData=new ParsedEntity();
  for (  Element element : children(reader)) {
switch (element) {
case EJB_NAME:
{
        metaData.entityName=getElementText(reader);
        break;
      }
case DATASOURCE:
{
      metaData.dataSourceName=getElementText(reader);
      break;
    }
case DATASOURCE_MAPPING:
{
    metaData.dataSourceMappingName=getElementText(reader);
    break;
  }
case CREATE_TABLE:
{
  metaData.createTable=Boolean.parseBoolean(getElementText(reader));
  break;
}
case REMOVE_TABLE:
{
metaData.removeTable=Boolean.parseBoolean(getElementText(reader));
break;
}
case POST_TABLE_CREATE:
{
for (String cmd : parsePostTableCreate(reader)) {
metaData.tablePostCreateCmd.add(cmd);
}
break;
}
case READ_ONLY:
{
metaData.readOnly=Boolean.parseBoolean(getElementText(reader));
break;
}
case READ_TIMEOUT:
{
metaData.readTimeOut=Integer.parseInt(getElementText(reader));
break;
}
case ROW_LOCKING:
{
metaData.rowLocking=Boolean.parseBoolean(getElementText(reader));
break;
}
case PK_CONSTRAINT:
{
metaData.primaryKeyConstraint=Boolean.parseBoolean(getElementText(reader));
break;
}
case FK_CONSTRAINT:
{
metaData.preferredMappingStyle=getElementText(reader);
break;
}
case READ_AHEAD:
{
metaData.readAhead=parseReadAhead(reader);
break;
}
case LIST_CACHE_MAX:
{
metaData.listCacheMax=Integer.parseInt(getElementText(reader));
break;
}
case CLEAN_READ_AHEAD:
{
metaData.cleanReadAheadOnLoad=Boolean.parseBoolean(getElementText(reader));
break;
}
case FETCH_SIZE:
{
metaData.fetchSize=Integer.parseInt(getElementText(reader));
break;
}
case TABLE_NAME:
{
metaData.tableName=getElementText(reader);
break;
}
case CMP_FIELD:
{
metaData.cmpFields.add(parseCmpField(reader));
break;
}
case LOAD_GROUPS:
{
metaData.loadGroups.putAll(parseLoadGroups(reader));
break;
}
case EAGER_LOAD_GROUP:
{
metaData.eagerLoadGroup=getElementText(reader);
break;
}
case LAZY_LOAD_GROUPS:
{
metaData.lazyLoadGroups.addAll(parseLazyLoadGroups(reader));
break;
}
case QUERY:
{
metaData.queries.add(parseQuery(reader,classLoader));
break;
}
case UNKNOWN_PK:
{
metaData.upkField=parseUnknownPk(reader,classLoader);
break;
}
case ENTITY_COMMAND:
{
metaData.entityCommand=parseEntityCommand(reader,classLoader);
break;
}
case OPTIMISTIC_LOCKING:
{
metaData.optimisticLocking=parseOptimisticLocking(reader,classLoader);
break;
}
case AUDIT:
{
metaData.audit=parseAudit(reader);
break;
}
case PREFERRED_RELATION:
{
getElementText(reader);
break;
}
case QL_COMPILER:
{
final String qlCompiler=getElementText(reader);
try {
metaData.qlCompiler=classLoader.loadClass(qlCompiler);
}
 catch (ClassNotFoundException e) {
throw new RuntimeException("Failed to load compiler implementation: " + qlCompiler,e);
}
break;
}
case THROW_RUNTIME_EX:
{
metaData.throwRuntimeExceptions=Boolean.valueOf(getElementText(reader));
break;
}
default :
{
throw unexpectedElement(reader);
}
}
}
return metaData;
}
