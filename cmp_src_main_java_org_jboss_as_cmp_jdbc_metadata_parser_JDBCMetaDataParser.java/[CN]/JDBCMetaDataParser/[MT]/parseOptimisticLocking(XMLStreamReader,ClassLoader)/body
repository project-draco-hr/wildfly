{
  final ParsedOptimisticLocking metaData=new ParsedOptimisticLocking();
  ParsedCmpField lockingField=null;
  for (  Element element : children(reader)) {
switch (element) {
case GROUP_NAME:
{
        metaData.lockingStrategy=JDBCOptimisticLockingMetaData.LockingStrategy.FIELD_GROUP_STRATEGY;
        metaData.groupName=getElementText(reader);
        break;
      }
case MODIFIED_STRATEGY:
{
      metaData.lockingStrategy=JDBCOptimisticLockingMetaData.LockingStrategy.MODIFIED_STRATEGY;
      getElementText(reader);
      break;
    }
case READ_STRATEGY:
{
    metaData.lockingStrategy=JDBCOptimisticLockingMetaData.LockingStrategy.READ_STRATEGY;
    getElementText(reader);
    break;
  }
case VERSION_COLUMN:
{
  metaData.lockingStrategy=JDBCOptimisticLockingMetaData.LockingStrategy.VERSION_COLUMN_STRATEGY;
  getElementText(reader);
  break;
}
case TIMESTAMP_COLUMN:
{
metaData.lockingStrategy=JDBCOptimisticLockingMetaData.LockingStrategy.TIMESTAMP_COLUMN_STRATEGY;
getElementText(reader);
break;
}
case KEY_GENERATOR_FACTORY:
{
metaData.lockingStrategy=JDBCOptimisticLockingMetaData.LockingStrategy.KEYGENERATOR_COLUMN_STRATEGY;
metaData.keyGeneratorFactory=getElementText(reader);
break;
}
case FIELD_TYPE:
{
if (lockingField == null) lockingField=new ParsedCmpField();
final String type=getElementText(reader);
try {
lockingField.fieldType=classLoader.loadClass(type);
}
 catch (ClassNotFoundException e) {
throw MESSAGES.failedToLoadFieldType(type,e);
}
break;
}
case FIELD_NAME:
{
if (lockingField == null) lockingField=new ParsedCmpField();
lockingField.fieldName=getElementText(reader);
break;
}
case COLUMN_NAME:
{
if (lockingField == null) lockingField=new ParsedCmpField();
lockingField.columnName=getElementText(reader);
break;
}
case JDBC_TYPE:
{
if (lockingField == null) lockingField=new ParsedCmpField();
lockingField.jdbcType=getJdbcTypeFromName(getElementText(reader));
break;
}
case SQL_TYPE:
{
if (lockingField == null) lockingField=new ParsedCmpField();
lockingField.sqlType=getElementText(reader);
break;
}
default :
{
throw unexpectedElement(reader);
}
}
}
metaData.lockingField=lockingField;
return metaData;
}
