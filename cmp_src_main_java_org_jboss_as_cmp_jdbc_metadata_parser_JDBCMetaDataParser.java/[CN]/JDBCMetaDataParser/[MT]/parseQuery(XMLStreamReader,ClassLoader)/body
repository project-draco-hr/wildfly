{
  final ParsedQuery metaData=new ParsedQuery();
  for (  Element element : children(reader)) {
switch (element) {
case QUERY_METHOD:
{
        for (        Element queryMethodChild : children(reader)) {
switch (queryMethodChild) {
case METHOD_NAME:
{
              metaData.methodName=getElementText(reader);
              break;
            }
case METHOD_PARAMS:
{
            for (            Element paramChild : children(reader)) {
switch (paramChild) {
case METHOD_PARAM:
{
                  metaData.methodParams.add(getElementText(reader));
                  break;
                }
default :
{
                throw unexpectedElement(reader);
              }
          }
        }
        break;
      }
default :
{
      throw unexpectedElement(reader);
    }
}
}
break;
}
case JBOSS_QL:
{
metaData.type=JDBCQueryMetaDataFactory.Type.JBOSS_QL;
metaData.query=getElementText(reader);
break;
}
case DYNAMIC_QL:
{
metaData.type=JDBCQueryMetaDataFactory.Type.DYNAMIC_QL;
getElementText(reader);
break;
}
case DECLARED_QL:
{
metaData.type=JDBCQueryMetaDataFactory.Type.DECLARED_QL;
for (Element declaredChild : children(reader)) {
switch (declaredChild) {
case FROM:
{
metaData.declaredParts.put("from",getElementText(reader));
break;
}
case WHERE:
{
metaData.declaredParts.put("where",getElementText(reader));
break;
}
case ORDER:
{
metaData.declaredParts.put("order",getElementText(reader));
break;
}
case OTHER:
{
metaData.declaredParts.put("other",getElementText(reader));
break;
}
case SELECT:
{
for (Element selectChild : children(reader)) {
switch (selectChild) {
case DISTINCT:
{
metaData.declaredParts.put("distinct",getElementText(reader));
break;
}
case EJB_NAME:
{
metaData.declaredParts.put("ejb-name",getElementText(reader));
break;
}
case FIELD_NAME:
{
metaData.declaredParts.put("field-name",getElementText(reader));
break;
}
case ALIAS:
{
metaData.declaredParts.put("alias",getElementText(reader));
break;
}
case ADDITIONAL_COLUMNS:
{
metaData.declaredParts.put("additional-columns",getElementText(reader));
break;
}
default :
{
throw unexpectedElement(reader);
}
}
}
break;
}
default :
{
throw unexpectedElement(reader);
}
}
}
break;
}
case RAW_SQL:
{
metaData.type=JDBCQueryMetaDataFactory.Type.RAW_SQL;
metaData.query=getElementText(reader);
break;
}
case READ_AHEAD:
{
metaData.readAheadMetaData=parseReadAhead(reader);
break;
}
case QL_COMPILER:
{
final String qlCompiler=getElementText(reader);
try {
metaData.qlCompiler=classLoader.loadClass(qlCompiler);
}
 catch (ClassNotFoundException e) {
throw new RuntimeException("Failed to load compiler implementation: " + qlCompiler,e);
}
break;
}
case LAZY_RESULTSET_LOADING:
{
metaData.lazyResultsetLoading=Boolean.parseBoolean(getElementText(reader));
break;
}
case DESCRIPTION:
{
getElementText(reader);
break;
}
default :
{
throw unexpectedElement(reader);
}
}
}
return metaData;
}
