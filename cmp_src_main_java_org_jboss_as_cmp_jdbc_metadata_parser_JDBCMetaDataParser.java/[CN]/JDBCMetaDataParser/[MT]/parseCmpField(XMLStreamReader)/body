{
  final ParsedCmpField metaData=new ParsedCmpField();
  for (  Element element : children(reader)) {
switch (element) {
case COLUMN_NAME:
{
        metaData.columnName=getElementText(reader);
        break;
      }
case FIELD_NAME:
{
      metaData.fieldName=getElementText(reader);
      break;
    }
case READ_ONLY:
{
    metaData.readOnly=Boolean.parseBoolean(getElementText(reader));
    break;
  }
case READ_TIMEOUT:
{
  metaData.readTimeOut=Integer.parseInt(getElementText(reader));
  break;
}
case NOT_NULL:
{
metaData.notNull=Boolean.parseBoolean(getElementText(reader));
break;
}
case JDBC_TYPE:
{
metaData.jdbcType=getJdbcTypeFromName(getElementText(reader));
break;
}
case SQL_TYPE:
{
metaData.sqlType=getElementText(reader);
break;
}
case PROPERTY:
{
metaData.propertyOverrides.add(parseProperty(reader));
break;
}
case AUTO_INCREMENT:
{
getElementText(reader);
metaData.autoIncrement=true;
break;
}
case DB_INDEX:
{
getElementText(reader);
metaData.genIndex=true;
break;
}
case CHECK_DIRTY_AFTER_GET:
{
metaData.checkDirtyAfterGet=Boolean.parseBoolean(getElementText(reader));
break;
}
case STATE_FACTORY:
{
metaData.stateFactory=getElementText(reader);
break;
}
default :
{
throw unexpectedElement(reader);
}
}
}
return metaData;
}
