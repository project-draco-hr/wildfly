{
  final ParsedCmpField parsedCmpField=new ParsedCmpField();
  for (  Element element : children(reader)) {
switch (element) {
case UNKNOWN_KEY_CLASS:
{
        String type=getElementText(reader);
        try {
          parsedCmpField.unknownPk=classLoader.loadClass(type);
        }
 catch (        ClassNotFoundException e) {
          throw MESSAGES.failedToLoadFieldType(type,e);
        }
        break;
      }
case FIELD_NAME:
{
      parsedCmpField.fieldName=getElementText(reader);
      break;
    }
case READ_ONLY:
{
    parsedCmpField.readOnly=Boolean.parseBoolean(getElementText(reader));
    break;
  }
case READ_TIMEOUT:
{
  parsedCmpField.readTimeOut=Integer.parseInt(getElementText(reader));
  break;
}
case COLUMN_NAME:
{
parsedCmpField.columnName=getElementText(reader);
break;
}
case JDBC_TYPE:
{
parsedCmpField.jdbcType=getJdbcTypeFromName(getElementText(reader));
break;
}
case SQL_TYPE:
{
parsedCmpField.sqlType=getElementText(reader);
break;
}
case AUTO_INCREMENT:
{
parsedCmpField.autoIncrement=Boolean.parseBoolean(getElementText(reader));
break;
}
case KEY_GENERATOR_FACTORY:
{
getElementText(reader);
break;
}
default :
{
throw unexpectedElement(reader);
}
}
}
return parsedCmpField;
}
