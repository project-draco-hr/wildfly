{
  final int count=reader.getAttributeCount();
  final EnumSet<EJB3SubsystemXMLAttribute> required=EnumSet.of(EJB3SubsystemXMLAttribute.CONNECTOR_REF,EJB3SubsystemXMLAttribute.THREAD_POOL_NAME);
  final PathAddress ejb3RemoteServiceAddress=SUBSYSTEM_PATH.append(SERVICE,REMOTE);
  ModelNode operation=Util.createAddOperation(ejb3RemoteServiceAddress);
  for (int i=0; i < count; i++) {
    requireNoNamespaceAttribute(reader,i);
    final String value=reader.getAttributeValue(i);
    final EJB3SubsystemXMLAttribute attribute=EJB3SubsystemXMLAttribute.forName(reader.getAttributeLocalName(i));
    required.remove(attribute);
switch (attribute) {
case CONNECTOR_REF:
      EJB3RemoteResourceDefinition.CONNECTOR_REF.parseAndSetParameter(value,operation,reader);
    break;
case THREAD_POOL_NAME:
  EJB3RemoteResourceDefinition.THREAD_POOL_NAME.parseAndSetParameter(value,operation,reader);
break;
default :
throw unexpectedAttribute(reader,i);
}
}
if (!required.isEmpty()) {
throw missingRequired(reader,required);
}
operations.add(operation);
final Set<EJB3SubsystemXMLElement> parsedElements=new HashSet<EJB3SubsystemXMLElement>();
while (reader.hasNext() && reader.nextTag() != XMLStreamConstants.END_ELEMENT) {
switch (EJB3SubsystemXMLElement.forName(reader.getLocalName())) {
case CHANNEL_CREATION_OPTIONS:
{
if (parsedElements.contains(EJB3SubsystemXMLElement.CHANNEL_CREATION_OPTIONS)) {
throw unexpectedElement(reader);
}
parsedElements.add(EJB3SubsystemXMLElement.CHANNEL_CREATION_OPTIONS);
this.parseChannelCreationOptions(reader,ejb3RemoteServiceAddress,operations);
break;
}
default :
{
throw unexpectedElement(reader);
}
}
}
}
