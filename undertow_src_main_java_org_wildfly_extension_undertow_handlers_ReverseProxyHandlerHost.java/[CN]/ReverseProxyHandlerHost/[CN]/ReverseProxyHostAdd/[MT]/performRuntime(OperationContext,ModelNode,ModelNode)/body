{
  final PathAddress address=PathAddress.pathAddress(operation.require(ModelDescriptionConstants.OP_ADDR));
  final String name=address.getLastElement().getValue();
  final String proxyName=address.getElement(address.size() - 2).getValue();
  final String socketBinding=OUTBOUND_SOCKET_BINDING.resolveModelAttribute(context,model).asString();
  final String scheme=SCHEME.resolveModelAttribute(context,model).asString();
  final String path=PATH.resolveModelAttribute(context,model).asString();
  final String jvmRoute;
  final ModelNode securityRealm=SECURITY_REALM.resolveModelAttribute(context,model);
  final ModelNode sslContext=SSL_CONTEXT.resolveModelAttribute(context,model);
  if (model.hasDefined(Constants.INSTANCE_ID)) {
    jvmRoute=INSTANCE_ID.resolveModelAttribute(context,model).asString();
  }
 else {
    jvmRoute=null;
  }
  ReverseProxyHostService service=new ReverseProxyHostService(scheme,jvmRoute,path);
  ServiceBuilder<ReverseProxyHostService> builder=context.getServiceTarget().addService(SERVICE_NAME.append(proxyName).append(name),service).addDependency(UndertowService.HANDLER.append(proxyName),HttpHandler.class,service.proxyHandler).addDependency(OutboundSocketBinding.OUTBOUND_SOCKET_BINDING_BASE_SERVICE_NAME.append(socketBinding),OutboundSocketBinding.class,service.socketBinding);
  if (sslContext.isDefined()) {
    builder.addDependency(context.getCapabilityServiceName(SSL_CONTEXT_CAPABILITY,sslContext.asString(),SSLContext.class),SSLContext.class,service.sslContext);
  }
  if (securityRealm.isDefined()) {
    SecurityRealm.ServiceUtil.addDependency(builder,service.securityRealm,securityRealm.asString(),false);
  }
  builder.install();
}
