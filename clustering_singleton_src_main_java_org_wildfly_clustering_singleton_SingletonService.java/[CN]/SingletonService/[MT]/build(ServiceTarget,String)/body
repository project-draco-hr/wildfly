{
  final ServiceBuilder<T> serviceBuilder=target.addService(this.targetServiceName,this.service).setInitialMode(ServiceController.Mode.NEVER);
  final ServiceListener<T> listener=new AbstractServiceListener<T>(){
    @Override public void serviceRemoveRequested(    ServiceController<? extends T> controller){
      ServiceController<?> service=controller.getServiceContainer().getService(SingletonService.this.targetServiceName);
      if (service != null) {
        service.setMode(ServiceController.Mode.REMOVE);
      }
    }
  }
;
  final ServiceBuilder<T> singletonBuilder=AsynchronousService.addService(target,this.singletonServiceName,this).addAliases(this.singletonServiceName.append("singleton")).addDependency(ServiceProviderRegistry.SERVICE_NAME.append(container),ServiceProviderRegistry.class,this.registryFactory).addDependency(CommandDispatcherFactory.SERVICE_NAME.append(container),CommandDispatcherFactory.class,this.dispatcherFactory).addListener(listener);
  return new DelegatingServiceBuilder<T>(serviceBuilder,ServiceControllerFactory.SIMPLE){
    @Override public ServiceBuilder<T> addAliases(    ServiceName... aliases){
      singletonBuilder.addAliases(aliases);
      return this;
    }
    @Override public ServiceBuilder<T> setInitialMode(    ServiceController.Mode mode){
      singletonBuilder.setInitialMode(mode);
      return this;
    }
    @Override public ServiceController<T> install(){
      super.install();
      return singletonBuilder.install();
    }
  }
;
}
