{
  File binDir=mkdir(env.getInstalledImage().getJbossHome(),"bin");
  String fileName="standalone.sh";
  File standaloneShellFile=touch(binDir,fileName);
  dump(standaloneShellFile,"original script to run standalone AS7");
  byte[] existingHash=hashFile(standaloneShellFile);
  String patchID=randomString();
  String layerPatchID=randomString();
  File patchDir=mkdir(tempDir,patchID);
  String moduleName=randomString();
  ContentModification moduleAdded=ContentModificationUtils.addModule(patchDir,layerPatchID,moduleName);
  ContentModification fileModified=ContentModificationUtils.modifyMisc(patchDir,patchID,"updated script",standaloneShellFile,"bin","standalone.sh");
  InstalledIdentity installedIdentity=loadInstalledIdentity();
  Patch patch=PatchBuilder.create().setPatchId(patchID).setDescription(randomString()).setIdentity(new IdentityImpl(installedIdentity.getIdentity().getName(),installedIdentity.getIdentity().getVersion())).setUpgrade(productConfig.getProductVersion() + "-Release1").addElement(new PatchElementImpl(layerPatchID).setProvider(new PatchElementProviderImpl(BASE,"1.0.1",false)).setNoUpgrade().addContentModification(moduleAdded)).addContentModification(fileModified).build();
  createPatchXMLFile(patchDir,patch);
  File zippedPatch=createZippedPatchFile(patchDir,patchID);
  Identity identityBeforePatch=loadInstalledIdentity().getIdentity();
  PatchingResult result=executePatch(zippedPatch);
  assertPatchHasBeenApplied(result,patch);
  assertFileExists(standaloneShellFile);
  assertFileContent(fileModified.getItem().getContentHash(),standaloneShellFile);
  InstalledIdentity updatedInstalledIdentity=loadInstalledIdentity();
  File modulePatchDirectory=updatedInstalledIdentity.getLayers().get(0).loadTargetInfo().getDirectoryStructure().getModulePatchDirectory(layerPatchID);
  assertDirExists(modulePatchDirectory);
  assertDefinedModule(modulePatchDirectory,moduleName,moduleAdded.getItem().getContentHash());
  PatchingResult rollbackResult=rollback(patchID);
  tree(env.getInstalledImage().getJbossHome());
  assertPatchHasBeenRolledBack(rollbackResult,identityBeforePatch);
  assertFileExists(standaloneShellFile);
  assertFileContent(existingHash,standaloneShellFile);
}
