{
  final PatchInfo newInfo;
  final Patch rollbackPatch=new RollbackPatch();
  try {
    newInfo=task.finalizePatch(rollbackPatch,this);
  }
 catch (  IOException e) {
    throw new PatchingException(e);
  }
  try {
    persist(newInfo);
    return new PatchingResult(){
      @Override public String getPatchId(){
        return patch.getPatchId();
      }
      @Override public PatchInfo getPatchInfo(){
        return newInfo;
      }
      @Override public void commit(){
        task.commitCallback();
      }
      @Override public void rollback(){
        try {
          undo();
        }
  finally {
          try {
            task.rollbackCallback();
          }
  finally {
            try {
              persist(info);
            }
 catch (            Exception e) {
              throw new RuntimeException(e);
            }
          }
        }
      }
    }
;
  }
 catch (  Exception e) {
    try {
      persist(info);
    }
 catch (    Exception ex) {
      PatchLogger.ROOT_LOGGER.debugf(ex,"failed to persist current version");
    }
    throw new PatchingException(e);
  }
}
