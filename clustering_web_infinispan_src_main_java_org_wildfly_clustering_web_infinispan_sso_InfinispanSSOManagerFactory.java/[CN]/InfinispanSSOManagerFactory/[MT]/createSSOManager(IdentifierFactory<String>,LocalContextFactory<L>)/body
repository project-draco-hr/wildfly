{
  MarshallingContext marshallingContext=new SimpleMarshallingContextFactory().createMarshallingContext(new SimpleMarshallingConfigurationRepository(MarshallingVersion.class,MarshallingVersion.CURRENT,this.configuration.getModuleLoader()),null);
  MarshalledValueFactory<MarshallingContext> marshalledValueFactory=new SimpleMarshalledValueFactory(marshallingContext);
  Marshaller<A,MarshalledValue<A,MarshallingContext>,MarshallingContext> marshaller=new MarshalledValueMarshaller<>(marshalledValueFactory,marshallingContext);
  Cache<Key<String>,?> cache=this.configuration.getCache();
  Configuration config=cache.getCacheConfiguration();
  boolean lockOnRead=config.transaction().transactionMode().isTransactional() && (config.transaction().lockingMode() == LockingMode.PESSIMISTIC) && config.locking().isolationLevel() == IsolationLevel.REPEATABLE_READ;
  SSOFactory<CoarseSSOEntry<A,D,L>,A,D,L> factory=new CoarseSSOFactory<>(cache,marshaller,localContextFactory,lockOnRead);
  IdentifierFactory<String> idFactory=new AffinityIdentifierFactory<>(identifierFactory,cache,this.configuration.getKeyAffinityServiceFactory());
  Batcher<TransactionBatch> batcher=new InfinispanBatcher(cache);
  return new InfinispanSSOManager<>(factory,idFactory,batcher);
}
