{
  MarshallingContext marshallingContext=new SimpleMarshallingContextFactory().createMarshallingContext(new SimpleMarshallingConfigurationRepository(MarshallingVersion.class,MarshallingVersion.CURRENT,this.configuration.getModuleLoader()),null);
  MarshalledValueFactory<MarshallingContext> marshalledValueFactory=new SimpleMarshalledValueFactory(marshallingContext);
  Marshaller<A,MarshalledValue<A,MarshallingContext>,MarshallingContext> marshaller=new MarshalledValueMarshaller<>(marshalledValueFactory,marshallingContext);
  Cache<Key<String>,?> cache=this.configuration.getCache();
  Configuration config=cache.getCacheConfiguration();
  boolean lockOnRead=cache.getCacheConfiguration().transaction().transactionMode().isTransactional() && (config.transaction().lockingMode() == LockingMode.PESSIMISTIC) && config.locking().isolationLevel() == IsolationLevel.REPEATABLE_READ;
  SessionsFactory<Map<D,String>,D> sessionsFactory=new CoarseSessionsFactory<>(this.configuration.getCache());
  SSOFactory<Map.Entry<A,AtomicReference<L>>,Map<D,String>,A,D,L> factory=new InfinispanSSOFactory<>(this.configuration.getCache(),marshaller,localContextFactory,sessionsFactory,lockOnRead);
  IdentifierFactory<String> idFactory=new AffinityIdentifierFactory<>(identifierFactory,cache,this.configuration.getKeyAffinityServiceFactory());
  Batcher<TransactionBatch> batcher=new InfinispanBatcher(cache);
  return new InfinispanSSOManager<>(factory,idFactory,batcher);
}
