{
  String failure=validator.validate(operation);
  if (failure == null) {
    ModelNode opAddr=operation.require(OP_ADDR);
    ModelNode compensatingOp=Util.getResourceRemoveOperation(opAddr);
    PathAddress address=PathAddress.pathAddress(opAddr);
    String name=address.getLastElement().getValue();
    String queueAddress=operation.hasDefined(QUEUE_ADDRESS) ? operation.get(QUEUE_ADDRESS).asString() : null;
    String filter=operation.hasDefined(FILTER) ? operation.get(FILTER).asString() : null;
    Boolean durable=operation.hasDefined(DURABLE) ? operation.get(DURABLE).asBoolean() : null;
    ModelNode model=context.getSubModel();
    model.get(NAME).set(name);
    if (queueAddress != null) {
      model.get(ADDRESS).set(queueAddress);
    }
    if (filter != null) {
      model.get(FILTER).set(filter);
    }
    if (durable != null) {
      model.get(DURABLE).set(durable);
    }
    if (context instanceof RuntimeOperationContext) {
      RuntimeOperationContext updateContext=(RuntimeOperationContext)context;
      final QueueService service=new QueueService(queueAddress,name,filter,durable != null ? durable : true,false);
      updateContext.getServiceTarget().addService(MessagingServices.CORE_QUEUE_BASE.append(name),service).addDependency(MessagingServices.JBOSS_MESSAGING,HornetQServer.class,service.getHornetQService()).addListener(new ResultHandler.ServiceStartListener(resultHandler,compensatingOp)).setInitialMode(Mode.ACTIVE).install();
    }
 else {
      resultHandler.handleResultComplete(compensatingOp);
    }
  }
 else {
    resultHandler.handleFailed(new ModelNode().set(failure));
  }
  return Cancellable.NULL;
}
