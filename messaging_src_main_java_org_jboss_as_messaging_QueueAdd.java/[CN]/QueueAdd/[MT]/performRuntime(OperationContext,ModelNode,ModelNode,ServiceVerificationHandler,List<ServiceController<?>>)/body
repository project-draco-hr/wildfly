{
  PathAddress address=PathAddress.pathAddress(operation.get(OP_ADDR));
  final String queueName=address.getLastElement().getValue();
  final String queueAddress=ADDRESS.validateResolvedOperation(model).asString();
  final ModelNode filterNode=FILTER.validateResolvedOperation(model);
  final String filter=filterNode.isDefined() ? filterNode.asString() : null;
  final boolean durable=DURABLE.validateResolvedOperation(model).asBoolean();
  ServiceRegistry registry=context.getServiceRegistry(true);
  ServiceController<?> hqService=registry.getService(MessagingServices.JBOSS_MESSAGING);
  if (hqService != null) {
    final QueueService service=new QueueService(queueAddress,queueName,filter,durable,false);
    newControllers.add(context.getServiceTarget().addService(MessagingServices.CORE_QUEUE_BASE.append(queueName),service).addDependency(MessagingServices.JBOSS_MESSAGING,HornetQServer.class,service.getHornetQService()).addListener(verificationHandler).setInitialMode(Mode.ACTIVE).install());
  }
 else {
    List<CoreQueueConfiguration> queueConfigs=configuration.getQueueConfigurations();
    CoreQueueConfiguration queueConfig=new CoreQueueConfiguration(queueAddress,queueName,filter,durable);
    queueConfigs.add(queueConfig);
  }
}
