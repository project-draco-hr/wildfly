{
  if (resource == null || registration.isRemote() || registration.isRuntimeOnly() || resource.isProxy() || resource.isRuntime() || registration.isAlias()) {
    return;
  }
  final Set<PathElement> children=registration.getChildAddresses(PathAddress.EMPTY_ADDRESS);
  result.add(createAddOperation(address,resource.getModel(),children));
  for (  final PathElement element : children) {
    if (element.isMultiTarget()) {
      final String childType=element.getKey();
      for (      final Resource.ResourceEntry entry : resource.getChildren(childType)) {
        final ImmutableManagementResourceRegistration childRegistration=registration.getSubModel(PathAddress.pathAddress(PathElement.pathElement(childType,entry.getName())));
        final ModelNode childAddress=address.clone();
        childAddress.add(childType,entry.getName());
        describe(entry,childAddress,result,childRegistration);
      }
    }
 else {
      final Resource child=resource.getChild(element);
      final ImmutableManagementResourceRegistration childRegistration=registration.getSubModel(PathAddress.pathAddress(element));
      final ModelNode childAddress=address.clone();
      childAddress.add(element.getKey(),element.getValue());
      describe(child,childAddress,result,childRegistration);
    }
  }
}
