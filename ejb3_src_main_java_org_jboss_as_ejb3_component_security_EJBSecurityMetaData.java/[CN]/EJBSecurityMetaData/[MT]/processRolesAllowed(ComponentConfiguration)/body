{
  List<ViewConfiguration> views=componentConfiguration.getViews();
  if (views == null || views.isEmpty()) {
    return;
  }
  final EJBComponentDescription ejbComponentDescription=(EJBComponentDescription)componentConfiguration.getComponentDescription();
  for (  ViewConfiguration view : views) {
    final String viewClassName=view.getViewClass().getName();
    final Method[] viewMethods=view.getProxyFactory().getCachedMethods();
    for (    final Method viewMethod : viewMethods) {
      final Method componentMethod=this.findComponentMethod(componentConfiguration,viewMethod);
      final EJBMethodIdentifier ejbMethodIdentifier=EJBMethodIdentifier.fromMethod(componentMethod);
      final Collection<String> rolesAllowed=ejbComponentDescription.getRolesAllowed(viewClassName,ejbMethodIdentifier);
      if (!rolesAllowed.isEmpty()) {
        this.addRolesAllowed(viewClassName,componentMethod,rolesAllowed);
        continue;
      }
      final Class<?> declaringClass=componentMethod.getDeclaringClass();
      final Collection<String> classLevelRolesAllowed=ejbComponentDescription.getRolesAllowedForClass(viewClassName,declaringClass.getName());
      if (!classLevelRolesAllowed.isEmpty()) {
        this.addRolesAllowed(viewClassName,componentMethod,classLevelRolesAllowed);
        continue;
      }
    }
  }
}
