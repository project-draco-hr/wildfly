{
  final Collection<Method> accessDeniedMethods=this.accessDeniedMethodsOnView.get(viewClassName);
  if (accessDeniedMethods != null && accessDeniedMethods.contains(componentMethod)) {
    throw new IllegalStateException("Method " + componentMethod + " for view: "+ viewClassName+ " is already "+ "marked for @DenyAll/exclude-list and hence cannot be marked as @PermitAll");
  }
  Collection<Method> permitAllMethods=this.permitAllMethodsOnView.get(viewClassName);
  if (permitAllMethods == null) {
    permitAllMethods=new HashSet<Method>();
    this.permitAllMethodsOnView.put(viewClassName,permitAllMethods);
  }
  permitAllMethods.add(componentMethod);
}
