{
  final Collection<Method> permitAllMethods=this.permitAllMethodsOnView.get(viewClassName);
  if (permitAllMethods != null && permitAllMethods.contains(componentMethod)) {
    throw new IllegalStateException("Method " + componentMethod + " for view: "+ viewClassName+ " is already "+ "marked for @PermitAll and hence cannot be marked as @DenyAll/exclude-list");
  }
  Collection<Method> accessDeniedMethods=this.accessDeniedMethodsOnView.get(viewClassName);
  if (accessDeniedMethods == null) {
    accessDeniedMethods=new HashSet<Method>();
    this.accessDeniedMethodsOnView.put(viewClassName,accessDeniedMethods);
  }
  accessDeniedMethods.add(componentMethod);
}
