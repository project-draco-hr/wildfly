{
  List<ViewConfiguration> views=componentConfiguration.getViews();
  if (views == null || views.isEmpty()) {
    return;
  }
  final EJBComponentDescription ejbComponentDescription=(EJBComponentDescription)componentConfiguration.getComponentDescription();
  for (  ViewConfiguration view : views) {
    final String viewClassName=view.getViewClass().getName();
    Collection<EJBMethodIdentifier> permitAllMethodsForView=ejbComponentDescription.getPermitAllMethodsForView(viewClassName);
    if (permitAllMethodsForView == null) {
      permitAllMethodsForView=Collections.emptySet();
    }
    final Method[] viewMethods=view.getProxyFactory().getCachedMethods();
    for (    final Method viewMethod : viewMethods) {
      if (!Modifier.isPublic(viewMethod.getModifiers())) {
        continue;
      }
      final Method componentMethod=this.findComponentMethod(componentConfiguration,viewMethod);
      final EJBMethodIdentifier ejbMethodIdentifier=EJBMethodIdentifier.fromMethod(componentMethod);
      if (permitAllMethodsForView.contains(ejbMethodIdentifier)) {
        this.applyPermitAll(viewClassName,componentMethod);
        continue;
      }
      final Class<?> declaringClass=componentMethod.getDeclaringClass();
      if (ejbComponentDescription.isPermitAllApplicableToClass(viewClassName,declaringClass.getName())) {
        this.applyPermitAll(viewClassName,componentMethod);
        continue;
      }
    }
  }
}
