{
  Runtime rt=Runtime.getRuntime();
  int[] adds={0,10,20,30,40,41,42,43,44,45,46,47,48,49};
  for (int i=0; i < adds.length; i++) {
    int toAdd=adds[i];
    System.gc();
    System.runFinalization();
    if (ref.get() == null) {
      break;
    }
    byte[][] bytez=new byte[10000][];
    long avail=rt.freeMemory();
    int create=(int)(avail / 1000 * (950 + toAdd));
    String pct=(95 + (toAdd / 10)) + "." + (toAdd - ((toAdd / 10) * 10));
    int bucket=create / 10000;
    log.info("Filling " + pct + "% of free memory. Free memory="+ avail+ " Total Memory="+ rt.totalMemory()+ " Max Memory="+ rt.maxMemory());
    try {
      for (int j=0; j < bytez.length; j++) {
        bytez[j]=new byte[bucket];
        if (j % 100 == 0 && ref.get() == null) {
          return;
        }
      }
    }
 catch (    Throwable t) {
      bytez=null;
      System.gc();
      System.runFinalization();
      log.warn("Caught throwable filling memory: " + t);
      break;
    }
 finally {
      bytez=null;
      try {
        Thread.sleep(20);
      }
 catch (      InterruptedException ignored) {
        log.warn("Interrupted");
        break;
      }
    }
  }
  try {
    ByteArrayOutputStream byteout=new ByteArrayOutputStream();
    ObjectOutputStream out=new ObjectOutputStream(byteout);
    out.writeObject(new Dummy());
    out.close();
    ByteArrayInputStream byteInput=new ByteArrayInputStream(byteout.toByteArray());
    ObjectInputStream input=new ObjectInputStream(byteInput);
    input.readObject();
    input.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  if (ref.get() != null) {
    System.gc();
    System.runFinalization();
  }
}
