{
  super(reader);
  String name=null;
  String home=null;
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    final String value=reader.getAttributeValue(i);
    if (reader.getAttributeNamespace(i) != null) {
      throw unexpectedAttribute(reader,i);
    }
 else {
      final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case NAME:
{
          name=value;
          break;
        }
case JAVA_HOME:
{
        home=value;
        break;
      }
default :
    throw unexpectedAttribute(reader,i);
}
}
}
if (name == null) {
throw missingRequired(reader,Collections.singleton(Attribute.NAME));
}
this.name=name;
this.javaHome=home;
while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
switch (Namespace.forUri(reader.getNamespaceURI())) {
case DOMAIN_1_0:
{
  final Element element=Element.forName(reader.getLocalName());
switch (element) {
case HEAP:
{
      parseHeap(reader);
      break;
    }
case ENVIRONMENT_VARIABLES:
{
    if (environmentVariables != null) {
      throw new XMLStreamException(element.getLocalName() + " already declared",reader.getLocation());
    }
    this.environmentVariables=new PropertiesElement(reader,Element.VARIABLE,true);
    break;
  }
case SYSTEM_PROPERTIES:
{
  if (systemProperties != null) {
    throw new XMLStreamException(element.getLocalName() + " already declared",reader.getLocation());
  }
  this.systemProperties=new PropertiesElement(reader);
  break;
}
default :
throw unexpectedElement(reader);
}
break;
}
default :
throw unexpectedElement(reader);
}
}
}
