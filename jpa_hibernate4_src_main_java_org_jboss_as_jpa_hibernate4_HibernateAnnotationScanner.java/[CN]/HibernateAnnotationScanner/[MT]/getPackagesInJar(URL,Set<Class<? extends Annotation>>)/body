{
  if (jarToScan == null) {
    throw MESSAGES.nullVar("jarToScan");
  }
  JPA_LOGGER.tracef("getPackagesInJar url=%s annotations=%s",jarToScan.getPath(),annotationsToLookFor);
  Set<Class<?>> resultClasses=new HashSet<Class<?>>();
  PersistenceUnitMetadata pu=PERSISTENCE_UNIT_METADATA_TLS.get();
  if (pu == null) {
    throw MESSAGES.missingPersistenceUnitMetadata();
  }
  if (annotationsToLookFor.size() > 0) {
    resultClasses=getClassesInJar(jarToScan,annotationsToLookFor);
  }
 else {
    if (pu.getAnnotationIndex() != null) {
      Index index=getJarFileIndex(jarToScan,pu);
      if (index == null) {
        JPA_LOGGER.tracef("No classes to scan for annotations in jar '%s' (jars with classes '%s')",jarToScan,pu.getAnnotationIndex().keySet());
        return new HashSet<Package>();
      }
      Collection<ClassInfo> allClasses=index.getKnownClasses();
      for (      ClassInfo classInfo : allClasses) {
        String className=classInfo.name().toString();
        try {
          resultClasses.add(pu.getNewTempClassLoader().loadClass(className));
        }
 catch (        ClassNotFoundException e) {
          JPA_LOGGER.cannotLoadEntityClass(e,className);
        }
catch (        NoClassDefFoundError e) {
          JPA_LOGGER.cannotLoadEntityClass(e,className);
        }
      }
    }
  }
  if (pu.getAnnotationIndex() != null || annotationsToLookFor.size() > 0) {
    Map<String,Package> uniquePackages=new HashMap<String,Package>();
    for (    Class<?> classWithAnnotation : resultClasses) {
      Package classPackage=classWithAnnotation.getPackage();
      if (classPackage != null) {
        JPA_LOGGER.tracef("getPackagesInJar found package %s",classPackage);
        uniquePackages.put(classPackage.getName(),classPackage);
      }
    }
    Set<Package> packages=new HashSet<Package>(uniquePackages.values());
    cachePackages(pu,jarToScan,packages);
    return new HashSet<Package>(packages);
  }
 else {
    return getCachedPackages(pu,jarToScan);
  }
}
