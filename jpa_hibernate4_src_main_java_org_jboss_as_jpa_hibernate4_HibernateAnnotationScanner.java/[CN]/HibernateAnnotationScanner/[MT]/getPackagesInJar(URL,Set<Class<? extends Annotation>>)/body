{
  JPA_LOGGER.tracef("getPackagesInJar url=%s annotations=%s",jartoScan.getPath(),annotationsToLookFor);
  Set<Class<?>> resultClasses=new HashSet<Class<?>>();
  if (annotationsToLookFor.size() > 0) {
    resultClasses=getClassesInJar(jartoScan,annotationsToLookFor);
  }
 else {
    PersistenceUnitMetadata pu=persistenceUnitMetadataTLS.get();
    if (pu == null) {
      throw MESSAGES.missingPersistenceUnitMetadata();
    }
    if (jartoScan == null) {
      throw MESSAGES.nullVar("jarToScan");
    }
    Index index=getJarFileIndex(jartoScan,pu);
    if (index == null) {
      JPA_LOGGER.tracef("No classes to scan for annotations in jar '%s' (jars with classes '%s')",jartoScan,pu.getAnnotationIndex().keySet());
      return new HashSet<Package>();
    }
    Collection<ClassInfo> allClasses=index.getKnownClasses();
    for (    ClassInfo classInfo : allClasses) {
      String className=classInfo.name().toString();
      try {
        resultClasses.add(pu.getClassLoader().loadClass(className));
      }
 catch (      ClassNotFoundException e) {
        throw MESSAGES.cannotLoadEntityClass(e,className);
      }
    }
  }
  Map<String,Package> uniquePackages=new HashMap<String,Package>();
  for (  Class classWithAnnotation : resultClasses) {
    Package classPackage=classWithAnnotation.getPackage();
    if (classPackage != null) {
      JPA_LOGGER.tracef("getPackagesInJar found package %s",classPackage);
      uniquePackages.put(classPackage.getName(),classPackage);
    }
  }
  return new HashSet<Package>(uniquePackages.values());
}
