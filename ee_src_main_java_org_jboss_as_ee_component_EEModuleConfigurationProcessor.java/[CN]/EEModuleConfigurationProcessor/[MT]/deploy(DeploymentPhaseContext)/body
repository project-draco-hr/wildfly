{
  final DeploymentUnit deploymentUnit=phaseContext.getDeploymentUnit();
  final EEModuleDescription moduleDescription=deploymentUnit.getAttachment(Attachments.EE_MODULE_DESCRIPTION);
  final Module module=deploymentUnit.getAttachment(org.jboss.as.server.deployment.Attachments.MODULE);
  if (moduleDescription == null) {
    return;
  }
  if (module == null) {
    return;
  }
  final EEModuleConfiguration moduleConfiguration=new EEModuleConfiguration(moduleDescription,phaseContext,module);
  deploymentUnit.putAttachment(Attachments.EE_MODULE_CONFIGURATION,moduleConfiguration);
  final Collection<EEModuleClassDescription> classDescriptions=moduleDescription.getClassDescriptions();
  if (classDescriptions != null) {
    for (    EEModuleClassDescription classDescription : classDescriptions) {
      Class<?> clazz=null;
      try {
        clazz=Class.forName(classDescription.getClassName(),false,module.getClassLoader());
      }
 catch (      ClassNotFoundException e) {
        throw new DeploymentUnitProcessingException("Failed to load class " + classDescription.getClassName(),e);
      }
      final EEModuleClassConfiguration classConfiguration=new EEModuleClassConfiguration(clazz,moduleConfiguration,classDescription);
      logger.debug("Configuring EE module class: " + clazz);
      for (      ClassConfigurator classConfigurator : classDescription.getConfigurators()) {
        classConfigurator.configure(phaseContext,classDescription,classConfiguration);
      }
      moduleConfiguration.addClassConfiguration(classConfiguration);
    }
  }
  final Collection<ComponentDescription> componentDescriptions=moduleDescription.getComponentDescriptions();
  if (componentDescriptions != null) {
    for (    ComponentDescription componentDescription : componentDescriptions) {
      logger.debug("Configuring component class: " + componentDescription.getComponentClassName() + " named "+ componentDescription.getComponentName());
      final ComponentConfiguration componentConfiguration=componentDescription.createConfiguration(moduleConfiguration);
      for (      ComponentConfigurator componentConfigurator : componentDescription.getConfigurators()) {
        componentConfigurator.configure(phaseContext,componentDescription,componentConfiguration);
      }
      moduleConfiguration.addComponentConfiguration(componentConfiguration);
    }
  }
}
