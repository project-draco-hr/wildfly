{
  final DeploymentUnit deploymentUnit=phaseContext.getDeploymentUnit();
  final Module module=deploymentUnit.getAttachment(org.jboss.as.server.deployment.Attachments.MODULE);
  final EEModuleDescription eeModuleDescription=deploymentUnit.getAttachment(Attachments.EE_MODULE_DESCRIPTION);
  final String poolName=uniqueName(context,jndiName);
  final ContextNames.BindInfo bindInfo=ContextNames.bindInfoForEnvEntry(context.getApplicationName(),context.getModuleName(),context.getComponentName(),!context.isCompUsesModule(),jndiName);
  final DeploymentReflectionIndex reflectionIndex=deploymentUnit.getAttachment(org.jboss.as.server.deployment.Attachments.REFLECTION_INDEX);
  final boolean securityEnabled=phaseContext.getDeploymentUnit().hasAttachment(SecurityAttachments.SECURITY_ENABLED);
  try {
    final Class<?> clazz=module.getClassLoader().loadClass(className);
    clearUnknownProperties(reflectionIndex,clazz,properties);
    populateProperties(reflectionIndex,clazz,properties);
    DsSecurityImpl dsSecurity=new DsSecurityImpl(user,password,null,null);
    if (XADataSource.class.isAssignableFrom(clazz) && transactional) {
      final DsXaPoolImpl xaPool=new DsXaPoolImpl(minPoolSize < 0 ? Defaults.MIN_POOL_SIZE : Integer.valueOf(minPoolSize),initialPoolSize < 0 ? Defaults.INITIAL_POOL_SIZE : Integer.valueOf(initialPoolSize),maxPoolSize < 1 ? Defaults.MAX_POOL_SIZE : Integer.valueOf(maxPoolSize),Defaults.PREFILL,Defaults.USE_STRICT_MIN,Defaults.FLUSH_STRATEGY,Defaults.IS_SAME_RM_OVERRIDE,Defaults.INTERLEAVING,Defaults.PAD_XID,Defaults.WRAP_XA_RESOURCE,Defaults.NO_TX_SEPARATE_POOL,Boolean.FALSE,null,null);
      final ModifiableXaDataSource dataSource=new ModifiableXaDataSource(transactionIsolation(),null,dsSecurity,null,null,null,null,null,null,poolName,true,jndiName,false,false,Defaults.CONNECTABLE,Defaults.TRACKING,Defaults.MCP,Defaults.ENLISTMENT_TRACE,properties,className,null,null,xaPool,null);
      final XaDataSourceService xds=new XaDataSourceService(bindInfo.getBinderServiceName().getCanonicalName(),bindInfo,module.getClassLoader());
      xds.getDataSourceConfigInjector().inject(dataSource);
      startDataSource(xds,bindInfo,eeModuleDescription,context,phaseContext.getServiceTarget(),serviceBuilder,injector,securityEnabled);
    }
 else {
      final DsPoolImpl commonPool=new DsPoolImpl(minPoolSize < 0 ? Defaults.MIN_POOL_SIZE : Integer.valueOf(minPoolSize),initialPoolSize < 0 ? Defaults.INITIAL_POOL_SIZE : Integer.valueOf(initialPoolSize),maxPoolSize < 1 ? Defaults.MAX_POOL_SIZE : Integer.valueOf(maxPoolSize),Defaults.PREFILL,Defaults.USE_STRICT_MIN,Defaults.FLUSH_STRATEGY,Boolean.FALSE,null,null);
      final ModifiableDataSource dataSource=new ModifiableDataSource(url,null,className,null,transactionIsolation(),properties,null,dsSecurity,null,null,null,null,null,false,poolName,true,jndiName,Defaults.SPY,Defaults.USE_CCM,transactional,Defaults.CONNECTABLE,Defaults.TRACKING,Defaults.MCP,Defaults.ENLISTMENT_TRACE,commonPool);
      final LocalDataSourceService ds=new LocalDataSourceService(bindInfo.getBinderServiceName().getCanonicalName(),bindInfo,module.getClassLoader());
      ds.getDataSourceConfigInjector().inject(dataSource);
      startDataSource(ds,bindInfo,eeModuleDescription,context,phaseContext.getServiceTarget(),serviceBuilder,injector,securityEnabled);
    }
  }
 catch (  Exception e) {
    throw new DeploymentUnitProcessingException(e);
  }
}
