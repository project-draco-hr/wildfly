{
  ModelNode storeAddress=cache.get(ModelDescriptionConstants.OP_ADDR).clone();
  storeAddress.add(ModelKeys.REMOTE_STORE,ModelKeys.REMOTE_STORE_NAME);
  storeAddress.protect();
  ModelNode store=Util.getEmptyOperation(ModelDescriptionConstants.ADD,storeAddress);
  for (int i=0; i < reader.getAttributeCount(); i++) {
    String value=reader.getAttributeValue(i);
    Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case CACHE:
{
        store.get(ModelKeys.CACHE).set(value);
        break;
      }
case SOCKET_TIMEOUT:
{
      store.get(ModelKeys.SOCKET_TIMEOUT).set(Long.parseLong(value));
      break;
    }
case TCP_NO_DELAY:
{
    store.get(ModelKeys.TCP_NO_DELAY).set(Boolean.valueOf(value));
    break;
  }
default :
{
  this.parseStoreAttribute(reader,i,attribute,value,store);
}
}
}
while (reader.hasNext() && (reader.nextTag() != XMLStreamConstants.END_ELEMENT)) {
Element element=Element.forName(reader.getLocalName());
switch (element) {
case REMOTE_SERVER:
{
this.parseRemoteServer(reader,store.get(ModelKeys.REMOTE_SERVERS).add());
break;
}
default :
{
this.parseStoreProperty(reader,store);
}
}
}
if (!store.hasDefined(ModelKeys.REMOTE_SERVERS)) {
throw ParseUtils.missingRequired(reader,Collections.singleton(Element.REMOTE_SERVER));
}
operations.add(store);
}
