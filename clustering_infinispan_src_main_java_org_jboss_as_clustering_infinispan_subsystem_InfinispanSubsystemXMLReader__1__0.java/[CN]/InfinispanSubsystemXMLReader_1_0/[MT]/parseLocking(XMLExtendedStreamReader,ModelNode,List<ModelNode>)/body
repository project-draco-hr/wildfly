{
  ModelNode lockingAddress=cache.get(ModelDescriptionConstants.OP_ADDR).clone();
  lockingAddress.add(ModelKeys.LOCKING,ModelKeys.LOCKING_NAME);
  lockingAddress.protect();
  ModelNode locking=Util.getEmptyOperation(ModelDescriptionConstants.ADD,lockingAddress);
  for (int i=0; i < reader.getAttributeCount(); i++) {
    String value=reader.getAttributeValue(i);
    Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case ISOLATION:
{
        try {
          IsolationLevel level=IsolationLevel.valueOf(value);
          CommonAttributes.ISOLATION.parseAndSetParameter(level.name(),locking,reader);
        }
 catch (        IllegalArgumentException e) {
          throw ParseUtils.invalidAttributeValue(reader,i);
        }
        break;
      }
case STRIPING:
{
      CommonAttributes.STRIPING.parseAndSetParameter(value,locking,reader);
      break;
    }
case ACQUIRE_TIMEOUT:
{
    CommonAttributes.ACQUIRE_TIMEOUT.parseAndSetParameter(value,locking,reader);
    break;
  }
case CONCURRENCY_LEVEL:
{
  CommonAttributes.CONCURRENCY_LEVEL.parseAndSetParameter(value,locking,reader);
  break;
}
default :
{
throw ParseUtils.unexpectedAttribute(reader,i);
}
}
}
ParseUtils.requireNoContent(reader);
operations.add(locking);
}
