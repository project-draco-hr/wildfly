{
  ModelNode cache=Util.getEmptyOperation(ModelDescriptionConstants.ADD,null);
  List<ModelNode> additionalConfigurationOperations=new ArrayList<ModelNode>();
  for (int i=0; i < reader.getAttributeCount(); i++) {
    String value=reader.getAttributeValue(i);
    Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case OWNERS:
{
        cache.get(ModelKeys.OWNERS).set(Integer.parseInt(value));
        break;
      }
case VIRTUAL_NODES:
{
      cache.get(ModelKeys.VIRTUAL_NODES).set(Integer.parseInt(value));
      break;
    }
case L1_LIFESPAN:
{
    cache.get(ModelKeys.L1_LIFESPAN).set(Long.parseLong(value));
    break;
  }
default :
{
  this.parseClusteredCacheAttribute(reader,i,attribute,value,cache);
}
}
}
if (!cache.hasDefined(ModelKeys.NAME)) {
throw ParseUtils.missingRequired(reader,EnumSet.of(Attribute.NAME));
}
if (!cache.hasDefined(ModelKeys.MODE)) {
throw ParseUtils.missingRequired(reader,EnumSet.of(Attribute.MODE));
}
addCacheNameToAddress(cache,containerAddress,ModelKeys.DISTRIBUTED_CACHE);
while (reader.hasNext() && (reader.nextTag() != XMLStreamConstants.END_ELEMENT)) {
Element element=Element.forName(reader.getLocalName());
switch (element) {
case REHASHING:
{
this.parseRehashing(reader,cache,additionalConfigurationOperations);
break;
}
default :
{
this.parseCacheElement(reader,element,cache,additionalConfigurationOperations);
}
}
}
operations.add(cache);
for (ModelNode additionalOperation : additionalConfigurationOperations) {
operations.add(additionalOperation);
}
}
