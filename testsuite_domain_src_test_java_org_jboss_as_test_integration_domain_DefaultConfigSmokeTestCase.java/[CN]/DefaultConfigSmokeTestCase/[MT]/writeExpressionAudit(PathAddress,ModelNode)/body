{
  String paString=getPaString(pa);
  if (resourceDescription.hasDefined(ModelDescriptionConstants.ATTRIBUTES)) {
    for (    Property property : resourceDescription.get(ModelDescriptionConstants.ATTRIBUTES).asPropertyList()) {
      ModelNode attrdesc=property.getValue();
      if (!attrdesc.hasDefined(ModelDescriptionConstants.STORAGE) || AttributeAccess.Storage.CONFIGURATION.name().toLowerCase().equals(attrdesc.get(ModelDescriptionConstants.STORAGE).asString().toLowerCase())) {
        StringBuilder sb=new StringBuilder(paString);
        sb.append(",").append(property.getName());
        sb.append(",").append(attrdesc.get(ModelDescriptionConstants.TYPE).asString());
        sb.append(",").append(attrdesc.get(ModelDescriptionConstants.EXPRESSIONS_ALLOWED).asBoolean(false));
        sb.append(",").append(attrdesc.get(ModelDescriptionConstants.DESCRIPTION).asString());
        System.out.println(sb.toString());
      }
    }
  }
  if (resourceDescription.hasDefined(ModelDescriptionConstants.CHILDREN)) {
    for (    Property childTypeProp : resourceDescription.get(ModelDescriptionConstants.CHILDREN).asPropertyList()) {
      String childType=childTypeProp.getName();
      ModelNode childTypeDesc=childTypeProp.getValue();
      if (childTypeDesc.hasDefined(ModelDescriptionConstants.MODEL_DESCRIPTION)) {
        for (        Property childInstanceProp : childTypeDesc.get(ModelDescriptionConstants.MODEL_DESCRIPTION).asPropertyList()) {
          PathAddress childAddress=pa.append(childType,childInstanceProp.getName());
          writeExpressionAudit(childAddress,childInstanceProp.getValue());
        }
      }
    }
  }
}
