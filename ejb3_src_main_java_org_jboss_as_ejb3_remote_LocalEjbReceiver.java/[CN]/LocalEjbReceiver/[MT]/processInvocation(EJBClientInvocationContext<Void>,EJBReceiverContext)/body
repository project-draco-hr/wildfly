{
  final EjbDeploymentInformation ejb=findBean(invocation.getAppName(),invocation.getModuleName(),invocation.getDistinctName(),invocation.getBeanName());
  final EJBComponent ejbComponent=ejb.getEjbComponent();
  final Class<?> viewClass=invocation.getViewClass();
  final ComponentView view=ejb.getView(viewClass.getName());
  if (view == null) {
    throw new RuntimeException("Could not find view " + viewClass + " for ejb "+ ejb.getEjbName());
  }
  final Method method=view.getMethod(invocation.getInvokedMethod().getName(),DescriptorUtils.methodDescriptor(invocation.getInvokedMethod()));
  final boolean async=view.isAsynchronous(method);
  final Object[] parameters;
  if (invocation.getParameters() == null) {
    parameters=EMPTY_OBJECT_ARRAY;
  }
 else {
    parameters=new Object[invocation.getParameters().length];
    for (int i=0; i < parameters.length; ++i) {
      parameters[i]=clone(method.getParameterTypes()[i],invocation.getParameters()[i],allowPassByReference);
    }
  }
  final InterceptorContext context=new InterceptorContext();
  context.setParameters(parameters);
  context.setMethod(method);
  context.setTarget(invocation.getInvokedProxy());
  context.setContextData(new HashMap<String,Object>());
  context.putPrivateData(Component.class,ejbComponent);
  context.putPrivateData(ComponentView.class,view);
  if (async) {
    if (ejbComponent instanceof SessionBeanComponent) {
      final SessionBeanComponent component=(SessionBeanComponent)ejbComponent;
      final CancellationFlag flag=new CancellationFlag();
      final AsyncInvocationTask task=new AsyncInvocationTask(flag){
        @Override protected Object runInvocation() throws Exception {
          return view.invoke(context);
        }
      }
;
      context.putPrivateData(CancellationFlag.class,flag);
      component.getAsynchronousExecutor().submit(task);
      return new AsyncResult<Object>(task);
    }
 else {
      throw new RuntimeException("Cannot perform asynchronous local invocation for component that is not a session bean");
    }
  }
 else {
    final Object result=view.invoke(context);
    final Object clonedResult=clone(method.getReturnType(),result,true);
    return new AsyncResult<Object>(clonedResult);
  }
}
