{
  if (cmdLine.hasOption(HELP_PARAM)) {
    printUsage();
    return 100;
  }
  String keystoreURL=cmdLine.getOptionValue(KEYSTORE_PARAM,"vault.keystore");
  String keystorePassword=cmdLine.getOptionValue(KEYSTORE_PASSWORD_PARAM,"");
  String encryptionDirectory=cmdLine.getOptionValue(ENC_DIR_PARAM,"vault");
  String salt=cmdLine.getOptionValue(SALT_PARAM,"12345678");
  int iterationCount=Integer.parseInt(cmdLine.getOptionValue(ITERATION_PARAM,"23"));
  boolean createKeyStore=cmdLine.hasOption(CREATE_KEYSTORE_PARAM);
  nonInteractiveSession=new VaultSession(keystoreURL,keystorePassword,encryptionDirectory,salt,iterationCount,createKeyStore);
  nonInteractiveSession.startVaultSession(cmdLine.getOptionValue("alias","vault"));
  String vaultBlock=cmdLine.getOptionValue(VAULT_BLOCK_PARAM,"vb");
  String attributeName=cmdLine.getOptionValue(ATTRIBUTE_PARAM,"password");
  if (cmdLine.hasOption(CHECK_SEC_ATTR_EXISTS_PARAM)) {
    if (nonInteractiveSession.checkSecuredAttribute(vaultBlock,attributeName)) {
      System.out.println(SecurityLogger.ROOT_LOGGER.cmdLineSecuredAttributeAlreadyExists());
      return 0;
    }
 else {
      System.out.println(SecurityLogger.ROOT_LOGGER.cmdLineSecuredAttributeDoesNotExist());
      return 5;
    }
  }
  if (cmdLine.hasOption(REMOVE_SEC_ATTR_PARAM)) {
    if (nonInteractiveSession.removeSecuredAttribute(vaultBlock,attributeName)) {
      System.out.println(SecurityLogger.ROOT_LOGGER.messageAttributeRemovedSuccessfuly(VaultSession.blockAttributeDisplayFormat(vaultBlock,attributeName)));
      return 0;
    }
 else {
      System.out.println(SecurityLogger.ROOT_LOGGER.messageAttributeNotRemoved(VaultSession.blockAttributeDisplayFormat(vaultBlock,attributeName)));
      return 6;
    }
  }
 else   if (cmdLine.hasOption(SEC_ATTR_VALUE_PARAM)) {
    String password=cmdLine.getOptionValue(SEC_ATTR_VALUE_PARAM,"password");
    nonInteractiveSession.addSecuredAttributeWithDisplay(vaultBlock,attributeName,password.toCharArray());
    summary();
    return 0;
  }
 else {
    System.out.println(SecurityLogger.ROOT_LOGGER.actionNotSpecified());
    return -1;
  }
}
