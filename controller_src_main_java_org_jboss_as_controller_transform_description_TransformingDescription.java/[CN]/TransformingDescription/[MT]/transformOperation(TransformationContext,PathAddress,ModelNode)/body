{
switch (discardPolicy) {
case REJECT_AND_WARN:
    return new TransformedOperation(operation,new OperationRejectionPolicy(){
      @Override public boolean rejectOperation(      ModelNode preparedResult){
        return true;
      }
      @Override public String getFailureDescription(){
        return ControllerLogger.ROOT_LOGGER.rejectResourceOperationTransformation(address,operation);
      }
    }
,OperationResultTransformer.ORIGINAL_RESULT);
case DISCARD_AND_WARN:
case SILENT:
  return OperationTransformer.DISCARD.transformOperation(ctx,address,operation);
}
final Iterator<TransformationRule> iterator=rules.iterator();
final TransformationRule.ChainedOperationContext context=new TransformationRule.ChainedOperationContext(ctx){
@Override void invokeNext(OperationTransformer.TransformedOperation transformedOperation) throws OperationFailedException {
  recordTransformedOperation(transformedOperation);
  if (iterator.hasNext()) {
    final TransformationRule next=iterator.next();
    next.transformOperation(transformedOperation.getTransformedOperation(),address,this);
  }
}
}
;
final TransformationRule first=new AttributeTransformationRule(attributeTransformations);
first.transformOperation(operation,address,context);
return context.createOp();
}
