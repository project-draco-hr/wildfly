{
  final String attributeName=operation.require(ModelDescriptionConstants.NAME).asString();
  final AttributeTransformationDescription description=attributeTransformations.get(attributeName);
  if (description == null) {
    return new TransformedOperation(operation,OperationResultTransformer.ORIGINAL_RESULT);
  }
  final ModelNode originalModel=operation.clone();
  TransformationRule.AbstractTransformationContext ctx=new TransformationRule.AbstractTransformationContext(context){
    @Override protected TransformationContext getContext(){
      return super.getContext();
    }
  }
;
  originalModel.protect();
  if (description.shouldDiscard(UNDEFINED,originalModel,ctx)) {
    return OperationTransformer.DISCARD.transformOperation(context,address,operation);
  }
  return new TransformedOperation(operation,DEFAULT_REJECTION_POLICY,OperationResultTransformer.ORIGINAL_RESULT);
}
