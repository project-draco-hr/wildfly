{
  final String attributeName=operation.require(ModelDescriptionConstants.NAME).asString();
  final AttributeTransformationDescription description=attributeTransformations.get(attributeName);
  if (description == null) {
    return new TransformedOperation(operation,OperationResultTransformer.ORIGINAL_RESULT);
  }
  final ModelNode originalModel=operation.clone();
  TransformationRule.AbstractChainedContext ctx=new TransformationRule.AbstractChainedContext(context){
    @Override protected TransformationContext getContext(){
      return super.getContext();
    }
  }
;
  ctx.setImmutableResource(true);
  try {
    final ModelNode value=new ModelNode();
    description.convertValue(address,value,operation,ctx);
    if (value.isDefined()) {
      final ModelNode writeAttribute=new ModelNode();
      writeAttribute.get(OP).set(WRITE_ATTRIBUTE_OPERATION);
      writeAttribute.get(OP_ADDR).set(address.toModelNode());
      writeAttribute.get(NAME).set(attributeName);
      writeAttribute.get(VALUE).set(value);
      return new TransformedOperation(writeAttribute,OperationResultTransformer.ORIGINAL_RESULT);
    }
    if (description.shouldDiscard(address,UNDEFINED,originalModel,ctx)) {
      return OperationTransformer.DISCARD.transformOperation(context,address,operation);
    }
  }
  finally {
    ctx.setImmutableResource(false);
  }
  return new TransformedOperation(operation,DEFAULT_REJECTION_POLICY,OperationResultTransformer.ORIGINAL_RESULT);
}
