{
  ScheduleExpression schedule=this.getTimezoneSpecificScheduleExpression();
  schedule.month("*");
  schedule.dayOfMonth("1");
  schedule.hour("0-12");
  schedule.minute("0/5");
  schedule.second("0");
  Calendar start=Calendar.getInstance();
  start.add(Calendar.DAY_OF_MONTH,1);
  schedule.start(start.getTime());
  CalendarBasedTimeout calendarTimeout=new CalendarBasedTimeout(schedule);
  Calendar firstTimeout=calendarTimeout.getFirstTimeout();
  if (firstTimeout.get(Calendar.DAY_OF_MONTH) != 1 || firstTimeout.get(Calendar.HOUR_OF_DAY) != 0 || firstTimeout.get(Calendar.MINUTE) != 0) {
    Assert.fail("Unexpected first schedule if start date is in the future, must be at 1st of month 00:00 but is " + firstTimeout.get(Calendar.DAY_OF_MONTH) + ". "+ firstTimeout.get(Calendar.HOUR_OF_DAY)+ ":"+ firstTimeout.get(Calendar.MINUTE)+ "      "+ firstTimeout);
  }
}
