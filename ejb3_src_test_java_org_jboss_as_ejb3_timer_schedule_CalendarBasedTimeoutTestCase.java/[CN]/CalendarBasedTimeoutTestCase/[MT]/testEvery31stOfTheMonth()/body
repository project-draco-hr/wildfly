{
  ScheduleExpression every31st9_30_15_AM=this.getTimezoneSpecificScheduleExpression();
  every31st9_30_15_AM.dayOfMonth(31);
  every31st9_30_15_AM.hour(9);
  every31st9_30_15_AM.minute("30");
  every31st9_30_15_AM.second(15);
  CalendarBasedTimeout calendarTimeout=new CalendarBasedTimeout(every31st9_30_15_AM);
  Calendar firstTimeout=calendarTimeout.getFirstTimeout();
  Assert.assertNotNull("first timeout is null",firstTimeout);
  Date firstTimeoutDate=firstTimeout.getTime();
  int minute=firstTimeout.get(Calendar.MINUTE);
  int second=firstTimeout.get(Calendar.SECOND);
  int hour=firstTimeout.get(Calendar.HOUR_OF_DAY);
  int amOrPm=firstTimeout.get(Calendar.AM_PM);
  int dayOfMonth=firstTimeout.get(Calendar.DAY_OF_MONTH);
  Assert.assertEquals("Unexpected second in first timeout " + firstTimeoutDate,15,second);
  Assert.assertEquals("Unexpected minute in first timeout " + firstTimeoutDate,30,minute);
  Assert.assertEquals("Unexpected hour in first timeout " + firstTimeoutDate,9,hour);
  Assert.assertEquals("Unexpected AM/PM in first timeout ",Calendar.AM,amOrPm);
  Assert.assertEquals("Unexpected day of month in first timeout ",31,dayOfMonth);
  Calendar previousTimeout=firstTimeout;
  for (int i=1; i <= 180; i++) {
    Calendar nextTimeout=calendarTimeout.getNextTimeout(previousTimeout);
    Assert.assertNotNull("Next timeout is null",nextTimeout);
    Assert.assertNotNull("Next timeout is *before* the current time",nextTimeout.after(previousTimeout));
    Date nextTimeoutDate=nextTimeout.getTime();
    logger.debug("First timeout was: " + firstTimeoutDate + " Previous timeout was: "+ previousTimeout.getTime()+ " Next timeout is "+ nextTimeoutDate);
    int nextMinute=nextTimeout.get(Calendar.MINUTE);
    int nextSecond=nextTimeout.get(Calendar.SECOND);
    int nextHour=nextTimeout.get(Calendar.HOUR_OF_DAY);
    int nextAmOrPm=nextTimeout.get(Calendar.AM_PM);
    int nextDayOfMonth=nextTimeout.get(Calendar.DAY_OF_MONTH);
    Assert.assertEquals("Unexpected second in next timeout " + nextTimeoutDate,15,nextSecond);
    Assert.assertEquals("Unexpected minute in next timeout " + nextTimeoutDate,30,nextMinute);
    Assert.assertEquals("Unexpected hour in next timeout " + nextTimeoutDate,9,nextHour);
    Assert.assertEquals("Unexpected AM/PM in next timeout ",Calendar.AM,nextAmOrPm);
    Assert.assertEquals("Unexpected day of month in next timeout ",31,nextDayOfMonth);
    previousTimeout=nextTimeout;
  }
}
