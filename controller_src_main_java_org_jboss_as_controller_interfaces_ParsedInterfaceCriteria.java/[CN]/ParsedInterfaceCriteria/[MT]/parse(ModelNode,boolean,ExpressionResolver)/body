{
  if (model.getType() != ModelType.OBJECT) {
    return new ParsedInterfaceCriteria(MESSAGES.illegalInterfaceCriteria(model.getType(),ModelType.OBJECT));
  }
  final ModelNode subModel=model.clone();
  subModel.remove(ModelDescriptionConstants.OP);
  subModel.remove(ModelDescriptionConstants.OP_ADDR);
  subModel.remove(ModelDescriptionConstants.OPERATION_HEADERS);
  final ParsedInterfaceCriteria parsed;
  if (subModel.hasDefined(ANY_ADDRESS) && subModel.get(ANY_ADDRESS).asBoolean(false)) {
    parsed=ParsedInterfaceCriteria.ANY;
  }
 else   if (subModel.hasDefined(ANY_IPV4_ADDRESS) && subModel.get(ANY_IPV4_ADDRESS).asBoolean(false)) {
    parsed=ParsedInterfaceCriteria.V4;
  }
 else   if (subModel.hasDefined(ANY_IPV6_ADDRESS) && subModel.get(ANY_IPV6_ADDRESS).asBoolean(false)) {
    parsed=ParsedInterfaceCriteria.V6;
  }
 else {
    try {
      final List<Property> nodes=subModel.asPropertyList();
      final Set<InterfaceCriteria> criteriaSet=new HashSet<InterfaceCriteria>();
      for (      final Property property : nodes) {
        final InterfaceCriteria criterion=parseCriteria(property,false,expressionResolver);
        if (criterion instanceof WildcardInetAddressInterfaceCriteria) {
          if (nodes.size() > 1) {
            SERVER_LOGGER.wildcardAddressDetected();
          }
          WildcardInetAddressInterfaceCriteria wc=(WildcardInetAddressInterfaceCriteria)criterion;
switch (wc.getVersion()) {
case V4:
            return ParsedInterfaceCriteria.V4;
case V6:
          return ParsedInterfaceCriteria.V6;
default :
        return ParsedInterfaceCriteria.ANY;
    }
  }
 else   if (criterion != null) {
    criteriaSet.add(criterion);
  }
}
String validation=new CriteriaValidator(criteriaSet).validate();
parsed=validation == null ? new ParsedInterfaceCriteria(criteriaSet) : new ParsedInterfaceCriteria(validation);
}
 catch (ParsingException p) {
return new ParsedInterfaceCriteria(p.msg);
}
catch (OperationFailedException e) {
return new ParsedInterfaceCriteria(e.getMessage());
}
}
if (specified && parsed.getFailureMessage() == null && !parsed.isAnyLocal() && !parsed.isAnyLocalV4() && !parsed.isAnyLocalV6() && parsed.getCriteria().size() == 0) {
return new ParsedInterfaceCriteria(MESSAGES.noInterfaceCriteria());
}
return parsed;
}
