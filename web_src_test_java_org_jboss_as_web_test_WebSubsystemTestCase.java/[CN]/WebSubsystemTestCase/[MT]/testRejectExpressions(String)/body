{
  ModelVersion modelVersion=ModelVersion.create(1,1,0);
  KernelServicesBuilder builder=createKernelServicesBuilder(createAdditionalInitialization());
  builder.createLegacyKernelServicesBuilder(null,modelVersion).addMavenResourceURL("org.jboss.as:jboss-as-web:" + mavenVersion).addMavenResourceURL("org.jboss.as:jboss-as-controller:" + mavenVersion).addParentFirstClassPattern("org.jboss.as.controller.*").addChildFirstClassPattern("org.jboss.as.controller.alias.*");
  KernelServices mainServices=builder.build();
  KernelServices legacyServices=mainServices.getLegacyServices(modelVersion);
  Assert.assertTrue("main services did not boot",mainServices.isSuccessfulBoot());
  Assert.assertTrue(legacyServices.isSuccessfulBoot());
  final PathAddress subsystem=PathAddress.EMPTY_ADDRESS.append("subsystem","web");
  final PathAddress defaultHost=subsystem.append(PathElement.pathElement("virtual-server","default-host"));
  List<ModelNode> xmlOps=builder.parseXmlResource("subsystem.xml");
  ModelTestUtils.checkFailedTransformedBootOperations(mainServices,modelVersion,xmlOps,new FailedOperationTransformationConfig().addFailedAttribute(subsystem.append(PathElement.pathElement("configuration","container")),new FailedOperationTransformationConfig.RejectExpressionsConfig("welcome-file")).addFailedAttribute(subsystem.append(PathElement.pathElement("configuration","static-resources")),new FailedOperationTransformationConfig.RejectExpressionsConfig("listings","sendfile","file-encoding","read-only","webdav","secret","max-depth","disabled")).addFailedAttribute(subsystem.append(PathElement.pathElement("configuration","jsp-configuration")),createChained(new FailedOperationTransformationConfig.NewAttributesConfig("mapped-file","x-powered-by"),new FailedOperationTransformationConfig.RejectExpressionsConfig("development","disabled","keep-generated","trim-spaces","tag-pooling","mapped-file","check-interval","modification-test-interval","recompile-on-fail","smap","dump-smap","generate-strings-as-char-arrays","error-on-use-bean-invalid-class-attribute","scratch-dir","source-vm","target-vm","java-encoding","x-powered-by","display-source-fragment"))).addFailedAttribute(subsystem.append(PathElement.pathElement("connector","http")),new FailedOperationTransformationConfig.RejectExpressionsConfig("socket-binding","enabled","enable-lookups","proxy-name","proxy-port","max-post-size","max-save-post-size","redirect-port","max-connections","executor")).addFailedAttribute(subsystem.append(PathElement.pathElement("connector","https"),PathElement.pathElement("ssl","configuration")),new FailedOperationTransformationConfig.RejectExpressionsConfig("certificate-key-file","ca-certificate-file","key-alias","password","cipher-suite","protocol","verify-client","verify-depth","certificate-file","ca-revocation-url","ca-certificate-password","keystore-type","truststore-type","session-cache-size","session-timeout")).addFailedAttribute(subsystem.append(PathElement.pathElement("connector","http-vs")),new FailedOperationTransformationConfig.NewAttributesConfig("virtual-server")).addFailedAttribute(defaultHost.append(PathElement.pathElement("rewrite","myrewrite")),new FailedOperationTransformationConfig.RejectExpressionsConfig("flags","pattern","substitution")).addFailedAttribute(defaultHost.append(PathElement.pathElement("rewrite","with-conditions")),new FailedOperationTransformationConfig.RejectExpressionsConfig("flags","pattern","substitution")).addFailedAttribute(defaultHost.append(PathElement.pathElement("rewrite","with-conditions"),PathElement.pathElement("condition","https")),new FailedOperationTransformationConfig.RejectExpressionsConfig("flags","pattern","test")).addFailedAttribute(defaultHost.append(PathElement.pathElement("sso","configuration")),new FailedOperationTransformationConfig.RejectExpressionsConfig("reauthenticate","domain")));
}
