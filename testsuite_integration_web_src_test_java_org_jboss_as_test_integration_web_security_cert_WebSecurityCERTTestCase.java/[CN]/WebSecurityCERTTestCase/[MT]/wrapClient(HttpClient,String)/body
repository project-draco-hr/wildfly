{
  try {
    SSLContext ctx=SSLContext.getInstance("TLS");
    JBossJSSESecurityDomain jsseSecurityDomain=new JBossJSSESecurityDomain("client-cert");
    jsseSecurityDomain.setKeyStorePassword("changeit");
    ClassLoader tccl=Thread.currentThread().getContextClassLoader();
    URL keystore=tccl.getResource("security/client.keystore");
    jsseSecurityDomain.setKeyStoreURL(keystore.getPath());
    jsseSecurityDomain.setClientAlias(alias);
    jsseSecurityDomain.reloadKeyAndTrustStore();
    KeyManager[] keyManagers=jsseSecurityDomain.getKeyManagers();
    TrustManager[] trustManagers=jsseSecurityDomain.getTrustManagers();
    ctx.init(keyManagers,trustManagers,null);
    X509HostnameVerifier verifier=new X509HostnameVerifier(){
      @Override public void verify(      String s,      SSLSocket sslSocket) throws IOException {
      }
      @Override public void verify(      String s,      X509Certificate x509Certificate) throws SSLException {
      }
      @Override public void verify(      String s,      String[] strings,      String[] strings1) throws SSLException {
      }
      @Override public boolean verify(      String string,      SSLSession ssls){
        return true;
      }
    }
;
    SSLSocketFactory ssf=new SSLSocketFactory(ctx,verifier);
    ClientConnectionManager ccm=base.getConnectionManager();
    SchemeRegistry sr=ccm.getSchemeRegistry();
    sr.register(new Scheme("https",8380,ssf));
    return new DefaultHttpClient(ccm,base.getParams());
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    return null;
  }
}
