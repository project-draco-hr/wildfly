{
  values.setExistingUser(false);
  values.setGroups(ROLES);
  PreModificationState userCheckState=new PreModificationState(consoleMock,values);
  AssertConsoleBuilder consoleBuilder=new AssertConsoleBuilder().expectedDisplayText(DomainManagementLogger.ROOT_LOGGER.aboutToAddUser(values.getUserName(),values.getRealm())).expectedDisplayText(AddUser.NEW_LINE).expectedDisplayText(DomainManagementLogger.ROOT_LOGGER.isCorrectPrompt() + " " + DomainManagementLogger.ROOT_LOGGER.yes()+ "/"+ DomainManagementLogger.ROOT_LOGGER.no()+ "?").expectedDisplayText(" ").expectedInput(DomainManagementLogger.ROOT_LOGGER.yes()).expectedDisplayText(DomainManagementLogger.ROOT_LOGGER.addedUser(values.getUserName(),values.getUserFiles().get(0).getCanonicalPath())).expectedDisplayText(AddUser.NEW_LINE).expectedDisplayText(DomainManagementLogger.ROOT_LOGGER.addedGroups(values.getUserName(),values.getGroups(),values.getGroupFiles().get(0).getCanonicalPath())).expectedDisplayText(AddUser.NEW_LINE);
  consoleMock.setResponses(consoleBuilder);
  State nextState=userCheckState.execute();
  assertTrue(nextState instanceof ConfirmationChoice);
  nextState=nextState.execute();
  assertTrue(nextState instanceof AddUserState);
  nextState.execute();
  consoleBuilder.validate();
}
