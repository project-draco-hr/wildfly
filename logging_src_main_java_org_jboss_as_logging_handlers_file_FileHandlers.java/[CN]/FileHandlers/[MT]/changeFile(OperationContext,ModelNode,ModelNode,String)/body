{
  boolean requiresRestart=false;
  if (newFile.isDefined()) {
    final ModelNode path=PATH.resolveModelAttribute(context,newFile);
    final ModelNode relativeTo=RELATIVE_TO.resolveModelAttribute(context,newFile);
    final ModelNode currentRelativeTo=RELATIVE_TO.resolveModelAttribute(context,oldFile);
    if (relativeTo.isDefined() && !currentRelativeTo.equals(relativeTo) && !AbstractPathService.isAbsoluteUnixOrWindowsPath(path.asString())) {
      requiresRestart=true;
    }
 else {
      final ServiceName serviceName=LogServices.handlerFileName(name);
      final ServiceRegistry registry=context.getServiceRegistry(true);
      final ServiceController<?> fileController=registry.getService(serviceName);
      if (fileController == null) {
        throw new OperationFailedException(new ModelNode().set(MESSAGES.serviceNotFound(serviceName)));
      }
      final HandlerFileService fileService=(HandlerFileService)fileController.getService();
      fileService.setPath(path.asString());
      @SuppressWarnings("unchecked") final ServiceController<?> handlerController=registry.getService(LogServices.handlerName(name));
      final AbstractFileHandlerService handlerService=(AbstractFileHandlerService)handlerController.getService();
      final String fileName=fileService.getValue();
      try {
        handlerService.setFile(fileName);
      }
 catch (      FileNotFoundException e) {
        throw new OperationFailedException(e,new ModelNode().set(MESSAGES.fileNotFound(fileName)));
      }
    }
  }
  return requiresRestart;
}
