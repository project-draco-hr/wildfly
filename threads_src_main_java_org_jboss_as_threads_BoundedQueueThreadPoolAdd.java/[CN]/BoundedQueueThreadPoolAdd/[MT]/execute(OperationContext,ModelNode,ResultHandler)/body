{
  final BoundedOperationParameters params=ThreadsSubsystemThreadPoolOperationUtils.parseBoundedThreadPoolOperationParameters(operation);
  final ModelNode model=context.getSubModel();
  model.get(NAME).set(params.getName());
  if (params.getThreadFactory() != null) {
    model.get(THREAD_FACTORY).set(params.getThreadFactory());
  }
  if (params.getProperties() != null && params.getProperties().asList().size() > 0) {
    model.get(PROPERTIES).set(params.getProperties());
  }
  if (params.getMaxThreads() != null) {
    model.get(MAX_THREADS).set(operation.get(MAX_THREADS));
  }
  if (params.getKeepAliveTime() != null) {
    model.get(KEEPALIVE_TIME).set(operation.get(KEEPALIVE_TIME));
  }
  model.get(BLOCKING).set(params.isBlocking());
  if (params.getHandoffExecutor() != null) {
    model.get(HANDOFF_EXECUTOR).set(params.getHandoffExecutor());
  }
  model.get(ALLOW_CORE_TIMEOUT).set(params.isAllowCoreTimeout());
  if (params.getQueueLength() != null) {
    model.get(QUEUE_LENGTH).set(operation.get(QUEUE_LENGTH));
  }
  if (params.getCoreThreads() != null) {
    model.get(CORE_THREADS).set(operation.get(CORE_THREADS));
  }
  final ModelNode compensating=Util.getResourceRemoveOperation(params.getAddress());
  if (context instanceof RuntimeOperationContext) {
    RuntimeOperationContext.class.cast(context).executeRuntimeTask(new RuntimeTask(){
      public void execute(      RuntimeTaskContext context,      final ResultHandler resultHandler) throws OperationFailedException {
        ServiceTarget target=context.getServiceTarget();
        final ServiceName serviceName=ThreadsServices.executorName(params.getName());
        final BoundedQueueThreadPoolService service=new BoundedQueueThreadPoolService(params.getCoreThreads().getScaledCount(),params.getMaxThreads().getScaledCount(),params.getQueueLength().getScaledCount(),params.isBlocking(),params.getKeepAliveTime(),params.isAllowCoreTimeout());
        final ServiceBuilder<Executor> serviceBuilder=target.addService(serviceName,service);
        ThreadsSubsystemThreadPoolOperationUtils.addThreadFactoryDependency(params.getThreadFactory(),serviceName,serviceBuilder,service.getThreadFactoryInjector(),target);
        serviceBuilder.addListener(new ResultHandler.ServiceStartListener(resultHandler));
        serviceBuilder.install();
      }
    }
,resultHandler);
  }
 else {
    resultHandler.handleResultComplete();
  }
  return new BasicOperationResult(compensating);
}
