{
  if (reader.getAttributeCount() > 0) {
    throw ParseUtils.unexpectedAttribute(reader,0);
  }
  final ModelNode subsystem=new ModelNode();
  subsystem.get(OP).set(ADD);
  subsystem.get(OP_ADDR).add(SUBSYSTEM,SUBSYSTEM_NAME);
  final EnumSet<Element> required=EnumSet.of(Element.RECOVERY_ENVIRONMENT,Element.CORE_ENVIRONMENT);
  final EnumSet<Element> encountered=EnumSet.noneOf(Element.class);
  while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
switch (Namespace.forUri(reader.getNamespaceURI())) {
case TRANSACTIONS_1_0:
{
        final Element element=Element.forName(reader.getLocalName());
        required.remove(element);
        if (!encountered.add(element)) {
          throw ParseUtils.unexpectedElement(reader);
        }
switch (element) {
case RECOVERY_ENVIRONMENT:
{
            final ModelNode model=parseRecoveryEnvironmentElement(reader);
            subsystem.get(CommonAttributes.RECOVERY_ENVIRONMENT).set(model);
            break;
          }
case CORE_ENVIRONMENT:
{
          final ModelNode model=parseCoreEnvironmentElement(reader);
          subsystem.get(CommonAttributes.CORE_ENVIRONMENT).set(model);
          break;
        }
case COORDINATOR_ENVIRONMENT:
{
        final ModelNode model=parseCoordinatorEnvironmentElement(reader);
        subsystem.get(CommonAttributes.COORDINATOR_ENVIRONMENT).set(model);
        break;
      }
case OBJECT_STORE:
{
      final ModelNode model=parseObjectStoreEnvironmentElement(reader);
      subsystem.get(CommonAttributes.OBJECT_STORE).set(model);
      break;
    }
default :
{
    throw ParseUtils.unexpectedElement(reader);
  }
}
break;
}
default :
{
throw ParseUtils.unexpectedElement(reader);
}
}
}
if (!required.isEmpty()) {
throw ParseUtils.missingRequiredElement(reader,required);
}
}
