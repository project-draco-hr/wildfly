{
  HttpMethodConstraintMetaData httpMethodConstraint=new HttpMethodConstraintMetaData();
  while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
    final Element element=Element.forName(reader.getLocalName());
switch (element) {
case METHOD:
      httpMethodConstraint.setMethod(reader.getElementText());
    break;
case EMPTY_ROLE_SEMANTIC:
  httpMethodConstraint.setEmptyRoleSemantic(EmptyRoleSemanticType.valueOf(reader.getElementText()));
break;
case TRANSPORT_GUARANTEE:
httpMethodConstraint.setTransportGuarantee(TransportGuaranteeType.valueOf(reader.getElementText()));
break;
case ROLE_ALLOWED:
List<String> rolesAllowed=httpMethodConstraint.getRolesAllowed();
if (rolesAllowed == null) {
rolesAllowed=new ArrayList<String>();
httpMethodConstraint.setRolesAllowed(rolesAllowed);
}
rolesAllowed.add(reader.getElementText());
break;
default :
throw unexpectedElement(reader);
}
}
return httpMethodConstraint;
}
