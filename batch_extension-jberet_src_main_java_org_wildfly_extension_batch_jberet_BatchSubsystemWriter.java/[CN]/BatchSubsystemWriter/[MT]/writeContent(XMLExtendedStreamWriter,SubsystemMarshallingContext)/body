{
  final ThreadsParser threadsParser=ThreadsParser.getInstance();
  context.startSubsystemElement(Namespace.CURRENT.getUriString(),false);
  final ModelNode model=context.getModelNode();
  BatchSubsystemDefinition.DEFAULT_JOB_REPOSITORY.marshallAsElement(model,writer);
  BatchSubsystemDefinition.DEFAULT_THREAD_POOL.marshallAsElement(model,writer);
  if (model.hasDefined(InMemoryJobRepositoryDefinition.NAME)) {
    final List<Property> repositories=model.get(InMemoryJobRepositoryDefinition.NAME).asPropertyList();
    for (    Property property : repositories) {
      writer.writeStartElement(Element.JOB_REPOSITORY.getLocalName());
      writeNameAttribute(writer,property.getName());
      writer.writeEmptyElement(Element.IN_MEMORY.getLocalName());
      writer.writeEndElement();
    }
  }
  if (model.hasDefined(JdbcJobRepositoryDefinition.NAME)) {
    final List<Property> repositories=model.get(JdbcJobRepositoryDefinition.NAME).asPropertyList();
    for (    Property property : repositories) {
      writer.writeStartElement(Element.JOB_REPOSITORY.getLocalName());
      writeNameAttribute(writer,property.getName());
      writer.writeStartElement(Element.JDBC.getLocalName());
      JdbcJobRepositoryDefinition.DATA_SOURCE.marshallAsAttribute(property.getValue(),writer);
      writer.writeEndElement();
      writer.writeEndElement();
    }
  }
  if (model.hasDefined(BatchThreadPoolResourceDefinition.NAME)) {
    final List<Property> threadPools=model.get(BatchThreadPoolResourceDefinition.NAME).asPropertyList();
    for (    Property threadPool : threadPools) {
      threadsParser.writeUnboundedQueueThreadPool(writer,threadPool,Element.THREAD_POOL.getLocalName(),true);
    }
  }
  if (model.hasDefined(BatchSubsystemDefinition.THREAD_FACTORY)) {
    final List<Property> threadFactories=model.get(BatchSubsystemDefinition.THREAD_FACTORY).asPropertyList();
    for (    Property threadFactory : threadFactories) {
      threadsParser.writeThreadFactory(writer,threadFactory);
    }
  }
  writer.writeEndElement();
}
