{
  ModelNode description=createDescription(ModelType.OBJECT);
  ModelNode complexValueType=new ModelNode();
  complexValueType.get("int-value",DESCRIPTION).set("An int value");
  complexValueType.get("int-value",TYPE).set(ModelType.INT);
  complexValueType.get("bigint-value",DESCRIPTION).set("A biginteger value");
  complexValueType.get("bigint-value",TYPE).set(ModelType.BIG_INTEGER);
  complexValueType.get("bigdecimal-value",DESCRIPTION).set("A bigdecimal value");
  complexValueType.get("bigdecimal-value",TYPE).set(ModelType.BIG_DECIMAL);
  complexValueType.get("boolean-value",DESCRIPTION).set("A boolean value");
  complexValueType.get("boolean-value",TYPE).set(ModelType.BOOLEAN);
  complexValueType.get("bytes-value",DESCRIPTION).set("A bytes value");
  complexValueType.get("bytes-value",TYPE).set(ModelType.BYTES);
  complexValueType.get("double-value",DESCRIPTION).set("A double value");
  complexValueType.get("double-value",TYPE).set(ModelType.DOUBLE);
  complexValueType.get("string-value",DESCRIPTION).set("A string value");
  complexValueType.get("string-value",TYPE).set(ModelType.STRING);
  complexValueType.get("long-value",DESCRIPTION).set("A long value");
  complexValueType.get("long-value",TYPE).set(ModelType.LONG);
  complexValueType.get("type-value",DESCRIPTION).set("A type value");
  complexValueType.get("type-value",TYPE).set(ModelType.TYPE);
  complexValueType.get("list-int-value",DESCRIPTION).set("An int list value");
  complexValueType.get("list-int-value",TYPE).set(ModelType.LIST);
  complexValueType.get("list-int-value",VALUE_TYPE).set(ModelType.INT);
  complexValueType.get("map-int-value",DESCRIPTION).set("An int map value");
  complexValueType.get("map-int-value",TYPE).set(ModelType.OBJECT);
  complexValueType.get("map-int-value",VALUE_TYPE).set(ModelType.INT);
  description.get(VALUE_TYPE).set(complexValueType);
  TypeConverter converter=getConverter(description);
  CompositeType type=assertCast(CompositeType.class,converter.getOpenType());
  Set<String> keys=type.keySet();
  Assert.assertEquals(11,keys.size());
  assertCompositeType(type,"int-value",String.class.getName(),"An int value");
  assertCompositeType(type,"bigint-value",String.class.getName(),"A biginteger value");
  assertCompositeType(type,"bigdecimal-value",String.class.getName(),"A bigdecimal value");
  assertCompositeType(type,"boolean-value",String.class.getName(),"A boolean value");
  assertCompositeType(type,"bytes-value",byte[].class.getName(),"A bytes value");
  assertCompositeType(type,"double-value",String.class.getName(),"A double value");
  assertCompositeType(type,"string-value",String.class.getName(),"A string value");
  assertCompositeType(type,"long-value",String.class.getName(),"A long value");
  assertCompositeType(type,"type-value",String.class.getName(),"A type value");
  assertCompositeType(type,"list-int-value",String[].class.getName(),"An int list value");
  assertMapType(assertCast(TabularType.class,assertCompositeType(type,"map-int-value",TabularType.class.getName(),"An int map value",false)),SimpleType.STRING,SimpleType.STRING);
  ModelNode node=new ModelNode();
  node.get("int-value").set(1);
  node.get("bigint-value").set(BigInteger.valueOf(2));
  node.get("bigdecimal-value").set(BigDecimal.valueOf(3));
  node.get("boolean-value").set(Boolean.TRUE);
  node.get("bytes-value").set(new byte[]{4,5});
  node.get("double-value").set(Double.valueOf(6));
  node.get("string-value").set("Seven");
  node.get("long-value").set(Long.valueOf(8));
  node.get("type-value").set(ModelType.INT);
  node.get("list-int-value").add(9);
  node.get("list-int-value").add(10);
  node.get("map-int-value","one").set(11);
  node.get("map-int-value","two").set(12);
  CompositeData data=assertCast(CompositeData.class,converter.fromModelNode(node));
  Assert.assertEquals(type,data.getCompositeType());
  Assert.assertEquals(node,converter.toModelNode(data));
  node=new ModelNode();
  node.get("int-value").set(1);
  data=assertCast(CompositeData.class,converter.fromModelNode(node));
  Assert.assertEquals(node,converter.toModelNode(data));
  node=new ModelNode();
  node.get("boolean-value").set(true);
  data=assertCast(CompositeData.class,converter.fromModelNode(node));
  Assert.assertEquals(node,converter.toModelNode(data));
}
