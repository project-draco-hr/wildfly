{
  final DeploymentUnit deploymentUnit=phaseContext.getDeploymentUnit();
  final CompositeIndex compositeIndex=deploymentUnit.getAttachment(Attachments.COMPOSITE_ANNOTATION_INDEX);
  if (compositeIndex == null) {
    return;
  }
  final List<AnnotationInstance> instances=compositeIndex.getAnnotations(MANAGED_BEAN_ANNOTATION_NAME);
  if (instances == null || instances.isEmpty()) {
    return;
  }
  for (  AnnotationInstance instance : instances) {
    AnnotationTarget target=instance.target();
    if (!(target instanceof ClassInfo)) {
      throw new DeploymentUnitProcessingException("The ManagedBean annotation is only allowed at the class level: " + target);
    }
    final ClassInfo classInfo=ClassInfo.class.cast(target);
    final String beanClassName=classInfo.name().toString();
    final AnnotationValue nameValue=instance.value();
    final String beanName=nameValue == null || nameValue.asString().isEmpty() ? beanClassName : nameValue.asString();
    final ComponentConfiguration componentConfiguration=new ManagedBeanComponentConfiguration(beanName,beanClassName,ManagedBeanComponentFactory.INSTANCE);
    componentConfiguration.setAppContextServiceName(ContextServiceNameBuilder.app(deploymentUnit));
    final ServiceName moduleContextServiceName=ContextServiceNameBuilder.module(deploymentUnit);
    componentConfiguration.setModuleContextServiceName(moduleContextServiceName);
    componentConfiguration.setCompContextServiceName(moduleContextServiceName);
    componentConfiguration.setBindContextServiceName(moduleContextServiceName);
    componentConfiguration.setEnvContextServiceName(moduleContextServiceName.append("env"));
    deploymentUnit.addToAttachmentList(org.jboss.as.ee.component.Attachments.COMPONENT_CONFIGS,componentConfiguration);
  }
}
