{
  final DeploymentUnit deploymentUnit=phaseContext.getDeploymentUnit();
  if (deploymentUnit.getAttachment(ManagedBeanConfigurations.ATTACHMENT_KEY) != null) {
    return;
  }
  final Module module=deploymentUnit.getAttachment(Attachments.MODULE);
  if (module == null)   return;
  Map<ResourceRoot,Index> indexes=AnnotationIndexUtils.getAnnotationIndexes(deploymentUnit);
  for (  Entry<ResourceRoot,Index> entry : indexes.entrySet()) {
    final Index index=entry.getValue();
    final List<AnnotationInstance> instances=index.getAnnotations(MANAGED_BEAN_ANNOTATION_NAME);
    if (instances == null)     continue;
    final ClassLoader classLoader=module.getClassLoader();
    final ManagedBeanConfigurations managedBeanConfigurations=new ManagedBeanConfigurations();
    deploymentUnit.putAttachment(ManagedBeanConfigurations.ATTACHMENT_KEY,managedBeanConfigurations);
    for (    AnnotationInstance instance : instances) {
      AnnotationTarget target=instance.target();
      if (!(target instanceof ClassInfo)) {
        throw new DeploymentUnitProcessingException("The ManagedBean annotation is only allowed at the class level: " + target);
      }
      final ClassInfo classInfo=ClassInfo.class.cast(target);
      final String beanClassName=classInfo.name().toString();
      final Class<?> beanClass;
      try {
        beanClass=classLoader.loadClass(beanClassName);
      }
 catch (      ClassNotFoundException e) {
        throw new DeploymentUnitProcessingException("Failed to load managed bean class: " + beanClassName,e);
      }
      final ManagedBean managedBeanAnnotation=beanClass.getAnnotation(ManagedBean.class);
      final String beanName=managedBeanAnnotation.value().isEmpty() ? beanClassName : managedBeanAnnotation.value();
      if (managedBeanConfigurations.containsName(beanName)) {
        ManagedBeanConfiguration first=managedBeanConfigurations.getConfigurations().get(beanName);
        throw new DeploymentUnitProcessingException("Duplicate managed bean name '" + beanName + "': "+ beanClassName+ ", "+ first.getType().getName());
      }
      final ManagedBeanConfiguration managedBeanConfiguration=new ManagedBeanConfiguration(beanName,beanClass);
      processLifecycleMethods(managedBeanConfiguration,beanClass,index);
      final Map<DotName,List<AnnotationInstance>> classAnnotations=classInfo.annotations();
      managedBeanConfiguration.setResourceConfigurations(processResources(classAnnotations,beanClass,classLoader));
      managedBeanConfiguration.setInterceptorConfigurations(processInterceptors(index,classAnnotations,beanClass,classLoader));
      managedBeanConfigurations.add(managedBeanConfiguration);
    }
  }
}
