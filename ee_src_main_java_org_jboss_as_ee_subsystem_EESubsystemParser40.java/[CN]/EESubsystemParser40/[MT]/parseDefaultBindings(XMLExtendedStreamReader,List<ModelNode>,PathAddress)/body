{
  final ModelNode addOperation=Util.createAddOperation();
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    requireNoNamespaceAttribute(reader,i);
    final String value=reader.getAttributeValue(i);
    final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case CONTEXT_SERVICE:
      DefaultBindingsResourceDefinition.CONTEXT_SERVICE_AD.parseAndSetParameter(value,addOperation,reader);
    break;
case DATASOURCE:
  DefaultBindingsResourceDefinition.DATASOURCE_AD.parseAndSetParameter(value,addOperation,reader);
break;
case JMS_CONNECTION_FACTORY:
DefaultBindingsResourceDefinition.JMS_CONNECTION_FACTORY_AD.parseAndSetParameter(value,addOperation,reader);
break;
case MANAGED_EXECUTOR_SERVICE:
DefaultBindingsResourceDefinition.MANAGED_EXECUTOR_SERVICE_AD.parseAndSetParameter(value,addOperation,reader);
break;
case MANAGED_SCHEDULED_EXECUTOR_SERVICE:
DefaultBindingsResourceDefinition.MANAGED_SCHEDULED_EXECUTOR_SERVICE_AD.parseAndSetParameter(value,addOperation,reader);
break;
case MANAGED_THREAD_FACTORY:
DefaultBindingsResourceDefinition.MANAGED_THREAD_FACTORY_AD.parseAndSetParameter(value,addOperation,reader);
break;
default :
throw unexpectedAttribute(reader,i);
}
}
requireNoContent(reader);
final PathAddress address=subsystemPathAddress.append(EESubsystemModel.DEFAULT_BINDINGS_PATH);
addOperation.get(OP_ADDR).set(address.toModelNode());
operations.add(addOperation);
}
