{
  ModelNode threadModel=transport.get(pool.getPathElement().getKeyValuePair());
  builder.addProperty(propertyPrefix + ".min_threads",pool.getMinThreads().resolveModelAttribute(context,threadModel).asString()).addProperty(propertyPrefix + ".max_threads",pool.getMaxThreads().resolveModelAttribute(context,threadModel).asString());
  int queueSize=pool.getQueueLength().resolveModelAttribute(context,threadModel).asInt();
  if (propertyPrefix.equals("timer")) {
    builder.addProperty(propertyPrefix + ".queue_max_size",String.valueOf(queueSize));
  }
 else   if (queueSize == 0) {
    builder.addProperty(propertyPrefix + ".queue_enabled",Boolean.FALSE.toString());
  }
 else {
    builder.addProperty(propertyPrefix + ".queue_enabled",Boolean.TRUE.toString()).addProperty(propertyPrefix + ".queue_max_size",String.valueOf(queueSize));
  }
  long keepaliveTime=pool.getKeepaliveTime().resolveModelAttribute(context,threadModel).asLong();
  builder.addProperty(propertyPrefix + ".keep_alive_time",String.valueOf(keepaliveTime));
  return builder;
}
