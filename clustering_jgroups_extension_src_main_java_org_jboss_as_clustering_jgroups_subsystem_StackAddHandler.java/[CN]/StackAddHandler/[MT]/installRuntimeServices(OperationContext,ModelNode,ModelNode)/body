{
  String name=context.getCurrentAddressValue();
  if (!model.hasDefined(TransportResourceDefinition.WILDCARD_PATH.getKey())) {
    throw JGroupsLogger.ROOT_LOGGER.transportNotDefined(name);
  }
  ServiceTarget target=context.getServiceTarget();
  Property property=model.get(TransportResourceDefinition.WILDCARD_PATH.getKey()).asProperty();
  String type=property.getName();
  ModelNode transport=property.getValue();
  String machine=ModelNodes.asString(TransportResourceDefinition.MACHINE.resolveModelAttribute(context,transport));
  String rack=ModelNodes.asString(TransportResourceDefinition.RACK.resolveModelAttribute(context,transport));
  String site=ModelNodes.asString(TransportResourceDefinition.SITE.resolveModelAttribute(context,transport));
  JChannelFactoryBuilder builder=new JChannelFactoryBuilder(name);
  TransportConfigurationBuilder transportBuilder=builder.setTransport(type).setModule(ModelNodes.asModuleIdentifier(ProtocolResourceDefinition.MODULE.resolveModelAttribute(context,transport))).setShared(TransportResourceDefinition.SHARED.resolveModelAttribute(context,transport).asBoolean()).setTopology(site,rack,machine).setSocketBinding(ModelNodes.asString(ProtocolResourceDefinition.SOCKET_BINDING.resolveModelAttribute(context,transport))).setDiagnosticsSocket(ModelNodes.asString(TransportResourceDefinition.DIAGNOSTICS_SOCKET_BINDING.resolveModelAttribute(context,transport))).setThreadFactory(ModelNodes.asString(TransportResourceDefinition.THREAD_FACTORY.resolveModelAttribute(context,transport))).setDefaultExecutor(ModelNodes.asString(TransportResourceDefinition.DEFAULT_EXECUTOR.resolveModelAttribute(context,transport))).setOOBExecutor(ModelNodes.asString(TransportResourceDefinition.OOB_EXECUTOR.resolveModelAttribute(context,transport))).setTimerExecutor(ModelNodes.asString(TransportResourceDefinition.TIMER_EXECUTOR.resolveModelAttribute(context,transport)));
  addProtocolProperties(context,transport,transportBuilder).build(target).install();
  if (model.hasDefined(RelayResourceDefinition.PATH.getKey())) {
    ModelNode relay=model.get(RelayResourceDefinition.PATH.getKeyValuePair());
    String siteName=RelayResourceDefinition.SITE.resolveModelAttribute(context,relay).asString();
    RelayConfigurationBuilder relayBuilder=builder.setRelay(siteName);
    if (relay.hasDefined(RemoteSiteResourceDefinition.WILDCARD_PATH.getKey())) {
      for (      Property remoteSiteProperty : relay.get(RemoteSiteResourceDefinition.WILDCARD_PATH.getKey()).asPropertyList()) {
        String remoteSiteName=remoteSiteProperty.getName();
        String channelName=RemoteSiteResourceDefinition.CHANNEL.resolveModelAttribute(context,remoteSiteProperty.getValue()).asString();
        relayBuilder.addRemoteSite(remoteSiteName,channelName).build(target).install();
      }
    }
    addProtocolProperties(context,relay,relayBuilder).build(target).install();
  }
  if (model.hasDefined(ProtocolResourceDefinition.WILDCARD_PATH.getKey())) {
    for (    Property protocolProperty : model.get(ProtocolResourceDefinition.WILDCARD_PATH.getKey()).asPropertyList()) {
      ModelNode protocol=protocolProperty.getValue();
      ProtocolConfigurationBuilder protocolBuilder=builder.addProtocol(protocolProperty.getName()).setModule(ModelNodes.asModuleIdentifier(ProtocolResourceDefinition.MODULE.resolveModelAttribute(context,protocol))).setSocketBinding(ModelNodes.asString(ProtocolResourceDefinition.SOCKET_BINDING.resolveModelAttribute(context,protocol)));
      addProtocolProperties(context,protocol,protocolBuilder).build(target).install();
    }
  }
  builder.build(target).install();
  new BinderServiceBuilder<>(JGroupsBindingFactory.createChannelFactoryBinding(name),ProtocolStackServiceName.CHANNEL_FACTORY.getServiceName(name),ChannelFactory.class).build(target).install();
}
