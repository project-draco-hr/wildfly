{
  if (transport.get(pool.getPathElement().getKey()).hasDefined(pool.getPathElement().getValue())) {
    ModelNode threadModel=transport.get(pool.getPathElement().getKeyValuePair());
    if (pool.getMinThreads().resolveModelAttribute(context,threadModel).isDefined()) {
      builder.addProperty(propertyPrefix + ".min_threads",pool.getMinThreads().resolveModelAttribute(context,threadModel).asString());
    }
    if (pool.getMaxThreads().resolveModelAttribute(context,threadModel).isDefined()) {
      builder.addProperty(propertyPrefix + ".max_threads",pool.getMaxThreads().resolveModelAttribute(context,threadModel).asString());
    }
    if (pool.getQueueLength().resolveModelAttribute(context,threadModel).isDefined()) {
      int queueSize=pool.getQueueLength().resolveModelAttribute(context,threadModel).asInt();
      if (queueSize == 0) {
        builder.addProperty(propertyPrefix + ".queue_enabled",Boolean.FALSE.toString());
      }
 else {
        builder.addProperty(propertyPrefix + ".queue_enabled",Boolean.TRUE.toString());
        builder.addProperty(propertyPrefix + ".queue_max_size",String.valueOf(queueSize));
      }
    }
    if (pool.getKeepAliveTime().resolveModelAttribute(context,threadModel).isDefined()) {
      long keepAliveTime=pool.getKeepAliveTime().resolveModelAttribute(context,threadModel).asLong();
      TimeUnit unit=Enum.valueOf(TimeUnit.class,pool.getKeepAliveTimeUnit().resolveModelAttribute(context,threadModel).asString());
      long keepAliveTimeInSeconds=unit.toMillis(keepAliveTime);
      builder.addProperty(propertyPrefix + ".keep_alive_time",String.valueOf(keepAliveTimeInSeconds));
    }
  }
  return builder;
}
