{
  Set<Node> previousView=CommandDispatcherFactoryService.this.view;
  int size=this.view.size();
  final List<Node> allNodes=new ArrayList<>(size);
  final List<Node> newNodes=new ArrayList<>(size);
  for (  Address address : this.view.getMembers()) {
    Node node=CommandDispatcherFactoryService.this.getNode(address);
    allNodes.add(node);
    if (!previousView.contains(node)) {
      newNodes.add(node);
    }
  }
  final List<Node> deadNodes=new ArrayList<>(previousView);
  deadNodes.removeAll(allNodes);
  CommandDispatcherFactoryService.this.view=new HashSet<>(allNodes);
  CommandDispatcherFactoryService.this.nodes.values().removeAll(deadNodes);
  final Collection<Map.Entry<MembershipListener,Object>> listeners=CommandDispatcherFactoryService.this.services.values();
  final List<List<Node>> groups=this.createGroups(this.view);
  for (  Map.Entry<MembershipListener,Object> entry : listeners) {
    MembershipListener listener=entry.getKey();
    if (listener != null) {
      listener.membershipChanged(deadNodes,newNodes,allNodes,groups);
    }
  }
}
