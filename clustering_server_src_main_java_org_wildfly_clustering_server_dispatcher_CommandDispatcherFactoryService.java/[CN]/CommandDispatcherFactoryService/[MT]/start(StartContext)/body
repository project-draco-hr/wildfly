{
  ModuleLoader loader=this.loader.getValue();
  MarshallingConfiguration config=MarshallingConfigurationFactory.createMarshallingConfiguration(loader);
  try {
    Module module=loader.loadModule(this.moduleId);
    config.setClassTable(new DynamicClassTable(module.getClassLoader()));
    this.configurations.put(CURRENT_VERSION,config);
  }
 catch (  ModuleLoadException e) {
    throw new StartException(e);
  }
  ThreadGroup group=new ThreadGroup(CommandDispatcherFactoryService.class.getSimpleName());
  ThreadFactory factory=new JBossThreadFactory(group,Boolean.FALSE,null,"%G - %t",null,null,AccessController.doPrivileged(GetAccessControlContextAction.getInstance()));
  this.executor=new ThreadPoolExecutor(1,1,0L,TimeUnit.SECONDS,new PriorityBlockingQueue<Runnable>(2),factory){
    @Override protected <T>RunnableFuture<T> newTaskFor(    Runnable runnable,    T value){
      RunnableFuture<T> future=super.newTaskFor(runnable,value);
      return (runnable instanceof ViewTask) ? new ComparableRunnableFuture<>(future,(ViewTask)runnable) : future;
    }
  }
;
  Channel channel=this.channel.getValue();
  final RpcDispatcher.Marshaller marshaller=new CommandResponseMarshaller(this.marshallingContext,CURRENT_VERSION);
  this.dispatcher=new MuxMessageDispatcher(SCOPE_ID){
    @Override protected RequestCorrelator createRequestCorrelator(    Protocol transport,    RequestHandler handler,    Address localAddr){
      RequestCorrelator correlator=super.createRequestCorrelator(transport,handler,localAddr);
      correlator.setMarshaller(marshaller);
      return correlator;
    }
  }
;
  this.dispatcher.setChannel(channel);
  this.dispatcher.setRequestHandler(this);
  this.dispatcher.setMembershipListener(this);
  this.dispatcher.start();
  new ViewTask(channel.getView()).run();
}
