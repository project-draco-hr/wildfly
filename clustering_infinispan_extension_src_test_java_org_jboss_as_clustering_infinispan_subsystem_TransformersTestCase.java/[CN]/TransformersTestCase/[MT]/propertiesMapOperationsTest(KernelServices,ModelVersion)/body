{
  final String cacheContainer="maximal";
  final String testProperty1="testProperty1";
  final String testProperty2="testProperty2";
  final String testProperty3="testProperty3";
  final String testProperty4="testProperty4";
  final List<PathAddress> cacheStoreAddresses=new LinkedList<>();
  cacheStoreAddresses.add(getBinaryKeyedJDBCCacheStoreAddress(cacheContainer,ReplicatedCacheResourceDefinition.WILDCARD_PATH.getKey(),"cache-with-binary-keyed-store"));
  cacheStoreAddresses.add(getCustomCacheStoreAddress(cacheContainer,ReplicatedCacheResourceDefinition.WILDCARD_PATH.getKey(),"repl"));
  cacheStoreAddresses.add(getFileCacheStoreAddress(cacheContainer,LocalCacheResourceDefinition.WILDCARD_PATH.getKey(),"local"));
  cacheStoreAddresses.add(getMixedKeyedJDBCCacheStoreAddress(cacheContainer,DistributedCacheResourceDefinition.WILDCARD_PATH.getKey(),"dist"));
  cacheStoreAddresses.add(getRemoteCacheStoreAddress(cacheContainer,InvalidationCacheResourceDefinition.WILDCARD_PATH.getKey(),"invalid"));
  cacheStoreAddresses.add(getStringKeyedJDBCCacheStoreAddress(cacheContainer,ReplicatedCacheResourceDefinition.WILDCARD_PATH.getKey(),"cache-with-string-keyed-store"));
  for (  PathAddress storeAddress : cacheStoreAddresses) {
    executeOpInBothControllersWithAttachments(services,version,getCacheStoreUndefinePropertiesOperation(storeAddress));
    checkMapModels(services,version,storeAddress);
    executeOpInBothControllersWithAttachments(services,version,getCacheStorePutPropertyOperation(storeAddress,testProperty1,"true"));
    checkMapResults(services,new ModelNode("true"),version,getCacheStoreGetPropertyOperation(storeAddress,testProperty1));
    checkMapModels(services,version,storeAddress,testProperty1,"true");
    executeOpInBothControllersWithAttachments(services,version,getCacheStorePutPropertyOperation(storeAddress,testProperty2,"false"));
    checkMapResults(services,new ModelNode("true"),version,getCacheStoreGetPropertyOperation(storeAddress,testProperty1));
    checkMapResults(services,new ModelNode("false"),version,getCacheStoreGetPropertyOperation(storeAddress,testProperty2));
    checkMapModels(services,version,storeAddress,testProperty1,"true",testProperty2,"false");
    executeOpInBothControllersWithAttachments(services,version,getCacheStorePutPropertyOperation(storeAddress,testProperty2,"true"));
    checkMapResults(services,new ModelNode("true"),version,getCacheStoreGetPropertyOperation(storeAddress,testProperty1));
    checkMapResults(services,new ModelNode("true"),version,getCacheStoreGetPropertyOperation(storeAddress,testProperty2));
    checkMapModels(services,version,storeAddress,testProperty1,"true",testProperty2,"true");
    executeOpInBothControllersWithAttachments(services,version,getCacheStoreRemovePropertyOperation(storeAddress,testProperty1));
    checkMapResults(services,new ModelNode(),version,getCacheStoreGetPropertyOperation(storeAddress,testProperty1));
    checkMapResults(services,new ModelNode("true"),version,getCacheStoreGetPropertyOperation(storeAddress,testProperty2));
    checkMapModels(services,version,storeAddress,testProperty2,"true");
    executeOpInBothControllersWithAttachments(services,version,getCacheStorePutPropertyOperation(storeAddress,testProperty1,"false"));
    checkMapResults(services,new ModelNode("false"),version,getCacheStoreGetPropertyOperation(storeAddress,testProperty1));
    checkMapResults(services,new ModelNode("true"),version,getCacheStoreGetPropertyOperation(storeAddress,testProperty2));
    checkMapModels(services,version,storeAddress,testProperty1,"false",testProperty2,"true");
    executeOpInBothControllersWithAttachments(services,version,getCacheStoreClearPropertiesOperation(storeAddress));
    checkMapResults(services,new ModelNode(),version,getCacheStoreGetPropertyOperation(storeAddress,testProperty1));
    checkMapResults(services,new ModelNode(),version,getCacheStoreGetPropertyOperation(storeAddress,testProperty2));
    checkMapModels(services,version,storeAddress);
    ModelNode composite=new ModelNode();
    composite.get(OP).set(COMPOSITE);
    composite.get(OP_ADDR).setEmptyList();
    composite.get(STEPS).add(getCacheStorePutPropertyOperation(storeAddress,testProperty3,"false"));
    composite.get(STEPS).add(getCacheStorePutPropertyOperation(storeAddress,testProperty4,"true"));
    composite.get(STEPS).add(getCacheStorePutPropertyOperation(storeAddress,testProperty1,"true"));
    executeOpInBothControllersWithAttachments(services,version,composite);
    checkMapResults(services,new ModelNode("false"),version,getCacheStoreGetPropertyOperation(storeAddress,testProperty3));
    checkMapResults(services,new ModelNode("true"),version,getCacheStoreGetPropertyOperation(storeAddress,testProperty4));
    checkMapResults(services,new ModelNode("true"),version,getCacheStoreGetPropertyOperation(storeAddress,testProperty1));
    composite.get(STEPS).setEmptyList();
    composite.get(STEPS).add(getCacheStorePutPropertyOperation(storeAddress,testProperty3,"true"));
    composite.get(STEPS).add(getCacheStorePutPropertyOperation(storeAddress,testProperty4,"false"));
    composite.get(STEPS).add(getCacheStorePutPropertyOperation(storeAddress,testProperty1,"false"));
    executeOpInBothControllersWithAttachments(services,version,composite);
    checkMapResults(services,new ModelNode("true"),version,getCacheStoreGetPropertyOperation(storeAddress,testProperty3));
    checkMapResults(services,new ModelNode("false"),version,getCacheStoreGetPropertyOperation(storeAddress,testProperty4));
    checkMapResults(services,new ModelNode("false"),version,getCacheStoreGetPropertyOperation(storeAddress,testProperty1));
    checkMapModels(services,version,storeAddress,testProperty3,"true",testProperty4,"false",testProperty1,"false");
    composite.get(STEPS).setEmptyList();
    composite.get(STEPS).add(getCacheStoreRemovePropertyOperation(storeAddress,testProperty3));
    composite.get(STEPS).add(getCacheStoreRemovePropertyOperation(storeAddress,testProperty4));
    composite.get(STEPS).add(getCacheStorePutPropertyOperation(storeAddress,testProperty2,"false"));
    composite.get(STEPS).add(getCacheStoreRemovePropertyOperation(storeAddress,testProperty1));
    executeOpInBothControllersWithAttachments(services,version,composite);
    checkMapResults(services,new ModelNode(),version,getCacheStoreGetPropertyOperation(storeAddress,testProperty3));
    checkMapResults(services,new ModelNode(),version,getCacheStoreGetPropertyOperation(storeAddress,testProperty4));
    checkMapResults(services,new ModelNode(),version,getCacheStoreGetPropertyOperation(storeAddress,testProperty1));
    checkMapResults(services,new ModelNode("false"),version,getCacheStoreGetPropertyOperation(storeAddress,testProperty2));
    checkMapModels(services,version,storeAddress,testProperty2,"false");
    composite.get(STEPS).setEmptyList();
    composite.get(STEPS).add(getCacheStorePutPropertyOperation(storeAddress,testProperty3,"false"));
    composite.get(STEPS).add(getCacheStorePutPropertyOperation(storeAddress,testProperty4,"true"));
    composite.get(STEPS).add(getCacheStoreRemovePropertyOperation(storeAddress,testProperty2));
    executeOpInBothControllersWithAttachments(services,version,composite);
    checkMapResults(services,new ModelNode("false"),version,getCacheStoreGetPropertyOperation(storeAddress,testProperty3));
    checkMapResults(services,new ModelNode("true"),version,getCacheStoreGetPropertyOperation(storeAddress,testProperty4));
    checkMapResults(services,new ModelNode(),version,getCacheStoreGetPropertyOperation(storeAddress,testProperty2));
    checkMapModels(services,version,storeAddress,testProperty3,"false",testProperty4,"true");
  }
}
