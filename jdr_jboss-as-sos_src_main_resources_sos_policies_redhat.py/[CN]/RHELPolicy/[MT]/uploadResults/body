def uploadResults(self, final_filename):
    self.report_file = final_filename
    if (not self.report_file):
        return False
    self._print()
    try:
        fp = open(self.report_file, 'r')
    except:
        return False
    if self.cInfo['cmdlineopts'].upload:
        upload_url = self.cInfo['cmdlineopts'].upload
    else:
        try:
            upload_url = self.cInfo['config'].get('general', 'ftp_upload_url')
        except:
            self._print(_('No URL defined in config file.'))
            return
    from urlparse import urlparse
    url = urlparse(upload_url)
    if (url[0] != 'ftp'):
        self._print(_('Cannot upload to specified URL.'))
        return
    if (url[1].find('@') > 0):
        (username, host) = url[1].split('@', 1)
        if (username.find(':') > 0):
            (username, passwd) = username.split(':', 1)
        else:
            passwd = None
    else:
        (username, passwd, host) = (None, None, url[1])
    if (host.find(':') > 0):
        (host, port) = host.split(':', 1)
        port = int(port)
    else:
        port = 21
    path = url[2]
    try:
        from ftplib import FTP
        upload_name = os.path.basename(self.report_file)
        ftp = FTP()
        ftp.connect(host, port)
        if (username and passwd):
            ftp.login(username, passwd)
        else:
            ftp.login()
        ftp.cwd(path)
        ftp.set_pasv(True)
        ftp.storbinary(('STOR %s' % upload_name), fp)
        ftp.quit()
    except Exception as e:
        self._print(_(('There was a problem uploading your report to Red Hat support. ' + str(e))))
    else:
        self._print(_(('Your report was successfully uploaded to %s with name:' % (upload_url,))))
        self._print(('  ' + upload_name))
        self._print()
        self._print(_('Please communicate this name to your support representative.'))
        self._print()
    fp.close()
