{
  GlobalOperationHandlers.registerGlobalOperations(rootRegistration,processType);
  rootRegistration.registerOperationHandler(ValidateOperationHandler.OPERATION_NAME,ValidateOperationHandler.INSTANCE,ValidateOperationHandler.INSTANCE);
  rootRegistration.registerOperationHandler("setup",new OperationStepHandler(){
    @Override public void execute(    OperationContext context,    ModelNode operation) throws OperationFailedException {
      ModelNode mainModel=new ModelNode();
      mainModel.get(SERVER,"serverA");
      mainModel.get("profile","profileA").get(NAME).set("Profile A");
      AbstractControllerTestBase.createModel(context,mainModel);
      context.stepCompleted();
    }
  }
,new DescriptionProvider(){
    @Override public ModelNode getModelDescription(    Locale locale){
      return new ModelNode();
    }
  }
,false,OperationEntry.EntryType.PRIVATE);
  rootRegistration.registerSubModel(PathElement.pathElement("profile","*"),new DescriptionProvider(){
    @Override public ModelNode getModelDescription(    Locale locale){
      ModelNode node=new ModelNode();
      node.get(DESCRIPTION).set("A server child");
      node.get(ATTRIBUTES,NAME,TYPE).set(ModelType.STRING);
      node.get(ATTRIBUTES,NAME,DESCRIPTION).set("The name of the profile");
      node.get(ATTRIBUTES,NAME,REQUIRED).set(true);
      return node;
    }
  }
);
  PathElement serverAElement=PathElement.pathElement(SERVER,"serverA");
  rootRegistration.registerProxyController(serverAElement,createProxyController(proxy.getValue(),PathAddress.pathAddress(serverAElement)));
}
