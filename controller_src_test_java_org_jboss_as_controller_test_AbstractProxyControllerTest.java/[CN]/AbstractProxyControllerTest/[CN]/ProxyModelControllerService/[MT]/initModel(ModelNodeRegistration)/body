{
  rootRegistration.registerOperationHandler(READ_RESOURCE_OPERATION,GlobalOperationHandlers.READ_RESOURCE,CommonProviders.READ_RESOURCE_PROVIDER,true);
  rootRegistration.registerOperationHandler(READ_ATTRIBUTE_OPERATION,GlobalOperationHandlers.READ_ATTRIBUTE,CommonProviders.READ_ATTRIBUTE_PROVIDER,true);
  rootRegistration.registerOperationHandler(READ_RESOURCE_DESCRIPTION_OPERATION,GlobalOperationHandlers.READ_RESOURCE_DESCRIPTION,CommonProviders.READ_RESOURCE_DESCRIPTION_PROVIDER,true);
  rootRegistration.registerOperationHandler(READ_CHILDREN_NAMES_OPERATION,GlobalOperationHandlers.READ_CHILDREN_NAMES,CommonProviders.READ_CHILDREN_NAMES_PROVIDER,true);
  rootRegistration.registerOperationHandler(READ_CHILDREN_TYPES_OPERATION,GlobalOperationHandlers.READ_CHILDREN_TYPES,CommonProviders.READ_CHILDREN_TYPES_PROVIDER,true);
  rootRegistration.registerOperationHandler(READ_OPERATION_NAMES_OPERATION,GlobalOperationHandlers.READ_OPERATION_NAMES,CommonProviders.READ_OPERATION_NAMES_PROVIDER,true);
  rootRegistration.registerOperationHandler(READ_OPERATION_DESCRIPTION_OPERATION,GlobalOperationHandlers.READ_OPERATION_DESCRIPTION,CommonProviders.READ_OPERATION_PROVIDER,true);
  rootRegistration.registerOperationHandler(WRITE_ATTRIBUTE_OPERATION,GlobalOperationHandlers.WRITE_ATTRIBUTE,CommonProviders.WRITE_ATTRIBUTE_PROVIDER,true);
  rootRegistration.registerOperationHandler("Test",new NewStepHandler(){
    @Override public void execute(    NewOperationContext context,    ModelNode operation){
      context.completeStep();
    }
  }
,new DescriptionProvider(){
    @Override public ModelNode getModelDescription(    Locale locale){
      ModelNode node=new ModelNode();
      node.get(OPERATION_NAME).set("Test");
      return node;
    }
  }
,true);
  ModelNodeRegistration hostReg=rootRegistration.registerSubModel(PathElement.pathElement("hostchild","*"),new DescriptionProvider(){
    @Override public ModelNode getModelDescription(    Locale locale){
      ModelNode node=new ModelNode();
      node.get(DESCRIPTION).set("A host child");
      node.get(ATTRIBUTES,NAME,TYPE).set(ModelType.STRING);
      node.get(ATTRIBUTES,NAME,DESCRIPTION).set("The name of the host child");
      node.get(ATTRIBUTES,NAME,REQUIRED).set(true);
      node.get(ATTRIBUTES,NAME,MIN_LENGTH).set(1);
      node.get(CHILDREN,"child",DESCRIPTION).set("The children of the host child");
      node.get(CHILDREN,"child",MIN_OCCURS).set(1);
      node.get(CHILDREN,"child",MODEL_DESCRIPTION);
      return node;
    }
  }
);
  ModelNodeRegistration hostChildReg=hostReg.registerSubModel(PathElement.pathElement("child","*"),new DescriptionProvider(){
    @Override public ModelNode getModelDescription(    Locale locale){
      ModelNode node=new ModelNode();
      node.get(DESCRIPTION).set("A named set of children");
      node.get(ATTRIBUTES,NAME,TYPE).set(ModelType.STRING);
      node.get(ATTRIBUTES,NAME,DESCRIPTION).set("The name of the child");
      node.get(ATTRIBUTES,NAME,REQUIRED).set(true);
      node.get(ATTRIBUTES,NAME,MIN_LENGTH).set(1);
      node.get(ATTRIBUTES,VALUE,TYPE).set(ModelType.STRING);
      node.get(ATTRIBUTES,VALUE,DESCRIPTION).set("The value of the child");
      node.get(ATTRIBUTES,VALUE,REQUIRED).set(true);
      node.get(ATTRIBUTES,VALUE,MIN_LENGTH).set(1);
      return node;
    }
  }
);
  hostChildReg.registerReadWriteAttribute("value",null,new WriteAttributeHandlers.ModelTypeValidatingHandler(ModelType.STRING),AttributeAccess.Storage.CONFIGURATION);
  hostChildReg.registerMetric("metric",GlobalOperationsTestCase.TestMetricHandler.INSTANCE);
  hostChildReg.registerOperationHandler("test-op",new NewStepHandler(){
    @Override public void execute(    NewOperationContext context,    ModelNode operation){
      return;
    }
  }
,new DescriptionProvider(){
    @Override public ModelNode getModelDescription(    Locale locale){
      ModelNode node=new ModelNode();
      node.get(OPERATION_NAME).set("test-op");
      node.get(REQUEST_PROPERTIES).setEmptyObject();
      node.get(REPLY_PROPERTIES,DESCRIPTION).setEmptyObject();
      node.protect();
      return node;
    }
  }
,false);
}
