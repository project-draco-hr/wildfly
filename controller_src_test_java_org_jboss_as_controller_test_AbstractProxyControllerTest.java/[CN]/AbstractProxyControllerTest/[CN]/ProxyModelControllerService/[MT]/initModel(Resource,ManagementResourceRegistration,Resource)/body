{
  GlobalOperationHandlers.registerGlobalOperations(rootRegistration,processType);
  rootRegistration.registerOperationHandler(ValidateOperationHandler.DEFINITION,ValidateOperationHandler.INSTANCE);
  rootRegistration.registerOperationHandler(createOperationDefinition("Test"),new OperationStepHandler(){
    @Override public void execute(    OperationContext context,    ModelNode operation){
      context.stepCompleted();
    }
  }
,true);
  rootRegistration.registerOperationHandler(TestUtils.SETUP_OPERATION_DEF,new OperationStepHandler(){
    @Override public void execute(    OperationContext context,    ModelNode operation) throws OperationFailedException {
      ModelNode proxyModel=new ModelNode();
      proxyModel.get("serverchild","svrA","name").set("serverA");
      proxyModel.get("serverchild","svrA","child","childA","name").set("childName");
      proxyModel.get("serverchild","svrA","child","childA","value").set("childValue");
      AbstractControllerTestBase.createModel(context,proxyModel);
      context.stepCompleted();
    }
  }
);
  ManagementResourceRegistration serverReg=rootRegistration.registerSubModel(new SimpleResourceDefinition(PathElement.pathElement("serverchild","*"),new NonResolvingResourceDescriptionResolver()));
  serverReg.registerReadOnlyAttribute(createAttribute("name",ModelType.STRING),null);
  ManagementResourceRegistration serverChildReg=serverReg.registerSubModel(new SimpleResourceDefinition(PathElement.pathElement("child","*"),new NonResolvingResourceDescriptionResolver()));
  serverChildReg.registerReadOnlyAttribute(createAttribute("name",ModelType.STRING),null);
  final AttributeDefinition value=createAttribute("value",ModelType.STRING);
  serverChildReg.registerReadWriteAttribute(value,null,new ModelOnlyWriteAttributeHandler(value));
  serverChildReg.registerMetric(createMetric("metric",ModelType.STRING),GlobalOperationsTestCase.TestMetricHandler.INSTANCE);
  serverChildReg.registerOperationHandler(createOperationDefinition("test-op"),new OperationStepHandler(){
    @Override public void execute(    OperationContext context,    ModelNode operation){
    }
  }
);
}
