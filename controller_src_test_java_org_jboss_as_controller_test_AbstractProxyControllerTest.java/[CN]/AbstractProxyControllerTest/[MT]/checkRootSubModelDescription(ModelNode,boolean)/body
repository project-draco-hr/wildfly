{
  assertEquals("The root node of the test management API",result.get(DESCRIPTION).asString());
  assertEquals("A list of servers",result.get(CHILDREN,SERVER,DESCRIPTION).asString());
  assertEquals(1,result.get(CHILDREN,SERVER,MIN_OCCURS).asInt());
  assertEquals(1,result.get(CHILDREN,SERVER,MODEL_DESCRIPTION).keys().size());
  assertEquals("A list of profiles",result.get(CHILDREN,PROFILE,DESCRIPTION).asString());
  assertEquals(1,result.get(CHILDREN,PROFILE,MODEL_DESCRIPTION).keys().size());
  if (!operations) {
    assertFalse(result.has(OPERATIONS));
  }
 else {
    Set<String> ops=result.require(OPERATIONS).keys();
    assertTrue(ops.contains(READ_ATTRIBUTE_OPERATION));
    assertTrue(ops.contains(READ_CHILDREN_NAMES_OPERATION));
    assertTrue(ops.contains(READ_CHILDREN_TYPES_OPERATION));
    assertTrue(ops.contains(READ_OPERATION_DESCRIPTION_OPERATION));
    assertTrue(ops.contains(READ_OPERATION_NAMES_OPERATION));
    assertTrue(ops.contains(READ_RESOURCE_DESCRIPTION_OPERATION));
    assertTrue(ops.contains(READ_RESOURCE_OPERATION));
    assertTrue(ops.contains(WRITE_ATTRIBUTE_OPERATION));
    for (    String op : ops) {
      assertEquals(op,result.require(OPERATIONS).require(op).require(OPERATION_NAME).asString());
    }
  }
  ModelNode proxy=result.get(CHILDREN,SERVER,MODEL_DESCRIPTION,"serverA");
  checkHostSubModelDescription(proxy,operations);
}
