{
  int expectedChildren=operations ? 4 : 3;
  assertEquals(expectedChildren,result.keys().size());
  assertEquals("A host child",result.get(DESCRIPTION).asString());
  assertEquals(1,result.get(ATTRIBUTES).keys().size());
  assertEquals(ModelType.STRING,result.get(ATTRIBUTES,"name",TYPE).asType());
  assertEquals("The name of the host child",result.get(ATTRIBUTES,"name",DESCRIPTION).asString());
  assertTrue(result.get(ATTRIBUTES,"name",REQUIRED).asBoolean());
  assertEquals(1,result.get(ATTRIBUTES,"name",MIN_LENGTH).asInt());
  assertEquals(1,result.get(CHILDREN).keys().size());
  assertEquals("The children of the host child",result.get(CHILDREN,"child",DESCRIPTION).asString());
  assertEquals(1,result.get(CHILDREN,"child",MIN_OCCURS).asInt());
  assertEquals(1,result.get(CHILDREN,"child",MODEL_DESCRIPTION).keys().size());
  if (!operations) {
    assertFalse(result.has(OPERATIONS));
  }
 else {
    Set<String> ops=result.require(OPERATIONS).keys();
    assertTrue(ops.contains(READ_ATTRIBUTE_OPERATION));
    assertTrue(ops.contains(READ_CHILDREN_NAMES_OPERATION));
    assertTrue(ops.contains(READ_CHILDREN_TYPES_OPERATION));
    assertTrue(ops.contains(READ_OPERATION_DESCRIPTION_OPERATION));
    assertTrue(ops.contains(READ_OPERATION_NAMES_OPERATION));
    assertTrue(ops.contains(READ_RESOURCE_DESCRIPTION_OPERATION));
    assertTrue(ops.contains(READ_RESOURCE_OPERATION));
    assertTrue(ops.contains(WRITE_ATTRIBUTE_OPERATION));
    for (    String op : ops) {
      assertEquals(op,result.require(OPERATIONS).require(op).require(OPERATION_NAME).asString());
    }
  }
  checkHostChildChildSubModelDescription(result.get(CHILDREN,"child",MODEL_DESCRIPTION,"*"),operations);
}
