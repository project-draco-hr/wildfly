{
  assertEquals(4,result.keys().size());
  assertEquals(3,result.get(ATTRIBUTES).keys().size());
  assertEquals(ModelType.STRING,result.get(ATTRIBUTES,"name",TYPE).asType());
  assertEquals("name",result.get(ATTRIBUTES,"name",DESCRIPTION).asString());
  assertFalse(result.get(ATTRIBUTES,"name",NILLABLE).asBoolean());
  assertEquals(1,result.get(ATTRIBUTES,"name",MIN_LENGTH).asInt());
  assertEquals(ModelType.STRING,result.get(ATTRIBUTES,"value",TYPE).asType());
  assertEquals("value",result.get(ATTRIBUTES,"value",DESCRIPTION).asString());
  assertFalse(result.get(ATTRIBUTES,"value",NILLABLE).asBoolean());
  assertEquals(1,result.get(ATTRIBUTES,"value",MIN_LENGTH).asInt());
  if (!operations) {
    assertFalse(result.hasDefined(OPERATIONS));
  }
 else {
    Set<String> ops=result.require(OPERATIONS).keys();
    assertTrue(ops.contains("test-op"));
    for (    String op : ops) {
      assertEquals(op,result.require(OPERATIONS).require(op).require(OPERATION_NAME).asString());
    }
  }
}
