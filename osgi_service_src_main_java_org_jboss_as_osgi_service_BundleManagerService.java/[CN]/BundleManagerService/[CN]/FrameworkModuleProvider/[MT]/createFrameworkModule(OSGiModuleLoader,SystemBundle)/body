{
  ModuleLoader systemLoader=Module.getBootModuleLoader();
  ModuleIdentifier systemIdentifier=getSystemModule().getIdentifier();
  ModuleSpec.Builder specBuilder=ModuleSpec.build(ModuleIdentifier.create(Constants.JBOSGI_PREFIX + ".framework"));
  specBuilder.addDependency(DependencySpec.createModuleDependencySpec(PathFilters.acceptAll(),PathFilters.acceptAll(),osgiLoader,systemIdentifier,false));
  ModuleIdentifier frameworkIdentifier=ModuleIdentifier.create("org.jboss.osgi.framework");
  DependencySpec moduleDep=DependencySpec.createModuleDependencySpec(PathFilters.acceptAll(),PathFilters.acceptAll(),systemLoader,frameworkIdentifier,false);
  specBuilder.addDependency(moduleDep);
  String modulesProps=(String)getBundleManager().getProperty(SubsystemState.PROP_JBOSS_OSGI_SYSTEM_MODULES);
  if (modulesProps != null) {
    for (    String moduleProp : modulesProps.split(",")) {
      ModuleIdentifier moduleId=ModuleIdentifier.create(moduleProp.trim());
      moduleDep=DependencySpec.createModuleDependencySpec(PathFilters.acceptAll(),PathFilters.acceptAll(),systemLoader,moduleId,false);
      specBuilder.addDependency(moduleDep);
    }
  }
  ModuleSpec moduleSpec=specBuilder.create();
  osgiLoader.addModule(systemBundle.getCurrentRevision(),moduleSpec);
  try {
    frameworkModule=osgiLoader.loadModule(specBuilder.getIdentifier());
    return frameworkModule;
  }
 catch (  ModuleLoadException ex) {
    throw new IllegalStateException(ex);
  }
}
