{
  expectHeader(input,protocol.paramNumFiles());
  int numFiles=input.readInt();
  log.debugf("Received %d files for %s",numFiles,localPath);
switch (numFiles) {
case -1:
{
      break;
    }
case 0:
{
    if (!localPath.mkdirs()) {
      throw new CannotCreateLocalDirectoryException(localPath);
    }
    break;
  }
default :
{
  for (int i=0; i < numFiles; i++) {
    expectHeader(input,protocol.fileStart());
    expectHeader(input,protocol.paramFilePath());
    final String path=input.readUTF();
    expectHeader(input,protocol.paramFileSize());
    final long length=input.readLong();
    log.debugf("Received file [%s] of length %d",path,length);
    final File file=new File(localPath,path);
    if (!file.getParentFile().exists() && !file.getParentFile().mkdirs()) {
      throw new CannotCreateLocalDirectoryException(localPath.getParentFile());
    }
    long totalRead=0;
    OutputStream fileOut=null;
    try {
      fileOut=new BufferedOutputStream(new FileOutputStream(file));
      final byte[] buffer=new byte[8192];
      while (totalRead < length) {
        int len=Math.min((int)(length - totalRead),buffer.length);
        input.readFully(buffer,0,len);
        fileOut.write(buffer,0,len);
        totalRead+=len;
      }
    }
  finally {
      if (fileOut != null) {
        fileOut.close();
      }
    }
    if (totalRead != length) {
      throw new DidNotReadEntireFileException((length - totalRead));
    }
    expectHeader(input,protocol.fileEnd());
  }
}
}
resultHandler.done(localPath);
}
