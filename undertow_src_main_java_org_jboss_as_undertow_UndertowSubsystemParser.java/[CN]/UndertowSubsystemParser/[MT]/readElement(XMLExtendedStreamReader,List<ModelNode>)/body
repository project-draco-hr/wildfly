{
  PathAddress address=PathAddress.pathAddress(UndertowExtension.SUBSYSTEM_PATH);
  final ModelNode subsystem=Util.createAddOperation(address);
  list.add(subsystem);
  for (int i=0; i < reader.getAttributeCount(); i++) {
    requireNoNamespaceAttribute(reader,i);
    final String value=reader.getAttributeValue(i);
switch (reader.getAttributeLocalName(i)) {
case Constants.DEFAULT_SERVER:
      UndertowRootDefinition.DEFAULT_SERVER.parseAndSetParameter(value,subsystem,reader);
    break;
case Constants.DEFAULT_SERVLET_CONTAINER:
  UndertowRootDefinition.DEFAULT_SERVLET_CONTAINER.parseAndSetParameter(value,subsystem,reader);
break;
case Constants.DEFAULT_VIRTUAL_HOST:
UndertowRootDefinition.DEFAULT_VIRTUAL_HOST.parseAndSetParameter(value,subsystem,reader);
break;
case Constants.INSTANCE_ID:
UndertowRootDefinition.INSTANCE_ID.parseAndSetParameter(value,subsystem,reader);
break;
default :
throw unexpectedAttribute(reader,i);
}
}
final Namespace namespace=Namespace.forUri(reader.getNamespaceURI());
while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
switch (namespace) {
case UNDERTOW_1_0:
{
switch (reader.getLocalName()) {
case Constants.WORKER:
{
WorkerResourceDefinition.INSTANCE.parse(reader,address,list);
break;
}
case Constants.BUFFER_POOL:
{
BufferPoolResourceDefinition.INSTANCE.parse(reader,address,list);
break;
}
case Constants.SERVER:
{
ServerDefinition.INSTANCE.parse(reader,address,list);
break;
}
case Constants.SERVLET_CONTAINER:
{
ServletContainerDefinition.INSTANCE.parse(reader,address,list);
break;
}
default :
{
throw unexpectedElement(reader);
}
}
break;
}
default :
{
throw unexpectedElement(reader);
}
}
}
ParseUtils.requireNoContent(reader);
}
