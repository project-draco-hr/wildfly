{
  channelHandler.getAttachments().removeAttachment(TransactionalProtocolClient.SEND_SUBJECT);
  return executorService.submit(new Callable<Connection>(){
    @Override public Connection call() throws Exception {
      final ReconnectPolicy reconnectPolicy=ReconnectPolicy.RECONNECT;
      int reconnectionCount=0;
      for (; ; ) {
        reconnectPolicy.wait(reconnectionCount);
        HostControllerLogger.ROOT_LOGGER.reconnectingToMaster();
        for (Iterator<DiscoveryOption> i=discoveryOptions.iterator(); i.hasNext(); ) {
          DiscoveryOption discoveryOption=i.next();
          URI masterURI=null;
          try {
            discoveryOption.discover();
            String host=discoveryOption.getRemoteDomainControllerHost();
            int port=discoveryOption.getRemoteDomainControllerPort();
            masterURI=new URI("remote://" + NetworkUtils.formatPossibleIpv6Address(host) + ":"+ port);
            setUri(masterURI);
            HostControllerLogger.ROOT_LOGGER.debugf("trying to reconnect to remote host-controller at %s",masterURI);
            try {
              Connection connection=connectionManager.connect();
              HostControllerLogger.ROOT_LOGGER.connectedToMaster(masterURI);
              return connection;
            }
 catch (            IOException ioe) {
              RemoteDomainConnectionService.rethrowIrrecoverableConnectionFailures(ioe);
              throw ioe;
            }
          }
 catch (          Exception e) {
            RemoteDomainConnectionService.logConnectionException(masterURI,discoveryOption,i.hasNext(),e);
          }
        }
        reconnectionCount++;
      }
    }
  }
);
}
