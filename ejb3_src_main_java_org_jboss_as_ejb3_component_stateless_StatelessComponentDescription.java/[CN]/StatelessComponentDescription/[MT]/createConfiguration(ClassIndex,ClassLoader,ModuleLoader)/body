{
  final ComponentConfiguration statelessComponentConfiguration=new ComponentConfiguration(this,classIndex,moduleClassLoader,moduleLoader);
  statelessComponentConfiguration.setComponentCreateServiceFactory(new StatelessComponentCreateServiceFactory());
  final StatelessComponentDescription statelessComponentDescription=(StatelessComponentDescription)statelessComponentConfiguration.getComponentDescription();
  statelessComponentConfiguration.getCreateDependencies().add(new PoolInjectingConfigurator(statelessComponentDescription));
  if (TransactionManagementType.BEAN.equals(this.getTransactionManagementType())) {
    getConfigurators().add(new ComponentConfigurator(){
      @Override public void configure(      final DeploymentPhaseContext context,      final ComponentDescription description,      final ComponentConfiguration configuration) throws DeploymentUnitProcessingException {
        configuration.addComponentInterceptor(EjbBMTInterceptor.FACTORY,InterceptorOrder.Component.BMT_TRANSACTION_INTERCEPTOR,false);
      }
    }
);
  }
  getConfigurators().add(new ComponentConfigurator(){
    @Override public void configure(    final DeploymentPhaseContext context,    final ComponentDescription description,    final ComponentConfiguration configuration) throws DeploymentUnitProcessingException {
      if (TransactionManagementType.CONTAINER.equals(getTransactionManagementType())) {
        final EEApplicationClasses applicationClasses=context.getDeploymentUnit().getAttachment(Attachments.EE_APPLICATION_CLASSES_DESCRIPTION);
        InterceptorClassDescription interceptorConfig=ComponentDescription.mergeInterceptorConfig(configuration.getComponentClass(),applicationClasses.getClassByName(description.getComponentClassName()),description,MetadataCompleteMarker.isMetadataComplete(context.getDeploymentUnit()));
        configuration.addPostConstructInterceptor(new LifecycleCMTTxInterceptor.Factory(interceptorConfig.getPostConstruct(),true),InterceptorOrder.ComponentPostConstruct.TRANSACTION_INTERCEPTOR);
        configuration.addPreDestroyInterceptor(new LifecycleCMTTxInterceptor.Factory(interceptorConfig.getPreDestroy(),true),InterceptorOrder.ComponentPreDestroy.TRANSACTION_INTERCEPTOR);
        configuration.addTimeoutViewInterceptor(TimerCMTTxInterceptor.FACTORY,InterceptorOrder.View.CMT_TRANSACTION_INTERCEPTOR);
      }
      configuration.addTimeoutViewInterceptor(StatelessComponentInstanceAssociatingFactory.instance(),InterceptorOrder.View.ASSOCIATING_INTERCEPTOR);
    }
  }
);
  return statelessComponentConfiguration;
}
