{
  final ComponentConfiguration statelessComponentConfiguration=new ComponentConfiguration(this,classIndex);
  statelessComponentConfiguration.setComponentCreateServiceFactory(new StatelessComponentCreateServiceFactory());
  final StatelessComponentDescription statelessComponentDescription=(StatelessComponentDescription)statelessComponentConfiguration.getComponentDescription();
  statelessComponentConfiguration.getCreateDependencies().add(new PoolInjectingConfigurator(statelessComponentDescription));
  if (TransactionManagementType.BEAN.equals(this.getTransactionManagementType())) {
    getConfigurators().add(new ComponentConfigurator(){
      @Override public void configure(      final DeploymentPhaseContext context,      final ComponentDescription description,      final ComponentConfiguration configuration) throws DeploymentUnitProcessingException {
        final ComponentInstanceInterceptorFactory slsbBmtInterceptorFactory=new ComponentInstanceInterceptorFactory(){
          @Override protected Interceptor create(          Component component,          InterceptorFactoryContext context){
            if (!(component instanceof StatelessSessionComponent)) {
              throw new IllegalArgumentException("Component " + component + " with component class: "+ component.getComponentClass()+ " isn't a stateless component");
            }
            return new StatelessBMTInterceptor((StatelessSessionComponent)component);
          }
        }
;
        configuration.addComponentInterceptor(slsbBmtInterceptorFactory,InterceptorOrder.Component.BMT_TRANSACTION_INTERCEPTOR,false);
        configuration.addTimeoutInterceptor(slsbBmtInterceptorFactory,InterceptorOrder.Component.BMT_TRANSACTION_INTERCEPTOR);
      }
    }
);
  }
 else {
    getConfigurators().add(new ComponentConfigurator(){
      @Override public void configure(      final DeploymentPhaseContext context,      final ComponentDescription description,      final ComponentConfiguration configuration) throws DeploymentUnitProcessingException {
        configuration.addTimeoutInterceptor(TimerCMTTxInterceptor.FACTORY,InterceptorOrder.Component.TIMEOUT_CMT_INTERCEPTOR);
      }
    }
);
  }
  return statelessComponentConfiguration;
}
