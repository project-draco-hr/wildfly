{
  final String trimmed=value == null ? null : value.trim();
  ModelNode node;
  if (trimmed != null) {
    if (isAllowExpression()) {
      node=ParseUtils.parsePossibleExpression(trimmed);
    }
 else {
      node=new ModelNode().set(trimmed);
    }
    if (node.getType() != ModelType.EXPRESSION) {
switch (getType()) {
case BIG_DECIMAL:
        node.set(node.asBigDecimal());
      break;
case BIG_INTEGER:
    node.set(node.asBigInteger());
  break;
case BOOLEAN:
node.set(node.asBoolean());
break;
case BYTES:
node.set(node.asBytes());
break;
case DOUBLE:
node.set(node.asDouble());
break;
case INT:
node.set(node.asInt());
break;
case LONG:
node.set(node.asLong());
break;
}
}
}
 else if (getDefaultValue().isDefined()) {
node=new ModelNode().set(getDefaultValue());
}
 else {
node=new ModelNode();
}
try {
getValidator().validateParameter(getXmlName(),node);
}
 catch (OperationFailedException e) {
throw new XMLStreamException(e.getFailureDescription().toString(),location);
}
return node;
}
