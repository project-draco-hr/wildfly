{
  final PathAddress address=PathAddress.pathAddress(operation.require(OP_ADDR));
  final String name=address.getLastElement().getValue();
  applyToModel(context.getSubModel(),operation);
  if (context.getRuntimeContext() != null) {
    final ServiceTarget target=context.getRuntimeContext().getServiceTarget();
    final ConnectorService connectorService=new ConnectorService();
    connectorService.setOptionMap(createOptionMap(operation));
    final ServiceName connectorName=RemotingServices.connectorServiceName(name);
    try {
      target.addService(connectorName,connectorService).addDependency(connectorName.append("auth-provider"),ServerAuthenticationProvider.class,connectorService.getAuthenticationProviderInjector()).addDependency(RemotingServices.ENDPOINT,Endpoint.class,connectorService.getEndpointInjector()).setInitialMode(ServiceController.Mode.ACTIVE).addListener(new ResultHandler.ServiceStartListener(resultHandler)).install();
    }
 catch (    ServiceRegistryException e) {
      throw new OperationFailedException(new ModelNode().set(e.getLocalizedMessage()));
    }
  }
 else {
    resultHandler.handleResultComplete();
  }
  final ModelNode compensating=Util.getResourceRemoveOperation(operation.require(OP_ADDR));
  return new BasicOperationResult(compensating);
}
