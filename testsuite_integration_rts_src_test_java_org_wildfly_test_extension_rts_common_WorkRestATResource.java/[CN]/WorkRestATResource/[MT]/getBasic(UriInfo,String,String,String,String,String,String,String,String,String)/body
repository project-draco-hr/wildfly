{
  Work work=faults.get(pId);
  String res=null;
  boolean isVolatile="true".equals(isVolatileParticipant);
  boolean isTwoPhaseAware="true".equals(twoPhaseAware);
  if (name.length() != 0) {
    if (value.length() != 0) {
      if (work == null) {
        work=makeWork(new TxSupport(),info.getAbsolutePath().toString(),String.valueOf(++pid),null,null,isTwoPhaseAware,isVolatile,null,null);
        work.oldState.put(name,value);
        faults.put(work.id,work);
        return work.id;
      }
      work.newState.put(name,value);
    }
    if (work != null) {
      if ("syncCount".equals(name))       res=String.valueOf(work.syncCount);
 else       if ("commitCnt".equals(name))       res=String.valueOf(work.commitCnt);
 else       if ("prepareCnt".equals(name))       res=String.valueOf(work.prepareCnt);
 else       if ("rollbackCnt".equals(name))       res=String.valueOf(work.rollbackCnt);
 else       if ("commmitOnePhaseCnt".equals(name))       res=String.valueOf(work.commmitOnePhaseCnt);
 else       if (work.inTxn())       res=work.newState.get(name);
 else       res=work.oldState.get(name);
    }
  }
  if (work == null)   throw new WebApplicationException(HttpURLConnection.HTTP_NOT_FOUND);
  if ("move".equals(query)) {
  }
 else   if ("recoveryUrl".equals(query))   res=work.recoveryUrl;
 else   if ("status".equals(query))   res=work.status;
 else   if (res == null)   res=work.pLinks;
  return res;
}
