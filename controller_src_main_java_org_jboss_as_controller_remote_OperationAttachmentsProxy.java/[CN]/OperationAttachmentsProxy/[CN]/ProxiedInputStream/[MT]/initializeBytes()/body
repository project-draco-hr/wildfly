{
  if (bytes == null) {
    try {
      channelAssociation.executeRequest(batchId,new AbstractManagementRequest<Object,Object>(){
        @Override public byte getOperationType(){
          return ModelControllerProtocol.GET_INPUTSTREAM_REQUEST;
        }
        @Override protected void sendRequest(        ActiveOperation.ResultHandler<Object> resultHandler,        ManagementRequestContext<Object> context,        FlushableDataOutput output) throws IOException {
          output.write(ModelControllerProtocol.PARAM_INPUTSTREAM_INDEX);
          output.writeInt(index);
        }
        @Override public void handleRequest(        DataInput input,        ActiveOperation.ResultHandler<Object> resultHandler,        ManagementRequestContext<Object> context) throws IOException {
synchronized (ProxiedInputStream.this) {
            ProtocolUtils.expectHeader(input,ModelControllerProtocol.PARAM_INPUTSTREAM_LENGTH);
            final int size=input.readInt();
            ProtocolUtils.expectHeader(input,ModelControllerProtocol.PARAM_INPUTSTREAM_CONTENTS);
            final byte[] buf=new byte[size];
            for (int i=0; i < size; i++) {
              buf[i]=input.readByte();
            }
            bytes=buf;
            ProxiedInputStream.this.notifyAll();
          }
        }
      }
);
    }
 catch (    IOException e) {
      error=e;
    }
  }
}
