{
  final ModelNode passByValueModel=this.attributeDefinition.resolveModelAttribute(context,model);
  final ServiceRegistry registry=context.getServiceRegistry(true);
  final ServiceName localEJBReceiverServiceName;
  if (passByValueModel.isDefined()) {
    final boolean passByValue=passByValueModel.asBoolean(true);
    if (passByValue) {
      localEJBReceiverServiceName=LocalEjbReceiver.BY_VALUE_SERVICE_NAME;
    }
 else {
      localEJBReceiverServiceName=LocalEjbReceiver.BY_REFERENCE_SERVICE_NAME;
    }
  }
 else {
    localEJBReceiverServiceName=LocalEjbReceiver.BY_VALUE_SERVICE_NAME;
  }
  final ServiceController<?> existingDefaultLocalEJBReceiverServiceController=registry.getService(LocalEjbReceiver.DEFAULT_LOCAL_EJB_RECEIVER_SERVICE_NAME);
  if (existingDefaultLocalEJBReceiverServiceController != null) {
    context.removeService(existingDefaultLocalEJBReceiverServiceController);
  }
  final ServiceTarget serviceTarget=context.getServiceTarget();
  final ValueInjectionService<LocalEjbReceiver> newDefaultLocalEJBReceiverService=new ValueInjectionService<LocalEjbReceiver>();
  final ServiceBuilder defaultLocalEJBReceiverServiceBuilder=serviceTarget.addService(LocalEjbReceiver.DEFAULT_LOCAL_EJB_RECEIVER_SERVICE_NAME,newDefaultLocalEJBReceiverService);
  defaultLocalEJBReceiverServiceBuilder.addDependency(localEJBReceiverServiceName,LocalEjbReceiver.class,newDefaultLocalEJBReceiverService.getInjector());
  final ServiceController defaultLocalEJBReceiverServiceController=defaultLocalEJBReceiverServiceBuilder.install();
}
