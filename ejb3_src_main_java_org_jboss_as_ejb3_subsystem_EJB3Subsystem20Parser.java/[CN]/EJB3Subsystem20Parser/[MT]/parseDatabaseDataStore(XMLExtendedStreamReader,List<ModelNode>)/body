{
  String name=null;
  String datasourceJndiName=null;
  String database=null;
  final EnumSet<EJB3SubsystemXMLAttribute> required=EnumSet.of(EJB3SubsystemXMLAttribute.NAME,EJB3SubsystemXMLAttribute.DATASOURCE_JNDI_NAME);
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    requireNoNamespaceAttribute(reader,i);
    final String value=reader.getAttributeValue(i);
    final EJB3SubsystemXMLAttribute attribute=EJB3SubsystemXMLAttribute.forName(reader.getAttributeLocalName(i));
    required.remove(attribute);
switch (attribute) {
case NAME:
      if (name != null) {
        throw unexpectedAttribute(reader,i);
      }
    name=reader.getAttributeValue(i);
  break;
case DATASOURCE_JNDI_NAME:
if (datasourceJndiName != null) {
  throw unexpectedAttribute(reader,i);
}
datasourceJndiName=DatabaseDataStoreResourceDefinition.DATASOURCE_JNDI_NAME.parse(value,reader).asString();
break;
case DATABASE:
if (database != null) {
throw unexpectedAttribute(reader,i);
}
database=DatabaseDataStoreResourceDefinition.DATABASE.parse(value,reader).asString();
break;
default :
throw unexpectedAttribute(reader,i);
}
}
if (!required.isEmpty()) {
throw missingRequired(reader,required);
}
final ModelNode address=new ModelNode();
address.add(SUBSYSTEM,EJB3Extension.SUBSYSTEM_NAME);
address.add(SERVICE,TIMER_SERVICE);
address.add(DATABASE_DATA_STORE,name);
final ModelNode databaseDataStore=new ModelNode();
databaseDataStore.get(OP).set(ADD);
databaseDataStore.get(ADDRESS).set(address);
databaseDataStore.get(DATASOURCE_JNDI_NAME).set(datasourceJndiName);
if (database != null) {
databaseDataStore.get(DATABASE).set(database);
}
operations.add(databaseDataStore);
requireNoContent(reader);
}
