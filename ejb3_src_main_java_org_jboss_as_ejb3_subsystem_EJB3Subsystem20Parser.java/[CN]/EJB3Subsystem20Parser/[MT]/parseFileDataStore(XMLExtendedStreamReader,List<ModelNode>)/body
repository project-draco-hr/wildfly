{
  String dataStorePath=null;
  String dataStorePathRelativeTo=null;
  String name=null;
  final EnumSet<EJB3SubsystemXMLAttribute> required=EnumSet.of(EJB3SubsystemXMLAttribute.NAME,EJB3SubsystemXMLAttribute.PATH);
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    requireNoNamespaceAttribute(reader,i);
    final String value=reader.getAttributeValue(i);
    final EJB3SubsystemXMLAttribute attribute=EJB3SubsystemXMLAttribute.forName(reader.getAttributeLocalName(i));
    required.remove(attribute);
switch (attribute) {
case NAME:
      if (name != null) {
        throw unexpectedAttribute(reader,i);
      }
    name=reader.getAttributeValue(i);
  break;
case PATH:
if (dataStorePath != null) {
  throw unexpectedAttribute(reader,i);
}
dataStorePath=FileDataStoreResourceDefinition.PATH.parse(value,reader).asString();
break;
case RELATIVE_TO:
if (dataStorePathRelativeTo != null) {
throw unexpectedAttribute(reader,i);
}
dataStorePathRelativeTo=FileDataStoreResourceDefinition.RELATIVE_TO.parse(value,reader).asString();
break;
default :
throw unexpectedAttribute(reader,i);
}
}
if (!required.isEmpty()) {
throw missingRequired(reader,required);
}
final ModelNode address=new ModelNode();
address.add(SUBSYSTEM,EJB3Extension.SUBSYSTEM_NAME);
address.add(SERVICE,TIMER_SERVICE);
address.add(FILE_DATA_STORE,name);
final ModelNode fileDataStoreAdd=new ModelNode();
fileDataStoreAdd.get(OP).set(ADD);
fileDataStoreAdd.get(ADDRESS).set(address);
fileDataStoreAdd.get(PATH).set(dataStorePath);
if (dataStorePathRelativeTo != null) {
fileDataStoreAdd.get(RELATIVE_TO).set(dataStorePathRelativeTo);
}
operations.add(fileDataStoreAdd);
requireNoContent(reader);
}
