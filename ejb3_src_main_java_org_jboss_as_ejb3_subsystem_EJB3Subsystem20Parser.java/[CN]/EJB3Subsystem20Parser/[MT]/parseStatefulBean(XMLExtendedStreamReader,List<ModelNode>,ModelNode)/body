{
  final int count=reader.getAttributeCount();
  final EnumSet<EJB3SubsystemXMLAttribute> missingRequiredAttributes=EnumSet.of(EJB3SubsystemXMLAttribute.DEFAULT_ACCESS_TIMEOUT,EJB3SubsystemXMLAttribute.CACHE_REF);
  for (int i=0; i < count; i++) {
    requireNoNamespaceAttribute(reader,i);
    final String value=reader.getAttributeValue(i);
    final EJB3SubsystemXMLAttribute attribute=EJB3SubsystemXMLAttribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case DEFAULT_ACCESS_TIMEOUT:
{
        EJB3SubsystemRootResourceDefinition.DEFAULT_STATEFUL_BEAN_ACCESS_TIMEOUT.parseAndSetParameter(value,ejb3SubsystemAddOperation,reader);
        break;
      }
case CACHE_REF:
{
      EJB3SubsystemRootResourceDefinition.DEFAULT_SFSB_CACHE.parseAndSetParameter(value,ejb3SubsystemAddOperation,reader);
      break;
    }
case CLUSTERED_CACHE_REF:
{
    EJB3SubsystemRootResourceDefinition.DEFAULT_CLUSTERED_SFSB_CACHE.parseAndSetParameter(value,ejb3SubsystemAddOperation,reader);
    break;
  }
case PASSIVATION_DISABLED_CACHE_REF:
{
  EJB3SubsystemRootResourceDefinition.DEFAULT_SFSB_PASSIVATION_DISABLED_CACHE.parseAndSetParameter(value,ejb3SubsystemAddOperation,reader);
  break;
}
default :
{
throw unexpectedAttribute(reader,i);
}
}
missingRequiredAttributes.remove(attribute);
}
requireNoContent(reader);
if (!missingRequiredAttributes.isEmpty()) {
throw missingRequired(reader,missingRequiredAttributes);
}
}
