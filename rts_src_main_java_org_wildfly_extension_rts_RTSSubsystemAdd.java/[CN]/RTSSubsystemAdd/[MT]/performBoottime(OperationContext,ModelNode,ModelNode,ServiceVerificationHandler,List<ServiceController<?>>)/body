{
  if (RTSLogger.ROOT_LOGGER.isTraceEnabled()) {
    RTSLogger.ROOT_LOGGER.trace("RTSSubsystemAdd.performBoottime");
  }
  final String serverName=model.get(Attribute.SERVER.getLocalName()).asString();
  final String hostName=model.get(Attribute.HOST.getLocalName()).asString();
  final String socketBindingName=model.get(Attribute.SOCKET_BINDING.getLocalName()).asString();
  final CoordinatorService coordinatorService=new CoordinatorService();
  final ParticipantService participantService=new ParticipantService();
  final ServiceBuilder<CoordinatorService> coordinatorServiceBuilder=context.getServiceTarget().addService(RTSSubsystemExtension.COORDINATOR,coordinatorService).addListener(verificationHandler).addDependency(UndertowService.virtualHostName(serverName,hostName),Host.class,coordinatorService.getInjectedHost());
  final ServiceBuilder<ParticipantService> participantServiceBuilder=context.getServiceTarget().addService(RTSSubsystemExtension.PARTICIPANT,participantService).addListener(verificationHandler).addDependency(SocketBinding.JBOSS_BINDING_NAME.append(socketBindingName),SocketBinding.class,participantService.getInjectedSocketBinding()).addDependency(UndertowService.virtualHostName(serverName,hostName),Host.class,participantService.getInjectedHost());
  coordinatorServiceBuilder.setInitialMode(ServiceController.Mode.ACTIVE);
  participantServiceBuilder.setInitialMode(ServiceController.Mode.ACTIVE);
  final ServiceController<CoordinatorService> coordinatorServiceController=coordinatorServiceBuilder.install();
  final ServiceController<ParticipantService> participantServiceController=participantServiceBuilder.install();
  if (newControllers != null) {
    newControllers.add(coordinatorServiceController);
    newControllers.add(participantServiceController);
  }
}
