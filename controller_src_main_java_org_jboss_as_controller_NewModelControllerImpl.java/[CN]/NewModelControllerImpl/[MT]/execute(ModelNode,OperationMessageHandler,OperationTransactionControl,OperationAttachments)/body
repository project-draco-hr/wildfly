{
  final ModelNode headers=operation.get(OPERATION_HEADERS);
  final boolean rollbackOnFailure=headers == null || headers.get(ROLLBACK_ON_RUNTIME_FAILURE).asBoolean(true);
  final EnumSet<NewOperationContextImpl.ContextFlag> contextFlags=rollbackOnFailure ? EnumSet.of(NewOperationContextImpl.ContextFlag.ROLLBACK_ON_FAIL) : EnumSet.noneOf(NewOperationContextImpl.ContextFlag.class);
  NewOperationContextImpl context=new NewOperationContextImpl(this,controllerType,contextFlags,handler,attachments,modelReference.get(),control,processState,bootingFlag.getAndSet(false));
  ModelNode response=new ModelNode();
  if (prepareStep != null) {
    context.addStep(response,operation,prepareStep,NewOperationContext.Stage.MODEL);
  }
  context.addStep(response,operation,new NewStepHandler(){
    public void execute(    final NewOperationContext context,    final ModelNode operation){
      if (context.completeStep() == NewOperationContext.ResultAction.KEEP && context.isModelAffected()) {
      }
    }
  }
,NewOperationContext.Stage.VERIFY);
  NewStepHandler stepHandler=rootRegistration.getOperationHandler(PathAddress.pathAddress(operation.require(ADDRESS)),operation.require(OP).asString());
  context.addStep(response,operation,stepHandler,NewOperationContext.Stage.MODEL);
  RB_ON_RT_FAILURE.set(Boolean.valueOf(rollbackOnFailure));
  try {
    context.completeStep();
  }
  finally {
    RB_ON_RT_FAILURE.set(null);
  }
  ControlledProcessState.State state=processState.getState();
switch (state) {
case RELOAD_REQUIRED:
case RESTART_REQUIRED:
    response.get(RESPONSE_HEADERS,PROCESS_STATE).set(state.toString());
  break;
default :
break;
}
return response;
}
