{
  final DeploymentUnit deploymentUnit=phaseContext.getDeploymentUnit();
  final DeploymentClassIndex classIndex=deploymentUnit.getAttachment(Attachments.CLASS_INDEX);
  if (!WeldDeploymentMarker.isWeldDeployment(deploymentUnit)) {
    return;
  }
  final DeploymentUnit topLevelDeployment=deploymentUnit.getParent() == null ? deploymentUnit : deploymentUnit.getParent();
  final EEModuleDescription eeModuleDescription=deploymentUnit.getAttachment(org.jboss.as.ee.component.Attachments.EE_MODULE_DESCRIPTION);
  final ServiceName weldBootstrapService=topLevelDeployment.getServiceName().append(WeldBootstrapService.SERVICE_NAME);
  final ServiceName weldStartService=topLevelDeployment.getServiceName().append(WeldStartService.SERVICE_NAME);
  WeldClassIntrospector.install(deploymentUnit,phaseContext.getServiceTarget());
  eeModuleDescription.setDefaultClassIntrospectorServiceName(WeldClassIntrospector.serviceName(deploymentUnit));
  for (  ComponentDescription component : eeModuleDescription.getComponentDescriptions()) {
    final String beanName;
    if (component instanceof EJBComponentDescription) {
      beanName=component.getComponentName();
    }
 else {
      beanName=null;
    }
    component.getConfigurators().addFirst(new ComponentConfigurator(){
      @Override public void configure(      final DeploymentPhaseContext context,      final ComponentDescription description,      final ComponentConfiguration configuration) throws DeploymentUnitProcessingException {
        final Class<?> componentClass=configuration.getComponentClass();
        final DeploymentUnit deploymentUnit=context.getDeploymentUnit();
        final ModuleClassLoader classLoader=deploymentUnit.getAttachment(Attachments.MODULE).getClassLoader();
        final Set<Class<?>> interceptorClasses=new HashSet<Class<?>>();
        for (        InterceptorDescription interceptorDescription : description.getAllInterceptors()) {
          try {
            final ClassIndex index=classIndex.classIndex(interceptorDescription.getInterceptorClassName());
            interceptorClasses.add(index.getModuleClass());
          }
 catch (          ClassNotFoundException e) {
            throw WeldMessages.MESSAGES.couldNotLoadInterceptorClass(interceptorDescription.getInterceptorClassName(),e);
          }
        }
        addWeldIntegration(context.getServiceTarget(),configuration,description,componentClass,beanName,weldBootstrapService,weldStartService,interceptorClasses,classLoader,description.getBeanDeploymentArchiveId());
        if (description instanceof StatefulComponentDescription) {
          configuration.getInterceptorContextKeys().add(SerializedCdiInterceptorsKey.class);
        }
      }
    }
);
  }
}
