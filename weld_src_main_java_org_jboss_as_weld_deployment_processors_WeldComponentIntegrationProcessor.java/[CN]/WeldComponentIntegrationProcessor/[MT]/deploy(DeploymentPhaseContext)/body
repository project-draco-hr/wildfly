{
  final DeploymentUnit deploymentUnit=phaseContext.getDeploymentUnit();
  if (!WeldDeploymentMarker.isWeldDeployment(deploymentUnit)) {
    return;
  }
  final EEModuleDescription eeModuleDescription=deploymentUnit.getAttachment(org.jboss.as.ee.component.Attachments.EE_MODULE_DESCRIPTION);
  final ServiceName beanManagerServiceName=BeanManagerService.serviceName(deploymentUnit);
  for (  ComponentDescription component : eeModuleDescription.getComponentDescriptions()) {
    final String beanName;
    if (component instanceof SessionBeanComponentDescription) {
      beanName=component.getComponentName();
    }
 else {
      beanName=null;
    }
    component.getConfigurators().addFirst(new ComponentConfigurator(){
      @Override public void configure(      final DeploymentPhaseContext context,      final ComponentDescription description,      final ComponentConfiguration configuration) throws DeploymentUnitProcessingException {
        final Class<?> componentClass=configuration.getModuleClassConfiguration().getModuleClass();
        final EEModuleConfiguration module=configuration.getModuleClassConfiguration().getModuleConfiguration();
        final ModuleClassLoader classLoader=deploymentUnit.getAttachment(Attachments.MODULE).getClassLoader();
        final Set<Class<?>> interceptorClasses=new HashSet<Class<?>>();
        for (        InterceptorDescription interceptorDescription : description.getAllInterceptors().values()) {
          EEModuleClassConfiguration clazz=module.getClassConfiguration(interceptorDescription.getInterceptorClassName());
          if (clazz != null) {
            interceptorClasses.add(clazz.getModuleClass());
          }
        }
        addWeldInstantiator(context.getServiceTarget(),configuration,componentClass,beanName,deploymentUnit.getServiceName(),beanManagerServiceName,interceptorClasses,classLoader);
        configuration.getPostConstructInterceptors().addLast(new WeldInjectionInterceptor.Factory(configuration,interceptorClasses));
      }
    }
);
  }
}
