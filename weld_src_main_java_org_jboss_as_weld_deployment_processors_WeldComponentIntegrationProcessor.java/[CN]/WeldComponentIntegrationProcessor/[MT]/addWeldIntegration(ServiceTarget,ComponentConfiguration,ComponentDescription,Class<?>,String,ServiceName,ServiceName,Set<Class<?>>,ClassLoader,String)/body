{
  final ServiceName serviceName=configuration.getComponentDescription().getServiceName().append("WeldInstantiator");
  final WeldComponentService weldComponentService=new WeldComponentService(componentClass,beanName,interceptorClasses,classLoader,beanDeploymentArchiveId,description.isCDIInterceptorEnabled(),description);
  ServiceBuilder<WeldComponentService> builder=target.addService(serviceName,weldComponentService).addDependency(weldServiceName,WeldBootstrapService.class,weldComponentService.getWeldContainer()).addDependency(weldStartService);
  configuration.setInstanceFactory(WeldManagedReferenceFactory.INSTANCE);
  configuration.getStartDependencies().add(new DependencyConfigurator<ComponentStartService>(){
    @Override public void configureDependency(    final ServiceBuilder<?> serviceBuilder,    ComponentStartService service) throws DeploymentUnitProcessingException {
      serviceBuilder.addDependency(serviceName);
    }
  }
);
  if (description instanceof EJBComponentDescription) {
    final ServiceName bindingServiceName=addWeldInterceptorBindingService(target,configuration,componentClass,beanName,weldServiceName,weldStartService,beanDeploymentArchiveId);
    final EjbRequestScopeActivationInterceptor.Factory requestFactory=new EjbRequestScopeActivationInterceptor.Factory(weldServiceName);
    configuration.addComponentInterceptor(requestFactory,InterceptorOrder.Component.CDI_REQUEST_SCOPE,false);
    addJsr299BindingsCreateInterceptor(configuration,description,beanName,weldServiceName,builder,bindingServiceName);
    addCommonLifecycleInterceptionSupport(configuration,builder,bindingServiceName,weldServiceName);
    configuration.addComponentInterceptor(new UserInterceptorFactory(factory(InterceptionType.AROUND_INVOKE,builder,bindingServiceName),factory(InterceptionType.AROUND_TIMEOUT,builder,bindingServiceName)),InterceptorOrder.Component.CDI_INTERCEPTORS,false);
    if (description.isPassivationApplicable()) {
      configuration.addPrePassivateInterceptor(factory(InterceptionType.PRE_PASSIVATE,builder,bindingServiceName),InterceptorOrder.ComponentPassivation.CDI_INTERCEPTORS);
      configuration.addPostActivateInterceptor(factory(InterceptionType.POST_ACTIVATE,builder,bindingServiceName),InterceptorOrder.ComponentPassivation.CDI_INTERCEPTORS);
    }
  }
 else   if (description instanceof ManagedBeanComponentDescription) {
    final ServiceName bindingServiceName=addWeldInterceptorBindingService(target,configuration,componentClass,beanName,weldServiceName,weldStartService,beanDeploymentArchiveId);
    addJsr299BindingsCreateInterceptor(configuration,description,beanName,weldServiceName,builder,bindingServiceName);
    addCommonLifecycleInterceptionSupport(configuration,builder,bindingServiceName,weldServiceName);
    configuration.addComponentInterceptor(new UserInterceptorFactory(factory(InterceptionType.AROUND_INVOKE,builder,bindingServiceName),factory(InterceptionType.AROUND_TIMEOUT,builder,bindingServiceName)),InterceptorOrder.Component.CDI_INTERCEPTORS,false);
  }
 else   if (!Utils.isComponentWithView(description)) {
    description.setIgnoreLifecycleInterceptors(true);
    configuration.addPostConstructInterceptor(new ImmediateInterceptorFactory(new AbstractInjectionTargetDelegatingInterceptor(){
      @Override protected void run(      Object instance){
        weldComponentService.getInjectionTarget().postConstruct(instance);
      }
    }
),InterceptorOrder.ComponentPostConstruct.CDI_INTERCEPTORS);
    configuration.addPreDestroyInterceptor(new ImmediateInterceptorFactory(new AbstractInjectionTargetDelegatingInterceptor(){
      @Override protected void run(      Object instance){
        weldComponentService.getInjectionTarget().preDestroy(instance);
      }
    }
),InterceptorOrder.ComponentPreDestroy.CDI_INTERCEPTORS);
  }
  builder.install();
  configuration.addPostConstructInterceptor(new ImmediateInterceptorFactory(new WeldInjectionContextInterceptor(weldComponentService)),InterceptorOrder.ComponentPostConstruct.WELD_INJECTION_CONTEXT_INTERCEPTOR);
  configuration.addPostConstructInterceptor(new ImmediateInterceptorFactory(new WeldInterceptorInjectionInterceptor(interceptorClasses)),InterceptorOrder.ComponentPostConstruct.INTERCEPTOR_WELD_INJECTION);
  configuration.addPostConstructInterceptor(WeldInjectionInterceptor.FACTORY,InterceptorOrder.ComponentPostConstruct.COMPONENT_WELD_INJECTION);
}
