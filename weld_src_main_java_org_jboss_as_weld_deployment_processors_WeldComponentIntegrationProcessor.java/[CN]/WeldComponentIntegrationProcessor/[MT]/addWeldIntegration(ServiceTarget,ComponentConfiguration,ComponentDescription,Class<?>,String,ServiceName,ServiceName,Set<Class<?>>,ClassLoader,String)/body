{
  final ServiceName serviceName=configuration.getComponentDescription().getServiceName().append("WeldInstantiator");
  final WeldComponentService weldComponentService=new WeldComponentService(componentClass,beanName,interceptorClasses,classLoader,beanDeploymentArchiveId,description.isCDIInterceptorEnabled(),description);
  ServiceBuilder<WeldComponentService> builder=target.addService(serviceName,weldComponentService).addDependency(weldServiceName,WeldBootstrapService.class,weldComponentService.getWeldContainer()).addDependency(weldStartService);
  configuration.setInstanceFactory(WeldManagedReferenceFactory.INSTANCE);
  configuration.getStartDependencies().add(new DependencyConfigurator<ComponentStartService>(){
    @Override public void configureDependency(    final ServiceBuilder<?> serviceBuilder,    ComponentStartService service) throws DeploymentUnitProcessingException {
      serviceBuilder.addDependency(serviceName);
    }
  }
);
  if (description instanceof EJBComponentDescription) {
    final WeldInterceptorBindingsService weldInterceptorBindingsService=new WeldInterceptorBindingsService(beanDeploymentArchiveId,configuration.getComponentName());
    ServiceName bindingServiceName=configuration.getComponentDescription().getServiceName().append(WeldInterceptorBindingsService.SERVICE_NAME);
    target.addService(bindingServiceName,weldInterceptorBindingsService).addDependency(weldServiceName,WeldBootstrapService.class,weldInterceptorBindingsService.getWeldContainer()).addDependency(weldStartService).install();
    final EjbRequestScopeActivationInterceptor.Factory requestFactory=new EjbRequestScopeActivationInterceptor.Factory(weldServiceName);
    configuration.addComponentInterceptor(requestFactory,InterceptorOrder.Component.CDI_REQUEST_SCOPE,false);
    final Jsr299BindingsCreateInterceptor createInterceptor=new Jsr299BindingsCreateInterceptor(description.getBeanDeploymentArchiveId(),beanName);
    configuration.addPostConstructInterceptor(new ImmediateInterceptorFactory(createInterceptor),InterceptorOrder.ComponentPostConstruct.CREATE_CDI_INTERCEPTORS);
    builder.addDependency(weldServiceName,WeldBootstrapService.class,createInterceptor.getWeldContainer());
    builder.addDependency(bindingServiceName,InterceptorBindings.class,createInterceptor.getInterceptorBindings());
    configuration.addComponentInterceptor(new UserInterceptorFactory(factory(InterceptionType.AROUND_INVOKE,builder,bindingServiceName),factory(InterceptionType.AROUND_TIMEOUT,builder,bindingServiceName)),InterceptorOrder.Component.CDI_INTERCEPTORS,false);
    configuration.addPreDestroyInterceptor(factory(InterceptionType.PRE_DESTROY,builder,bindingServiceName),InterceptorOrder.ComponentPreDestroy.CDI_INTERCEPTORS);
    if (description.isPassivationApplicable()) {
      configuration.addPrePassivateInterceptor(factory(InterceptionType.PRE_PASSIVATE,builder,bindingServiceName),InterceptorOrder.ComponentPassivation.CDI_INTERCEPTORS);
      configuration.addPostActivateInterceptor(factory(InterceptionType.POST_ACTIVATE,builder,bindingServiceName),InterceptorOrder.ComponentPassivation.CDI_INTERCEPTORS);
    }
    configuration.addPostConstructInterceptor(factory(InterceptionType.POST_CONSTRUCT,builder,bindingServiceName),InterceptorOrder.ComponentPostConstruct.CDI_INTERCEPTORS);
    configuration.addAroundConstructInterceptor(factory(InterceptionType.AROUND_CONSTRUCT,builder,bindingServiceName),InterceptorOrder.AroundConstruct.WELD_AROUND_CONSTRUCT_INTERCEPTORS);
    final EjbRequestScopeActivationInterceptor.Factory postConstructRequestContextActivationFactory=new EjbRequestScopeActivationInterceptor.Factory(weldServiceName);
    configuration.addPostConstructInterceptor(postConstructRequestContextActivationFactory,InterceptorOrder.ComponentPostConstruct.REQUEST_SCOPE_ACTIVATING_INTERCEPTOR);
  }
  builder.install();
  configuration.addAroundConstructInterceptor(new ImmediateInterceptorFactory(WeldConstructionStartInterceptor.INSTANCE),InterceptorOrder.AroundConstruct.CONSTRUCTION_START_INTERCEPTOR);
  configuration.addPostConstructInterceptor(new ImmediateInterceptorFactory(new WeldInjectionContextInterceptor(weldComponentService)),InterceptorOrder.ComponentPostConstruct.WELD_INJECTION_CONTEXT_INTERCEPTOR);
  configuration.addPostConstructInterceptor(new ImmediateInterceptorFactory(new WeldInterceptorInjectionInterceptor(interceptorClasses)),InterceptorOrder.ComponentPostConstruct.INTERCEPTOR_WELD_INJECTION);
  configuration.addPostConstructInterceptor(WeldInjectionInterceptor.FACTORY,InterceptorOrder.ComponentPostConstruct.COMPONENT_WELD_INJECTION);
}
