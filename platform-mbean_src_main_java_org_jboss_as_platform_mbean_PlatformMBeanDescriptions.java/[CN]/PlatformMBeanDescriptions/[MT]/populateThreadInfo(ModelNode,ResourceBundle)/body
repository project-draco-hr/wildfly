{
  toPopulate.get(THREAD_ID,DESCRIPTION).set(bundle.getString("threading.thread-info.thread-id"));
  toPopulate.get(THREAD_ID,TYPE).set(ModelType.LONG);
  toPopulate.get(THREAD_ID,NILLABLE).set(true);
  toPopulate.get(THREAD_NAME,DESCRIPTION).set(bundle.getString("threading.thread-info.thread-name"));
  toPopulate.get(THREAD_NAME,TYPE).set(ModelType.STRING);
  toPopulate.get(THREAD_NAME,NILLABLE).set(true);
  final ModelNode threadState=toPopulate.get(THREAD_STATE);
  threadState.get(DESCRIPTION).set(bundle.getString("threading.thread-info.thread-state"));
  threadState.get(TYPE).set(ModelType.STRING);
  threadState.get(NILLABLE).set(true);
  final ModelNode allowed=threadState.get(ALLOWED);
  for (  Thread.State state : Thread.State.values()) {
    allowed.add(state.name());
  }
  toPopulate.get(BLOCKED_TIME,DESCRIPTION).set(bundle.getString("threading.thread-info.blocked-time"));
  toPopulate.get(BLOCKED_TIME,TYPE).set(ModelType.LONG);
  toPopulate.get(BLOCKED_TIME,NILLABLE).set(false);
  toPopulate.get(BLOCKED_TIME,UNIT).set(MeasurementUnit.MILLISECONDS.getName());
  toPopulate.get(BLOCKED_COUNT,DESCRIPTION).set(bundle.getString("threading.thread-info.blocked-count"));
  toPopulate.get(BLOCKED_COUNT,TYPE).set(ModelType.LONG);
  toPopulate.get(BLOCKED_COUNT,NILLABLE).set(true);
  toPopulate.get(BLOCKED_TIME,UNIT).set(MeasurementUnit.NONE.getName());
  toPopulate.get(WAITED_TIME,DESCRIPTION).set(bundle.getString("threading.thread-info.waited-time"));
  toPopulate.get(WAITED_TIME,TYPE).set(ModelType.LONG);
  toPopulate.get(WAITED_TIME,NILLABLE).set(false);
  toPopulate.get(WAITED_TIME,UNIT).set(MeasurementUnit.MILLISECONDS.getName());
  toPopulate.get(WAITED_COUNT,DESCRIPTION).set(bundle.getString("threading.thread-info.waited-count"));
  toPopulate.get(WAITED_COUNT,TYPE).set(ModelType.STRING);
  toPopulate.get(WAITED_COUNT,NILLABLE).set(true);
  toPopulate.get(WAITED_COUNT,UNIT).set(MeasurementUnit.NONE.getName());
  toPopulate.get(LOCK_INFO,DESCRIPTION).set(bundle.getString("threading.thread-info.lock-info"));
  toPopulate.get(LOCK_INFO,TYPE).set(ModelType.OBJECT);
  toPopulate.get(LOCK_INFO,NILLABLE).set(true);
  populateLockInfo(toPopulate.get(LOCK_INFO,VALUE_TYPE),bundle);
  toPopulate.get(LOCK_NAME,DESCRIPTION).set(bundle.getString("threading.thread-info.lock-name"));
  toPopulate.get(LOCK_NAME,TYPE).set(ModelType.STRING);
  toPopulate.get(LOCK_NAME,NILLABLE).set(true);
  toPopulate.get(LOCK_OWNER_ID,DESCRIPTION).set(bundle.getString("threading.thread-info.lock-owner-id"));
  toPopulate.get(LOCK_OWNER_ID,TYPE).set(ModelType.LONG);
  toPopulate.get(LOCK_OWNER_ID,NILLABLE).set(true);
  toPopulate.get(LOCK_OWNER_NAME,DESCRIPTION).set(bundle.getString("threading.thread-info.lock-owner-name"));
  toPopulate.get(LOCK_OWNER_NAME,TYPE).set(ModelType.STRING);
  toPopulate.get(LOCK_OWNER_NAME,NILLABLE).set(true);
  toPopulate.get(STACK_TRACE,DESCRIPTION).set(bundle.getString("threading.thread-info.stack-trace"));
  toPopulate.get(STACK_TRACE,TYPE).set(ModelType.LIST);
  toPopulate.get(STACK_TRACE,NILLABLE).set(true);
  populateStackTraceElement(toPopulate.get(STACK_TRACE,VALUE_TYPE),bundle);
  toPopulate.get(SUSPENDED,DESCRIPTION).set(bundle.getString("threading.thread-info.suspended"));
  toPopulate.get(SUSPENDED,TYPE).set(ModelType.BOOLEAN);
  toPopulate.get(SUSPENDED,NILLABLE).set(true);
  toPopulate.get(IN_NATIVE,DESCRIPTION).set(bundle.getString("threading.thread-info.in-native"));
  toPopulate.get(IN_NATIVE,TYPE).set(ModelType.BOOLEAN);
  toPopulate.get(IN_NATIVE,NILLABLE).set(true);
  toPopulate.get(LOCKED_MONITORS,DESCRIPTION).set(bundle.getString("threading.thread-info.locked-monitors"));
  toPopulate.get(LOCKED_MONITORS,TYPE).set(ModelType.LIST);
  toPopulate.get(LOCKED_MONITORS,NILLABLE).set(true);
  populateMonitorInfo(toPopulate.get(LOCKED_MONITORS,VALUE_TYPE),bundle);
  toPopulate.get(LOCKED_SYNCHRONIZERS,DESCRIPTION).set(bundle.getString("threading.thread-info.locked-synchronizers"));
  toPopulate.get(LOCKED_SYNCHRONIZERS,TYPE).set(ModelType.LIST);
  toPopulate.get(LOCKED_SYNCHRONIZERS,NILLABLE).set(true);
  populateLockInfo(toPopulate.get(LOCKED_SYNCHRONIZERS,VALUE_TYPE),bundle);
}
