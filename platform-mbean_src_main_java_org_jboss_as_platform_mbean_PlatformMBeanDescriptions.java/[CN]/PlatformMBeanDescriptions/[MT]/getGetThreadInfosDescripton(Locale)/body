{
  final ResourceBundle bundle=getResourceBundle(locale);
  final ModelNode node=new ModelNode();
  node.get(DESCRIPTION).set(bundle.getString(PlatformMBeanConstants.THREADING + "." + PlatformMBeanConstants.GET_THREAD_INFOS));
  node.get(REQUEST_PROPERTIES,PlatformMBeanConstants.IDS,DESCRIPTION).set(bundle.getString(PlatformMBeanConstants.THREADING + "." + PlatformMBeanConstants.IDS));
  node.get(REQUEST_PROPERTIES,PlatformMBeanConstants.IDS,TYPE).set(ModelType.LIST);
  node.get(REQUEST_PROPERTIES,PlatformMBeanConstants.IDS,VALUE_TYPE).set(ModelType.LONG);
  node.get(REQUEST_PROPERTIES,PlatformMBeanConstants.IDS,REQUIRED).set(true);
  node.get(REQUEST_PROPERTIES,PlatformMBeanConstants.MAX_DEPTH,DESCRIPTION).set(bundle.getString(PlatformMBeanConstants.THREADING + "." + PlatformMBeanConstants.MAX_DEPTH));
  node.get(REQUEST_PROPERTIES,PlatformMBeanConstants.MAX_DEPTH,TYPE).set(ModelType.INT);
  node.get(REQUEST_PROPERTIES,PlatformMBeanConstants.MAX_DEPTH,MIN_VALUE).set(1);
  node.get(REQUEST_PROPERTIES,PlatformMBeanConstants.MAX_DEPTH,REQUIRED).set(false);
  node.get(REQUEST_PROPERTIES,PlatformMBeanConstants.MAX_DEPTH,DEFAULT).set(0);
  node.get(REQUEST_PROPERTIES,PlatformMBeanConstants.LOCKED_MONITORS,DESCRIPTION).set(bundle.getString(PlatformMBeanConstants.THREADING + "." + PlatformMBeanConstants.LOCKED_MONITORS));
  node.get(REQUEST_PROPERTIES,PlatformMBeanConstants.LOCKED_MONITORS,TYPE).set(ModelType.BOOLEAN);
  node.get(REQUEST_PROPERTIES,PlatformMBeanConstants.LOCKED_MONITORS,REQUIRED).set(false);
  node.get(REQUEST_PROPERTIES,PlatformMBeanConstants.LOCKED_MONITORS,DEFAULT).set(false);
  node.get(REQUEST_PROPERTIES,PlatformMBeanConstants.LOCKED_SYNCHRONIZERS,DESCRIPTION).set(bundle.getString(PlatformMBeanConstants.THREADING + "." + PlatformMBeanConstants.LOCKED_MONITORS));
  node.get(REQUEST_PROPERTIES,PlatformMBeanConstants.LOCKED_SYNCHRONIZERS,TYPE).set(ModelType.BOOLEAN);
  node.get(REQUEST_PROPERTIES,PlatformMBeanConstants.LOCKED_SYNCHRONIZERS,REQUIRED).set(false);
  node.get(REQUEST_PROPERTIES,PlatformMBeanConstants.LOCKED_SYNCHRONIZERS,DEFAULT).set(false);
  final ModelNode reply=node.get(REPLY_PROPERTIES);
  reply.get(DESCRIPTION).set(bundle.getString("threading.get-thread-infos.reply"));
  reply.get(TYPE).set(ModelType.LIST);
  reply.get(NILLABLE).set(false);
  populateThreadInfo(reply.get(VALUE_TYPE),bundle);
  return node;
}
