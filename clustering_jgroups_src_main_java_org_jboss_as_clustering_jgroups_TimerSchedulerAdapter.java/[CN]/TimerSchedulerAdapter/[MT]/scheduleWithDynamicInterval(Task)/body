{
  final MutableScheduledFuture<Object> future=new MutableScheduledFuture<Object>((ScheduledFuture<Object>)this.schedule(task,task.nextInterval(),TimeUnit.MILLISECONDS));
  final long nextInterval=task.nextInterval();
  if (nextInterval > 0) {
    Runnable scheduleTask=new Runnable(){
      @Override public void run(){
        try {
          future.get();
          long interval=nextInterval;
          while ((interval > 0) && !Thread.currentThread().isInterrupted()) {
            future.setFuture((ScheduledFuture<Object>)TimerSchedulerAdapter.this.schedule(task,interval,TimeUnit.MILLISECONDS));
            future.get();
            interval=task.nextInterval();
          }
        }
 catch (        InterruptedException e) {
        }
catch (        ExecutionException e) {
        }
      }
    }
;
    this.execute(scheduleTask);
  }
  return future;
}
