{
  boolean isDomain=serverEnvironment == null || serverEnvironment.getLaunchType() == LaunchType.DOMAIN;
  if (serverEnvironment != null) {
    if (isDomain) {
      root.registerReadOnlyAttribute(NAME,serverEnvironment.getProcessNameReadHandler(),AttributeAccess.Storage.CONFIGURATION);
      root.registerReadWriteAttribute(PROFILE_NAME,null,new StringLengthValidatingHandler(1),AttributeAccess.Storage.CONFIGURATION);
    }
 else {
      root.registerReadWriteAttribute(NAME,serverEnvironment.getProcessNameReadHandler(),serverEnvironment.getProcessNameWriteHandler(),AttributeAccess.Storage.CONFIGURATION);
    }
  }
  EnumSet<Flag> runtimeOnlyFlag=EnumSet.of(Flag.RUNTIME_ONLY);
  root.registerOperationHandler(READ_RESOURCE_OPERATION,GlobalOperationHandlers.READ_RESOURCE,CommonProviders.READ_RESOURCE_PROVIDER,true,runtimeOnlyFlag);
  root.registerOperationHandler(READ_ATTRIBUTE_OPERATION,GlobalOperationHandlers.READ_ATTRIBUTE,CommonProviders.READ_ATTRIBUTE_PROVIDER,true,runtimeOnlyFlag);
  root.registerOperationHandler(READ_RESOURCE_DESCRIPTION_OPERATION,GlobalOperationHandlers.READ_RESOURCE_DESCRIPTION,CommonProviders.READ_RESOURCE_DESCRIPTION_PROVIDER,true,runtimeOnlyFlag);
  root.registerOperationHandler(READ_CHILDREN_NAMES_OPERATION,GlobalOperationHandlers.READ_CHILDREN_NAMES,CommonProviders.READ_CHILDREN_NAMES_PROVIDER,true,runtimeOnlyFlag);
  root.registerOperationHandler(READ_CHILDREN_TYPES_OPERATION,GlobalOperationHandlers.READ_CHILDREN_TYPES,CommonProviders.READ_CHILDREN_TYPES_PROVIDER,true,runtimeOnlyFlag);
  root.registerOperationHandler(READ_CHILDREN_RESOURCES_OPERATION,GlobalOperationHandlers.READ_CHILDREN_RESOURCES,CommonProviders.READ_CHILDREN_RESOURCES_PROVIDER,true,runtimeOnlyFlag);
  root.registerOperationHandler(READ_OPERATION_NAMES_OPERATION,GlobalOperationHandlers.READ_OPERATION_NAMES,CommonProviders.READ_OPERATION_NAMES_PROVIDER,true,runtimeOnlyFlag);
  root.registerOperationHandler(READ_OPERATION_DESCRIPTION_OPERATION,GlobalOperationHandlers.READ_OPERATION_DESCRIPTION,CommonProviders.READ_OPERATION_PROVIDER,true,runtimeOnlyFlag);
  root.registerOperationHandler(UNDEFINE_ATTRIBUTE_OPERATION,GlobalOperationHandlers.UNDEFINE_ATTRIBUTE,CommonProviders.UNDEFINE_ATTRIBUTE_PROVIDER,true);
  root.registerOperationHandler(WRITE_ATTRIBUTE_OPERATION,GlobalOperationHandlers.WRITE_ATTRIBUTE,CommonProviders.WRITE_ATTRIBUTE_PROVIDER,true);
  if (serverEnvironment != null) {
    root.registerOperationHandler(ValidateOperationHandler.OPERATION_NAME,ValidateOperationHandler.INSTANCE,ValidateOperationHandler.INSTANCE);
  }
 else {
    root.registerOperationHandler(ValidateOperationHandler.OPERATION_NAME,ValidateOperationHandler.INSTANCE,ValidateOperationHandler.INSTANCE,false,runtimeOnlyFlag);
  }
  root.registerOperationHandler(CompositeOperationHandler.NAME,CompositeOperationHandler.INSTANCE,CompositeOperationHandler.INSTANCE,false,EntryType.PRIVATE);
  XmlMarshallingHandler xmh=new XmlMarshallingHandler(extensibleConfigurationPersister);
  root.registerOperationHandler(XmlMarshallingHandler.OPERATION_NAME,xmh,xmh,false,runtimeOnlyFlag);
  root.registerOperationHandler(NamespaceAddHandler.OPERATION_NAME,NamespaceAddHandler.INSTANCE,NamespaceAddHandler.INSTANCE,false);
  root.registerOperationHandler(NamespaceRemoveHandler.OPERATION_NAME,NamespaceRemoveHandler.INSTANCE,NamespaceRemoveHandler.INSTANCE,false);
  root.registerOperationHandler(SchemaLocationAddHandler.OPERATION_NAME,SchemaLocationAddHandler.INSTANCE,SchemaLocationAddHandler.INSTANCE,false);
  root.registerOperationHandler(SchemaLocationRemoveHandler.OPERATION_NAME,SchemaLocationRemoveHandler.INSTANCE,SchemaLocationRemoveHandler.INSTANCE,false);
  root.registerOperationHandler(ValidateAddressOperationHandler.OPERATION_NAME,ValidateAddressOperationHandler.INSTANCE,ValidateAddressOperationHandler.INSTANCE,false,EnumSet.of(OperationEntry.Flag.READ_ONLY));
  DeploymentUploadBytesHandler dubh=new DeploymentUploadBytesHandler(contentRepository);
  root.registerOperationHandler(DeploymentUploadBytesHandler.OPERATION_NAME,dubh,dubh,false);
  DeploymentUploadURLHandler duuh=new DeploymentUploadURLHandler(contentRepository);
  root.registerOperationHandler(DeploymentUploadURLHandler.OPERATION_NAME,duuh,duuh,false);
  DeploymentUploadStreamAttachmentHandler dush=new DeploymentUploadStreamAttachmentHandler(contentRepository);
  root.registerOperationHandler(DeploymentUploadStreamAttachmentHandler.OPERATION_NAME,dush,dush,false);
  final DeploymentReplaceHandler drh=DeploymentReplaceHandler.create(contentRepository,vaultReader);
  root.registerOperationHandler(DeploymentReplaceHandler.OPERATION_NAME,drh,drh,false);
  DeploymentFullReplaceHandler dfrh=DeploymentFullReplaceHandler.create(contentRepository,vaultReader);
  root.registerOperationHandler(DeploymentFullReplaceHandler.OPERATION_NAME,dfrh,dfrh,false);
  if (!isDomain) {
    SnapshotDeleteHandler snapshotDelete=new SnapshotDeleteHandler(extensibleConfigurationPersister);
    root.registerOperationHandler(SnapshotDeleteHandler.OPERATION_NAME,snapshotDelete,snapshotDelete,false);
    SnapshotListHandler snapshotList=new SnapshotListHandler(extensibleConfigurationPersister);
    root.registerOperationHandler(SnapshotListHandler.OPERATION_NAME,snapshotList,snapshotList,false);
    SnapshotTakeHandler snapshotTake=new SnapshotTakeHandler(extensibleConfigurationPersister);
    root.registerOperationHandler(SnapshotTakeHandler.OPERATION_NAME,snapshotTake,snapshotTake,false);
  }
  root.registerOperationHandler(ServerRestartRequiredHandler.OPERATION_NAME,ServerRestartRequiredHandler.INSTANCE,ServerRestartRequiredHandler.INSTANCE,false);
  root.registerReadOnlyAttribute(ServerDescriptionConstants.PROCESS_STATE,new ProcessStateAttributeHandler(processState),Storage.RUNTIME);
  root.registerReadOnlyAttribute(ServerDescriptionConstants.PROCESS_TYPE,ProcessTypeHandler.INSTANCE,Storage.RUNTIME);
  RunningModeReadHandler.createAndRegister(runningModeControl,root);
  root.registerOperationHandler(ResolveExpressionHandler.OPERATION_NAME,ResolveExpressionHandler.INSTANCE,ResolveExpressionHandler.INSTANCE,EnumSet.of(OperationEntry.Flag.READ_ONLY,OperationEntry.Flag.RUNTIME_ONLY));
  root.registerOperationHandler(SpecifiedInterfaceResolveHandler.OPERATION_NAME,SpecifiedInterfaceResolveHandler.INSTANCE,SpecifiedInterfaceResolveHandler.INSTANCE,runtimeOnlyFlag);
  root.registerOperationHandler(WhoAmIOperation.OPERATION_NAME,WhoAmIOperation.INSTANCE,WhoAmIOperation.INSTANCE,true);
  root.registerOperationHandler(RootResourceHack.NAME,RootResourceHack.INSTANCE,RootResourceHack.INSTANCE,false,OperationEntry.EntryType.PRIVATE,runtimeOnlyFlag);
  if (serverEnvironment != null) {
    if (serverEnvironment.getLaunchType() != ServerEnvironment.LaunchType.DOMAIN) {
      ServerProcessReloadHandler reloadHandler=new ServerProcessReloadHandler(Services.JBOSS_AS,runningModeControl,processState,ServerDescriptions.getResourceDescriptionResolver("server"));
      root.registerOperationHandler(ProcessReloadHandler.OPERATION_NAME,reloadHandler,reloadHandler);
    }
    if (serverEnvironment.getLaunchType() == ServerEnvironment.LaunchType.STANDALONE) {
      ServerShutdownHandler serverShutdownHandler=new ServerShutdownHandler(processState);
      root.registerOperationHandler(ServerShutdownHandler.OPERATION_NAME,serverShutdownHandler,serverShutdownHandler);
    }
    root.registerReadOnlyAttribute(ServerDescriptionConstants.LAUNCH_TYPE,new LaunchTypeHandler(serverEnvironment.getLaunchType()),Storage.RUNTIME);
    root.registerSubModel(ServerEnvironmentResourceDescription.of(serverEnvironment));
  }
  ManagementResourceRegistration sysProps=root.registerSubModel(PathElement.pathElement(SYSTEM_PROPERTY),ServerDescriptionProviders.SYSTEM_PROPERTIES_PROVIDER);
  SystemPropertyAddHandler spah=new SystemPropertyAddHandler(serverEnvironment,false);
  sysProps.registerOperationHandler(SystemPropertyAddHandler.OPERATION_NAME,spah,spah,false);
  SystemPropertyRemoveHandler sprh=new SystemPropertyRemoveHandler(serverEnvironment);
  sysProps.registerOperationHandler(SystemPropertyRemoveHandler.OPERATION_NAME,sprh,sprh,false);
  SystemPropertyValueWriteAttributeHandler spvwah=new SystemPropertyValueWriteAttributeHandler(serverEnvironment);
  sysProps.registerReadWriteAttribute(VALUE,null,spvwah,AttributeAccess.Storage.CONFIGURATION);
  ManagementResourceRegistration vault=root.registerSubModel(PathElement.pathElement(CORE_SERVICE,VAULT),CommonProviders.VAULT_PROVIDER);
  VaultAddHandler vah=new VaultAddHandler(vaultReader);
  vault.registerOperationHandler(VaultAddHandler.OPERATION_NAME,vah,vah,false);
  VaultRemoveHandler vrh=new VaultRemoveHandler(vaultReader);
  vault.registerOperationHandler(VaultRemoveHandler.OPERATION_NAME,vrh,vrh,false);
  VaultWriteAttributeHandler.INSTANCE.registerAttributes(vault);
  ManagementResourceRegistration management=root.registerSubModel(PathElement.pathElement(CORE_SERVICE,MANAGEMENT),CommonProviders.MANAGEMENT_WITH_INTERFACES_PROVIDER);
  management.registerSubModel(SecurityRealmResourceDefinition.INSTANCE);
  management.registerSubModel(LdapConnectionResourceDefinition.INSTANCE);
  management.registerSubModel(NativeManagementResourceDefinition.INSTANCE);
  management.registerSubModel(NativeRemotingManagementResourceDefinition.INSTANCE);
  management.registerSubModel(HttpManagementResourceDefinition.INSTANCE);
  ManagementResourceRegistration serviceContainer=root.registerSubModel(PathElement.pathElement(CORE_SERVICE,SERVICE_CONTAINER),CommonProviders.SERVICE_CONTAINER_PROVIDER);
  serviceContainer.registerOperationHandler(DumpServicesHandler.OPERATION_NAME,DumpServicesHandler.INSTANCE,DumpServicesHandler.INSTANCE,false,runtimeOnlyFlag);
  PlatformMBeanResourceRegistrar.registerPlatformMBeanResources(root);
  root.registerSubModel(PathResourceDefinition.createSpecified(pathManager));
  ManagementResourceRegistration interfaces=root.registerSubModel(PathElement.pathElement(INTERFACE),CommonProviders.SPECIFIED_INTERFACE_PROVIDER_SERVER);
  interfaces.registerOperationHandler(SpecifiedInterfaceAddHandler.OPERATION_NAME,SpecifiedInterfaceAddHandler.INSTANCE,SpecifiedInterfaceAddHandler.INSTANCE,false);
  interfaces.registerOperationHandler(SpecifiedInterfaceRemoveHandler.OPERATION_NAME,SpecifiedInterfaceRemoveHandler.INSTANCE,SpecifiedInterfaceRemoveHandler.INSTANCE,false);
  InterfaceCriteriaWriteHandler.UPDATE_RUNTIME.register(interfaces);
  interfaces.registerReadOnlyAttribute(NetworkInterfaceRuntimeHandler.RESOLVED_ADDRESS,NetworkInterfaceRuntimeHandler.INSTANCE,Storage.RUNTIME);
  interfaces.registerOperationHandler(SpecifiedInterfaceResolveHandler.OPERATION_NAME,SpecifiedInterfaceResolveHandler.INSTANCE,SpecifiedInterfaceResolveHandler.INSTANCE,runtimeOnlyFlag);
  ManagementResourceRegistration socketGroup=root.registerSubModel(new SocketBindingGroupResourceDefinition(BindingGroupAddHandler.INSTANCE,SocketBindingGroupRemoveHandler.INSTANCE,false));
  socketGroup.registerSubModel(SocketBindingResourceDefinition.INSTANCE);
  socketGroup.registerSubModel(RemoteDestinationOutboundSocketBindingResourceDefinition.INSTANCE);
  socketGroup.registerSubModel(LocalDestinationOutboundSocketBindingResourceDefinition.INSTANCE);
  ManagementResourceRegistration deployments=root.registerSubModel(PathElement.pathElement(DEPLOYMENT),ServerDescriptionProviders.DEPLOYMENT_PROVIDER);
  DeploymentAddHandler dah=DeploymentAddHandler.create(contentRepository,vaultReader);
  deployments.registerOperationHandler(DeploymentAddHandler.OPERATION_NAME,dah,dah,false);
  DeploymentRemoveHandler dremh=new DeploymentRemoveHandler(contentRepository,vaultReader);
  deployments.registerOperationHandler(DeploymentRemoveHandler.OPERATION_NAME,dremh,dremh,false);
  final DeploymentDeployHandler ddhu=new DeploymentDeployHandler(vaultReader);
  deployments.registerOperationHandler(DeploymentDeployHandler.OPERATION_NAME,ddhu,ddhu,false);
  final DeploymentUndeployHandler duh=new DeploymentUndeployHandler(vaultReader);
  deployments.registerOperationHandler(DeploymentUndeployHandler.OPERATION_NAME,duh,duh,false);
  final DeploymentRedeployHandler drdh=new DeploymentRedeployHandler(vaultReader);
  deployments.registerOperationHandler(DeploymentRedeployHandler.OPERATION_NAME,drdh,drdh,false);
  deployments.registerMetric(DeploymentStatusHandler.ATTRIBUTE_NAME,DeploymentStatusHandler.INSTANCE);
  deployments.registerReadOnlyAttribute(CONTENT,null,Storage.CONFIGURATION);
  deployments.registerReadOnlyAttribute(NAME,null,Storage.CONFIGURATION);
  deployments.registerReadOnlyAttribute(RUNTIME_NAME,null,Storage.CONFIGURATION);
  deployments.registerReadOnlyAttribute(ENABLED,null,Storage.CONFIGURATION);
  deployments.registerReadOnlyAttribute(PERSISTENT,null,Storage.CONFIGURATION);
  final ManagementResourceRegistration contentOverrides=root.registerSubModel(DeploymentOverlayDefinition.INSTANCE);
  contentOverrides.registerSubModel(new ContentDefinition(contentRepository,null));
  contentOverrides.registerSubModel(new DeploymentOverlayDeploymentDefinition(DeploymentOverlayPriority.SERVER));
  deployments.registerSubModel(PathElement.pathElement(SUBDEPLOYMENT),ServerDescriptionProviders.SUBDEPLOYMENT_PROVIDER);
  root.registerSubModel(new ExtensionResourceDefinition(extensionRegistry,parallelBoot,false));
  if (extensionRegistry != null) {
    extensionRegistry.setSubsystemParentResourceRegistrations(root,deployments);
    extensionRegistry.setPathManager(pathManager);
  }
  root.registerOperationHandler(DeployerChainAddHandler.NAME,DeployerChainAddHandler.INSTANCE,DeployerChainAddHandler.INSTANCE,false,EntryType.PRIVATE);
}
