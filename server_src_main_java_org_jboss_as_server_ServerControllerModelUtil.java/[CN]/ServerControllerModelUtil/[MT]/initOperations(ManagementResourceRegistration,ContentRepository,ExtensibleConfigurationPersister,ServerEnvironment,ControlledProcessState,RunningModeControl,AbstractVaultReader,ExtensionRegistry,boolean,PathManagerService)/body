{
  EnumSet<Flag> runtimeOnlyFlag=EnumSet.of(Flag.RUNTIME_ONLY);
  ManagementResourceRegistration sysProps=root.registerSubModel(PathElement.pathElement(SYSTEM_PROPERTY),ServerDescriptionProviders.SYSTEM_PROPERTIES_PROVIDER);
  SystemPropertyAddHandler spah=new SystemPropertyAddHandler(serverEnvironment,false);
  sysProps.registerOperationHandler(SystemPropertyAddHandler.OPERATION_NAME,spah,spah,false);
  SystemPropertyRemoveHandler sprh=new SystemPropertyRemoveHandler(serverEnvironment);
  sysProps.registerOperationHandler(SystemPropertyRemoveHandler.OPERATION_NAME,sprh,sprh,false);
  SystemPropertyValueWriteAttributeHandler spvwah=new SystemPropertyValueWriteAttributeHandler(serverEnvironment);
  sysProps.registerReadWriteAttribute(VALUE,null,spvwah,AttributeAccess.Storage.CONFIGURATION);
  ManagementResourceRegistration vault=root.registerSubModel(PathElement.pathElement(CORE_SERVICE,VAULT),CommonProviders.VAULT_PROVIDER);
  VaultAddHandler vah=new VaultAddHandler(vaultReader);
  vault.registerOperationHandler(VaultAddHandler.OPERATION_NAME,vah,vah,false);
  VaultRemoveHandler vrh=new VaultRemoveHandler(vaultReader);
  vault.registerOperationHandler(VaultRemoveHandler.OPERATION_NAME,vrh,vrh,false);
  VaultWriteAttributeHandler.INSTANCE.registerAttributes(vault);
  ManagementResourceRegistration management=root.registerSubModel(PathElement.pathElement(CORE_SERVICE,MANAGEMENT),CommonProviders.MANAGEMENT_WITH_INTERFACES_PROVIDER);
  management.registerSubModel(SecurityRealmResourceDefinition.INSTANCE);
  management.registerSubModel(LdapConnectionResourceDefinition.INSTANCE);
  management.registerSubModel(NativeManagementResourceDefinition.INSTANCE);
  management.registerSubModel(NativeRemotingManagementResourceDefinition.INSTANCE);
  management.registerSubModel(HttpManagementResourceDefinition.INSTANCE);
  ManagementResourceRegistration serviceContainer=root.registerSubModel(PathElement.pathElement(CORE_SERVICE,SERVICE_CONTAINER),CommonProviders.SERVICE_CONTAINER_PROVIDER);
  serviceContainer.registerOperationHandler(DumpServicesHandler.OPERATION_NAME,DumpServicesHandler.INSTANCE,DumpServicesHandler.INSTANCE,false,runtimeOnlyFlag);
  PlatformMBeanResourceRegistrar.registerPlatformMBeanResources(root);
  root.registerSubModel(PathResourceDefinition.createSpecified(pathManager));
  ManagementResourceRegistration interfaces=root.registerSubModel(PathElement.pathElement(INTERFACE),CommonProviders.SPECIFIED_INTERFACE_PROVIDER_SERVER);
  interfaces.registerOperationHandler(SpecifiedInterfaceAddHandler.OPERATION_NAME,SpecifiedInterfaceAddHandler.INSTANCE,SpecifiedInterfaceAddHandler.INSTANCE,false);
  interfaces.registerOperationHandler(SpecifiedInterfaceRemoveHandler.OPERATION_NAME,SpecifiedInterfaceRemoveHandler.INSTANCE,SpecifiedInterfaceRemoveHandler.INSTANCE,false);
  InterfaceCriteriaWriteHandler.UPDATE_RUNTIME.register(interfaces);
  interfaces.registerReadOnlyAttribute(NetworkInterfaceRuntimeHandler.RESOLVED_ADDRESS,NetworkInterfaceRuntimeHandler.INSTANCE,Storage.RUNTIME);
  interfaces.registerOperationHandler(SpecifiedInterfaceResolveHandler.OPERATION_NAME,SpecifiedInterfaceResolveHandler.INSTANCE,SpecifiedInterfaceResolveHandler.INSTANCE,runtimeOnlyFlag);
  ManagementResourceRegistration socketGroup=root.registerSubModel(new SocketBindingGroupResourceDefinition(BindingGroupAddHandler.INSTANCE,SocketBindingGroupRemoveHandler.INSTANCE,false));
  socketGroup.registerSubModel(SocketBindingResourceDefinition.INSTANCE);
  socketGroup.registerSubModel(RemoteDestinationOutboundSocketBindingResourceDefinition.INSTANCE);
  socketGroup.registerSubModel(LocalDestinationOutboundSocketBindingResourceDefinition.INSTANCE);
  ManagementResourceRegistration deployments=root.registerSubModel(PathElement.pathElement(DEPLOYMENT),ServerDescriptionProviders.DEPLOYMENT_PROVIDER);
  DeploymentAddHandler dah=DeploymentAddHandler.create(contentRepository,vaultReader);
  deployments.registerOperationHandler(DeploymentAddHandler.OPERATION_NAME,dah,dah,false);
  DeploymentRemoveHandler dremh=new DeploymentRemoveHandler(contentRepository,vaultReader);
  deployments.registerOperationHandler(DeploymentRemoveHandler.OPERATION_NAME,dremh,dremh,false);
  final DeploymentDeployHandler ddhu=new DeploymentDeployHandler(vaultReader);
  deployments.registerOperationHandler(DeploymentDeployHandler.OPERATION_NAME,ddhu,ddhu,false);
  final DeploymentUndeployHandler duh=new DeploymentUndeployHandler(vaultReader);
  deployments.registerOperationHandler(DeploymentUndeployHandler.OPERATION_NAME,duh,duh,false);
  final DeploymentRedeployHandler drdh=new DeploymentRedeployHandler(vaultReader);
  deployments.registerOperationHandler(DeploymentRedeployHandler.OPERATION_NAME,drdh,drdh,false);
  deployments.registerMetric(DeploymentStatusHandler.ATTRIBUTE_NAME,DeploymentStatusHandler.INSTANCE);
  deployments.registerReadOnlyAttribute(CONTENT,null,Storage.CONFIGURATION);
  deployments.registerReadOnlyAttribute(NAME,null,Storage.CONFIGURATION);
  deployments.registerReadOnlyAttribute(RUNTIME_NAME,null,Storage.CONFIGURATION);
  deployments.registerReadOnlyAttribute(ENABLED,null,Storage.CONFIGURATION);
  deployments.registerReadOnlyAttribute(PERSISTENT,null,Storage.CONFIGURATION);
  final ManagementResourceRegistration contentOverrides=root.registerSubModel(DeploymentOverlayDefinition.INSTANCE);
  contentOverrides.registerSubModel(new ContentDefinition(contentRepository,null));
  contentOverrides.registerSubModel(new DeploymentOverlayDeploymentDefinition(DeploymentOverlayPriority.SERVER));
  deployments.registerSubModel(PathElement.pathElement(SUBDEPLOYMENT),ServerDescriptionProviders.SUBDEPLOYMENT_PROVIDER);
  root.registerSubModel(new ExtensionResourceDefinition(extensionRegistry,parallelBoot,false));
  if (extensionRegistry != null) {
    extensionRegistry.setSubsystemParentResourceRegistrations(root,deployments);
    extensionRegistry.setPathManager(pathManager);
  }
  root.registerOperationHandler(DeployerChainAddHandler.NAME,DeployerChainAddHandler.INSTANCE,DeployerChainAddHandler.INSTANCE,false,EntryType.PRIVATE);
}
