{
  EnumSet<Flag> runtimeOnlyFlag=EnumSet.of(Flag.RUNTIME_ONLY);
  root.registerSubModel(SystemPropertyResourceDefinition.createForStandaloneServer(serverEnvironment));
  root.registerSubModel(new VaultResourceDefinition(vaultReader));
  ManagementResourceRegistration management=root.registerSubModel(PathElement.pathElement(CORE_SERVICE,MANAGEMENT),CommonProviders.MANAGEMENT_WITH_INTERFACES_PROVIDER);
  management.registerSubModel(SecurityRealmResourceDefinition.INSTANCE);
  management.registerSubModel(LdapConnectionResourceDefinition.INSTANCE);
  management.registerSubModel(NativeManagementResourceDefinition.INSTANCE);
  management.registerSubModel(NativeRemotingManagementResourceDefinition.INSTANCE);
  management.registerSubModel(HttpManagementResourceDefinition.INSTANCE);
  ManagementResourceRegistration serviceContainer=root.registerSubModel(PathElement.pathElement(CORE_SERVICE,SERVICE_CONTAINER),CommonProviders.SERVICE_CONTAINER_PROVIDER);
  serviceContainer.registerOperationHandler(DumpServicesHandler.OPERATION_NAME,DumpServicesHandler.INSTANCE,DumpServicesHandler.INSTANCE,false,runtimeOnlyFlag);
  PlatformMBeanResourceRegistrar.registerPlatformMBeanResources(root);
  root.registerSubModel(PathResourceDefinition.createSpecified(pathManager));
  ManagementResourceRegistration interfaces=root.registerSubModel(PathElement.pathElement(INTERFACE),CommonProviders.SPECIFIED_INTERFACE_PROVIDER_SERVER);
  interfaces.registerOperationHandler(SpecifiedInterfaceAddHandler.OPERATION_NAME,SpecifiedInterfaceAddHandler.INSTANCE,SpecifiedInterfaceAddHandler.INSTANCE,false);
  interfaces.registerOperationHandler(SpecifiedInterfaceRemoveHandler.OPERATION_NAME,SpecifiedInterfaceRemoveHandler.INSTANCE,SpecifiedInterfaceRemoveHandler.INSTANCE,false);
  InterfaceCriteriaWriteHandler.UPDATE_RUNTIME.register(interfaces);
  interfaces.registerReadOnlyAttribute(NetworkInterfaceRuntimeHandler.RESOLVED_ADDRESS,NetworkInterfaceRuntimeHandler.INSTANCE,Storage.RUNTIME);
  interfaces.registerOperationHandler(SpecifiedInterfaceResolveHandler.OPERATION_NAME,SpecifiedInterfaceResolveHandler.INSTANCE,SpecifiedInterfaceResolveHandler.INSTANCE,runtimeOnlyFlag);
  ManagementResourceRegistration socketGroup=root.registerSubModel(new SocketBindingGroupResourceDefinition(BindingGroupAddHandler.INSTANCE,SocketBindingGroupRemoveHandler.INSTANCE,false));
  socketGroup.registerSubModel(SocketBindingResourceDefinition.INSTANCE);
  socketGroup.registerSubModel(RemoteDestinationOutboundSocketBindingResourceDefinition.INSTANCE);
  socketGroup.registerSubModel(LocalDestinationOutboundSocketBindingResourceDefinition.INSTANCE);
  ManagementResourceRegistration deployments=root.registerSubModel(ServerDeploymentResourceDescription.create(contentRepository,vaultReader));
  final ManagementResourceRegistration contentOverrides=root.registerSubModel(DeploymentOverlayDefinition.INSTANCE);
  contentOverrides.registerSubModel(new ContentDefinition(contentRepository,null));
  contentOverrides.registerSubModel(new DeploymentOverlayDeploymentDefinition(DeploymentOverlayPriority.SERVER));
  deployments.registerSubModel(PathElement.pathElement(SUBDEPLOYMENT),ServerDescriptionProviders.SUBDEPLOYMENT_PROVIDER);
  root.registerSubModel(new ExtensionResourceDefinition(extensionRegistry,parallelBoot,false));
  if (extensionRegistry != null) {
    extensionRegistry.setSubsystemParentResourceRegistrations(root,deployments);
    extensionRegistry.setPathManager(pathManager);
  }
  root.registerOperationHandler(DeployerChainAddHandler.NAME,DeployerChainAddHandler.INSTANCE,DeployerChainAddHandler.INSTANCE,false,EntryType.PRIVATE);
}
