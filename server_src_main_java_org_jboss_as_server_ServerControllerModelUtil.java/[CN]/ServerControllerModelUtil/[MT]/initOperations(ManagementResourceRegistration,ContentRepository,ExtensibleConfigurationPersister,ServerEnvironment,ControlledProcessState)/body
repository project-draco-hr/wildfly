{
  root.registerReadWriteAttribute(NAME,null,new StringLengthValidatingHandler(1),AttributeAccess.Storage.CONFIGURATION);
  root.registerOperationHandler(READ_RESOURCE_OPERATION,GlobalOperationHandlers.READ_RESOURCE,CommonProviders.READ_RESOURCE_PROVIDER,true);
  root.registerOperationHandler(READ_ATTRIBUTE_OPERATION,GlobalOperationHandlers.READ_ATTRIBUTE,CommonProviders.READ_ATTRIBUTE_PROVIDER,true);
  root.registerOperationHandler(READ_RESOURCE_DESCRIPTION_OPERATION,GlobalOperationHandlers.READ_RESOURCE_DESCRIPTION,CommonProviders.READ_RESOURCE_DESCRIPTION_PROVIDER,true);
  root.registerOperationHandler(READ_CHILDREN_NAMES_OPERATION,GlobalOperationHandlers.READ_CHILDREN_NAMES,CommonProviders.READ_CHILDREN_NAMES_PROVIDER,true);
  root.registerOperationHandler(READ_CHILDREN_TYPES_OPERATION,GlobalOperationHandlers.READ_CHILDREN_TYPES,CommonProviders.READ_CHILDREN_TYPES_PROVIDER,true);
  root.registerOperationHandler(READ_CHILDREN_RESOURCES_OPERATION,GlobalOperationHandlers.READ_CHILDREN_RESOURCES,CommonProviders.READ_CHILDREN_RESOURCES_PROVIDER,true);
  root.registerOperationHandler(READ_OPERATION_NAMES_OPERATION,GlobalOperationHandlers.READ_OPERATION_NAMES,CommonProviders.READ_OPERATION_NAMES_PROVIDER,true);
  root.registerOperationHandler(READ_OPERATION_DESCRIPTION_OPERATION,GlobalOperationHandlers.READ_OPERATION_DESCRIPTION,CommonProviders.READ_OPERATION_PROVIDER,true);
  root.registerOperationHandler(WRITE_ATTRIBUTE_OPERATION,GlobalOperationHandlers.WRITE_ATTRIBUTE,CommonProviders.WRITE_ATTRIBUTE_PROVIDER,true);
  root.registerOperationHandler("validate-address",GlobalOperationHandlers.VALIDATE_ADDRESS,CommonProviders.VALIDATE_ADDRESS_PROVIDER,true);
  root.registerOperationHandler(CompositeOperationHandler.NAME,CompositeOperationHandler.INSTANCE,CompositeOperationHandler.INSTANCE,false,EntryType.PRIVATE);
  XmlMarshallingHandler xmh=new XmlMarshallingHandler(extensibleConfigurationPersister);
  root.registerOperationHandler(XmlMarshallingHandler.OPERATION_NAME,xmh,xmh,false);
  root.registerOperationHandler(NamespaceAddHandler.OPERATION_NAME,NamespaceAddHandler.INSTANCE,NamespaceAddHandler.INSTANCE,false);
  root.registerOperationHandler(NamespaceRemoveHandler.OPERATION_NAME,NamespaceRemoveHandler.INSTANCE,NamespaceRemoveHandler.INSTANCE,false);
  root.registerOperationHandler(SchemaLocationAddHandler.OPERATION_NAME,SchemaLocationAddHandler.INSTANCE,SchemaLocationAddHandler.INSTANCE,false);
  root.registerOperationHandler(SchemaLocationRemoveHandler.OPERATION_NAME,SchemaLocationRemoveHandler.INSTANCE,SchemaLocationRemoveHandler.INSTANCE,false);
  DeploymentUploadBytesHandler dubh=new DeploymentUploadBytesHandler(contentRepository);
  root.registerOperationHandler(DeploymentUploadBytesHandler.OPERATION_NAME,dubh,dubh,false);
  DeploymentUploadURLHandler duuh=new DeploymentUploadURLHandler(contentRepository);
  root.registerOperationHandler(DeploymentUploadURLHandler.OPERATION_NAME,duuh,duuh,false);
  DeploymentUploadStreamAttachmentHandler dush=new DeploymentUploadStreamAttachmentHandler(contentRepository);
  root.registerOperationHandler(DeploymentUploadStreamAttachmentHandler.OPERATION_NAME,dush,dush,false);
  final DeploymentReplaceHandler drh=new DeploymentReplaceHandler(contentRepository);
  root.registerOperationHandler(DeploymentReplaceHandler.OPERATION_NAME,drh,drh,false);
  DeploymentFullReplaceHandler dfrh=new DeploymentFullReplaceHandler(contentRepository);
  root.registerOperationHandler(DeploymentFullReplaceHandler.OPERATION_NAME,dfrh,dfrh,false);
  SnapshotDeleteHandler snapshotDelete=new SnapshotDeleteHandler(extensibleConfigurationPersister);
  root.registerOperationHandler(SnapshotDeleteHandler.OPERATION_NAME,snapshotDelete,snapshotDelete,false);
  SnapshotListHandler snapshotList=new SnapshotListHandler(extensibleConfigurationPersister);
  root.registerOperationHandler(SnapshotListHandler.OPERATION_NAME,snapshotList,snapshotList,false);
  SnapshotTakeHandler snapshotTake=new SnapshotTakeHandler(extensibleConfigurationPersister);
  root.registerOperationHandler(SnapshotTakeHandler.OPERATION_NAME,snapshotTake,snapshotTake,false);
  root.registerReadOnlyAttribute(ServerDescriptionConstants.SERVER_STATE,new ServerStateAttributeHandler(processState),Storage.RUNTIME);
  root.registerReadOnlyAttribute(ServerDescriptionConstants.PROCESS_TYPE,ProcessTypeHandler.INSTANCE,Storage.RUNTIME);
  if (serverEnvironment != null) {
    if (serverEnvironment.getLaunchType() != ServerEnvironment.LaunchType.DOMAIN)     root.registerOperationHandler(ServerReloadHandler.OPERATION_NAME,ServerReloadHandler.INSTANCE,ServerReloadHandler.INSTANCE,false);
    if (serverEnvironment.getLaunchType() == ServerEnvironment.LaunchType.STANADALONE)     root.registerOperationHandler(ServerShutdownHandler.OPERATION_NAME,ServerShutdownHandler.INSTANCE,ServerShutdownHandler.INSTANCE,false);
    root.registerReadOnlyAttribute(ServerDescriptionConstants.LAUNCH_TYPE,new LaunchTypeHandler(serverEnvironment.getLaunchType()),Storage.RUNTIME);
  }
  ManagementResourceRegistration sysProps=root.registerSubModel(PathElement.pathElement(SYSTEM_PROPERTY),ServerDescriptionProviders.SYSTEM_PROPERTIES_PROVIDER);
  sysProps.registerOperationHandler(SystemPropertyAddHandler.OPERATION_NAME,SystemPropertyAddHandler.INSTANCE_WITHOUT_BOOTTIME,SystemPropertyAddHandler.INSTANCE_WITHOUT_BOOTTIME,false);
  sysProps.registerOperationHandler(SystemPropertyRemoveHandler.OPERATION_NAME,SystemPropertyRemoveHandler.INSTANCE,SystemPropertyRemoveHandler.INSTANCE,false);
  sysProps.registerReadWriteAttribute(VALUE,null,SystemPropertyValueWriteAttributeHandler.INSTANCE,AttributeAccess.Storage.CONFIGURATION);
  ManagementResourceRegistration management=root.registerSubModel(PathElement.pathElement(CORE_SERVICE,MANAGEMENT),CommonProviders.MANAGEMENT_WITH_INTERFACES_PROVIDER);
  ManagementResourceRegistration securityRealm=management.registerSubModel(PathElement.pathElement(SECURITY_REALM),CommonProviders.MANAGEMENT_SECURITY_REALM_PROVIDER);
  securityRealm.registerOperationHandler(SecurityRealmAddHandler.OPERATION_NAME,SecurityRealmAddHandler.INSTANCE,SecurityRealmAddHandler.INSTANCE,false);
  ManagementResourceRegistration connection=management.registerSubModel(PathElement.pathElement(OUTBOUND_CONNECTION),CommonProviders.MANAGEMENT_OUTBOUND_CONNECTION_PROVIDER);
  connection.registerOperationHandler(ConnectionAddHandler.OPERATION_NAME,ConnectionAddHandler.INSTANCE,ConnectionAddHandler.INSTANCE,false);
  ManagementResourceRegistration managementNative=management.registerSubModel(PathElement.pathElement(MANAGEMENT_INTERFACE,NATIVE_INTERFACE),CommonProviders.NATIVE_MANAGEMENT_PROVIDER);
  managementNative.registerOperationHandler(NativeManagementAddHandler.OPERATION_NAME,NativeManagementAddHandler.INSTANCE,NativeManagementAddHandler.INSTANCE,false);
  managementNative.registerReadWriteAttribute(SECURITY_REALM,null,NativeManagementAttributeHandlers.INSTANCE,Storage.CONFIGURATION);
  ManagementResourceRegistration managementHttp=management.registerSubModel(PathElement.pathElement(MANAGEMENT_INTERFACE,HTTP_INTERFACE),CommonProviders.HTTP_MANAGEMENT_PROVIDER);
  managementHttp.registerOperationHandler(HttpManagementAddHandler.OPERATION_NAME,HttpManagementAddHandler.INSTANCE,HttpManagementAddHandler.INSTANCE,false);
  managementHttp.registerReadWriteAttribute(SECURITY_REALM,null,HttpManagementAttributeHandlers.INSTANCE,Storage.CONFIGURATION);
  ManagementResourceRegistration serviceContainer=root.registerSubModel(PathElement.pathElement(CORE_SERVICE,SERVICE_CONTAINER),CommonProviders.SERVICE_CONTAINER_PROVIDER);
  serviceContainer.registerOperationHandler(DumpServicesHandler.OPERATION_NAME,DumpServicesHandler.INSTANCE,DumpServicesHandler.INSTANCE,false);
  ManagementResourceRegistration paths=root.registerSubModel(PathElement.pathElement(PATH),CommonProviders.SPECIFIED_PATH_PROVIDER);
  paths.registerOperationHandler(SpecifiedPathAddHandler.OPERATION_NAME,SpecifiedPathAddHandler.INSTANCE,SpecifiedPathAddHandler.INSTANCE,false);
  paths.registerOperationHandler(SpecifiedPathRemoveHandler.OPERATION_NAME,SpecifiedPathRemoveHandler.INSTANCE,SpecifiedPathRemoveHandler.INSTANCE,false);
  ManagementResourceRegistration interfaces=root.registerSubModel(PathElement.pathElement(INTERFACE),CommonProviders.SPECIFIED_INTERFACE_PROVIDER);
  interfaces.registerOperationHandler(SpecifiedInterfaceAddHandler.OPERATION_NAME,SpecifiedInterfaceAddHandler.INSTANCE,SpecifiedInterfaceAddHandler.INSTANCE,false);
  interfaces.registerOperationHandler(SpecifiedInterfaceRemoveHandler.OPERATION_NAME,SpecifiedInterfaceRemoveHandler.INSTANCE,SpecifiedInterfaceRemoveHandler.INSTANCE,false);
  ManagementResourceRegistration socketGroup=root.registerSubModel(PathElement.pathElement(SOCKET_BINDING_GROUP),ServerDescriptionProviders.SOCKET_BINDING_GROUP_PROVIDER);
  socketGroup.registerOperationHandler(BindingGroupAddHandler.OPERATION_NAME,BindingGroupAddHandler.INSTANCE,BindingGroupAddHandler.INSTANCE,false);
  socketGroup.registerOperationHandler(SocketBindingGroupRemoveHandler.OPERATION_NAME,SocketBindingGroupRemoveHandler.INSTANCE,SocketBindingGroupRemoveHandler.INSTANCE,false);
  socketGroup.registerReadWriteAttribute(PORT_OFFSET,null,BindingGroupPortOffsetHandler.INSTANCE,AttributeAccess.Storage.CONFIGURATION);
  socketGroup.registerReadWriteAttribute(DEFAULT_INTERFACE,null,BindingGroupDefaultInterfaceHandler.INSTANCE,AttributeAccess.Storage.CONFIGURATION);
  ManagementResourceRegistration socketBinding=socketGroup.registerSubModel(PathElement.pathElement(SOCKET_BINDING),CommonProviders.SOCKET_BINDING_PROVIDER);
  socketBinding.registerOperationHandler(BindingAddHandler.OPERATION_NAME,BindingAddHandler.INSTANCE,BindingAddHandler.INSTANCE,false);
  socketBinding.registerOperationHandler(BindingRemoveHandler.OPERATION_NAME,BindingRemoveHandler.INSTANCE,BindingRemoveHandler.INSTANCE,false);
  socketBinding.registerMetric(BindingMetricHandlers.BoundHandler.ATTRIBUTE_NAME,BindingMetricHandlers.BoundHandler.INSTANCE);
  socketBinding.registerMetric(BindingMetricHandlers.BoundAddressHandler.ATTRIBUTE_NAME,BindingMetricHandlers.BoundAddressHandler.INSTANCE);
  socketBinding.registerMetric(BindingMetricHandlers.BoundPortHandler.ATTRIBUTE_NAME,BindingMetricHandlers.BoundPortHandler.INSTANCE);
  socketBinding.registerReadWriteAttribute(INTERFACE,null,BindingInterfaceHandler.INSTANCE,AttributeAccess.Storage.CONFIGURATION);
  socketBinding.registerReadWriteAttribute(PORT,null,BindingPortHandler.INSTANCE,AttributeAccess.Storage.CONFIGURATION);
  socketBinding.registerReadWriteAttribute(FIXED_PORT,null,BindingFixedPortHandler.INSTANCE,AttributeAccess.Storage.CONFIGURATION);
  socketBinding.registerReadWriteAttribute(MULTICAST_ADDRESS,null,BindingMulticastAddressHandler.INSTANCE,AttributeAccess.Storage.CONFIGURATION);
  socketBinding.registerReadWriteAttribute(MULTICAST_PORT,null,BindingMulticastPortHandler.INSTANCE,AttributeAccess.Storage.CONFIGURATION);
  ManagementResourceRegistration deployments=root.registerSubModel(PathElement.pathElement(DEPLOYMENT),ServerDescriptionProviders.DEPLOYMENT_PROVIDER);
  DeploymentAddHandler dah=new DeploymentAddHandler(contentRepository);
  deployments.registerOperationHandler(DeploymentAddHandler.OPERATION_NAME,dah,dah,false);
  deployments.registerOperationHandler(DeploymentRemoveHandler.OPERATION_NAME,DeploymentRemoveHandler.INSTANCE,DeploymentRemoveHandler.INSTANCE,false);
  deployments.registerOperationHandler(DeploymentDeployHandler.OPERATION_NAME,DeploymentDeployHandler.INSTANCE,DeploymentDeployHandler.INSTANCE,false);
  deployments.registerOperationHandler(DeploymentUndeployHandler.OPERATION_NAME,DeploymentUndeployHandler.INSTANCE,DeploymentUndeployHandler.INSTANCE,false);
  deployments.registerOperationHandler(DeploymentRedeployHandler.OPERATION_NAME,DeploymentRedeployHandler.INSTANCE,DeploymentRedeployHandler.INSTANCE,false);
  deployments.registerMetric(DeploymentStatusHandler.ATTRIBUTE_NAME,DeploymentStatusHandler.INSTANCE);
  deployments.registerSubModel(PathElement.pathElement("subdeployment"),deployments);
  ManagementResourceRegistration extensions=root.registerSubModel(PathElement.pathElement(EXTENSION),CommonProviders.EXTENSION_PROVIDER);
  ExtensionContext extensionContext=new ExtensionContextImpl(root,deployments,extensibleConfigurationPersister);
  ExtensionAddHandler addExtensionHandler=new ExtensionAddHandler(extensionContext);
  extensions.registerOperationHandler(ExtensionAddHandler.OPERATION_NAME,addExtensionHandler,addExtensionHandler,false);
  extensions.registerOperationHandler(ExtensionRemoveHandler.OPERATION_NAME,ExtensionRemoveHandler.INSTANCE,ExtensionRemoveHandler.INSTANCE,false);
  root.registerOperationHandler(DeployerChainAddHandler.NAME,DeployerChainAddHandler.INSTANCE,DeployerChainAddHandler.INSTANCE,false,EntryType.PRIVATE);
}
