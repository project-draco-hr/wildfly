{
  ModelType modelType=getType(typeNode);
  if (modelType == null) {
    return new ComplexTypeConverter(typeNode);
  }
switch (modelType) {
case BIG_DECIMAL:
    return BigDecimalTypeConverter.INSTANCE;
case BIG_INTEGER:
  return BigIntegerTypeConverter.INSTANCE;
case BOOLEAN:
return BooleanTypeConverter.INSTANCE;
case BYTES:
return BytesTypeConverter.INSTANCE;
case DOUBLE:
return DoubleTypeConverter.INSTANCE;
case EXPRESSION:
return ExpressionTypeConverter.INSTANCE;
case STRING:
return StringTypeConverter.INSTANCE;
case PROPERTY:
return PropertyTypeConverter.INSTANCE;
case INT:
return IntegerTypeConverter.INSTANCE;
case LONG:
return LongTypeConverter.INSTANCE;
case TYPE:
return ModelTypeTypeConverter.INSTANCE;
case OBJECT:
return new ObjectTypeConverter(valueTypeNode);
case LIST:
return new ListTypeConverter(valueTypeNode);
case UNDEFINED:
return UndefinedTypeConverter.INSTANCE;
default :
throw MESSAGES.unknownType(modelType);
}
}
