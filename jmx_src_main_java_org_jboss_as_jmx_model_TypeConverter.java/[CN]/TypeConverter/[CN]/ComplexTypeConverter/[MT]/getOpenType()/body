{
  List<String> itemNames=new ArrayList<String>();
  List<String> itemDescriptions=new ArrayList<String>();
  List<OpenType<?>> itemTypes=new ArrayList<OpenType<?>>();
  if (!typeNode.isDefined() || typeNode.getType() == ModelType.STRING) {
    return SimpleType.STRING;
  }
  for (  String name : typeNode.keys()) {
    ModelNode current=typeNode.get(name);
    itemNames.add(name);
    itemDescriptions.add(current.get(DESCRIPTION).asString());
    itemTypes.add(getConverter(current.get(TYPE),current.get(VALUE_TYPE)).getOpenType());
  }
  try {
    return new CompositeType("Complex type","A complex type",itemNames.toArray(new String[itemNames.size()]),itemDescriptions.toArray(new String[itemDescriptions.size()]),itemTypes.toArray(new OpenType[itemTypes.size()]));
  }
 catch (  OpenDataException e) {
    throw new RuntimeException(e);
  }
}
