{
  ModelController modelController=injectedController.getValue();
  modelControllerClient=modelController.createClient(Executors.newCachedThreadPool());
  final XResolver resolver=injectedResolver.getValue();
  final XPersistentRepository repository=injectedRepository.getValue();
  final ServerDeploymentHelper serverDeployer=new ServerDeploymentHelper(modelControllerClient);
  provisioner=new AbstractResourceProvisioner(resolver,repository,XResource.TYPE_BUNDLE){
    @Override @SuppressWarnings("unchecked") public <T>List<T> installResources(    List<XResource> resources,    Class<T> type) throws ProvisionException {
      List<T> result=new ArrayList<T>();
      for (      XResource res : resources) {
        String name=res.getIdentityCapability().getName();
        InputStream input=((RepositoryContent)res).getContent();
        try {
          String runtimeName=serverDeployer.deploy(name,input);
          result.add((T)runtimeName);
        }
 catch (        ServerDeploymentException ex) {
          throw new ProvisionException(ex);
        }
      }
      return Collections.unmodifiableList(result);
    }
  }
;
}
