{
  Collection foreignKeys=metadata.getRelatedRole().getKeyFields();
  Map fkFieldsByRelatedPKFields=new HashMap();
  for (Iterator i=foreignKeys.iterator(); i.hasNext(); ) {
    JDBCCMPFieldMetaData fkFieldMetaData=(JDBCCMPFieldMetaData)i.next();
    JDBCCMPFieldBridge2 relatedPKField=(JDBCCMPFieldBridge2)relatedEntity.getFieldByName(fkFieldMetaData.getFieldName());
    String fkColumnName=fkFieldMetaData.getColumnName();
    JDBCCMPFieldBridge2 fkField=null;
    JDBCCMPFieldBridge2[] tableFields=(JDBCCMPFieldBridge2[])entity.getTableFields();
    for (int tableInd=0; tableInd < tableFields.length && fkField == null; ++tableInd) {
      JDBCCMPFieldBridge2 cmpField=tableFields[tableInd];
      if (fkColumnName.equals(cmpField.getColumnName())) {
        fkField=new JDBCCMPFieldBridge2(cmpField,relatedPKField);
      }
    }
    if (fkField == null) {
      fkField=entity.addTableField(fkFieldMetaData);
    }
    fkFieldsByRelatedPKFields.put(relatedPKField,fkField);
  }
  if (fkFieldsByRelatedPKFields.size() > 0) {
    JDBCFieldBridge[] pkFields=relatedEntity.getPrimaryKeyFields();
    List fkList=new ArrayList(pkFields.length);
    List relatedPKList=new ArrayList(pkFields.length);
    for (int i=0; i < pkFields.length; ++i) {
      JDBCFieldBridge relatedPKField=pkFields[i];
      JDBCFieldBridge fkField=(JDBCCMPFieldBridge2)fkFieldsByRelatedPKFields.remove(relatedPKField);
      fkList.add(fkField);
      relatedPKList.add(relatedPKField);
    }
    foreignKeyFields=(JDBCCMPFieldBridge2[])fkList.toArray(new JDBCCMPFieldBridge2[fkList.size()]);
    relatedPKFields=(JDBCCMPFieldBridge2[])relatedPKList.toArray(new JDBCCMPFieldBridge2[relatedPKList.size()]);
    if (metadata.hasForeignKeyConstraint()) {
      fkConstraint=entity.getTable().addFkConstraint(foreignKeyFields,relatedEntity.getTable());
    }
  }
 else {
    foreignKeyFields=null;
    relatedPKFields=null;
  }
}
