{
  LazyValue<EEModuleClassConfiguration> future=new LazyValue<EEModuleClassConfiguration>(){
    @Override protected EEModuleClassConfiguration compute(){
      if (classDescription.isInvalid()) {
        throw new RuntimeException("Could not get class configuration for " + classDescription.getClassName() + " due to the following errors: "+ classDescription.getInvalidMessage());
      }
      try {
        ClassIndex index=deploymentClassIndex.classIndex(classDescription.getClassName());
        final EEModuleClassConfiguration classConfiguration=new EEModuleClassConfiguration(index.getModuleClass(),classDescription);
        logger.debug("Configuring EE module class: " + index.getModuleClass());
        for (        ClassConfigurator classConfigurator : classDescription.getConfigurators()) {
          try {
            classConfigurator.configure(phaseContext,classDescription,classConfiguration);
          }
 catch (          DeploymentUnitProcessingException e) {
            throw new RuntimeException(e);
          }
        }
        return classConfiguration;
      }
 catch (      ClassNotFoundException e) {
        throw new RuntimeException("Failed to load class " + classDescription.getClassName(),e);
      }
    }
  }
;
  return future;
}
