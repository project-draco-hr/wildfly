{
  PathAddress transportAddress=stackAddress.append(ModelKeys.TRANSPORT,ModelKeys.TRANSPORT_NAME);
  ModelNode transport=Util.createAddOperation(transportAddress);
  for (int i=0; i < reader.getAttributeCount(); i++) {
    String value=reader.getAttributeValue(i);
    Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case TYPE:
{
        try {
          TP.class.getClassLoader().loadClass(org.jgroups.conf.ProtocolConfiguration.protocol_prefix + '.' + value).asSubclass(TP.class).newInstance();
          TransportResource.TYPE.parseAndSetParameter(value,transport,reader);
        }
 catch (        Exception e) {
          throw ParseUtils.invalidAttributeValue(reader,i);
        }
        break;
      }
case SHARED:
{
      TransportResource.SHARED.parseAndSetParameter(value,transport,reader);
      break;
    }
case SOCKET_BINDING:
{
    TransportResource.SOCKET_BINDING.parseAndSetParameter(value,transport,reader);
    break;
  }
case DIAGNOSTICS_SOCKET_BINDING:
{
  TransportResource.DIAGNOSTICS_SOCKET_BINDING.parseAndSetParameter(value,transport,reader);
  break;
}
case DEFAULT_EXECUTOR:
{
TransportResource.DEFAULT_EXECUTOR.parseAndSetParameter(value,transport,reader);
break;
}
case OOB_EXECUTOR:
{
TransportResource.OOB_EXECUTOR.parseAndSetParameter(value,transport,reader);
break;
}
case TIMER_EXECUTOR:
{
TransportResource.TIMER_EXECUTOR.parseAndSetParameter(value,transport,reader);
break;
}
case THREAD_FACTORY:
{
TransportResource.THREAD_FACTORY.parseAndSetParameter(value,transport,reader);
break;
}
case SITE:
{
TransportResource.SITE.parseAndSetParameter(value,transport,reader);
break;
}
case RACK:
{
TransportResource.RACK.parseAndSetParameter(value,transport,reader);
break;
}
case MACHINE:
{
TransportResource.MACHINE.parseAndSetParameter(value,transport,reader);
break;
}
default :
{
throw ParseUtils.unexpectedAttribute(reader,i);
}
}
}
if (!transport.hasDefined(ModelKeys.TYPE)) {
throw ParseUtils.missingRequired(reader,Collections.singleton(Attribute.TYPE));
}
operations.add(transport);
while (reader.hasNext() && (reader.nextTag() != XMLStreamConstants.END_ELEMENT)) {
Element element=Element.forName(reader.getLocalName());
switch (element) {
case PROPERTY:
{
this.parseProperty(reader,transportAddress,operations);
break;
}
default :
{
throw ParseUtils.unexpectedElement(reader);
}
}
}
}
