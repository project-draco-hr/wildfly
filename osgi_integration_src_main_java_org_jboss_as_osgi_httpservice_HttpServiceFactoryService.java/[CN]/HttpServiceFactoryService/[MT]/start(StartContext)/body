{
  ServerEnvironment env=injectedServerEnvironment.getValue();
  Host virtualHost=injectedVirtualHost.getValue().getHost();
  BundleContext syscontext=injectedSystemContext.getValue();
  WebServer webServer=injectedWebServer.getValue();
  File storageDir=new File(env.getServerTempDir() + File.separator + CONTEXT_NAME+ File.separator+ "httpservice-root");
  context.setDocBase(storageDir.getPath());
  storageDir.mkdirs();
  context.setPath(CONTEXT_NAME);
  context.addLifecycleListener(new ContextConfig());
  Loader loader=new WebCtxLoader(getClass().getClassLoader());
  loader.setContainer(virtualHost);
  context.setLoader(loader);
  context.setInstanceManager(new LocalInstanceManager());
  context.addMimeMapping("html","text/html");
  context.addMimeMapping("jpg","image/jpeg");
  context.addMimeMapping("png","image/png");
  context.addMimeMapping("gif","image/gif");
  context.addMimeMapping("css","text/css");
  context.addMimeMapping("js","text/javascript");
  virtualHost.addChild(context);
  WEB_LOGGER.registerWebapp(context.getName());
  try {
    context.create();
  }
 catch (  Exception ex) {
    throw new StartException(WebMessages.MESSAGES.createContextFailed(),ex);
  }
  try {
    context.start();
  }
 catch (  LifecycleException ex) {
    throw new StartException(WebMessages.MESSAGES.startContextFailed(),ex);
  }
  Hashtable<String,Object> props=new Hashtable<String,Object>();
  props.put(Constants.SERVICE_RANKING,Integer.MIN_VALUE);
  props.put("provider",getClass().getPackage().getName());
  ServiceFactory serviceFactory=new HttpServiceFactory(webServer,virtualHost,context);
  registration=syscontext.registerService(HttpService.class.getName(),serviceFactory,props);
}
