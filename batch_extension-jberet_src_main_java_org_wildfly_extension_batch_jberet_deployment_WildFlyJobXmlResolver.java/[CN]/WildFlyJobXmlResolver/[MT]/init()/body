{
  for (  JobXmlResolver resolver : ServiceLoader.load(JobXmlResolver.class,classLoader)) {
    jobXmlResolvers.add(resolver);
    for (    String jobXml : resolver.getJobXmlNames(classLoader)) {
      resolvedJobs.put(jobXml,resolver.resolveJobName(jobXml,classLoader));
    }
  }
  for (  Map.Entry<String,VirtualFile> entry : jobXmlFiles.entrySet()) {
    try {
      final Job job=JobParser.parseJob(entry.getValue().openStream(),classLoader,new XMLResolver(){
        @Override public Object resolveEntity(        final String publicID,        final String systemID,        final String baseURI,        final String namespace) throws XMLStreamException {
          try {
            return (jobXmlFiles.containsKey(systemID) ? jobXmlFiles.get(systemID).openStream() : null);
          }
 catch (          IOException e) {
            throw new XMLStreamException(e);
          }
        }
      }
);
      resolvedJobs.put(entry.getKey(),job.getId());
    }
 catch (    XMLStreamException|IOException e) {
      BatchLogger.LOGGER.invalidJobXmlFile(entry.getKey());
    }
  }
}
