{
  final ModelControllerClient modelControllerClient=getModelControllerClient(managementServerHostName,managementPort,callbackHandler);
  try {
    final ModelNode addRemoteOutboundConnection=new ModelNode();
    addRemoteOutboundConnection.get(OP).set(ADD);
    final PathAddress address=PathAddress.pathAddress(PathElement.pathElement(SUBSYSTEM,RemotingExtension.SUBSYSTEM_NAME),PathElement.pathElement("remote-outbound-connection",connectionName));
    addRemoteOutboundConnection.get(OP_ADDR).set(address.toModelNode());
    addRemoteOutboundConnection.get("outbound-socket-binding-ref").set(outboundSocketRef);
    final ModelNode op=Util.getEmptyOperation(COMPOSITE,new ModelNode());
    final ModelNode steps=op.get(STEPS);
    steps.add(addRemoteOutboundConnection);
    if (!connectionCreationOptions.isEmpty()) {
      for (      Map.Entry<String,String> property : connectionCreationOptions.entrySet()) {
        ModelNode propertyOp=new ModelNode();
        propertyOp.get(OP).set(ADD);
        propertyOp.get(OP_ADDR).set(address.toModelNode()).add("property",property.getKey());
        propertyOp.get("value").set(property.getValue());
        steps.add(propertyOp);
      }
    }
    execute(modelControllerClient,op);
  }
 catch (  IOException ioe) {
    throw new RuntimeException(ioe);
  }
 finally {
    try {
      modelControllerClient.close();
    }
 catch (    IOException e) {
      logger.warn("Error closing model controller client",e);
    }
  }
}
