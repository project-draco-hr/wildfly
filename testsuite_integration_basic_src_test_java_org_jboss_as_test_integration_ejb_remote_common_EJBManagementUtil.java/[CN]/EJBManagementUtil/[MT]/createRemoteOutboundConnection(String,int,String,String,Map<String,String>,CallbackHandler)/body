{
  final ModelControllerClient modelControllerClient=getModelControllerClient(managementServerHostName,managementPort,callbackHandler);
  try {
    final ModelNode addRemoteOutboundConnection=new ModelNode();
    addRemoteOutboundConnection.get(OP).set(ADD);
    final PathAddress address=PathAddress.pathAddress(PathElement.pathElement(SUBSYSTEM,RemotingExtension.SUBSYSTEM_NAME),PathElement.pathElement("remote-outbound-connection",connectionName));
    addRemoteOutboundConnection.get(OP_ADDR).set(address.toModelNode());
    addRemoteOutboundConnection.get("outbound-socket-binding-ref").set(outboundSocketRef);
    if (!connectionCreationOptions.isEmpty()) {
      final ModelNode connectionCreationOptionsModel=addRemoteOutboundConnection.get("connection-creation-options");
      for (      final Map.Entry<String,String> entry : connectionCreationOptions.entrySet()) {
        final String optionName=entry.getKey();
        final String optionValue=entry.getValue();
        connectionCreationOptionsModel.get(optionName).set(optionValue);
      }
    }
    execute(modelControllerClient,addRemoteOutboundConnection);
  }
 catch (  IOException ioe) {
    throw new RuntimeException(ioe);
  }
 finally {
    try {
      modelControllerClient.close();
    }
 catch (    IOException e) {
      logger.warn("Error closing model controller client",e);
    }
  }
}
