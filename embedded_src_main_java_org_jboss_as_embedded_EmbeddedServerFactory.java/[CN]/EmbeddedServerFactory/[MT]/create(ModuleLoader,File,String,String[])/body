{
  setupBundlePath(bundlePath);
  setupVfsModule(moduleLoader);
  setupLoggingSystem(moduleLoader);
  WildFlySecurityManager.setPropertyPrivileged(SYSPROP_KEY_JBOSS_HOME_DIR,jbossHomeDir.getAbsolutePath());
  final Module embeddedModule;
  try {
    embeddedModule=moduleLoader.loadModule(ModuleIdentifier.create(MODULE_ID_EMBEDDED));
  }
 catch (  final ModuleLoadException mle) {
    throw EmbeddedLogger.ROOT_LOGGER.moduleLoaderError(mle,MODULE_ID_EMBEDDED,moduleLoader);
  }
  final ModuleClassLoader embeddedModuleCL=embeddedModule.getClassLoader();
  final Class<?> embeddedServerFactoryClass;
  final Class<?> standaloneServerClass;
  try {
    embeddedServerFactoryClass=embeddedModuleCL.loadClass(EmbeddedStandAloneServerFactory.class.getName());
    standaloneServerClass=embeddedModuleCL.loadClass(StandaloneServer.class.getName());
  }
 catch (  final ClassNotFoundException cnfe) {
    throw EmbeddedLogger.ROOT_LOGGER.cannotLoadEmbeddedServerFactory(cnfe,EmbeddedStandAloneServerFactory.class.getName());
  }
  final Method createServerMethod;
  try {
    createServerMethod=embeddedServerFactoryClass.getMethod("create",File.class,ModuleLoader.class,Properties.class,Map.class,String[].class);
  }
 catch (  final NoSuchMethodException nsme) {
    throw EmbeddedLogger.ROOT_LOGGER.cannotGetReflectiveMethod(nsme,"create",embeddedServerFactoryClass.getName());
  }
  Object standaloneServerImpl;
  try {
    Properties sysprops=WildFlySecurityManager.getSystemPropertiesPrivileged();
    Map<String,String> sysenv=WildFlySecurityManager.getSystemEnvironmentPrivileged();
    String[] args=cmdargs != null ? cmdargs : new String[0];
    standaloneServerImpl=createServerMethod.invoke(null,jbossHomeDir,moduleLoader,sysprops,sysenv,args);
  }
 catch (  final InvocationTargetException ite) {
    throw EmbeddedLogger.ROOT_LOGGER.cannotCreateStandaloneServer(ite.getCause(),createServerMethod);
  }
catch (  final IllegalAccessException iae) {
    throw EmbeddedLogger.ROOT_LOGGER.cannotCreateStandaloneServer(iae,createServerMethod);
  }
  return new StandaloneServerIndirection(standaloneServerClass,standaloneServerImpl);
}
