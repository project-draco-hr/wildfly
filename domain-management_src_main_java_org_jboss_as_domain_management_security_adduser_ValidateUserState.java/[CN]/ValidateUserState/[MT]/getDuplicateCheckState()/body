{
  return new State(){
    @Override public State execute(){
      if (stateValues.isExistingDisabledUser() || stateValues.isExistingEnabledUser()) {
        State duplicateContinuing=stateValues.isSilentOrNonInteractive() ? null : new PromptNewUserState(theConsole,stateValues);
        stateValues.setExistingUser(true);
        if (stateValues.isSilentOrNonInteractive()) {
          return ValidateUserState.this;
        }
 else {
          final boolean existingDisabledUser=stateValues.isExistingDisabledUser();
          if (existingDisabledUser) {
            theConsole.printf(DomainManagementLogger.ROOT_LOGGER.aboutToUpdateDisabledUser(stateValues.getUserName()));
          }
 else {
            theConsole.printf(DomainManagementLogger.ROOT_LOGGER.aboutToUpdateEnabledUser(stateValues.getUserName()));
          }
          theConsole.printf(AddUser.NEW_LINE);
          String response=theConsole.readLine("(a): ");
          if (response == null) {
            theConsole.printf(AddUser.NEW_LINE);
            return null;
          }
          Option option=convertResponse(response,existingDisabledUser);
switch (option) {
case NEW:
            return duplicateContinuing;
case UPDATE:
          break;
case ENABLE:
        stateValues.getOptions().setEnableDisableMode(true);
      stateValues.getOptions().setDisable(false);
    return new PreModificationState(theConsole,stateValues);
case DISABLE:
  stateValues.getOptions().setEnableDisableMode(true);
stateValues.getOptions().setDisable(true);
return new PreModificationState(theConsole,stateValues);
default :
return new ErrorState(theConsole,DomainManagementLogger.ROOT_LOGGER.invalidChoiceUpdateUserResponse(),this,stateValues);
}
return ValidateUserState.this;
}
}
 else {
stateValues.setExistingUser(false);
return ValidateUserState.this;
}
}
}
;
}
