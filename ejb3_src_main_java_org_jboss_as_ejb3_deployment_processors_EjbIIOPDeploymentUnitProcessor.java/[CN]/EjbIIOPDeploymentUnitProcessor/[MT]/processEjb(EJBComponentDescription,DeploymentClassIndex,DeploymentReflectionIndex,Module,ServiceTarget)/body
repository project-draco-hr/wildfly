{
  componentDescription.setExposedViaIiop(true);
  final EJBViewDescription remoteView=componentDescription.getEjbRemoteView();
  final ClassIndex remoteClass;
  try {
    remoteClass=classIndex.classIndex(remoteView.getViewClassName());
  }
 catch (  ClassNotFoundException e) {
    throw new RuntimeException("Could not load remote interface for " + componentDescription.getEJBClassName(),e);
  }
  final EJBViewDescription homeView=componentDescription.getEjbHomeView();
  final ClassIndex homeClass;
  try {
    homeClass=classIndex.classIndex(homeView.getViewClassName());
  }
 catch (  ClassNotFoundException e) {
    throw new RuntimeException("Could not load home interface for " + componentDescription.getEJBClassName(),e);
  }
  final InterfaceAnalysis remoteInterfaceAnalysis;
  try {
    remoteInterfaceAnalysis=InterfaceAnalysis.getInterfaceAnalysis(remoteClass.getModuleClass());
  }
 catch (  RMIIIOPViolationException e) {
    throw new RuntimeException("Could not analyze remote interface for " + componentDescription.getEJBClassName(),e);
  }
  final Map<String,SkeletonStrategy> beanMethodMap=new HashMap<String,SkeletonStrategy>();
  final AttributeAnalysis[] remoteAttrs=remoteInterfaceAnalysis.getAttributes();
  for (int i=0; i < remoteAttrs.length; i++) {
    final OperationAnalysis op=remoteAttrs[i].getAccessorAnalysis();
    logger.debug("    " + op.getJavaName() + "\n                "+ op.getIDLName());
    final Method method=translateMethod(deploymentReflectionIndex,op);
    beanMethodMap.put(op.getIDLName(),new SkeletonStrategy(method));
    final OperationAnalysis setop=remoteAttrs[i].getMutatorAnalysis();
    if (setop != null) {
      logger.debug("    " + op.getJavaName() + "\n                "+ op.getIDLName());
      final Method realSetmethod=translateMethod(deploymentReflectionIndex,setop);
      beanMethodMap.put(op.getIDLName(),new SkeletonStrategy(realSetmethod));
    }
  }
  final OperationAnalysis[] ops=remoteInterfaceAnalysis.getOperations();
  for (int i=0; i < ops.length; i++) {
    logger.debug("    " + ops[i].getJavaName() + "\n                "+ ops[i].getIDLName());
    beanMethodMap.put(ops[i].getIDLName(),new SkeletonStrategy(translateMethod(deploymentReflectionIndex,ops[i])));
  }
  final String[] beanRepositoryIds=remoteInterfaceAnalysis.getAllTypeIds();
  final InterfaceAnalysis homeInterfaceAnalysis;
  try {
    homeInterfaceAnalysis=InterfaceAnalysis.getInterfaceAnalysis(homeClass.getModuleClass());
  }
 catch (  RMIIIOPViolationException e) {
    throw new RuntimeException("Could not analyze remote interface for " + componentDescription.getEJBClassName(),e);
  }
  final Map<String,SkeletonStrategy> homeMethodMap=new HashMap<String,SkeletonStrategy>();
  final AttributeAnalysis[] attrs=homeInterfaceAnalysis.getAttributes();
  for (int i=0; i < attrs.length; i++) {
    final OperationAnalysis op=attrs[i].getAccessorAnalysis();
    logger.debug("    " + op.getJavaName() + "\n                "+ op.getIDLName());
    homeMethodMap.put(op.getIDLName(),new SkeletonStrategy(translateMethod(deploymentReflectionIndex,op)));
    final OperationAnalysis setop=attrs[i].getMutatorAnalysis();
    if (setop != null) {
      logger.debug("    " + setop.getJavaName() + "\n                "+ setop.getIDLName());
      homeMethodMap.put(setop.getIDLName(),new SkeletonStrategy(translateMethod(deploymentReflectionIndex,setop)));
    }
  }
  final OperationAnalysis[] homeops=homeInterfaceAnalysis.getOperations();
  for (int i=0; i < homeops.length; i++) {
    logger.debug("    " + homeops[i].getJavaName() + "\n                "+ homeops[i].getIDLName());
    homeMethodMap.put(homeops[i].getIDLName(),new SkeletonStrategy(translateMethod(deploymentReflectionIndex,homeops[i])));
  }
  final String[] homeRepositoryIds=homeInterfaceAnalysis.getAllTypeIds();
  final EjbIIOPService service=new EjbIIOPService(beanMethodMap,beanRepositoryIds,homeMethodMap,homeRepositoryIds,settingsService.isUseQualifiedName(),module);
  final ServiceBuilder<EjbIIOPService> builder=serviceTarget.addService(componentDescription.getServiceName().append(EjbIIOPService.SERVICE_NAME),service);
  builder.addDependency(componentDescription.getCreateServiceName(),EJBComponent.class,service.getEjbComponentInjectedValue());
  builder.addDependency(homeView.getServiceName(),ComponentView.class,service.getHomeView());
  builder.addDependency(remoteView.getServiceName(),ComponentView.class,service.getRemoteView());
  builder.addDependency(CorbaORBService.SERVICE_NAME,ORB.class,service.getOrb());
  builder.addDependency(POARegistry.SERVICE_NAME,POARegistry.class,service.getPoaRegistry());
  builder.addDependency(CorbaPOAService.INTERFACE_REPOSITORY_SERVICE_NAME,POA.class,service.getIrPoa());
  builder.addDependency(CorbaNamingService.SERVICE_NAME,NamingContextExt.class,service.getCorbaNamingContext());
  builder.addDependency(DeploymentRepository.SERVICE_NAME,DeploymentRepository.class,service.getDeploymentRepository());
  builder.addDependency(Services.JBOSS_SERVICE_MODULE_LOADER,ServiceModuleLoader.class,service.getServiceModuleLoaderInjectedValue());
  builder.addDependency(TxnServices.JBOSS_TXN_ARJUNA_TRANSACTION_MANAGER);
  builder.install();
}
