{
  final SubordinateTransaction subordinateTransaction=this.transactionsRepository.getImportedTransaction(this.xidTransactionID);
  if (subordinateTransaction == null) {
    final Transaction recoveredTransaction=tryRecoveryForImportedTransaction();
    if (recoveredTransaction == null) {
      if (EjbLogger.EJB3_INVOCATION_LOGGER.isDebugEnabled()) {
        EjbLogger.EJB3_INVOCATION_LOGGER.debug("Not preparing " + this.xidTransactionID + " as is was not found on the server");
      }
    }
    return XAResource.XA_OK;
  }
  this.resumeTransaction(subordinateTransaction);
  try {
    int result=subordinateTransaction.doPrepare();
switch (result) {
case TwoPhaseOutcome.PREPARE_READONLY:
      SubordinationManager.getTransactionImporter().removeImportedTransaction(this.xidTransactionID.getXid());
    return XAResource.XA_RDONLY;
case TwoPhaseOutcome.PREPARE_OK:
  return XAResource.XA_OK;
case TwoPhaseOutcome.PREPARE_NOTOK:
Exception initCause=null;
int xaExceptionCode=XAException.XA_RBROLLBACK;
try {
subordinateTransaction.doRollback();
}
 catch (HeuristicCommitException e) {
initCause=e;
xaExceptionCode=XAException.XAER_RMERR;
}
catch (HeuristicMixedException e) {
initCause=e;
xaExceptionCode=XAException.XAER_RMERR;
}
catch (SystemException e) {
initCause=e;
xaExceptionCode=XAException.XAER_RMERR;
}
catch (final HeuristicRollbackException e) {
initCause=e;
xaExceptionCode=XAException.XAER_RMERR;
}
SubordinationManager.getTransactionImporter().removeImportedTransaction(this.xidTransactionID.getXid());
final XAException xaException=new XAException(xaExceptionCode);
if (initCause != null) {
xaException.initCause(initCause);
}
throw xaException;
case TwoPhaseOutcome.INVALID_TRANSACTION:
throw new XAException(XAException.XAER_NOTA);
default :
throw new XAException(XAException.XA_RBOTHER);
}
}
  finally {
this.transactionsRepository.getTransactionManager().suspend();
}
}
