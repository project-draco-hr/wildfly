{
  final Resource resource=context.readResource(base,false);
  final PathAddress current=address.subAddress(base.size());
  final Iterator<PathElement> iterator=current.iterator();
  if (iterator.hasNext()) {
    final PathElement element=iterator.next();
    if (element.isMultiTarget()) {
      final String childType=element.getKey().equals("*") ? null : element.getKey();
      final ImmutableManagementResourceRegistration registration=context.getResourceRegistration().getSubModel(base);
      if (registration.isRemote() || registration.isRuntimeOnly()) {
        throw new IllegalStateException();
      }
      final Map<String,Set<String>> resolved=getChildAddresses(context,address,registration,resource,childType);
      for (      Map.Entry<String,Set<String>> entry : resolved.entrySet()) {
        final String key=entry.getKey();
        final Set<String> children=entry.getValue();
        if (children.isEmpty()) {
          continue;
        }
        if (element.isWildcard()) {
          for (          final String child : children) {
            if (resource.hasChild(PathElement.pathElement(key,child))) {
              safeExecute(address,base.append(PathElement.pathElement(key,child)),context);
            }
          }
        }
 else {
          for (          final String segment : element.getSegments()) {
            if (children.contains(segment)) {
              if (resource.hasChild(PathElement.pathElement(key,segment))) {
                safeExecute(address,base.append(PathElement.pathElement(key,segment)),context);
              }
            }
          }
        }
      }
    }
 else {
      if (resource.hasChild(element)) {
        safeExecute(address,base.append(element),context);
      }
    }
  }
 else {
    final ModelNode newOp=operation.clone();
    newOp.get(OP_ADDR).set(base.toModelNode());
    final ModelNode resultItem=this.result.add();
    final ModelNode resultAddress=resultItem.get(OP_ADDR);
    final OperationStepHandler wrapper=new OperationStepHandler(){
      @Override public void execute(      OperationContext context,      ModelNode operation) throws OperationFailedException {
        try {
          handler.execute(context,operation);
          resultAddress.set(base.toModelNode());
        }
 catch (        NoSuchResourceException e) {
          context.stepCompleted();
        }
      }
    }
;
    context.addStep(resultItem,newOp,wrapper,OperationContext.Stage.MODEL,true);
  }
}
