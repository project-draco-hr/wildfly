{
  final PathAddress current=address.subAddress(base.size());
  final Iterator<PathElement> iterator=current.iterator();
  if (iterator.hasNext()) {
    final PathElement element=iterator.next();
    if (element.isMultiTarget()) {
      final Set<PathElement> children=context.getModelNodeRegistration().getChildAddresses(base);
      if (children == null || children.isEmpty()) {
        return;
      }
      final String childType=element.getKey().equals("*") ? null : element.getKey();
      for (      final PathElement path : children) {
        if (childType != null && !childType.equals(path.getKey())) {
          continue;
        }
        execute(address,base.append(path),context);
      }
    }
 else {
      execute(address,base.append(element),context);
    }
  }
 else {
    final String operationName=operation.require(OP).asString();
    final ModelNode newOp=operation.clone();
    newOp.get(OP_ADDR).set(base.toModelNode());
    final ModelNode result=this.result.add();
    result.get(OP_ADDR).set(base.toModelNode());
    context.addStep(result,newOp,handler,NewOperationContext.Stage.IMMEDIATE);
  }
}
