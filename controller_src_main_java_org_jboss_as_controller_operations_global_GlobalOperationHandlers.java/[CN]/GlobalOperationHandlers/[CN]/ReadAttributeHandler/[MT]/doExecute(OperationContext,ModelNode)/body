{
  validator.validate(operation);
  final String attributeName=operation.require(NAME).asString();
  final boolean defaults=operation.get(INCLUDE_DEFAULTS).asBoolean(true);
  final ModelNode subModel=safeReadModel(context);
  final ImmutableManagementResourceRegistration registry=context.getResourceRegistration();
  final AttributeAccess attributeAccess=registry.getAttributeAccess(PathAddress.EMPTY_ADDRESS,attributeName);
  if (attributeAccess == null) {
    final Set<String> children=context.getResourceRegistration().getChildNames(PathAddress.EMPTY_ADDRESS);
    if (children.contains(attributeName)) {
      throw new OperationFailedException(new ModelNode().set(String.format("'%s' is a registered child of resource (%s)",attributeName,operation.get(OP_ADDR))));
    }
 else     if (subModel.hasDefined(attributeName)) {
      final ModelNode result=subModel.get(attributeName);
      context.getResult().set(result);
    }
 else {
      final ModelNode nodeDescription=getNodeDescription(registry,operation);
      if (defaults && nodeDescription.get(ATTRIBUTES).hasDefined(attributeName) && nodeDescription.get(ATTRIBUTES,attributeName).hasDefined(DEFAULT)) {
        final ModelNode result=nodeDescription.get(ATTRIBUTES,attributeName,DEFAULT);
        context.getResult().set(result);
      }
 else       if (subModel.has(attributeName) || nodeDescription.get(ATTRIBUTES).has(attributeName)) {
        context.getResult();
      }
 else {
        throw new OperationFailedException(new ModelNode().set(String.format("No known attribute %s",attributeName)));
      }
    }
    context.completeStep();
  }
 else   if (attributeAccess.getReadHandler() == null) {
    if (subModel.hasDefined(attributeName) || !defaults) {
      final ModelNode result=subModel.get(attributeName);
      context.getResult().set(result);
    }
 else {
      final ModelNode nodeDescription=getNodeDescription(registry,operation);
      if (nodeDescription.get(ATTRIBUTES).hasDefined(attributeName) && nodeDescription.get(ATTRIBUTES,attributeName).hasDefined(DEFAULT)) {
        final ModelNode result=nodeDescription.get(ATTRIBUTES,attributeName,DEFAULT);
        context.getResult().set(result);
      }
 else {
        context.getResult();
      }
    }
    context.completeStep();
  }
 else {
    OperationStepHandler handler=attributeAccess.getReadHandler();
    ClassLoader oldTccl=SecurityActions.setThreadContextClassLoader(handler.getClass());
    try {
      handler.execute(context,operation);
    }
  finally {
      SecurityActions.setThreadContextClassLoader(oldTccl);
    }
  }
}
