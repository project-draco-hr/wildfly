{
  final PathAddress address=PathAddress.pathAddress(operation.require(ADDRESS_PARAM));
  final String operationName=operation.require(ORIGINAL_OPERATION).asString();
  final Collection<ProxyController> proxies=context.getModelNodeRegistration().getProxyControllers(PathAddress.EMPTY_ADDRESS);
  final int size=proxies.size();
  if (size > 0) {
    final Map<NewProxyController,ModelNode> proxyResponses=new HashMap<NewProxyController,ModelNode>();
    for (    final ProxyController proxy : proxies) {
      final PathAddress proxyAddress=proxy.getProxyNodeAddress();
      final ModelNode newOperation=operation.clone();
      newOperation.get(OP_ADDR).set(address.subAddress(proxyAddress.size()).toModelNode());
      NewProxyController newProxyController=(NewProxyController)proxy;
      ProxyStepHandler proxyHandler=new ProxyStepHandler(newProxyController);
      ModelNode proxyResponse=new ModelNode();
      proxyResponses.put(newProxyController,proxyResponse);
      context.addStep(proxyResponse,newOperation,proxyHandler,NewOperationContext.Stage.IMMEDIATE);
    }
    context.addStep(new NewStepHandler(){
      @Override public void execute(      NewOperationContext context,      ModelNode operation) throws OperationFailedException {
        ModelNode failures=new ModelNode().setEmptyObject();
        ModelNode combined=new ModelNode().setEmptyList();
        for (        Map.Entry<NewProxyController,ModelNode> entry : proxyResponses.entrySet()) {
          ModelNode rsp=entry.getValue();
          if (!SUCCESS.equals(rsp.get(OUTCOME))) {
            failures.get(entry.getKey().getProxyNodeAddress().toString()).set(rsp.get(FAILURE_DESCRIPTION));
          }
 else {
            ModelNode result=rsp.get(RESULT);
            if (result.isDefined()) {
              for (              ModelNode item : result.asList()) {
                combined.add(item);
              }
            }
          }
          if (failures.asInt() > 0) {
            ModelNode failMsg=new ModelNode();
            failMsg.add("Controllers for one or more addresses failed");
            failMsg.add(failures);
            context.getFailureDescription().set(failMsg);
          }
 else {
            context.getResult().set(combined);
          }
        }
        context.completeStep();
      }
    }
,NewOperationContext.Stage.MODEL);
  }
 else {
    final NewStepHandler operationHandler=context.getModelNodeRegistration().getOperationHandler(PathAddress.EMPTY_ADDRESS,operationName);
    if (operationHandler == null) {
      context.getFailureDescription().set("No operation handler" + operationName);
    }
 else {
      final Collection<PathAddress> resolved;
      if (operationHandler instanceof ModelQueryOperationHandler) {
        resolved=PathAddress.resolve(address,context.readModel(PathAddress.EMPTY_ADDRESS),operationHandler instanceof ModelAddOperationHandler);
      }
 else {
        resolved=context.getModelNodeRegistration().resolveAddress(address);
      }
      if (!resolved.isEmpty()) {
        ModelNode list=context.getResult().setEmptyList();
        for (        PathAddress a : resolved) {
          list.add(a.toModelNode());
        }
      }
    }
  }
  context.completeStep();
}
