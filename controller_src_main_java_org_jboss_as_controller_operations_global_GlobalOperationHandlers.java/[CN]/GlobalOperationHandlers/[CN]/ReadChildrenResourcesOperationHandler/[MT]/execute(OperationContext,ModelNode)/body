{
  validator.validate(operation);
  final String childType=operation.require(CHILD_TYPE).asString();
  final Set<String> childNames=context.getResourceRegistration().getChildNames(PathAddress.EMPTY_ADDRESS);
  if (!childNames.contains(childType)) {
    throw new OperationFailedException(new ModelNode().set(MESSAGES.unknownChildType(childType)));
  }
  final Map<PathElement,ModelNode> resources=new HashMap<PathElement,ModelNode>();
  final Resource resource=context.readResource(PathAddress.EMPTY_ADDRESS);
  if (!resource.hasChildren(childType)) {
    context.getResult().setEmptyObject();
  }
 else {
    final ReadChildrenResourcesAssemblyHandler assemblyHandler=new ReadChildrenResourcesAssemblyHandler(resources);
    context.addStep(assemblyHandler,OperationContext.Stage.IMMEDIATE);
    final PathAddress address=PathAddress.pathAddress(operation.get(OP_ADDR));
    for (    final String key : resource.getChildrenNames(childType)) {
      final PathElement childPath=PathElement.pathElement(childType,key);
      final PathAddress childAddress=PathAddress.EMPTY_ADDRESS.append(PathElement.pathElement(childType,key));
      final ModelNode readOp=new ModelNode();
      readOp.get(OP).set(READ_RESOURCE_OPERATION);
      readOp.get(OP_ADDR).set(PathAddress.pathAddress(address,childPath).toModelNode());
      if (operation.hasDefined(INCLUDE_RUNTIME)) {
        readOp.get(INCLUDE_RUNTIME).set(operation.get(INCLUDE_RUNTIME));
      }
      if (operation.hasDefined(RECURSIVE)) {
        readOp.get(RECURSIVE).set(operation.get(RECURSIVE));
      }
      if (operation.hasDefined(RECURSIVE_DEPTH)) {
        readOp.get(RECURSIVE_DEPTH).set(operation.get(RECURSIVE_DEPTH));
      }
      if (operation.hasDefined(PROXIES)) {
        readOp.get(PROXIES).set(operation.get(PROXIES));
      }
      if (operation.hasDefined(INCLUDE_DEFAULTS)) {
        readOp.get(INCLUDE_DEFAULTS).set(operation.get(INCLUDE_DEFAULTS));
      }
      final OperationStepHandler handler=context.getResourceRegistration().getOperationHandler(childAddress,READ_RESOURCE_OPERATION);
      if (handler == null) {
        throw new OperationFailedException(new ModelNode().set(MESSAGES.noOperationHandler()));
      }
      ModelNode rrRsp=new ModelNode();
      resources.put(childPath,rrRsp);
      context.addStep(rrRsp,readOp,handler,OperationContext.Stage.IMMEDIATE);
    }
  }
  context.completeStep(OperationContext.RollbackHandler.NOOP_ROLLBACK_HANDLER);
}
