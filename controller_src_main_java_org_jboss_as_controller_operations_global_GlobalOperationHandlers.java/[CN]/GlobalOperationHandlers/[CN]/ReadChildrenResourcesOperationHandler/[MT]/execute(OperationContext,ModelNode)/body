{
  validator.validate(operation);
  final PathAddress address=PathAddress.pathAddress(operation.get(OP_ADDR));
  final String childType=operation.require(CHILD_TYPE.getName()).asString();
  final Map<PathElement,ModelNode> resources=new HashMap<PathElement,ModelNode>();
  final Resource resource=context.readResource(PathAddress.EMPTY_ADDRESS,false);
  final ImmutableManagementResourceRegistration registry=context.getResourceRegistration();
  Map<String,Set<String>> childAddresses=getChildAddresses(context,address,registry,resource,childType);
  Set<String> childNames=childAddresses.get(childType);
  if (childNames == null) {
    throw new OperationFailedException(new ModelNode().set(MESSAGES.unknownChildType(childType)));
  }
  final ReadChildrenResourcesAssemblyHandler assemblyHandler=new ReadChildrenResourcesAssemblyHandler(resources);
  context.addStep(assemblyHandler,OperationContext.Stage.IMMEDIATE);
  for (  final String key : childNames) {
    final PathElement childPath=PathElement.pathElement(childType,key);
    final PathAddress childAddress=PathAddress.EMPTY_ADDRESS.append(PathElement.pathElement(childType,key));
    final ModelNode readOp=new ModelNode();
    readOp.get(OP).set(READ_RESOURCE_OPERATION);
    readOp.get(OP_ADDR).set(PathAddress.pathAddress(address,childPath).toModelNode());
    INCLUDE_RUNTIME.validateAndSet(operation,readOp);
    RECURSIVE.validateAndSet(operation,readOp);
    RECURSIVE_DEPTH.validateAndSet(operation,readOp);
    PROXIES.validateAndSet(operation,readOp);
    INCLUDE_DEFAULTS.validateAndSet(operation,readOp);
    final OperationStepHandler handler=context.getResourceRegistration().getOperationHandler(childAddress,READ_RESOURCE_OPERATION);
    if (handler == null) {
      throw new OperationFailedException(new ModelNode().set(MESSAGES.noOperationHandler()));
    }
    final ModelNode rrRsp=new ModelNode();
    resources.put(childPath,rrRsp);
    context.addStep(rrRsp,readOp,handler,OperationContext.Stage.IMMEDIATE);
  }
  context.stepCompleted();
}
