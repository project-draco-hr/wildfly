{
  final DefaultHttpClient httpClient=new DefaultHttpClient();
  httpClient.getAuthSchemes().register(AuthPolicy.SPNEGO,new JBossNegotiateSchemeFactory(true));
  httpClient.getCredentialsProvider().setCredentials(new AuthScope(null,-1,null),new NullHCCredentials());
  final HttpParams doNotRedirect=new BasicHttpParams();
  doNotRedirect.setParameter(ClientPNames.HANDLE_REDIRECTS,false);
  doNotRedirect.setParameter(ClientPNames.HANDLE_AUTHENTICATION,true);
  final HttpParams doRedirect=new BasicHttpParams();
  doRedirect.setParameter(ClientPNames.HANDLE_AUTHENTICATION,true);
  doRedirect.setParameter(ClientPNames.HANDLE_REDIRECTS,true);
  try {
    HttpGet initialIdpHttpGet=new HttpGet(this.idpUri);
    initialIdpHttpGet.setParams(doRedirect);
    HttpResponse response=httpClient.execute(initialIdpHttpGet);
    assertThat("Unexpected status code when expecting redirect to IdP",response.getStatusLine().getStatusCode(),equalTo(HttpStatus.SC_OK));
    consumeResponse(response);
    HttpGet initialHttpGet=new HttpGet(this.uri);
    initialHttpGet.setParams(doNotRedirect);
    response=httpClient.execute(initialHttpGet);
    assertThat("Unexpected status code when expecting redirect to IdP",response.getStatusLine().getStatusCode(),equalTo(HttpStatus.SC_MOVED_TEMPORARILY));
    String initialHttpGetRedirect=response.getFirstHeader(HttpHeaders.LOCATION).getValue();
    consumeResponse(response);
    HttpGet idpHttpGet=new HttpGet(initialHttpGetRedirect);
    idpHttpGet.setParams(doNotRedirect);
    response=httpClient.execute(idpHttpGet);
    assertThat("Unexpected status code when expecting redirect from IdP",response.getStatusLine().getStatusCode(),equalTo(HttpStatus.SC_MOVED_TEMPORARILY));
    String idpHttpGetRedirect=response.getFirstHeader(HttpHeaders.LOCATION).getValue();
    consumeResponse(response);
    HttpGet idpHttpGetRedirectForAuth=new HttpGet(idpHttpGetRedirect);
    idpHttpGetRedirectForAuth.setParams(doNotRedirect);
    response=httpClient.execute(idpHttpGetRedirectForAuth);
    assertThat("Unexpected status code when expecting redirect from IdP",response.getStatusLine().getStatusCode(),equalTo(HttpStatus.SC_MOVED_TEMPORARILY));
    String idpHttpGetRedirectAuth=response.getFirstHeader(HttpHeaders.LOCATION).getValue();
    consumeResponse(response);
    HttpGet spHttpGet=new HttpGet(idpHttpGetRedirectAuth);
    spHttpGet.setParams(doNotRedirect);
    response=httpClient.execute(spHttpGet);
    assertThat("Unexpected status code when expecting redirect from IdP",response.getStatusLine().getStatusCode(),equalTo(HttpStatus.SC_MOVED_TEMPORARILY));
    String spHttpGetRedirect=response.getFirstHeader(HttpHeaders.LOCATION).getValue();
    consumeResponse(response);
    HttpGet spHttpGetWithSession=new HttpGet(spHttpGetRedirect);
    spHttpGetWithSession.setParams(doNotRedirect);
    response=httpClient.execute(spHttpGetWithSession);
    assertThat("Unexpected status code when expecting redirect from IdP",response.getStatusLine().getStatusCode(),equalTo(HttpStatus.SC_MOVED_TEMPORARILY));
    String spHttpGetWithSessionRedirect=response.getFirstHeader(HttpHeaders.LOCATION).getValue();
    consumeResponse(response);
    HttpGet authenticatedHttpGet=new HttpGet(this.uri);
    authenticatedHttpGet.setParams(doRedirect);
    response=httpClient.execute(authenticatedHttpGet);
    assertThat("Unexpected status code after authentication.",response.getStatusLine().getStatusCode(),equalTo(HttpStatus.SC_OK));
    return EntityUtils.toString(response.getEntity());
  }
  finally {
    httpClient.getConnectionManager().shutdown();
  }
}
