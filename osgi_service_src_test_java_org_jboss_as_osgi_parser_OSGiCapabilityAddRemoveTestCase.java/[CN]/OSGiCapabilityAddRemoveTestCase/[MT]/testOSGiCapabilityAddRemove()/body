{
  SubsystemState stateService=new SubsystemState();
  List<OperationStepHandler> addedSteps=new ArrayList<OperationStepHandler>();
  OperationContext context=mockOperationContext(stateService,addedSteps,OperationContext.ResultAction.KEEP);
  ModelNode address=new ModelNode();
  address.add(new ModelNode().set(ModelDescriptionConstants.SUBSYSTEM,OSGiExtension.SUBSYSTEM_NAME));
  address.add(new ModelNode().set(Constants.CAPABILITY,"org.acme.module1"));
  ModelNode data=new ModelNode();
  data.get(Constants.STARTLEVEL).set("4");
  ModelNode op=getAddOperation(address,data);
  Assert.assertEquals("Precondition",0,addedSteps.size());
  OSGiCapabilityAdd.INSTANCE.execute(context,op);
  Assert.assertEquals(1,addedSteps.size());
  Assert.assertEquals("Precondition",0,stateService.getCapabilities().size());
  addedSteps.get(0).execute(context,op);
  Assert.assertEquals(1,stateService.getCapabilities().size());
  OSGiCapability module=stateService.getCapabilities().get(0);
  Assert.assertEquals("org.acme.module1:main",module.getIdentifier().toString());
  Assert.assertEquals(new Integer(4),module.getStartLevel());
  OSGiCapabilityRemove.INSTANCE.execute(context,op);
  Assert.assertEquals("Actual remove added as async step",2,addedSteps.size());
  Mockito.when(context.completeStep()).thenReturn(OperationContext.ResultAction.ROLLBACK);
  addedSteps.get(1).execute(context,op);
  Assert.assertEquals("Module should have been kept as the operation was rolled back",module,stateService.getCapabilities().get(0));
  Mockito.when(context.completeStep()).thenReturn(OperationContext.ResultAction.KEEP);
  addedSteps.get(1).execute(context,op);
  Assert.assertEquals("Module should have been removed",0,stateService.getCapabilities().size());
}
