{
  final ModelVersion legacyModelVersion=ModelVersion.create(3,0,0);
  final ModelTestControllerVersion controllerVersion=ModelTestControllerVersion.WILDFLY_8_2_0_FINAL;
  KernelServicesBuilder builder=createKernelServicesBuilder(AdditionalInitialization.MANAGEMENT);
  builder.createLegacyKernelServicesBuilder(null,controllerVersion,legacyModelVersion).addMavenResourceURL("org.wildfly:wildfly-ee:" + controllerVersion.getMavenGavVersion());
  KernelServices mainServices=builder.build();
  KernelServices legacyServices=mainServices.getLegacyServices(legacyModelVersion);
  Assert.assertTrue(mainServices.isSuccessfulBoot());
  Assert.assertTrue(legacyServices.isSuccessfulBoot());
  List<ModelNode> bootOps=builder.parseXmlResource("subsystem-wf8-transformer.xml");
  ModelTestUtils.checkFailedTransformedBootOperations(mainServices,legacyModelVersion,bootOps,new FailedOperationTransformationConfig().addFailedAttribute(PathAddress.pathAddress(EeExtension.PATH_SUBSYSTEM,ManagedExecutorServiceResourceDefinition.INSTANCE.getPathElement()),new RejectUndefinedAttribute(new ModelNode(Integer.MAX_VALUE),ManagedExecutorServiceResourceDefinition.CORE_THREADS_AD.getName())).addFailedAttribute(PathAddress.pathAddress(EeExtension.PATH_SUBSYSTEM,ManagedScheduledExecutorServiceResourceDefinition.INSTANCE.getPathElement()),new RejectUndefinedAttribute(new ModelNode(Integer.MAX_VALUE),ManagedScheduledExecutorServiceResourceDefinition.CORE_THREADS_AD.getName())));
}
