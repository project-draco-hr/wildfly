{
  ModelNode protocol=Util.getEmptyOperation(ModelKeys.ADD_PROTOCOL,null);
  for (int i=0; i < reader.getAttributeCount(); i++) {
    String value=reader.getAttributeValue(i);
    Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case TYPE:
{
        try {
          Protocol.class.getClassLoader().loadClass(org.jgroups.conf.ProtocolConfiguration.protocol_prefix + '.' + value).asSubclass(Protocol.class).newInstance();
          ProtocolResource.TYPE.parseAndSetParameter(value,protocol,reader);
        }
 catch (        Exception e) {
          throw ParseUtils.invalidAttributeValue(reader,i);
        }
        break;
      }
case SOCKET_BINDING:
{
      ProtocolResource.SOCKET_BINDING.parseAndSetParameter(value,protocol,reader);
      break;
    }
default :
{
    throw ParseUtils.unexpectedAttribute(reader,i);
  }
}
}
if (!protocol.hasDefined(ModelKeys.TYPE)) {
throw ParseUtils.missingRequired(reader,Collections.singleton(Attribute.TYPE));
}
protocol.get(OP_ADDR).set(stackAddress);
ModelNode protocolAddress=stackAddress.clone();
protocolAddress.add(ModelKeys.PROTOCOL,protocol.get(ModelKeys.TYPE).asString());
List<ModelNode> propertyOperations=new ArrayList<ModelNode>();
while (reader.hasNext() && (reader.nextTag() != XMLStreamConstants.END_ELEMENT)) {
Element element=Element.forName(reader.getLocalName());
switch (element) {
case PROPERTY:
{
  this.parseProperty(reader,protocolAddress,propertyOperations);
  break;
}
default :
{
throw ParseUtils.unexpectedElement(reader);
}
}
}
operations.add(protocol);
for (ModelNode propertyOperation : propertyOperations) {
operations.add(propertyOperation);
}
}
