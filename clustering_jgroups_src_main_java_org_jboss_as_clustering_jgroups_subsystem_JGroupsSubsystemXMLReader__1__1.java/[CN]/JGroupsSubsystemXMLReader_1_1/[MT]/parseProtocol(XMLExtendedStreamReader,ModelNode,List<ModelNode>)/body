{
  ModelNode protocol=Util.getEmptyOperation(ModelKeys.ADD_PROTOCOL,null);
  for (int i=0; i < reader.getAttributeCount(); i++) {
    String value=reader.getAttributeValue(i);
    Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case TYPE:
{
        try {
          Protocol.class.getClassLoader().loadClass(org.jgroups.conf.ProtocolConfiguration.protocol_prefix + '.' + value).asSubclass(Protocol.class).newInstance();
          protocol.get(ModelKeys.TYPE).set(value);
        }
 catch (        Exception e) {
          throw ParseUtils.invalidAttributeValue(reader,i);
        }
        break;
      }
case SOCKET_BINDING:
{
      protocol.get(ModelKeys.SOCKET_BINDING).set(value);
      break;
    }
default :
{
    throw ParseUtils.unexpectedAttribute(reader,i);
  }
}
}
if (!protocol.hasDefined(ModelKeys.TYPE)) {
throw ParseUtils.missingRequired(reader,Collections.singleton(Attribute.TYPE));
}
protocol.get(OP_ADDR).set(stackAddress);
while (reader.hasNext() && (reader.nextTag() != XMLStreamConstants.END_ELEMENT)) {
if (Element.forName(reader.getLocalName()) != Element.PROPERTY) {
throw ParseUtils.unexpectedElement(reader);
}
int attributes=reader.getAttributeCount();
String property=null;
for (int i=0; i < attributes; i++) {
String value=reader.getAttributeValue(i);
Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case NAME:
{
    property=value;
    break;
  }
default :
{
  throw ParseUtils.unexpectedAttribute(reader,i);
}
}
}
if (property == null) {
throw ParseUtils.missingRequired(reader,Collections.singleton(Attribute.NAME));
}
String value=reader.getElementText();
protocol.get(ModelKeys.PROPERTIES).add(property,value);
}
operations.add(protocol);
}
