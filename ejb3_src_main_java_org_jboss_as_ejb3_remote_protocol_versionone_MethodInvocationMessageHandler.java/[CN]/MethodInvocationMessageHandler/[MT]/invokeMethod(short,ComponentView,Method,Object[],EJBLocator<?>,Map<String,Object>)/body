{
  final InterceptorContext interceptorContext=new InterceptorContext();
  interceptorContext.setParameters(args);
  interceptorContext.setMethod(method);
  interceptorContext.putPrivateData(Component.class,componentView.getComponent());
  interceptorContext.putPrivateData(ComponentView.class,componentView);
  interceptorContext.putPrivateData(InvocationType.class,InvocationType.REMOTE);
  final Map<String,Object> invocationContextData=new HashMap<String,Object>();
  interceptorContext.setContextData(invocationContextData);
  if (attachments != null) {
    for (    final Map.Entry<String,Object> attachment : attachments.entrySet()) {
      if (attachment == null) {
        continue;
      }
      final String key=attachment.getKey();
      final Object value=attachment.getValue();
      if (EJBClientInvocationContext.PRIVATE_ATTACHMENTS_KEY.equals(key)) {
        final Map<?,?> privateAttachments=(Map<?,?>)value;
        for (        final Map.Entry<?,?> privateAttachment : privateAttachments.entrySet()) {
          interceptorContext.putPrivateData(privateAttachment.getKey(),privateAttachment.getValue());
        }
      }
 else {
        invocationContextData.put(key,value);
      }
    }
  }
  if (ejbLocator instanceof StatefulEJBLocator) {
    interceptorContext.putPrivateData(SessionID.class,((StatefulEJBLocator<?>)ejbLocator).getSessionId());
  }
 else   if (ejbLocator instanceof EntityEJBLocator) {
    final Object primaryKey=((EntityEJBLocator<?>)ejbLocator).getPrimaryKey();
    interceptorContext.putPrivateData(EntityBeanComponent.PRIMARY_KEY_CONTEXT_KEY,primaryKey);
  }
  if (componentView.isAsynchronous(method)) {
    final Component component=componentView.getComponent();
    if (!(component instanceof SessionBeanComponent)) {
      EjbLogger.ROOT_LOGGER.asyncMethodSupportedOnlyForSessionBeans(component.getComponentClass(),method);
      return componentView.invoke(interceptorContext);
    }
    final CancellationFlag asyncInvocationCancellationFlag=new CancellationFlag();
    interceptorContext.putPrivateData(CancellationFlag.class,asyncInvocationCancellationFlag);
    this.remoteAsyncInvocationCancelStatus.registerAsyncInvocation(invocationId,asyncInvocationCancellationFlag);
    try {
      final Object result=componentView.invoke(interceptorContext);
      return result == null ? null : ((Future<?>)result).get();
    }
  finally {
      this.remoteAsyncInvocationCancelStatus.asyncInvocationDone(invocationId);
    }
  }
 else {
    return componentView.invoke(interceptorContext);
  }
}
