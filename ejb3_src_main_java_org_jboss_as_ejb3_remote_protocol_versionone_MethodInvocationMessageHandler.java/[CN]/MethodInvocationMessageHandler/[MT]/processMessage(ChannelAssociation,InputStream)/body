{
  final DataInputStream input=new DataInputStream(inputStream);
  final short invocationId=input.readShort();
  final String methodName=input.readUTF();
  String[] methodParamTypes=null;
  final String signature=input.readUTF();
  if (signature.isEmpty()) {
    methodParamTypes=new String[0];
  }
 else {
    methodParamTypes=signature.split(String.valueOf(METHOD_PARAM_TYPE_SEPARATOR));
  }
  final ClassLoaderSwitchingClassResolver classResolver=new ClassLoaderSwitchingClassResolver(Thread.currentThread().getContextClassLoader());
  final Unmarshaller unmarshaller=this.prepareForUnMarshalling(this.marshallerFactory,classResolver,input);
  final String appName;
  final String moduleName;
  final String distinctName;
  final String beanName;
  try {
    appName=(String)unmarshaller.readObject();
    moduleName=(String)unmarshaller.readObject();
    distinctName=(String)unmarshaller.readObject();
    beanName=(String)unmarshaller.readObject();
  }
 catch (  Throwable e) {
    throw EjbLogger.ROOT_LOGGER.failedToReadEjbInfo(e);
  }
  final EjbDeploymentInformation ejbDeploymentInformation=this.findEJB(appName,moduleName,distinctName,beanName);
  if (ejbDeploymentInformation == null) {
    this.writeNoSuchEJBFailureMessage(channelAssociation,invocationId,appName,moduleName,distinctName,beanName,null);
    return;
  }
  final ClassLoader tccl=WildFlySecurityManager.getCurrentContextClassLoaderPrivileged();
  Runnable runnable=null;
  try {
    WildFlySecurityManager.setCurrentContextClassLoaderPrivileged(ejbDeploymentInformation.getDeploymentClassLoader());
    classResolver.switchClassLoader(ejbDeploymentInformation.getDeploymentClassLoader());
    final EJBLocator<?> locator;
    try {
      locator=(EJBLocator<?>)unmarshaller.readObject();
    }
 catch (    Throwable e) {
      throw EjbLogger.ROOT_LOGGER.failedToReadEJBLocator(e);
    }
    final String viewClassName=locator.getViewType().getName();
    if (!ejbDeploymentInformation.isRemoteView(viewClassName)) {
      this.writeNoSuchEJBFailureMessage(channelAssociation,invocationId,appName,moduleName,distinctName,beanName,viewClassName);
      return;
    }
    final ComponentView componentView=ejbDeploymentInformation.getView(viewClassName);
    final Method invokedMethod=this.findMethod(componentView,methodName,methodParamTypes);
    if (invokedMethod == null) {
      this.writeNoSuchEJBMethodFailureMessage(channelAssociation,invocationId,appName,moduleName,distinctName,beanName,viewClassName,methodName,methodParamTypes);
      return;
    }
    final Object[] methodParams=new Object[methodParamTypes.length];
    if (methodParamTypes.length > 0) {
      for (int i=0; i < methodParamTypes.length; i++) {
        try {
          methodParams[i]=unmarshaller.readObject();
        }
 catch (        Throwable e) {
          MethodInvocationMessageHandler.this.writeException(channelAssociation,MethodInvocationMessageHandler.this.marshallerFactory,invocationId,e,null);
          return;
        }
      }
    }
    final Map<String,Object> attachments;
    try {
      attachments=this.readAttachments(unmarshaller);
    }
 catch (    Throwable e) {
      MethodInvocationMessageHandler.this.writeException(channelAssociation,MethodInvocationMessageHandler.this.marshallerFactory,invocationId,e,null);
      return;
    }
    unmarshaller.finish();
    runnable=new Runnable(){
      @Override public void run(){
        if (componentView.isAsynchronous(invokedMethod)) {
          try {
            MethodInvocationMessageHandler.this.writeAsyncMethodNotification(channelAssociation,invocationId);
          }
 catch (          Throwable t) {
            EjbLogger.ROOT_LOGGER.failedToSendAsyncMethodIndicatorToClient(t,invokedMethod);
          }
        }
        Object result=null;
        SecurityActions.remotingContextSetConnection(channelAssociation.getChannel().getConnection());
        try {
          result=invokeMethod(invocationId,componentView,invokedMethod,methodParams,locator,attachments);
        }
 catch (        Throwable throwable) {
          try {
            if (throwable instanceof EJBComponentUnavailableException) {
              EjbLogger.EJB3_INVOCATION_LOGGER.debug("Cannot handle method invocation: " + invokedMethod + " on bean: "+ beanName+ " due to EJB component unavailability exception. Returning a no such EJB available message back to client");
              MethodInvocationMessageHandler.this.writeNoSuchEJBFailureMessage(channelAssociation,invocationId,appName,moduleName,distinctName,beanName,viewClassName);
            }
 else {
              MethodInvocationMessageHandler.this.writeException(channelAssociation,MethodInvocationMessageHandler.this.marshallerFactory,invocationId,throwable,attachments);
            }
          }
 catch (          Throwable ioe) {
            EjbLogger.ROOT_LOGGER.errorInvokingMethod(throwable,invokedMethod,beanName,appName,moduleName,distinctName);
            EjbLogger.ROOT_LOGGER.couldNotWriteMethodInvocation(ioe,invokedMethod,beanName,appName,moduleName,distinctName);
            if (!(ioe instanceof ObjectStreamException)) {
              IoUtils.safeClose(channelAssociation.getChannel());
            }
          }
          return;
        }
 finally {
          SecurityActions.remotingContextClear();
        }
        try {
          Affinity weakAffinity=null;
          if (locator instanceof StatefulEJBLocator && componentView.getComponent() instanceof StatefulSessionComponent) {
            final StatefulSessionComponent statefulSessionComponent=(StatefulSessionComponent)componentView.getComponent();
            weakAffinity=MethodInvocationMessageHandler.this.getWeakAffinity(statefulSessionComponent,(StatefulEJBLocator<?>)locator);
          }
 else           if (componentView.getComponent() instanceof StatelessSessionComponent) {
            final StatelessSessionComponent statelessSessionComponent=(StatelessSessionComponent)componentView.getComponent();
            weakAffinity=statelessSessionComponent.getWeakAffinity();
          }
          if (weakAffinity != null) {
            attachments.put(Affinity.WEAK_AFFINITY_CONTEXT_KEY,weakAffinity);
          }
          writeMethodInvocationResponse(channelAssociation,invocationId,result,attachments);
        }
 catch (        Throwable ioe) {
          EjbLogger.ROOT_LOGGER.couldNotWriteMethodInvocation(ioe,invokedMethod,beanName,appName,moduleName,distinctName);
          if (!(ioe instanceof ObjectStreamException)) {
            IoUtils.safeClose(channelAssociation.getChannel());
          }
          return;
        }
      }
    }
;
  }
  finally {
    WildFlySecurityManager.setCurrentContextClassLoaderPrivileged(tccl);
  }
  executorService.submit(runnable);
}
