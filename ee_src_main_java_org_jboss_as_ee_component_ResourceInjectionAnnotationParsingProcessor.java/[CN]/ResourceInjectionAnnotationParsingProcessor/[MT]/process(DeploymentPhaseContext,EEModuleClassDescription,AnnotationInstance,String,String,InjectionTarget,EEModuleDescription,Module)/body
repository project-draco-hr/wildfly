{
  final AnnotationValue lookupAnnotation=annotation.value("lookup");
  String lookup=lookupAnnotation == null ? null : lookupAnnotation.asString();
  if (isEmpty(lookup)) {
    final AnnotationValue mappedNameAnnotationValue=annotation.value("mappedName");
    lookup=mappedNameAnnotationValue == null ? null : mappedNameAnnotationValue.asString();
  }
  if (isEmpty(lookup) && FIXED_LOCATIONS.containsKey(injectionType)) {
    lookup=FIXED_LOCATIONS.get(injectionType);
  }
  InjectionSource valueSource=null;
  final boolean isEnvEntryType=this.isEnvEntryType(injectionType,module);
  final boolean isResourceRefType=RESOURCE_REF_ENTRIES.contains(injectionType);
  if (!isEmpty(lookup)) {
    valueSource=new LookupInjectionSource(lookup);
  }
 else   if (isEnvEntryType) {
  }
 else   if (!isResourceRefType) {
    final EEResourceReferenceProcessor resourceReferenceProcessor=EEResourceReferenceProcessorRegistry.getResourceReferenceProcessor(injectionType);
    if (resourceReferenceProcessor == null) {
      throw new DeploymentUnitProcessingException("Can't handle @Resource for ENC name: " + localContextName + " since it's missing a \"lookup\" (or \"mappedName\") value and isn't of any known type");
    }
    valueSource=resourceReferenceProcessor.getResourceReferenceBindingSource(phaseContext,eeModuleDescription,classDescription,injectionType,localContextName,targetDescription);
    if (valueSource == null) {
      throw new DeploymentUnitProcessingException("Could not find binding source for @Resource, for ENC name: " + localContextName + " of type: "+ injectionType+ " from resource reference processor: "+ resourceReferenceProcessor);
    }
  }
  final boolean optionalEnvEntry=valueSource == null;
  final InjectionSource injectionSource=new LookupInjectionSource(localContextName,optionalEnvEntry);
  final ResourceInjectionConfiguration injectionConfiguration=targetDescription != null ? new ResourceInjectionConfiguration(targetDescription,injectionSource) : null;
  final BindingConfiguration bindingConfiguration;
  if (optionalEnvEntry) {
    bindingConfiguration=null;
  }
 else {
    bindingConfiguration=new BindingConfiguration(localContextName,valueSource);
  }
  classDescription.getConfigurators().add(new ClassConfigurator(){
    public void configure(    final DeploymentPhaseContext context,    final EEModuleClassDescription description,    final EEModuleClassConfiguration configuration) throws DeploymentUnitProcessingException {
      if (bindingConfiguration != null) {
        configuration.getBindingConfigurations().add(bindingConfiguration);
      }
      if (injectionConfiguration != null) {
        configuration.getInjectionConfigurations().add(injectionConfiguration);
      }
    }
  }
);
}
