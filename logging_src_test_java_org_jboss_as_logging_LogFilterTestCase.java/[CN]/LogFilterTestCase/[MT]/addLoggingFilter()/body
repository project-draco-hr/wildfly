{
  ModelNode consoleAddress=createAddress("console-handler","CONSOLE").toModelNode();
  ModelNode replaceValue=new ModelNode();
  replaceValue.get("pattern").set("JBAS");
  replaceValue.get("replacement").set("DUMMY");
  replaceValue.get("replace-all").set(true);
  ModelNode filterAttributeValue=new ModelNode();
  filterAttributeValue.get("replace").set(replaceValue);
  final ModelNode writeOp=Operations.createWriteAttributeOperation(consoleAddress,"filter",filterAttributeValue);
  ModelNode result=executeOperation(kernelServices,writeOp);
  final ModelNode readAttributeOp=Operations.createReadAttributeOperation(consoleAddress,"filter");
  result=executeOperation(kernelServices,readAttributeOp);
  assertThat(result,is(notNullValue()));
  assertThat(result.get(OUTCOME).asString(),is("success"));
  assertEquals("{\"replace\" => {\"replace-all\" => true,\"pattern\" => \"JBAS\",\"replacement\" => \"DUMMY\"}}",Operations.readResult(result).asString());
  ModelNode readResourceOp=Operations.createReadResourceOperation(consoleAddress);
  result=executeOperation(kernelServices,readResourceOp);
  assertThat(result,is(notNullValue()));
  assertThat(result.get(OUTCOME).asString(),is("success"));
  assertThat(result.get(RESULT).hasDefined("filter-spec"),is(true));
  ModelNode filterSpec=result.get(RESULT).get("filter-spec");
  assertThat(filterSpec.asString(),is("substituteAll(\"JBAS\",\"DUMMY\")"));
  assertThat(result.get(RESULT).hasDefined("filter"),is(true));
  assertThat(result.get(RESULT).get("filter").hasDefined("replace"),is(true));
  ModelNode replaceResult=result.get(RESULT).get("filter").get("replace");
  assertThat(replaceResult.hasDefined("pattern"),is(true));
  assertThat(replaceResult.get("pattern").asString(),is("JBAS"));
  assertThat(replaceResult.hasDefined("replacement"),is(true));
  assertThat(replaceResult.get("replacement").asString(),is("DUMMY"));
  assertThat(replaceResult.hasDefined("pattern"),is(true));
  assertThat(replaceResult.get("pattern").asString(),is("JBAS"));
}
