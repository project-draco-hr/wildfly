{
  final PathAddress address=PathAddress.pathAddress(operation.require(OP_ADDR));
  final String cacheContainerName=address.getElement(address.size() - 2).getValue();
  final String cacheName=address.getLastElement().getValue();
  final String attrName=operation.require(ModelDescriptionConstants.NAME).asString();
  CacheMetrics metric=CacheMetrics.getStat(attrName);
  final ServiceController<?> controller=context.getServiceRegistry(false).getService(CacheService.getServiceName(cacheContainerName,cacheName));
  boolean started=controller != null && controller.getValue() != null;
  ModelNode result=new ModelNode();
  if (metric == null) {
    context.getFailureDescription().set(String.format("Unknown metric %s",attrName));
  }
 else   if (!started) {
  }
 else {
    Cache<?,?> cache=(Cache<?,?>)controller.getValue();
switch (metric) {
case CACHE_STATUS:
      result.set(cache.getAdvancedCache().getStatus().toString());
    break;
case CONCURRENCY_LEVEL:
  result.set(((LockManagerImpl)cache.getAdvancedCache().getLockManager()).getConcurrencyLevel());
break;
case NUMBER_OF_LOCKS_AVAILABLE:
result.set(((LockManagerImpl)cache.getAdvancedCache().getLockManager()).getNumberOfLocksAvailable());
break;
case NUMBER_OF_LOCKS_HELD:
result.set(((LockManagerImpl)cache.getAdvancedCache().getLockManager()).getNumberOfLocksHeld());
break;
case AVERAGE_READ_TIME:
{
CacheMgmtInterceptor cacheMgmtInterceptor=getFirstInterceptorWhichExtends(cache.getAdvancedCache().getInterceptorChain(),CacheMgmtInterceptor.class);
result.set(cacheMgmtInterceptor != null ? cacheMgmtInterceptor.getAverageReadTime() : 0);
break;
}
case AVERAGE_WRITE_TIME:
{
CacheMgmtInterceptor cacheMgmtInterceptor=getFirstInterceptorWhichExtends(cache.getAdvancedCache().getInterceptorChain(),CacheMgmtInterceptor.class);
result.set(cacheMgmtInterceptor != null ? cacheMgmtInterceptor.getAverageWriteTime() : 0);
break;
}
case ELAPSED_TIME:
{
CacheMgmtInterceptor cacheMgmtInterceptor=getFirstInterceptorWhichExtends(cache.getAdvancedCache().getInterceptorChain(),CacheMgmtInterceptor.class);
result.set(cacheMgmtInterceptor != null ? cacheMgmtInterceptor.getElapsedTime() : 0);
break;
}
case EVICTIONS:
{
CacheMgmtInterceptor cacheMgmtInterceptor=getFirstInterceptorWhichExtends(cache.getAdvancedCache().getInterceptorChain(),CacheMgmtInterceptor.class);
result.set(cacheMgmtInterceptor != null ? cacheMgmtInterceptor.getEvictions() : 0);
break;
}
case HIT_RATIO:
{
CacheMgmtInterceptor cacheMgmtInterceptor=getFirstInterceptorWhichExtends(cache.getAdvancedCache().getInterceptorChain(),CacheMgmtInterceptor.class);
result.set(cacheMgmtInterceptor != null ? cacheMgmtInterceptor.getHitRatio() : 0);
break;
}
case HITS:
{
CacheMgmtInterceptor cacheMgmtInterceptor=getFirstInterceptorWhichExtends(cache.getAdvancedCache().getInterceptorChain(),CacheMgmtInterceptor.class);
result.set(cacheMgmtInterceptor != null ? cacheMgmtInterceptor.getHits() : 0);
break;
}
case MISSES:
{
CacheMgmtInterceptor cacheMgmtInterceptor=getFirstInterceptorWhichExtends(cache.getAdvancedCache().getInterceptorChain(),CacheMgmtInterceptor.class);
result.set(cacheMgmtInterceptor != null ? cacheMgmtInterceptor.getMisses() : 0);
break;
}
case NUMBER_OF_ENTRIES:
{
CacheMgmtInterceptor cacheMgmtInterceptor=getFirstInterceptorWhichExtends(cache.getAdvancedCache().getInterceptorChain(),CacheMgmtInterceptor.class);
result.set(cacheMgmtInterceptor != null ? cacheMgmtInterceptor.getNumberOfEntries() : 0);
break;
}
case READ_WRITE_RATIO:
{
CacheMgmtInterceptor cacheMgmtInterceptor=getFirstInterceptorWhichExtends(cache.getAdvancedCache().getInterceptorChain(),CacheMgmtInterceptor.class);
result.set(cacheMgmtInterceptor != null ? cacheMgmtInterceptor.getReadWriteRatio() : 0);
break;
}
case REMOVE_HITS:
{
CacheMgmtInterceptor cacheMgmtInterceptor=getFirstInterceptorWhichExtends(cache.getAdvancedCache().getInterceptorChain(),CacheMgmtInterceptor.class);
result.set(cacheMgmtInterceptor != null ? cacheMgmtInterceptor.getRemoveHits() : 0);
break;
}
case REMOVE_MISSES:
{
CacheMgmtInterceptor cacheMgmtInterceptor=getFirstInterceptorWhichExtends(cache.getAdvancedCache().getInterceptorChain(),CacheMgmtInterceptor.class);
result.set(cacheMgmtInterceptor != null ? cacheMgmtInterceptor.getRemoveMisses() : 0);
break;
}
case STORES:
{
CacheMgmtInterceptor cacheMgmtInterceptor=getFirstInterceptorWhichExtends(cache.getAdvancedCache().getInterceptorChain(),CacheMgmtInterceptor.class);
result.set(cacheMgmtInterceptor != null ? cacheMgmtInterceptor.getStores() : 0);
break;
}
case TIME_SINCE_RESET:
{
CacheMgmtInterceptor cacheMgmtInterceptor=getFirstInterceptorWhichExtends(cache.getAdvancedCache().getInterceptorChain(),CacheMgmtInterceptor.class);
result.set(cacheMgmtInterceptor != null ? cacheMgmtInterceptor.getTimeSinceReset() : 0);
break;
}
case AVERAGE_REPLICATION_TIME:
{
result.set(((RpcManagerImpl)cache.getAdvancedCache().getRpcManager()).getAverageReplicationTime());
break;
}
case REPLICATION_COUNT:
result.set(((RpcManagerImpl)cache.getAdvancedCache().getRpcManager()).getReplicationCount());
break;
case REPLICATION_FAILURES:
result.set(((RpcManagerImpl)cache.getAdvancedCache().getRpcManager()).getReplicationFailures());
break;
case SUCCESS_RATIO:
result.set(((RpcManagerImpl)cache.getAdvancedCache().getRpcManager()).getSuccessRatioFloatingPoint());
break;
case COMMITS:
{
TxInterceptor txInterceptor=getFirstInterceptorWhichExtends(cache.getAdvancedCache().getInterceptorChain(),TxInterceptor.class);
result.set(txInterceptor != null ? txInterceptor.getCommits() : 0);
break;
}
case PREPARES:
{
TxInterceptor txInterceptor=getFirstInterceptorWhichExtends(cache.getAdvancedCache().getInterceptorChain(),TxInterceptor.class);
result.set(txInterceptor != null ? txInterceptor.getPrepares() : 0);
break;
}
case ROLLBACKS:
{
TxInterceptor txInterceptor=getFirstInterceptorWhichExtends(cache.getAdvancedCache().getInterceptorChain(),TxInterceptor.class);
result.set(txInterceptor != null ? txInterceptor.getRollbacks() : 0);
break;
}
case INVALIDATIONS:
{
InvalidationInterceptor invInterceptor=getFirstInterceptorWhichExtends(cache.getAdvancedCache().getInterceptorChain(),InvalidationInterceptor.class);
result.set(invInterceptor != null ? invInterceptor.getInvalidations() : 0);
break;
}
case PASSIVATIONS:
{
PassivationInterceptor interceptor=getFirstInterceptorWhichExtends(cache.getAdvancedCache().getInterceptorChain(),PassivationInterceptor.class);
result.set(interceptor != null ? interceptor.getPassivations() : "");
break;
}
case CACHE_LOADER_LOADS:
{
ActivationInterceptor interceptor=getFirstInterceptorWhichExtends(cache.getAdvancedCache().getInterceptorChain(),ActivationInterceptor.class);
result.set(interceptor != null ? interceptor.getCacheLoaderLoads() : 0);
break;
}
case CACHE_LOADER_MISSES:
{
ActivationInterceptor interceptor=getFirstInterceptorWhichExtends(cache.getAdvancedCache().getInterceptorChain(),ActivationInterceptor.class);
result.set(interceptor != null ? interceptor.getCacheLoaderMisses() : 0);
break;
}
}
context.getResult().set(result);
}
context.completeStep(OperationContext.ResultHandler.NOOP_RESULT_HANDLER);
}
