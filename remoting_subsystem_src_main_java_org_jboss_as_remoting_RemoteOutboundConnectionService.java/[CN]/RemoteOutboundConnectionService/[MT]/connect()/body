{
  final URI uri;
  try {
    uri=this.getConnectionURI();
  }
 catch (  URISyntaxException e) {
    throw RemotingLogger.ROOT_LOGGER.couldNotConnect(e);
  }
  final Endpoint endpoint=this.endpointInjectedValue.getValue();
  final CallbackHandler callbackHandler;
  final CallbackHandlerFactory cbhFactory;
  SSLContext sslContext=null;
  SecurityRealm realm=securityRealmInjectedValue.getOptionalValue();
  if (realm != null && (cbhFactory=realm.getSecretCallbackHandlerFactory()) != null && username != null) {
    callbackHandler=cbhFactory.getCallbackHandler(username);
  }
 else {
    callbackHandler=getCallbackHandler();
  }
  if (realm != null) {
    sslContext=realm.getSSLContext();
  }
  final OptionMap.Builder builder=OptionMap.builder();
  builder.set(SASL_POLICY_NOANONYMOUS,Boolean.FALSE);
  builder.set(SASL_POLICY_NOPLAINTEXT,Boolean.FALSE);
  builder.set(Options.SASL_DISALLOWED_MECHANISMS,Sequence.of(JBOSS_LOCAL_USER));
  if (uri.getScheme().equals(HTTP_REMOTING)) {
    builder.set(SSL_ENABLED,false);
  }
 else   if (uri.getScheme().equals(HTTPS_REMOTING)) {
    builder.set(SSL_ENABLED,true);
    builder.set(SSL_STARTTLS,false);
  }
 else {
    builder.set(Options.SSL_ENABLED,true);
    builder.set(Options.SSL_STARTTLS,true);
  }
  builder.addAll(this.connectionCreationOptions);
  return endpoint.connect(uri,builder.getMap(),callbackHandler,sslContext);
}
