{
  SubsystemState subsystemState=new SubsystemState();
  Activation activation=DEFAULT_ACTIVATION;
  if (operation.has(ACTIVATION)) {
    activation=Activation.valueOf(operation.get(ACTIVATION).asString().toUpperCase());
  }
  subsystemState.setActivation(activation);
  if (operation.has(CONFIGURATION)) {
    ModelNode configuration=operation.get(CONFIGURATION);
    String pid=configuration.require(PID).asString();
    Hashtable<String,String> dictionary=new Hashtable<String,String>();
    if (configuration.has(CONFIGURATION_PROPERTIES)) {
      ModelNode configurationProperties=configuration.get(CONFIGURATION_PROPERTIES);
      Set<String> keys=configurationProperties.keys();
      for (      String current : keys) {
        String value=configurationProperties.get(current).asString();
        dictionary.put(current,value);
      }
    }
    subsystemState.putConfiguration(pid,dictionary);
  }
  if (operation.has(PROPERTIES)) {
    ModelNode properties=operation.get(PROPERTIES);
    Set<String> keys=properties.keys();
    for (    String current : keys) {
      String value=properties.get(current).asString();
      subsystemState.addProperty(current,value);
    }
  }
  if (operation.has(MODULES)) {
    ModelNode modules=operation.get(MODULES);
    Set<String> keys=modules.keys();
    for (    String current : keys) {
      String value=modules.get(current).get(START).asString();
      subsystemState.addModule(new OSGiModule(ModuleIdentifier.fromString(current),Boolean.parseBoolean(value)));
    }
  }
  return subsystemState;
}
