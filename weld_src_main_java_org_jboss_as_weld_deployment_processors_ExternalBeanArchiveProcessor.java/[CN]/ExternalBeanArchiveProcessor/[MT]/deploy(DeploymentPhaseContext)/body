{
  final DeploymentUnit deploymentUnit=phaseContext.getDeploymentUnit();
  if (!WeldDeploymentMarker.isPartOfWeldDeployment(deploymentUnit)) {
    return;
  }
  if (deploymentUnit.getParent() != null) {
    return;
  }
  final Set<String> componentClassNames=new HashSet<>();
  final String beanArchiveIdPrefix=deploymentUnit.getName() + ".external.";
  final List<DeploymentUnit> deploymentUnits=new ArrayList<DeploymentUnit>();
  deploymentUnits.add(deploymentUnit);
  deploymentUnits.addAll(deploymentUnit.getAttachmentList(Attachments.SUB_DEPLOYMENTS));
  PropertyReplacingBeansXmlParser parser=new PropertyReplacingBeansXmlParser(deploymentUnit);
  final HashSet<URL> existing=new HashSet<URL>();
  for (  DeploymentUnit deployment : deploymentUnits) {
    try {
      final ExplicitBeanArchiveMetadataContainer weldDeploymentMetadata=deployment.getAttachment(ExplicitBeanArchiveMetadataContainer.ATTACHMENT_KEY);
      if (weldDeploymentMetadata != null) {
        for (        ExplicitBeanArchiveMetadata md : weldDeploymentMetadata.getBeanArchiveMetadata().values()) {
          existing.add(md.getBeansXmlFile().toURL());
          if (md.getAdditionalBeansXmlFile() != null) {
            existing.add(md.getAdditionalBeansXmlFile().toURL());
          }
        }
      }
    }
 catch (    MalformedURLException e) {
      throw new DeploymentUnitProcessingException(e);
    }
    EEModuleDescription moduleDesc=deployment.getAttachment(org.jboss.as.ee.component.Attachments.EE_MODULE_DESCRIPTION);
    if (moduleDesc != null) {
      for (      ComponentDescription component : moduleDesc.getComponentDescriptions()) {
        componentClassNames.add(component.getComponentClassName());
      }
    }
  }
  for (  DeploymentUnit deployment : deploymentUnits) {
    final Module module=deployment.getAttachment(Attachments.MODULE);
    if (module == null) {
      return;
    }
    for (    DependencySpec dep : module.getDependencies()) {
      final Module dependency=loadModuleDependency(dep);
      if (dependency == null) {
        continue;
      }
      URL url=findExportedLocalBeansXml(dependency);
      if (url != null && !existing.contains(url)) {
        if (url.toString().contains("jsf-impl-2.2")) {
          continue;
        }
        if (url.toString().contains("resteasy-cdi")) {
          continue;
        }
        WeldLogger.DEPLOYMENT_LOGGER.debugf("Found external beans.xml: %s",url.toString());
        final BeansXml beansXml=parseBeansXml(url,parser,deploymentUnit);
        final UrlScanner urlScanner=new UrlScanner();
        final List<String> discoveredClasses=new ArrayList<String>();
        if (!urlScanner.handleBeansXml(url,discoveredClasses)) {
          continue;
        }
        discoveredClasses.removeAll(componentClassNames);
        final BeanDeploymentArchiveImpl bda=new BeanDeploymentArchiveImpl(new HashSet<String>(discoveredClasses),beansXml,dependency,beanArchiveIdPrefix + url.toExternalForm(),BeanArchiveType.EXTERNAL);
        WeldLogger.DEPLOYMENT_LOGGER.beanArchiveDiscovered(bda);
        final JpaInjectionServices jpaInjectionServices=new WeldJpaInjectionServices(deploymentUnit);
        final JaxwsInjectionServices jaxwsInjectionServices=new WeldJaxwsInjectionServices(deploymentUnit);
        bda.getServices().add(JpaInjectionServices.class,jpaInjectionServices);
        bda.getServices().add(JaxwsInjectionServices.class,jaxwsInjectionServices);
        deploymentUnit.addToAttachmentList(WeldAttachments.ADDITIONAL_BEAN_DEPLOYMENT_MODULES,bda);
        existing.add(url);
      }
    }
  }
}
