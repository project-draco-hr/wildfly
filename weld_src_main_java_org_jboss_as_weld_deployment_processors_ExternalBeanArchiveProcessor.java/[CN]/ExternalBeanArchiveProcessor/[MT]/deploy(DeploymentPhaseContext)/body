{
  final DeploymentUnit deploymentUnit=phaseContext.getDeploymentUnit();
  if (!WeldDeploymentMarker.isPartOfWeldDeployment(deploymentUnit)) {
    return;
  }
  if (deploymentUnit.getParent() != null) {
    return;
  }
  final String beanArchiveIdPrefix=deploymentUnit.getName() + ".external.";
  final List<DeploymentUnit> deploymentUnits=new ArrayList<DeploymentUnit>();
  deploymentUnits.add(deploymentUnit);
  deploymentUnits.addAll(deploymentUnit.getAttachmentList(Attachments.SUB_DEPLOYMENTS));
  PropertyReplacingBeansXmlParser parser=new PropertyReplacingBeansXmlParser(deploymentUnit);
  final Map<URL,List<DeploymentUnit>> deploymentUnitMap=new HashMap<URL,List<DeploymentUnit>>();
  final HashSet<URL> existing=new HashSet<URL>();
  for (  DeploymentUnit deployment : deploymentUnits) {
    try {
      final WeldDeploymentMetadata weldDeploymentMetadata=deployment.getAttachment(WeldDeploymentMetadata.ATTACHMENT_KEY);
      if (weldDeploymentMetadata != null) {
        for (        BeanArchiveMetadata md : weldDeploymentMetadata.getBeanArchiveMetadata()) {
          existing.add(md.getBeansXmlFile().toURL());
          if (md.getAdditionalBeansXmlFile() != null) {
            existing.add(md.getAdditionalBeansXmlFile().toURL());
          }
        }
      }
    }
 catch (    MalformedURLException e) {
      throw new DeploymentUnitProcessingException(e);
    }
  }
  for (  DeploymentUnit deployment : deploymentUnits) {
    final Module module=deployment.getAttachment(Attachments.MODULE);
    if (module == null) {
      return;
    }
    try {
      Enumeration<URL> resources=module.getClassLoader().getResources(META_INF_BEANS_XML);
      while (resources.hasMoreElements()) {
        final URL beansXml=resources.nextElement();
        if (existing.contains(beansXml)) {
          continue;
        }
        if (beansXml.toString().contains("jsf-impl-2.2")) {
          continue;
        }
        WeldLogger.DEPLOYMENT_LOGGER.debugf("Found external beans.xml: %s",beansXml.toString());
        List<DeploymentUnit> dus=deploymentUnitMap.get(beansXml);
        if (dus == null) {
          deploymentUnitMap.put(beansXml,dus=new ArrayList<DeploymentUnit>());
        }
        dus.add(deployment);
      }
    }
 catch (    IOException e) {
      throw new DeploymentUnitProcessingException(e);
    }
  }
  for (  final Map.Entry<URL,List<DeploymentUnit>> entry : deploymentUnitMap.entrySet()) {
    final Module module=entry.getValue().get(0).getAttachment(Attachments.MODULE);
    final BeansXml beansXml=parseBeansXml(entry.getKey(),parser,deploymentUnit);
    final UrlScanner urlScanner=new UrlScanner();
    final List<String> discoveredClasses=new ArrayList<String>();
    if (!urlScanner.handleBeansXml(entry.getKey(),discoveredClasses)) {
      continue;
    }
    final BeanDeploymentArchiveImpl bda=new BeanDeploymentArchiveImpl(new HashSet<String>(discoveredClasses),beansXml,module,beanArchiveIdPrefix + entry.getKey().toExternalForm());
    final BeanDeploymentModule bdm=new BeanDeploymentModule(Collections.singleton(bda));
    final JpaInjectionServices jpaInjectionServices=new WeldJpaInjectionServices(deploymentUnit,deploymentUnit.getServiceRegistry());
    final JaxwsInjectionServices jaxwsInjectionServices=new WeldJaxwsInjectionServices(deploymentUnit);
    bdm.addService(JpaInjectionServices.class,jpaInjectionServices);
    bdm.addService(JaxwsInjectionServices.class,jaxwsInjectionServices);
    deploymentUnit.addToAttachmentList(WeldAttachments.ADDITIONAL_BEAN_DEPLOYMENT_MODULES,bdm);
    for (    DeploymentUnit du : entry.getValue()) {
      du.addToAttachmentList(WeldAttachments.VISIBLE_ADDITIONAL_BEAN_DEPLOYMENT_MODULE,bdm);
    }
  }
}
