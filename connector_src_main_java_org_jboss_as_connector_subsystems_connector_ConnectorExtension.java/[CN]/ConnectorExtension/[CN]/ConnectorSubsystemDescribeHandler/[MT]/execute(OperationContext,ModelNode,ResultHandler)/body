{
  final ModelNode add=createEmptyAddOperation();
  final ModelNode model=context.getSubModel();
  if (model.hasDefined(DEFAULT_WORKMANAGER_SHORT_RUNNING_THREAD_POOL)) {
    add.get(DEFAULT_WORKMANAGER_SHORT_RUNNING_THREAD_POOL).set(model.get(DEFAULT_WORKMANAGER_SHORT_RUNNING_THREAD_POOL));
  }
  if (model.hasDefined(DEFAULT_WORKMANAGER_LONG_RUNNING_THREAD_POOL)) {
    add.get(DEFAULT_WORKMANAGER_LONG_RUNNING_THREAD_POOL).set(model.get(DEFAULT_WORKMANAGER_LONG_RUNNING_THREAD_POOL));
  }
  if (model.hasDefined(BEAN_VALIDATION_ENABLED)) {
    add.get(BEAN_VALIDATION_ENABLED).set(model.get(BEAN_VALIDATION_ENABLED));
  }
  if (model.hasDefined(ARCHIVE_VALIDATION_ENABLED)) {
    add.get(ARCHIVE_VALIDATION_ENABLED).set(model.get(ARCHIVE_VALIDATION_ENABLED));
  }
  if (model.hasDefined(ARCHIVE_VALIDATION_FAIL_ON_ERROR)) {
    add.get(ARCHIVE_VALIDATION_FAIL_ON_ERROR).set(model.get(ARCHIVE_VALIDATION_FAIL_ON_ERROR));
  }
  if (model.hasDefined(ARCHIVE_VALIDATION_FAIL_ON_WARN)) {
    add.get(ARCHIVE_VALIDATION_FAIL_ON_WARN).set(model.get(ARCHIVE_VALIDATION_FAIL_ON_WARN));
  }
  ModelNode result=new ModelNode();
  result.add(add);
  resultHandler.handleResultFragment(Util.NO_LOCATION,result);
  resultHandler.handleResultComplete(new ModelNode());
  return Cancellable.NULL;
}
