{
  super(ctx,"deploy",true);
  final DefaultOperationRequestAddress requiredAddress=new DefaultOperationRequestAddress();
  requiredAddress.toNodeType(Util.DEPLOYMENT);
  addRequiredPath(requiredAddress);
  l=new ArgumentWithoutValue(this,"-l");
  l.setExclusive(true);
  final FilenameTabCompleter pathCompleter=Util.isWindows() ? new WindowsFilenameTabCompleter(ctx) : new DefaultFilenameTabCompleter(ctx);
  path=new FileSystemPathArgument(this,pathCompleter,0,"--path");
  path.addCantAppearAfter(l);
  url=new ArgumentWithValue(this,"--url");
  url.addCantAppearAfter(path);
  path.addCantAppearAfter(url);
  force=new ArgumentWithoutValue(this,"--force","-f");
  force.addRequiredPreceding(path);
  name=new ArgumentWithValue(this,new CommandLineCompleter(){
    @Override public int complete(    CommandContext ctx,    String buffer,    int cursor,    List<String> candidates){
      ParsedCommandLine args=ctx.getParsedCommandLine();
      try {
        if (path.isPresent(args) || url.isPresent(args)) {
          return -1;
        }
      }
 catch (      CommandFormatException e) {
        return -1;
      }
      int nextCharIndex=0;
      while (nextCharIndex < buffer.length()) {
        if (!Character.isWhitespace(buffer.charAt(nextCharIndex))) {
          break;
        }
        ++nextCharIndex;
      }
      if (ctx.getModelControllerClient() != null) {
        List<String> deployments=Util.getDeployments(ctx.getModelControllerClient());
        if (deployments.isEmpty()) {
          return -1;
        }
        String opBuffer=buffer.substring(nextCharIndex).trim();
        if (opBuffer.isEmpty()) {
          candidates.addAll(deployments);
        }
 else {
          for (          String name : deployments) {
            if (name.startsWith(opBuffer)) {
              candidates.add(name);
            }
          }
          Collections.sort(candidates);
        }
        return nextCharIndex;
      }
 else {
        return -1;
      }
    }
  }
,"--name");
  name.addCantAppearAfter(l);
  path.addCantAppearAfter(name);
  url.addCantAppearAfter(name);
  rtName=new ArgumentWithValue(this,"--runtime-name");
  rtName.addRequiredPreceding(path);
  allServerGroups=new ArgumentWithoutValue(this,"--all-server-groups"){
    @Override public boolean canAppearNext(    CommandContext ctx) throws CommandFormatException {
      if (!ctx.isDomainMode()) {
        return false;
      }
      return super.canAppearNext(ctx);
    }
  }
;
  allServerGroups.addRequiredPreceding(path);
  allServerGroups.addRequiredPreceding(name);
  allServerGroups.addCantAppearAfter(force);
  force.addCantAppearAfter(allServerGroups);
  serverGroups=new ArgumentWithValue(this,new CommaSeparatedCompleter(){
    @Override protected Collection<String> getAllCandidates(    CommandContext ctx){
      return Util.getServerGroups(ctx.getModelControllerClient());
    }
  }
,"--server-groups"){
    @Override public boolean canAppearNext(    CommandContext ctx) throws CommandFormatException {
      if (!ctx.isDomainMode()) {
        return false;
      }
      return super.canAppearNext(ctx);
    }
  }
;
  serverGroups.addRequiredPreceding(path);
  serverGroups.addRequiredPreceding(name);
  serverGroups.addCantAppearAfter(force);
  force.addCantAppearAfter(serverGroups);
  serverGroups.addCantAppearAfter(allServerGroups);
  allServerGroups.addCantAppearAfter(serverGroups);
  disabled=new ArgumentWithoutValue(this,"--disabled");
  disabled.addRequiredPreceding(path);
  disabled.addCantAppearAfter(serverGroups);
  disabled.addCantAppearAfter(allServerGroups);
  disabled.addCantAppearAfter(force);
  force.addCantAppearAfter(disabled);
  unmanaged=new ArgumentWithoutValue(this,"--unmanaged");
  unmanaged.addRequiredPreceding(path);
  script=new ArgumentWithValue(this,"--script");
  script.addRequiredPreceding(path);
}
