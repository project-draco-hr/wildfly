{
  super("deploy",true);
  SimpleArgumentTabCompleter argsCompleter=(SimpleArgumentTabCompleter)this.getArgumentCompleter();
  l=new ArgumentWithoutValue("-l");
  l.setExclusive(true);
  argsCompleter.addArgument(l);
  path=new ArgumentWithValue(true,FilenameTabCompleter.INSTANCE,0,"--path");
  path.addCantAppearAfter(l);
  argsCompleter.addArgument(path);
  force=new ArgumentWithoutValue("--force","-f");
  force.addRequiredPreceding(path);
  argsCompleter.addArgument(force);
  name=new ArgumentWithValue("--name");
  name.addRequiredPreceding(path);
  argsCompleter.addArgument(name);
  rtName=new ArgumentWithValue("--runtime-name");
  rtName.addRequiredPreceding(path);
  argsCompleter.addArgument(rtName);
  serverGroups=new ArgumentWithValue(true,new CommandLineCompleter(){
    @Override public int complete(    CommandContext ctx,    String buffer,    int cursor,    List<String> candidates){
      List<String> allGroups=Util.getServerGroups(ctx.getModelControllerClient());
      if (buffer.isEmpty()) {
        candidates.addAll(allGroups);
        Collections.sort(candidates);
        return 0;
      }
      final String[] groups=buffer.split(",+");
      final String chunk;
      final int lastGroupIndex;
      if (buffer.charAt(buffer.length() - 1) == ',') {
        lastGroupIndex=groups.length;
        chunk=null;
      }
 else {
        lastGroupIndex=groups.length - 1;
        chunk=groups[groups.length - 1];
      }
      for (int i=0; i < lastGroupIndex; ++i) {
        allGroups.remove(groups[i]);
      }
      final int result;
      if (chunk == null) {
        candidates.addAll(allGroups);
        result=buffer.length();
      }
 else {
        for (        String group : allGroups) {
          if (group.startsWith(chunk)) {
            candidates.add(group);
          }
        }
        result=buffer.lastIndexOf(',') + 1;
      }
      Collections.sort(candidates);
      return result;
    }
  }
,"--server-groups"){
    @Override public boolean isAvailable(    CommandContext ctx){
      return ctx.isDomainMode();
    }
  }
;
  serverGroups.addRequiredPreceding(path);
  argsCompleter.addArgument(serverGroups);
}
