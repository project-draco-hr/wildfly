{
  ModelControllerClient client=ctx.getModelControllerClient();
  if (!ctx.hasArguments()) {
    printList(ctx,Util.getDeployments(client));
    return;
  }
  List<String> otherArgs=ctx.getOtherArguments();
  if (otherArgs.size() > 1) {
    ctx.printLine("Only one unnamed argument is expected for this command but received " + otherArgs.size() + ": "+ otherArgs);
    return;
  }
  String path=null;
  if (otherArgs.size() > 0) {
    path=otherArgs.get(0);
  }
 else {
    path=ctx.getArgument("path");
  }
  if (path == null) {
    ctx.printLine("The required path argument is missing.");
    return;
  }
  File f=new File(path);
  if (!f.exists()) {
    ctx.printLine("Path " + f.getAbsolutePath() + " doesn't exist.");
    return;
  }
  String name=ctx.getArgument("name");
  if (name == null) {
    name=f.getName();
  }
  String runtimeName=ctx.getArgument("runtime-name");
  if (Util.isDeployed(name,client)) {
    if (ctx.hasArgument("f")) {
      DefaultOperationRequestBuilder builder=new DefaultOperationRequestBuilder();
      ModelNode result;
      builder=new DefaultOperationRequestBuilder();
      builder.setOperationName("full-replace-deployment");
      builder.addProperty("name",name);
      if (runtimeName != null) {
        builder.addProperty("runtime-name",runtimeName);
      }
      FileInputStream is=null;
      try {
        is=new FileInputStream(f);
        ModelNode request=builder.buildRequest();
        OperationBuilder op=OperationBuilder.Factory.create(request);
        op.addInputStream(is);
        request.get("input-stream-index").set(0);
        result=client.execute(op.build());
      }
 catch (      Exception e) {
        ctx.printLine("Failed to replace the deployment: " + e.getLocalizedMessage());
        return;
      }
 finally {
        StreamUtils.safeClose(is);
      }
      if (!Util.isSuccess(result)) {
        ctx.printLine(Util.getFailureDescription(result));
        return;
      }
      ctx.printLine("'" + name + "' re-deployed successfully.");
    }
 else {
      ctx.printLine("'" + name + "' is already deployed (use -f to force re-deploy).");
    }
    return;
  }
 else {
    DefaultOperationRequestBuilder builder;
    ModelNode result;
    builder=new DefaultOperationRequestBuilder();
    builder.setOperationName("add");
    builder.addNode("deployment",name);
    if (runtimeName != null) {
      builder.addProperty("runtime-name",runtimeName);
    }
    FileInputStream is=null;
    try {
      is=new FileInputStream(f);
      ModelNode request=builder.buildRequest();
      OperationBuilder op=OperationBuilder.Factory.create(request);
      op.addInputStream(is);
      request.get("input-stream-index").set(0);
      result=client.execute(op.build());
    }
 catch (    Exception e) {
      ctx.printLine("Failed to add the deployment content to the repository: " + e.getLocalizedMessage());
      return;
    }
 finally {
      StreamUtils.safeClose(is);
    }
    if (!Util.isSuccess(result)) {
      ctx.printLine(Util.getFailureDescription(result));
      return;
    }
    builder=new DefaultOperationRequestBuilder();
    builder.setOperationName("deploy");
    builder.addNode("deployment",name);
    try {
      ModelNode request=builder.buildRequest();
      result=client.execute(request);
    }
 catch (    Exception e) {
      ctx.printLine("Failed to deploy: " + e.getLocalizedMessage());
      return;
    }
    if (!Util.isSuccess(result)) {
      ctx.printLine(Util.getFailureDescription(result));
      return;
    }
    ctx.printLine("'" + name + "' deployed successfully.");
  }
}
