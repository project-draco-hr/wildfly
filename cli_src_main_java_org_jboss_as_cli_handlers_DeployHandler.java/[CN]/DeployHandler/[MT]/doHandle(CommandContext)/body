{
  ModelControllerClient client=ctx.getModelControllerClient();
  ParsedArguments args=ctx.getParsedArguments();
  boolean l=this.l.isPresent(args);
  if (!args.hasArguments() || l) {
    printList(ctx,Util.getDeployments(client),l);
    return;
  }
  final String path=this.path.getValue(args);
  final File f;
  if (path != null) {
    f=new File(path);
    if (!f.exists()) {
      ctx.printLine("Path " + f.getAbsolutePath() + " doesn't exist.");
      return;
    }
    if (f.isDirectory()) {
      ctx.printLine(f.getAbsolutePath() + " is a directory.");
      return;
    }
  }
 else {
    f=null;
  }
  String name=this.name.getValue(args);
  if (name == null) {
    if (f == null) {
      ctx.printLine("Either path or --name is requied.");
      return;
    }
    name=f.getName();
  }
  final String runtimeName=rtName.getValue(args);
  if (Util.isDeploymentInRepository(name,client) && f != null) {
    if (force.isPresent(args)) {
      DefaultOperationRequestBuilder builder=new DefaultOperationRequestBuilder();
      ModelNode result;
      builder=new DefaultOperationRequestBuilder();
      builder.setOperationName("full-replace-deployment");
      builder.addProperty("name",name);
      if (runtimeName != null) {
        builder.addProperty("runtime-name",runtimeName);
      }
      FileInputStream is=null;
      try {
        is=new FileInputStream(f);
        ModelNode request=builder.buildRequest();
        OperationBuilder op=OperationBuilder.Factory.create(request);
        op.addInputStream(is);
        request.get("content").get(0).get("input-stream-index").set(0);
        result=client.execute(op.build());
      }
 catch (      Exception e) {
        ctx.printLine("Failed to replace the deployment: " + e.getLocalizedMessage());
        return;
      }
 finally {
        StreamUtils.safeClose(is);
      }
      if (!Util.isSuccess(result)) {
        ctx.printLine(Util.getFailureDescription(result));
        return;
      }
      ctx.printLine("'" + name + "' re-deployed successfully.");
    }
 else {
      ctx.printLine("'" + name + "' is already deployed (use "+ force.getFullName()+ " to force re-deploy).");
    }
    return;
  }
 else {
    DefaultOperationRequestBuilder builder;
    ModelNode result;
    if (f != null) {
      builder=new DefaultOperationRequestBuilder();
      builder.setOperationName("add");
      builder.addNode("deployment",name);
      if (runtimeName != null) {
        builder.addProperty("runtime-name",runtimeName);
      }
      FileInputStream is=null;
      try {
        is=new FileInputStream(f);
        ModelNode request=builder.buildRequest();
        OperationBuilder op=OperationBuilder.Factory.create(request);
        op.addInputStream(is);
        request.get("content").get(0).get("input-stream-index").set(0);
        result=client.execute(op.build());
      }
 catch (      Exception e) {
        ctx.printLine("Failed to add the deployment content to the repository: " + e.getLocalizedMessage());
        return;
      }
 finally {
        StreamUtils.safeClose(is);
      }
      if (!Util.isSuccess(result)) {
        ctx.printLine(Util.getFailureDescription(result));
        return;
      }
    }
    if (!disabled.isPresent(args)) {
      final ModelNode request;
      if (ctx.isDomainMode()) {
        final List<String> serverGroups;
        if (ctx.isDomainMode()) {
          if (allServerGroups.isPresent(args)) {
            serverGroups=Util.getServerGroups(client);
          }
 else {
            String serverGroupsStr=this.serverGroups.getValue(args);
            if (serverGroupsStr == null) {
              ctx.printLine("Either --all-server-groups or --server-groups must be specified.");
              return;
            }
            serverGroups=Arrays.asList(serverGroupsStr.split(","));
          }
          if (serverGroups.isEmpty()) {
            ctx.printLine("No server group is available.");
            return;
          }
        }
 else {
          serverGroups=null;
        }
        request=new ModelNode();
        request.get("operation").set("composite");
        request.get("address").setEmptyList();
        ModelNode steps=request.get("steps");
        for (        String serverGroup : serverGroups) {
          steps.add(Util.configureDeploymentOperation("add",name,serverGroup));
        }
        for (        String serverGroup : serverGroups) {
          steps.add(Util.configureDeploymentOperation("deploy",name,serverGroup));
        }
      }
 else {
        builder=new DefaultOperationRequestBuilder();
        builder.setOperationName("deploy");
        builder.addNode("deployment",name);
        try {
          request=builder.buildRequest();
        }
 catch (        Exception e) {
          ctx.printLine("Failed to deploy: " + e.getLocalizedMessage());
          return;
        }
      }
      try {
        result=client.execute(request);
      }
 catch (      Exception e) {
        ctx.printLine("Failed to deploy: " + e.getLocalizedMessage());
        return;
      }
      if (!Util.isSuccess(result)) {
        ctx.printLine(Util.getFailureDescription(result));
        return;
      }
    }
    ctx.printLine("'" + name + "' deployed successfully.");
  }
}
