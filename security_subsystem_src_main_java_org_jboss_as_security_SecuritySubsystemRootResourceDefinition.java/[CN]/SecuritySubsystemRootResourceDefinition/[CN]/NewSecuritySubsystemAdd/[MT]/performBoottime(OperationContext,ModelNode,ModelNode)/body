{
  SecurityLogger.ROOT_LOGGER.activatingSecuritySubsystem();
  if (context.getProcessType() != ProcessType.APPLICATION_CLIENT) {
    WildFlySecurityManager.setPropertyPrivileged(SecurityContextAssociation.SECURITYCONTEXT_THREADLOCAL,"true");
  }
  final ServiceTarget target=context.getServiceTarget();
  final SecurityBootstrapService bootstrapService=new SecurityBootstrapService();
  target.addService(SecurityBootstrapService.SERVICE_NAME,bootstrapService).addDependency(Services.JBOSS_SERVICE_MODULE_LOADER,ServiceModuleLoader.class,bootstrapService.getServiceModuleLoaderInjectedValue()).setInitialMode(ServiceController.Mode.ACTIVE).install();
  final SecurityDomainJndiInjectable securityDomainJndiInjectable=new SecurityDomainJndiInjectable();
  final BinderService binderService=new BinderService("jaas");
  target.addService(ContextNames.JBOSS_CONTEXT_SERVICE_NAME.append("jaas"),binderService).addInjection(binderService.getManagedObjectInjector(),securityDomainJndiInjectable).addDependency(ContextNames.JBOSS_CONTEXT_SERVICE_NAME,ServiceBasedNamingStore.class,binderService.getNamingStoreInjector()).addDependency(SecurityManagementService.SERVICE_NAME,ISecurityManagement.class,securityDomainJndiInjectable.getSecurityManagementInjector()).setInitialMode(ServiceController.Mode.ACTIVE).install();
  ModelNode modelNode=SecuritySubsystemRootResourceDefinition.DEEP_COPY_SUBJECT_MODE.resolveModelAttribute(context,model);
  final SecurityManagementService securityManagementService=new SecurityManagementService(AUTHENTICATION_MANAGER,modelNode.isDefined() && modelNode.asBoolean(),CALLBACK_HANDLER,AUTHORIZATION_MANAGER,AUDIT_MANAGER,IDENTITY_TRUST_MANAGER,MAPPING_MANAGER);
  target.addService(SecurityManagementService.SERVICE_NAME,securityManagementService).addDependency(Services.JBOSS_SERVICE_MODULE_LOADER,ServiceModuleLoader.class,securityManagementService.getServiceModuleLoaderInjectedValue()).addDependency(JaasConfigurationService.SERVICE_NAME).setInitialMode(ServiceController.Mode.ACTIVE).install();
  final SubjectFactoryService subjectFactoryService=new SubjectFactoryService(SUBJECT_FACTORY);
  target.addService(SubjectFactoryService.SERVICE_NAME,subjectFactoryService).addDependency(SecurityManagementService.SERVICE_NAME,ISecurityManagement.class,subjectFactoryService.getSecurityManagementInjector()).setInitialMode(ServiceController.Mode.ACTIVE).install();
  Configuration loginConfig=XMLLoginConfigImpl.getInstance();
  final JaasConfigurationService jaasConfigurationService=new JaasConfigurationService(loginConfig);
  target.addService(JaasConfigurationService.SERVICE_NAME,jaasConfigurationService).setInitialMode(ServiceController.Mode.ACTIVE).install();
  if (context.hasOptionalCapability("org.wildfly.transactions",SECURITY_SUBSYSTEM.getName(),null)) {
    TransactionManagerLocatorService service=new TransactionManagerLocatorService();
    target.addService(TransactionManagerLocatorService.SERVICE_NAME,service).addDependency(ServiceName.JBOSS.append("txn","TransactionManager"),TransactionManager.class,service.getTransactionManagerInjectedValue()).install();
  }
 else {
    target.addService(TransactionManagerLocatorService.SERVICE_NAME,Service.NULL).install();
  }
  final SimpleSecurityManagerService simpleSecurityManagerService=new SimpleSecurityManagerService();
  target.addService(SimpleSecurityManagerService.SERVICE_NAME,simpleSecurityManagerService).addDependency(SecurityManagementService.SERVICE_NAME).install();
  context.addStep(new AbstractDeploymentChainStep(){
    @Override protected void execute(    DeploymentProcessorTarget processorTarget){
      processorTarget.addDeploymentProcessor(SecurityExtension.SUBSYSTEM_NAME,Phase.INSTALL,Phase.INSTALL_JACC_POLICY,new JaccEarDeploymentProcessor());
      processorTarget.addDeploymentProcessor(SecurityExtension.SUBSYSTEM_NAME,Phase.DEPENDENCIES,Phase.DEPENDENCIES_SECURITY,new SecurityDependencyProcessor());
      processorTarget.addDeploymentProcessor(SecurityExtension.SUBSYSTEM_NAME,Phase.PARSE,0x0080,new SecurityEnablementProcessor());
    }
  }
,OperationContext.Stage.RUNTIME);
}
