{
  assertFileContents(externalFile,"ext");
  ConfigurationFile configurationFile=new ConfigurationFile(standardDir,"standard.xml",externalFile.getCanonicalPath(),false);
  File bootingFile=configurationFile.getBootFile();
  Assert.assertEquals(externalFile.getCanonicalPath(),bootingFile.getCanonicalPath());
  TestConfigurationFilePersister persister=new TestConfigurationFilePersister(configurationFile);
  configurationFile.successfulBoot();
  checkDirectoryExists(historyDir);
  checkDirectoryExists(currentHistoryDir);
  checkFiles(null,"std","ext","ext","ext");
  assertFileContents(externalFile,"ext");
  store(persister,"One");
  checkFiles(null,"std","ext","ext","One","ext");
  assertFileContents(externalFile,"ext");
  store(persister,"Two");
  checkFiles(null,"std","ext","ext","Two","ext","One");
  assertFileContents(externalFile,"ext");
  store(persister,"Three");
  checkFiles(null,"std","ext","ext","Three","ext","One","Two");
  assertFileContents(externalFile,"ext");
  externalFile.delete();
  createFile(externalDir,externalFile.getName(),"ext2");
  configurationFile=new ConfigurationFile(standardDir,"standard.xml",externalFile.getCanonicalPath(),false);
  bootingFile=configurationFile.getBootFile();
  Assert.assertEquals(externalFile.getCanonicalPath(),bootingFile.getCanonicalPath());
  persister=new TestConfigurationFilePersister(configurationFile);
  configurationFile.successfulBoot();
  checkDirectoryExists(historyDir);
  checkDirectoryExists(currentHistoryDir);
  checkFiles(null,"std","ext","ext2","ext2");
  assertFileContents(externalFile,"ext2");
  store(persister,"Four");
  checkFiles(null,"std","ext","ext2","Four","ext2");
  assertFileContents(externalFile,"ext2");
}
