{
  assertFileContents(standardFile,"std");
  createFile(standardDir,"test.xml","non-std");
  ConfigurationFile configurationFile=new ConfigurationFile(standardDir,"standard.xml","test.xml",false);
  File bootingFile=configurationFile.getBootFile();
  Assert.assertEquals(new File(standardDir,"test.xml").getCanonicalPath(),bootingFile.getCanonicalPath());
  TestConfigurationFilePersister persister=new TestConfigurationFilePersister(configurationFile);
  configurationFile.successfulBoot();
  checkDirectoryExists(historyDir);
  checkDirectoryExists(currentHistoryDir);
  checkFiles("test","non-std","non-std","non-std","non-std");
  store(persister,"One");
  checkFiles("test","non-std","non-std","non-std","One","non-std");
  store(persister,"Two");
  checkFiles("test","non-std","non-std","non-std","Two","non-std","One");
  store(persister,"Three");
  checkFiles("test","non-std","non-std","non-std","Three","non-std","One","Two");
  configurationFile=new ConfigurationFile(standardDir,"standard.xml","test.xml",false);
  bootingFile=configurationFile.getBootFile();
  Assert.assertEquals(new File(standardFile.getCanonicalFile().getParentFile(),"test.xml").getCanonicalPath(),bootingFile.getCanonicalPath());
  persister=new TestConfigurationFilePersister(configurationFile);
  configurationFile.successfulBoot();
  checkDirectoryExists(historyDir);
  checkDirectoryExists(currentHistoryDir);
  checkFiles("test","non-std","non-std","non-std","non-std");
  store(persister,"Four");
  checkFiles("test","non-std","non-std","non-std","Four","non-std");
}
