{
  final ModelNode model=resource.getModel();
  final boolean requireBeanDescriptor=REQUIRE_BEAN_DESCRIPTOR_ATTRIBUTE.resolveModelAttribute(context,model).asBoolean();
  final boolean nonPortableMode=WeldResourceDefinition.NON_PORTABLE_MODE_ATTRIBUTE.resolveModelAttribute(context,model).asBoolean();
  final boolean developmentMode=WeldResourceDefinition.DEVELOPMENT_MODE_ATTRIBUTE.resolveModelAttribute(context,model).asBoolean();
  context.addStep(new AbstractDeploymentChainStep(){
    @Override protected void execute(    DeploymentProcessorTarget processorTarget){
      final JBossAllXmlParserRegisteringProcessor<?> jbossAllParsers=JBossAllXmlParserRegisteringProcessor.builder().addParser(WeldJBossAll10Parser.ROOT_ELEMENT,WeldJBossAllConfiguration.ATTACHMENT_KEY,WeldJBossAll10Parser.INSTANCE).addParser(WeldJBossAll11Parser.ROOT_ELEMENT,WeldJBossAllConfiguration.ATTACHMENT_KEY,WeldJBossAll11Parser.INSTANCE).build();
      processorTarget.addDeploymentProcessor(WeldExtension.SUBSYSTEM_NAME,Phase.STRUCTURE,Phase.STRUCTURE_REGISTER_JBOSS_ALL_WELD,jbossAllParsers);
      processorTarget.addDeploymentProcessor(WeldExtension.SUBSYSTEM_NAME,Phase.PARSE,Phase.PARSE_WELD_CONFIGURATION,new WeldConfigurationProcessor(requireBeanDescriptor,nonPortableMode,developmentMode));
      processorTarget.addDeploymentProcessor(WeldExtension.SUBSYSTEM_NAME,Phase.PARSE,Phase.PARSE_CDI_ANNOTATIONS,new CdiAnnotationProcessor());
      processorTarget.addDeploymentProcessor(WeldExtension.SUBSYSTEM_NAME,Phase.PARSE,Phase.PARSE_CDI_BEAN_DEFINING_ANNOTATIONS,new BeanDefiningAnnotationProcessor());
      processorTarget.addDeploymentProcessor(WeldExtension.SUBSYSTEM_NAME,Phase.PARSE,Phase.PARSE_WELD_DEPLOYMENT,new BeansXmlProcessor());
      processorTarget.addDeploymentProcessor(WeldExtension.SUBSYSTEM_NAME,Phase.PARSE,Phase.PARSE_WELD_IMPLICIT_DEPLOYMENT_DETECTION,new WeldImplicitDeploymentProcessor());
      processorTarget.addDeploymentProcessor(WeldExtension.SUBSYSTEM_NAME,Phase.DEPENDENCIES,Phase.DEPENDENCIES_WELD,new WeldDependencyProcessor());
      processorTarget.addDeploymentProcessor(WeldExtension.SUBSYSTEM_NAME,Phase.POST_MODULE,Phase.POST_MODULE_WELD_WEB_INTEGRATION,new WebIntegrationProcessor());
      processorTarget.addDeploymentProcessor(WeldExtension.SUBSYSTEM_NAME,Phase.POST_MODULE,Phase.POST_MODULE_WELD_DEVELOPMENT_MODE,new DevelopmentModeProcessor());
      processorTarget.addDeploymentProcessor(WeldExtension.SUBSYSTEM_NAME,Phase.POST_MODULE,Phase.POST_MODULE_WELD_BEAN_ARCHIVE,new BeanArchiveProcessor());
      processorTarget.addDeploymentProcessor(WeldExtension.SUBSYSTEM_NAME,Phase.POST_MODULE,Phase.POST_MODULE_WELD_EXTERNAL_BEAN_ARCHIVE,new ExternalBeanArchiveProcessor());
      processorTarget.addDeploymentProcessor(WeldExtension.SUBSYSTEM_NAME,Phase.POST_MODULE,Phase.POST_MODULE_WELD_PORTABLE_EXTENSIONS,new WeldPortableExtensionProcessor());
      processorTarget.addDeploymentProcessor(WeldExtension.SUBSYSTEM_NAME,Phase.POST_MODULE,Phase.POST_MODULE_WELD_COMPONENT_INTEGRATION,new WeldComponentIntegrationProcessor());
      processorTarget.addDeploymentProcessor(WeldExtension.SUBSYSTEM_NAME,Phase.INSTALL,Phase.INSTALL_WELD_DEPLOYMENT,new WeldDeploymentProcessor(checkJtsEnabled(context)));
      processorTarget.addDeploymentProcessor(WeldExtension.SUBSYSTEM_NAME,Phase.INSTALL,Phase.INSTALL_CDI_VALIDATOR_FACTORY,new CdiBeanValidationFactoryProcessor());
      processorTarget.addDeploymentProcessor(WeldExtension.SUBSYSTEM_NAME,Phase.INSTALL,Phase.INSTALL_WELD_BEAN_MANAGER,new WeldBeanManagerServiceProcessor());
    }
  }
,OperationContext.Stage.RUNTIME);
  TCCLSingletonService singleton=new TCCLSingletonService();
  context.getServiceTarget().addService(TCCLSingletonService.SERVICE_NAME,singleton).setInitialMode(Mode.ON_DEMAND).install();
  context.getServiceTarget().addService(WeldExecutorServices.SERVICE_NAME,new WeldExecutorServices()).setInitialMode(Mode.ON_DEMAND).install();
}
