{
  context.getSubModel().setEmptyObject();
  if (context instanceof BootOperationContext) {
    final BootOperationContext bootContext=(BootOperationContext)context;
    context.getRuntimeContext().setRuntimeTask(new RuntimeTask(){
      public void execute(      RuntimeTaskContext context) throws OperationFailedException {
        bootContext.addDeploymentProcessor(Phase.DEPENDENCIES,Phase.DEPENDENCIES_WELD,new WeldDependencyProcessor());
        bootContext.addDeploymentProcessor(Phase.PARSE,Phase.PARSE_WELD_DEPLOYMENT,new BeansXmlProcessor());
        bootContext.addDeploymentProcessor(Phase.POST_MODULE,Phase.POST_MODULE_WELD_WEB_INTEGRATION,new WebIntegrationProcessor());
        bootContext.addDeploymentProcessor(Phase.POST_MODULE,Phase.POST_MODULE_WELD_BEAN_ARCHIVE,new BeanArchiveProcessor());
        bootContext.addDeploymentProcessor(Phase.POST_MODULE,Phase.POST_MODULE_WELD_PORTABLE_EXTENSIONS,new WeldPortableExtensionProcessor());
        bootContext.addDeploymentProcessor(Phase.INSTALL,Phase.INSTALL_WELD_DEPLOYMENT,new WeldDeploymentProcessor());
        bootContext.addDeploymentProcessor(Phase.INSTALL,Phase.INSTALL_WELD_BEAN_MANAGER,new WeldBeanManagerServiceProcessor());
        TCCLSingletonService singleton=new TCCLSingletonService();
        context.getServiceTarget().addService(TCCLSingletonService.SERVICE_NAME,singleton).setInitialMode(Mode.ON_DEMAND).install();
        resultHandler.handleResultComplete();
      }
    }
);
  }
 else {
    resultHandler.handleResultComplete();
  }
  final ModelNode compensatingOperation=Util.getResourceRemoveOperation(operation.require(OP_ADDR));
  return new BasicOperationResult(compensatingOperation);
}
