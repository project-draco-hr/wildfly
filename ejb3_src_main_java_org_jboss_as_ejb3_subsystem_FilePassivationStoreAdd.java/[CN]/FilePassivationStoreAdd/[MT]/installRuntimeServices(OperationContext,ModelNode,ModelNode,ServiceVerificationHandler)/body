{
  final String name=PathAddress.pathAddress(operation.get(ModelDescriptionConstants.ADDRESS)).getLastElement().getValue();
  NonClusteredBackingCacheEntryStoreSourceService<?,?,?> service=new NonClusteredBackingCacheEntryStoreSourceService<Serializable,Cacheable<Serializable>,Serializable>(name);
  NonClusteredBackingCacheEntryStoreSource<?,?,?> source=service.getValue();
  ModelNode relativeToModel=FilePassivationStoreResourceDefinition.RELATIVE_TO.resolveModelAttribute(context,operation);
  ModelNode groupsPath=FilePassivationStoreResourceDefinition.GROUPS_PATH.resolveModelAttribute(context,operation);
  ModelNode sessionsPath=FilePassivationStoreResourceDefinition.SESSIONS_PATH.resolveModelAttribute(context,operation);
  ModelNode subdirectoryCount=FilePassivationStoreResourceDefinition.SUBDIRECTORY_COUNT.resolveModelAttribute(context,operation);
  if (relativeToModel.isDefined()) {
    source.setRelativeTo(relativeToModel.asString());
  }
  if (groupsPath.isDefined()) {
    source.setGroupDirectoryName(groupsPath.asString());
  }
  if (sessionsPath.isDefined()) {
    source.setSessionDirectoryName(sessionsPath.asString());
  }
  if (subdirectoryCount.isDefined()) {
    source.setSubdirectoryCount(subdirectoryCount.asInt());
  }
  return Collections.<ServiceController<?>>singleton(this.installBackingCacheEntryStoreSourceService(service,context,model,verificationHandler));
}
