{
  final String xaDs="MyNewXaDs";
  final String xaDsJndi="java:jboss/xa-datasources/" + xaDs;
  final ModelNode address=new ModelNode();
  address.add("subsystem","datasources");
  address.add("xa-data-source",xaDs);
  address.protect();
  final ModelNode operation=new ModelNode();
  operation.get(OP).set("add");
  operation.get(OP_ADDR).set(address);
  operation.get("name").set(xaDs);
  operation.get("jndi-name").set(xaDsJndi);
  operation.get("driver-name").set("h2");
  operation.get("xa-datasource-class").set("org.jboss.as.connector.subsystems.datasources.ModifiableXaDataSource");
  operation.get("pool-name").set(xaDs + "_Pool");
  operation.get("user-name").set("sa");
  operation.get("password").set("sa");
  execute(operation);
  final ModelNode xaDatasourcePropertiesAddress=address.clone();
  xaDatasourcePropertiesAddress.add("xa-datasource-properties","URL");
  xaDatasourcePropertiesAddress.protect();
  final ModelNode xaDatasourcePropertyOperation=new ModelNode();
  xaDatasourcePropertyOperation.get(OP).set("add");
  xaDatasourcePropertyOperation.get(OP_ADDR).set(xaDatasourcePropertiesAddress);
  xaDatasourcePropertyOperation.get("value").set("jdbc:h2:mem:test");
  execute(xaDatasourcePropertyOperation);
  final ModelNode operation2=new ModelNode();
  operation2.get(OP).set("enable");
  operation2.get(OP_ADDR).set(address);
  execute(operation2);
  List<ModelNode> newList=marshalAndReparseDsResources("xa-data-source");
  Assert.assertNotNull(newList);
  final Map<String,ModelNode> parseChildren=getChildren(newList.get(1));
  Assert.assertFalse(parseChildren.isEmpty());
  Assert.assertEquals(xaDsJndi,parseChildren.get("jndi-name").asString());
  remove(address);
  ModifiableXaDataSource jxaDS=null;
  try {
    jxaDS=lookup(client,xaDsJndi,ModifiableXaDataSource.class);
    Assert.fail("found datasource after it was unbounded");
  }
 catch (  Exception e) {
  }
}
