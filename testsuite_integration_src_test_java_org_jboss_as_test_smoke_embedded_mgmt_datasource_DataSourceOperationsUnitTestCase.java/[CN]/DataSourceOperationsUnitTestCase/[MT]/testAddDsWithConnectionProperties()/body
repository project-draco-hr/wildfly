{
  final ModelNode address=new ModelNode();
  address.add("subsystem","datasources");
  address.add("data-source","MyNewDs");
  address.protect();
  final ModelNode operation=new ModelNode();
  operation.get(OP).set("add");
  operation.get(OP_ADDR).set(address);
  operation.get("name").set("MyNewDs");
  operation.get("jndi-name").set("java:jboss/datasources/MyNewDs");
  operation.get("enabled").set(true);
  operation.get("driver-name").set("h2");
  operation.get("pool-name").set("MyNewDs_Pool");
  operation.get("connection-url").set("jdbc:h2:mem:test;DB_CLOSE_DELAY=-1");
  operation.get("user-name").set("sa");
  operation.get("password").set("sa");
  final ModelNode result=getModelControllerClient().execute(operation);
  Assert.assertEquals(SUCCESS,result.get(OUTCOME).asString());
  final ModelNode connectionPropertyAddress=address.clone();
  connectionPropertyAddress.add("connection-properties","MyKey");
  connectionPropertyAddress.protect();
  final ModelNode connectionPropertyOperation=new ModelNode();
  connectionPropertyOperation.get(OP).set("add");
  connectionPropertyOperation.get(OP_ADDR).set(connectionPropertyAddress);
  connectionPropertyOperation.get("value").set("MyValue");
  final ModelNode connectionPropertyResult=getModelControllerClient().execute(connectionPropertyOperation);
  Assert.assertEquals(SUCCESS,connectionPropertyResult.get(OUTCOME).asString());
  List<ModelNode> newList=marshalAndReparseDsResources("data-source");
  Assert.assertNotNull(newList);
  final Map<String,ModelNode> parseChildren=getChildren(newList.get(1));
  Assert.assertFalse(parseChildren.isEmpty());
  Assert.assertEquals("java:jboss/datasources/MyNewDs",parseChildren.get("jndi-name").asString());
  final ModelNode compensatingOperation=new ModelNode();
  compensatingOperation.get(OP).set("remove");
  compensatingOperation.get(OP_ADDR).set(address);
  getModelControllerClient().execute(compensatingOperation);
}
