{
  KernelServices services=this.createKernelServicesBuilder().setSubsystemXml(this.getSubsystemXml()).build();
  PathAddress address=getRemoteCacheStoreAddress("maximal",ModelKeys.INVALIDATION_CACHE,"invalid");
  String key="infinispan.client.hotrod.ping_on_startup";
  String value="true";
  ModelNode operation=Operations.createMapPutOperation(address,StoreResourceDefinition.PROPERTIES.getName(),key,value);
  ModelNode result=services.executeOperation(operation);
  Assert.assertEquals(result.toString(),SUCCESS,result.get(OUTCOME).asString());
  Assert.assertFalse(result.get(RESULT).isDefined());
  operation=Operations.createMapGetOperation(address,StoreResourceDefinition.PROPERTIES.getName(),key);
  result=services.executeOperation(operation);
  Assert.assertEquals(result.toString(),SUCCESS,result.get(OUTCOME).asString());
  Assert.assertEquals(value,result.get(RESULT).asString());
  operation=Operations.createMapRemoveOperation(address,StoreResourceDefinition.PROPERTIES.getName(),key);
  result=services.executeOperation(operation);
  Assert.assertEquals(result.toString(),SUCCESS,result.get(OUTCOME).asString());
  Assert.assertFalse(result.get(RESULT).isDefined());
  operation=Operations.createMapGetOperation(address,StoreResourceDefinition.PROPERTIES.getName(),key);
  result=services.executeOperation(operation);
  Assert.assertEquals(result.toString(),SUCCESS,result.get(OUTCOME).asString());
  Assert.assertFalse(result.get(RESULT).isDefined());
  PathAddress propertyAddress=address.append(StorePropertyResourceDefinition.pathElement(key));
  operation=Util.createAddOperation(propertyAddress);
  operation.get(StorePropertyResourceDefinition.VALUE.getName()).set(value);
  result=services.executeOperation(operation);
  Assert.assertEquals(result.toString(),SUCCESS,result.get(OUTCOME).asString());
  Assert.assertFalse(result.get(RESULT).isDefined());
  operation=Operations.createMapGetOperation(address,StoreResourceDefinition.PROPERTIES.getName(),key);
  result=services.executeOperation(operation);
  Assert.assertEquals(result.toString(),SUCCESS,result.get(OUTCOME).asString());
  Assert.assertEquals(value,result.get(RESULT).asString());
  value="false";
  operation=Operations.createWriteAttributeOperation(propertyAddress,StorePropertyResourceDefinition.VALUE.getName(),new ModelNode(value));
  result=services.executeOperation(operation);
  Assert.assertEquals(result.toString(),SUCCESS,result.get(OUTCOME).asString());
  Assert.assertFalse(result.get(RESULT).isDefined());
  operation=Operations.createMapGetOperation(address,StoreResourceDefinition.PROPERTIES.getName(),key);
  result=services.executeOperation(operation);
  Assert.assertEquals(result.toString(),SUCCESS,result.get(OUTCOME).asString());
  Assert.assertEquals(value,result.get(RESULT).asString());
  operation=Operations.createReadAttributeOperation(propertyAddress,StorePropertyResourceDefinition.VALUE.getName());
  result=services.executeOperation(operation);
  Assert.assertEquals(result.toString(),SUCCESS,result.get(OUTCOME).asString());
  Assert.assertEquals(value,result.get(RESULT).asString());
  operation=Util.createRemoveOperation(propertyAddress);
  result=services.executeOperation(operation);
  Assert.assertEquals(result.toString(),SUCCESS,result.get(OUTCOME).asString());
  Assert.assertFalse(result.get(RESULT).isDefined());
  operation=Operations.createMapGetOperation(address,StoreResourceDefinition.PROPERTIES.getName(),key);
  result=services.executeOperation(operation);
  Assert.assertEquals(result.toString(),SUCCESS,result.get(OUTCOME).asString());
  Assert.assertFalse(result.get(RESULT).isDefined());
}
