{
  KernelServices services=this.createKernelServicesBuilder().setSubsystemXml(this.getSubsystemXml()).build();
  PathAddress address=getCacheAddress("capedwarf",DistributedCacheResourceDefinition.WILDCARD_PATH.getKey(),"tasks").append(IndexingResourceDefinition.PATH);
  String key="hibernate.test";
  String value="true";
  ModelNode operation=Operations.createMapPutOperation(address,IndexingResourceDefinition.Attribute.PROPERTIES,key,value);
  ModelNode result=services.executeOperation(operation);
  Assert.assertEquals(result.toString(),SUCCESS,result.get(OUTCOME).asString());
  Assert.assertFalse(result.get(RESULT).isDefined());
  operation=Operations.createMapGetOperation(address,IndexingResourceDefinition.Attribute.PROPERTIES,key);
  result=services.executeOperation(operation);
  Assert.assertEquals(result.toString(),SUCCESS,result.get(OUTCOME).asString());
  Assert.assertEquals(value,result.get(RESULT).asString());
  operation=Operations.createMapRemoveOperation(address,IndexingResourceDefinition.Attribute.PROPERTIES,key);
  result=services.executeOperation(operation);
  Assert.assertEquals(result.toString(),SUCCESS,result.get(OUTCOME).asString());
  Assert.assertFalse(result.get(RESULT).isDefined());
  operation=Operations.createMapGetOperation(address,IndexingResourceDefinition.Attribute.PROPERTIES,key);
  result=services.executeOperation(operation);
  Assert.assertEquals(result.toString(),SUCCESS,result.get(OUTCOME).asString());
  Assert.assertFalse(result.get(RESULT).isDefined());
}
