{
  final CountDownLatch latch=new CountDownLatch(1);
  ServiceListener<StandardContext> listener=new AbstractServiceListener<StandardContext>(){
    @Override public void listenerAdded(    ServiceController<? extends StandardContext> controller){
      State state=controller.getState();
      if (state == expectedState || state == State.START_FAILED)       listenerDone(controller);
    }
    @Override public void transition(    final ServiceController<? extends StandardContext> controller,    final ServiceController.Transition transition){
      if (expectedState == State.UP) {
switch (transition) {
case STARTING_to_UP:
case STARTING_to_START_FAILED:
          listenerDone(controller);
        break;
    }
  }
 else   if (expectedState == State.DOWN) {
switch (transition) {
case STOPPING_to_DOWN:
case REMOVING_to_DOWN:
case WAITING_to_DOWN:
      listenerDone(controller);
    break;
}
}
}
private void listenerDone(ServiceController<? extends StandardContext> controller){
latch.countDown();
}
}
;
controller.addListener(listener);
try {
if (latch.await(timeout,unit) == false) {
throw MESSAGES.timeoutContextActivation(controller.getName());
}
}
 catch (InterruptedException e) {
}
 finally {
controller.removeListener(listener);
}
return controller.getState() == expectedState;
}
