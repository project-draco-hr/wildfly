{
  final DotName superName=beanClass.superName();
  if (superName != null) {
    ClassInfo superClass=index.getClassByName(superName);
    if (superClass != null)     processAnnotations(superClass,index,componentDescription);
  }
  if (implementsSessionSynchronization(beanClass)) {
    componentDescription.setAfterBegin(null,"afterBegin");
    componentDescription.setAfterCompletion(null,"afterCompletion");
    componentDescription.setBeforeCompletion(null,"beforeCompletion");
    return;
  }
  final Map<DotName,List<AnnotationInstance>> classAnnotations=beanClass.annotations();
  if (classAnnotations == null)   return;
  processClassAnnotations(classAnnotations,AFTER_BEGIN,new MethodProcessor(){
    @Override public void process(    MethodInfo method){
      componentDescription.setAfterBegin(method.declaringClass().toString(),method.name().toString());
    }
  }
);
  processClassAnnotations(classAnnotations,AFTER_COMPLETION,new MethodProcessor(){
    @Override public void process(    MethodInfo method){
      componentDescription.setAfterCompletion(method.declaringClass().toString(),method.name().toString());
    }
  }
);
  processClassAnnotations(classAnnotations,BEFORE_COMPLETION,new MethodProcessor(){
    @Override public void process(    MethodInfo method){
      componentDescription.setBeforeCompletion(method.declaringClass().toString(),method.name().toString());
    }
  }
);
}
