{
  final ServiceName securityDomainsServiceName=SECURITY_DOMAINS_CAPABILITY.getCapabilityServiceName();
  final SecurityDomainsService securityDomainsService=new SecurityDomainsService();
  final ServiceTarget target=context.getServiceTarget();
  final ServiceBuilder<Map<String,SecurityDomain>> securityDomainsServiceBuilder=target.addService(securityDomainsServiceName,securityDomainsService);
  final ModelNode defaultSecurityDomainModelNode=DEFAULT_SECURITY_DOMAIN.resolveModelAttribute(context,ejbSubsystemModel);
  String defaultSecurityDomain=defaultSecurityDomainModelNode.isDefined() ? defaultSecurityDomainModelNode.asString() : null;
  if (ejbSubsystemModel.hasDefined(EJB3SubsystemModel.SECURITY_DOMAINS)) {
    this.defaultSecurityDomainDeploymentProcessor.setSecurityDomainsConfigured(true);
    final List<ModelNode> securityDomains=SECURITY_DOMAINS.resolveModelAttribute(context,ejbSubsystemModel).asList();
    for (    ModelNode current : securityDomains) {
      final String securityDomainName=SECURITY_DOMAIN_NAME.resolveModelAttribute(context,current).asString();
      final ModelNode securityDomainAliasModelNode=SECURITY_DOMAIN_ALIAS.resolveModelAttribute(context,current);
      final String securityDomainAlias=securityDomainAliasModelNode.isDefined() ? securityDomainAliasModelNode.asString() : securityDomainName;
      if ((defaultSecurityDomain != null) && (defaultSecurityDomain.equals(securityDomainName))) {
        defaultSecurityDomain=securityDomainAlias;
      }
      final String runtimeCapability=RuntimeCapability.buildDynamicCapabilityName(SECURITY_DOMAIN_CAPABILITY,securityDomainName);
      final ServiceName securityDomainServiceName=context.getCapabilityServiceName(runtimeCapability,SecurityDomain.class);
      final Injector<SecurityDomain> injector=securityDomainsService.createSecurityDomainInjector(securityDomainAlias);
      if (injector != null) {
        securityDomainsServiceBuilder.addDependency(securityDomainServiceName,SecurityDomain.class,injector);
      }
    }
  }
  this.defaultSecurityDomainDeploymentProcessor.setDefaultSecurityDomainName(defaultSecurityDomain);
  securityDomainsServiceBuilder.install();
}
