{
  final ServiceTarget serviceTarget=context.getServiceTarget();
  final TCCLEJBClientContextSelectorService tcclBasedClientContextSelector=new TCCLEJBClientContextSelectorService();
  context.getServiceTarget().addService(TCCLEJBClientContextSelectorService.TCCL_BASED_EJB_CLIENT_CONTEXT_SELECTOR_SERVICE_NAME,tcclBasedClientContextSelector).install();
  final boolean lockEJBClientContextSelector=appclient ? false : true;
  final DefaultEjbClientContextService clientContextService=new DefaultEjbClientContextService(lockEJBClientContextSelector);
  final ServiceBuilder<EJBClientContext> clientContextServiceBuilder=context.getServiceTarget().addService(DefaultEjbClientContextService.DEFAULT_SERVICE_NAME,clientContextService).addDependency(TCCLEJBClientContextSelectorService.TCCL_BASED_EJB_CLIENT_CONTEXT_SELECTOR_SERVICE_NAME,TCCLEJBClientContextSelectorService.class,clientContextService.getTCCLBasedEJBClientContextSelectorInjector());
  Services.addServerExecutorDependency(serviceTarget.addService(EJBTransactionRecoveryService.SERVICE_NAME,EJBTransactionRecoveryService.INSTANCE),EJBTransactionRecoveryService.INSTANCE.getExecutorInjector(),false).addDependency(ArjunaRecoveryManagerService.SERVICE_NAME,RecoveryManagerService.class,EJBTransactionRecoveryService.INSTANCE.getRecoveryManagerServiceInjector()).addDependency(TxnServices.JBOSS_TXN_CORE_ENVIRONMENT,CoreEnvironmentBean.class,EJBTransactionRecoveryService.INSTANCE.getCoreEnvironmentBeanInjector()).install();
  if (!appclient) {
    final String nodeName=WildFlySecurityManager.getPropertyPrivileged(ServerEnvironment.NODE_NAME,null);
    final boolean installRemoteInvocationDependencies=isEJBRemoteConnectorInstalled(context);
    final LocalEjbReceiver byValueLocalEjbReceiver=new LocalEjbReceiver(nodeName,false);
    ServiceBuilder<LocalEjbReceiver> byValueServiceBuilder=serviceTarget.addService(LocalEjbReceiver.BY_VALUE_SERVICE_NAME,byValueLocalEjbReceiver).addDependency(DeploymentRepository.SERVICE_NAME,DeploymentRepository.class,byValueLocalEjbReceiver.getDeploymentRepository()).addDependency(RegistryCollectorService.SERVICE_NAME,RegistryCollector.class,byValueLocalEjbReceiver.getClusterRegistryCollectorInjector()).setInitialMode(ServiceController.Mode.ON_DEMAND);
    if (installRemoteInvocationDependencies)     byValueServiceBuilder.addDependency(DependencyType.REQUIRED,RemotingServices.SUBSYSTEM_ENDPOINT,Endpoint.class,byValueLocalEjbReceiver.getEndpointInjector()).addDependency(DependencyType.REQUIRED,EJBRemoteConnectorService.SERVICE_NAME,EJBRemoteConnectorService.class,byValueLocalEjbReceiver.getRemoteConnectorServiceInjector());
    byValueServiceBuilder.install();
    final LocalEjbReceiver byReferenceLocalEjbReceiver=new LocalEjbReceiver(nodeName,true);
    ServiceBuilder<LocalEjbReceiver> byReferenceServiceBuilder=serviceTarget.addService(LocalEjbReceiver.BY_REFERENCE_SERVICE_NAME,byReferenceLocalEjbReceiver).addDependency(DeploymentRepository.SERVICE_NAME,DeploymentRepository.class,byReferenceLocalEjbReceiver.getDeploymentRepository()).addDependency(RegistryCollectorService.SERVICE_NAME,RegistryCollector.class,byReferenceLocalEjbReceiver.getClusterRegistryCollectorInjector()).setInitialMode(ServiceController.Mode.ON_DEMAND);
    if (installRemoteInvocationDependencies)     byReferenceServiceBuilder.addDependency(DependencyType.REQUIRED,RemotingServices.SUBSYSTEM_ENDPOINT,Endpoint.class,byReferenceLocalEjbReceiver.getEndpointInjector()).addDependency(DependencyType.REQUIRED,EJBRemoteConnectorService.SERVICE_NAME,EJBRemoteConnectorService.class,byReferenceLocalEjbReceiver.getRemoteConnectorServiceInjector());
    byReferenceServiceBuilder.install();
    EJBRemoteInvocationPassByValueWriteHandler.INSTANCE.updateDefaultLocalEJBReceiverService(context,ejbSubsystemModel);
    clientContextServiceBuilder.addDependency(LocalEjbReceiver.DEFAULT_LOCAL_EJB_RECEIVER_SERVICE_NAME,LocalEjbReceiver.class,clientContextService.getDefaultLocalEJBReceiverInjector());
  }
  clientContextServiceBuilder.install();
}
