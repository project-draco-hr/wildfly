{
  final boolean lite=model.hasDefined(LITE) && model.get(LITE).asBoolean();
  context.addStep(new AbstractDeploymentChainStep(){
    protected void execute(    DeploymentProcessorTarget processorTarget){
      processorTarget.addDeploymentProcessor(Phase.PARSE,Phase.PARSE_EJB_DEPLOYMENT,new EjbJarParsingDeploymentUnitProcessor());
      processorTarget.addDeploymentProcessor(Phase.PARSE,Phase.PARSE_SESSION_BEAN_CREATE_COMPONENT_DESCRIPTIONS,new SessionBeanComponentDescriptionFactory());
      if (!lite) {
        logger.debug("Add support for MDB");
        processorTarget.addDeploymentProcessor(Phase.PARSE,Phase.PARSE_MDB_CREATE_COMPONENT_DESCRIPTIONS,new MessageDrivenComponentDescriptionFactory());
        processorTarget.addDeploymentProcessor(Phase.POST_MODULE,Phase.POST_MODULE_EJB_ASYNCHRONOUS_MERGE,new AsynchronousMergingProcessor());
      }
      processorTarget.addDeploymentProcessor(Phase.PARSE,Phase.PARSE_ANNOTATION_EJB,new EjbAnnotationProcessor());
      processorTarget.addDeploymentProcessor(Phase.PARSE,Phase.PARSE_EJB_SESSION_BEAN_DD,new SessionBeanXmlDescriptorProcessor());
      processorTarget.addDeploymentProcessor(Phase.PARSE,Phase.PARSE_EJB_CONTEXT_BINDING,new EjbContextJndiBindingProcessor());
      processorTarget.addDeploymentProcessor(Phase.PARSE,Phase.PARSE_EJB_TIMERSERVICE_BINDING,new TimerServiceJndiBindingProcessor());
      processorTarget.addDeploymentProcessor(Phase.PARSE,Phase.PARSE_EJB_INJECTION_ANNOTATION,new EjbResourceInjectionAnnotationProcessor());
      processorTarget.addDeploymentProcessor(Phase.PARSE,Phase.PARSE_EJB_APPLICATION_EXCEPTION_ANNOTATION,new ApplicationExceptionAnnotationProcessor());
      processorTarget.addDeploymentProcessor(Phase.PARSE,Phase.PARSE_EJB_DD_INTERCEPTORS,new InterceptorClassDeploymentDescriptorProcessor());
      processorTarget.addDeploymentProcessor(Phase.PARSE,Phase.PARSE_EJB_ASSEMBLY_DESC_DD,new AssemblyDescriptorProcessor());
      processorTarget.addDeploymentProcessor(Phase.PARSE,Phase.PARSE_EJB_SECURITY_ROLE_REF_DD,new SecurityRoleRefDDProcessor());
      processorTarget.addDeploymentProcessor(Phase.PARSE,Phase.PARSE_EJB_REMOTE_CLIENT_CONTEXT,new EjbClientContextParsingProcessor());
      processorTarget.addDeploymentProcessor(Phase.DEPENDENCIES,Phase.DEPENDENCIES_EJB,new EjbDependencyDeploymentUnitProcessor());
      processorTarget.addDeploymentProcessor(Phase.POST_MODULE,Phase.POST_MODULE_EJB_BUSINESS_VIEW_ANNOTATION,new BusinessViewAnnotationProcessor());
      processorTarget.addDeploymentProcessor(Phase.POST_MODULE,Phase.POST_MODULE_EJB_IMPLICIT_NO_INTERFACE_VIEW,new ImplicitLocalViewProcessor());
      processorTarget.addDeploymentProcessor(Phase.POST_MODULE,Phase.POST_MODULE_EJB_JNDI_BINDINGS,new EjbJndiBindingsDeploymentUnitProcessor());
      processorTarget.addDeploymentProcessor(Phase.POST_MODULE,Phase.POST_MODULE_EJB_MODULE_CONFIGURATION,new EjbJarConfigurationProcessor());
      processorTarget.addDeploymentProcessor(Phase.POST_MODULE,Phase.POST_MODULE_EJB_DD_INTERCEPTORS,new DeploymentDescriptorInterceptorBindingsProcessor());
      processorTarget.addDeploymentProcessor(Phase.POST_MODULE,Phase.POST_MODULE_EJB_DD_METHOD_RESOLUTION,new DeploymentDescriptorMethodProcessor());
      processorTarget.addDeploymentProcessor(Phase.POST_MODULE,Phase.POST_MODULE_EJB_REF,new EjbRefProcessor());
      processorTarget.addDeploymentProcessor(Phase.POST_MODULE,Phase.POST_MODULE_EJB_TRANSACTION_MANAGEMENT,new TransactionManagementMergingProcessor());
      processorTarget.addDeploymentProcessor(Phase.POST_MODULE,Phase.POST_MODULE_EJB_CONCURRENCY_MANAGEMENT_MERGE,new ConcurrencyManagementMergingProcessor());
      processorTarget.addDeploymentProcessor(Phase.POST_MODULE,Phase.POST_MODULE_EJB_CONCURRENCY_MERGE,new EjbConcurrencyMergingProcessor());
      processorTarget.addDeploymentProcessor(Phase.POST_MODULE,Phase.POST_MODULE_EJB_TX_ATTR_MERGE,new TransactionAttributeMergingProcessor());
      processorTarget.addDeploymentProcessor(Phase.POST_MODULE,Phase.POST_MODULE_EJB_RUN_AS_MERGE,new RunAsMergingProcessor());
      processorTarget.addDeploymentProcessor(Phase.POST_MODULE,Phase.POST_MODULE_EJB_RESOURCE_ADAPTER_MERGE,new ResourceAdaptorMergingProcessor());
      processorTarget.addDeploymentProcessor(Phase.POST_MODULE,Phase.POST_MODULE_EJB_REMOVE_METHOD,new RemoveMethodMergingProcessor());
      processorTarget.addDeploymentProcessor(Phase.POST_MODULE,Phase.POST_MODULE_EJB_STARTUP_MERGE,new StartupMergingProcessor());
      processorTarget.addDeploymentProcessor(Phase.POST_MODULE,Phase.POST_MODULE_EJB_SECURITY_DOMAIN,new SecurityDomainMergingProcessor());
      processorTarget.addDeploymentProcessor(Phase.POST_MODULE,Phase.POST_MODULE_EJB_ROLES,new DeclareRolesMergingProcessor());
      processorTarget.addDeploymentProcessor(Phase.POST_MODULE,Phase.POST_MODULE_METHOD_PERMISSIONS,new MethodPermissionsMergingProcessor());
      processorTarget.addDeploymentProcessor(Phase.POST_MODULE,Phase.POST_MODULE_EJB_STATEFUL_TIMEOUT,new StatefulTimeoutMergingProcessor());
      processorTarget.addDeploymentProcessor(Phase.POST_MODULE,Phase.POST_MODULE_EJB_SESSION_SYNCHRONIZATION,new SessionSynchronizationMergingProcessor());
      processorTarget.addDeploymentProcessor(Phase.POST_MODULE,Phase.POST_MODULE_EJB_CLIENT_CONTEXT_SETUP,new EjbClientContextSetupProcessor());
      processorTarget.addDeploymentProcessor(Phase.INSTALL,Phase.INSTALL_RESOLVE_EJB_INJECTIONS,new EjbInjectionResolutionProcessor());
      processorTarget.addDeploymentProcessor(Phase.INSTALL,Phase.INSTALL_DEPENDS_ON_ANNOTATION,new EjbDependsOnMergingProcessor());
      processorTarget.addDeploymentProcessor(Phase.INSTALL,Phase.INSTALL_DEPLOYMENT_REPOSITORY,new DeploymentRepositoryProcessor());
      processorTarget.addDeploymentProcessor(Phase.CLEANUP,Phase.CLEANUP_EJB,new EjbCleanUpProcessor());
    }
  }
,OperationContext.Stage.RUNTIME);
  if (model.hasDefined(DEFAULT_MDB_INSTANCE_POOL)) {
    final String poolName=model.get(DEFAULT_MDB_INSTANCE_POOL).asString();
    context.addStep(new SetDefaultMDBPool.DefaultMDBPoolConfigServiceUpdateHandler(poolName),OperationContext.Stage.RUNTIME);
  }
  if (model.hasDefined(DEFAULT_SLSB_INSTANCE_POOL)) {
    final String poolName=model.get(DEFAULT_SLSB_INSTANCE_POOL).asString();
    context.addStep(new SetDefaultSLSBPool.DefaultSLSBPoolConfigServiceUpdateHandler(poolName),OperationContext.Stage.RUNTIME);
  }
  if (model.hasDefined(DEFAULT_RESOURCE_ADAPTER_NAME)) {
    final String raName=model.get(DEFAULT_RESOURCE_ADAPTER_NAME).asString();
    context.addStep(new SetDefaultResourceAdapterName.DefaultResourceAdapterNameUpdateHandler(raName),OperationContext.Stage.RUNTIME);
  }
  final ServiceTarget serviceTarget=context.getServiceTarget();
  final EJBUtilities utilities=new EJBUtilities();
  newControllers.add(serviceTarget.addService(EJBUtilities.SERVICE_NAME,utilities).addDependency(ConnectorServices.RA_REPOSISTORY_SERVICE,ResourceAdapterRepository.class,utilities.getResourceAdapterRepositoryInjector()).addDependency(ConnectorServices.IRONJACAMAR_MDR,MetadataRepository.class,utilities.getMdrInjector()).addDependency(SimpleSecurityManagerService.SERVICE_NAME,SimpleSecurityManager.class,utilities.getSecurityManagerInjector()).addDependency(TxnServices.JBOSS_TXN_TRANSACTION_MANAGER,TransactionManager.class,utilities.getTransactionManagerInjector()).addDependency(TxnServices.JBOSS_TXN_SYNCHRONIZATION_REGISTRY,TransactionSynchronizationRegistry.class,utilities.getTransactionSynchronizationRegistryInjector()).addDependency(TxnServices.JBOSS_TXN_USER_TRANSACTION,UserTransaction.class,utilities.getUserTransactionInjector()).addListener(verificationHandler).setInitialMode(ServiceController.Mode.ACTIVE).install());
  newControllers.add(context.getServiceTarget().addService(DeploymentRepository.SERVICE_NAME,new DeploymentRepository()).install());
  addRemoteInvocationServices(context,newControllers);
  if (!lite) {
    final UnboundedQueueThreadPoolService threadPoolService=new UnboundedQueueThreadPoolService(Runtime.getRuntime().availableProcessors(),TimeSpec.DEFAULT_KEEPALIVE);
    threadPoolService.getThreadFactoryInjector().inject(Executors.defaultThreadFactory());
    newControllers.add(serviceTarget.addService(org.jboss.as.ejb3.component.session.SessionBeanComponent.ASYNC_EXECUTOR_SERVICE_NAME,threadPoolService).addListener(verificationHandler).install());
  }
}
