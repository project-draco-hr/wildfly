{
  if (log.isTraceEnabled()) {
    log.tracef("The session has expired with id: %s  -- is expiration local? %s",id,localOnly);
  }
  if (expiring)   return;
synchronized (this) {
    if (!isValid)     return;
    if (manager == null)     return;
    expiring=true;
    RuntimeException listenerException=null;
    final boolean requireOwnershipLock=localCall && !localOnly;
    if (requireOwnershipLock) {
      try {
        this.acquireSessionOwnership();
      }
 catch (      TimeoutException e) {
        this.expiring=false;
        throw MESSAGES.failAcquiringOwnership(realId,e);
      }
    }
    try {
      Context context=(Context)manager.getContainer();
      Object[] lifecycleListeners=context.getApplicationSessionLifecycleListeners();
      if (notify && (lifecycleListeners != null) && notificationPolicy.isHttpSessionListenerInvocationAllowed(this.clusterStatus,cause,localCall)) {
        HttpSessionEvent event=new HttpSessionEvent(getSession());
        for (int i=0; i < lifecycleListeners.length; i++) {
          int j=(lifecycleListeners.length - 1) - i;
          if (!(lifecycleListeners[j] instanceof HttpSessionListener))           continue;
          HttpSessionListener listener=(HttpSessionListener)lifecycleListeners[j];
          try {
            fireContainerEvent(context,"beforeSessionDestroyed",listener);
            try {
              listener.sessionDestroyed(event);
            }
 catch (            RuntimeException e) {
              if (listenerException == null) {
                listenerException=e;
              }
            }
            fireContainerEvent(context,"afterSessionDestroyed",listener);
          }
 catch (          Throwable t) {
            try {
              fireContainerEvent(context,"afterSessionDestroyed",listener);
            }
 catch (            Exception e) {
            }
            manager.getContainer().getLogger().error(MESSAGES.errorSessionEvent(t));
          }
        }
      }
      if (ACTIVITY_CHECK) {
        accessCount.set(0);
      }
      if (notify) {
        fireSessionEvent(Session.SESSION_DESTROYED_EVENT,null);
      }
      String[] keys=keys();
      for (int i=0; i < keys.length; i++) {
        try {
          removeAttributeInternal(keys[i],localCall,localOnly,notify,cause);
        }
 catch (        RuntimeException e) {
          if (listenerException == null) {
            listenerException=e;
          }
        }
      }
      if (localCall) {
        removeFromManager(localOnly);
      }
      if (listenerException != null) {
        throw listenerException;
      }
    }
  finally {
      setValid(false);
      expiring=false;
      if (requireOwnershipLock) {
        this.relinquishSessionOwnership(true);
      }
    }
  }
}
