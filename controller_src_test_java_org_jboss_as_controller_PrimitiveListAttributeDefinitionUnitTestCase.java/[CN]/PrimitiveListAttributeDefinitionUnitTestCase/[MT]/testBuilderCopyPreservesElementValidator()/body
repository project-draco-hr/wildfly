{
  PrimitiveListAttributeDefinition original=PrimitiveListAttributeDefinition.Builder.of("test",ModelType.STRING).setElementValidator(new StringLengthValidator(1)).build();
  PrimitiveListAttributeDefinition copy=new PrimitiveListAttributeDefinition.Builder(original).setFlags(RESTART_ALL_SERVICES).build();
  PrimitiveListAttributeDefinition copyWithOtherValidator=new PrimitiveListAttributeDefinition.Builder(original).setFlags(RESTART_ALL_SERVICES).setElementValidator(new StringLengthValidator(Integer.MAX_VALUE)).build();
  assertFalse(original.getFlags().contains(RESTART_ALL_SERVICES));
  assertTrue(copy.getFlags().contains(RESTART_ALL_SERVICES));
  assertTrue(copyWithOtherValidator.getFlags().contains(RESTART_ALL_SERVICES));
  assertSame(original.getElementValidator(),copy.getElementValidator());
  assertNotSame(original.getElementValidator(),copyWithOtherValidator.getElementValidator());
  ModelNode operation=new ModelNode();
  operation.get("test").add("foo");
  original.validateOperation(operation);
  copy.validateOperation(operation);
  try {
    copyWithOtherValidator.validateOperation(operation);
    fail("the operation must not be validated");
  }
 catch (  OperationFailedException e) {
  }
}
