{
  if (reader.getAttributeCount() > 0) {
    throw unexpectedAttribute(reader,0);
  }
  final ModelNode address=new ModelNode().set(SUBSYSTEM,NewLoggingExtension.SUBSYSTEM_NAME);
  final ModelNode subsystem=new ModelNode();
  subsystem.set(OP).set(ADD);
  subsystem.set(OP_ADDR).set(address);
  list.add(subsystem);
  final Set<String> loggerNames=new HashSet<String>();
  final Set<String> handlerNames=new HashSet<String>();
  boolean gotRoot=false;
  while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
switch (Namespace.forUri(reader.getNamespaceURI())) {
case LOGGING_1_0:
{
        final Element element=Element.forName(reader.getLocalName());
switch (element) {
case LOGGER:
{
            parseLoggerElement(reader,address,list,loggerNames);
            break;
          }
case ROOT_LOGGER:
{
          if (gotRoot) {
            throw unexpectedElement(reader);
          }
          gotRoot=true;
          parseRootLoggerElement(reader,address,list);
          break;
        }
case CONSOLE_HANDLER:
{
        parseConsoleHandlerElement(reader,address,list,handlerNames);
        break;
      }
case FILE_HANDLER:
{
      parseFileHandlerElement(reader,address,list,handlerNames);
      break;
    }
case PERIODIC_ROTATING_FILE_HANDLER:
{
    parsePeriodicRotatingFileHandlerElement(reader,address,list,handlerNames);
    break;
  }
case SIZE_ROTATING_FILE_HANDLER:
{
  parseSizeRotatingHandlerElement(reader,address,list,handlerNames);
  break;
}
case ASYNC_HANDLER:
{
parseAsyncHandlerElement(reader,address,list,handlerNames);
break;
}
default :
{
reader.handleAny(list);
break;
}
}
break;
}
default :
{
throw unexpectedElement(reader);
}
}
}
}
