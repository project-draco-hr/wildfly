{
  context.startSubsystemElement(Namespace.CURRENT.getUriString(),false);
  ModelNode node=context.getModelNode();
  if (has(node,CONSOLE_HANDLER)) {
    for (    String name : node.get(CONSOLE_HANDLER).keys()) {
      final ModelNode child=node.get(CONSOLE_HANDLER,name);
      if (child.isDefined()) {
        writeConsoleHandler(writer,child);
      }
    }
  }
  if (has(node,PERIODIC_ROTATING_FILE_HANDLER)) {
    for (    String name : node.get(PERIODIC_ROTATING_FILE_HANDLER).keys()) {
      final ModelNode child=node.get(PERIODIC_ROTATING_FILE_HANDLER,name);
      if (child.isDefined()) {
        writePeriodicWritingFileHandler(writer,child);
      }
    }
  }
  if (has(node,ASYNC_HANDLER)) {
    for (    String name : node.get(ASYNC_HANDLER).keys()) {
      final ModelNode child=node.get(ASYNC_HANDLER,name);
      if (child.isDefined()) {
        writeAsynchWritingFileHandler(writer,child);
      }
    }
  }
  if (has(node,FILE_HANDLER)) {
    for (    String name : node.get(FILE_HANDLER).keys()) {
      final ModelNode child=node.get(FILE_HANDLER,name);
      if (child.isDefined()) {
        writeFileHandler(writer,child);
      }
    }
  }
  if (has(node,SIZE_ROTATING_FILE_HANDLER)) {
    for (    String name : node.get(SIZE_ROTATING_FILE_HANDLER).keys()) {
      final ModelNode child=node.get(SIZE_ROTATING_FILE_HANDLER,name);
      if (child.isDefined()) {
        writeSizeWritingFileHandler(writer,child);
      }
    }
  }
  if (has(node,LOGGER)) {
    for (    String name : node.get(LOGGER).keys()) {
      writeLogger(writer,name,node.get(LOGGER,name));
    }
  }
  if (has(node,ROOT_LOGGER)) {
    writeRootLogger(writer,node);
  }
  writer.writeEndElement();
}
