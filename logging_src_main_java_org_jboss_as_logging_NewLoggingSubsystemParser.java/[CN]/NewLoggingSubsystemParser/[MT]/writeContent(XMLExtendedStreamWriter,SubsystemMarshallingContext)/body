{
  context.startSubsystemElement(Namespace.CURRENT.getUriString(),false);
  ModelNode node=context.getModelNode();
  if (has(node,HANDLER)) {
    final ModelNode handlers=node.get(HANDLER);
    for (    Property handlerProp : handlers.asPropertyList()) {
      final String name=handlerProp.getName();
      final ModelNode handler=handlerProp.getValue();
      if (!handler.isDefined()) {
        continue;
      }
      final LoggerHandlerType type;
      try {
        type=Enum.valueOf(LoggerHandlerType.class,handler.get(HANDLER_TYPE).asString());
      }
 catch (      IllegalArgumentException e) {
        continue;
      }
switch (type) {
case ASYNC_HANDLER:
        writeAsynchHandler(writer,handler,name);
      break;
case CONSOLE_HANDLER:
    writeConsoleHandler(writer,handler,name);
  break;
case FILE_HANDLER:
writeFileHandler(writer,handler,name);
break;
case PERIODIC_ROTATING_FILE_HANDLER:
writePeriodicWritingFileHandler(writer,handler,name);
break;
case SIZE_ROTATING_FILE_HANDLER:
writeSizeWritingFileHandler(writer,handler,name);
break;
}
}
}
if (has(node,LOGGER)) {
for (String name : node.get(LOGGER).keys()) {
writeLogger(writer,name,node.get(LOGGER,name));
}
}
if (has(node,ROOT_LOGGER)) {
writeRootLogger(writer,node.get(ROOT_LOGGER));
}
writer.writeEndElement();
}
