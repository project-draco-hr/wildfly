{
  final DeploymentUnit deploymentUnit=phaseContext.getDeploymentUnit();
  final EEModuleDescription moduleDescription=deploymentUnit.getAttachment(Attachments.EE_MODULE_DESCRIPTION);
  final Module module=deploymentUnit.getAttachment(org.jboss.as.server.deployment.Attachments.MODULE);
  final EjbJarMetaData ejbJarMetaData=deploymentUnit.getAttachment(EjbDeploymentAttachmentKeys.EJB_JAR_METADATA);
  ServiceName defaultTimerPersistenceService=TimerPersistence.SERVICE_NAME.append(defaultTimerDataStore);
  final Map<String,ServiceName> timerPersistenceServices=new HashMap<String,ServiceName>();
  final TimerServiceRegistry timerServiceRegistry=EjbDeploymentMarker.isEjbDeployment(deploymentUnit) ? new TimerServiceRegistry() : null;
  if (ejbJarMetaData != null && ejbJarMetaData.getAssemblyDescriptor() != null) {
    List<TimerServiceMetaData> timerService=ejbJarMetaData.getAssemblyDescriptor().getAny(TimerServiceMetaData.class);
    if (timerService != null) {
      for (      TimerServiceMetaData data : timerService) {
        if (data.getEjbName().equals("*")) {
          defaultTimerPersistenceService=TimerPersistence.SERVICE_NAME.append(data.getDataStoreName());
        }
 else {
          timerPersistenceServices.put(data.getEjbName(),TimerPersistence.SERVICE_NAME.append(data.getDataStoreName()));
        }
      }
    }
  }
  final ServiceName finalDefaultTimerPersistenceService=defaultTimerPersistenceService;
  for (  final ComponentDescription component : moduleDescription.getComponentDescriptions()) {
    if (component.isTimerServiceApplicable()) {
      if (component.isTimerServiceRequired()) {
        final String deploymentName;
        if (moduleDescription.getDistinctName() == null || moduleDescription.getDistinctName().length() == 0) {
          deploymentName=moduleDescription.getApplicationName() + "." + moduleDescription.getModuleName();
        }
 else {
          deploymentName=moduleDescription.getApplicationName() + "." + moduleDescription.getModuleName()+ "."+ moduleDescription.getDistinctName();
        }
        ROOT_LOGGER.debug("Installing timer service for component " + component.getComponentName());
        component.getConfigurators().add(new ComponentConfigurator(){
          @Override public void configure(          final DeploymentPhaseContext context,          final ComponentDescription description,          final ComponentConfiguration configuration) throws DeploymentUnitProcessingException {
            final EJBComponentDescription ejbComponentDescription=(EJBComponentDescription)description;
            final ServiceName invokerServiceName=ejbComponentDescription.getServiceName().append(TimedObjectInvokerImpl.SERVICE_NAME);
            final TimedObjectInvokerImpl invoker=new TimedObjectInvokerImpl(deploymentName,module);
            context.getServiceTarget().addService(invokerServiceName,invoker).addDependency(component.getCreateServiceName(),EJBComponent.class,invoker.getEjbComponent()).install();
            final ServiceName serviceName=component.getServiceName().append(TimerServiceImpl.SERVICE_NAME);
            final TimerServiceImpl service=new TimerServiceImpl(ejbComponentDescription.getScheduleMethods(),serviceName,timerServiceRegistry);
            final ServiceBuilder<javax.ejb.TimerService> createBuilder=context.getServiceTarget().addService(serviceName,service);
            createBuilder.addDependency(TIMER_SERVICE_NAME,Timer.class,service.getTimerInjectedValue());
            createBuilder.addDependency(component.getCreateServiceName(),EJBComponent.class,service.getEjbComponentInjectedValue());
            createBuilder.addDependency(timerServiceThreadPool,ExecutorService.class,service.getExecutorServiceInjectedValue());
            if (timerPersistenceServices.containsKey(ejbComponentDescription.getEJBName())) {
              createBuilder.addDependency(timerPersistenceServices.get(ejbComponentDescription.getEJBName()),TimerPersistence.class,service.getTimerPersistence());
            }
 else {
              createBuilder.addDependency(finalDefaultTimerPersistenceService,TimerPersistence.class,service.getTimerPersistence());
            }
            createBuilder.addDependency(invokerServiceName,TimedObjectInvoker.class,service.getTimedObjectInvoker());
            createBuilder.install();
            ejbComponentDescription.setTimerService(service);
            configuration.getStartDependencies().add(new DependencyConfigurator<ComponentStartService>(){
              @Override public void configureDependency(              final ServiceBuilder<?> serviceBuilder,              final ComponentStartService service) throws DeploymentUnitProcessingException {
                serviceBuilder.addDependency(serviceName);
              }
            }
);
          }
        }
);
      }
 else {
        component.getConfigurators().add(new ComponentConfigurator(){
          @Override public void configure(          final DeploymentPhaseContext context,          final ComponentDescription description,          final ComponentConfiguration configuration) throws DeploymentUnitProcessingException {
            final EJBComponentDescription ejbComponentDescription=(EJBComponentDescription)description;
            ejbComponentDescription.setTimerService(NonFunctionalTimerService.NO_TIMER_METHODS);
          }
        }
);
      }
    }
  }
}
