{
  if (SessionSynchronization.class.isAssignableFrom(componentClass)) {
    return;
  }
  RuntimeAnnotationInformation<Boolean> afterBegin=MethodAnnotationAggregator.runtimeAnnotationInformation(componentClass,applicationClasses,deploymentReflectionIndex,AfterBegin.class);
  if (afterBegin.getMethodAnnotations().size() > 1) {
    throw EjbLogger.ROOT_LOGGER.multipleAnnotationsOnBean("@AfterBegin",description.getEJBClassName());
  }
 else   if (!afterBegin.getMethodAnnotations().isEmpty()) {
    Map.Entry<Method,List<Boolean>> entry=afterBegin.getMethodAnnotations().entrySet().iterator().next();
    description.setAfterBegin(entry.getKey());
  }
  RuntimeAnnotationInformation<Boolean> afterComp=MethodAnnotationAggregator.runtimeAnnotationInformation(componentClass,applicationClasses,deploymentReflectionIndex,AfterCompletion.class);
  if (afterComp.getMethodAnnotations().size() > 1) {
    throw EjbLogger.ROOT_LOGGER.multipleAnnotationsOnBean("@AfterCompletion",description.getEJBClassName());
  }
 else   if (!afterComp.getMethodAnnotations().isEmpty()) {
    Map.Entry<Method,List<Boolean>> entry=afterComp.getMethodAnnotations().entrySet().iterator().next();
    description.setAfterCompletion(entry.getKey());
  }
  RuntimeAnnotationInformation<Boolean> beforeComp=MethodAnnotationAggregator.runtimeAnnotationInformation(componentClass,applicationClasses,deploymentReflectionIndex,BeforeCompletion.class);
  if (beforeComp.getMethodAnnotations().size() > 1) {
    throw EjbLogger.ROOT_LOGGER.multipleAnnotationsOnBean("@BeforeCompletion",description.getEJBClassName());
  }
 else   if (!beforeComp.getMethodAnnotations().isEmpty()) {
    Map.Entry<Method,List<Boolean>> entry=beforeComp.getMethodAnnotations().entrySet().iterator().next();
    description.setBeforeCompletion(entry.getKey());
  }
}
