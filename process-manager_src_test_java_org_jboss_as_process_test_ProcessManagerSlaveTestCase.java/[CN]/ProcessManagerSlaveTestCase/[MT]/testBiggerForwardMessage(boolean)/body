{
  addProcess("ProcA",ProcessManagerSlaveProcess.class);
  TestProcessListenerStream listenerA=startTestProcessListenerAndWait("ProcA");
  addProcess("ProcB",ProcessManagerSlaveProcess.class);
  TestProcessListenerStream listenerB=startTestProcessListenerAndWait("ProcB");
  addProcess("ProcC",ProcessManagerSlaveProcess.class);
  TestProcessListenerStream listenerC=startTestProcessListenerAndWait("ProcC");
  addProcess("ProcD",ProcessManagerSlaveProcess.class);
  TestProcessListenerStream listenerD=startTestProcessListenerAndWait("ProcD");
  addProcess("ProcE",ProcessManagerSlaveProcess.class);
  TestProcessListenerStream listenerE=startTestProcessListenerAndWait("ProcE");
  addProcess("ProcF",ProcessManagerSlaveProcess.class);
  TestProcessListenerStream listenerF=startTestProcessListenerAndWait("ProcF");
  sendMessage(string,"Test","ProcA","Fwd$ProcB$Fwd$ProcC$Fwd$ProcD$Fwd$ProcE$Fwd$ProcA$Hello");
  assertEquals("Test-ProcA-Fwd$ProcB$Fwd$ProcC$Fwd$ProcD$Fwd$ProcE$Fwd$ProcA$Hello",listenerA.readMessage());
  assertEquals("ProcA-ProcB-Fwd$ProcC$Fwd$ProcD$Fwd$ProcE$Fwd$ProcA$Hello",listenerB.readMessage());
  assertEquals("ProcB-ProcC-Fwd$ProcD$Fwd$ProcE$Fwd$ProcA$Hello",listenerC.readMessage());
  assertEquals("ProcC-ProcD-Fwd$ProcE$Fwd$ProcA$Hello",listenerD.readMessage());
  assertEquals("ProcD-ProcE-Fwd$ProcA$Hello",listenerE.readMessage());
  assertEquals("ProcE-ProcA-Hello",listenerA.readMessage());
  assertNull(listenerA.readMessage(10));
  assertNull(listenerB.readMessage(10));
  assertNull(listenerC.readMessage(10));
  assertNull(listenerD.readMessage(10));
  assertNull(listenerE.readMessage(10));
  assertNull(listenerF.readMessage(10));
  stopTestProcessListener("ProcA");
  stopTestProcessListener("ProcB");
  stopTestProcessListener("ProcC");
  stopTestProcessListener("ProcD");
  stopTestProcessListener("ProcE");
  stopTestProcessListener("ProcF");
  removeProcess("ProcA");
  removeProcess("ProcB");
  removeProcess("ProcC");
  removeProcess("ProcD");
  removeProcess("ProcE");
  removeProcess("ProcF");
}
