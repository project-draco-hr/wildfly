{
  addProcess("ProcA",ProcessManagerSlaveProcess.class);
  TestProcessListenerStream listenerA=startTestProcessListenerAndWait("ProcA");
  sendMessage("Test","ProcA","Bcst$Hello1");
  assertEquals("Test-ProcA-Bcst$Hello1",listenerA.readMessage());
  assertEquals("ProcA-ProcA-Hello1",listenerA.readMessage());
  sendMessage("Test","ProcA","Add$ProcB$" + ProcessManagerSlaveProcess.class.getName());
  sendMessage("Test","ProcA","Start$ProcB");
  assertEquals("ProcA-Add$ProcB$" + ProcessManagerSlaveProcess.class.getName(),listenerA.readMessage());
  assertEquals("ProcA-Start$ProcB",listenerA.readMessage());
  TestProcessListenerStream listenerB=getTestProcessListener("ProcB",1000);
  sendMessage("Test","ProcA","Bcst$Hello2");
  assertEquals("Test-ProcA-Bcst$Hello2",listenerA.readMessage());
  assertEquals("ProcA-ProcA-Hello2",listenerA.readMessage());
  assertEquals("ProcA-ProcB-Hello2",listenerB.readMessage());
  sendMessage("Test","ProcB","Add$ProcC$" + ProcessManagerSlaveProcess.class.getName());
  sendMessage("Test","ProcB","Start$ProcC");
  assertEquals("ProcB-Add$ProcC$" + ProcessManagerSlaveProcess.class.getName(),listenerB.readMessage());
  assertEquals("ProcB-Start$ProcC",listenerB.readMessage());
  TestProcessListenerStream listenerC=getTestProcessListener("ProcC",1000);
  sendMessage("Test","ProcB","Bcst$Hello3");
  assertEquals("Test-ProcB-Bcst$Hello3",listenerB.readMessage());
  assertEquals("ProcB-ProcA-Hello3",listenerA.readMessage());
  assertEquals("ProcB-ProcB-Hello3",listenerB.readMessage());
  assertEquals("ProcB-ProcC-Hello3",listenerC.readMessage());
  ProcessExitCodeAndShutDownLatch stopLatch=getStopTestProcessListenerLatch("ProcA");
  sendMessage("Test","ProcC","Stop$ProcA");
  assertEquals("ProcC-Stop$ProcA",listenerC.readMessage());
  assertTrue(stopLatch.await(500,TimeUnit.MILLISECONDS));
  sendMessage("Test","ProcB","Bcst$Hello4");
  assertEquals("Test-ProcB-Bcst$Hello4",listenerB.readMessage());
  assertEquals("ProcB-ProcB-Hello4",listenerB.readMessage());
  assertEquals("ProcB-ProcC-Hello4",listenerC.readMessage());
  stopLatch=getStopTestProcessListenerLatch("ProcC");
  sendMessage("Test","ProcB","Stop$ProcC");
  assertEquals("ProcB-Stop$ProcC",listenerB.readMessage());
  assertTrue(stopLatch.await(500,TimeUnit.MILLISECONDS));
  sendMessage("Test","ProcB","Bcst$Hello5");
  assertEquals("Test-ProcB-Bcst$Hello5",listenerB.readMessage());
  assertEquals("ProcB-ProcB-Hello5",listenerB.readMessage());
  stopLatch=getStopTestProcessListenerLatch("ProcB");
  sendMessage("Test","ProcB","Stop$ProcB");
  assertEquals("ProcB-Stop$ProcB",listenerB.readMessage());
  assertTrue(stopLatch.await(500,TimeUnit.MILLISECONDS));
  assertFalse(getProcessNames(true).contains("ProcA"));
  assertFalse(getProcessNames(true).contains("ProcB"));
  assertFalse(getProcessNames(true).contains("ProcC"));
}
