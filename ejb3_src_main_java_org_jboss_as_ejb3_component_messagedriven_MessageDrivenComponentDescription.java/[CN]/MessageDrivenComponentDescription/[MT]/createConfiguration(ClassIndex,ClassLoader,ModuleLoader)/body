{
  final ComponentConfiguration mdbComponentConfiguration=new ComponentConfiguration(this,classIndex,moduleClassLoader,moduleLoader);
  final Class<?> messageListenerInterface;
  try {
    messageListenerInterface=Class.forName(getMessageListenerInterfaceName(),true,moduleClassLoader);
  }
 catch (  ClassNotFoundException e) {
    throw new RuntimeException(e);
  }
  mdbComponentConfiguration.setComponentCreateServiceFactory(new MessageDrivenComponentCreateServiceFactory(messageListenerInterface));
  final MessageDrivenComponentDescription mdbComponentDescription=(MessageDrivenComponentDescription)mdbComponentConfiguration.getComponentDescription();
  mdbComponentConfiguration.getCreateDependencies().add(new PoolInjectingConfigurator(mdbComponentDescription));
  mdbComponentConfiguration.getCreateDependencies().add(new ResourceAdapterInjectingConfiguration());
  mdbComponentConfiguration.getCreateDependencies().add(new DependencyConfigurator<MessageDrivenComponentCreateService>(){
    @Override public void configureDependency(    final ServiceBuilder<?> serviceBuilder,    final MessageDrivenComponentCreateService mdbComponentCreateService) throws DeploymentUnitProcessingException {
      serviceBuilder.addDependency(EJBUtilities.SERVICE_NAME,EJBUtilities.class,mdbComponentCreateService.getEJBUtilitiesInjector());
      serviceBuilder.addDependency(SuspendController.SERVICE_NAME,SuspendController.class,mdbComponentCreateService.getSuspendControllerInjectedValue());
    }
  }
);
  if (TransactionManagementType.BEAN.equals(this.getTransactionManagementType())) {
    getConfigurators().add(new ComponentConfigurator(){
      @Override public void configure(      final DeploymentPhaseContext context,      final ComponentDescription description,      final ComponentConfiguration configuration) throws DeploymentUnitProcessingException {
        configuration.addComponentInterceptor(EjbBMTInterceptor.FACTORY,InterceptorOrder.Component.BMT_TRANSACTION_INTERCEPTOR,false);
      }
    }
);
  }
 else {
    getConfigurators().add(new ComponentConfigurator(){
      @Override public void configure(      final DeploymentPhaseContext context,      final ComponentDescription description,      final ComponentConfiguration configuration) throws DeploymentUnitProcessingException {
        final EEApplicationClasses applicationClasses=context.getDeploymentUnit().getAttachment(Attachments.EE_APPLICATION_CLASSES_DESCRIPTION);
        InterceptorClassDescription interceptorConfig=ComponentDescription.mergeInterceptorConfig(configuration.getComponentClass(),applicationClasses.getClassByName(description.getComponentClassName()),description,MetadataCompleteMarker.isMetadataComplete(context.getDeploymentUnit()));
        configuration.addPostConstructInterceptor(new LifecycleCMTTxInterceptor.Factory(interceptorConfig.getPostConstruct(),true),InterceptorOrder.ComponentPostConstruct.TRANSACTION_INTERCEPTOR);
        configuration.addPreDestroyInterceptor(new LifecycleCMTTxInterceptor.Factory(interceptorConfig.getPreDestroy(),true),InterceptorOrder.ComponentPreDestroy.TRANSACTION_INTERCEPTOR);
        configuration.addTimeoutViewInterceptor(TimerCMTTxInterceptor.FACTORY,InterceptorOrder.View.CMT_TRANSACTION_INTERCEPTOR);
      }
    }
);
  }
  return mdbComponentConfiguration;
}
