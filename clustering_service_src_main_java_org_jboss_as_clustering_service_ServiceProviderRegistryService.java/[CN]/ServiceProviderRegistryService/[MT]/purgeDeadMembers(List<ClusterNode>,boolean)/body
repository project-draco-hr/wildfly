{
  Operation<List<Map.Entry<String,Set<ClusterNode>>>> operation=new Operation<List<Map.Entry<String,Set<ClusterNode>>>>(){
    @Override public List<Map.Entry<String,Set<ClusterNode>>> invoke(    Cache<String,Map<ClusterNode,Void>> cache){
      List<Map.Entry<String,Set<ClusterNode>>> entries=new ArrayList<Map.Entry<String,Set<ClusterNode>>>(cache.size());
      for (      String key : cache.keySet()) {
        Map<ClusterNode,Void> map=cache.get(key);
        if (map != null) {
          Set<ClusterNode> nodes=map.keySet();
          if (nodes.removeAll(deadNodes)) {
            entries.add(new AbstractMap.SimpleImmutableEntry<String,Set<ClusterNode>>(key,nodes));
          }
        }
      }
      return entries;
    }
  }
;
  for (  Map.Entry<String,Set<ClusterNode>> entry : this.invoke(operation)) {
    Listener listener=this.listeners.get(entry.getKey());
    if (listener != null) {
      listener.serviceProvidersChanged(entry.getValue(),merge);
    }
  }
}
