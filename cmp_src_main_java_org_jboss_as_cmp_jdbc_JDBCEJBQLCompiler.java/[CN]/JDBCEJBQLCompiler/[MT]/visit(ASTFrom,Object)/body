{
  StringBuffer buf=(StringBuffer)data;
  node.jjtGetChild(0).jjtAccept(this,buf);
  for (int i=1; i < node.jjtGetNumChildren(); i++) {
    buf.append(SQLUtil.COMMA);
    node.jjtGetChild(i).jjtAccept(this,buf);
  }
  if (!allJoinPaths.isEmpty()) {
    for (Iterator iter=allJoinPaths.iterator(); iter.hasNext(); ) {
      ASTPath path=(ASTPath)iter.next();
      for (int i=0; i < path.size(); i++) {
        declareTables(path,i,buf);
      }
    }
  }
  if (!allCollectionMemberJoinPaths.isEmpty()) {
    for (Iterator iter=allCollectionMemberJoinPaths.values().iterator(); iter.hasNext(); ) {
      ASTPath path=(ASTPath)iter.next();
      for (int i=0; i < path.size() - 1; i++) {
        declareTables(path,i,buf);
      }
    }
  }
  if (!allLeftJoinPaths.isEmpty()) {
    Set allLeftJoins=new LinkedHashSet();
    for (Iterator iter=allLeftJoinPaths.values().iterator(); iter.hasNext(); ) {
      allLeftJoins.addAll((Set)iter.next());
    }
    for (Iterator iter=allLeftJoins.iterator(); iter.hasNext(); ) {
      ASTPath path=(ASTPath)iter.next();
      for (int i=0; i < path.size() - 1; i++) {
        declareTables(path,i,buf);
      }
    }
  }
  return buf;
}
