{
  JDBCEntityBridge selectEntity=(JDBCEntityBridge)path.getEntity();
  StringBuffer columnNamesClause=new StringBuffer(200);
  addJoinPath(path);
  selectAlias=aliasManager.getAlias(path.getPath());
  SQLUtil.getColumnNamesClause(selectEntity.getPrimaryKeyFields(),selectAlias,columnNamesClause);
  if (readAhead.isOnFind()) {
    String eagerLoadGroupName=readAhead.getEagerLoadGroup();
    boolean[] loadGroupMask=selectEntity.getLoadGroupMask(eagerLoadGroupName);
    if (distinct)     SQLUtil.appendSearchableColumnNamesClause(selectEntity.getTableFields(),loadGroupMask,selectAlias,columnNamesClause);
 else     SQLUtil.appendColumnNamesClause(selectEntity.getTableFields(),loadGroupMask,selectAlias,columnNamesClause);
    try {
      leftJoinCMRList=JDBCAbstractQueryCommand.getLeftJoinCMRNodes(selectEntity,path.getPath(),readAhead.getLeftJoins(),declaredPaths);
    }
 catch (    Exception e) {
      throw new IllegalStateException(e.getMessage());
    }
    if (!leftJoinCMRList.isEmpty()) {
      onFindCMRJoin=new StringBuffer(100);
      JDBCAbstractQueryCommand.leftJoinCMRNodes(selectAlias,leftJoinCMRList,aliasManager,onFindCMRJoin);
      JDBCAbstractQueryCommand.appendLeftJoinCMRColumnNames(leftJoinCMRList,aliasManager,columnNamesClause);
    }
  }
  buf.append(columnNamesClause);
}
