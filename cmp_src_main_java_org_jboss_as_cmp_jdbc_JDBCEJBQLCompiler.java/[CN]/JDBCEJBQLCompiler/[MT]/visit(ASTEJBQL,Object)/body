{
  Node selectNode=node.jjtGetChild(0);
  Node fromNode=node.jjtGetChild(1);
  Node whereNode=null;
  Node orderByNode=null;
  Node limitNode=null;
  for (int childNode=2; childNode < node.jjtGetNumChildren(); childNode++) {
    Node temp=node.jjtGetChild(childNode);
    if (temp instanceof ASTWhere) {
      whereNode=temp;
    }
 else     if (temp instanceof ASTOrderBy) {
      orderByNode=temp;
    }
 else     if (temp instanceof ASTLimitOffset) {
      limitNode=temp;
    }
  }
  StringBuffer select=new StringBuffer();
  selectNode.jjtAccept(this,select);
  Set selectJoinPaths=new HashSet(ctermJoinPaths);
  Map selectCollectionMemberJoinPaths=new HashMap(ctermCollectionMemberJoinPaths);
  Map selectLeftJoinPaths=new HashMap(ctermLeftJoinPaths);
  StringBuffer where=new StringBuffer();
  if (whereNode != null) {
    whereNode.jjtAccept(this,where);
  }
  ctermJoinPaths=selectJoinPaths;
  ctermCollectionMemberJoinPaths=selectCollectionMemberJoinPaths;
  ctermLeftJoinPaths=selectLeftJoinPaths;
  StringBuffer orderBy=new StringBuffer();
  if (orderByNode != null) {
    orderByNode.jjtAccept(this,orderBy);
    for (int i=0; i < orderByNode.jjtGetNumChildren(); i++) {
      Node orderByPath=orderByNode.jjtGetChild(i);
      ASTPath path=(ASTPath)orderByPath.jjtGetChild(0);
      if (!isSelected(path)) {
        select.append(SQLUtil.COMMA);
        path.jjtAccept(this,select);
      }
    }
  }
  if (limitNode != null) {
    limitNode.jjtAccept(this,null);
  }
  StringBuffer from=new StringBuffer(50);
  fromNode.jjtAccept(this,from);
  StringBuffer fromThetaJoin=new StringBuffer();
  createThetaJoin(fromThetaJoin);
  if (where.length() != 0 && fromThetaJoin.length() != 0) {
    where.insert(0,'(').append(')').append(SQLUtil.AND).append(fromThetaJoin);
  }
 else   if (fromThetaJoin.length() != 0) {
    where.append(fromThetaJoin.toString());
  }
  selectDistinct=isDistinct(selectNode);
  if (lazyResultSetLoading) {
    StringBuffer buf=new StringBuffer(200);
    if (isSelectEntity()) {
      final JDBCFieldBridge[] pkFields=getSelectEntity().getPrimaryKeyFields();
      if (pkFields.length == 1) {
        buf.append('(').append(SQLUtil.SELECT).append("count(");
        if (selectDistinct) {
          buf.append(SQLUtil.DISTINCT);
        }
        SQLUtil.getColumnNamesClause(pkFields,selectAlias,buf);
        buf.append(')').append(SQLUtil.FROM);
        buf.append(from);
        if (where.length() > 0) {
          buf.append(SQLUtil.WHERE).append(where);
        }
        buf.append("), ");
        select.insert(0,buf);
      }
 else {
        buf.append('(').append(SQLUtil.SELECT).append("count(*)").append(SQLUtil.FROM).append('(').append(SQLUtil.SELECT);
        if (selectDistinct) {
          buf.append(SQLUtil.DISTINCT);
        }
        SQLUtil.getColumnNamesClause(pkFields,selectAlias,buf);
        buf.append(SQLUtil.FROM).append(from);
        if (where.length() > 0) {
          buf.append(SQLUtil.WHERE).append(where);
        }
        buf.append(") t_count), ");
        select.insert(0,buf);
      }
    }
 else     if (isSelectField()) {
      buf.append('(').append(SQLUtil.SELECT).append("count(");
      if (selectDistinct) {
        buf.append(SQLUtil.DISTINCT);
      }
      buf.append(select).append(')').append(SQLUtil.FROM);
      buf.append(from);
      if (where.length() > 0) {
        buf.append(SQLUtil.WHERE).append(where);
      }
      buf.append("), ");
      select.insert(0,buf);
    }
  }
  if (selectDistinct) {
    select.insert(0,SQLUtil.DISTINCT);
  }
  StringBuffer buf=(StringBuffer)data;
  if (selectManager.getMetaData().hasRowLocking()) {
    JDBCFunctionMappingMetaData rowLockingTemplate=typeMapping.getRowLockingTemplate();
    Object[] args=new Object[]{select,from,where.length() == 0 ? null : where,orderBy.length() == 0 ? null : orderBy};
    rowLockingTemplate.getFunctionSql(args,buf);
  }
 else {
    buf.append(SQLUtil.SELECT).append(select).append(SQLUtil.FROM).append(from);
    if (where.length() > 0) {
      buf.append(SQLUtil.WHERE).append(where);
    }
    if (orderBy.length() != 0) {
      buf.append(SQLUtil.ORDERBY).append(orderBy);
    }
  }
  if (countCompositePk) {
    buf.insert(0,"SELECT COUNT(*) FROM (").append(") t_count");
  }
  return buf;
}
