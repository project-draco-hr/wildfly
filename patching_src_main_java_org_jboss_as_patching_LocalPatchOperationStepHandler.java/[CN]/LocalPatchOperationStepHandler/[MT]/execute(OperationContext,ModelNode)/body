{
  context.acquireControllerLock();
  final PatchInfoService service=(PatchInfoService)context.getServiceRegistry(false).getRequiredService(PatchInfoService.NAME).getValue();
  final PatchInfo info=service.getPatchInfo();
  final DirectoryStructure structure=service.getStructure();
  final PatchingTaskRunner runner=new PatchingTaskRunner(info,structure);
  final int index=operation.get(ModelDescriptionConstants.INPUT_STREAM_INDEX).asInt(0);
  final InputStream is=context.getAttachmentStream(index);
  try {
    final PatchingResult result=runner.executeDirect(is);
    if (result.hasFailures()) {
      final ModelNode failureDescription=context.getFailureDescription();
      failureDescription.get("content-items").set("TODO");
      context.completeStep(OperationContext.ResultHandler.NOOP_RESULT_HANDLER);
      return;
    }
    final PatchInfo newInfo=result.getPatchInfo();
    service.setPatchInfo(info,newInfo);
    context.completeStep(new OperationContext.RollbackHandler(){
      @Override public void handleRollback(      OperationContext context,      ModelNode operation){
        result.rollback();
      }
    }
);
  }
 catch (  PatchingException e) {
    throw new OperationFailedException(e.getMessage(),e);
  }
}
