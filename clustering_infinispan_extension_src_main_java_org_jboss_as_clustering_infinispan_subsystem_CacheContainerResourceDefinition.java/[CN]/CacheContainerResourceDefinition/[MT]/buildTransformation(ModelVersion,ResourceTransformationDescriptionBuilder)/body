{
  ResourceTransformationDescriptionBuilder builder=parent.addChildResource(WILDCARD_PATH);
  if (InfinispanModel.VERSION_4_0_0.requiresTransformation(version)) {
    builder.discardChildResource(NoTransportResourceDefinition.PATH);
  }
 else {
    NoTransportResourceDefinition.buildTransformation(version,builder);
  }
  if (InfinispanModel.VERSION_3_0_0.requiresTransformation(version)) {
    OperationTransformer addAliasTransformer=new OperationTransformer(){
      @Override public ModelNode transformOperation(      ModelNode operation){
        String attributeName=Operations.getAttributeName(operation);
        if (Attribute.ALIASES.getDefinition().getName().equals(attributeName)) {
          ModelNode value=Operations.getAttributeValue(operation);
          PathAddress address=Operations.getPathAddress(operation);
          ModelNode transformedOperation=Util.createOperation(ALIAS_ADD,address);
          transformedOperation.get(ALIAS.getName()).set(value);
          return transformedOperation;
        }
        return operation;
      }
    }
;
    builder.addRawOperationTransformationOverride(ListOperations.LIST_ADD_DEFINITION.getName(),new SimpleOperationTransformer(addAliasTransformer));
    OperationTransformer removeAliasTransformer=new OperationTransformer(){
      @Override public ModelNode transformOperation(      ModelNode operation){
        String attributeName=Operations.getAttributeName(operation);
        if (Attribute.ALIASES.getDefinition().getName().equals(attributeName)) {
          ModelNode value=Operations.getAttributeValue(operation);
          PathAddress address=Operations.getPathAddress(operation);
          ModelNode transformedOperation=Util.createOperation(ALIAS_REMOVE,address);
          transformedOperation.get(ALIAS.getName()).set(value);
          return transformedOperation;
        }
        return operation;
      }
    }
;
    builder.addRawOperationTransformationOverride(ListOperations.LIST_REMOVE_DEFINITION.getName(),new SimpleOperationTransformer(removeAliasTransformer));
    builder.rejectChildResource(ThreadPoolResourceDefinition.WILDCARD_PATH);
  }
 else {
    for (    ThreadPoolResourceDefinition pool : ThreadPoolResourceDefinition.values()) {
      pool.buildTransformation(version,parent);
    }
    for (    ScheduledThreadPoolResourceDefinition pool : ScheduledThreadPoolResourceDefinition.values()) {
      pool.buildTransformation(version,parent);
    }
  }
  if (InfinispanModel.VERSION_1_5_0.requiresTransformation(version)) {
    builder.getAttributeBuilder().setDiscard(new DiscardAttributeChecker.DiscardAttributeValueChecker(false,false,new ModelNode(true)),Attribute.STATISTICS_ENABLED.getDefinition()).addRejectCheck(RejectAttributeChecker.UNDEFINED,Attribute.STATISTICS_ENABLED.getDefinition()).addRejectCheck(RejectAttributeChecker.SIMPLE_EXPRESSIONS,Attribute.STATISTICS_ENABLED.getDefinition()).addRejectCheck(new RejectAttributeChecker.SimpleRejectAttributeChecker(new ModelNode(false)),Attribute.STATISTICS_ENABLED.getDefinition());
  }
  JGroupsTransportResourceDefinition.buildTransformation(version,builder);
  DistributedCacheResourceDefinition.buildTransformation(version,builder);
  ReplicatedCacheResourceDefinition.buildTransformation(version,builder);
  InvalidationCacheResourceDefinition.buildTransformation(version,builder);
  LocalCacheResourceDefinition.buildTransformation(version,builder);
}
