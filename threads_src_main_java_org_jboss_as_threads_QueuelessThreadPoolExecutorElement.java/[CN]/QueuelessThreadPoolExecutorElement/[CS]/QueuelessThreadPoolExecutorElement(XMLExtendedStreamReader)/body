{
  super(reader);
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    if (reader.getAttributeNamespace(i) != null) {
      throw ParseUtils.unexpectedAttribute(reader,i);
    }
    final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case BLOCKING:
{
        blocking=Boolean.parseBoolean(reader.getAttributeValue(i));
        break;
      }
case NAME:
    break;
default :
  throw ParseUtils.unexpectedAttribute(reader,i);
}
}
while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
switch (Namespace.forUri(reader.getNamespaceURI())) {
case THREADS_1_0:
{
switch (Element.forName(reader.getLocalName())) {
case MAX_THREADS:
{
      setMaxThreads(readScaledCountElement(reader));
      break;
    }
case KEEPALIVE_TIME:
{
    setKeepaliveTime(readTimeSpecElement(reader));
    break;
  }
case THREAD_FACTORY:
{
  setThreadFactory(ParseUtils.readStringAttributeElement(reader,"name"));
  break;
}
case PROPERTIES:
{
setProperties(new PropertiesElement(reader));
break;
}
case HANDOFF_EXECUTOR:
{
handoffExecutor=ParseUtils.readStringAttributeElement(reader,"handoff-executor");
break;
}
default :
throw ParseUtils.unexpectedElement(reader);
}
break;
}
default :
{
throw ParseUtils.unexpectedElement(reader);
}
}
}
}
