{
  ModelNode condefModel=new ModelNode();
  for (  Entry<String,String> entry : conDef.getConfigProperties().entrySet()) {
    condefModel.get(CONFIG_PROPERTIES,entry.getKey()).set(entry.getValue());
  }
  setStringIfNotNull(condefModel,CLASS_NAME,conDef.getClassName());
  setStringIfNotNull(condefModel,JNDI_NAME,conDef.getJndiName());
  setStringIfNotNull(condefModel,POOL_NAME,conDef.getPoolName());
  setBooleanIfNotNull(condefModel,ENABLED,conDef.isEnabled() != null ? conDef.isEnabled() : true);
  setBooleanIfNotNull(condefModel,USE_JAVA_CONTEXT,conDef.isUseJavaContext() != null ? conDef.isUseJavaContext() : true);
  setBooleanIfNotNull(condefModel,USE_CCM,conDef.isUseCcm());
  if (conDef.getPool() != null) {
    setIntegerIfNotNull(condefModel,MAX_POOL_SIZE,conDef.getPool().getMaxPoolSize());
    setIntegerIfNotNull(condefModel,MIN_POOL_SIZE,conDef.getPool().getMinPoolSize());
    setBooleanIfNotNull(condefModel,POOL_PREFILL,conDef.getPool().isPrefill());
    setBooleanIfNotNull(condefModel,POOL_USE_STRICT_MIN,conDef.getPool().isUseStrictMin());
    if (conDef.getPool().getFlushStrategy() != null) {
      setStringIfNotNull(condefModel,FLUSH_STRATEGY,conDef.getPool().getFlushStrategy().name());
    }
    if (conDef.isXa()) {
      CommonXaPool xaPool=(CommonXaPool)conDef.getPool();
      setBooleanIfNotNull(condefModel,INTERLEAVING,xaPool.isInterleaving());
      setBooleanIfNotNull(condefModel,PAD_XID,xaPool.isPadXid());
      setBooleanIfNotNull(condefModel,SAME_RM_OVERRIDE,xaPool.isSameRmOverride());
      setBooleanIfNotNull(condefModel,NOTXSEPARATEPOOL,xaPool.isNoTxSeparatePool());
      setBooleanIfNotNull(condefModel,WRAP_XA_RESOURCE,xaPool.isWrapXaDataSource(),Boolean.TRUE);
    }
  }
 else {
    if (conDef.isXa()) {
      setBooleanIfNotNull(condefModel,WRAP_XA_RESOURCE,null,Boolean.TRUE);
    }
  }
  if (conDef.getTimeOut() != null) {
    setIntegerIfNotNull(condefModel,ALLOCATION_RETRY,conDef.getTimeOut().getAllocationRetry());
    setLongIfNotNull(condefModel,ALLOCATION_RETRY_WAIT_MILLIS,conDef.getTimeOut().getAllocationRetryWaitMillis());
    setLongIfNotNull(condefModel,BLOCKING_TIMEOUT_WAIT_MILLIS,conDef.getTimeOut().getBlockingTimeoutMillis());
    setLongIfNotNull(condefModel,IDLETIMEOUTMINUTES,conDef.getTimeOut().getIdleTimeoutMinutes());
    setIntegerIfNotNull(condefModel,XA_RESOURCE_TIMEOUT,conDef.getTimeOut().getXaResourceTimeout());
  }
  if (conDef.getSecurity() != null) {
    setBooleanIfNotNull(condefModel,APPLICATION,conDef.getSecurity().isApplication());
    setStringIfNotNull(condefModel,SECURITY_DOMAIN,conDef.getSecurity().getSecurityDomain());
    setStringIfNotNull(condefModel,SECURITY_DOMAIN_AND_APPLICATION,conDef.getSecurity().getSecurityDomainAndApplication());
  }
  if (conDef.getValidation() != null) {
    setLongIfNotNull(condefModel,BACKGROUNDVALIDATIONMILLIS,conDef.getValidation().getBackgroundValidationMillis());
    setBooleanIfNotNull(condefModel,BACKGROUNDVALIDATION,conDef.getValidation().isBackgroundValidation());
    setBooleanIfNotNull(condefModel,USE_FAST_FAIL,conDef.getValidation().isUseFastFail());
  }
  if (conDef.getRecovery() != null) {
    final Recovery recovery=conDef.getRecovery();
    setStringIfNotNull(condefModel,RECOVERY_USERNAME,recovery.getCredential() != null ? recovery.getCredential().getUserName() : null);
    setStringIfNotNull(condefModel,RECOVERY_PASSWORD,recovery.getCredential() != null ? recovery.getCredential().getPassword() : null);
    setStringIfNotNull(condefModel,RECOVERY_SECURITY_DOMAIN,recovery.getCredential() != null ? recovery.getCredential().getSecurityDomain() : null);
    setExtensionIfNotNull(condefModel,RECOVERLUGIN_CLASSNAME,RECOVERLUGIN_PROPERTIES,recovery.getRecoverPlugin());
    setBooleanIfNotNull(condefModel,NO_RECOVERY,recovery.getNoRecovery());
  }
  return condefModel;
}
