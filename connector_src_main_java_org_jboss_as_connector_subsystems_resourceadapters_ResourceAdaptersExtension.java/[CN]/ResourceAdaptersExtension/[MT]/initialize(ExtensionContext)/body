{
  log.debugf("Initializing ResourceAdapters Extension");
  final SubsystemRegistration registration=context.registerSubsystem(RESOURCEADAPTERS);
  registration.registerXMLElementWriter(ResourceAdapterSubsystemParser.INSTANCE);
  final ModelNodeRegistration subsystem=registration.registerSubsystemModel(SUBSYSTEM);
  subsystem.registerOperationHandler(ADD,ResourceAdaptersSubSystemAdd.INSTANCE,SUBSYSTEM_ADD_DESC,false);
  subsystem.registerOperationHandler(DESCRIBE,ResourceAdaptersSubsystemDescribeHandler.INSTANCE,ResourceAdaptersSubsystemDescribeHandler.INSTANCE,false,OperationEntry.EntryType.PRIVATE);
  final ModelNodeRegistration resourceadapter=subsystem.registerSubModel(PathElement.pathElement(RESOURCEADAPTER),RESOURCEADAPTER_DESC);
  resourceadapter.registerOperationHandler(ADD,RaAdd.INSTANCE,ADD_RESOURCEADAPTER_DESC,false);
  resourceadapter.registerOperationHandler(REMOVE,RaRemove.INSTANCE,REMOVE_RESOURCEADAPTER_DESC,false);
  for (  final String attributeName : RaConfigRWHandler.ATTRIBUTES) {
    resourceadapter.registerReadWriteAttribute(attributeName,RaConfigReadHandler.INSTANCE,RaConfigWriteHandler.INSTANCE,Storage.RUNTIME);
  }
}
