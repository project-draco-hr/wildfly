{
  final boolean rcPresent=context.readResourceFromRoot(PathAddress.EMPTY_ADDRESS).hasChild(PathElement.pathElement(ModelDescriptionConstants.SUBSYSTEM,RequestControllerExtension.SUBSYSTEM_NAME));
  context.addStep(new AbstractDeploymentChainStep(){
    public void execute(    DeploymentProcessorTarget processorTarget){
      processorTarget.addDeploymentProcessor(BatchSubsystemDefinition.NAME,Phase.STRUCTURE,Phase.STRUCTURE_REGISTER_JBOSS_ALL_BATCH,new JBossAllXmlParserRegisteringProcessor<>(BatchDeploymentDescriptorParser_1_0.ROOT_ELEMENT,BatchDeploymentDescriptorParser_1_0.ATTACHMENT_KEY,new BatchDeploymentDescriptorParser_1_0()));
      processorTarget.addDeploymentProcessor(NAME,Phase.DEPENDENCIES,Phase.DEPENDENCIES_BATCH,new BatchDependencyProcessor());
      processorTarget.addDeploymentProcessor(NAME,Phase.POST_MODULE,Phase.POST_MODULE_BATCH_ENVIRONMENT,new BatchEnvironmentProcessor(rcPresent));
      processorTarget.addDeploymentProcessor(NAME,Phase.INSTALL,Phase.INSTALL_BATCH_RESOURCES,new BatchDeploymentResourceProcessor(NAME));
    }
  }
,OperationContext.Stage.RUNTIME);
  final ModelNode defaultJobRepository=DEFAULT_JOB_REPOSITORY.resolveModelAttribute(context,model);
  final ModelNode defaultThreadPool=DEFAULT_THREAD_POOL.resolveModelAttribute(context,model);
  final boolean restartOnResume=RESTART_JOBS_ON_RESUME.resolveModelAttribute(context,model).asBoolean();
  final ServiceTarget target=context.getServiceTarget();
  final BatchConfigurationService service=new BatchConfigurationService();
  service.setRestartOnResume(restartOnResume);
  target.addService(context.getCapabilityServiceName(Capabilities.BATCH_CONFIGURATION_CAPABILITY.getName(),BatchConfiguration.class),service).addDependency(context.getCapabilityServiceName(Capabilities.JOB_REPOSITORY_CAPABILITY.getName(),defaultJobRepository.asString(),JobRepository.class),JobRepository.class,service.getJobRepositoryInjector()).addDependency(context.getCapabilityServiceName(Capabilities.THREAD_POOL_CAPABILITY.getName(),defaultThreadPool.asString(),JobExecutor.class),JobExecutor.class,service.getJobExecutorInjector()).setInitialMode(ServiceController.Mode.ON_DEMAND).install();
}
