{
  super.registerAttributes(resourceRegistration);
  final OperationStepHandler writeHandler=new ReloadRequiredWriteAttributeHandler(DEFAULT_JOB_REPOSITORY,DEFAULT_THREAD_POOL);
  resourceRegistration.registerReadWriteAttribute(DEFAULT_JOB_REPOSITORY,null,writeHandler);
  resourceRegistration.registerReadWriteAttribute(DEFAULT_THREAD_POOL,null,writeHandler);
  resourceRegistration.registerReadWriteAttribute(RESTART_JOBS_ON_RESUME,null,new AbstractWriteAttributeHandler<Boolean>(){
    @Override protected boolean applyUpdateToRuntime(    final OperationContext context,    final ModelNode operation,    final String attributeName,    final ModelNode resolvedValue,    final ModelNode currentValue,    final HandbackHolder<Boolean> handbackHolder) throws OperationFailedException {
      setValue(context,resolvedValue);
      return false;
    }
    @Override protected void revertUpdateToRuntime(    final OperationContext context,    final ModelNode operation,    final String attributeName,    final ModelNode valueToRestore,    final ModelNode valueToRevert,    final Boolean handback) throws OperationFailedException {
      setValue(context,valueToRestore);
    }
    private void setValue(    final OperationContext context,    final ModelNode value){
      final BatchConfigurationService service=(BatchConfigurationService)context.getServiceRegistry(true).getService(context.getCapabilityServiceName(Capabilities.BATCH_CONFIGURATION_CAPABILITY.getName(),BatchConfiguration.class));
      service.setRestartOnResume(value.asBoolean());
    }
  }
);
}
