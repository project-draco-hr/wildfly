{
  String serviceUrl=managementClient.getRemoteJMXURL().toString();
  try {
    RecoveryStoreProxy prs=StoreManagerProxy.getRecoveryStore(serviceUrl,null);
    assertNotNull(prs.getStoreName());
    byte[] data=new byte[10240];
    OutputObjectState state=new OutputObjectState();
    Uid uid=new Uid();
    state.packBytes(data);
    assertTrue(prs.write_committed(uid,FOO_TYPE,state));
    cli.sendLine("/subsystem=transactions/log-store=log-store:write-attribute(name=expose-all-logs,value=false)");
    cli.sendLine("/subsystem=transactions/log-store=log-store:probe()");
    cli.sendLine("cd /subsystem=transactions/log-store=log-store/transactions");
    cli.sendLine("ls");
    String ls=cli.readOutput();
    assertFalse("Unexpected uid in the log.",ls != null && ls.contains(uid.toString()));
    cli.sendLine("/subsystem=transactions/log-store=log-store:write-attribute(name=expose-all-logs,value=true)");
    cli.sendLine("/subsystem=transactions/log-store=log-store:probe()");
    cli.sendLine("cd /subsystem=transactions/log-store=log-store/transactions");
    cli.sendLine("ls");
    ls=cli.readOutput();
    assertTrue("Could not find the expected uid in the log.",ls != null && ls.contains(uid.toString()));
    cli.sendLine("/subsystem=transactions/log-store=log-store/transactions=" + escapeColons(uid.toString()) + ":delete()");
    cli.sendLine("/subsystem=transactions/log-store=log-store:probe()");
    cli.sendLine("cd /subsystem=transactions/log-store=log-store/transactions");
    cli.sendLine("ls");
    ls=cli.readOutput();
    assertFalse("Unexpected uid in the log after its remove.",ls != null && ls.contains(uid.toString()));
    cli.sendLine("/subsystem=transactions/log-store=log-store:write-attribute(name=expose-all-logs,value=false)");
  }
  finally {
    StoreManagerProxy.releaseProxy(serviceUrl);
  }
}
