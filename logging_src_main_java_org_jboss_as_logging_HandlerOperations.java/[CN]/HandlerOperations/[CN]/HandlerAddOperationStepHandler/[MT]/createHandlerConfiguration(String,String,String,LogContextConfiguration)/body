{
  final HandlerConfiguration configuration;
  if (moduleName != null) {
    final ModuleLoader moduleLoader=ModuleLoader.forClass(HandlerOperations.class);
    final ModuleIdentifier id=ModuleIdentifier.create(moduleName);
    try {
      final Class<?> actualClass=Class.forName(className,false,moduleLoader.loadModule(id).getClassLoader());
      if (Appender.class.isAssignableFrom(actualClass)) {
        final PojoConfiguration pojoConfiguration;
        if (constructionProperties == null) {
          pojoConfiguration=logContextConfiguration.addPojoConfiguration(moduleName,className,name);
        }
 else {
          pojoConfiguration=logContextConfiguration.addPojoConfiguration(moduleName,className,name,constructionProperties);
        }
        pojoConfiguration.setPropertyValueString("name",name);
        configuration=logContextConfiguration.addHandlerConfiguration("org.jboss.as.logging",Log4jAppenderHandler.class.getName(),name);
        configuration.addPostConfigurationMethod(Log4jAppenderHandler.ACTIVATE_OPTIONS_METHOD_NAME);
        configuration.setPropertyValueString("appender",name);
      }
 else {
        if (constructionProperties == null) {
          configuration=logContextConfiguration.addHandlerConfiguration(moduleName,className,name);
        }
 else {
          configuration=logContextConfiguration.addHandlerConfiguration(moduleName,className,name,constructionProperties);
        }
      }
    }
 catch (    ClassNotFoundException e) {
      throw createOperationFailure(LoggingMessages.MESSAGES.classNotFound(e,className));
    }
catch (    ModuleLoadException e) {
      throw LoggingMessages.MESSAGES.cannotLoadModule(e,moduleName,"handler",name);
    }
  }
 else {
    if (constructionProperties == null) {
      configuration=logContextConfiguration.addHandlerConfiguration(moduleName,className,name);
    }
 else {
      configuration=logContextConfiguration.addHandlerConfiguration(moduleName,className,name,constructionProperties);
    }
  }
  return configuration;
}
