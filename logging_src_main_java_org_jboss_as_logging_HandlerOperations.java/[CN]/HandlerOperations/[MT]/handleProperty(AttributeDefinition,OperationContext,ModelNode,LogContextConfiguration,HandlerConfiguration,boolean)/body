{
  if (attribute.getName().equals(ENCODING.getName())) {
    final String resolvedValue=(resolveValue ? ENCODING.resolvePropertyValue(context,model) : model.asString());
    configuration.setEncoding(resolvedValue);
  }
 else   if (attribute.getName().equals(FORMATTER.getName())) {
    final String formatterName=configuration.getName();
    final FormatterConfiguration fmtConfig;
    if (logContextConfiguration.getFormatterNames().contains(formatterName)) {
      fmtConfig=logContextConfiguration.getFormatterConfiguration(formatterName);
    }
 else {
      fmtConfig=logContextConfiguration.addFormatterConfiguration(null,PatternFormatter.class.getName(),formatterName,"pattern");
    }
    final String resolvedValue=(resolveValue ? FORMATTER.resolvePropertyValue(context,model) : model.asString());
    fmtConfig.setPropertyValueString("pattern",resolvedValue);
    configuration.setFormatterName(formatterName);
  }
 else   if (attribute.getName().equals(FILTER.getName())) {
    final ModelNode valueNode=(resolveValue ? FILTER.resolveModelAttribute(context,model) : model);
    final String resolvedValue=FilterResolver.INSTANCE.resolveValue(context,valueNode);
    configuration.setFilter(resolvedValue);
  }
 else   if (attribute.getName().equals(LEVEL.getName())) {
    final String resolvedValue=(resolveValue ? LEVEL.resolvePropertyValue(context,model) : LEVEL.resolver().resolveValue(context,model));
    configuration.setLevel(resolvedValue);
  }
 else   if (attribute.getName().equals(SUBHANDLERS.getName())) {
    final Collection<String> resolvedValue=(resolveValue ? SUBHANDLERS.resolvePropertyValue(context,model) : SUBHANDLERS.resolver().resolveValue(context,model));
    if (resolvedValue.contains(configuration.getName())) {
      throw createOperationFailure(LoggingMessages.MESSAGES.cannotAddHandlerToSelf(configuration.getName()));
    }
    configuration.setHandlerNames(resolvedValue);
  }
 else   if (attribute.getName().equals(HANDLER_NAME.getName())) {
  }
 else   if (attribute.getName().equals(PROPERTIES.getName())) {
    if (model.hasDefined(PROPERTIES.getName())) {
      for (      Property property : PROPERTIES.resolveModelAttribute(context,model).asPropertyList()) {
        configuration.setPropertyValueString(property.getName(),property.getValue().asString());
      }
    }
  }
 else {
    if (attribute instanceof ConfigurationProperty<?>) {
      ((ConfigurationProperty<?>)attribute).setPropertyValue(context,model,configuration);
    }
 else {
      LoggingLogger.ROOT_LOGGER.invalidPropertyAttribute(attribute.getName());
    }
  }
}
