{
  if (attribute.getName().equals(ENABLED.getName())) {
    final boolean value=((resolveValue ? ENABLED.resolveModelAttribute(context,model).asBoolean() : model.asBoolean()));
    if (value) {
      enableHandler(logContextConfiguration,configuration.getName());
    }
 else {
      disableHandler(logContextConfiguration,configuration.getName());
    }
  }
 else   if (attribute.getName().equals(ENCODING.getName())) {
    final String resolvedValue=(resolveValue ? ENCODING.resolvePropertyValue(context,model) : model.isDefined() ? model.asString() : null);
    configuration.setEncoding(resolvedValue);
  }
 else   if (attribute.getName().equals(FORMATTER.getName())) {
    final String formatterName=configuration.getName();
    if (model.hasDefined(NAMED_FORMATTER.getName())) {
      final ModelNode valueNode=(resolveValue ? NAMED_FORMATTER.resolveModelAttribute(context,model) : model);
      final String resolvedValue=(valueNode.isDefined() ? valueNode.asString() : null);
      configuration.setFormatterName(resolvedValue);
      if (!formatterName.equals(resolvedValue) && logContextConfiguration.getFormatterNames().contains(formatterName)) {
        logContextConfiguration.removeFormatterConfiguration(formatterName);
      }
    }
 else {
      final FormatterConfiguration fmtConfig;
      if (logContextConfiguration.getFormatterNames().contains(formatterName)) {
        fmtConfig=logContextConfiguration.getFormatterConfiguration(formatterName);
      }
 else {
        fmtConfig=logContextConfiguration.addFormatterConfiguration(null,PatternFormatter.class.getName(),formatterName,PATTERN.getPropertyName());
      }
      final String resolvedValue=(resolveValue ? FORMATTER.resolvePropertyValue(context,model) : model.asString());
      fmtConfig.setPropertyValueString(PATTERN.getPropertyName(),resolvedValue);
      configuration.setFormatterName(formatterName);
    }
  }
 else   if (attribute.getName().equals(NAMED_FORMATTER.getName())) {
    final String formatterName=configuration.getName();
    final ModelNode valueNode=(resolveValue ? NAMED_FORMATTER.resolveModelAttribute(context,model) : model);
    if (valueNode.isDefined()) {
      final String resolvedValue=valueNode.asString();
      configuration.setFormatterName(resolvedValue);
      if (!formatterName.equals(resolvedValue) && logContextConfiguration.getFormatterNames().contains(formatterName)) {
        logContextConfiguration.removeFormatterConfiguration(formatterName);
      }
    }
 else {
      if (!formatterName.equals(configuration.getFormatterName())) {
        final FormatterConfiguration fmtConfig;
        if (logContextConfiguration.getFormatterNames().contains(formatterName)) {
          fmtConfig=logContextConfiguration.getFormatterConfiguration(formatterName);
        }
 else {
          fmtConfig=logContextConfiguration.addFormatterConfiguration(null,PatternFormatter.class.getName(),formatterName,PATTERN.getPropertyName());
        }
        fmtConfig.setPropertyValueString(PATTERN.getPropertyName(),FORMATTER.resolvePropertyValue(context,model));
        configuration.setFormatterName(formatterName);
      }
    }
  }
 else   if (attribute.getName().equals(FILTER_SPEC.getName())) {
    final ModelNode valueNode=(resolveValue ? FILTER_SPEC.resolveModelAttribute(context,model) : model);
    final String resolvedValue=(valueNode.isDefined() ? valueNode.asString() : null);
    configuration.setFilter(resolvedValue);
  }
 else   if (attribute.getName().equals(LEVEL.getName())) {
    final String resolvedValue=(resolveValue ? LEVEL.resolvePropertyValue(context,model) : LEVEL.resolver().resolveValue(context,model));
    configuration.setLevel(resolvedValue);
  }
 else   if (attribute.getName().equals(SUBHANDLERS.getName())) {
    final Collection<String> resolvedValue=(resolveValue ? SUBHANDLERS.resolvePropertyValue(context,model) : SUBHANDLERS.resolver().resolveValue(context,model));
    if (resolvedValue.contains(configuration.getName())) {
      throw createOperationFailure(LoggingMessages.MESSAGES.cannotAddHandlerToSelf(configuration.getName()));
    }
    configuration.setHandlerNames(resolvedValue);
  }
 else   if (attribute.getName().equals(HANDLER_NAME.getName())) {
  }
 else   if (attribute.getName().equals(PROPERTIES.getName())) {
    final PropertyConfigurable propertyConfigurable;
    final PojoConfiguration pojoConfiguration=logContextConfiguration.getPojoConfiguration(configuration.getName());
    if (pojoConfiguration == null) {
      propertyConfigurable=configuration;
    }
 else {
      propertyConfigurable=pojoConfiguration;
    }
    if (model.hasDefined(PROPERTIES.getName())) {
      final ModelNode resolvedValue=(resolveValue ? PROPERTIES.resolveModelAttribute(context,model) : model);
      for (      Property property : resolvedValue.asPropertyList()) {
        propertyConfigurable.setPropertyValueString(property.getName(),property.getValue().asString());
      }
    }
  }
 else {
    if (attribute instanceof ConfigurationProperty) {
      @SuppressWarnings("unchecked") final ConfigurationProperty<String> configurationProperty=(ConfigurationProperty<String>)attribute;
      if (resolveValue) {
        configurationProperty.setPropertyValue(context,model,configuration);
      }
 else {
        final ModelNodeResolver<String> resolver=configurationProperty.resolver();
        final String resolvedValue=(resolver == null ? model.asString() : resolver.resolveValue(context,model));
        configuration.setPropertyValueString(configurationProperty.getPropertyName(),(resolvedValue == null ? null : resolvedValue));
      }
    }
 else {
      LoggingLogger.ROOT_LOGGER.invalidPropertyAttribute(attribute.getName());
    }
  }
}
