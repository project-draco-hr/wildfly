{
  final ModelNode model=context.readModel(PathAddress.EMPTY_ADDRESS);
  context.removeResource(PathAddress.EMPTY_ADDRESS);
  if (context.getType() == OperationContext.Type.SERVER) {
    context.addStep(new OperationStepHandler(){
      public void execute(      OperationContext context,      ModelNode operation) throws OperationFailedException {
        String deploymentUnitName=null;
        boolean enabled=model.hasDefined(ENABLED) ? model.get(ENABLED).asBoolean() : true;
        if (enabled) {
          final ModelNode opAddr=operation.get(OP_ADDR);
          final PathAddress address=PathAddress.pathAddress(opAddr);
          final String name=address.getLastElement().getValue();
          deploymentUnitName=model.hasDefined(RUNTIME_NAME) ? model.get(RUNTIME_NAME).asString() : name;
          final ServiceName deploymentUnitServiceName=Services.deploymentUnitName(deploymentUnitName);
          context.removeService(deploymentUnitServiceName);
          context.removeService(deploymentUnitServiceName.append("contents"));
        }
        if (context.completeStep() == OperationContext.ResultAction.ROLLBACK) {
          recoverServices(context,operation,model);
          if (enabled && context.hasFailureDescription()) {
            log.infof("Undeploy of deployment \"%s\" was rolled back with failure message %s",deploymentUnitName,context.getFailureDescription().asString());
          }
 else           if (enabled) {
            log.infof("Undeploy of deployment \"%s\" was rolled back with no failure message",deploymentUnitName);
          }
        }
 else         if (enabled) {
          log.infof("Undeployed \"%s\"",deploymentUnitName);
        }
      }
    }
,OperationContext.Stage.RUNTIME);
  }
  context.completeStep();
}
