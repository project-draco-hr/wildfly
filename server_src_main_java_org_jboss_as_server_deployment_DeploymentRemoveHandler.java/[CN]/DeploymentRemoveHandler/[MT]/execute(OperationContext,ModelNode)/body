{
  final String name=PathAddress.pathAddress(operation.require(OP_ADDR)).getLastElement().getValue();
  Resource resource=context.readResource(PathAddress.EMPTY_ADDRESS);
  final List<byte[]> removedHashes=DeploymentUtils.getDeploymentHash(resource);
  final Resource deployment=context.removeResource(PathAddress.EMPTY_ADDRESS);
  final ImmutableManagementResourceRegistration registration=context.getResourceRegistration();
  final ManagementResourceRegistration mutableRegistration=context.getResourceRegistrationForUpdate();
  final ModelNode model=deployment.getModel();
  if (context.isNormalServer()) {
    context.addStep(new OperationStepHandler(){
      public void execute(      OperationContext context,      ModelNode operation) throws OperationFailedException {
        final String deploymentUnitName;
        final boolean enabled=ENABLED.resolveModelAttribute(context,model).asBoolean();
        if (enabled) {
          deploymentUnitName=RUNTIME_NAME.resolveModelAttribute(context,model).asString();
          final ServiceName deploymentUnitServiceName=Services.deploymentUnitName(deploymentUnitName);
          context.removeService(deploymentUnitServiceName);
          context.removeService(deploymentUnitServiceName.append("contents"));
        }
 else {
          deploymentUnitName=null;
        }
        final ModelNode contentNode=CONTENT_ALL.resolveModelAttribute(context,model);
        context.completeStep(new OperationContext.ResultHandler(){
          @Override public void handleResult(          OperationContext.ResultAction resultAction,          OperationContext context,          ModelNode operation){
            final ModelNode opAddr=operation.get(OP_ADDR);
            PathAddress address=PathAddress.pathAddress(opAddr);
            final String managementName=address.getLastElement().getValue();
            if (resultAction == OperationContext.ResultAction.ROLLBACK) {
              if (enabled) {
                recoverServices(context,model,deployment,deploymentUnitName,contentNode,registration,mutableRegistration,vaultReader);
              }
              if (enabled && context.hasFailureDescription()) {
                ServerLogger.ROOT_LOGGER.undeploymentRolledBack(deploymentUnitName,context.getFailureDescription().asString());
              }
 else               if (enabled) {
                ServerLogger.ROOT_LOGGER.undeploymentRolledBackWithNoMessage(deploymentUnitName);
              }
            }
 else {
              if (enabled) {
                ServerLogger.ROOT_LOGGER.deploymentUndeployed(managementName,deploymentUnitName);
              }
              for (              byte[] hash : removedHashes) {
                try {
                  contentRepository.removeContent(hash,name);
                }
 catch (                Exception e) {
                  ServerLogger.DEPLOYMENT_LOGGER.failedToRemoveDeploymentContent(e,HashUtil.bytesToHexString(hash));
                }
              }
            }
          }
        }
);
      }
    }
,OperationContext.Stage.RUNTIME);
  }
  context.stepCompleted();
}
