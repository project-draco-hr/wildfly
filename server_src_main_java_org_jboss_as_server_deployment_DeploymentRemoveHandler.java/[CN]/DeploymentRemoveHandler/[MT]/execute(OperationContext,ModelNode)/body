{
  Resource resource=context.readResource(PathAddress.EMPTY_ADDRESS);
  final List<byte[]> removedHashes=DeploymentUtils.getDeploymentHash(resource);
  final Resource deployment=context.removeResource(PathAddress.EMPTY_ADDRESS);
  final ImmutableManagementResourceRegistration registration=context.getResourceRegistration();
  final ManagementResourceRegistration mutableRegistration=context.getResourceRegistrationForUpdate();
  final ModelNode model=deployment.getModel();
  if (context.isNormalServer()) {
    context.addStep(new OperationStepHandler(){
      public void execute(      OperationContext context,      ModelNode operation) throws OperationFailedException {
        String deploymentUnitName=null;
        boolean enabled=ENABLED.resolveModelAttribute(context,model).asBoolean();
        if (enabled) {
          deploymentUnitName=RUNTIME_NAME.resolveModelAttribute(context,model).asString();
          final ServiceName deploymentUnitServiceName=Services.deploymentUnitName(deploymentUnitName);
          context.removeService(deploymentUnitServiceName);
          context.removeService(deploymentUnitServiceName.append("contents"));
        }
        if (context.completeStep() == OperationContext.ResultAction.ROLLBACK) {
          if (enabled) {
            recoverServices(context,model,deployment,registration,mutableRegistration,vaultReader);
          }
          if (enabled && context.hasFailureDescription()) {
            ServerLogger.ROOT_LOGGER.undeploymentRolledBack(deploymentUnitName,context.getFailureDescription().asString());
          }
 else           if (enabled) {
            ServerLogger.ROOT_LOGGER.undeploymentRolledBackWithNoMessage(deploymentUnitName);
          }
        }
 else {
          if (enabled) {
            ServerLogger.ROOT_LOGGER.deploymentUndeployed(deploymentUnitName);
          }
          for (          byte[] hash : removedHashes) {
            try {
              contentRepository.removeContent(hash);
            }
 catch (            Exception e) {
              ServerLogger.DEPLOYMENT_LOGGER.failedToRemoveDeploymentContent(e,HashUtil.bytesToHexString(hash));
            }
          }
        }
      }
    }
,OperationContext.Stage.RUNTIME);
  }
  context.stepCompleted();
}
