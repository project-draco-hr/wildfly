{
  File file=new File(logDir,"test-file.log");
  ModelNode op=createAddCoreHandlerReferenceOperation("test-file");
  executeForResult(op);
  List<ModelNode> records=readFile(file,2);
  List<ModelNode> ops=checkCoreBootRecordHeader(records.get(1),1,false,false,true);
  checkOpsEqual(op,ops.get(0));
  Assert.assertTrue(server.queryNames(OBJECT_NAME,null).contains(OBJECT_NAME));
  records=readFile(file,3);
  checkJmxBootRecordHeader(records.get(2),true,new String[]{ObjectName.class.getName(),QueryExp.class.getName()},new String[]{OBJECT_NAME.toString(),null});
  op=Util.createOperation(ModelDescriptionConstants.READ_RESOURCE_DESCRIPTION_OPERATION,PathAddress.EMPTY_ADDRESS);
  executeForResult(op);
  records=readFile(file,4);
  ops=checkCoreBootRecordHeader(records.get(3),1,true,false,true);
  checkOpsEqual(op,ops.get(0));
  op=createCoreAuditLogWriteAttributeOperation(ModelDescriptionConstants.ENABLED,false);
  executeForResult(op);
  records=readFile(file,5);
  ops=checkCoreBootRecordHeader(records.get(4),1,false,false,true);
  checkOpsEqual(op,ops.get(0));
  op=Util.createOperation(ModelDescriptionConstants.READ_RESOURCE_DESCRIPTION_OPERATION,PathAddress.EMPTY_ADDRESS);
  executeForResult(op);
  readFile(file,5);
  Assert.assertTrue(server.queryNames(OBJECT_NAME,null).contains(OBJECT_NAME));
  records=readFile(file,6);
  checkJmxBootRecordHeader(records.get(5),true,new String[]{ObjectName.class.getName(),QueryExp.class.getName()},new String[]{OBJECT_NAME.toString(),null});
  op=createCoreAuditLogWriteAttributeOperation(ModelDescriptionConstants.ENABLED,true);
  executeForResult(op);
  records=readFile(file,7);
  ops=checkCoreBootRecordHeader(records.get(6),1,false,false,true);
  checkOpsEqual(op,ops.get(0));
  Assert.assertTrue(server.queryNames(OBJECT_NAME,null).contains(OBJECT_NAME));
  records=readFile(file,8);
  checkJmxBootRecordHeader(records.get(7),true,new String[]{ObjectName.class.getName(),QueryExp.class.getName()},new String[]{OBJECT_NAME.toString(),null});
  op=Util.createOperation(ModelDescriptionConstants.READ_RESOURCE_DESCRIPTION_OPERATION,PathAddress.EMPTY_ADDRESS);
  executeForResult(op);
  records=readFile(file,9);
  ops=checkCoreBootRecordHeader(records.get(8),1,true,false,true);
  checkOpsEqual(op,ops.get(0));
  op=createJMXAuditLogWriteAttributeOperation(ModelDescriptionConstants.ENABLED,false);
  executeForResult(op);
  records=readFile(file,10);
  ops=checkCoreBootRecordHeader(records.get(9),1,false,false,true);
  checkOpsEqual(op,ops.get(0));
  op=Util.createOperation(ModelDescriptionConstants.READ_RESOURCE_DESCRIPTION_OPERATION,PathAddress.EMPTY_ADDRESS);
  executeForResult(op);
  records=readFile(file,11);
  ops=checkCoreBootRecordHeader(records.get(10),1,true,false,true);
  checkOpsEqual(op,ops.get(0));
  Assert.assertTrue(server.queryNames(OBJECT_NAME,null).contains(OBJECT_NAME));
  records=readFile(file,11);
  op=createJMXAuditLogWriteAttributeOperation(ModelDescriptionConstants.ENABLED,true);
  executeForResult(op);
  records=readFile(file,12);
  ops=checkCoreBootRecordHeader(records.get(11),1,false,false,true);
  checkOpsEqual(op,ops.get(0));
  Assert.assertTrue(server.queryNames(OBJECT_NAME,null).contains(OBJECT_NAME));
  records=readFile(file,13);
  checkJmxBootRecordHeader(records.get(12),true,new String[]{ObjectName.class.getName(),QueryExp.class.getName()},new String[]{OBJECT_NAME.toString(),null});
  op=Util.createOperation(ModelDescriptionConstants.READ_RESOURCE_DESCRIPTION_OPERATION,PathAddress.EMPTY_ADDRESS);
  executeForResult(op);
  records=readFile(file,14);
  ops=checkCoreBootRecordHeader(records.get(13),1,true,false,true);
  checkOpsEqual(op,ops.get(0));
}
