{
  final Hashtable props=new Hashtable();
  props.put(Context.URL_PKG_PREFIXES,"org.jboss.ejb.client.naming");
  final Context jndiContext=new InitialContext(props);
  final RemoteViewInvoker remoteViewInvokingBean=(RemoteViewInvoker)jndiContext.lookup("ejb:" + APP_NAME + "/"+ MODULE_NAME+ "/"+ DISTINCT_NAME+ "/"+ RemoteViewInvokingBean.class.getSimpleName()+ "!"+ RemoteViewInvoker.class.getName()+ "?stateful");
  final Map<String,Object> interceptorData=remoteViewInvokingBean.getDataSetupForInvocationContext();
  final Map<String,Object> valuesSeenOnServerSide=remoteViewInvokingBean.invokeRemoteViewAndGetInvocationData(interceptorData.keySet().toArray(new String[interceptorData.size()]));
  Assert.assertNotNull("Server side context data was expected to be non-null",valuesSeenOnServerSide);
  Assert.assertFalse("Server side context data was expected to be non-empty",valuesSeenOnServerSide.isEmpty());
  for (  final Map.Entry<String,Object> clientInterceptorDataEntry : interceptorData.entrySet()) {
    final String key=clientInterceptorDataEntry.getKey();
    final Object expectedValue=clientInterceptorDataEntry.getValue();
    Assert.assertEquals("Unexpected value in bean, on server side, via InvocationContext.getContextData() for key " + key,expectedValue,valuesSeenOnServerSide.get(key));
  }
}
