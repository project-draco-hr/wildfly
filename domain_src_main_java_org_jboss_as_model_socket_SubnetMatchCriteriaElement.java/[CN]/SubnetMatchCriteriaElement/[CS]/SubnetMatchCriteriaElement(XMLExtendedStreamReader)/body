{
  super(Element.SUBNET_MATCH);
  String value=null;
  byte[] net=null;
  int mask=-1;
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    value=reader.getAttributeValue(i);
    if (reader.getAttributeNamespace(i) != null) {
      throw ParseUtils.unexpectedAttribute(reader,i);
    }
 else {
      final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case VALUE:
{
          String[] split=null;
          try {
            split=value.split("/");
            if (split.length != 2) {
              throw new XMLStreamException("Invalid 'value' " + value + " -- must be of the form address/mask",reader.getLocation());
            }
            InetAddress addr=InetAddress.getByName(split[1]);
            net=addr.getAddress();
            mask=Integer.valueOf(split[1]);
          }
 catch (          NumberFormatException e) {
            throw new XMLStreamException("Invalid mask " + split[1] + " ("+ e.getLocalizedMessage()+ ")",reader.getLocation(),e);
          }
catch (          UnknownHostException e) {
            throw new XMLStreamException("Invalid address " + split[1] + " ("+ e.getLocalizedMessage()+ ")",reader.getLocation(),e);
          }
          break;
        }
default :
      throw ParseUtils.unexpectedAttribute(reader,i);
  }
}
}
if (net == null) {
throw ParseUtils.missingRequired(reader,Collections.singleton(Attribute.VALUE));
}
this.value=value;
this.network=net;
this.mask=mask;
ParseUtils.requireNoContent(reader);
setInterfaceCriteria(new SubnetMatchInterfaceCriteria(this.network,this.mask));
}
