{
  String type=require(reader,XMLAttribute.TYPE);
  PathAddress address=stackAddress.append(TransportResourceDefinition.pathElement(type));
  ModelNode operation=Util.createAddOperation(address);
  operations.put(address,operation);
  for (int i=0; i < reader.getAttributeCount(); i++) {
    XMLAttribute attribute=XMLAttribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case SHARED:
{
        readAttribute(reader,i,operation,TransportResourceDefinition.Attribute.SHARED);
        break;
      }
case DIAGNOSTICS_SOCKET_BINDING:
{
      readAttribute(reader,i,operation,TransportResourceDefinition.Attribute.DIAGNOSTICS_SOCKET_BINDING);
      break;
    }
case DEFAULT_EXECUTOR:
{
    readAttribute(reader,i,operation,TransportResourceDefinition.ThreadingAttribute.DEFAULT_EXECUTOR);
    break;
  }
case OOB_EXECUTOR:
{
  readAttribute(reader,i,operation,TransportResourceDefinition.ThreadingAttribute.OOB_EXECUTOR);
  break;
}
case TIMER_EXECUTOR:
{
readAttribute(reader,i,operation,TransportResourceDefinition.ThreadingAttribute.TIMER_EXECUTOR);
break;
}
case THREAD_FACTORY:
{
readAttribute(reader,i,operation,TransportResourceDefinition.ThreadingAttribute.THREAD_FACTORY);
break;
}
case SITE:
{
if (this.schema.since(JGroupsSchema.VERSION_1_1)) {
readAttribute(reader,i,operation,TransportResourceDefinition.Attribute.SITE);
break;
}
}
case RACK:
{
if (this.schema.since(JGroupsSchema.VERSION_1_1)) {
readAttribute(reader,i,operation,TransportResourceDefinition.Attribute.RACK);
break;
}
}
case MACHINE:
{
if (this.schema.since(JGroupsSchema.VERSION_1_1)) {
readAttribute(reader,i,operation,TransportResourceDefinition.Attribute.MACHINE);
break;
}
}
default :
{
this.parseProtocolAttribute(reader,i,operation);
}
}
}
while (reader.hasNext() && (reader.nextTag() != XMLStreamConstants.END_ELEMENT)) {
this.parseProtocolElement(reader,address,operations);
}
}
