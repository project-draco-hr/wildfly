{
  final LocalServerStatefulRemote sfsbOnLocalServer=InitialContext.doLookup("java:module/" + StatefulBeanA.class.getSimpleName() + "!"+ LocalServerStatefulRemote.class.getName());
  final int initialCount=sfsbOnLocalServer.getCountByInvokingOnRemoteServerBean();
  Assert.assertEquals("Unexpected initial count from stateful bean",0,initialCount);
  final String message="foo";
  final String firstEcho=sfsbOnLocalServer.getEchoByInvokingOnRemoteServerBean(message);
  Assert.assertEquals("Unexpected echo from remote server SLSB",message,firstEcho);
  final StatefulRemoteOnOtherServer sfsbOnRemoteServer=sfsbOnLocalServer.getSFSBCreatedWithScopedEJBClientContext();
  Assert.assertNotNull("Stateful bean proxy returned by local server SFSB was null",sfsbOnRemoteServer);
  try {
    sfsbOnRemoteServer.getCount();
    Assert.fail("Invocation on SFSB proxy returned by the local server SFSB was expected to fail");
  }
 catch (  IllegalStateException ise) {
    logger.debug("Invocation on returned SFSB failed with expected exception",ise);
  }
  final StatelessRemoteOnOtherServer slsbOnRemoteServer=sfsbOnLocalServer.getSLSBCreatedWithScopedEJBClientContext();
  Assert.assertNotNull("Stateless bean proxy returned by local server SFSB was null",slsbOnRemoteServer);
  try {
    slsbOnRemoteServer.echo("foo-bar");
    Assert.fail("Invocation on SLSB proxy returned by the local server SFSB was expected to fail");
  }
 catch (  IllegalStateException ise) {
    logger.debug("Invocation on returned SLSB failed with expected exception",ise);
  }
}
