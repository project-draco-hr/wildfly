{
  boolean result=false;
  String authMethod=config.getAuthMethod();
  Principal principal=request.getUserPrincipal();
  String ssoId=(String)request.getNote(Constants.REQ_SSOID_NOTE);
  if (principal != null) {
    WebLogger.WEB_SECURITY_LOGGER.tracef("Already authenticated '%s'",principal.getName());
    if (ssoId != null)     associate(ssoId,request.getSessionInternal(true));
    return (true);
  }
  if ("BASIC".equalsIgnoreCase(authMethod) || "FORM".equalsIgnoreCase(authMethod)) {
    if (ssoId != null) {
      WebLogger.WEB_SECURITY_LOGGER.tracef("SSO Id %s set; attempting reauthentication",ssoId);
      if (reauthenticateFromSSO(ssoId,request))       return true;
    }
  }
  GenericMessageInfo messageInfo=new GenericMessageInfo();
  messageInfo.setRequestMessage(request);
  messageInfo.setResponseMessage(request.getResponse());
  messageInfo.getMap().put("CACHE",String.valueOf(cache));
  messageInfo.getMap().put("javax.security.auth.message.MessagePolicy.isMandatory","true");
  WebJASPICallbackHandler cbh=new WebJASPICallbackHandler();
  ServerAuthenticationManager sam=getServerAuthenticationManager();
  String appContext=request.getLocalName() + " " + request.getContextPath();
  Subject clientSubject=new Subject();
  if (sam != null) {
    result=sam.isValid(messageInfo,clientSubject,messageLayer,appContext,cbh);
  }
  if (result) {
    PasswordValidationCallback pvc=cbh.getPasswordValidationCallback();
    CallerPrincipalCallback cpc=cbh.getCallerPrincipalCallback();
    Principal clientPrincipal=cpc.getPrincipal();
    if (clientPrincipal == null) {
      clientPrincipal=new SimplePrincipal(cpc.getName());
    }
    if (!(clientPrincipal instanceof JBossGenericPrincipal))     clientPrincipal=this.buildJBossPrincipal(clientSubject,clientPrincipal);
    this.register(request,response,clientPrincipal,authMethod,pvc.getUsername(),new String(pvc.getPassword()));
    if (this.secureResponse)     sam.secureResponse(messageInfo,new Subject(),messageLayer,appContext,cbh);
  }
  return result;
}
