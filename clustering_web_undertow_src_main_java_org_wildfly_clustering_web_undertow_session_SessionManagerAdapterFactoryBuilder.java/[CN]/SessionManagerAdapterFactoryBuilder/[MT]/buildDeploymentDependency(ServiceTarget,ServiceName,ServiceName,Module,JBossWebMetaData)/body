{
  ServiceName clusteringServiceName=name.append("clustering");
  this.builder.buildDeploymentDependency(target,clusteringServiceName,deploymentServiceName,module,metaData).setInitialMode(ServiceController.Mode.ON_DEMAND).install();
  final InjectedValue<org.wildfly.clustering.web.session.SessionManagerFactory> factory=new InjectedValue<>();
  Value<SessionManagerFactory> factoryValue=new Value<SessionManagerFactory>(){
    @Override public SessionManagerFactory getValue() throws IllegalStateException, IllegalArgumentException {
      return new SessionManagerAdapterFactory(factory.getValue());
    }
  }
;
  return target.addService(name,new ValueService<>(factoryValue)).addDependency(clusteringServiceName,org.wildfly.clustering.web.session.SessionManagerFactory.class,factory).setInitialMode(ServiceController.Mode.ON_DEMAND);
}
