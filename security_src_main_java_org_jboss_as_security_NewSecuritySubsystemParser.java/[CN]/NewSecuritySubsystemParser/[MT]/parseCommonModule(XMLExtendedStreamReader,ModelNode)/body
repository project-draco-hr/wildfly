{
  EnumSet<Attribute> required=EnumSet.of(Attribute.CODE,Attribute.FLAG);
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    requireNoNamespaceAttribute(reader,i);
    final String value=reader.getAttributeValue(i);
    final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
    required.remove(attribute);
switch (attribute) {
case CODE:
{
        node.get(Attribute.CODE.getLocalName()).set(value);
        break;
      }
case FLAG:
{
      node.get(Attribute.FLAG.getLocalName()).set(value);
      break;
    }
default :
  throw unexpectedAttribute(reader,i);
}
}
if (required.size() > 0) {
throw missingRequired(reader,required);
}
while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
switch (Namespace.forUri(reader.getNamespaceURI())) {
case SECURITY_1_0:
{
  final Element element=Element.forName(reader.getLocalName());
switch (element) {
case MODULE_OPTION:
{
      parseModuleOption(reader,node.get(MODULE_OPTIONS));
      break;
    }
default :
{
    throw unexpectedElement(reader);
  }
}
break;
}
default :
{
throw unexpectedElement(reader);
}
}
}
}
