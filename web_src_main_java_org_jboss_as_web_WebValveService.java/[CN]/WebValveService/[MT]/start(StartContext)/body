{
  Valve valve=null;
  try {
    final ModuleLoader moduleLoader=Module.getBootModuleLoader();
    final ModuleIdentifier id=ModuleIdentifier.create(module);
    Module valveModule=moduleLoader.loadModule(id);
    Class classz=valveModule.getClassLoader().loadClass(classname);
    if (!AuthenticatorBase.class.isAssignableFrom(classz)) {
      valve=(Valve)valveModule.getClassLoader().loadClass(classname).newInstance();
      if (params != null) {
        for (        final Property param : params.asPropertyList()) {
          IntrospectionUtils.setProperty(valve,param.getName(),param.getValue().asString());
        }
      }
      webServer.getValue().addValve(valve);
      this.valve=valve;
    }
 else {
      Hashtable<String,String> properties=new Hashtable<String,String>();
      if (params != null) {
        for (        final Property param : params.asPropertyList()) {
          properties.put(param.getName(),param.getValue().asString());
        }
      }
      webServer.getValue().addValve(this.name,classz,properties);
    }
    valve=WebValve.createValve(classname,valveModule.getClassLoader());
  }
 catch (  Exception e) {
    throw new StartException(e);
  }
}
