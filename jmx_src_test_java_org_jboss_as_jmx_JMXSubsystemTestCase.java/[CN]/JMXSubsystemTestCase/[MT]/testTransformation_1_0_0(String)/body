{
  String subsystemXml="<subsystem xmlns=\"" + Namespace.CURRENT.getUriString() + "\">"+ "   <expose-resolved-model domain-name=\"jboss.RESOLVED\"/>"+ "   <expose-expression-model domain-name=\"jboss.EXPRESSION\"/>"+ "   <remoting-connector />"+ "</subsystem>";
  ModelVersion oldVersion=ModelVersion.create(1,0,0);
  KernelServicesBuilder builder=createKernelServicesBuilder(new BaseAdditionalInitalization()).setSubsystemXml(subsystemXml);
  builder.createLegacyKernelServicesBuilder(null,oldVersion).setExtensionClassName(JMXExtension.class.getName()).addMavenResourceURL(mavenGAV);
  KernelServices mainServices=builder.build();
  KernelServices legacyServices=mainServices.getLegacyServices(oldVersion);
  Assert.assertNotNull(legacyServices);
  ModelNode legacyModel=checkSubsystemModelTransformation(mainServices,oldVersion);
  check_1_0_0_Model(legacyModel.get(SUBSYSTEM,JMXExtension.SUBSYSTEM_NAME),true,true);
  ModelNode op=createOperation(WRITE_ATTRIBUTE_OPERATION,CommonAttributes.EXPOSE_MODEL,CommonAttributes.EXPRESSION);
  op.get(NAME).set(CommonAttributes.DOMAIN_NAME);
  op.get(VALUE).set("discarded");
  TransformedOperation transformedOp=mainServices.transformOperation(oldVersion,op);
  Assert.assertNull(transformedOp.getTransformedOperation());
  op=createOperation(READ_ATTRIBUTE_OPERATION,CommonAttributes.EXPOSE_MODEL,CommonAttributes.EXPRESSION);
  op.get(NAME).set(CommonAttributes.DOMAIN_NAME);
  transformedOp=mainServices.transformOperation(oldVersion,op);
  Assert.assertNull(transformedOp.getTransformedOperation());
  op=createOperation(ADD,CommonAttributes.EXPOSE_MODEL,CommonAttributes.EXPRESSION);
  transformedOp=mainServices.transformOperation(oldVersion,op);
  Assert.assertNull(transformedOp.getTransformedOperation());
  op=createOperation(REMOVE,CommonAttributes.EXPOSE_MODEL,CommonAttributes.EXPRESSION);
  transformedOp=mainServices.transformOperation(oldVersion,op);
  Assert.assertNull(transformedOp.getTransformedOperation());
  op=createOperation(WRITE_ATTRIBUTE_OPERATION,CommonAttributes.EXPOSE_MODEL,CommonAttributes.RESOLVED);
  op.get(NAME).set(CommonAttributes.DOMAIN_NAME);
  op.get(VALUE).set("discarded");
  final TransformedOperation operation=mainServices.transformOperation(oldVersion,op);
  Assert.assertNotNull(operation);
  Assert.assertNull(operation.getTransformedOperation());
  op=createOperation(READ_ATTRIBUTE_OPERATION,CommonAttributes.EXPOSE_MODEL,CommonAttributes.RESOLVED);
  op.get(NAME).set(CommonAttributes.DOMAIN_NAME);
  transformedOp=mainServices.transformOperation(oldVersion,op);
  Assert.assertNull(transformedOp.getTransformedOperation());
  Assert.assertEquals(CommonAttributes.DEFAULT_RESOLVED_DOMAIN,mainServices.executeOperation(oldVersion,transformedOp).get(RESULT).asString());
  op=createOperation(REMOVE,CommonAttributes.EXPOSE_MODEL,CommonAttributes.RESOLVED);
  transformedOp=mainServices.transformOperation(oldVersion,op);
  checkOutcome(mainServices.executeOperation(op));
  checkOutcome(mainServices.executeOperation(oldVersion,transformedOp));
  legacyModel=checkSubsystemModelTransformation(mainServices,oldVersion);
  check_1_0_0_Model(legacyModel.get(SUBSYSTEM,getMainSubsystemName()),true,false);
  op=createOperation(ADD,CommonAttributes.EXPOSE_MODEL,CommonAttributes.RESOLVED);
  transformedOp=mainServices.transformOperation(oldVersion,op);
  checkOutcome(mainServices.executeOperation(op));
  checkOutcome(mainServices.executeOperation(oldVersion,transformedOp));
  legacyModel=checkSubsystemModelTransformation(mainServices,oldVersion);
  check_1_0_0_Model(legacyModel.get(SUBSYSTEM,getMainSubsystemName()),true,true);
}
