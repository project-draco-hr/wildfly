{
  String subsystemXml="<subsystem xmlns=\"" + Namespace.CURRENT.getUriString() + "\">"+ "   <expose-resolved-model domain-name=\"jboss.RESOLVED\" proper-property-format=\"false\"/>"+ "   <expose-expression-model domain-name=\"jboss.EXPRESSION\"/>"+ "   <audit-log log-boot=\"true\" log-read-only=\"false\" enabled=\"false\">"+ "       <handlers>"+ "               <handler name=\"test\"/>"+ "       </handlers>"+ "   </audit-log>"+ "</subsystem>";
  AdditionalInitialization additionalInit=new BaseAdditionalInitalization(){
    @Override protected void initializeExtraSubystemsAndModel(    ExtensionRegistry extensionRegistry,    Resource rootResource,    ManagementResourceRegistration rootRegistration){
      super.initializeExtraSubystemsAndModel(extensionRegistry,rootResource,rootRegistration);
      Resource auditLog=Resource.Factory.create();
      rootResource.registerChild(AccessAuditResourceDefinition.PATH_ELEMENT,auditLog);
      Resource testHandler=Resource.Factory.create();
      testHandler.getModel().setEmptyObject();
      auditLog.registerChild(PathElement.pathElement(FILE_HANDLER,"test"),testHandler);
    }
  }
;
  KernelServices servicesA=createKernelServicesBuilder(additionalInit).setSubsystemXml(subsystemXml).build();
  Assert.assertTrue(servicesA.isSuccessfulBoot());
  ModelNode modelA=servicesA.readWholeModel();
  Assert.assertTrue(modelA.get(SUBSYSTEM,"jmx",CommonAttributes.EXPOSE_MODEL,CommonAttributes.RESOLVED).hasDefined(CommonAttributes.PROPER_PROPERTY_FORMAT));
  Assert.assertFalse(modelA.get(SUBSYSTEM,"jmx",CommonAttributes.EXPOSE_MODEL,CommonAttributes.RESOLVED,CommonAttributes.PROPER_PROPERTY_FORMAT).asBoolean());
  String marshalled=servicesA.getPersistedSubsystemXml();
  servicesA.shutdown();
  Assert.assertTrue(marshalled.contains(Namespace.CURRENT.getUriString()));
  compareXml(null,subsystemXml,marshalled,true);
  KernelServices servicesB=createKernelServicesBuilder(additionalInit).setSubsystemXml(marshalled).build();
  ModelNode modelB=servicesB.readWholeModel();
  super.compare(modelA,modelB);
}
