{
  final ResourceTransformationDescriptionBuilder builder=TransformationDescriptionBuilder.Factory.createInstance(PATH);
  builder.addChildRedirection(CHILD,NEW_CHILD);
  TransformationDescription.Tools.register(builder.build(),transformersSubRegistration);
  final Resource resource=transformResource();
  Assert.assertNotNull(resource);
  final Resource toto=resource.getChild(PATH);
  Assert.assertNotNull(toto);
  Set<String> types=toto.getChildTypes();
  Assert.assertEquals(1,types.size());
  Assert.assertTrue(types.contains(NEW_CHILD.getKey()));
  Set<ResourceEntry> entries=toto.getChildren(NEW_CHILD.getKey());
  Assert.assertEquals(2,entries.size());
  PathElement[] expectedChildren=new PathElement[]{PathElement.pathElement(NEW_CHILD.getKey(),CHILD_ONE.getValue()),PathElement.pathElement(NEW_CHILD.getKey(),CHILD_TWO.getValue())};
  for (  PathElement expectedChild : expectedChildren) {
    boolean found=false;
    for (    ResourceEntry entry : entries) {
      if (entry.getPathElement().equals(expectedChild)) {
        found=true;
        break;
      }
    }
    Assert.assertTrue(found);
  }
}
