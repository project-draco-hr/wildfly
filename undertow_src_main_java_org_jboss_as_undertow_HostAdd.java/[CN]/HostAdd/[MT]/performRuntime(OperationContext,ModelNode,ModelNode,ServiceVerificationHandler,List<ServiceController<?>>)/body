{
  final PathAddress address=PathAddress.pathAddress(operation.get(OP_ADDR));
  final PathAddress parent=address.subAddress(0,address.size() - 1);
  final String name=address.getLastElement().getValue();
  List<String> aliases=HostDefinition.ALIAS.unwrap(context,model);
  final String serverName=parent.getLastElement().getValue();
  final ServiceName virtualHostServiceName=UndertowService.virtualHostName(serverName,name);
  Host service=new Host(name,aliases == null ? new LinkedList<String>() : aliases);
  final ServiceBuilder<Host> builder=context.getServiceTarget().addService(virtualHostServiceName,service).addDependency(UndertowService.SERVER.append(serverName),Server.class,service.getServer()).addDependency(UndertowService.UNDERTOW,UndertowService.class,service.getUndertowService()).addAliases(WebHost.SERVICE_NAME.append(name));
  if (aliases != null) {
    for (    String alias : aliases) {
      builder.addAliases(WebHost.SERVICE_NAME.append(alias));
    }
  }
  builder.setInitialMode(ServiceController.Mode.ACTIVE);
  final ServiceController<Host> serviceController=builder.install();
  if (newControllers != null) {
    newControllers.add(serviceController);
  }
}
