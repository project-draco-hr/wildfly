{
  writer.writeStartElement(element.getLocalName());
  writer.writeAttribute(Attribute.TYPE.getLocalName(),protocol.get(ModelKeys.TYPE).asString());
  this.writeOptionalAttribute(writer,Attribute.SOCKET_BINDING,protocol,ModelKeys.SOCKET_BINDING);
  this.writeOptionalAttribute(writer,Attribute.DIAGNOSTICS_SOCKET_BINDING,protocol,ModelKeys.DIAGNOSTICS_SOCKET_BINDING);
  this.writeOptionalAttribute(writer,Attribute.DEFAULT_EXECUTOR,protocol,ModelKeys.DEFAULT_EXECUTOR);
  this.writeOptionalAttribute(writer,Attribute.OOB_EXECUTOR,protocol,ModelKeys.OOB_EXECUTOR);
  this.writeOptionalAttribute(writer,Attribute.TIMER_EXECUTOR,protocol,ModelKeys.TIMER_EXECUTOR);
  this.writeOptionalAttribute(writer,Attribute.THREAD_FACTORY,protocol,ModelKeys.THREAD_FACTORY);
  if (protocol.has(ModelKeys.PROPERTY)) {
    for (    Property property : protocol.get(ModelKeys.PROPERTY).asPropertyList()) {
      writer.writeStartElement(Element.PROPERTY.getLocalName());
      writer.writeAttribute(Attribute.NAME.getLocalName(),property.getName());
      writer.writeCharacters(property.getValue().asString());
      writer.writeEndElement();
    }
  }
  writer.writeEndElement();
}
