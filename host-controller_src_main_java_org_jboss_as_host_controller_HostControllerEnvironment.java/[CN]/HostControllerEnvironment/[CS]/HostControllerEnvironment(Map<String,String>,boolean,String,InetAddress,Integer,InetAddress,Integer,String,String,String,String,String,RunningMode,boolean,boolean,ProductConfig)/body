{
  if (hostSystemProperties == null) {
    throw MESSAGES.nullVar("hostSystemProperties");
  }
  this.hostSystemProperties=Collections.unmodifiableMap(hostSystemProperties);
  if (modulePath == null) {
    throw MESSAGES.nullVar("modulePath");
  }
  if (processControllerAddress == null) {
    throw MESSAGES.nullVar("processControllerAddress");
  }
  if (processControllerPort == null) {
    throw MESSAGES.nullVar("processControllerPort");
  }
  if (hostControllerAddress == null) {
    throw MESSAGES.nullVar("hostControllerAddress");
  }
  if (hostControllerPort == null) {
    throw MESSAGES.nullVar("hostControllerPort");
  }
  this.processControllerPort=processControllerPort;
  this.processControllerAddress=processControllerAddress;
  this.hostControllerAddress=hostControllerAddress;
  this.hostControllerPort=hostControllerPort;
  this.isRestart=isRestart;
  this.modulePath=modulePath;
  this.initialRunningMode=initialRunningMode;
  this.runningModeControl=new HostRunningModeControl(initialRunningMode,RestartMode.SERVERS);
  String hostName=hostSystemProperties.get(HOST_NAME);
  String qualifiedHostName=hostSystemProperties.get(QUALIFIED_HOST_NAME);
  if (qualifiedHostName == null) {
    Map<String,String> env=null;
    qualifiedHostName=hostName;
    if (qualifiedHostName == null) {
      env=WildFlySecurityManager.getSystemEnvironmentPrivileged();
      qualifiedHostName=env.get("HOSTNAME");
    }
    if (qualifiedHostName == null) {
      qualifiedHostName=env.get("COMPUTERNAME");
    }
    if (qualifiedHostName == null) {
      try {
        qualifiedHostName=NetworkUtils.canonize(InetAddress.getLocalHost().getHostName());
      }
 catch (      UnknownHostException e) {
        qualifiedHostName=null;
      }
    }
    if (qualifiedHostName != null && qualifiedHostName.matches("^\\d+\\.\\d+\\.\\d+\\.\\d+$|:")) {
      qualifiedHostName=null;
    }
    if (qualifiedHostName == null) {
      qualifiedHostName="unknown-host.unknown-domain";
    }
 else {
      qualifiedHostName=qualifiedHostName.trim().toLowerCase();
    }
  }
  this.qualifiedHostName=qualifiedHostName;
  this.hostControllerName=qualifiedHostName;
  if (hostName == null) {
    final int idx=qualifiedHostName.indexOf('.');
    hostName=idx == -1 ? qualifiedHostName : qualifiedHostName.substring(0,idx);
  }
  this.hostName=hostName;
  File home=getFileFromProperty(HOME_DIR);
  this.homeDir=home;
  if (homeDir == null) {
    throw MESSAGES.missingHomeDirConfiguration(HOME_DIR);
  }
  if (!homeDir.exists() || !homeDir.isDirectory()) {
    throw MESSAGES.homeDirectoryDoesNotExist(homeDir);
  }
  WildFlySecurityManager.setPropertyPrivileged(HOME_DIR,this.homeDir.getAbsolutePath());
  @SuppressWarnings("deprecation") File tmp=getFileFromProperty(MODULES_DIR);
  if (tmp == null) {
    tmp=new File(this.homeDir,"modules");
  }
 else   if (!tmp.exists() || !tmp.isDirectory()) {
    throw MESSAGES.modulesDirectoryDoesNotExist(tmp);
  }
  this.modulesDir=tmp;
  @SuppressWarnings("deprecation") String deprecatedModDir=MODULES_DIR;
  WildFlySecurityManager.setPropertyPrivileged(deprecatedModDir,this.modulesDir.getAbsolutePath());
  tmp=getFileFromProperty(DOMAIN_BASE_DIR);
  if (tmp == null) {
    tmp=new File(this.homeDir,"domain");
  }
  if (!tmp.exists()) {
    throw MESSAGES.domainBaseDirectoryDoesNotExist(tmp);
  }
 else   if (!tmp.isDirectory()) {
    throw MESSAGES.domainBaseDirectoryIsNotADirectory(tmp);
  }
  this.domainBaseDir=tmp;
  WildFlySecurityManager.setPropertyPrivileged(DOMAIN_BASE_DIR,this.domainBaseDir.getAbsolutePath());
  tmp=getFileFromProperty(DOMAIN_CONFIG_DIR);
  if (tmp == null) {
    tmp=new File(this.domainBaseDir,"configuration");
  }
  if (!tmp.exists() || !tmp.isDirectory()) {
    throw MESSAGES.configDirectoryDoesNotExist(tmp);
  }
  this.domainConfigurationDir=tmp;
  WildFlySecurityManager.setPropertyPrivileged(DOMAIN_CONFIG_DIR,this.domainConfigurationDir.getAbsolutePath());
  final String defaultHostConfig=WildFlySecurityManager.getPropertyPrivileged(JBOSS_HOST_DEFAULT_CONFIG,"host.xml");
  hostConfigurationFile=new ConfigurationFile(domainConfigurationDir,defaultHostConfig,initialHostConfig == null ? hostConfig : initialHostConfig,initialHostConfig == null);
  final String defaultDomainConfig=WildFlySecurityManager.getPropertyPrivileged(JBOSS_DOMAIN_DEFAULT_CONFIG,"domain.xml");
  domainConfigurationFile=new ConfigurationFile(domainConfigurationDir,defaultDomainConfig,initialDomainConfig == null ? domainConfig : initialDomainConfig,initialDomainConfig == null);
  tmp=getFileFromProperty(DOMAIN_DATA_DIR);
  if (tmp == null) {
    tmp=new File(this.domainBaseDir,"data");
  }
  this.domainDataDir=tmp;
  if (domainDataDir.exists()) {
    if (!domainDataDir.isDirectory()) {
      throw MESSAGES.domainDataDirectoryIsNotDirectory(domainDataDir);
    }
  }
 else {
    if (!domainDataDir.mkdirs()) {
      throw MESSAGES.couldNotCreateDomainDataDirectory(domainDataDir);
    }
  }
  WildFlySecurityManager.setPropertyPrivileged(DOMAIN_DATA_DIR,this.domainDataDir.getAbsolutePath());
  @SuppressWarnings("deprecation") String deprecatedDepDir=DOMAIN_DEPLOYMENT_DIR;
  tmp=getFileFromProperty(DOMAIN_CONTENT_DIR);
  if (tmp == null) {
    tmp=getFileFromProperty(deprecatedDepDir);
  }
  if (tmp == null) {
    tmp=new File(this.domainDataDir,"content");
  }
  this.domainContentDir=tmp;
  if (domainContentDir.exists()) {
    if (!domainContentDir.isDirectory()) {
      throw MESSAGES.domainContentDirectoryIsNotDirectory(domainContentDir);
    }
  }
 else   if (!domainContentDir.mkdirs()) {
    throw MESSAGES.couldNotCreateDomainContentDirectory(domainContentDir);
  }
  WildFlySecurityManager.setPropertyPrivileged(DOMAIN_CONTENT_DIR,this.domainContentDir.getAbsolutePath());
  WildFlySecurityManager.setPropertyPrivileged(deprecatedDepDir,this.domainContentDir.getAbsolutePath());
  tmp=getFileFromProperty(DOMAIN_LOG_DIR);
  if (tmp == null) {
    tmp=new File(this.domainBaseDir,"log");
  }
  if (tmp.exists()) {
    if (!tmp.isDirectory()) {
      throw MESSAGES.logDirectoryIsNotADirectory(tmp);
    }
  }
 else   if (!tmp.mkdirs()) {
    throw MESSAGES.couldNotCreateLogDirectory(tmp);
  }
  this.domainLogDir=tmp;
  WildFlySecurityManager.setPropertyPrivileged(DOMAIN_LOG_DIR,this.domainLogDir.getAbsolutePath());
  tmp=getFileFromProperty(DOMAIN_SERVERS_DIR);
  if (tmp == null) {
    tmp=new File(this.domainBaseDir,"servers");
  }
  if (tmp.exists()) {
    if (!tmp.isDirectory()) {
      throw MESSAGES.serversDirectoryIsNotADirectory(tmp);
    }
  }
 else   if (!tmp.mkdirs()) {
    throw MESSAGES.couldNotCreateServersDirectory(tmp);
  }
  this.domainServersDir=tmp;
  WildFlySecurityManager.setPropertyPrivileged(DOMAIN_SERVERS_DIR,this.domainServersDir.getAbsolutePath());
  tmp=getFileFromProperty(DOMAIN_TEMP_DIR);
  if (tmp == null) {
    tmp=new File(this.domainBaseDir,"tmp");
  }
  if (tmp.exists()) {
    if (!tmp.isDirectory()) {
      throw MESSAGES.domainTempDirectoryIsNotADirectory(tmp);
    }
  }
 else   if (!tmp.mkdirs()) {
    throw MESSAGES.couldNotCreateDomainTempDirectory(tmp);
  }
  this.domainTempDir=tmp;
  WildFlySecurityManager.setPropertyPrivileged(DOMAIN_TEMP_DIR,this.domainTempDir.getAbsolutePath());
  if (defaultJVM != null) {
    if (defaultJVM.equals("java")) {
      defaultJVM=DefaultJvmUtils.findJavaExecutable(DefaultJvmUtils.getCurrentJvmHome());
    }
    this.defaultJVM=new File(defaultJVM);
  }
 else {
    this.defaultJVM=null;
  }
  this.backupDomainFiles=backupDomainFiles;
  this.useCachedDc=useCachedDc;
  this.productConfig=productConfig;
}
