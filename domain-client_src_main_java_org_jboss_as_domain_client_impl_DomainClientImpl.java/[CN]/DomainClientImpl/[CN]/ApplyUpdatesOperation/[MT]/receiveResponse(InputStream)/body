{
  final Unmarshaller unmarshaller=getUnmarshaller();
  unmarshaller.start(createByteInput(input));
  expectHeader(unmarshaller,DomainClientProtocol.PARAM_APPLY_UPDATES_RESULT_COUNT);
  final int updateCount=unmarshaller.readInt();
  final List<DomainUpdateResult<?>> results=new ArrayList<DomainUpdateResult<?>>(updateCount);
  for (int i=0; i < updateCount; i++) {
    expectHeader(unmarshaller,DomainClientProtocol.PARAM_APPLY_UPDATE_RESULT);
    byte resultCode=unmarshaller.readByte();
    if (resultCode == (byte)DomainClientProtocol.PARAM_APPLY_UPDATE_RESULT_EXCEPTION) {
      final UpdateFailedException updateFailedException=unmarshal(unmarshaller,UpdateFailedException.class);
      results.add(new DomainUpdateResult<Object>(updateFailedException));
    }
 else     if (resultCode == (byte)DomainClientProtocol.APPLY_UPDATE_RESULT_DOMAIN_MODEL_SUCCESS) {
      Map<String,UpdateFailedException> hostFailures=null;
      Map<ServerIdentity,Object> serverResults=null;
      Map<ServerIdentity,Throwable> serverFailures=null;
      expectHeader(unmarshaller,DomainClientProtocol.PARAM_APPLY_UPDATE_RESULT_HOST_FAILURE_COUNT);
      int hostFailureCount=unmarshaller.readInt();
      if (hostFailureCount > 0) {
        hostFailures=new HashMap<String,UpdateFailedException>();
        for (int j=0; j < hostFailureCount; j++) {
          expectHeader(unmarshaller,DomainClientProtocol.PARAM_HOST_NAME);
          final String hostName=unmarshaller.readUTF();
          expectHeader(unmarshaller,DomainClientProtocol.PARAM_APPLY_UPDATE_RESULT_EXCEPTION);
          final UpdateFailedException updateFailedException=unmarshal(unmarshaller,UpdateFailedException.class);
          hostFailures.put(hostName,updateFailedException);
        }
      }
      expectHeader(unmarshaller,DomainClientProtocol.PARAM_APPLY_UPDATE_RESULT_SERVER_FAILURE_COUNT);
      int serverFailureCount=unmarshaller.readInt();
      if (serverFailureCount > 0) {
        serverFailures=new HashMap<ServerIdentity,Throwable>();
        for (int j=0; j < hostFailureCount; j++) {
          expectHeader(unmarshaller,DomainClientProtocol.PARAM_HOST_NAME);
          final String hostName=unmarshaller.readUTF();
          expectHeader(unmarshaller,DomainClientProtocol.PARAM_SERVER_GROUP_NAME);
          final String serverGroupName=unmarshaller.readUTF();
          expectHeader(unmarshaller,DomainClientProtocol.PARAM_SERVER_NAME);
          final String serverName=unmarshaller.readUTF();
          ServerIdentity identity=new ServerIdentity(hostName,serverGroupName,serverName);
          expectHeader(unmarshaller,DomainClientProtocol.PARAM_APPLY_UPDATE_RESULT_EXCEPTION);
          final Throwable serverException=unmarshal(unmarshaller,Throwable.class);
          serverFailures.put(identity,serverException);
        }
      }
      expectHeader(unmarshaller,DomainClientProtocol.PARAM_APPLY_UPDATE_RESULT_SERVER_RESULT_COUNT);
      int serverResultCount=unmarshaller.readInt();
      if (serverResultCount > 0) {
        serverResults=new HashMap<ServerIdentity,Object>();
        for (int j=0; j < hostFailureCount; j++) {
          expectHeader(unmarshaller,DomainClientProtocol.PARAM_HOST_NAME);
          final String hostName=unmarshaller.readUTF();
          expectHeader(unmarshaller,DomainClientProtocol.PARAM_SERVER_GROUP_NAME);
          final String serverGroupName=unmarshaller.readUTF();
          expectHeader(unmarshaller,DomainClientProtocol.PARAM_SERVER_NAME);
          final String serverName=unmarshaller.readUTF();
          ServerIdentity identity=new ServerIdentity(hostName,serverGroupName,serverName);
          expectHeader(unmarshaller,DomainClientProtocol.PARAM_APPLY_SERVER_MODEL_UPDATE_RESULT_RETURN);
          final Object serverResult=unmarshal(unmarshaller,Object.class);
          serverResults.put(identity,serverResult);
        }
      }
      results.add(new DomainUpdateResult<Object>(hostFailures,serverResults,serverFailures));
    }
 else {
      throw new IOException("Invalid byte token.  Expecting '" + DomainClientProtocol.APPLY_UPDATE_RESULT_DOMAIN_MODEL_SUCCESS + "' or '"+ DomainClientProtocol.PARAM_APPLY_UPDATE_RESULT_EXCEPTION+ "' received '"+ resultCode+ "'");
    }
  }
  unmarshaller.finish();
  return results;
}
