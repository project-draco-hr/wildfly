{
  try {
    final Unmarshaller unmarshaller=getUnmarshaller();
    unmarshaller.start(input);
    expectHeader(unmarshaller,Protocol.PARAM_APPLY_UPDATE_RESULT);
    byte resultCode=unmarshaller.readByte();
    if (resultCode == (byte)Protocol.PARAM_APPLY_UPDATE_RESULT_EXCEPTION) {
      final UpdateFailedException updateFailedException=unmarshaller.readObject(UpdateFailedException.class);
      return new DomainUpdateApplierResponse(updateFailedException);
    }
 else     if (resultCode == (byte)Protocol.APPLY_UPDATE_RESULT_DOMAIN_MODEL_SUCCESS) {
      Map<String,UpdateFailedException> hostFailures=null;
      List<ServerIdentity> servers=null;
      expectHeader(unmarshaller,Protocol.PARAM_APPLY_UPDATE_RESULT_HOST_FAILURE_COUNT);
      int hostFailureCount=unmarshaller.readInt();
      if (hostFailureCount > 0) {
        hostFailures=new HashMap<String,UpdateFailedException>();
        for (int j=0; j < hostFailureCount; j++) {
          expectHeader(unmarshaller,Protocol.PARAM_HOST_NAME);
          final String hostName=unmarshaller.readUTF();
          expectHeader(unmarshaller,Protocol.PARAM_APPLY_UPDATE_RESULT_EXCEPTION);
          final UpdateFailedException updateFailedException=unmarshaller.readObject(UpdateFailedException.class);
          hostFailures.put(hostName,updateFailedException);
        }
      }
      expectHeader(unmarshaller,Protocol.PARAM_APPLY_UPDATE_RESULT_SERVER_COUNT);
      int serverResultCount=unmarshaller.readInt();
      if (serverResultCount > 0) {
        servers=new ArrayList<ServerIdentity>();
        for (int j=0; j < hostFailureCount; j++) {
          expectHeader(unmarshaller,Protocol.PARAM_HOST_NAME);
          final String hostName=unmarshaller.readUTF();
          expectHeader(unmarshaller,Protocol.PARAM_SERVER_GROUP_NAME);
          final String serverGroupName=unmarshaller.readUTF();
          expectHeader(unmarshaller,Protocol.PARAM_SERVER_NAME);
          final String serverName=unmarshaller.readUTF();
          ServerIdentity identity=new ServerIdentity(hostName,serverGroupName,serverName);
          servers.add(identity);
        }
      }
      unmarshaller.finish();
      return new DomainUpdateApplierResponse(hostFailures,servers);
    }
 else {
      throw new IOException("Invalid byte token.  Expecting '" + Protocol.APPLY_UPDATE_RESULT_DOMAIN_MODEL_SUCCESS + "' or '"+ Protocol.PARAM_APPLY_UPDATE_RESULT_EXCEPTION+ "' received '"+ resultCode+ "'");
    }
  }
 catch (  Exception e) {
    throw new RuntimeException("Failed to read update responses",e);
  }
}
