{
  DirectoryService directoryService=new DefaultDirectoryService();
  directoryService.setSchemaManager(schemaManager);
  directoryService.setInstanceId(directoryServiceBean.getDirectoryServiceId());
  directoryService.setReplicaId(directoryServiceBean.getDsReplicaId());
  directoryService.setInstanceLayout(instanceLayout);
  List<Interceptor> interceptors=createInterceptors(directoryServiceBean.getInterceptors());
  directoryService.setInterceptors(interceptors);
  Map<String,Partition> partitions=createPartitions(directoryService,directoryServiceBean.getPartitions());
  Partition systemPartition=partitions.remove("system");
  if (systemPartition == null) {
  }
  directoryService.setSystemPartition(systemPartition);
  directoryService.setPartitions(new HashSet<Partition>(partitions.values()));
  directoryService.setAccessControlEnabled(directoryServiceBean.isDsAccessControlEnabled());
  directoryService.setAllowAnonymousAccess(directoryServiceBean.isDsAllowAnonymousAccess());
  ChangeLog cl=createChangeLog(directoryServiceBean.getChangeLog());
  if (cl != null) {
    directoryService.setChangeLog(cl);
  }
  directoryService.setDenormalizeOpAttrsEnabled(directoryServiceBean.isDsDenormalizeOpAttrsEnabled());
  Journal journal=createJournal(directoryServiceBean.getJournal());
  if (journal != null) {
    directoryService.setJournal(journal);
  }
  directoryService.setMaxPDUSize(directoryServiceBean.getDsMaxPDUSize());
  directoryService.setPasswordHidden(directoryServiceBean.isDsPasswordHidden());
  directoryService.setSyncPeriodMillis(directoryServiceBean.getDsSyncPeriodMillis());
  String entryFilePath=directoryServiceBean.getDsTestEntries();
  if (entryFilePath != null) {
    directoryService.setTestEntries(readTestEntries(entryFilePath));
  }
  if (!directoryServiceBean.isEnabled()) {
  }
  return directoryService;
}
