{
  requireSingleAttribute(reader,CommonAttributes.NAME);
  String name=reader.getAttributeValue(0);
  ModelNode clusterConnectionAdd=getEmptyOperation(ADD,address.clone().add(CommonAttributes.CLUSTER_CONNECTION,name));
  EnumSet<Element> required=EnumSet.of(Element.ADDRESS,Element.CONNECTOR_REF);
  Set<Element> seen=EnumSet.noneOf(Element.class);
  while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
    final Element element=Element.forName(reader.getLocalName());
    if (!seen.add(element)) {
      throw ParseUtils.duplicateNamedElement(reader,element.getLocalName());
    }
    required.remove(element);
switch (element) {
case CALL_TIMEOUT:
case CONFIRMATION_WINDOW_SIZE:
case FORWARD_WHEN_NO_CONSUMERS:
case MAX_HOPS:
case MIN_LARGE_MESSAGE_SIZE:
      handleElementText(reader,element,clusterConnectionAdd);
    break;
case ADDRESS:
{
    handleElementText(reader,element,CommonAttributes.CLUSTER_CONNECTION_ADDRESS.getName(),clusterConnectionAdd);
    break;
  }
case CONNECTOR_REF:
{
  handleElementText(reader,element,"simple",clusterConnectionAdd);
  break;
}
case CHECK_PERIOD:
case CONNECTION_TTL:
case MAX_RETRY_INTERVAL:
case RECONNECT_ATTEMPTS:
case RETRY_INTERVAL:
case RETRY_INTERVAL_MULTIPLIER:
case USE_DUPLICATE_DETECTION:
handleElementText(reader,element,"cluster",clusterConnectionAdd);
break;
case STATIC_CONNECTORS:
if (seen.contains(Element.DISCOVERY_GROUP_REF)) {
throw new XMLStreamException(MESSAGES.illegalElement(STATIC_CONNECTORS,DISCOVERY_GROUP_REF),reader.getLocation());
}
processStaticConnectors(reader,clusterConnectionAdd,true);
break;
case DISCOVERY_GROUP_REF:
{
if (seen.contains(Element.STATIC_CONNECTORS)) {
throw new XMLStreamException(MESSAGES.illegalElement(DISCOVERY_GROUP_REF,STATIC_CONNECTORS),reader.getLocation());
}
final String groupRef=readStringAttributeElement(reader,DISCOVERY_GROUP_NAME.getXmlName());
DISCOVERY_GROUP_NAME.parseAndSetParameter(groupRef,clusterConnectionAdd,reader);
break;
}
default :
{
throw ParseUtils.unexpectedElement(reader);
}
}
}
if (!required.isEmpty()) {
missingRequired(reader,required);
}
updates.add(clusterConnectionAdd);
}
