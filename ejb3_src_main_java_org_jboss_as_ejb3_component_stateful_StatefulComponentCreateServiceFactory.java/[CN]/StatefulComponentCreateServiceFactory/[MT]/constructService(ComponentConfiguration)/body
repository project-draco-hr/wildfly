{
  if (this.ejbJarConfiguration == null) {
    throw MESSAGES.ejbJarConfigNotBeenSet(this,configuration.getComponentName());
  }
  configuration.getCreateDependencies().add(new DependencyConfigurator<StatefulSessionComponentCreateService>(){
    @Override public void configureDependency(    ServiceBuilder<?> serviceBuilder,    StatefulSessionComponentCreateService componentCreateService){
      serviceBuilder.addDependency(DefaultAccessTimeoutService.STATEFUL_SERVICE_NAME,DefaultAccessTimeoutService.class,componentCreateService.getDefaultAccessTimeoutInjector());
    }
  }
);
  configuration.getCreateDependencies().add(new DependencyConfigurator<StatefulSessionComponentCreateService>(){
    @Override public void configureDependency(    ServiceBuilder<?> builder,    StatefulSessionComponentCreateService service){
      if (service.getClustering() != null) {
        builder.addDependency(RegistryInstallerService.SERVICE_NAME);
      }
    }
  }
);
  configuration.getCreateDependencies().add(new DependencyConfigurator<StatefulSessionComponentCreateService>(){
    @Override public void configureDependency(    final ServiceBuilder<?> builder,    final StatefulSessionComponentCreateService service){
      builder.addDependency(this.getServiceName(service),CacheFactoryBuilder.class,service.getCacheFactoryBuilderInjector());
    }
    private ServiceName getServiceName(    StatefulSessionComponentCreateService service){
      if (!service.isPassivationCapable()) {
        return CacheFactoryBuilderService.DEFAULT_PASSIVATION_DISABLED_CACHE_SERVICE_NAME;
      }
      CacheInfo cache=service.getCache();
      if (cache != null) {
        return CacheFactoryBuilderService.getServiceName(cache.getName());
      }
      ClusteringInfo clustering=service.getClustering();
      return (clustering != null) ? CacheFactoryBuilderService.DEFAULT_CLUSTERED_CACHE_SERVICE_NAME : CacheFactoryBuilderService.DEFAULT_CACHE_SERVICE_NAME;
    }
  }
);
  @SuppressWarnings("rawtypes") final InjectedValue<CacheFactory> factory=new InjectedValue<>();
  configuration.getStartDependencies().add(new DependencyConfigurator<ComponentStartService>(){
    @Override public void configureDependency(    ServiceBuilder<?> builder,    ComponentStartService service){
      builder.addDependency(configuration.getComponentDescription().getServiceName().append("cache"),CacheFactory.class,factory);
    }
  }
);
  return new StatefulSessionComponentCreateService(configuration,this.ejbJarConfiguration,factory);
}
