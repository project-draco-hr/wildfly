{
  try {
    Class.forName("org.apache.jasper.compiler.JspRuntimeContext",true,this.getClass().getClassLoader());
  }
 catch (  ClassNotFoundException e) {
    UndertowLogger.ROOT_LOGGER.couldNotInitJsp(e);
  }
  final String defaultVirtualHost=UndertowRootDefinition.DEFAULT_VIRTUAL_HOST.resolveModelAttribute(context,model).asString();
  final String defaultContainer=UndertowRootDefinition.DEFAULT_SERVLET_CONTAINER.resolveModelAttribute(context,model).asString();
  final String defaultServer=UndertowRootDefinition.DEFAULT_SERVER.resolveModelAttribute(context,model).asString();
  final ModelNode instanceIdModel=UndertowRootDefinition.INSTANCE_ID.resolveModelAttribute(context,model);
  final String instanceId=instanceIdModel.isDefined() ? instanceIdModel.asString() : null;
  ServiceTarget target=context.getServiceTarget();
  newControllers.add(target.addService(UndertowService.UNDERTOW,new UndertowService(defaultContainer,defaultServer,defaultVirtualHost,instanceId)).setInitialMode(ServiceController.Mode.ACTIVE).install());
  newControllers.add(target.addService(CommonWebServer.SERVICE_NAME,new WebServerService()).install());
  context.addStep(new AbstractDeploymentChainStep(){
    @Override protected void execute(    DeploymentProcessorTarget processorTarget){
      final SharedWebMetaDataBuilder sharedWebBuilder=new SharedWebMetaDataBuilder(model.clone());
      final SharedTldsMetaDataBuilder sharedTldsBuilder=new SharedTldsMetaDataBuilder(model.clone());
      processorTarget.addDeploymentProcessor(UndertowExtension.SUBSYSTEM_NAME,Phase.STRUCTURE,Phase.STRUCTURE_REGISTER_JBOSS_ALL_WEB,new JBossAllXmlParserRegisteringProcessor<>(WebJBossAllParser.ROOT_ELEMENT,WebJBossAllParser.ATTACHMENT_KEY,new WebJBossAllParser()));
      processorTarget.addDeploymentProcessor(UndertowExtension.SUBSYSTEM_NAME,Phase.STRUCTURE,Phase.STRUCTURE_WAR_DEPLOYMENT_INIT,new WarDeploymentInitializingProcessor());
      processorTarget.addDeploymentProcessor(UndertowExtension.SUBSYSTEM_NAME,Phase.STRUCTURE,Phase.STRUCTURE_WAR,new WarStructureDeploymentProcessor(sharedWebBuilder.create(),sharedTldsBuilder));
      processorTarget.addDeploymentProcessor(UndertowExtension.SUBSYSTEM_NAME,Phase.PARSE,Phase.PARSE_WEB_DEPLOYMENT,new WebParsingDeploymentProcessor());
      processorTarget.addDeploymentProcessor(UndertowExtension.SUBSYSTEM_NAME,Phase.PARSE,Phase.PARSE_WEB_DEPLOYMENT_FRAGMENT,new WebFragmentParsingDeploymentProcessor());
      processorTarget.addDeploymentProcessor(UndertowExtension.SUBSYSTEM_NAME,Phase.PARSE,Phase.PARSE_JBOSS_WEB_DEPLOYMENT,new JBossWebParsingDeploymentProcessor());
      processorTarget.addDeploymentProcessor(UndertowExtension.SUBSYSTEM_NAME,Phase.PARSE,Phase.PARSE_ANNOTATION_WAR,new WarAnnotationDeploymentProcessor());
      processorTarget.addDeploymentProcessor(UndertowExtension.SUBSYSTEM_NAME,Phase.PARSE,Phase.PARSE_EAR_CONTEXT_ROOT,new EarContextRootProcessor());
      processorTarget.addDeploymentProcessor(UndertowExtension.SUBSYSTEM_NAME,Phase.PARSE,Phase.PARSE_WEB_MERGE_METADATA,new WarMetaDataProcessor());
      processorTarget.addDeploymentProcessor(UndertowExtension.SUBSYSTEM_NAME,Phase.PARSE,Phase.PARSE_WEB_MERGE_METADATA + 1,new TldParsingDeploymentProcessor());
      processorTarget.addDeploymentProcessor(UndertowExtension.SUBSYSTEM_NAME,Phase.PARSE,Phase.PARSE_WEB_MERGE_METADATA + 2,new org.wildfly.extension.undertow.deployment.WebComponentProcessor());
      processorTarget.addDeploymentProcessor(UndertowExtension.SUBSYSTEM_NAME,Phase.DEPENDENCIES,Phase.DEPENDENCIES_WAR_MODULE,new UndertowDependencyProcessor());
      processorTarget.addDeploymentProcessor(UndertowExtension.SUBSYSTEM_NAME,Phase.POST_MODULE,Phase.POST_MODULE_EL_EXPRESSION_FACTORY,new ELExpressionFactoryProcessor());
      processorTarget.addDeploymentProcessor(UndertowExtension.SUBSYSTEM_NAME,Phase.POST_MODULE,Phase.POST_MODULE_UNDERTOW_WEBSOCKETS,new UndertowJSRWebSocketDeploymentProcessor());
      processorTarget.addDeploymentProcessor(UndertowExtension.SUBSYSTEM_NAME,Phase.POST_MODULE,Phase.POST_MODULE_UNDERTOW_HANDLERS,new UndertowHandlersDeploymentProcessor());
      processorTarget.addDeploymentProcessor(UndertowExtension.SUBSYSTEM_NAME,Phase.INSTALL,Phase.INSTALL_SERVLET_INIT_DEPLOYMENT,new ServletContainerInitializerDeploymentProcessor());
      processorTarget.addDeploymentProcessor(UndertowExtension.SUBSYSTEM_NAME,Phase.INSTALL,Phase.INSTALL_WAR_DEPLOYMENT,new UndertowDeploymentProcessor(defaultVirtualHost,defaultContainer,defaultServer));
    }
  }
,OperationContext.Stage.RUNTIME);
  UndertowLogger.ROOT_LOGGER.serverStarting(Version.getVersionString());
  DistributableSessionManagerFactoryBuilder builder=new DistributableSessionManagerFactoryBuilderValue().getValue();
  if (builder != null) {
    newControllers.add(builder.buildServerDependency(target,new ImmediateValue<>(instanceId)).setInitialMode(ServiceController.Mode.ON_DEMAND).install());
  }
}
