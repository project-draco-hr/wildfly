{
  ElementNode modulesNode=new ElementNode(null,"modules","urn:modules:1.0");
  List<ModuleIdentifier> dependencies=new ArrayList<ModuleIdentifier>();
  if (!inputFile.getName().equals(SKIP_SUBSYSTEMS)) {
    SubsystemsParser parser=new SubsystemsParser(inputFile);
    parser.parse();
    for (    SubsystemConfig config : parser.getSubsystemConfigs().get(profile)) {
      File configFile=new File(resourcesDir + File.separator + config.getSubsystem());
      SubsystemParser configParser=new SubsystemParser(null,config.getSupplement(),configFile);
      configParser.parse();
      ModuleIdentifier moduleId=ModuleIdentifier.create(configParser.getExtensionModule());
      processModuleDependency(dependencies,modulesNode,new ModuleDependency(moduleId,false));
    }
  }
  for (  String staticId : staticModules) {
    if (!staticId.isEmpty()) {
      ModuleIdentifier moduleId=ModuleIdentifier.fromString(staticId);
      processModuleDependency(dependencies,modulesNode,new ModuleDependency(moduleId,false));
    }
  }
  Comparator<ModuleIdentifier> comp=new Comparator<ModuleIdentifier>(){
    @Override public int compare(    ModuleIdentifier o1,    ModuleIdentifier o2){
      return o1.toString().compareTo(o2.toString());
    }
  }
;
  Collections.sort(dependencies,comp);
  PrintWriter pw=new PrintWriter(new FileWriter(outputFile));
  try {
    if (!dependencies.isEmpty()) {
      for (      ModuleIdentifier moduleId : dependencies) {
        String path=moduleId.getName().replace('.','/') + File.separator + moduleId.getSlot();
        pw.println(path + File.separator + "**");
      }
    }
 else {
      pw.println(NO_MODULE_DEPENENCIES);
    }
  }
  finally {
    pw.close();
  }
  String xmloutput=outputFile.getPath();
  Writer writer=new FileWriter(xmloutput.substring(0,xmloutput.lastIndexOf(".")) + ".xml");
  try {
    XMLOutputFactory factory=XMLOutputFactory.newInstance();
    XMLStreamWriter xmlwriter=new FormattingXMLStreamWriter(factory.createXMLStreamWriter(writer));
    modulesNode.marshall(xmlwriter);
  }
  finally {
    writer.close();
  }
}
