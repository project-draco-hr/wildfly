{
  HashSet<Role> securityRoles=new HashSet<Role>();
  Pair<String,Set<Role>> securityMatch=new Pair<String,Set<Role>>(match,securityRoles);
  ArrayList<String> send=new ArrayList<String>();
  ArrayList<String> consume=new ArrayList<String>();
  ArrayList<String> createDurableQueue=new ArrayList<String>();
  ArrayList<String> deleteDurableQueue=new ArrayList<String>();
  ArrayList<String> createNonDurableQueue=new ArrayList<String>();
  ArrayList<String> deleteNonDurableQueue=new ArrayList<String>();
  ArrayList<String> manageRoles=new ArrayList<String>();
  ArrayList<String> allRoles=new ArrayList<String>();
  while (reader.hasNext() && reader.getLocalName().equals(Element.PERMISSION_ELEMENT_NAME.getLocalName())) {
    int tag=reader.nextTag();
    String localName=reader.getLocalName();
    if (Element.PERMISSION_ELEMENT_NAME.getLocalName().equalsIgnoreCase(localName)) {
      int count=reader.getAttributeCount();
      int rolesIndex=1, typeIndex=0;
      for (int n=0; n < count; n++) {
        if (reader.getAttributeLocalName(n).equals(Element.ROLES_ATTR_NAME.getLocalName())) {
          rolesIndex=n;
        }
 else         if (reader.getAttributeLocalName(n).equals(Element.TYPE_ATTR_NAME.getLocalName())) {
          typeIndex=n;
        }
      }
      List<String> roles=reader.getListAttributeValue(rolesIndex);
      String type=reader.getAttributeValue(typeIndex);
      for (      String role : roles) {
        if (Element.SEND_NAME.equals(type)) {
          send.add(role.trim());
        }
 else         if (Element.CONSUME_NAME.equals(type)) {
          consume.add(role.trim());
        }
 else         if (Element.CREATEDURABLEQUEUE_NAME.equals(type)) {
          createDurableQueue.add(role);
        }
 else         if (Element.DELETEDURABLEQUEUE_NAME.equals(type)) {
          deleteDurableQueue.add(role);
        }
 else         if (Element.CREATE_NON_DURABLE_QUEUE_NAME.equals(type)) {
          createNonDurableQueue.add(role);
        }
 else         if (Element.DELETE_NON_DURABLE_QUEUE_NAME.equals(type)) {
          deleteNonDurableQueue.add(role);
        }
 else         if (Element.CREATETEMPQUEUE_NAME.equals(type)) {
          createNonDurableQueue.add(role);
        }
 else         if (Element.DELETETEMPQUEUE_NAME.equals(type)) {
          deleteNonDurableQueue.add(role);
        }
 else         if (Element.MANAGE_NAME.equals(type)) {
          manageRoles.add(role);
        }
        if (!allRoles.contains(role.trim())) {
          allRoles.add(role.trim());
        }
      }
    }
  }
  for (  String role : allRoles) {
    securityRoles.add(new Role(role,send.contains(role),consume.contains(role),createDurableQueue.contains(role),deleteDurableQueue.contains(role),createNonDurableQueue.contains(role),deleteNonDurableQueue.contains(role),manageRoles.contains(role)));
  }
  return securityMatch;
}
