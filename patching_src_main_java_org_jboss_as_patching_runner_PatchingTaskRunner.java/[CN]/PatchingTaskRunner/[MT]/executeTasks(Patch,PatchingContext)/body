{
  final List<PatchingTask> tasks=new ArrayList<PatchingTask>();
  final List<ContentItem> problems=new ArrayList<ContentItem>();
  for (  final ContentModification modification : patch.getModifications()) {
    final PatchingTask task=PatchingTask.Factory.create(modification,context);
    try {
      if (!task.prepare(context)) {
        final ContentItem item=modification.getItem();
        if (context.isIgnored(item)) {
          problems.add(item);
        }
      }
      tasks.add(task);
    }
 catch (    IOException e) {
      throw new PatchingException(e);
    }
  }
  if (!problems.isEmpty()) {
    throw new PatchingException("...");
  }
  try {
    for (    final PatchingTask task : tasks) {
      if (context.isExcluded(task.getContentItem())) {
        continue;
      }
      task.execute(context);
    }
  }
 catch (  Exception e) {
    throw rethrowException(e);
  }
  return context.finish(patch);
}
