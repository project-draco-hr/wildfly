{
  if (!patchInfo.getCumulativeID().equals(patchId)) {
    if (!patchInfo.getPatchIDs().contains(patchId)) {
      PatchLogger.ROOT_LOGGER.cannotRollbackPatch(patchId);
      return new FailedResult(patchId,patchInfo);
    }
  }
  final File historyDir=structure.getHistoryDir(patchId);
  if (!historyDir.exists()) {
    PatchLogger.ROOT_LOGGER.cannotRollbackPatch(patchId);
    return new FailedResult(patchId,patchInfo);
  }
  final File patchXml=new File(historyDir,PatchXml.PATCH_XML);
  if (!patchXml.exists()) {
    PatchLogger.ROOT_LOGGER.cannotRollbackPatch(patchId);
    return new FailedResult(patchId,patchInfo);
  }
  File workDir=createTempDir();
  try {
    final InputStream is=new FileInputStream(patchXml);
    try {
      final Patch patch=PatchXml.parse(is);
      final File previousCP=new File(historyDir,DirectoryStructure.CUMULATIVE);
      final String cumulative=PatchUtils.readRef(previousCP);
      if (!cumulative.equals(patch.getPatchId())) {
        throw new PatchingException("inconsistent cumulative version expected: %s, was: %s",patch.getPatchId(),cumulative);
      }
      final File cumulativeReferences=structure.getCumulativeRefs(cumulative);
      final File referencesHistory=new File(historyDir,DirectoryStructure.REFERENCES);
      final List<String> cumulativePatches=PatchUtils.readRefs(cumulativeReferences);
      final List<String> historyPatches=PatchUtils.readRefs(referencesHistory);
      if (!cumulativePatches.equals(historyPatches)) {
        throw new PatchingException("inconsistent patches for '%s' expected: %s, was: %s",cumulative,historyDir,cumulativePatches);
      }
      final PatchingContext context=PatchingContext.createForRollback(patch,patchInfo,structure,overrideAll,workDir);
      return executeTasks(patch,context);
    }
  finally {
      PatchUtils.safeClose(is);
    }
  }
 catch (  IOException e) {
    throw new PatchingException(e);
  }
catch (  XMLStreamException e) {
    throw new PatchingException(e);
  }
 finally {
    if (workDir != null && !recursiveDelete(workDir)) {
      PatchLogger.ROOT_LOGGER.debugf("failed to remove work directory (%s)",workDir);
    }
  }
}
