{
  ConcurrentMethodsMetaData concurrentMethods=singletonBeanMetaData.getConcurrentMethods();
  if (concurrentMethods != null) {
    for (    ConcurrentMethodMetaData concurrentMethod : concurrentMethods) {
      LockType methodLockType=concurrentMethod.getLockType();
      Method method=resolveMethod(reflectionIndex,(Class<Object>)componentClass,concurrentMethod.getMethod());
      final MethodIdentifier methodIdentifier=MethodIdentifier.getIdentifierForMethod(method);
      if (methodLockType != null) {
        singletonComponentDescription.setLockType(methodLockType,methodIdentifier);
      }
      final AccessTimeoutMetaData accessTimeout=concurrentMethod.getAccessTimeout();
      if (accessTimeout != null) {
        singletonComponentDescription.setAccessTimeout(new AccessTimeout(){
          @Override public long value(){
            return accessTimeout.getTimeout();
          }
          @Override public TimeUnit unit(){
            return accessTimeout.getUnit();
          }
          @Override public Class<? extends Annotation> annotationType(){
            return AccessTimeout.class;
          }
        }
,methodIdentifier);
      }
    }
  }
}
