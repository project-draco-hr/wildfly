{
  if (messageInputStream == null) {
    throw new IllegalArgumentException("Cannot read from null message inputstream");
  }
  final DataInputStream dataInputStream=new DataInputStream(messageInputStream);
  final short invocationId=dataInputStream.readShort();
  String appName=dataInputStream.readUTF();
  if (appName.isEmpty()) {
    appName=null;
  }
  final String moduleName=dataInputStream.readUTF();
  final String distinctName=dataInputStream.readUTF();
  final String beanName=dataInputStream.readUTF();
  final EjbDeploymentInformation ejbDeploymentInformation=this.findEJB(appName,moduleName,distinctName,beanName);
  if (ejbDeploymentInformation == null) {
    this.writeNoSuchEJBFailureMessage(channel,invocationId,appName,moduleName,distinctName,beanName,null);
    return;
  }
  final Component component=ejbDeploymentInformation.getEjbComponent();
  if (!(component instanceof StatefulSessionComponent)) {
    final String failureMessage="EJB " + beanName + " is not a Stateful Session bean in app: "+ appName+ " module: "+ moduleName+ " distinct name:"+ distinctName;
    this.writeInvocationFailure(channel,HEADER_EJB_NOT_STATEFUL,invocationId,failureMessage);
    return;
  }
  final RemotingAttachments attachments=this.readAttachments(dataInputStream);
  final StatefulSessionComponent statefulSessionComponent=(StatefulSessionComponent)component;
  final SessionID sessionID;
  try {
    sessionID=statefulSessionComponent.createSession();
  }
 catch (  Throwable t) {
    this.writeException(channel,invocationId,t,attachments);
    return;
  }
  this.writeSessionId(channel,invocationId,sessionID,attachments);
}
