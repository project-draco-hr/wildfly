{
  final DeploymentUnit deploymentUnit=phaseContext.getDeploymentUnit();
  if (deploymentUnit.hasAttachment(Attachments.MODULE) && !DeploymentTypeMarker.isType(DeploymentType.EAR,deploymentUnit) && deploymentUnit.hasAttachment(Attachments.DEPLOYMENT_ROOT)) {
    BatchLogger.LOGGER.tracef("Processing deployment '%s' for the batch deployment resources.",deploymentUnit.getName());
    final Module module=deploymentUnit.getAttachment(Attachments.MODULE);
    final ClassLoader moduleClassLoader=module.getClassLoader();
    final DeploymentResourceSupport deploymentResourceSupport=deploymentUnit.getAttachment(Attachments.DEPLOYMENT_RESOURCE_SUPPORT);
    final JobOperatorService jobOperatorService=new JobOperatorService(moduleClassLoader);
    final WildFlyJobXmlResolver jobXmlResolver=deploymentUnit.getAttachment(WildFlyJobXmlResolver.JOB_XML_RESOLVER);
    for (    String jobXml : jobXmlResolver.getJobXmlNames(moduleClassLoader)) {
      try {
        final String jobName=jobXmlResolver.resolveJobName(jobXml,moduleClassLoader);
        jobOperatorService.addAllowedJob(jobXml,jobName);
        BatchLogger.LOGGER.debugf("Added job XML %s with job name %s to allowed jobs for deployment %s",jobXml,jobName,deploymentUnit.getName());
        final PathAddress jobAddress=PathAddress.pathAddress(BatchJobResourceDefinition.JOB,jobName);
        if (!deploymentResourceSupport.hasDeploymentSubModel(subsystemName,jobAddress)) {
          deploymentResourceSupport.registerDeploymentSubResource(subsystemName,jobAddress,new BatchJobExecutionResource(jobOperatorService,jobName));
        }
      }
 catch (      Exception e) {
        BatchLogger.LOGGER.debugf(e,"Could not parse the XML file %s. The job will not be registered for runtime views on the deployment (%s).",jobXml,deploymentUnit.getName());
      }
    }
    phaseContext.getServiceTarget().addService(BatchServiceNames.jobOperatorServiceName(deploymentUnit),jobOperatorService).addDependency(BatchServiceNames.batchEnvironmentServiceName(deploymentUnit)).install();
  }
}
