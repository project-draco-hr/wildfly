{
  Map<String,TimerImpl> timers=new HashMap<>();
  String directory=getDirectory(timedObjectId);
  timers.putAll(LegacyFileStore.loadTimersFromFile(timedObjectId,timerService,directory,factory,configuration));
  for (  Map.Entry<String,TimerImpl> entry : timers.entrySet()) {
    writeFile(entry.getValue());
  }
  final File file=new File(directory);
  if (!file.exists()) {
    return timers;
  }
 else   if (!file.isDirectory()) {
    EJB3_TIMER_LOGGER.failToRestoreTimers(file);
    return timers;
  }
  final XMLMapper mapper=createMapper(timerService);
  for (  File timerFile : file.listFiles()) {
    if (!timerFile.getName().endsWith(".xml")) {
      continue;
    }
    FileInputStream in=null;
    try {
      in=new FileInputStream(timerFile);
      final XMLInputFactory inputFactory=INPUT_FACTORY;
      setIfSupported(inputFactory,XMLInputFactory.IS_VALIDATING,Boolean.FALSE);
      setIfSupported(inputFactory,XMLInputFactory.SUPPORT_DTD,Boolean.FALSE);
      final XMLStreamReader streamReader=inputFactory.createXMLStreamReader(in);
      try {
        List<TimerImpl> timerList=new ArrayList<>();
        mapper.parseDocument(timerList,streamReader);
        for (        TimerImpl timer : timerList) {
          timers.put(timer.getId(),timer);
        }
      }
  finally {
        safeClose(in);
      }
    }
 catch (    Exception e) {
      EJB3_TIMER_LOGGER.failToRestoreTimersFromFile(timerFile,e);
    }
 finally {
      if (in != null) {
        try {
          in.close();
        }
 catch (        IOException e) {
          EJB3_TIMER_LOGGER.failToCloseFile(e);
        }
      }
    }
  }
  return timers;
}
