{
  int numOfParams=attributes.size();
  if (next != null) {
    numOfParams++;
  }
  try {
    Constructor<?> c=handlerClass.getDeclaredConstructor(getConstructorSignature());
    if (c.getParameterTypes().length == numOfParams) {
      boolean match=true;
      Object[] params=new Object[numOfParams];
      Class[] parameterTypes=c.getParameterTypes();
      int attrCounter=0;
      for (int i=0; i < parameterTypes.length; i++) {
        Class param=parameterTypes[i];
        if (param == String.class) {
          params[i]=model.get(attributes.get(attrCounter).getName()).asString();
          attrCounter++;
        }
 else         if (param == Integer.class || param == int.class) {
          params[i]=model.get(attributes.get(attrCounter).getName()).asInt();
          attrCounter++;
        }
 else         if (param == Long.class || param == long.class) {
          params[i]=model.get(attributes.get(attrCounter).getName()).asLong();
          attrCounter++;
        }
 else         if (param == HttpHandler.class) {
          params[i]=next;
        }
 else {
          match=false;
          break;
        }
      }
      if (match) {
        return (HttpHandler)c.newInstance(params);
      }
    }
  }
 catch (  Throwable e) {
    throw UndertowLogger.ROOT_LOGGER.cannotCreateHttpHandler(handlerClass,model,e);
  }
  throw UndertowLogger.ROOT_LOGGER.cannotCreateHttpHandler(handlerClass,model,null);
}
