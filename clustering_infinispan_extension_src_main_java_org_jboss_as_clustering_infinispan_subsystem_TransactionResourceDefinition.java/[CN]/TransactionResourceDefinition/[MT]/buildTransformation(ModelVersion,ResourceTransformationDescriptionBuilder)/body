{
  ResourceTransformationDescriptionBuilder builder=InfinispanModel.VERSION_4_0_0.requiresTransformation(version) ? parent.addChildRedirection(PATH,LEGACY_PATH) : parent.addChildResource(PATH);
  List<org.jboss.as.controller.transform.OperationTransformer> addOperationTransformers=new LinkedList<>();
  List<org.jboss.as.controller.transform.OperationTransformer> removeOperationTransformers=new LinkedList<>();
  Map<String,org.jboss.as.controller.transform.OperationTransformer> readAttributeTransformers=new HashMap<>();
  Map<String,org.jboss.as.controller.transform.OperationTransformer> writeAttributeTransformers=new HashMap<>();
  Map<String,org.jboss.as.controller.transform.OperationTransformer> undefineAttributeTransformers=new HashMap<>();
  if (InfinispanModel.VERSION_3_0_0.requiresTransformation(version)) {
    OperationTransformer addTransformer=new OperationTransformer(){
      @Override public ModelNode transformOperation(      ModelNode operation){
        if (operation.hasDefined(Attribute.MODE.getDefinition().getName())) {
          ModelNode mode=operation.get(Attribute.MODE.getDefinition().getName());
          if ((mode.getType() == ModelType.STRING) && (TransactionMode.valueOf(mode.asString()) == TransactionMode.BATCH)) {
            mode.set(TransactionMode.NONE.name());
            PathAddress address=Operations.getPathAddress(operation);
            return Operations.createCompositeOperation(operation,Operations.createWriteAttributeOperation(cacheAddress(address),CacheResourceDefinition.DeprecatedAttribute.BATCHING,new ModelNode(true)));
          }
        }
        return operation;
      }
    }
;
    addOperationTransformers.add(new SimpleOperationTransformer(addTransformer));
    OperationTransformer removeTransformer=new OperationTransformer(){
      @Override public ModelNode transformOperation(      ModelNode operation){
        PathAddress address=Operations.getPathAddress(operation);
        return Operations.createCompositeOperation(operation,Operations.createUndefineAttributeOperation(cacheAddress(address),CacheResourceDefinition.DeprecatedAttribute.BATCHING));
      }
    }
;
    removeOperationTransformers.add(new SimpleOperationTransformer(removeTransformer));
    OperationTransformer readAttributeOperationTransformer=new OperationTransformer(){
      @Override public ModelNode transformOperation(      ModelNode operation){
        PathAddress address=Operations.getPathAddress(operation);
        return Operations.createCompositeOperation(Operations.createReadAttributeOperation(cacheAddress(address),CacheResourceDefinition.DeprecatedAttribute.BATCHING),operation);
      }
    }
;
    OperationResultTransformer readAttributeResultTransformer=new OperationResultTransformer(){
      @Override public ModelNode transformResult(      ModelNode result){
        ModelNode readBatchingResult=result.get(0);
        return readBatchingResult.asBoolean() ? new ModelNode(TransactionMode.BATCH.name()) : result.get(1);
      }
    }
;
    readAttributeTransformers.put(Attribute.MODE.getDefinition().getName(),new SimpleOperationTransformer(readAttributeOperationTransformer,readAttributeResultTransformer));
    OperationTransformer writeAttributeTransformer=new OperationTransformer(){
      @Override public ModelNode transformOperation(      ModelNode operation){
        ModelNode mode=Operations.getAttributeValue(operation);
        boolean batching=(mode.isDefined() && (mode.getType() == ModelType.STRING)) ? (TransactionMode.valueOf(mode.asString()) == TransactionMode.BATCH) : false;
        if (batching) {
          mode.set(TransactionMode.NONE.name());
        }
        PathAddress address=Operations.getPathAddress(operation);
        return Operations.createCompositeOperation(operation,Operations.createWriteAttributeOperation(cacheAddress(address),CacheResourceDefinition.DeprecatedAttribute.BATCHING,new ModelNode(batching)));
      }
    }
;
    writeAttributeTransformers.put(Attribute.MODE.getDefinition().getName(),new SimpleOperationTransformer(writeAttributeTransformer));
    OperationTransformer undefineAttributeTransformer=new OperationTransformer(){
      @Override public ModelNode transformOperation(      ModelNode operation){
        PathAddress address=Operations.getPathAddress(operation);
        return Operations.createCompositeOperation(operation,Operations.createUndefineAttributeOperation(cacheAddress(address),CacheResourceDefinition.DeprecatedAttribute.BATCHING));
      }
    }
;
    undefineAttributeTransformers.put(Attribute.MODE.getDefinition().getName(),new SimpleOperationTransformer(undefineAttributeTransformer));
    ResourceTransformer modeTransformer=new ResourceTransformer(){
      @Override public void transformResource(      ResourceTransformationContext context,      PathAddress address,      Resource resource) throws OperationFailedException {
        ModelNode model=resource.getModel();
        if (model.hasDefined(Attribute.MODE.getDefinition().getName())) {
          ModelNode value=model.get(Attribute.MODE.getDefinition().getName());
          if ((value.getType() == ModelType.STRING) && (TransactionMode.valueOf(value.asString()) == TransactionMode.BATCH)) {
            value.set(TransactionMode.NONE.name());
          }
        }
        context.addTransformedResource(PathAddress.EMPTY_ADDRESS,resource).processChildren(resource);
      }
    }
;
    builder.setCustomResourceTransformer(modeTransformer);
    builder.getAttributeBuilder().setValueConverter(new DefaultValueAttributeConverter(Attribute.STOP_TIMEOUT.getDefinition()),Attribute.STOP_TIMEOUT.getDefinition());
  }
  buildOperationTransformation(builder,ModelDescriptionConstants.ADD,addOperationTransformers);
  buildOperationTransformation(builder,ModelDescriptionConstants.REMOVE,removeOperationTransformers);
  buildOperationTransformation(builder,ModelDescriptionConstants.READ_ATTRIBUTE_OPERATION,readAttributeTransformers);
  buildOperationTransformation(builder,ModelDescriptionConstants.WRITE_ATTRIBUTE_OPERATION,writeAttributeTransformers);
  buildOperationTransformation(builder,ModelDescriptionConstants.UNDEFINE_ATTRIBUTE_OPERATION,undefineAttributeTransformers);
}
