{
  final DeploymentUnit deploymentUnit=phaseContext.getDeploymentUnit();
  final EEModuleDescription moduleDescription=deploymentUnit.getAttachment(Attachments.EE_MODULE_DESCRIPTION);
  final Module module=deploymentUnit.getAttachment(org.jboss.as.server.deployment.Attachments.MODULE);
  final DeploymentReflectionIndex reflectionIndex=deploymentUnit.getAttachment(org.jboss.as.server.deployment.Attachments.REFLECTION_INDEX);
  if (module == null || moduleDescription == null) {
    return;
  }
  final int startupBeansCount=moduleDescription.getStartupBeansCount();
  if (deploymentUnit.getParent() == null) {
    deploymentUnit.putAttachment(Attachments.STARTUP_COUNTDOWN,new StartupCountdown(startupBeansCount));
  }
 else {
    final StartupCountdown countdown=deploymentUnit.getParent().getAttachment(Attachments.STARTUP_COUNTDOWN);
    deploymentUnit.putAttachment(Attachments.STARTUP_COUNTDOWN,countdown);
    countdown.countUp(startupBeansCount);
  }
  final Set<ServiceName> failed=new HashSet<ServiceName>();
  final EEModuleConfiguration moduleConfiguration=new EEModuleConfiguration(moduleDescription);
  deploymentUnit.putAttachment(Attachments.EE_MODULE_CONFIGURATION,moduleConfiguration);
  final ClassLoader oldCl=WildFlySecurityManager.getCurrentContextClassLoaderPrivileged();
  try {
    WildFlySecurityManager.setCurrentContextClassLoaderPrivileged(module.getClassLoader());
    final Iterator<ComponentDescription> iterator=moduleDescription.getComponentDescriptions().iterator();
    while (iterator.hasNext()) {
      final ComponentDescription componentDescription=iterator.next();
      ROOT_LOGGER.debugf("Configuring component class: %s named %s",componentDescription.getComponentClassName(),componentDescription.getComponentName());
      final ComponentConfiguration componentConfiguration;
      try {
        componentConfiguration=componentDescription.createConfiguration(reflectionIndex.getClassIndex(ClassLoadingUtils.loadClass(componentDescription.getComponentClassName(),module)),module.getClassLoader(),module.getModuleLoader());
        for (        final ComponentConfigurator componentConfigurator : componentDescription.getConfigurators()) {
          componentConfigurator.configure(phaseContext,componentDescription,componentConfiguration);
        }
        moduleConfiguration.addComponentConfiguration(componentConfiguration);
      }
 catch (      Exception e) {
        if (componentDescription.isOptional()) {
          ROOT_LOGGER.componentInstallationFailure(componentDescription.getComponentName());
          ROOT_LOGGER.debugf(e,"Not installing optional component %s due to an exception",componentDescription.getComponentName());
          failed.add(componentDescription.getStartServiceName());
          failed.add(componentDescription.getCreateServiceName());
          failed.add(componentDescription.getServiceName());
          iterator.remove();
        }
 else {
          throw EeLogger.ROOT_LOGGER.cannotConfigureComponent(e,componentDescription.getComponentName());
        }
      }
    }
    deploymentUnit.putAttachment(Attachments.FAILED_COMPONENTS,Collections.synchronizedSet(failed));
  }
  finally {
    WildFlySecurityManager.setCurrentContextClassLoaderPrivileged(oldCl);
  }
}
