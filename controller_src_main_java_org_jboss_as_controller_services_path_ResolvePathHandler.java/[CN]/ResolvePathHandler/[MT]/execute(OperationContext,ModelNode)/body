{
  final Resource resource=context.readResource(PathAddress.EMPTY_ADDRESS);
  final ModelNode model=resource.getModel();
  final ModelNode relativeToOnly=RELATIVE_TO_ONLY.validateOperation(operation);
  final boolean resolveRelativeToOnly=relativeToOnly.asBoolean(false);
  final ModelNode file=(parentAttribute != null ? parentAttribute.resolveModelAttribute(context,model) : model);
  final ModelNode relativeTo=relativeToAttribute.resolveModelAttribute(context,file);
  final ModelNode path=pathAttribute.resolveModelAttribute(context,file);
  final String result;
  if (relativeTo.isDefined()) {
    if (!resolveRelativeToOnly && path.isDefined()) {
      result=pathManager.resolveRelativePathEntry(path.asString(),relativeTo.asString());
    }
 else {
      result=pathManager.getPathEntry(relativeTo.asString()).resolvePath();
    }
  }
 else   if (path.isDefined()) {
    result=pathManager.resolveRelativePathEntry(path.asString(),null);
  }
 else {
    throw ControllerMessages.MESSAGES.noPathToResolve(relativeToAttribute.getName(),pathAttribute.getName(),model);
  }
  context.getResult().set(new ModelNode(result));
  context.completeStep(OperationContext.RollbackHandler.NOOP_ROLLBACK_HANDLER);
}
