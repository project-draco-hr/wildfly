{
  super(reader);
  if (includedProfileResolver == null)   throw new IllegalArgumentException("includedProfileResolver is null");
  this.includedProfileResolver=includedProfileResolver;
  String name=null;
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    final String value=reader.getAttributeValue(i);
    if (reader.getAttributeNamespace(i) != null) {
      throw unexpectedAttribute(reader,i);
    }
 else {
      final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case NAME:
{
          name=value;
          break;
        }
default :
      throw unexpectedAttribute(reader,i);
  }
}
}
if (name == null) {
throw missingRequired(reader,Collections.singleton(Attribute.NAME));
}
this.name=name;
while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
switch (Namespace.forUri(reader.getNamespaceURI())) {
case DOMAIN_1_0:
{
    final Element element=Element.forName(reader.getLocalName());
switch (element) {
case INCLUDE:
{
        final ProfileIncludeElement include=new ProfileIncludeElement(reader);
        if (includedProfiles.containsKey(include.getProfile())) {
          throw new XMLStreamException("Included profile " + include.getProfile() + " already declared",reader.getLocation());
        }
        includedProfiles.put(include.getProfile(),include);
        break;
      }
default :
    throw unexpectedElement(reader);
}
break;
}
default :
{
ParseResult<AbstractSubsystemElement<?>> result=new ParseResult<AbstractSubsystemElement<?>>();
reader.handleAny(result);
AbstractSubsystemElement<?> subsystem=result.getResult();
QName qname=subsystem.getElementName();
if (subsystems.containsKey(qname)) {
throw new XMLStreamException("Subsystem " + qname + " already declared",reader.getLocation());
}
subsystems.put(qname,subsystem);
}
}
}
}
