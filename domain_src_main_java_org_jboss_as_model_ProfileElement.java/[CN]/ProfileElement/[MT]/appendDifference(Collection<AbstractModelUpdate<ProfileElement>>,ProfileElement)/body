{
  calculateDifference(target,safeCopyMap(includedProfiles),safeCopyMap(other.includedProfiles),new DifferenceHandler<String,ProfileIncludeElement,ProfileElement>(){
    public void handleAdd(    final Collection<AbstractModelUpdate<ProfileElement>> target,    final String name,    final ProfileIncludeElement newElement){
      throw new UnsupportedOperationException("implement me");
    }
    public void handleRemove(    final Collection<AbstractModelUpdate<ProfileElement>> target,    final String name,    final ProfileIncludeElement oldElement){
      throw new UnsupportedOperationException("implement me");
    }
    public void handleChange(    final Collection<AbstractModelUpdate<ProfileElement>> target,    final String name,    final ProfileIncludeElement oldElement,    final ProfileIncludeElement newElement){
      throw new IllegalStateException();
    }
  }
);
  calculateDifference(target,safeCopyMap(subsystems),safeCopyMap(other.subsystems),new DifferenceHandler<QName,AbstractSubsystemElement<? extends AbstractSubsystemElement<?>>,ProfileElement>(){
    public void handleAdd(    final Collection<AbstractModelUpdate<ProfileElement>> target,    final QName name,    final AbstractSubsystemElement<? extends AbstractSubsystemElement<?>> newElement){
      throw new UnsupportedOperationException("implement me");
    }
    public void handleRemove(    final Collection<AbstractModelUpdate<ProfileElement>> target,    final QName name,    final AbstractSubsystemElement<? extends AbstractSubsystemElement<?>> oldElement){
      throw new UnsupportedOperationException("implement me");
    }
    public void handleChange(    final Collection<AbstractModelUpdate<ProfileElement>> target,    final QName name,    final AbstractSubsystemElement<? extends AbstractSubsystemElement<?>> oldElement,    final AbstractSubsystemElement<? extends AbstractSubsystemElement<?>> newElement){
      throw new UnsupportedOperationException("implement me");
    }
  }
);
}
