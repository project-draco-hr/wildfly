{
  final KernelServices kernelServices=boot();
  final Logger logger=getLogger();
  for (int i=0; i < 50; i++) {
    logger.info(msg + i);
  }
  final ModelNode address=SUBSYSTEM_ADDRESS.toModelNode();
  final ModelNode op=SubsystemOperations.createOperation("read-log-file",address);
  op.get("name").set("simple.log");
  ModelNode result=executeOperation(kernelServices,op);
  List<String> logLines=SubsystemOperations.readResultAsList(result);
  assertEquals(10,logLines.size());
  checkLogLines(logLines,40);
  op.get("tail").set(false);
  result=executeOperation(kernelServices,op);
  logLines=SubsystemOperations.readResultAsList(result);
  assertEquals(10,logLines.size());
  checkLogLines(logLines,0);
  op.get("lines").set(20);
  result=executeOperation(kernelServices,op);
  logLines=SubsystemOperations.readResultAsList(result);
  assertEquals(20,logLines.size());
  checkLogLines(logLines,0);
  op.get("tail").set(true);
  result=executeOperation(kernelServices,op);
  logLines=SubsystemOperations.readResultAsList(result);
  assertEquals(20,logLines.size());
  checkLogLines(logLines,30);
  op.get("tail").set(true);
  op.get("skip").set(5);
  result=executeOperation(kernelServices,op);
  logLines=SubsystemOperations.readResultAsList(result);
  assertEquals(20,logLines.size());
  checkLogLines(logLines,25);
  op.get("tail").set(false);
  op.get("skip").set(5);
  result=executeOperation(kernelServices,op);
  logLines=SubsystemOperations.readResultAsList(result);
  assertEquals(20,logLines.size());
  checkLogLines(logLines,5);
  op.get("tail").set(false);
  op.get("lines").set(-1);
  op.remove("skip");
  result=executeOperation(kernelServices,op);
  logLines=SubsystemOperations.readResultAsList(result);
  assertEquals(50,logLines.size());
  checkLogLines(logLines,0);
  op.get("tail").set(false);
  op.get("lines").set(-1);
  op.get("skip").set(5);
  result=executeOperation(kernelServices,op);
  logLines=SubsystemOperations.readResultAsList(result);
  assertEquals(45,logLines.size());
  checkLogLines(logLines,5);
  final File file=new File(LoggingTestEnvironment.get().getLogDir(),op.get("name").asString());
  assertTrue("File does not exist",file.exists());
  if (file.setReadable(false)) {
    result=kernelServices.executeOperation(op);
    assertFalse("Should have failed due to denial of read permissions on the file.",SubsystemOperations.isSuccessfulOutcome(result));
    assertTrue("Could not reset file permissions",file.setReadable(true));
  }
  op.get("name").set("invalid");
  result=kernelServices.executeOperation(op);
  assertFalse("Should have failed due to invalid file.",SubsystemOperations.isSuccessfulOutcome(result));
}
