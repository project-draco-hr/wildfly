{
  final ModelNode address=operation.require(OP_ADDR);
  PathAddress path=context.getCurrentAddress();
  final String jndiName=JNDINAME.resolveModelAttribute(context,operation).asString();
  final String raName=path.getParent().getLastElement().getValue();
  final String archiveOrModuleName;
  ModelNode raModel=context.readResourceFromRoot(path.getParent()).getModel();
  final boolean statsEnabled=STATISTICS_ENABLED.resolveModelAttribute(context,raModel).asBoolean();
  if (!raModel.hasDefined(ARCHIVE.getName()) && !raModel.hasDefined(MODULE.getName())) {
    throw ConnectorLogger.ROOT_LOGGER.archiveOrModuleRequired();
  }
  if (raModel.get(ARCHIVE.getName()).isDefined()) {
    archiveOrModuleName=ARCHIVE.resolveModelAttribute(context,raModel).asString();
  }
 else {
    archiveOrModuleName=MODULE.resolveModelAttribute(context,raModel).asString();
  }
  final String poolName=PathAddress.pathAddress(address).getLastElement().getValue();
  try {
    ServiceName serviceName=ServiceName.of(ConnectorServices.RA_SERVICE,raName,poolName);
    ServiceName raServiceName=ServiceName.of(ConnectorServices.RA_SERVICE,raName);
    final ModifiableResourceAdapter ravalue=((ModifiableResourceAdapter)context.getServiceRegistry(false).getService(raServiceName).getValue());
    boolean isXa=ravalue.getTransactionSupport() == TransactionSupportEnum.XATransaction;
    final ModifiableConnDef connectionDefinitionValue=RaOperationUtil.buildConnectionDefinitionObject(context,resource.getModel(),poolName,isXa);
    final ServiceTarget serviceTarget=context.getServiceTarget();
    final ConnectionDefinitionService service=new ConnectionDefinitionService(connectionDefinitionValue);
    serviceTarget.addService(serviceName,service).setInitialMode(ServiceController.Mode.ACTIVE).addDependency(raServiceName,ModifiableResourceAdapter.class,service.getRaInjector()).install();
    ServiceRegistry registry=context.getServiceRegistry(true);
    final ServiceController<?> RaxmlController=registry.getService(ServiceName.of(ConnectorServices.RA_SERVICE,raName));
    Activation raxml=(Activation)RaxmlController.getValue();
    ServiceName deploymentServiceName=ConnectorServices.getDeploymentServiceName(archiveOrModuleName,raName);
    String bootStrapCtxName=DEFAULT_NAME;
    if (raxml.getBootstrapContext() != null && !raxml.getBootstrapContext().equals("undefined")) {
      bootStrapCtxName=raxml.getBootstrapContext();
    }
    ConnectionDefinitionStatisticsService connectionDefinitionStatisticsService=new ConnectionDefinitionStatisticsService(context.getResourceRegistrationForUpdate(),jndiName,poolName,statsEnabled);
    ServiceBuilder statsServiceBuilder=serviceTarget.addService(serviceName.append(ConnectorServices.STATISTICS_SUFFIX),connectionDefinitionStatisticsService);
    statsServiceBuilder.addDependency(ConnectorServices.BOOTSTRAP_CONTEXT_SERVICE.append(bootStrapCtxName),connectionDefinitionStatisticsService.getBootstrapContextInjector()).addDependency(deploymentServiceName,connectionDefinitionStatisticsService.getResourceAdapterDeploymentInjector()).setInitialMode(ServiceController.Mode.PASSIVE).install();
    PathElement peCD=PathElement.pathElement(Constants.STATISTICS_NAME,"pool");
    final Resource cdResource=new IronJacamarResource.IronJacamarRuntimeResource();
    resource.registerChild(peCD,cdResource);
    PathElement peExtended=PathElement.pathElement(Constants.STATISTICS_NAME,"extended");
    final Resource extendedResource=new IronJacamarResource.IronJacamarRuntimeResource();
    resource.registerChild(peExtended,extendedResource);
  }
 catch (  ValidateException e) {
    throw new OperationFailedException(e,new ModelNode().set(ConnectorLogger.ROOT_LOGGER.failedToCreate("ConnectionDefinition",operation,e.getLocalizedMessage())));
  }
}
