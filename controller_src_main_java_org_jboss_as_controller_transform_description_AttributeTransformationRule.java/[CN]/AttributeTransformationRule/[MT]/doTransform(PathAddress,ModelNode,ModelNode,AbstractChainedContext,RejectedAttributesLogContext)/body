{
  Map<String,String> renames=new HashMap<String,String>();
  Map<String,ModelNode> adds=new HashMap<String,ModelNode>();
  Set<String> newAttributes=new HashSet<String>();
  Set<String> discardedAttributes=new HashSet<String>();
  context.setImmutableResource(true);
  try {
    for (    final Map.Entry<String,AttributeTransformationDescription> entry : descriptions.entrySet()) {
      final String attributeName=entry.getKey();
      final boolean isNewAttribute=!modelOrOp.has(attributeName);
      final ModelNode attributeValue=modelOrOp.get(attributeName);
      if (isNewAttribute) {
        newAttributes.add(attributeName);
      }
      AttributeTransformationDescription description=entry.getValue();
      if (description.shouldDiscard(address,TransformationRule.cloneAndProtect(attributeValue),operation,context)) {
        modelOrOp.remove(attributeName);
        discardedAttributes.add(attributeName);
      }
      context.getContext().getLogger().logWarning(address,discardedAttributes);
      String newName=description.getNewName();
      if (newName != null) {
        renames.put(attributeName,newName);
      }
    }
    for (    final Map.Entry<String,AttributeTransformationDescription> entry : descriptions.entrySet()) {
      final String attributeName=entry.getKey();
      if (!discardedAttributes.contains(attributeName)) {
        final ModelNode attributeValue=modelOrOp.get(attributeName);
        AttributeTransformationDescription description=entry.getValue();
        description.rejectAttributes(rejectedAttributes,TransformationRule.cloneAndProtect(attributeValue));
      }
    }
    for (    final Map.Entry<String,AttributeTransformationDescription> entry : descriptions.entrySet()) {
      final String attributeName=entry.getKey();
      if (!discardedAttributes.contains(attributeName)) {
        final ModelNode attributeValue=modelOrOp.get(attributeName);
        AttributeTransformationDescription description=entry.getValue();
        description.convertValue(address,attributeValue,operation,context);
        if (!attributeValue.isDefined()) {
          modelOrOp.remove(attributeName);
        }
 else         if (newAttributes.contains(attributeName)) {
          adds.put(attributeName,attributeValue);
        }
      }
    }
  }
  finally {
    context.setImmutableResource(false);
  }
  if (renames.size() > 0) {
    for (    Map.Entry<String,String> entry : renames.entrySet()) {
      if (modelOrOp.has(entry.getKey())) {
        ModelNode model=modelOrOp.remove(entry.getKey());
        if (model.isDefined()) {
          modelOrOp.get(entry.getValue()).set(model);
        }
      }
    }
  }
  if (adds.size() > 0) {
    for (    Map.Entry<String,ModelNode> entry : adds.entrySet()) {
      modelOrOp.get(entry.getKey()).set(entry.getValue());
    }
  }
}
