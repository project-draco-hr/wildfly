{
  ControllerInitializer controllerInitializer=additionalInit.createControllerInitializer();
  PathManagerService pathManager=new PathManagerService(){
  }
;
  controllerInitializer.setPathManger(pathManager);
  additionalInit.setupController(controllerInitializer);
  ServiceContainer container=ServiceContainer.Factory.create("test" + counter.incrementAndGet());
  ServiceTarget target=container.subTarget();
  List<ModelNode> extraOps=controllerInitializer.initializeBootOperations();
  List<ModelNode> allOps=new ArrayList<ModelNode>();
  if (extraOps != null) {
    allOps.addAll(extraOps);
  }
  allOps.addAll(bootOperations);
  StringConfigurationPersister persister=new StringConfigurationPersister(allOps,testParser,persistXml);
  controllerExtensionRegistry.setWriterRegistry(persister);
  controllerExtensionRegistry.setPathManager(pathManager);
  TestModelControllerFactory testModelControllerFactory=StandardTestModelControllerServiceFactory.INSTANCE;
  if (legacyModelVersion != null) {
    ServiceLoader<TestModelControllerFactory> factoryLoader=ServiceLoader.load(TestModelControllerFactory.class,AbstractKernelServicesImpl.class.getClassLoader());
    for (    TestModelControllerFactory factory : factoryLoader) {
      testModelControllerFactory=factory;
      break;
    }
  }
  ModelTestModelControllerService svc=testModelControllerFactory.create(mainExtension,controllerInitializer,additionalInit,controllerExtensionRegistry,persister,validateOpsFilter,registerTransformers);
  ServiceBuilder<ModelController> builder=target.addService(Services.JBOSS_SERVER_CONTROLLER,svc);
  builder.addDependency(PathManagerService.SERVICE_NAME);
  builder.install();
  target.addService(PathManagerService.SERVICE_NAME,pathManager).install();
  additionalInit.addExtraServices(target);
  svc.waitForSetup();
  AbstractKernelServicesImpl kernelServices=legacyModelVersion == null ? new MainKernelServicesImpl(container,svc,persister,svc.getRootRegistration(),new OperationValidator(svc.getRootRegistration()),mainSubsystemName,controllerExtensionRegistry,legacyModelVersion,svc.isSuccessfulBoot(),svc.getBootError(),registerTransformers) : new LegacyKernelServicesImpl(container,svc,persister,svc.getRootRegistration(),new OperationValidator(svc.getRootRegistration()),mainSubsystemName,controllerExtensionRegistry,legacyModelVersion,svc.isSuccessfulBoot(),svc.getBootError(),registerTransformers);
  return kernelServices;
}
