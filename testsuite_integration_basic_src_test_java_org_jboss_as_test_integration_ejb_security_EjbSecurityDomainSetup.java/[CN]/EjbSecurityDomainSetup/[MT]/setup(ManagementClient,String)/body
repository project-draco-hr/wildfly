{
  final ModelNode compositeOp=new ModelNode();
  compositeOp.get(OP).set(COMPOSITE);
  compositeOp.get(OP_ADDR).setEmptyList();
  ModelNode steps=compositeOp.get(STEPS);
  PathAddress securityDomainAddress=PathAddress.pathAddress().append(SUBSYSTEM,"security").append(SECURITY_DOMAIN,getSecurityDomainName());
  steps.add(Util.createAddOperation(securityDomainAddress));
  PathAddress authAddress=securityDomainAddress.append(AUTHENTICATION,Constants.CLASSIC);
  steps.add(Util.createAddOperation(authAddress));
  ModelNode op=Util.createAddOperation(authAddress.append(Constants.LOGIN_MODULE,"Remoting"));
  op.get(CODE).set("Remoting");
  if (isUsersRolesRequired()) {
    op.get(FLAG).set("optional");
  }
 else {
    op.get(FLAG).set("required");
  }
  op.get(Constants.MODULE_OPTIONS).add("password-stacking","useFirstPass");
  steps.add(op);
  if (isUsersRolesRequired()) {
    ModelNode loginModule=Util.createAddOperation(authAddress.append(Constants.LOGIN_MODULE,"UsersRoles"));
    loginModule.get(CODE).set("UsersRoles");
    loginModule.get(FLAG).set("required");
    loginModule.get(Constants.MODULE_OPTIONS).add("password-stacking","useFirstPass");
    loginModule.get(OPERATION_HEADERS).get(ALLOW_RESOURCE_SERVICE_RESTART).set(true);
    steps.add(loginModule);
  }
  System.out.println(compositeOp);
  applyUpdates(managementClient.getControllerClient(),Arrays.asList(compositeOp));
}
