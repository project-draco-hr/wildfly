{
  final ModelNode opAddr=operation.require(OP_ADDR);
  final ModelNode model=context.getSubModel();
  final ModelNode compensating=Util.getEmptyOperation(ADD,opAddr);
  final String driverName=model.get(DRIVER_NAME).asString();
  compensating.get(DRIVER_NAME).set(model.get(DRIVER_NAME));
  compensating.get(DRIVER_MODULE_NAME).set(model.get(DRIVER_MODULE_NAME));
  compensating.get(DRIVER_MAJOR_VERSION).set(model.get(DRIVER_MAJOR_VERSION));
  compensating.get(DRIVER_MINOR_VERSION).set(model.get(DRIVER_MINOR_VERSION));
  compensating.get(DRIVER_CLASS_NAME).set(model.get(DRIVER_CLASS_NAME));
  compensating.get(DRIVER_XA_DATASOURCE_CLASS_NAME).set(model.get(DRIVER_XA_DATASOURCE_CLASS_NAME));
  if (context.getRuntimeContext() != null) {
    context.getRuntimeContext().setRuntimeTask(new RuntimeTask(){
      public void execute(      final RuntimeTaskContext context) throws OperationFailedException {
        final ServiceRegistry registry=context.getServiceRegistry();
        final ServiceName serviceName=ServiceName.JBOSS.append("jdbc-driver",driverName);
        final ServiceController<?> controller=registry.getService(serviceName);
        if (controller != null) {
          controller.setMode(ServiceController.Mode.REMOVE);
        }
        resultHandler.handleResultComplete();
      }
    }
);
  }
 else {
    resultHandler.handleResultComplete();
  }
  return new BasicOperationResult(compensating);
}
