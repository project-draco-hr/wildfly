{
  final ModelNode opAddr=operation.require(OP_ADDR);
  final ModelNode model=context.getSubModel();
  final ModelNode compensating=Util.getEmptyOperation(ADD,opAddr);
  final String moduleName=model.get(MODULE).asString();
  compensating.get(MODULE).set(model.get(MODULE));
  if (context.getRuntimeContext() != null) {
    context.getRuntimeContext().setRuntimeTask(new RuntimeTask(){
      public void execute(      final RuntimeTaskContext context) throws OperationFailedException {
        final ServiceRegistry registry=context.getServiceRegistry();
        final Module module;
        try {
          module=Module.getCallerModuleLoader().loadModule(ModuleIdentifier.create(moduleName));
        }
 catch (        ModuleLoadException e) {
          throw new OperationFailedException(e,new ModelNode().set("Failed to load module for driver [" + moduleName + "]"));
        }
        final ServiceLoader<Driver> serviceLoader=module.loadService(Driver.class);
        if (serviceLoader != null)         for (        Driver driver : serviceLoader) {
          final int majorVersion=driver.getMajorVersion();
          final int minorVersion=driver.getMinorVersion();
          final ServiceName serviceName=ServiceName.JBOSS.append("jdbc-driver",driver.getClass().getName(),Integer.toString(majorVersion),Integer.toString(minorVersion));
          final ServiceController<?> controller=registry.getService(serviceName);
          if (controller != null) {
            controller.addListener(new ResultHandler.ServiceRemoveListener(resultHandler));
          }
        }
        resultHandler.handleResultComplete();
      }
    }
);
  }
 else {
    resultHandler.handleResultComplete();
  }
  return new BasicOperationResult(compensating);
}
