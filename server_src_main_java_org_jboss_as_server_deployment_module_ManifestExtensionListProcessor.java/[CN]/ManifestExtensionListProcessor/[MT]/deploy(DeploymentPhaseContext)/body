{
  final Manifest manifest=phaseContext.getAttachment(Attachments.MANIFEST);
  if (manifest == null) {
    return;
  }
  final Attributes mainAttributes=manifest.getMainAttributes();
  final String extensionListString=mainAttributes.getValue(EXTENSION_LIST);
  if (extensionListString == null) {
    return;
  }
  final String[] items=extensionListString.split("\\s+");
  for (  String item : items) {
    final String extensionName=mainAttributes.getValue(item + "-" + EXTENSION_NAME);
    if (extensionName == null) {
      throw new DeploymentUnitProcessingException("Missing required manifest attribute: " + item + "-"+ EXTENSION_NAME);
    }
    final String specificationVersion=mainAttributes.getValue(item + "-" + SPECIFICATION_VERSION);
    final String implementationVersion=mainAttributes.getValue(item + "-" + IMPLEMENTATION_VERSION);
    final String implementationVendorId=mainAttributes.getValue(item + "-" + IMPLEMENTATION_VENDOR_ID);
    final String implementationUrl=mainAttributes.getValue(item + "-" + IMPLEMENTATION_URL);
    if (implementationUrl == null) {
      throw new DeploymentUnitProcessingException("Missing required manifest attribute: " + item + "-"+ IMPLEMENTATION_URL);
    }
    try {
      phaseContext.addToAttachmentList(Attachments.EXTENSION_LIST_ENTRIES,new ExtensionListEntry(item,extensionName,specificationVersion,implementationVersion,implementationVendorId,new URI(implementationUrl)));
    }
 catch (    URISyntaxException e) {
      throw new DeploymentUnitProcessingException("Invalid value given for manifest attribute: " + item + "-"+ IMPLEMENTATION_URL,e);
    }
  }
}
