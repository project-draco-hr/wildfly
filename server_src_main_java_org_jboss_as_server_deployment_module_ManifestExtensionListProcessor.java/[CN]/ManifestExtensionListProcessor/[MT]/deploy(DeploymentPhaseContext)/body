{
  final DeploymentUnit deploymentUnit=phaseContext.getDeploymentUnit();
  final Manifest manifest=deploymentUnit.getAttachment(Attachments.MANIFEST);
  if (manifest == null) {
    return;
  }
  final Attributes mainAttributes=manifest.getMainAttributes();
  final String extensionListString=mainAttributes.getValue(EXTENSION_LIST);
  if (extensionListString == null) {
    return;
  }
  final String[] items=extensionListString.split("\\s+");
  boolean added=false;
  for (  String item : items) {
    final String extensionName=mainAttributes.getValue(item + "-" + EXTENSION_NAME);
    if (extensionName == null) {
      log.warnf("Extension %s is missing the required manifest attribute %s-%s (skipping extension)",item,item,EXTENSION_NAME);
      continue;
    }
    final String specificationVersion=mainAttributes.getValue(item + "-" + SPECIFICATION_VERSION);
    final String implementationVersion=mainAttributes.getValue(item + "-" + IMPLEMENTATION_VERSION);
    final String implementationVendorId=mainAttributes.getValue(item + "-" + IMPLEMENTATION_VENDOR_ID);
    final String implementationUrl=mainAttributes.getValue(item + "-" + IMPLEMENTATION_URL);
    if (implementationUrl == null) {
      log.debugf("Extension %s is missing the required manifest attribute %s-%s",item,item,IMPLEMENTATION_URL);
    }
    URI implementationUri=null;
    try {
      implementationUri=new URI(implementationUrl);
    }
 catch (    URISyntaxException e) {
      log.warnf("Extension %s URI syntax is invalid: %s",item,e);
    }
    deploymentUnit.addToAttachmentList(Attachments.EXTENSION_LIST_ENTRIES,new ExtensionListEntry(item,extensionName,specificationVersion,implementationVersion,implementationVendorId,implementationUri));
    added=true;
  }
  if (added) {
    phaseContext.addToAttachmentList(Attachments.NEXT_PHASE_DEPS,Services.JBOSS_DEPLOYMENT_EXTENSION_INDEX);
  }
}
