{
  int offset=2;
  ctx.printLine("\nSYNOPSIS\n");
  final StringBuilder buf=new StringBuilder();
  buf.append("  ").append(commandName).append(" --help [--properties | --commands] |\n");
  if (isDependsOnProfile() && ctx.isDomainMode()) {
    for (int i=0; i <= commandName.length() + offset; ++i) {
      buf.append(' ');
    }
    buf.append("--profile=<profile_name>\n");
  }
  for (int i=0; i <= commandName.length() + offset; ++i) {
    buf.append(' ');
  }
  buf.append('(').append(name.getFullName()).append("=<resource_id> (--<property>=<value>)*) |\n");
  for (int i=0; i <= commandName.length() + offset; ++i) {
    buf.append(' ');
  }
  buf.append("(<command> ").append(name.getFullName()).append("=<resource_id> (--<parameter>=<value>)*)");
  buf.append('\n');
  for (int i=0; i <= commandName.length() + offset; ++i) {
    buf.append(' ');
  }
  buf.append("[--headers={<operation_header> (;<operation_header>)*}]");
  ctx.printLine(buf.toString());
  ctx.printLine("\n\nDESCRIPTION\n");
  buf.setLength(0);
  buf.append("The command is used to manage resources of type ");
  buf.append(this.nodeType);
  buf.append(".");
  formatText(ctx,buf,offset);
  ctx.printLine("\n\nRESOURCE DESCRIPTION\n");
  if (isDependsOnProfile() && ctx.isDomainMode() && profile.getValue(ctx.getParsedCommandLine()) == null) {
    buf.setLength(0);
    buf.append("(Execute '");
    buf.append(commandName).append(" --profile=<profile_name> --help' to include the resource description here.)");
    formatText(ctx,buf,offset);
  }
 else {
    ModelNode request=initRequest(ctx);
    if (request == null) {
      return;
    }
    request.get(Util.OPERATION).set(Util.READ_RESOURCE_DESCRIPTION);
    ModelNode result=null;
    try {
      result=ctx.getModelControllerClient().execute(request);
      if (!result.hasDefined(Util.RESULT)) {
        throw new CommandFormatException("Node description is not available.");
      }
      result=result.get(Util.RESULT);
      if (!result.hasDefined(Util.DESCRIPTION)) {
        throw new CommandFormatException("Node description is not available.");
      }
    }
 catch (    Exception e) {
    }
    buf.setLength(0);
    if (result != null) {
      buf.append(result.get(Util.DESCRIPTION).asString());
    }
 else {
      buf.append("N/A. Please, open a jira issue at https://issues.jboss.org/browse/AS7 to get this fixed. Thanks!");
    }
    formatText(ctx,buf,offset);
  }
  ctx.printLine("\n\nARGUMENTS\n");
  formatProperty(ctx,"--help","prints this content.");
  formatProperty(ctx,"--help --properties","prints the list of the resource properties including their access-type " + "(read/write/metric), value type, and the description.");
  formatProperty(ctx,"--help --commands","prints the list of the commands available for the resource." + " To get the complete description of a specific command (including its parameters, " + "their types and descriptions), execute " + commandName + " <command> --help.");
  if (isDependsOnProfile() && ctx.isDomainMode()) {
    formatProperty(ctx,"--profile","the name of the profile the target resource belongs to.");
  }
  buf.setLength(0);
  if (idProperty == null) {
    buf.append("is the name of the resource that completes the path ").append(nodeType).append(" and ");
  }
 else {
    buf.append("corresponds to a property of the resource which ");
  }
  buf.append("is used to identify the resource against which the command should be executed.");
  formatProperty(ctx,name.getFullName(),buf);
  formatProperty(ctx,"<property>","property name of the resource whose value should be updated. " + "For a complete list of available property names, their types and descriptions, execute " + commandName + " --help --properties.");
  formatProperty(ctx,"<command>","command name provided by the resource. For a complete list of available commands execute " + commandName + " --help --commands.");
  formatProperty(ctx,"<parameter>","parameter name of the <command> provided by the resource. " + "For a complete list of available parameter names of a specific <command>, " + "their types and descriptions execute " + commandName + " <command> --help.");
  formatProperty(ctx,"--headers","a list of operation headers separated by a semicolon. For the list of supported " + "headers, please, refer to the domain management documentation or use tab-completion.");
}
