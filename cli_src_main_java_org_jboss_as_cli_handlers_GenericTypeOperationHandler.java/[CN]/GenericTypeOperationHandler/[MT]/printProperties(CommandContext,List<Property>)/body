{
  final Map<String,StringBuilder> requiredProps=new LinkedHashMap<String,StringBuilder>();
  requiredProps.put(this.name.getFullName(),new StringBuilder().append("Required argument in commands which identifies the instance to execute the command against."));
  final Map<String,StringBuilder> optionalProps=new LinkedHashMap<String,StringBuilder>();
  String accessType=null;
  for (  Property attr : props) {
    final ModelNode value=attr.getValue();
    if (value.has(Util.ACCESS_TYPE)) {
      accessType=value.get(Util.ACCESS_TYPE).asString();
    }
    final boolean required=value.hasDefined("required") ? value.get("required").asBoolean() : false;
    final StringBuilder descr=new StringBuilder();
    final String type=value.has(Util.TYPE) ? value.get(Util.TYPE).asString() : "no type info";
    if (value.hasDefined(Util.DESCRIPTION)) {
      descr.append('(');
      descr.append(type);
      if (accessType != null) {
        descr.append(',').append(accessType);
      }
      descr.append(") ");
      descr.append(value.get("description").asString());
    }
 else     if (descr.length() == 0) {
      descr.append("no description.");
    }
    if (required) {
      if (idProperty != null && idProperty.equals(attr.getName())) {
        if (descr.charAt(descr.length() - 1) != '.') {
          descr.append('.');
        }
        requiredProps.get(this.name.getFullName()).insert(0,' ').insert(0,descr.toString());
      }
 else {
        requiredProps.put("--" + attr.getName(),descr);
      }
    }
 else {
      optionalProps.put("--" + attr.getName(),descr);
    }
  }
  ctx.printLine("\n");
  if (accessType == null) {
    ctx.printLine("REQUIRED ARGUMENTS:\n");
  }
  for (  String argName : requiredProps.keySet()) {
    formatProperty(ctx,argName,requiredProps.get(argName));
  }
  if (!optionalProps.isEmpty()) {
    if (accessType == null) {
      ctx.printLine("\n\nOPTIONAL ARGUMENTS:\n");
    }
    for (    String argName : optionalProps.keySet()) {
      formatProperty(ctx,argName,optionalProps.get(argName));
    }
  }
}
