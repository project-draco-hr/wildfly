{
  ParsedCommandLine args=ctx.getParsedCommandLine();
  try {
    if (!name.isValueComplete(args)) {
      return staticArgs;
    }
  }
 catch (  CommandFormatException e) {
    return Collections.emptyList();
  }
  final String op=operation.getValue(args);
  if (op == null) {
    if (nodeProps == null) {
      nodeProps=new ArrayList<CommandArgument>();
      for (      Property prop : getNodeProperties(ctx)) {
        final ModelNode propDescr=prop.getValue();
        if (propDescr.has("access-type") && "read-write".equals(propDescr.get("access-type").asString())) {
          if (propDescr.has("type") && ModelType.BOOLEAN == propDescr.get("type").asType()) {
            nodeProps.add(new ArgumentWithValue(GenericTypeOperationHandler.this,SimpleTabCompleter.BOOLEAN,"--" + prop.getName()));
          }
 else {
            nodeProps.add(new ArgumentWithValue(GenericTypeOperationHandler.this,"--" + prop.getName()));
          }
        }
      }
    }
    return nodeProps;
  }
 else {
    if (propsByOp == null) {
      propsByOp=new HashMap<String,List<CommandArgument>>();
    }
    List<CommandArgument> opProps=propsByOp.get(op);
    if (opProps == null) {
      final ModelNode descr;
      try {
        descr=getOperationDescription(ctx,op);
      }
 catch (      IOException e1) {
        return Collections.emptyList();
      }
      if (descr == null || !descr.has("request-properties")) {
        opProps=Collections.emptyList();
      }
 else {
        opProps=new ArrayList<CommandArgument>();
        for (        Property prop : descr.get("request-properties").asPropertyList()) {
          final ModelNode propDescr=prop.getValue();
          if (propDescr.has("type") && ModelType.BOOLEAN == propDescr.get("type").asType()) {
            opProps.add(new ArgumentWithValue(GenericTypeOperationHandler.this,SimpleTabCompleter.BOOLEAN,"--" + prop.getName()));
          }
 else {
            opProps.add(new ArgumentWithValue(GenericTypeOperationHandler.this,"--" + prop.getName()));
          }
        }
      }
      propsByOp.put(op,opProps);
    }
    return opProps;
  }
}
