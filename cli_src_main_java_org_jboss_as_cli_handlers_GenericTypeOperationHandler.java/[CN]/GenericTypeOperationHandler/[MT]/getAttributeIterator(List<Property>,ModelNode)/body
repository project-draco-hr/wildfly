{
  final ModelNode attrAccessControl;
  if (accessControl != null) {
    if (accessControl.has(Util.DEFAULT)) {
      final ModelNode def=accessControl.get(Util.DEFAULT);
      if (def.has(Util.ATTRIBUTES)) {
        attrAccessControl=def.get(Util.ATTRIBUTES);
      }
 else {
        attrAccessControl=null;
      }
    }
 else {
      attrAccessControl=null;
    }
  }
 else {
    attrAccessControl=null;
  }
  return new Iterator<AttributeDescription>(){
    final Iterator<Property> properties=props.iterator();
    private Property current;
    private AttributeDescription descr=new AttributeDescription(){
      @Override public String getName(){
        return current.getName();
      }
      @Override public ModelType getType(){
        final ModelNode value=getProperty(Util.TYPE);
        return value == null ? null : value.asType();
      }
      @Override public String getAccess(){
        if (attrAccessControl != null && attrAccessControl.has(current.getName())) {
          final ModelNode accessSpec=attrAccessControl.get(current.getName());
          final StringBuilder buf=new StringBuilder();
          if (accessSpec.get(Util.READ).asBoolean()) {
            buf.append(Util.READ).append('-');
          }
          if (accessSpec.get(Util.WRITE).asBoolean()) {
            buf.append(Util.WRITE);
            if (buf.length() == 5) {
              buf.append("-only");
            }
          }
 else {
            buf.append("only");
          }
          return buf.toString();
        }
 else {
          final ModelNode value=getProperty(Util.ACCESS_TYPE);
          return value == null ? null : value.asString();
        }
      }
      @Override public boolean isWriteAllowed(){
        if (attrAccessControl != null && attrAccessControl.has(current.getName())) {
          final ModelNode accessSpec=attrAccessControl.get(current.getName());
          if (accessSpec.get(Util.WRITE).asBoolean()) {
            return true;
          }
          return false;
        }
        final ModelNode value=getProperty(Util.ACCESS_TYPE);
        if (value == null) {
          return false;
        }
        return Util.READ_WRITE.equals(value.asString());
      }
      @Override public String getDescription(){
        final ModelNode value=getProperty(Util.DESCRIPTION);
        return value == null ? null : value.asString();
      }
      @Override public ModelNode getProperty(      String name){
        if (current.getValue().has(name)) {
          return current.getValue().get(name);
        }
        return null;
      }
      @Override public boolean getBooleanProperty(      String name){
        if (current.getValue().has(name)) {
          return current.getValue().get(name).asBoolean();
        }
        return false;
      }
    }
;
    @Override public boolean hasNext(){
      return properties.hasNext();
    }
    @Override public AttributeDescription next(){
      current=properties.next();
      return descr;
    }
    @Override public void remove(){
      throw new UnsupportedOperationException();
    }
  }
;
}
