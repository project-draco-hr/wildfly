{
  super(ctx,"generic-type-operation",true);
  if (nodeType == null || nodeType.isEmpty()) {
    throw new IllegalArgumentException("Node type is " + (nodeType == null ? "null." : "empty."));
  }
  if (nodeType.startsWith("/profile=") || nodeType.startsWith("profile=")) {
    int nextSep=nodeType.indexOf('/',7);
    if (nextSep < 0) {
      throw new IllegalArgumentException("Failed to determine the path after the profile in '" + nodeType + "'.");
    }
    nodeType=nodeType.substring(nextSep);
    this.nodeType=nodeType;
  }
 else {
    this.nodeType=nodeType;
  }
  helpArg=new ArgumentWithoutValue(this,"--help","-h");
  addRequiredPath(nodeType);
  this.commandName=getRequiredType();
  if (this.commandName == null) {
    throw new IllegalArgumentException("The node path doesn't end on a type: '" + nodeType + "'");
  }
  this.idProperty=idProperty;
  if (excludeOperations != null) {
    this.excludedOps=new HashSet<String>(Arrays.asList(excludeOperations));
  }
 else {
    excludedOps=Collections.emptySet();
  }
  profile=new ArgumentWithValue(this,new DefaultCompleter(new CandidatesProvider(){
    @Override public List<String> getAllCandidates(    CommandContext ctx){
      return Util.getNodeNames(ctx.getModelControllerClient(),null,Util.PROFILE);
    }
  }
),"--profile"){
    @Override public boolean canAppearNext(    CommandContext ctx) throws CommandFormatException {
      if (!isDependsOnProfile()) {
        return false;
      }
      if (!ctx.isDomainMode()) {
        return false;
      }
      return super.canAppearNext(ctx);
    }
  }
;
  operation=new ArgumentWithValue(this,new DefaultCompleter(new CandidatesProvider(){
    @Override public Collection<String> getAllCandidates(    CommandContext ctx){
      DefaultOperationRequestAddress address=new DefaultOperationRequestAddress();
      if (isDependsOnProfile() && ctx.isDomainMode()) {
        final String profileName=profile.getValue(ctx.getParsedCommandLine());
        if (profileName == null) {
          return Collections.emptyList();
        }
        address.toNode(Util.PROFILE,profileName);
      }
      for (      OperationRequestAddress.Node node : getRequiredAddress()) {
        address.toNode(node.getType(),node.getName());
      }
      address.toNode(getRequiredType(),"?");
      Collection<String> ops=Util.getOperationNames(ctx,address);
      ops.removeAll(excludedOps);
      if (customHandlers != null) {
        if (ops.isEmpty()) {
          ops=customHandlers.keySet();
        }
 else {
          ops=new HashSet<String>(ops);
          for (          Map.Entry<String,OperationCommandWithDescription> entry : customHandlers.entrySet()) {
            if (entry.getValue().isAvailable(ctx)) {
              ops.add(entry.getKey());
            }
 else {
              ops.remove(entry.getKey());
            }
          }
        }
      }
      return ops;
    }
  }
),0,"--operation"){
    @Override public boolean canAppearNext(    CommandContext ctx) throws CommandFormatException {
      if (isDependsOnProfile() && ctx.isDomainMode() && !profile.isValueComplete(ctx.getParsedCommandLine())) {
        return false;
      }
      return super.canAppearNext(ctx);
    }
  }
;
  operation.addCantAppearAfter(helpArg);
  name=new ArgumentWithValue(this,new DefaultCompleter(new DefaultCompleter.CandidatesProvider(){
    @Override public List<String> getAllCandidates(    CommandContext ctx){
      ModelControllerClient client=ctx.getModelControllerClient();
      if (client == null) {
        return Collections.emptyList();
      }
      DefaultOperationRequestAddress address=new DefaultOperationRequestAddress();
      if (isDependsOnProfile() && ctx.isDomainMode()) {
        final String profileName=profile.getValue(ctx.getParsedCommandLine());
        if (profile == null) {
          return Collections.emptyList();
        }
        address.toNode(Util.PROFILE,profileName);
      }
      for (      OperationRequestAddress.Node node : getRequiredAddress()) {
        address.toNode(node.getType(),node.getName());
      }
      return Util.getNodeNames(ctx.getModelControllerClient(),address,getRequiredType());
    }
  }
),(idProperty == null ? "--name" : "--" + idProperty)){
    @Override public boolean canAppearNext(    CommandContext ctx) throws CommandFormatException {
      if (isDependsOnProfile() && ctx.isDomainMode() && !profile.isValueComplete(ctx.getParsedCommandLine())) {
        return false;
      }
      return super.canAppearNext(ctx);
    }
  }
;
  name.addCantAppearAfter(helpArg);
  helpArg.addCantAppearAfter(name);
  helpProperties=new ArgumentWithoutValue(this,"--properties");
  helpProperties.addRequiredPreceding(helpArg);
  helpProperties.addCantAppearAfter(operation);
  helpCommands=new ArgumentWithoutValue(this,"--commands");
  helpCommands.addRequiredPreceding(helpArg);
  helpCommands.addCantAppearAfter(operation);
  helpCommands.addCantAppearAfter(helpProperties);
  helpProperties.addCantAppearAfter(helpCommands);
  staticArgs.put(helpArg.getFullName(),helpArg);
  staticArgs.put(helpCommands.getFullName(),helpCommands);
  staticArgs.put(helpProperties.getFullName(),helpProperties);
  staticArgs.put(profile.getFullName(),profile);
  staticArgs.put(name.getFullName(),name);
  staticArgs.put(operation.getFullName(),operation);
}
