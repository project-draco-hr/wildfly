{
  super("generic-type-operation",true);
  nodePath=new DefaultOperationRequestAddress();
  OperationRequestParser.CallbackHandler handler=new DefaultOperationCallbackHandler(nodePath);
  try {
    DefaultOperationRequestParser.INSTANCE.parse(nodeType,handler);
  }
 catch (  CommandFormatException e) {
    throw new IllegalArgumentException("Failed to parse nodeType: " + e.getMessage());
  }
  if (!nodePath.endsOnType()) {
    throw new IllegalArgumentException("The node path doesn't end on a type: '" + nodeType + "'");
  }
  this.type=nodePath.getNodeType();
  nodePath.toParentNode();
  this.typeOps=typeOperations;
  this.excludeOps=excludeOperations;
  profile=new ArgumentWithValue(this,new DefaultCompleter(new CandidatesProvider(){
    @Override public List<String> getAllCandidates(    CommandContext ctx){
      return Util.getNodeNames(ctx.getModelControllerClient(),null,"profile");
    }
  }
),"--profile"){
    @Override public boolean canAppearNext(    CommandContext ctx) throws CommandFormatException {
      if (!ctx.isDomainMode()) {
        return false;
      }
      return super.canAppearNext(ctx);
    }
  }
;
  name=new ArgumentWithValue(this,new DefaultCompleter(new DefaultCompleter.CandidatesProvider(){
    @Override public List<String> getAllCandidates(    CommandContext ctx){
      ModelControllerClient client=ctx.getModelControllerClient();
      if (client == null) {
        return Collections.emptyList();
      }
      DefaultOperationRequestAddress address=new DefaultOperationRequestAddress();
      if (ctx.isDomainMode()) {
        final String profileName=profile.getValue(ctx.getParsedArguments());
        if (profile == null) {
          return Collections.emptyList();
        }
        address.toNode("profile",profileName);
      }
      for (      OperationRequestAddress.Node node : nodePath) {
        address.toNode(node.getType(),node.getName());
      }
      return Util.getNodeNames(ctx.getModelControllerClient(),address,type);
    }
  }
),idName){
    @Override public boolean canAppearNext(    CommandContext ctx) throws CommandFormatException {
      if (ctx.isDomainMode() && !profile.isPresent(ctx.getParsedArguments())) {
        return false;
      }
      return super.canAppearNext(ctx);
    }
  }
;
  operation=new ArgumentWithValue(this,new DefaultCompleter(new CandidatesProvider(){
    @Override public List<String> getAllCandidates(    CommandContext ctx){
      final String theName=name.getValue(ctx.getParsedArguments());
      if (theName == null) {
        return typeOps;
      }
      DefaultOperationRequestAddress address=new DefaultOperationRequestAddress();
      if (ctx.isDomainMode()) {
        final String profileName=profile.getValue(ctx.getParsedArguments());
        if (profile == null) {
          return Collections.emptyList();
        }
        address.toNode("profile",profileName);
      }
      for (      OperationRequestAddress.Node node : nodePath) {
        address.toNode(node.getType(),node.getName());
      }
      address.toNode(type,theName);
      List<String> ops=ctx.getOperationCandidatesProvider().getOperationNames(address);
      ops.removeAll(excludeOps);
      return ops;
    }
  }
),0,"--operation"){
    @Override public boolean canAppearNext(    CommandContext ctx) throws CommandFormatException {
      if (ctx.isDomainMode() && !profile.isPresent(ctx.getParsedArguments())) {
        return false;
      }
      return super.canAppearNext(ctx);
    }
  }
;
  props=new ArgumentWithValue(this,new DefaultCompleter(new CandidatesProvider(){
    @Override public List<String> getAllCandidates(    CommandContext ctx){
      ParsedArguments args=ctx.getParsedArguments();
      final String theName=name.getValue(args);
      if (theName == null) {
        return Collections.emptyList();
      }
      final String op=operation.getValue(args);
      if (op == null) {
        return Collections.emptyList();
      }
      final List<String> allProps;
      if (typeOps.contains(op)) {
        ModelNode request=new ModelNode();
        ModelNode address=request.get("address");
        if (ctx.isDomainMode()) {
          final String profileName=profile.getValue(ctx.getParsedArguments());
          if (profile == null) {
            return Collections.emptyList();
          }
          address.add("profile",profileName);
        }
        for (        OperationRequestAddress.Node node : nodePath) {
          address.add(node.getType(),node.getName());
        }
        address.add(type,"*");
        request.get("operation").set("read-operation-description");
        request.get("name").set(op);
        try {
          ModelNode result=ctx.getModelControllerClient().execute(request);
          if (!result.hasDefined("result")) {
            return Collections.emptyList();
          }
          result=result.get("result");
          if (!result.hasDefined("step-1")) {
            return Collections.emptyList();
          }
          result=result.get("step-1");
          if (!result.hasDefined("result")) {
            return Collections.emptyList();
          }
          allProps=Util.getRequestPropertyNames(result);
        }
 catch (        Exception e) {
          e.printStackTrace();
          return Collections.emptyList();
        }
      }
 else {
        DefaultOperationRequestAddress address=new DefaultOperationRequestAddress();
        if (ctx.isDomainMode()) {
          final String profileName=profile.getValue(args);
          if (profile == null) {
            return Collections.emptyList();
          }
          address.toNode("profile=",profileName);
        }
        for (        OperationRequestAddress.Node node : nodePath) {
          address.toNode(node.getType(),node.getName());
        }
        address.toNode(type,theName);
        allProps=ctx.getOperationCandidatesProvider().getPropertyNames(op,address);
      }
      if (allProps.size() > 0) {
        try {
          Set<String> specified=args.getArgumentNames();
          int i=0;
          while (i < allProps.size()) {
            final String propName="--" + allProps.get(i);
            if (specified.contains(propName)) {
              allProps.remove(i);
            }
 else {
              allProps.set(i,propName + "=");
              ++i;
            }
          }
        }
 catch (        CommandFormatException e) {
          return Collections.emptyList();
        }
      }
      return allProps;
    }
  }
),2,"--props"){
    @Override public boolean canAppearNext(    CommandContext ctx) throws CommandFormatException {
      if (ctx.isDomainMode() && !profile.isPresent(ctx.getParsedArguments())) {
        return false;
      }
      return super.canAppearNext(ctx);
    }
    @Override public boolean isPresent(    ParsedArguments args) throws CommandFormatException {
      return false;
    }
  }
;
  props.addRequiredPreceding(operation);
}
