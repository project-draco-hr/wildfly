{
  final ParsedCommandLine parsedArgs=ctx.getParsedCommandLine();
  final ModelNode request=new ModelNode();
  final ModelNode address=request.get(Util.ADDRESS);
  if (isDependsOnProfile() && ctx.isDomainMode()) {
    final String profile=GenericTypeOperationHandler.this.profile.getValue(parsedArgs);
    if (profile == null) {
      throw new OperationFormatException("Required argument --profile is missing.");
    }
    address.add(Util.PROFILE,profile);
  }
  final String name=GenericTypeOperationHandler.this.name.getValue(ctx.getParsedCommandLine(),true);
  for (  OperationRequestAddress.Node node : getRequiredAddress()) {
    address.add(node.getType(),node.getName());
  }
  address.add(getRequiredType(),name);
  request.get(Util.OPERATION).set(opName);
  for (  String argName : parsedArgs.getPropertyNames()) {
    if (isDependsOnProfile() && argName.equals("--profile")) {
      continue;
    }
    if (this.args.isEmpty()) {
      if (argName.equals(GenericTypeOperationHandler.this.name.getFullName())) {
        continue;
      }
      throw new CommandFormatException("Command '" + operation + "' is not expected to have arguments other than "+ GenericTypeOperationHandler.this.name.getFullName()+ ".");
    }
    final ArgumentWithValue arg=(ArgumentWithValue)this.args.get(argName);
    if (arg == null) {
      if (argName.equals(GenericTypeOperationHandler.this.name.getFullName())) {
        continue;
      }
      throw new CommandFormatException("Unrecognized argument " + argName + " for command '"+ operation+ "'.");
    }
    final String propName;
    if (argName.charAt(1) == '-') {
      propName=argName.substring(2);
    }
 else {
      propName=argName.substring(1);
    }
    final String valueString=parsedArgs.getPropertyValue(argName);
    ModelNode nodeValue=arg.getValueConverter().fromString(valueString);
    request.get(propName).set(nodeValue);
  }
  return request;
}
