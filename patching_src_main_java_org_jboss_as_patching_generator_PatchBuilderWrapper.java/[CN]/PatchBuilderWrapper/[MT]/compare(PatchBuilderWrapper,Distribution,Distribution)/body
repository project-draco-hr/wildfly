{
  final DistributionContentItem or=original.getRoot();
  final DistributionContentItem nr=updated.getRoot();
  compareMiscFiles(builder,or,nr);
  final Set<String> originalLayers=new LinkedHashSet<String>(original.getLayers());
  final Set<String> updatedLayers=new LinkedHashSet<String>(updated.getLayers());
  for (  final String layer : originalLayers) {
    final Distribution.ProcessedLayer originalLayer=original.getLayer(layer);
    final Distribution.ProcessedLayer updatedLayer;
    final PatchElementBuilder elementBuilder;
    if (updatedLayers.remove(layer)) {
      elementBuilder=builder.modifyLayer(layer);
      updatedLayer=updated.getLayer(layer);
    }
 else {
      elementBuilder=builder.removeLayer(layer);
      updatedLayer=null;
    }
    compareLayer(elementBuilder,originalLayer,updatedLayer);
  }
  for (  final String layer : updatedLayers) {
    final Distribution.ProcessedLayer originalLayer=null;
    final Distribution.ProcessedLayer updatedLayer=updated.getLayer(layer);
    final PatchElementBuilder elementBuilder=builder.addLayer(layer);
    compareLayer(elementBuilder,originalLayer,updatedLayer);
  }
  final Set<String> originalAddOns=new LinkedHashSet<String>(original.getAddOns());
  final Set<String> updatedAddOns=new LinkedHashSet<String>(updated.getAddOns());
  for (  final String addOn : originalAddOns) {
    final Distribution.ProcessedLayer originalLayer=original.getAddOn(addOn);
    final Distribution.ProcessedLayer updatedLayer;
    final PatchElementBuilder elementBuilder;
    if (updatedAddOns.remove(addOn)) {
      elementBuilder=builder.modifyAddOn(addOn);
      updatedLayer=updated.getAddOn(addOn);
    }
 else {
      elementBuilder=builder.removeAddOn(addOn);
      updatedLayer=null;
    }
    compareLayer(elementBuilder,originalLayer,updatedLayer);
  }
  for (  final String addOn : updatedAddOns) {
    final PatchElementBuilder elementBuilder=builder.addAddOn(addOn);
    compareLayer(elementBuilder,null,updated.getAddOn(addOn));
  }
}
