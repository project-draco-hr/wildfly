{
  PathAddress address=context.getCurrentAddress();
  String name=context.getCurrentAddressValue();
  String stack=STACK.resolveModelAttribute(context,model).asString();
  ServiceTarget target=context.getServiceTarget();
  new ChannelClusterBuilder(JCHANNEL_CLUSTER.getServiceName(address),name).configure(context,model).build(target).install();
  new ChannelBuilder(JCHANNEL.getServiceName(address),name).configure(context,model).build(target).install();
  new AliasServiceBuilder<>(JCHANNEL_FACTORY.getServiceName(address),JGroupsRequirement.CHANNEL_FACTORY.getServiceName(context,stack),JGroupsRequirement.CHANNEL_FACTORY.getType()).build(target).install();
  new ForkChannelFactoryBuilder(FORK_CHANNEL_FACTORY.getServiceName(address),name).configure(context,model).build(target).install();
  new ModuleBuilder(JCHANNEL_MODULE.getServiceName(address),MODULE).configure(context,model).build(target).install();
  new BinderServiceBuilder<>(JGroupsBindingFactory.createChannelBinding(name),JGroupsRequirement.CHANNEL.getServiceName(context,name),JGroupsRequirement.CHANNEL.getType()).build(target).install();
  new BinderServiceBuilder<>(JGroupsBindingFactory.createChannelFactoryBinding(name),JGroupsRequirement.CHANNEL_FACTORY.getServiceName(context,name),JGroupsRequirement.CHANNEL_FACTORY.getType()).build(target).install();
  for (  GroupBuilderProvider provider : ServiceLoader.load(DistributedGroupBuilderProvider.class,DistributedGroupBuilderProvider.class.getClassLoader())) {
    for (    Builder<?> builder : provider.getBuilders(context.getCapabilityServiceSupport(),name)) {
      JGroupsLogger.ROOT_LOGGER.debugf("Installing %s for channel %s",builder.getServiceName(),name);
      builder.build(target).install();
    }
  }
}
