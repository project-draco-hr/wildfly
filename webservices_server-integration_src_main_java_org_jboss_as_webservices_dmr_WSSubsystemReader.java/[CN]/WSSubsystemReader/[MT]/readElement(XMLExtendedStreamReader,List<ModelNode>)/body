{
  requireNoAttributes(reader);
  final PathAddress address=PathAddress.pathAddress(WSExtension.SUBSYSTEM_PATH);
  final ModelNode subsystem=Util.createAddOperation(address);
  final List<ModelNode> endpointConfigs=new ArrayList<ModelNode>();
  final List<ModelNode> clientConfigs=new ArrayList<ModelNode>();
  final EnumSet<Element> encountered=EnumSet.noneOf(Element.class);
  while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
switch (Namespace.forUri(reader.getNamespaceURI())) {
case WEBSERVICES_1_1:
{
        final Element element=Element.forName(reader.getLocalName());
        if (element != Element.ENDPOINT_CONFIG && !encountered.add(element)) {
          throw unexpectedElement(reader);
        }
        final String value=parseElementNoAttributes(reader);
switch (element) {
case MODIFY_WSDL_ADDRESS:
{
            Attributes.MODIFY_WSDL_ADDRESS.parseAndSetParameter(value,subsystem,reader);
            break;
          }
case WSDL_HOST:
{
          Attributes.WSDL_HOST.parseAndSetParameter(value,subsystem,reader);
          break;
        }
case WSDL_PORT:
{
        Attributes.WSDL_PORT.parseAndSetParameter(value,subsystem,reader);
        break;
      }
case WSDL_SECURE_PORT:
{
      Attributes.WSDL_SECURE_PORT.parseAndSetParameter(value,subsystem,reader);
      break;
    }
case ENDPOINT_CONFIG:
{
    readConfig(reader,address,endpointConfigs,false);
    break;
  }
default :
{
  throw unexpectedElement(reader);
}
}
break;
}
case WEBSERVICES_1_2:
{
final Element element=Element.forName(reader.getLocalName());
if (element != Element.ENDPOINT_CONFIG && element != Element.CLIENT_CONFIG && !encountered.add(element)) {
throw unexpectedElement(reader);
}
switch (element) {
case MODIFY_WSDL_ADDRESS:
{
final String value=parseElementNoAttributes(reader);
Attributes.MODIFY_WSDL_ADDRESS.parseAndSetParameter(value,subsystem,reader);
break;
}
case WSDL_HOST:
{
final String value=parseElementNoAttributes(reader);
Attributes.WSDL_HOST.parseAndSetParameter(value,subsystem,reader);
break;
}
case WSDL_PORT:
{
final String value=parseElementNoAttributes(reader);
Attributes.WSDL_PORT.parseAndSetParameter(value,subsystem,reader);
break;
}
case WSDL_SECURE_PORT:
{
final String value=parseElementNoAttributes(reader);
Attributes.WSDL_SECURE_PORT.parseAndSetParameter(value,subsystem,reader);
break;
}
case ENDPOINT_CONFIG:
{
readConfig(reader,address,endpointConfigs,false);
break;
}
case CLIENT_CONFIG:
{
readConfig(reader,address,clientConfigs,true);
break;
}
default :
{
throw unexpectedElement(reader);
}
}
break;
}
default :
{
throw unexpectedElement(reader);
}
}
}
list.add(subsystem);
list.addAll(endpointConfigs);
list.addAll(clientConfigs);
}
