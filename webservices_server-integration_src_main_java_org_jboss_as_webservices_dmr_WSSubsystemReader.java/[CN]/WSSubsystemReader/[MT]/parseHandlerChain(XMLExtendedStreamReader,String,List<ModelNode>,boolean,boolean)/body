{
  String handlerChainId=null;
  String protocolBindings=null;
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    requireNoNamespaceAttribute(reader,i);
    final String value=reader.getAttributeValue(i);
    final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case NAME:
      handlerChainId=value;
    break;
case PROTOCOL_BINDINGS:
  protocolBindings=value;
break;
default :
throw unexpectedAttribute(reader,i);
}
}
final EnumSet<Element> encountered=EnumSet.noneOf(Element.class);
final List<ModelNode> addHandlerOperations=new LinkedList<ModelNode>();
while (reader.nextTag() != END_ELEMENT) {
final Element element=Element.forName(reader.getLocalName());
if (element != Element.HANDLER && !encountered.add(element)) {
throw unexpectedElement(reader);
}
switch (element) {
case HANDLER:
{
parseHandler(reader,configName,handlerChainId,isPreHandlerChain,addHandlerOperations,client);
break;
}
default :
{
throw unexpectedElement(reader);
}
}
}
final ModelNode operation=new ModelNode();
final String handlerChainType=isPreHandlerChain ? PRE_HANDLER_CHAIN : POST_HANDLER_CHAIN;
operation.get(OP).set(ADD);
operation.get(OP_ADDR).add(SUBSYSTEM,WSExtension.SUBSYSTEM_NAME).add(client ? CLIENT_CONFIG : ENDPOINT_CONFIG,configName).add(handlerChainType,handlerChainId);
if (protocolBindings != null) {
operation.get(Constants.PROTOCOL_BINDINGS).set(protocolBindings);
}
operationList.add(operation);
operationList.addAll(addHandlerOperations);
}
