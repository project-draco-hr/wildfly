{
  final Resource resource=context.readResourceForUpdate(PathAddress.EMPTY_ADDRESS);
  final String attribute=operation.require(ModelDescriptionConstants.NAME).asString();
  final AttributeDefinition def=getAttributeDefinition(attribute);
  if (def == null) {
    context.getFailureDescription().set(new ModelNode().set(MESSAGES.unknownAttribute(attribute)));
  }
 else {
    def.getValidator().validateParameter(ModelDescriptionConstants.VALUE,operation.get(ModelDescriptionConstants.VALUE));
    resource.getModel().get(attribute).set(operation.get(ModelDescriptionConstants.VALUE));
    if (context.isNormalServer()) {
      context.addStep(new OperationStepHandler(){
        @Override public void execute(        final OperationContext context,        final ModelNode operation) throws OperationFailedException {
          final HornetQServer server=AddressSettingAdd.getServer(context,operation);
          PathAddress address=null;
          HierarchicalRepository<AddressSettings> repository=null;
          AddressSettings existingSettings=null;
          if (server != null) {
            final ModelNode model=resource.getModel();
            address=PathAddress.pathAddress(operation.require(ModelDescriptionConstants.OP_ADDR));
            final AddressSettings settings=AddressSettingAdd.createSettings(context,model);
            repository=server.getAddressSettingsRepository();
            String match=address.getLastElement().getValue();
            existingSettings=repository.getMatch(match);
            repository.addMatch(match,settings);
          }
          if (context.completeStep() != OperationContext.ResultAction.KEEP && existingSettings != null) {
            repository.addMatch(address.getLastElement().getValue(),existingSettings);
          }
        }
      }
,OperationContext.Stage.RUNTIME);
    }
  }
  context.completeStep();
}
