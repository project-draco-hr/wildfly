{
  PathAddress pathAddress=PathAddress.pathAddress(operation.get(ModelDescriptionConstants.ADDRESS));
  String federationAlias=pathAddress.subAddress(0,pathAddress.size() - 1).getLastElement().getValue();
  ModelNode relativeToNode=KeyStoreProviderResourceDefinition.RELATIVE_TO.resolveModelAttribute(context,model);
  String relativeTo=null;
  if (relativeToNode.isDefined()) {
    relativeTo=relativeToNode.asString();
  }
  String file=KeyStoreProviderResourceDefinition.FILE.resolveModelAttribute(context,model).asString();
  KeyStoreProviderService service=new KeyStoreProviderService(toKeyProviderType(context,model),file,relativeTo);
  ServiceBuilder<KeyStoreProviderService> serviceBuilder=context.getServiceTarget().addService(KeyStoreProviderService.createServiceName(federationAlias),service);
  serviceBuilder.addDependency(FederationService.createServiceName(federationAlias),FederationService.class,service.getFederationService());
  serviceBuilder.addDependency(PathManagerService.SERVICE_NAME,PathManager.class,service.getPathManager());
  if (verificationHandler != null) {
    serviceBuilder.addListener(verificationHandler);
  }
  ServiceController<KeyStoreProviderService> controller=serviceBuilder.setInitialMode(ServiceController.Mode.PASSIVE).install();
  if (newControllers != null) {
    newControllers.add(controller);
  }
}
