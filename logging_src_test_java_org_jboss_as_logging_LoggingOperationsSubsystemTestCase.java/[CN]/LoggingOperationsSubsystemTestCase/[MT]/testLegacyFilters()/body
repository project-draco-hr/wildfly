{
  final KernelServices kernelServices=boot();
  final String fileHandlerName="test-file-handler";
  final File logFile=createLogFile();
  final ModelNode handlerAddress=createFileHandlerAddress(fileHandlerName).toModelNode();
  addFileHandler(kernelServices,null,fileHandlerName,org.jboss.logmanager.Level.TRACE,logFile,true);
  for (  Map.Entry<String,ModelNode> entry : FilterConversionTestCase.MAP.entrySet()) {
    ModelNode op=SubsystemOperations.createWriteAttributeOperation(handlerAddress,CommonAttributes.FILTER,entry.getValue());
    executeOperation(kernelServices,op);
    op=SubsystemOperations.createReadAttributeOperation(handlerAddress,CommonAttributes.FILTER_SPEC);
    String filterSpecResult=SubsystemOperations.readResultAsString(executeOperation(kernelServices,op));
    assertEquals(entry.getKey(),filterSpecResult);
    final ModelNode tempHandlerAddress=createConsoleHandlerAddress("temp").toModelNode();
    op=SubsystemOperations.createAddOperation(tempHandlerAddress);
    op.get(CommonAttributes.FILTER.getName()).set(entry.getValue());
    executeOperation(kernelServices,op);
    op=SubsystemOperations.createReadAttributeOperation(tempHandlerAddress,CommonAttributes.FILTER_SPEC);
    filterSpecResult=SubsystemOperations.readResultAsString(executeOperation(kernelServices,op));
    assertEquals(entry.getKey(),filterSpecResult);
    op=SubsystemOperations.createRemoveOperation(tempHandlerAddress,true);
    executeOperation(kernelServices,op);
    final ModelNode loggerAddress=createLoggerAddress("test-logger").toModelNode();
    op=SubsystemOperations.createAddOperation(loggerAddress);
    op.get(CommonAttributes.FILTER.getName()).set(entry.getValue());
    executeOperation(kernelServices,op);
    op=SubsystemOperations.createReadAttributeOperation(loggerAddress,CommonAttributes.FILTER_SPEC);
    filterSpecResult=SubsystemOperations.readResultAsString(executeOperation(kernelServices,op));
    assertEquals(entry.getKey(),filterSpecResult);
    op=SubsystemOperations.createUndefineAttributeOperation(loggerAddress,CommonAttributes.FILTER_SPEC);
    executeOperation(kernelServices,op);
    op=SubsystemOperations.createReadAttributeOperation(loggerAddress,CommonAttributes.FILTER);
    assertEquals("Filter was not undefined",SubsystemOperations.UNDEFINED,SubsystemOperations.readResult(executeOperation(kernelServices,op)));
    op=SubsystemOperations.createReadAttributeOperation(loggerAddress,CommonAttributes.FILTER_SPEC);
    assertEquals("Filter was not undefined",SubsystemOperations.UNDEFINED,SubsystemOperations.readResult(executeOperation(kernelServices,op)));
    op=SubsystemOperations.createWriteAttributeOperation(loggerAddress,CommonAttributes.FILTER,entry.getValue());
    executeOperation(kernelServices,op);
    op=SubsystemOperations.createReadAttributeOperation(loggerAddress,CommonAttributes.FILTER_SPEC);
    filterSpecResult=SubsystemOperations.readResultAsString(executeOperation(kernelServices,op));
    assertEquals(entry.getKey(),filterSpecResult);
    op=SubsystemOperations.createRemoveOperation(loggerAddress,true);
    executeOperation(kernelServices,op);
  }
  for (  Map.Entry<String,ModelNode> entry : FilterConversionTestCase.MAP.entrySet()) {
    ModelNode op=SubsystemOperations.createWriteAttributeOperation(handlerAddress,CommonAttributes.FILTER_SPEC,entry.getKey());
    executeOperation(kernelServices,op);
    op=SubsystemOperations.createReadAttributeOperation(handlerAddress,CommonAttributes.FILTER);
    ModelNode filterResult=SubsystemOperations.readResult(executeOperation(kernelServices,op));
    ModelTestUtils.compare(entry.getValue(),filterResult);
    final ModelNode tempHandlerAddress=createConsoleHandlerAddress("temp").toModelNode();
    op=SubsystemOperations.createAddOperation(tempHandlerAddress);
    op.get(CommonAttributes.FILTER_SPEC.getName()).set(entry.getKey());
    executeOperation(kernelServices,op);
    op=SubsystemOperations.createReadAttributeOperation(tempHandlerAddress,CommonAttributes.FILTER);
    filterResult=SubsystemOperations.readResult(executeOperation(kernelServices,op));
    ModelTestUtils.compare(entry.getValue(),filterResult);
    op=SubsystemOperations.createRemoveOperation(tempHandlerAddress,true);
    executeOperation(kernelServices,op);
    final ModelNode loggerAddress=createLoggerAddress("test-logger").toModelNode();
    op=SubsystemOperations.createAddOperation(loggerAddress);
    op.get(CommonAttributes.FILTER_SPEC.getName()).set(entry.getKey());
    executeOperation(kernelServices,op);
    op=SubsystemOperations.createReadAttributeOperation(loggerAddress,CommonAttributes.FILTER);
    filterResult=SubsystemOperations.readResult(executeOperation(kernelServices,op));
    ModelTestUtils.compare(entry.getValue(),filterResult);
    op=SubsystemOperations.createWriteAttributeOperation(loggerAddress,CommonAttributes.FILTER_SPEC,entry.getKey());
    executeOperation(kernelServices,op);
    op=SubsystemOperations.createReadAttributeOperation(loggerAddress,CommonAttributes.FILTER);
    filterResult=SubsystemOperations.readResult(executeOperation(kernelServices,op));
    ModelTestUtils.compare(entry.getValue(),filterResult);
    op=SubsystemOperations.createRemoveOperation(loggerAddress,true);
    executeOperation(kernelServices,op);
  }
  removeFileHandler(kernelServices,null,fileHandlerName,true);
}
