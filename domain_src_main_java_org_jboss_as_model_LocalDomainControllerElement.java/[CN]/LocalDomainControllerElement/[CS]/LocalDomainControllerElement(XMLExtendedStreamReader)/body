{
  super(reader);
  String name=null;
  String adminInterface=null;
  int adminPort=-1;
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    final String value=reader.getAttributeValue(i);
    if (reader.getAttributeNamespace(i) != null) {
      throw unexpectedAttribute(reader,i);
    }
 else {
      final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case NAME:
{
          name=value;
          break;
        }
case ADMIN_INTERFACE:
{
        adminInterface=value;
        break;
      }
case ADMIN_PORT:
{
      adminPort=Integer.parseInt(value);
      break;
    }
default :
  throw unexpectedAttribute(reader,i);
}
}
}
this.name=name == null ? DEFAULT_NAME : name;
if (adminInterface == null) {
throw missingRequired(reader,Collections.singleton(Attribute.ADMIN_INTERFACE.getLocalName()));
}
this.adminInterface=adminInterface;
this.adminPort=adminPort;
while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
switch (Namespace.forUri(reader.getNamespaceURI())) {
case DOMAIN_1_0:
{
final Element element=Element.forName(reader.getLocalName());
switch (element) {
case INTERFACE_SPECS:
{
    parseInterfaces(reader);
    break;
  }
case JVM:
{
  if (jvm != null) {
    throw new XMLStreamException(element.getLocalName() + " already defined",reader.getLocation());
  }
  jvm=new JvmElement(reader);
  break;
}
default :
throw unexpectedElement(reader);
}
break;
}
default :
throw unexpectedElement(reader);
}
}
if (jvm == null) {
throw missingRequiredElement(reader,Collections.singleton(Element.JVM.getLocalName()));
}
}
