{
  final ModelNode ejb3SubsystemAddOperation=new ModelNode();
  ejb3SubsystemAddOperation.get(OP).set(ADD);
  ejb3SubsystemAddOperation.get(OP_ADDR).add(SUBSYSTEM,EJB3Extension.SUBSYSTEM_NAME);
  operations.add(ejb3SubsystemAddOperation);
  for (int i=0; i < reader.getAttributeCount(); i++) {
    ParseUtils.requireNoNamespaceAttribute(reader,i);
    String value=reader.getAttributeValue(i);
    EJB3SubsystemXMLAttribute attribute=EJB3SubsystemXMLAttribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case ENABLE_STATISTICS:
{
        EJB3SubsystemRootResourceDefinition.ENABLE_STATISTICS.parseAndSetParameter(value,ejb3SubsystemAddOperation,reader);
        break;
      }
default :
{
      throw ParseUtils.unexpectedAttribute(reader,i);
    }
}
}
final EnumSet<EJB3SubsystemXMLElement> encountered=EnumSet.noneOf(EJB3SubsystemXMLElement.class);
while (reader.hasNext() && reader.nextTag() != XMLStreamConstants.END_ELEMENT) {
switch (EJB3SubsystemNamespace.forUri(reader.getNamespaceURI())) {
case EJB3_1_2:
{
    final EJB3SubsystemXMLElement element=EJB3SubsystemXMLElement.forName(reader.getLocalName());
    if (!encountered.add(element)) {
      throw unexpectedElement(reader);
    }
switch (element) {
case CACHES:
{
        this.parseCaches(reader,operations);
        break;
      }
case PASSIVATION_STORES:
{
      this.parsePassivationStores(reader,operations);
      break;
    }
case MDB:
{
    this.parseMDB(reader,operations,ejb3SubsystemAddOperation);
    break;
  }
case ENTITY_BEAN:
{
  this.parseEntityBean(reader,operations,ejb3SubsystemAddOperation);
  break;
}
case POOLS:
{
this.parsePools(reader,operations);
break;
}
case REMOTE:
{
parseRemote(reader,operations);
break;
}
case ASYNC:
{
parseAsync(reader,operations);
break;
}
case SESSION_BEAN:
{
this.parseSessionBean(reader,operations,ejb3SubsystemAddOperation);
break;
}
case TIMER_SERVICE:
{
parseTimerService(reader,operations);
break;
}
case THREAD_POOLS:
{
parseThreadPools(reader,operations);
break;
}
case IIOP:
{
parseIIOP(reader,operations);
break;
}
case IN_VM_REMOTE_INTERFACE_INVOCATION:
parseInVMRemoteInterfaceInvocation(reader,ejb3SubsystemAddOperation);
break;
default :
{
throw unexpectedElement(reader);
}
}
break;
}
default :
{
throw unexpectedElement(reader);
}
}
}
}
