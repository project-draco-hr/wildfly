{
  String name=null;
  Integer maxSize=null;
  Long timeout=null;
  String unit=null;
  String backingCache=null;
  Boolean passivateEventsOnReplicate=null;
  for (int i=0; i < reader.getAttributeCount(); i++) {
    requireNoNamespaceAttribute(reader,i);
    final String value=reader.getAttributeValue(i);
switch (EJB3SubsystemXMLAttribute.forName(reader.getAttributeLocalName(i))) {
case NAME:
{
        name=value;
        break;
      }
case MAX_SIZE:
{
      maxSize=ClusterPassivationStoreResourceDefinition.MAX_SIZE.parse(value,reader.getLocation()).asInt();
      break;
    }
case IDLE_TIMEOUT:
{
    timeout=PassivationStoreResourceDefinition.IDLE_TIMEOUT.parse(value,reader.getLocation()).asLong();
    break;
  }
case IDLE_TIMEOUT_UNIT:
{
  unit=PassivationStoreResourceDefinition.IDLE_TIMEOUT_UNIT.parse(value,reader.getLocation()).asString();
  break;
}
case BACKING_CACHE:
{
backingCache=ClusterPassivationStoreResourceDefinition.BACKING_CACHE.parse(value,reader.getLocation()).asString();
break;
}
case PASSIVATE_EVENTS_ON_REPLICATE:
{
passivateEventsOnReplicate=ClusterPassivationStoreResourceDefinition.PASSIVATE_EVENTS_ON_REPLICATE.parse(value,reader.getLocation()).asBoolean();
break;
}
default :
{
throw unexpectedAttribute(reader,i);
}
}
}
requireNoContent(reader);
if (name == null) {
throw missingRequired(reader,Collections.singleton(EJB3SubsystemXMLAttribute.NAME.getLocalName()));
}
operations.add(this.createAddClusterPassivationStoreOperation(name,maxSize,timeout,unit,backingCache,passivateEventsOnReplicate));
}
