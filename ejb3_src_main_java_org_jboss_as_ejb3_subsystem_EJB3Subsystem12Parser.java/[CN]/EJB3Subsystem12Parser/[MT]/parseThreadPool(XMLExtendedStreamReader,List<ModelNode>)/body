{
  final int attCount=reader.getAttributeCount();
  String threadPoolName=null;
  Integer maxThreads=null;
  Integer keepAlive=null;
  final EnumSet<EJB3SubsystemXMLAttribute> required=EnumSet.of(EJB3SubsystemXMLAttribute.NAME);
  for (int i=0; i < attCount; i++) {
    requireNoNamespaceAttribute(reader,i);
    final String value=reader.getAttributeValue(i);
    final EJB3SubsystemXMLAttribute attribute=EJB3SubsystemXMLAttribute.forName(reader.getAttributeLocalName(i));
    required.remove(attribute);
switch (attribute) {
case NAME:
      threadPoolName=value.trim();
    break;
case MAX_THREADS:
  maxThreads=EJB3ThreadPoolResourceDefinition.MAX_THREADS.parse(value,reader).asInt();
break;
case KEEPALIVE_TIME:
keepAlive=EJB3ThreadPoolResourceDefinition.KEEPALIVE_TIME.parse(value,reader).asInt();
break;
default :
throw unexpectedAttribute(reader,i);
}
}
if (!required.isEmpty()) {
throw missingRequired(reader,required);
}
requireNoContent(reader);
final ModelNode address=new ModelNode();
address.add(SUBSYSTEM,EJB3Extension.SUBSYSTEM_NAME);
address.add(THREAD_POOL,threadPoolName);
final ModelNode threadPoolAdd=new ModelNode();
threadPoolAdd.get(OP).set(ADD);
threadPoolAdd.get(OP_ADDR).set(address);
if (maxThreads != null) {
threadPoolAdd.get(MAX_THREADS).set(maxThreads.intValue());
}
if (keepAlive != null) {
threadPoolAdd.get(KEEPALIVE_TIME).set(keepAlive.intValue());
}
operations.add(threadPoolAdd);
}
