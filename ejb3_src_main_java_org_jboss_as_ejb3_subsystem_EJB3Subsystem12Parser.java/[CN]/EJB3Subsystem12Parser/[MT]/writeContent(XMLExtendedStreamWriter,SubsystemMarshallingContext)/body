{
  context.startSubsystemElement(EJB3Extension.NAMESPACE_1_2,false);
  ModelNode model=context.getModelNode();
  if (model.hasDefined(EJB3SubsystemModel.DEFAULT_SLSB_INSTANCE_POOL) || model.hasDefined(EJB3SubsystemModel.DEFAULT_STATEFUL_BEAN_ACCESS_TIMEOUT) || model.hasDefined(EJB3SubsystemModel.DEFAULT_SINGLETON_BEAN_ACCESS_TIMEOUT)) {
    writer.writeStartElement(EJB3SubsystemXMLElement.SESSION_BEAN.getLocalName());
  }
  if (model.hasDefined(EJB3SubsystemModel.DEFAULT_SLSB_INSTANCE_POOL)) {
    writer.writeStartElement(EJB3SubsystemXMLElement.STATELESS.getLocalName());
    this.writeDefaultSLSBPool(writer,model);
    writer.writeEndElement();
  }
  if (model.hasDefined(EJB3SubsystemModel.DEFAULT_STATEFUL_BEAN_ACCESS_TIMEOUT) || model.hasDefined(EJB3SubsystemModel.DEFAULT_SFSB_CACHE) || model.hasDefined(EJB3SubsystemModel.DEFAULT_CLUSTERED_SFSB_CACHE)) {
    writer.writeStartElement(EJB3SubsystemXMLElement.STATEFUL.getLocalName());
    this.writeStatefulBean(writer,model);
    writer.writeEndElement();
  }
  if (model.hasDefined(EJB3SubsystemModel.DEFAULT_SINGLETON_BEAN_ACCESS_TIMEOUT)) {
    writer.writeStartElement(EJB3SubsystemXMLElement.SINGLETON.getLocalName());
    this.writeSingletonBean(writer,model);
    writer.writeEndElement();
  }
  if (model.hasDefined(EJB3SubsystemModel.DEFAULT_SLSB_INSTANCE_POOL) || model.hasDefined(EJB3SubsystemModel.DEFAULT_STATEFUL_BEAN_ACCESS_TIMEOUT) || model.hasDefined(EJB3SubsystemModel.DEFAULT_SINGLETON_BEAN_ACCESS_TIMEOUT)) {
    writer.writeEndElement();
  }
  if (model.hasDefined(EJB3SubsystemModel.DEFAULT_MDB_INSTANCE_POOL) || model.hasDefined(EJB3SubsystemModel.DEFAULT_RESOURCE_ADAPTER_NAME)) {
    writer.writeStartElement(EJB3SubsystemXMLElement.MDB.getLocalName());
    this.writeMDB(writer,model);
    writer.writeEndElement();
  }
  if (model.hasDefined(EJB3SubsystemModel.STRICT_MAX_BEAN_INSTANCE_POOL)) {
    writer.writeStartElement(EJB3SubsystemXMLElement.POOLS.getLocalName());
    writer.writeStartElement(EJB3SubsystemXMLElement.BEAN_INSTANCE_POOLS.getLocalName());
    this.writeBeanInstancePools(writer,model);
    writer.writeEndElement();
    writer.writeEndElement();
  }
  if (model.hasDefined(EJB3SubsystemModel.CACHE)) {
    writer.writeStartElement(EJB3SubsystemXMLElement.CACHES.getLocalName());
    this.writeCaches(writer,model);
    writer.writeEndElement();
  }
  if (model.hasDefined(EJB3SubsystemModel.CLUSTER_PASSIVATION_STORE) || model.hasDefined(EJB3SubsystemModel.FILE_PASSIVATION_STORE)) {
    writer.writeStartElement(EJB3SubsystemXMLElement.PASSIVATION_STORES.getLocalName());
    this.writeFilePassivationStores(writer,model);
    this.writeClusterPassivationStores(writer,model);
    writer.writeEndElement();
  }
  if (model.hasDefined(SERVICE) && model.get(SERVICE).hasDefined(ASYNC)) {
    writer.writeStartElement(EJB3SubsystemXMLElement.ASYNC.getLocalName());
    writeAsync(writer,model.get(SERVICE,ASYNC));
    writer.writeEndElement();
  }
  if (model.hasDefined(SERVICE) && model.get(SERVICE).hasDefined(TIMER_SERVICE)) {
    writer.writeStartElement(EJB3SubsystemXMLElement.TIMER_SERVICE.getLocalName());
    final ModelNode timerServiceModel=model.get(SERVICE,TIMER_SERVICE);
    this.writeTimerService(writer,timerServiceModel);
    writer.writeEndElement();
  }
  if (model.hasDefined(SERVICE) && model.get(SERVICE).hasDefined(REMOTE)) {
    writer.writeStartElement(EJB3SubsystemXMLElement.REMOTE.getLocalName());
    writeRemote(writer,model.get(SERVICE,REMOTE));
    writer.writeEndElement();
  }
  if (model.hasDefined(THREAD_POOL)) {
    writer.writeStartElement(EJB3SubsystemXMLElement.THREAD_POOLS.getLocalName());
    final ModelNode threadsModel=model.get(THREAD_POOL);
    this.writeThreadPools(writer,threadsModel);
    writer.writeEndElement();
  }
  if (model.hasDefined(SERVICE) && model.get(SERVICE).hasDefined(IIOP)) {
    writer.writeStartElement(EJB3SubsystemXMLElement.IIOP.getLocalName());
    writeIIOP(writer,model.get(SERVICE,IIOP));
    writer.writeEndElement();
  }
  writer.writeEndElement();
}
