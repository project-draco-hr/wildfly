{
  context.startSubsystemElement(EJB3Extension.NAMESPACE_1_2,false);
  ModelNode model=context.getModelNode();
  if (model.hasDefined(EJB3SubsystemModel.LITE)) {
    writer.writeAttribute(EJB3SubsystemModel.LITE,model.get(EJB3SubsystemModel.LITE).asString());
  }
  if (model.hasDefined(EJB3SubsystemModel.DEFAULT_MDB_INSTANCE_POOL) || model.hasDefined(EJB3SubsystemModel.DEFAULT_RESOURCE_ADAPTER_NAME)) {
    writer.writeStartElement(EJB3SubsystemXMLElement.MDB.getLocalName());
    this.writeMDB(writer,model);
    writer.writeEndElement();
  }
  if (model.hasDefined(EJB3SubsystemModel.DEFAULT_SLSB_INSTANCE_POOL)) {
    writer.writeStartElement(EJB3SubsystemXMLElement.SESSION_BEAN.getLocalName());
    writer.writeStartElement(EJB3SubsystemXMLElement.STATELESS.getLocalName());
    this.writeDefaultSLSBPool(writer,model);
    writer.writeEndElement();
    writer.writeEndElement();
  }
  if (model.hasDefined(EJB3SubsystemModel.STRICT_MAX_BEAN_INSTANCE_POOL)) {
    writer.writeStartElement(EJB3SubsystemXMLElement.POOLS.getLocalName());
    writer.writeStartElement(EJB3SubsystemXMLElement.BEAN_INSTANCE_POOLS.getLocalName());
    this.writeBeanInstancePools(writer,model);
    writer.writeEndElement();
    writer.writeEndElement();
  }
  if (model.hasDefined(SERVICE) && model.get(SERVICE).hasDefined(TIMER_SERVICE)) {
    writer.writeStartElement(EJB3SubsystemXMLElement.TIMER_SERVICE.getLocalName());
    final ModelNode timerServiceModel=model.get(SERVICE,TIMER_SERVICE);
    this.writeTimerService(writer,timerServiceModel);
    writer.writeEndElement();
  }
  EJB3SubsystemRootResourceDefinition.DEFAULT_STATEFUL_ACCESS_TIMEOUT.marshallAsElement(model,writer);
  EJB3SubsystemRootResourceDefinition.DEFAULT_SINGLETON_ACCESS_TIMEOUT.marshallAsElement(model,writer);
  writer.writeEndElement();
}
