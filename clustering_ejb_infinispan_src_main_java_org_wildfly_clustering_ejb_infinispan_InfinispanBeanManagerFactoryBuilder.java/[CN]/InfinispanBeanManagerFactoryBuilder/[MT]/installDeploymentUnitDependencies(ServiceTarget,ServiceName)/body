{
  String cacheName=BeanCacheConfigurationService.getCacheName(deploymentUnitServiceName);
  ServiceName configurationServiceName=CacheConfigurationService.getServiceName(this.config.getContainerName(),cacheName);
  final InjectedValue<EmbeddedCacheManager> container=new InjectedValue<>();
  InjectedValue<Configuration> configuration=new InjectedValue<>();
  target.addService(configurationServiceName,new BeanCacheConfigurationService(cacheName,container,configuration)).addDependency(EmbeddedCacheManagerService.getServiceName(this.config.getContainerName()),EmbeddedCacheManager.class,container).addDependency(CacheConfigurationService.getServiceName(this.config.getContainerName(),this.config.getCacheName()),Configuration.class,configuration).setInitialMode(ServiceController.Mode.ON_DEMAND).install();
  ServiceName cacheServiceName=CacheService.getServiceName(this.config.getContainerName(),cacheName);
  CacheService.Dependencies dependencies=new CacheService.Dependencies(){
    @Override public EmbeddedCacheManager getCacheContainer(){
      return container.getValue();
    }
    @Override public XAResourceRecoveryRegistry getRecoveryRegistry(){
      return null;
    }
  }
;
  new AsynchronousServiceBuilder<>(cacheServiceName,new CacheService<>(cacheName,dependencies)).build(target).addDependency(configurationServiceName).addDependency(deploymentUnitServiceName.append("marshalling")).install();
  new RemoveOnCancelScheduledExecutorServiceBuilder(deploymentUnitServiceName.append(this.name,"expiration"),EXPIRATION_THREAD_FACTORY).build(target).install();
  new CachedThreadPoolExecutorServiceBuilder(deploymentUnitServiceName.append(this.name,"eviction"),EVICTION_THREAD_FACTORY).build(target).install();
}
