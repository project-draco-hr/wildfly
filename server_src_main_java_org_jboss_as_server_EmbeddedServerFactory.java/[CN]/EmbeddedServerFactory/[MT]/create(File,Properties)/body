{
  if (jbossHomeDir == null || jbossHomeDir.isDirectory() == false)   throw new IllegalStateException("Invalid jboss.home.dir: " + jbossHomeDir);
  if (systemProps.getProperty(ServerEnvironment.HOME_DIR) == null) {
    systemProps.setProperty(ServerEnvironment.HOME_DIR,jbossHomeDir.getAbsolutePath());
  }
  setupCleanDirectories(jbossHomeDir,systemProps);
  File modulesDir=new File(jbossHomeDir + "/modules");
  ModuleLoader moduleLoader=InitialModuleLoaderFactory.getModuleLoader(modulesDir,"org.jboss.logmanager");
  ModuleIdentifier logModuleId=ModuleIdentifier.create("org.jboss.logmanager");
  ModuleClassLoader logModuleClassLoader=moduleLoader.loadModule(logModuleId).getClassLoader();
  ClassLoader ctxClassLoader=Thread.currentThread().getContextClassLoader();
  try {
    Thread.currentThread().setContextClassLoader(logModuleClassLoader);
    systemProps.setProperty("java.util.logging.manager","org.jboss.logmanager.LogManager");
    if (LogManager.getLogManager().getClass() == LogManager.class) {
      System.err.println("WARNING: Failed to load the specified logmodule " + logModuleId);
    }
 else {
      Module.setModuleLogger(new JDKModuleLogger());
    }
  }
  finally {
    Thread.currentThread().setContextClassLoader(ctxClassLoader);
  }
  ModuleIdentifier serverModuleId=ModuleIdentifier.create("org.jboss.as.server");
  Module serverModule=moduleLoader.loadModule(serverModuleId);
  ModuleClassLoader serverModuleClassLoader=serverModule.getClassLoader();
  Class<?> serverMainClass=serverModuleClassLoader.loadClass("org.jboss.as.server.Main");
  Method determineEnvironmentMethod=serverMainClass.getMethod("determineEnvironment",String[].class,Properties.class);
  Object serverEnvironment=determineEnvironmentMethod.invoke(null,new String[0],systemProps);
  final Class<?> serverClass=serverModuleClassLoader.loadClass("org.jboss.as.server.StandaloneServer");
  Class<?> serverFactoryClass=serverModuleClassLoader.loadClass("org.jboss.as.server.StandaloneServerFactory");
  Method createMethod=serverFactoryClass.getMethod("create",serverEnvironment.getClass());
  final Object server=createMethod.invoke(null,serverEnvironment);
  InvocationHandler invocationHandler=new InvocationHandler(){
    @Override public Object invoke(    Object proxy,    Method method,    Object[] args) throws Throwable {
      Method targetMethod=serverClass.getMethod(method.getName(),method.getParameterTypes());
      return targetMethod.invoke(server,args);
    }
  }
;
  ClassLoader classLoader=StandaloneServer.class.getClassLoader();
  Class<?>[] interfaces=new Class[]{StandaloneServer.class};
  Object proxy=Proxy.newProxyInstance(classLoader,interfaces,invocationHandler);
  return (StandaloneServer)proxy;
}
