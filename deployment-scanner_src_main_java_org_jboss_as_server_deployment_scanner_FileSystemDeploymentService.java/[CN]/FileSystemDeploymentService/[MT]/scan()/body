{
  try {
    scanLock.lockInterruptibly();
  }
 catch (  InterruptedException ie) {
    Thread.currentThread().interrupt();
    return;
  }
  try {
    if (scanEnabled) {
      log.tracef("Scanning directory %s for deployment content changes",deploymentDir.getAbsolutePath());
      final List<ModelNode> updates=new ArrayList<ModelNode>();
      Map<String,File> foundDeployed=new HashMap<String,File>();
      Set<String> newlyAdded=new HashSet<String>();
      Set<String> registeredDeployments=getDeploymentNames();
      scanDirectory(deploymentDir,updates,foundDeployed,newlyAdded,registeredDeployments);
      Set<String> toRemove=new HashSet<String>(deployed);
      toRemove.removeAll(foundDeployed.keySet());
      toRemove.removeAll(newlyAdded);
      for (      String missing : toRemove) {
        updates.add(getUndeployOperation(missing));
        updates.add(getRemoveOperation(missing));
      }
      if (updates.size() > 0) {
        if (log.isDebugEnabled()) {
          for (          ModelNode update : updates) {
            log.debugf("Deployment scan of [%s] found update action [%s]",deploymentDir,update);
          }
        }
        ExecutionContext composite=getCompositeUpdate(updates);
        ModelNode results=serverController.execute(composite);
      }
      Set<String> validFinds=cleanSpuriousMarkerFiles(foundDeployed);
      validFinds.addAll(newlyAdded);
      this.deployed=validFinds;
      log.tracef("Scan complete");
    }
  }
  finally {
    scanLock.unlock();
  }
}
