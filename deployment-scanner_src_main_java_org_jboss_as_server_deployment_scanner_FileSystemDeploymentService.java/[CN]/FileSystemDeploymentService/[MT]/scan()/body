{
  try {
    scanLock.lockInterruptibly();
  }
 catch (  InterruptedException ie) {
    Thread.currentThread().interrupt();
    return;
  }
  try {
    if (scanEnabled) {
      log.tracef("Scanning directory %s for deployment content changes",deploymentDir.getAbsolutePath());
      List<ScannerTask> scannerTasks=new ArrayList<ScannerTask>();
      final Set<String> registeredDeployments=getDeploymentNames();
      final Set<String> toRemove=new HashSet<String>(deployed.keySet());
      scanDirectory(deploymentDir,scannerTasks,registeredDeployments,toRemove);
      for (      String missing : toRemove) {
        scannerTasks.add(new UndeployTask(missing));
      }
      if (scannerTasks.size() > 0) {
        List<ModelNode> updates=new ArrayList<ModelNode>(scannerTasks.size());
        for (        ScannerTask task : scannerTasks) {
          final ModelNode update=task.getUpdate();
          if (log.isDebugEnabled()) {
            log.debugf("Deployment scan of [%s] found update action [%s]",deploymentDir,update);
          }
          updates.add(update);
        }
        while (!updates.isEmpty()) {
          ModelNode composite=getCompositeUpdate(updates);
          final ModelNode results=serverController.execute(OperationBuilder.Factory.create(composite).build());
          final List<Property> resultList=results.get(RESULT).asPropertyList();
          final List<ModelNode> toRetry=new ArrayList<ModelNode>();
          final List<ScannerTask> retryTasks=new ArrayList<ScannerTask>();
          for (int i=0; i < resultList.size(); i++) {
            final ModelNode result=resultList.get(i).getValue();
            final ScannerTask task=scannerTasks.get(i);
            final ModelNode outcome=result.get(OUTCOME);
            if (OUTCOME != null && SUCCESS.equals(outcome.asString())) {
              task.handleSuccessResult();
            }
 else             if (OUTCOME != null && CANCELLED.equals(outcome.asString())) {
              toRetry.add(updates.get(i));
              retryTasks.add(task);
            }
 else {
              task.handleFailureResult(result);
            }
          }
          updates=toRetry;
          scannerTasks=retryTasks;
        }
      }
      log.tracef("Scan complete");
    }
  }
  finally {
    scanLock.unlock();
  }
}
