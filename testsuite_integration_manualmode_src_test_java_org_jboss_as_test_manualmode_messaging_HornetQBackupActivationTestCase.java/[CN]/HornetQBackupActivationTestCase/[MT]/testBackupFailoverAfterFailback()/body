{
  checkHornetQServerStartedAndActiveAttributes(liveClient,true,true);
  checkHornetQServerStartedAndActiveAttributes(backupClient,true,false);
  final String queueName=randomUUID().toString();
  addQueue(backupClient,queueName);
  final String jmsQueueName=randomUUID().toString();
  addJMSQueue(backupClient,jmsQueueName);
  final String jmsTopicName=randomUUID().toString();
  addJMSTopic(backupClient,jmsTopicName);
  checkQueue(backupClient,queueName,false);
  checkJMSQueue(backupClient,jmsQueueName,false);
  checkJMSTopic(backupClient,jmsTopicName,false);
  checkConnectionFactory(backupClient,false);
  System.out.println("===================");
  System.out.println("STOP LIVE SERVER...");
  System.out.println("===================");
  container.stop(LIVE_SERVER);
  waitForHornetQServerActivation(backupClient,true,TimeoutUtil.adjust(ACTIVATION_TIMEOUT));
  checkHornetQServerStartedAndActiveAttributes(backupClient,true,true);
  System.out.println("====================");
  System.out.println("START LIVE SERVER...");
  System.out.println("====================");
  container.start(LIVE_SERVER);
  waitForHornetQServerActivation(liveClient,true,TimeoutUtil.adjust(ACTIVATION_TIMEOUT));
  checkHornetQServerStartedAndActiveAttributes(liveClient,true,true);
  waitForHornetQServerActivation(backupClient,false,TimeoutUtil.adjust(ACTIVATION_TIMEOUT));
  checkHornetQServerStartedAndActiveAttributes(backupClient,true,false);
  System.out.println("==============================");
  System.out.println("STOP LIVE SERVER A 2ND TIME...");
  System.out.println("==============================");
  container.stop(LIVE_SERVER);
  waitForHornetQServerActivation(backupClient,true,TimeoutUtil.adjust(ACTIVATION_TIMEOUT));
  checkHornetQServerStartedAndActiveAttributes(backupClient,true,true);
}
