{
  final ModelNode address=new ModelNode();
  String threadPoolName=null;
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    final String value=reader.getAttributeValue(i);
    if (reader.getAttributeNamespace(i) != null) {
      throw ParseUtils.unexpectedAttribute(reader,i);
    }
 else {
      final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case THREAD_POOL:
{
          threadPoolName=value;
          break;
        }
default :
      throw unexpectedAttribute(reader,i);
  }
}
}
if (threadPoolName == null) {
throw missingRequired(reader,Collections.singleton(Attribute.THREAD_POOL));
}
final ModelNode subsystem=new ModelNode();
subsystem.get(OP).set(ADD);
subsystem.get(OP_ADDR).set(new ModelNode());
subsystem.get(REQUEST_PROPERTIES,THREAD_POOL).set(threadPoolName);
list.add(subsystem);
final ModelNode connectorAddress=address.add(CONNECTOR);
while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
switch (Namespace.forUri(reader.getNamespaceURI())) {
case REMOTING_1_0:
{
    final Element element=Element.forName(reader.getLocalName());
switch (element) {
case CONNECTOR:
{
        parseConnector(reader,connectorAddress,list);
        break;
      }
default :
{
      throw unexpectedElement(reader);
    }
}
break;
}
default :
{
throw unexpectedElement(reader);
}
}
}
}
