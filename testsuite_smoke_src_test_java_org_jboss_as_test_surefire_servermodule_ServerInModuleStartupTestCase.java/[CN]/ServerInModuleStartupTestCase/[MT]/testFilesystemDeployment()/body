{
  final JavaArchive archive=ShrinkWrapUtils.createJavaArchive("servermodule/test-deployment.sar",Simple.class.getPackage());
  final File dir=new File("target/archives");
  dir.mkdirs();
  final File file=new File(dir,"test-deployment.sar");
  archive.as(ZipExporter.class).exportZip(file,true);
  final File deployDir=new File("target","deployments");
  deployDir.mkdirs();
  Assert.assertTrue(deployDir.exists());
  ModelControllerClient client=ModelControllerClient.Factory.create(InetAddress.getByName("localhost"),9999);
  ModelNode add=new ModelNode();
  add.get(OP).set(ADD);
  ModelNode addr=new ModelNode();
  addr.add("subsystem","deployment-scanner");
  addr.add("scanner","test");
  add.get(OP_ADDR).set(addr);
  add.get("path").set(deployDir.getAbsolutePath());
  add.get("scan-enabled").set(true);
  add.get("scan-interval").set(1000);
  ModelNode result=client.execute(add);
  Assert.assertEquals(ModelDescriptionConstants.SUCCESS,result.require(ModelDescriptionConstants.OUTCOME).asString());
  try {
    final File target=new File(deployDir,"test-deployment.sar");
    final File deployed=new File(deployDir,"test-deployment.sar.deployed");
    Assert.assertFalse(target.exists());
    testDeployments(new DeploymentExecutor(){
      @Override public void initialDeploy() throws IOException {
        final InputStream in=new BufferedInputStream(new FileInputStream(file));
        try {
          final OutputStream out=new BufferedOutputStream(new FileOutputStream(target));
          try {
            int i=in.read();
            while (i != -1) {
              out.write(i);
              i=in.read();
            }
          }
  finally {
            StreamUtils.safeClose(out);
          }
        }
  finally {
          StreamUtils.safeClose(in);
        }
      }
      @Override public void fullReplace() throws IOException {
        initialDeploy();
      }
      @Override public void undeploy(){
        deployed.delete();
      }
    }
);
  }
  finally {
    try {
      client.execute(result.get(ModelDescriptionConstants.COMPENSATING_OPERATION));
    }
 catch (    Exception e) {
      client.close();
    }
  }
}
