{
  for (  Property p : nodes.asPropertyList()) {
    ModelNode node=p.getValue();
    double capacity=CAPACITY.resolveModelAttribute(context,node).asDouble();
    int weight=WEIGHT.resolveModelAttribute(context,node).asInt();
    Map<String,String> propertyMap=PROPERTY.unwrap(context,node);
    Class<? extends LoadMetric> loadMetricClass=null;
    if (node.hasDefined(CommonAttributes.TYPE)) {
      String type=TYPE.resolveModelAttribute(context,node).asString();
      if (type.equals("mem")) {
        ROOT_LOGGER.unsupportedMetric(type);
        continue;
      }
      LoadMetricEnum metric=LoadMetricEnum.forType(type);
      loadMetricClass=(metric != null) ? metric.getLoadMetricClass() : null;
    }
 else {
      String className=CustomLoadMetricDefinition.CLASS.resolveModelAttribute(context,node).asString();
      try {
        loadMetricClass=this.getClass().getClassLoader().loadClass(className).asSubclass(LoadMetric.class);
      }
 catch (      ClassNotFoundException e) {
        ROOT_LOGGER.errorAddingMetrics(e);
      }
    }
    if (loadMetricClass != null) {
      try {
        LoadMetric metric=loadMetricClass.newInstance();
        metric.setCapacity(capacity);
        metric.setWeight(weight);
        if (propertyMap != null && !propertyMap.isEmpty()) {
          Properties props=new Properties();
          props.putAll(propertyMap);
          try {
            BeanUtils.mapJavaBeanProperties(metric,props,true);
          }
 catch (          Exception ex) {
            ROOT_LOGGER.errorApplyingMetricProperties(ex,loadMetricClass.getCanonicalName());
            continue;
          }
        }
        metrics.add(metric);
      }
 catch (      InstantiationException|IllegalAccessException e) {
        ROOT_LOGGER.errorAddingMetrics(e);
      }
    }
  }
}
