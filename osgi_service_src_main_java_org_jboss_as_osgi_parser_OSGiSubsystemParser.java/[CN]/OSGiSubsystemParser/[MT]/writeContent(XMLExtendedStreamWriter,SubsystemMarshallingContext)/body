{
  context.startSubsystemElement(Namespace.CURRENT.getUriString(),false);
  ModelNode node=context.getModelNode();
  if (has(node,ACTIVATION)) {
    writeAttribute(writer,Attribute.ACTIVATION,node.get(ACTIVATION));
  }
  if (has(node,CONFIGURATION)) {
    ModelNode configuration=node.get(CONFIGURATION);
    for (    String pid : new TreeSet<String>(configuration.keys())) {
      writer.writeStartElement(Element.CONFIGURATION.getLocalName());
      writer.writeAttribute(Attribute.PID.getLocalName(),pid);
      ModelNode properties=configuration.get(pid).get(ENTRIES);
      for (      String propKey : properties.keys()) {
        String value=properties.get(propKey).asString();
        writer.writeStartElement(Element.PROPERTY.getLocalName());
        writer.writeAttribute(Attribute.NAME.getLocalName(),propKey);
        writer.writeCharacters(value);
        writer.writeEndElement();
      }
      writer.writeEndElement();
    }
  }
  if (has(node,PROPERTY)) {
    writer.writeStartElement(Element.PROPERTIES.getLocalName());
    ModelNode properties=node.get(PROPERTY);
    for (    String key : new TreeSet<String>(properties.keys())) {
      String val=properties.get(key).get(VALUE).asString();
      writer.writeStartElement(Element.PROPERTY.getLocalName());
      writer.writeAttribute(Attribute.NAME.getLocalName(),key);
      writer.writeCharacters(val);
      writer.writeEndElement();
    }
    writer.writeEndElement();
  }
  if (has(node,MODULE)) {
    writer.writeStartElement(Element.MODULES.getLocalName());
    ModelNode modules=node.get(MODULE);
    for (    String key : modules.keys()) {
      ModelNode moduleNode=modules.get(key);
      writer.writeEmptyElement(Element.MODULE.getLocalName());
      writer.writeAttribute(Attribute.IDENTIFIER.getLocalName(),key);
      if (moduleNode.has(STARTLEVEL)) {
        writeAttribute(writer,Attribute.STARTLEVEL,moduleNode.require(STARTLEVEL));
      }
    }
    writer.writeEndElement();
  }
  writer.writeEndElement();
}
