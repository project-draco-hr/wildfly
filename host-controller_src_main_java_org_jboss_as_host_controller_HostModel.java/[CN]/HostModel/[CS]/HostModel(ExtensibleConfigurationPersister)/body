{
  super(configurationPersister,HostDescriptionProviders.ROOT_PROVIDER);
  ModelNodeRegistration root=getRegistry();
  root.registerOperationHandler(GlobalOperationHandlers.ResolveAddressOperationHandler.OPERATION_NAME,GlobalOperationHandlers.RESOLVE,GlobalOperationHandlers.RESOLVE,false);
  root.registerOperationHandler(READ_RESOURCE_OPERATION,GlobalOperationHandlers.READ_RESOURCE,CommonProviders.READ_RESOURCE_PROVIDER,true);
  root.registerOperationHandler(READ_ATTRIBUTE_OPERATION,GlobalOperationHandlers.READ_ATTRIBUTE,CommonProviders.READ_ATTRIBUTE_PROVIDER,true);
  root.registerOperationHandler(READ_RESOURCE_DESCRIPTION_OPERATION,GlobalOperationHandlers.READ_RESOURCE_DESCRIPTION,CommonProviders.READ_RESOURCE_DESCRIPTION_PROVIDER,true);
  root.registerOperationHandler(READ_CHILDREN_NAMES_OPERATION,GlobalOperationHandlers.READ_CHILDREN_NAMES,CommonProviders.READ_CHILDREN_NAMES_PROVIDER,true);
  root.registerOperationHandler(READ_OPERATION_NAMES_OPERATION,GlobalOperationHandlers.READ_OPERATION_NAMES,CommonProviders.READ_OPERATION_NAMES_PROVIDER,true);
  root.registerOperationHandler(READ_OPERATION_DESCRIPTION_OPERATION,GlobalOperationHandlers.READ_OPERATION_DESCRIPTION,CommonProviders.READ_OPERATION_PROVIDER,true);
  root.registerOperationHandler(WRITE_ATTRIBUTE_OPERATION,GlobalOperationHandlers.WRITE_ATTRIBUTE,CommonProviders.WRITE_ATTRIBUTE_PROVIDER,true);
  root.registerOperationHandler(NamespaceAddHandler.OPERATION_NAME,NamespaceAddHandler.INSTANCE,NamespaceAddHandler.INSTANCE,false);
  root.registerOperationHandler(NamespaceRemoveHandler.OPERATION_NAME,NamespaceRemoveHandler.INSTANCE,NamespaceRemoveHandler.INSTANCE,false);
  root.registerOperationHandler(SchemaLocationAddHandler.OPERATION_NAME,SchemaLocationAddHandler.INSTANCE,SchemaLocationAddHandler.INSTANCE,false);
  root.registerOperationHandler(SchemaLocationRemoveHandler.OPERATION_NAME,SchemaLocationRemoveHandler.INSTANCE,SchemaLocationRemoveHandler.INSTANCE,false);
  root.registerOperationHandler(SystemPropertyAddHandler.OPERATION_NAME,SystemPropertyAddHandler.INSTANCE,SystemPropertyAddHandler.INSTANCE,false);
  root.registerOperationHandler(SystemPropertyRemoveHandler.OPERATION_NAME,SystemPropertyRemoveHandler.INSTANCE,SystemPropertyRemoveHandler.INSTANCE,false);
  root.registerReadWriteAttribute(NAME,null,new WriteAttributeHandlers.StringLengthValidatingHandler(1),Storage.CONFIGURATION);
  ModelNodeRegistration managementNative=root.registerSubModel(PathElement.pathElement(MANAGEMENT,NATIVE_API),CommonProviders.MANAGEMENT_PROVIDER);
  managementNative.registerOperationHandler(NativeManagementAddHandler.OPERATION_NAME,NativeManagementAddHandler.INSTANCE,NativeManagementAddHandler.INSTANCE,false);
  ModelNodeRegistration managementHttp=root.registerSubModel(PathElement.pathElement(MANAGEMENT,HTTP_API),CommonProviders.MANAGEMENT_PROVIDER);
  managementHttp.registerOperationHandler(HttpManagementAddHandler.OPERATION_NAME,HttpManagementAddHandler.INSTANCE,HttpManagementAddHandler.INSTANCE,false);
  root.registerOperationHandler(LocalDomainControllerAddHandler.OPERATION_NAME,LocalDomainControllerAddHandler.INSTANCE,LocalDomainControllerAddHandler.INSTANCE,false);
  root.registerOperationHandler(LocalDomainControllerRemoveHandler.OPERATION_NAME,LocalDomainControllerRemoveHandler.INSTANCE,LocalDomainControllerRemoveHandler.INSTANCE,false);
  root.registerOperationHandler(RemoteDomainControllerAddHandler.OPERATION_NAME,RemoteDomainControllerAddHandler.INSTANCE,RemoteDomainControllerAddHandler.INSTANCE,false);
  root.registerOperationHandler(RemoteDomainControllerRemoveHandler.OPERATION_NAME,RemoteDomainControllerRemoveHandler.INSTANCE,RemoteDomainControllerRemoveHandler.INSTANCE,false);
  ModelNodeRegistration extensions=root.registerSubModel(PathElement.pathElement(EXTENSION),CommonProviders.EXTENSION_PROVIDER);
  ExtensionContext extensionContext=new ExtensionContextImpl(getRegistry(),null,configurationPersister);
  ExtensionAddHandler addExtensionHandler=new ExtensionAddHandler(extensionContext);
  extensions.registerOperationHandler(ExtensionAddHandler.OPERATION_NAME,addExtensionHandler,addExtensionHandler,false);
  extensions.registerOperationHandler(ExtensionRemoveHandler.OPERATION_NAME,ExtensionRemoveHandler.INSTANCE,ExtensionRemoveHandler.INSTANCE,false);
  final ModelNodeRegistration jvms=root.registerSubModel(PathElement.pathElement(JVM),CommonProviders.JVM_PROVIDER);
  JVMHandlers.register(jvms);
  ModelNodeRegistration paths=root.registerSubModel(PathElement.pathElement(PATH),CommonProviders.SPECIFIED_PATH_PROVIDER);
  paths.registerOperationHandler(PathAddHandler.OPERATION_NAME,PathAddHandler.SPECIFIED_INSTANCE,PathAddHandler.SPECIFIED_INSTANCE,false);
  paths.registerOperationHandler(PathRemoveHandler.OPERATION_NAME,PathRemoveHandler.INSTANCE,PathRemoveHandler.INSTANCE,false);
  ModelNodeRegistration interfaces=root.registerSubModel(PathElement.pathElement(INTERFACE),CommonProviders.SPECIFIED_INTERFACE_PROVIDER);
  interfaces.registerOperationHandler(InterfaceAddHandler.OPERATION_NAME,SpecifiedInterfaceAddHandler.INSTANCE,SpecifiedInterfaceAddHandler.INSTANCE,false);
  interfaces.registerOperationHandler(InterfaceRemoveHandler.OPERATION_NAME,SpecifiedInterfaceRemoveHandler.INSTANCE,SpecifiedInterfaceRemoveHandler.INSTANCE,false);
  ModelNodeRegistration servers=root.registerSubModel(PathElement.pathElement(SERVER),HostDescriptionProviders.SERVER_PROVIDER);
  servers.registerOperationHandler(ServerAddHandler.OPERATION_NAME,ServerAddHandler.INSTANCE,ServerAddHandler.INSTANCE,false);
  servers.registerOperationHandler(ServerRemoveHandler.OPERATION_NAME,ServerRemoveHandler.INSTANCE,ServerRemoveHandler.INSTANCE,false);
  servers.registerReadWriteAttribute(START,null,new WriteAttributeHandlers.ModelTypeValidatingHandler(ModelType.BOOLEAN),Storage.CONFIGURATION);
  servers.registerReadWriteAttribute(SOCKET_BINDING_GROUP,null,WriteAttributeHandlers.WriteAttributeOperationHandler.INSTANCE,Storage.CONFIGURATION);
  servers.registerReadWriteAttribute(SOCKET_BINDING_PORT_OFFSET,null,new WriteAttributeHandlers.IntRangeValidatingHandler(1),Storage.CONFIGURATION);
  servers.registerReadWriteAttribute(PRIORITY,null,new WriteAttributeHandlers.IntRangeValidatingHandler(0),Storage.CONFIGURATION);
  servers.registerReadWriteAttribute(CPU_AFFINITY,null,new WriteAttributeHandlers.StringLengthValidatingHandler(1),Storage.CONFIGURATION);
  ModelNodeRegistration serverPaths=servers.registerSubModel(PathElement.pathElement(PATH),CommonProviders.SPECIFIED_INTERFACE_PROVIDER);
  serverPaths.registerOperationHandler(PathAddHandler.OPERATION_NAME,PathAddHandler.SPECIFIED_INSTANCE,PathAddHandler.SPECIFIED_INSTANCE,false);
  serverPaths.registerOperationHandler(PathRemoveHandler.OPERATION_NAME,PathRemoveHandler.INSTANCE,PathRemoveHandler.INSTANCE,false);
  ModelNodeRegistration serverInterfaces=servers.registerSubModel(PathElement.pathElement(INTERFACE),CommonProviders.SPECIFIED_INTERFACE_PROVIDER);
  serverInterfaces.registerOperationHandler(InterfaceAddHandler.OPERATION_NAME,SpecifiedInterfaceAddHandler.INSTANCE,SpecifiedInterfaceAddHandler.INSTANCE,false);
  serverInterfaces.registerOperationHandler(InterfaceRemoveHandler.OPERATION_NAME,SpecifiedInterfaceRemoveHandler.INSTANCE,SpecifiedInterfaceRemoveHandler.INSTANCE,false);
  final ModelNodeRegistration serverVMs=servers.registerSubModel(PathElement.pathElement(JVM),CommonProviders.JVM_PROVIDER);
  JVMHandlers.register(serverVMs);
  createCoreModel();
}
