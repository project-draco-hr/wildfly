{
  final DeploymentUnit deploymentUnit=phaseContext.getDeploymentUnit();
  if (!DeploymentTypeMarker.isType(DeploymentType.WAR,deploymentUnit)) {
    return;
  }
  final ResourceRoot deploymentResourceRoot=deploymentUnit.getAttachment(Attachments.DEPLOYMENT_ROOT);
  final VirtualFile deploymentRoot=deploymentResourceRoot.getRoot();
  if (deploymentRoot == null) {
    return;
  }
  final ModuleSpecification moduleSpecification=deploymentUnit.getAttachment(Attachments.MODULE_SPECIFICATION);
  if (moduleSpecification == null) {
    return;
  }
  moduleSpecification.setPrivateModule(true);
  PrivateSubDeploymentMarker.mark(deploymentUnit);
  if (!deploymentUnit.hasAttachment(Attachments.OSGI_MANIFEST) || deploymentRoot.getChild(WEB_INF_CLASSES).exists()) {
    deploymentResourceRoot.putAttachment(Attachments.INDEX_RESOURCE_ROOT,false);
    deploymentResourceRoot.getExportFilters().add(new FilterSpecification(PathFilters.getMetaInfFilter(),true));
    deploymentResourceRoot.getExportFilters().add(new FilterSpecification(PathFilters.getMetaInfSubdirectoriesFilter(),true));
    deploymentResourceRoot.getExportFilters().add(new FilterSpecification(PathFilters.acceptAll(),false));
    ModuleRootMarker.mark(deploymentResourceRoot,true);
  }
  final MountHandle mountHandle=deploymentResourceRoot.getMountHandle();
  try {
    final List<ResourceRoot> resourceRoots=createResourceRoots(deploymentRoot,deploymentUnit);
    for (    ResourceRoot root : resourceRoots) {
      deploymentUnit.addToAttachmentList(Attachments.RESOURCE_ROOTS,root);
    }
  }
 catch (  Exception e) {
    throw new DeploymentUnitProcessingException(e);
  }
  final WarMetaData warMetaData=new WarMetaData();
  warMetaData.setSharedWebMetaData(sharedWebMetaData);
  deploymentUnit.putAttachment(WarMetaData.ATTACHMENT_KEY,warMetaData);
  String deploymentName;
  if (deploymentUnit.getParent() == null) {
    deploymentName=deploymentUnit.getName();
  }
 else {
    deploymentName=deploymentUnit.getParent().getName() + "." + deploymentUnit.getName();
  }
  PathManager pathManager=deploymentUnit.getAttachment(Attachments.PATH_MANAGER);
  File tempDir=new File(pathManager.getPathEntry(TEMP_DIR).resolvePath(),deploymentName);
  tempDir.mkdirs();
  warMetaData.setTempDir(tempDir);
  moduleSpecification.addPermissionFactory(new ImmediatePermissionFactory(new FilePermission(tempDir.getAbsolutePath() + File.separatorChar + "-","read,write,delete")));
  final TldsMetaData tldsMetaData=new TldsMetaData();
  tldsMetaData.setSharedTlds(sharedTldsMetaData);
  deploymentUnit.putAttachment(TldsMetaData.ATTACHMENT_KEY,tldsMetaData);
}
