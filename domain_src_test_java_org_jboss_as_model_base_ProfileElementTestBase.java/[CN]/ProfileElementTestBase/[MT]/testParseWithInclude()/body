{
  String testContent="<profile name=\"test\"><include profile=\"foo\"/>" + MockAnyElement.getFullXmlContent() + "</profile>";
  String fullcontent=MockRootElement.getXmlContent(getTargetNamespace(),getTargetNamespaceLocation(),true,testContent);
  MockRootElement root=MockRootElementParser.parseRootElement(getXMLMapper(),new StringReader(fullcontent));
  ProfileElement testee=(ProfileElement)root.getChild(getTargetNamespace(),Element.PROFILE.getLocalName());
  assertEquals("test",testee.getName());
  Set<ProfileIncludeElement> includes=testee.getIncludedProfiles();
  assertEquals(1,includes.size());
  ProfileIncludeElement include=includes.iterator().next();
  assertEquals("foo",include.getProfile());
  Set<AbstractSubsystemElement<? extends AbstractSubsystemElement<?>>> subsystems=testee.getSubsystems();
  assertEquals(2,subsystems.size());
  boolean gotMock=false;
  boolean gotAnotherMock=false;
  for (  AbstractSubsystemElement<? extends AbstractSubsystemElement<?>> subsystem : subsystems) {
    if (MockAnyElement.MOCK_ELEMENT_QNAME.equals(subsystem.getElementName())) {
      gotMock=true;
    }
 else     if (MockAnyElement.ANOTHER_MOCK_ELEMENT_QNAME.equals(subsystem.getElementName())) {
      gotAnotherMock=true;
    }
 else {
      fail("Unknown subsystem QName " + subsystem.getElementName());
    }
  }
  assertTrue(gotMock);
  assertTrue(gotAnotherMock);
}
