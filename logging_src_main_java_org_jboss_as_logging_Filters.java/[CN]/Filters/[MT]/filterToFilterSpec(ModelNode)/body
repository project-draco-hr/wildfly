{
  if (!value.isDefined()) {
    return null;
  }
  if (value.hasDefined(CommonAttributes.ACCEPT.getName())) {
    return ACCEPT;
  }
 else   if (value.hasDefined(CommonAttributes.ALL.getName())) {
    final StringBuilder result=new StringBuilder(ALL).append('(');
    boolean add=false;
    for (    ModelNode filterValue : value.get(CommonAttributes.ALL.getName()).asList()) {
      if (add) {
        result.append(",");
      }
 else {
        add=true;
      }
      result.append(filterToFilterSpec(filterValue));
    }
    return result.append(")").toString();
  }
 else   if (value.hasDefined(CommonAttributes.ANY.getName())) {
    final StringBuilder result=new StringBuilder(ANY).append('(');
    boolean add=false;
    for (    ModelNode filterValue : value.get(CommonAttributes.ANY.getName()).asList()) {
      if (add) {
        result.append(",");
      }
 else {
        add=true;
      }
      result.append(filterToFilterSpec(filterValue));
    }
    return result.append(")").toString();
  }
 else   if (value.hasDefined(CommonAttributes.CHANGE_LEVEL.getName())) {
    return String.format("%s(%s)",LEVEL_CHANGE,value.get(CommonAttributes.CHANGE_LEVEL.getName()).asString());
  }
 else   if (value.hasDefined(CommonAttributes.DENY.getName())) {
    return DENY;
  }
 else   if (value.hasDefined(CommonAttributes.LEVEL.getName())) {
    return String.format("%s(%s)",LEVELS,value.get(CommonAttributes.LEVEL.getName()).asString());
  }
 else   if (value.hasDefined(CommonAttributes.LEVEL_RANGE_LEGACY.getName())) {
    final ModelNode levelRange=value.get(CommonAttributes.LEVEL_RANGE_LEGACY.getName());
    final StringBuilder result=new StringBuilder(LEVEL_RANGE);
    final boolean minInclusive=(levelRange.hasDefined(CommonAttributes.MIN_INCLUSIVE.getName()) && levelRange.get(CommonAttributes.MIN_INCLUSIVE.getName()).asBoolean());
    final boolean maxInclusive=(levelRange.hasDefined(CommonAttributes.MAX_INCLUSIVE.getName()) && levelRange.get(CommonAttributes.MAX_INCLUSIVE.getName()).asBoolean());
    if (minInclusive) {
      result.append("[");
    }
 else {
      result.append("(");
    }
    result.append(levelRange.get(CommonAttributes.MIN_LEVEL.getName()).asString()).append(",");
    result.append(levelRange.get(CommonAttributes.MAX_LEVEL.getName()).asString());
    if (maxInclusive) {
      result.append("]");
    }
 else {
      result.append(")");
    }
    return result.toString();
  }
 else   if (value.hasDefined(CommonAttributes.MATCH.getName())) {
    return String.format("%s(%s)",MATCH,escapeString(CommonAttributes.MATCH,value));
  }
 else   if (value.hasDefined(CommonAttributes.NOT.getName())) {
    return String.format("%s(%s)",NOT,filterToFilterSpec(value.get(CommonAttributes.NOT.getName())));
  }
 else   if (value.hasDefined(CommonAttributes.REPLACE.getName())) {
    final ModelNode replace=value.get(CommonAttributes.REPLACE.getName());
    final boolean replaceAll;
    if (replace.hasDefined(CommonAttributes.REPLACE_ALL.getName())) {
      replaceAll=replace.get(CommonAttributes.REPLACE_ALL.getName()).asBoolean();
    }
 else {
      replaceAll=CommonAttributes.REPLACE_ALL.getDefaultValue().asBoolean();
    }
    final StringBuilder result=new StringBuilder();
    if (replaceAll) {
      result.append(SUBSTITUTE_ALL);
    }
 else {
      result.append(SUBSTITUTE);
    }
    return result.append("(").append(escapeString(CommonAttributes.FILTER_PATTERN,replace)).append(",").append(escapeString(CommonAttributes.REPLACEMENT,replace)).append(")").toString();
  }
  final String name=value.hasDefined(CommonAttributes.FILTER.getName()) ? value.get(CommonAttributes.FILTER.getName()).asString() : value.asString();
  throw Logging.createOperationFailure(LoggingMessages.MESSAGES.invalidFilter(name));
}
