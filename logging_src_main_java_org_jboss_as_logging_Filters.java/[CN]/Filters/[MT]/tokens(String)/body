{
  final List<String> tokens=new ArrayList<String>();
  final int length=source.length();
  int idx=0;
  while (idx < length) {
    int ch;
    ch=source.codePointAt(idx);
    if (isWhitespace(ch)) {
      ch=source.codePointAt(idx);
      idx=source.offsetByCodePoints(idx,1);
    }
 else     if (isJavaIdentifierStart(ch)) {
      int start=idx;
      do {
        idx=source.offsetByCodePoints(idx,1);
      }
 while (idx < length && isJavaIdentifierPart(ch=source.codePointAt(idx)));
      tokens.add(source.substring(start,idx));
    }
 else     if (ch == '"') {
      final StringBuilder b=new StringBuilder();
      b.append('"');
      idx=source.offsetByCodePoints(idx,1);
      while (idx < length && (ch=source.codePointAt(idx)) != '"') {
        ch=source.codePointAt(idx);
        if (ch == '\\') {
          idx=source.offsetByCodePoints(idx,1);
          if (idx == length) {
            throw LoggingLogger.ROOT_LOGGER.truncatedFilterExpression();
          }
          ch=source.codePointAt(idx);
switch (ch) {
case '\\':
            b.append('\\');
          break;
case '\'':
        b.append('\'');
      break;
case '"':
    b.append('"');
  break;
case 'b':
b.append('\b');
break;
case 'f':
b.append('\f');
break;
case 'n':
b.append('\n');
break;
case 'r':
b.append('\r');
break;
case 't':
b.append('\t');
break;
default :
throw LoggingLogger.ROOT_LOGGER.invalidEscapeFoundInFilterExpression();
}
}
 else {
b.appendCodePoint(ch);
}
idx=source.offsetByCodePoints(idx,1);
}
idx=source.offsetByCodePoints(idx,1);
tokens.add(b.toString());
}
 else {
int start=idx;
idx=source.offsetByCodePoints(idx,1);
tokens.add(source.substring(start,idx));
}
}
return tokens;
}
