{
  int port=9990;
  String host="localhost";
  String protocol="http-remoting";
  String config=null;
  try {
    CommandLine line=parser.parse(options,args,false);
    if (line.hasOption("help")) {
      formatter.printHelp(usage,NEW_LINE + JdrLogger.ROOT_LOGGER.jdrDescriptionMessage(),options,null);
      return;
    }
    if (line.hasOption("host")) {
      host=line.getOptionValue("host");
    }
    if (line.hasOption("port")) {
      port=Integer.parseInt(line.getOptionValue("port"));
    }
    if (line.hasOption("protocol")) {
      protocol=line.getOptionValue("protocol");
    }
    if (line.hasOption("config")) {
      config=line.getOptionValue("config");
    }
  }
 catch (  ParseException e) {
    System.out.println(e.getMessage());
    formatter.printHelp(usage,options);
    return;
  }
catch (  NumberFormatException nfe) {
    System.out.println(nfe.getMessage());
    formatter.printHelp(usage,options);
    return;
  }
  System.out.println("Initializing JBoss Diagnostic Reporter...");
  CLI cli=CLI.newInstance();
  boolean embedded=false;
  try {
    cli.connect(protocol,host,port,null,null);
  }
 catch (  IllegalStateException ex) {
    String startEmbeddedServer="embed-server" + ((config != null && !config.isEmpty()) ? (" --server-config=" + config) : "");
    cli.getCommandContext().handleSafe(startEmbeddedServer);
    embedded=true;
  }
  try {
    Result cmdResult=cli.cmd("/subsystem=jdr:generate-jdr-report()");
    ModelNode response=cmdResult.getResponse();
    if (Operations.isSuccessfulOutcome(response) || !embedded) {
      reportFailure(response);
      ModelNode result=response.get(ClientConstants.RESULT);
      String startTime=result.get("start-time").asString();
      String endTime=result.get("end-time").asString();
      String reportLocation=result.get("report-location").asString();
      System.out.println("JDR started: " + startTime);
      System.out.println("JDR ended: " + endTime);
      System.out.println("JDR location: " + reportLocation);
    }
 else {
      standaloneCollect(cli,protocol,host,port);
    }
  }
 catch (  IllegalStateException ise) {
    System.out.println(ise.getMessage());
    standaloneCollect(cli,protocol,host,port);
  }
 finally {
    if (cli != null) {
      try {
        cli.disconnect();
      }
 catch (      Exception e) {
        System.out.println("Caught exception while disconnecting: " + e.getMessage());
      }
    }
  }
  System.exit(0);
}
