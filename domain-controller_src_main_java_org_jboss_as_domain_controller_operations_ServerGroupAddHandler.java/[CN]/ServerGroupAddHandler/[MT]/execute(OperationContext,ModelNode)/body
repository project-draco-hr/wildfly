{
  validator.validate(operation);
  final Resource resource=context.createResource(PathAddress.EMPTY_ADDRESS);
  final ModelNode model=resource.getModel();
  String profile=operation.require(PROFILE).asString();
  try {
    context.getRootResource().navigate(PathAddress.pathAddress(PathElement.pathElement(PROFILE,profile)));
  }
 catch (  NoSuchElementException e) {
    throw new OperationFailedException(new ModelNode().set(String.format("Unknown %s %s",PROFILE,profile)));
  }
  model.get(PROFILE).set(profile);
  if (operation.hasDefined(SOCKET_BINDING_GROUP)) {
    String socketBindingGroup=operation.get(SOCKET_BINDING_GROUP).asString();
    try {
      context.getRootResource().navigate(PathAddress.pathAddress(PathElement.pathElement(SOCKET_BINDING_GROUP,socketBindingGroup)));
    }
 catch (    NoSuchElementException e) {
      throw new OperationFailedException(new ModelNode().set(String.format("Unknown %s %s",SOCKET_BINDING_GROUP,socketBindingGroup)));
    }
    model.get(SOCKET_BINDING_GROUP).set(socketBindingGroup);
  }
  if (operation.hasDefined(SOCKET_BINDING_PORT_OFFSET)) {
    model.get(SOCKET_BINDING_PORT_OFFSET).set(operation.get(SOCKET_BINDING_PORT_OFFSET));
  }
  if (operation.hasDefined(JVM)) {
    model.get(JVM).set(operation.get(JVM).asString(),new ModelNode());
  }
 else {
    model.get(JVM);
  }
  model.get(SYSTEM_PROPERTY);
  model.get(DEPLOYMENT);
  context.completeStep();
}
