{
  ModelNode container=Util.getEmptyOperation(ModelDescriptionConstants.ADD,null);
  container.get(ModelDescriptionConstants.OP_ADDR).set(address);
  String name=null;
  for (int i=0; i < reader.getAttributeCount(); i++) {
    ParseUtils.requireNoNamespaceAttribute(reader,i);
    String value=reader.getAttributeValue(i);
    Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case NAME:
{
        name=value;
        break;
      }
case DEFAULT_CACHE:
{
      container.get(ModelKeys.DEFAULT_CACHE).set(value);
      break;
    }
case LISTENER_EXECUTOR:
{
    container.get(ModelKeys.LISTENER_EXECUTOR).set(value);
    break;
  }
case EVICTION_EXECUTOR:
{
  container.get(ModelKeys.EVICTION_EXECUTOR).set(value);
  break;
}
case REPLICATION_QUEUE_EXECUTOR:
{
container.get(ModelKeys.REPLICATION_QUEUE_EXECUTOR).set(value);
break;
}
default :
{
throw ParseUtils.unexpectedAttribute(reader,i);
}
}
}
if (name == null) {
throw ParseUtils.missingRequired(reader,EnumSet.of(Attribute.NAME));
}
container.get(ModelDescriptionConstants.OP_ADDR).add(ModelKeys.CACHE_CONTAINER,name);
while (reader.hasNext() && (reader.nextTag() != XMLStreamConstants.END_ELEMENT)) {
Element element=Element.forName(reader.getLocalName());
switch (element) {
case ALIAS:
{
container.get(ModelKeys.ALIAS).add(reader.getElementText());
break;
}
case TRANSPORT:
{
this.parseTransport(reader,container.get(ModelKeys.TRANSPORT).setEmptyObject());
break;
}
case LOCAL_CACHE:
{
this.parseLocalCache(reader,container.get(ModelKeys.CACHE).add());
break;
}
case INVALIDATION_CACHE:
{
this.parseInvalidationCache(reader,container.get(ModelKeys.CACHE).add());
break;
}
case REPLICATED_CACHE:
{
this.parseReplicatedCache(reader,container.get(ModelKeys.CACHE).add());
break;
}
case DISTRIBUTED_CACHE:
{
this.parseDistributedCache(reader,container.get(ModelKeys.CACHE).add());
break;
}
default :
{
throw ParseUtils.unexpectedElement(reader);
}
}
}
return container;
}
