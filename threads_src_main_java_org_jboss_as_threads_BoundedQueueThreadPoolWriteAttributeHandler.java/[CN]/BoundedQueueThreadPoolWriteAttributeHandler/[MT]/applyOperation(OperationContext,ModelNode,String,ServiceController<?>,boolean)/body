{
  final BoundedQueueThreadPoolService pool=(BoundedQueueThreadPoolService)service.getService();
  if (PoolAttributeDefinitions.KEEPALIVE_TIME.getName().equals(attributeName)) {
    TimeUnit defaultUnit=pool.getKeepAliveUnit();
    final TimeSpec spec=getTimeSpec(context,model,defaultUnit);
    pool.setKeepAlive(spec);
  }
 else   if (PoolAttributeDefinitions.MAX_THREADS.getName().equals(attributeName)) {
    pool.setMaxThreads(PoolAttributeDefinitions.MAX_THREADS.resolveModelAttribute(context,model).asInt());
  }
 else   if (PoolAttributeDefinitions.CORE_THREADS.getName().equals(attributeName)) {
    pool.setCoreThreads(PoolAttributeDefinitions.CORE_THREADS.resolveModelAttribute(context,model).asInt());
  }
 else   if (PoolAttributeDefinitions.QUEUE_LENGTH.getName().equals(attributeName)) {
    if (forRollback) {
      context.revertReloadRequired();
    }
 else {
      context.reloadRequired();
    }
  }
 else   if (PoolAttributeDefinitions.ALLOW_CORE_TIMEOUT.getName().equals(attributeName)) {
    pool.setAllowCoreTimeout(PoolAttributeDefinitions.ALLOW_CORE_TIMEOUT.resolveModelAttribute(context,model).asBoolean());
  }
 else   if (!forRollback) {
    throw ThreadsLogger.ROOT_LOGGER.unsupportedBoundedQueueThreadPoolAttribute(attributeName);
  }
}
