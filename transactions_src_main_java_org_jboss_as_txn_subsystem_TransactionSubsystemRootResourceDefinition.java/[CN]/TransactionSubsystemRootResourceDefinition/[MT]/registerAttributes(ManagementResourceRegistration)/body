{
  Set<AttributeDefinition> attributesWithoutMutuals=new HashSet<>(Arrays.asList(attributes));
  attributesWithoutMutuals.remove(USE_JOURNAL_STORE);
  attributesWithoutMutuals.remove(USE_JDBC_STORE);
  attributesWithoutMutuals.remove(JDBC_STORE_DATASOURCE);
  attributesWithoutMutuals.remove(PROCESS_ID_UUID);
  attributesWithoutMutuals.remove(PROCESS_ID_SOCKET_BINDING);
  attributesWithoutMutuals.remove(PROCESS_ID_SOCKET_MAX_PORTS);
  OperationStepHandler writeHandler=new ReloadRequiredWriteAttributeHandler(attributesWithoutMutuals);
  for (  final AttributeDefinition def : attributesWithoutMutuals) {
    resourceRegistration.registerReadWriteAttribute(def,null,writeHandler);
  }
  OperationStepHandler mutualWriteHandler=new ObjectStoreMutualWriteHandler(USE_JOURNAL_STORE,USE_JDBC_STORE);
  resourceRegistration.registerReadWriteAttribute(USE_JOURNAL_STORE,null,mutualWriteHandler);
  resourceRegistration.registerReadWriteAttribute(USE_JDBC_STORE,null,mutualWriteHandler);
  resourceRegistration.registerReadWriteAttribute(JDBC_STORE_DATASOURCE,null,new JdbcStoreDatasourceWriteHandler(JDBC_STORE_DATASOURCE));
  OperationStepHandler mutualProcessIdWriteHandler=new ProcessIdWriteHandler(PROCESS_ID_UUID,PROCESS_ID_SOCKET_BINDING,PROCESS_ID_SOCKET_MAX_PORTS);
  resourceRegistration.registerReadWriteAttribute(PROCESS_ID_UUID,null,mutualProcessIdWriteHandler);
  resourceRegistration.registerReadWriteAttribute(PROCESS_ID_SOCKET_BINDING,null,mutualProcessIdWriteHandler);
  resourceRegistration.registerReadWriteAttribute(PROCESS_ID_SOCKET_MAX_PORTS,null,mutualProcessIdWriteHandler);
  EnableStatisticsHandler esh=new EnableStatisticsHandler();
  resourceRegistration.registerReadWriteAttribute(ENABLE_STATISTICS,esh,esh);
  if (registerRuntimeOnly) {
    TxStatsHandler.INSTANCE.registerMetrics(resourceRegistration);
  }
}
