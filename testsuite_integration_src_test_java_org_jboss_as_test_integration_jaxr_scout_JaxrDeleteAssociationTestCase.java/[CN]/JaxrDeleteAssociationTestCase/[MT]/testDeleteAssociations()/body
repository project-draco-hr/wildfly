{
  Key savekey=null;
  Key assockey=null;
  BusinessQueryManager bqm2=null;
  BusinessLifeCycleManager blm2=null;
  Collection sourceKeys=null;
  Collection targetKeys=null;
  try {
    login();
    getJAXREssentials();
    Connection con2=loginSecondUser();
    RegistryService rs2=con2.getRegistryService();
    blm2=rs2.getBusinessLifeCycleManager();
    bqm2=rs2.getBusinessQueryManager();
    String orgTarget="Target Organization";
    String orgSource="Source Organization";
    Organization target=blm2.createOrganization(blm.createInternationalString(orgTarget));
    Organization source=blm.createOrganization(blm.createInternationalString(orgSource));
    Collection orgs=new ArrayList();
    orgs.add(source);
    br=blm.saveOrganizations(orgs);
    if (br.getExceptions() != null) {
      Assert.fail(" Source::Save Organizations failed");
    }
    log.debug("Saved Source Organization");
    sourceKeys=br.getCollection();
    Iterator iter=sourceKeys.iterator();
    while (iter.hasNext()) {
      savekey=(Key)iter.next();
    }
    String sourceid=savekey.getId();
    String objectType=LifeCycleManager.ORGANIZATION;
    Organization pubSource=(Organization)bqm.getRegistryObject(sourceid,objectType);
    Assert.assertNotNull("Source Org",pubSource.getName().getValue());
    orgs.clear();
    orgs.add(target);
    br=blm2.saveOrganizations(orgs);
    if (br.getExceptions() != null) {
      Assert.fail("Target:: Save Organizations failed");
    }
    targetKeys=br.getCollection();
    iter=targetKeys.iterator();
    while (iter.hasNext()) {
      savekey=(Key)iter.next();
    }
    String targetid=savekey.getId();
    Organization targetOrg=(Organization)bqm2.getRegistryObject(targetid,objectType);
    Assert.assertNotNull("Target Org",targetOrg.getName().getValue());
    Concept associationType=getAssociationConcept("Implements");
    Assert.assertNotNull("AssociationType",associationType);
    Association a=blm.createAssociation(targetOrg,associationType);
    a.setSourceObject(pubSource);
    a.setTargetObject(targetOrg);
    blm.confirmAssociation(a);
    blm2.confirmAssociation(a);
    log.debug("Confirmed the association");
    Collection associations=new ArrayList();
    associations.add(a);
    br=blm2.saveAssociations(associations,false);
    if (br.getExceptions() != null) {
      Assert.fail("Second User :save Association failed");
    }
    log.debug("Second User: saved the association");
    br=bqm.findCallerAssociations(null,new Boolean(true),new Boolean(true),null);
    if (br.getExceptions() == null) {
      Collection results=br.getCollection();
      Assert.assertTrue("Result is 1",results.size() == 1);
      if (results.size() > 0) {
        iter=results.iterator();
        while (iter.hasNext()) {
          Association a1=(Association)iter.next();
          assockey=a1.getKey();
          ScoutUtil.validateAssociation(a1,orgSource);
        }
      }
    }
    if (assockey != null) {
      Collection keys=new ArrayList();
      keys.add(assockey);
      br=blm.deleteAssociations(keys);
      if (br.getExceptions() != null)       Assert.fail("Deletion of Associations failed");
      System.out.println("JBAS-7129 needs to be fixed");
      BulkResponse brq=bqm.findCallerAssociations(null,Boolean.TRUE,Boolean.TRUE,null);
      if (brq.getExceptions() == null) {
        Collection retAssocs=brq.getCollection();
        if (retAssocs.size() == 0) {
        }
 else {
          Iterator iterAss=retAssocs.iterator();
          while (iterAss.hasNext()) {
            Association assc=(Association)iterAss.next();
            if (assc.getKey().getId().equals(assockey.getId()))             Assert.fail("Deleted Association found");
          }
        }
      }
    }
  }
 catch (  Exception e) {
    log.error("Exception::",e);
    Assert.fail(" failed with :" + e.getMessage());
  }
 finally {
    try {
      blm2.deleteOrganizations(targetKeys);
      blm.deleteOrganizations(sourceKeys);
    }
 catch (    JAXRException je) {
      System.out.println("Error: Clean Up Failed");
    }
  }
}
