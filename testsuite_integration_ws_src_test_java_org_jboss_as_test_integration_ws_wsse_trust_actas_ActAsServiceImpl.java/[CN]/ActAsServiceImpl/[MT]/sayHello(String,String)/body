{
  Bus bus=BusFactory.newInstance().createBus();
  try {
    BusFactory.setThreadDefaultBus(bus);
    final String serviceURL="http://" + host + ":"+ port+ "/jaxws-samples-wsse-policy-trust/SecurityService";
    final QName serviceName=new QName("http://www.jboss.org/jbossws/ws-extensions/wssecuritypolicy","SecurityService");
    final URL wsdlURL=new URL(serviceURL + "?wsdl");
    Service service=Service.create(wsdlURL,serviceName);
    ServiceIface proxy=(ServiceIface)service.getPort(ServiceIface.class);
    Map<String,Object> ctx=((BindingProvider)proxy).getRequestContext();
    ctx.put(SecurityConstants.CALLBACK_HANDLER,new ActAsCallbackHandler());
    ctx.put(SecurityConstants.SIGNATURE_PROPERTIES,Thread.currentThread().getContextClassLoader().getResource("actasKeystore.properties"));
    ctx.put(SecurityConstants.SIGNATURE_USERNAME,"myactaskey");
    ctx.put(SecurityConstants.ENCRYPT_PROPERTIES,Thread.currentThread().getContextClassLoader().getResource("../../META-INF/clientKeystore.properties"));
    ctx.put(SecurityConstants.ENCRYPT_USERNAME,"myservicekey");
    STSClient stsClient=new STSClient(bus);
    Map<String,Object> props=stsClient.getProperties();
    props.put(SecurityConstants.USERNAME,"alice");
    props.put(SecurityConstants.ENCRYPT_USERNAME,"mystskey");
    props.put(SecurityConstants.STS_TOKEN_USERNAME,"myactaskey");
    props.put(SecurityConstants.STS_TOKEN_PROPERTIES,Thread.currentThread().getContextClassLoader().getResource("actasKeystore.properties"));
    props.put(SecurityConstants.STS_TOKEN_USE_CERT_FOR_KEYINFO,"true");
    ctx.put(SecurityConstants.STS_CLIENT,stsClient);
    return "ActAs " + proxy.sayHello();
  }
 catch (  MalformedURLException e) {
    e.printStackTrace();
    return null;
  }
 finally {
    bus.shutdown(true);
  }
}
