{
  log.debugf("Starting Mod_cluster Extension");
  config=new ModClusterConfig();
  final ModelNode proxyconf=modelconf.get(CommonAttributes.PROXY_CONF);
  final ModelNode httpdconf=proxyconf.get(CommonAttributes.HTTPD_CONF);
  final ModelNode nodeconf=proxyconf.get(CommonAttributes.NODES_CONF);
  if (httpdconf.hasDefined(CommonAttributes.ADVERTISE_SOCKET)) {
    config.setAdvertisePort(23364);
    config.setAdvertiseGroupAddress("224.0.1.105");
  }
  if (httpdconf.hasDefined(CommonAttributes.SSL)) {
  }
  if (httpdconf.hasDefined(CommonAttributes.ADVERTISE))   config.setAdvertise(httpdconf.get(CommonAttributes.ADVERTISE).asBoolean());
  if (httpdconf.hasDefined(CommonAttributes.PROXY_LIST)) {
    config.setProxyList(httpdconf.get(CommonAttributes.PROXY_LIST).asString());
  }
  if (httpdconf.hasDefined(CommonAttributes.PROXY_URL))   config.setProxyList(httpdconf.get(CommonAttributes.PROXY_URL).asString());
  if (httpdconf.has(CommonAttributes.ADVERTISE_SECURITY_KEY))   config.setProxyList(httpdconf.get(CommonAttributes.ADVERTISE_SECURITY_KEY).asString());
  if (nodeconf.hasDefined(CommonAttributes.EXCLUDED_CONTEXTS))   config.setExcludedContexts(nodeconf.get(CommonAttributes.EXCLUDED_CONTEXTS).asString());
  if (nodeconf.hasDefined(CommonAttributes.AUTO_ENABLE_CONTEXTS))   config.setAutoEnableContexts(nodeconf.get(CommonAttributes.AUTO_ENABLE_CONTEXTS).asBoolean());
  if (nodeconf.hasDefined(CommonAttributes.STOP_CONTEXT_TIMEOUT)) {
    config.setStopContextTimeout(nodeconf.get(CommonAttributes.SOCKET_TIMEOUT).asInt());
    config.setStopContextTimeoutUnit(TimeUnit.SECONDS);
  }
  if (nodeconf.hasDefined(CommonAttributes.SOCKET_TIMEOUT))   config.setSocketTimeout(nodeconf.get(CommonAttributes.SOCKET_TIMEOUT).asInt());
  final ModelNode loadmetric=modelconf.get(CommonAttributes.LOAD_METRIC);
  if (loadmetric.hasDefined(CommonAttributes.SIMPLE_LOAD_PROVIDER)) {
    final ModelNode node=loadmetric.get(CommonAttributes.SIMPLE_LOAD_PROVIDER);
    SimpleLoadBalanceFactorProvider myload=new SimpleLoadBalanceFactorProvider();
    myload.setLoadBalanceFactor(node.get(CommonAttributes.FACTOR).asInt(1));
    load=myload;
  }
  Set<LoadMetric<LoadContext>> metrics=new HashSet<LoadMetric<LoadContext>>();
  if (loadmetric.hasDefined(CommonAttributes.DYNAMIC_LOAD_PROVIDER)) {
    final ModelNode node=loadmetric.get(CommonAttributes.DYNAMIC_LOAD_PROVIDER);
    int decayFactor=node.get(CommonAttributes.DECAY).asInt(512);
    int history=node.get(CommonAttributes.HISTORY).asInt(512);
    if (node.hasDefined(CommonAttributes.LOAD_METRIC)) {
      final ModelNode nodemetric=node.get(CommonAttributes.LOAD_METRIC);
      final List<ModelNode> array=nodemetric.asList();
      addLoadMetrics(metrics,array);
    }
    if (node.hasDefined(CommonAttributes.CUSTOM_LOAD_METRIC)) {
      final ModelNode nodemetric=node.get(CommonAttributes.CUSTOM_LOAD_METRIC);
      final List<ModelNode> array=nodemetric.asList();
      addCustomLoadMetrics(metrics,array);
    }
    if (!metrics.isEmpty()) {
      DynamicLoadBalanceFactorProvider loader=new DynamicLoadBalanceFactorProvider(metrics);
      loader.setDecayFactor(decayFactor);
      loader.setHistory(history);
      load=loader;
    }
  }
  if (load == null) {
    log.info("Mod_cluster uses default load balancer provider");
    SimpleLoadBalanceFactorProvider myload=new SimpleLoadBalanceFactorProvider();
    myload.setLoadBalanceFactor(1);
    load=myload;
  }
  service=new org.jboss.modcluster.ModClusterService(config,load);
  adapter=new CatalinaEventHandlerAdapter(service,webServer.getValue().getServer(),webServer.getValue().getService());
  try {
    adapter.start();
  }
 catch (  JMException e) {
    e.printStackTrace();
  }
}
