{
  log.debugf("Starting Mod_cluster Extension");
  config=new ModClusterConfig();
  boolean defaultavert=false;
  try {
    for (Enumeration<NetworkInterface> ni=NetworkInterface.getNetworkInterfaces(); ni.hasMoreElements(); ) {
      NetworkInterface intf=ni.nextElement();
      if (intf.isUp() && intf.supportsMulticast())       defaultavert=true;
    }
  }
 catch (  SocketException e) {
  }
  if (!modelconf.hasDefined(CommonAttributes.PROXY_LIST)) {
    config.setAdvertise(defaultavert);
  }
  config.setAdvertisePort(23364);
  config.setAdvertiseGroupAddress("224.0.1.105");
  config.setAutoEnableContexts(true);
  config.setStopContextTimeout(10);
  config.setSocketTimeout(20000);
  if (modelconf.hasDefined(CommonAttributes.ADVERTISE_SOCKET)) {
    final SocketBinding binding=this.binding.getValue();
    if (binding != null) {
      config.setAdvertisePort(binding.getMulticastPort());
      config.setAdvertiseGroupAddress(binding.getMulticastSocketAddress().getHostName());
      if (!defaultavert)       log.error("Mod_cluster requires Advertise but Multicast interface is not available");
      config.setAdvertise(true);
    }
  }
  if (modelconf.hasDefined(CommonAttributes.SSL)) {
    config.setSsl(true);
    final ModelNode ssl=modelconf.get(CommonAttributes.SSL);
    if (ssl.has(CommonAttributes.KEY_ALIAS))     config.setSslKeyAlias(ssl.get(CommonAttributes.KEY_ALIAS).asString());
    if (ssl.has(CommonAttributes.PASSWORD)) {
      config.setSslTrustStorePassword(ssl.get(CommonAttributes.PASSWORD).asString());
      config.setSslKeyStorePassword(ssl.get(CommonAttributes.PASSWORD).asString());
    }
    if (ssl.has(CommonAttributes.CERTIFICATE_KEY_FILE))     config.setSslKeyStore(ssl.get(CommonAttributes.CERTIFICATE_KEY_FILE).asString());
    if (ssl.has(CommonAttributes.CIPHER_SUITE))     config.setSslCiphers(ssl.get(CommonAttributes.CIPHER_SUITE).asString());
    if (ssl.has(CommonAttributes.PROTOCOL))     config.setSslKeyAlias(ssl.get(CommonAttributes.PROTOCOL).asString());
    if (ssl.has(CommonAttributes.CA_CERTIFICATE_FILE))     config.setSslTrustStore(ssl.get(CommonAttributes.CA_CERTIFICATE_FILE).asString());
    if (ssl.has(CommonAttributes.CA_REVOCATION_URL))     config.setSslCrlFile(ssl.get(CommonAttributes.CA_REVOCATION_URL).asString());
  }
  if (modelconf.hasDefined(CommonAttributes.ADVERTISE))   config.setAdvertise(modelconf.get(CommonAttributes.ADVERTISE).asBoolean());
  if (modelconf.hasDefined(CommonAttributes.PROXY_LIST)) {
    config.setProxyList(modelconf.get(CommonAttributes.PROXY_LIST).asString());
  }
  if (modelconf.hasDefined(CommonAttributes.PROXY_URL))   config.setProxyList(modelconf.get(CommonAttributes.PROXY_URL).asString());
  if (modelconf.has(CommonAttributes.ADVERTISE_SECURITY_KEY))   config.setProxyList(modelconf.get(CommonAttributes.ADVERTISE_SECURITY_KEY).asString());
  if (modelconf.hasDefined(CommonAttributes.EXCLUDED_CONTEXTS))   config.setExcludedContexts(modelconf.get(CommonAttributes.EXCLUDED_CONTEXTS).asString());
  if (modelconf.hasDefined(CommonAttributes.AUTO_ENABLE_CONTEXTS))   config.setAutoEnableContexts(modelconf.get(CommonAttributes.AUTO_ENABLE_CONTEXTS).asBoolean());
  if (modelconf.hasDefined(CommonAttributes.STOP_CONTEXT_TIMEOUT)) {
    config.setStopContextTimeout(modelconf.get(CommonAttributes.SOCKET_TIMEOUT).asInt());
    config.setStopContextTimeoutUnit(TimeUnit.SECONDS);
  }
  if (modelconf.hasDefined(CommonAttributes.SOCKET_TIMEOUT))   config.setSocketTimeout(modelconf.get(CommonAttributes.SOCKET_TIMEOUT).asInt());
  final ModelNode loadmetric=modelconf.get(CommonAttributes.LOAD_METRIC);
  if (loadmetric.hasDefined(CommonAttributes.SIMPLE_LOAD_PROVIDER)) {
    final ModelNode node=loadmetric.get(CommonAttributes.SIMPLE_LOAD_PROVIDER);
    SimpleLoadBalanceFactorProvider myload=new SimpleLoadBalanceFactorProvider();
    myload.setLoadBalanceFactor(node.get(CommonAttributes.FACTOR).asInt(1));
    load=myload;
  }
  Set<LoadMetric<LoadContext>> metrics=new HashSet<LoadMetric<LoadContext>>();
  if (loadmetric.hasDefined(CommonAttributes.DYNAMIC_LOAD_PROVIDER)) {
    final ModelNode node=loadmetric.get(CommonAttributes.DYNAMIC_LOAD_PROVIDER);
    int decayFactor=node.get(CommonAttributes.DECAY).asInt(512);
    int history=node.get(CommonAttributes.HISTORY).asInt(512);
    if (node.hasDefined(CommonAttributes.LOAD_METRIC)) {
      final ModelNode nodemetric=node.get(CommonAttributes.LOAD_METRIC);
      final List<ModelNode> array=nodemetric.asList();
      addLoadMetrics(metrics,array);
    }
    if (node.hasDefined(CommonAttributes.CUSTOM_LOAD_METRIC)) {
      final ModelNode nodemetric=node.get(CommonAttributes.CUSTOM_LOAD_METRIC);
      final List<ModelNode> array=nodemetric.asList();
      addCustomLoadMetrics(metrics,array);
    }
    if (!metrics.isEmpty()) {
      DynamicLoadBalanceFactorProvider loader=new DynamicLoadBalanceFactorProvider(metrics);
      loader.setDecayFactor(decayFactor);
      loader.setHistory(history);
      load=loader;
    }
  }
  if (load == null) {
    log.info("Mod_cluster uses default load balancer provider");
    SimpleLoadBalanceFactorProvider myload=new SimpleLoadBalanceFactorProvider();
    myload.setLoadBalanceFactor(1);
    load=myload;
  }
  service=new org.jboss.modcluster.ModClusterService(config,load);
  adapter=new CatalinaEventHandlerAdapter(service,webServer.getValue().getServer(),webServer.getValue().getService());
  try {
    adapter.start();
  }
 catch (  JMException e) {
    e.printStackTrace();
  }
}
