{
  log.debugf("Starting Mod_cluster Extension");
  final MBeanServer mbeanServer=getMBeanServer();
  config=new ModClusterConfig();
  final ModelNode proxyconf=modelconf.get(CommonAttributes.PROXY_CONF);
  final ModelNode httpdconf=proxyconf.get(CommonAttributes.HTTPD_CONF);
  final ModelNode nodeconf=proxyconf.get(CommonAttributes.NODES_CONF);
  if (httpdconf.has(CommonAttributes.ADVERTISE_SOCKET)) {
    config.setAdvertisePort(23364);
    config.setAdvertiseGroupAddress("224.0.1.105");
  }
  if (httpdconf.has(CommonAttributes.SSL)) {
  }
  if (httpdconf.has(CommonAttributes.ADVERTISE))   config.setAdvertise(httpdconf.get(CommonAttributes.ADVERTISE).asBoolean());
  if (httpdconf.has(CommonAttributes.PROXY_LIST)) {
    config.setProxyList(httpdconf.get(CommonAttributes.PROXY_LIST).asString());
  }
  if (httpdconf.has(CommonAttributes.PROXY_URL))   config.setProxyList(httpdconf.get(CommonAttributes.PROXY_URL).asString());
  if (httpdconf.has(CommonAttributes.ADVERTISE_SECURITY_KEY))   config.setProxyList(httpdconf.get(CommonAttributes.ADVERTISE_SECURITY_KEY).asString());
  if (nodeconf.has(CommonAttributes.EXCLUDED_CONTEXTS))   config.setExcludedContexts(nodeconf.get(CommonAttributes.EXCLUDED_CONTEXTS).asString());
  if (nodeconf.has(CommonAttributes.AUTO_ENABLE_CONTEXTS))   config.setAutoEnableContexts(nodeconf.get(CommonAttributes.AUTO_ENABLE_CONTEXTS).asBoolean());
  if (nodeconf.has(CommonAttributes.STOP_CONTEXT_TIMEOUT)) {
    config.setStopContextTimeout(nodeconf.get(CommonAttributes.SOCKET_TIMEOUT).asInt());
    config.setStopContextTimeoutUnit(TimeUnit.SECONDS);
  }
  if (nodeconf.has(CommonAttributes.SOCKET_TIMEOUT))   config.setSocketTimeout(nodeconf.get(CommonAttributes.SOCKET_TIMEOUT).asInt());
  final ModelNode loadmetric=modelconf.get(CommonAttributes.LOAD_METRIC);
  if (loadmetric.has(CommonAttributes.LOAD_METRIC_SIMPLE)) {
    final ModelNode node=loadmetric.get(CommonAttributes.LOAD_METRIC_SIMPLE);
    SimpleLoadBalanceFactorProvider myload=new SimpleLoadBalanceFactorProvider();
    myload.setLoadBalanceFactor(node.get(CommonAttributes.FACTOR).asInt(1));
    load=myload;
  }
  if (loadmetric.has(CommonAttributes.LOAD_METRIC_SERVER_SIDE)) {
    final ModelNode node=loadmetric.get(CommonAttributes.LOAD_METRIC_SERVER_SIDE);
  }
  if (loadmetric.has(CommonAttributes.LOAD_METRIC_WEB_CONTAINER_SIDE)) {
    final ModelNode node=loadmetric.get(CommonAttributes.LOAD_METRIC_WEB_CONTAINER_SIDE);
    String name=node.get(CommonAttributes.NAME).asString();
    int capacity=node.get(CommonAttributes.CAPACITY).asInt(512);
    Set<LoadMetric<LoadContext>> metrics=null;
    LoadMetric<LoadContext> metric=null;
    Class<? extends LoadMetric> loadMetricClass=null;
    if (name.equals("ActiveSessionsLoadMetric"))     loadMetricClass=ActiveSessionsLoadMetric.class;
    if (name.equals("BusyConnectorsLoadMetric"))     loadMetricClass=BusyConnectorsLoadMetric.class;
    if (name.equals("ReceiveTrafficLoadMetric"))     loadMetricClass=ReceiveTrafficLoadMetric.class;
    if (name.equals("SendTrafficLoadMetric"))     loadMetricClass=SendTrafficLoadMetric.class;
    if (name.equals("RequestCountLoadMetric"))     loadMetricClass=RequestCountLoadMetric.class;
    if (loadMetricClass != null) {
      try {
        metric=loadMetricClass.newInstance();
        metric.setCapacity(capacity);
        metrics.add(metric);
      }
 catch (      InstantiationException e) {
        e.printStackTrace();
      }
catch (      IllegalAccessException e) {
        e.printStackTrace();
      }
    }
    if (metrics != null) {
      load=new DynamicLoadBalanceFactorProvider(metrics);
    }
  }
  if (load == null) {
    log.info("Mod_cluster uses default load balancer provider");
    SimpleLoadBalanceFactorProvider myload=new SimpleLoadBalanceFactorProvider();
    myload.setLoadBalanceFactor(1);
    load=myload;
  }
  service=new org.jboss.modcluster.ModClusterService(config,load);
  adapter=new CatalinaEventHandlerAdapter(service,mbeanServer);
  try {
    adapter.start();
  }
 catch (  JMException e) {
    e.printStackTrace();
  }
}
