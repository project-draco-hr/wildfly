{
  ROOT_LOGGER.debugf("Starting Mod_cluster Extension");
  ModClusterConfig config=new ModClusterConfig();
  if (!modelconf.hasDefined(CommonAttributes.PROXY_LIST)) {
    config.setAdvertise(this.isMulticastEnabled(bindingManager.getValue().getDefaultInterfaceBinding().getNetworkInterfaces()));
  }
  config.setAdvertisePort(23364);
  config.setAdvertiseGroupAddress("224.0.1.105");
  config.setAdvertiseInterface(bindingManager.getValue().getDefaultInterfaceAddress().getHostAddress());
  config.setAutoEnableContexts(true);
  config.setStopContextTimeout(10);
  config.setSocketTimeout(20000);
  config.setExcludedContexts("ROOT,invoker,jbossws,juddi,console");
  if (modelconf.hasDefined(CommonAttributes.ADVERTISE_SOCKET)) {
    final SocketBinding binding=this.binding.getValue();
    if (binding != null) {
      config.setAdvertisePort(binding.getMulticastPort());
      config.setAdvertiseGroupAddress(binding.getMulticastSocketAddress().getHostName());
      config.setAdvertiseInterface(binding.getSocketAddress().getAddress().getHostAddress());
      if (!this.isMulticastEnabled(binding.getNetworkInterfaceBinding().getNetworkInterfaces())) {
        ROOT_LOGGER.multicastInterfaceNotAvailable();
      }
      config.setAdvertise(true);
    }
  }
  if (modelconf.get(ModClusterExtension.SSL_CONFIGURATION_PATH.getKeyValuePair()).isDefined()) {
    config.setSsl(true);
    final ModelNode ssl=modelconf.get(ModClusterExtension.SSL_CONFIGURATION_PATH.getKeyValuePair());
    if (ssl.has(CommonAttributes.KEY_ALIAS)) {
      config.setSslKeyAlias(ssl.get(CommonAttributes.KEY_ALIAS).asString());
    }
    if (ssl.has(CommonAttributes.PASSWORD)) {
      String password=ssl.get(CommonAttributes.PASSWORD).asString();
      config.setSslTrustStorePassword(password);
      config.setSslKeyStorePassword(password);
    }
    if (ssl.has(CommonAttributes.CERTIFICATE_KEY_FILE)) {
      config.setSslKeyStore(ssl.get(CommonAttributes.CERTIFICATE_KEY_FILE).asString());
    }
    if (ssl.has(CommonAttributes.CIPHER_SUITE)) {
      config.setSslCiphers(ssl.get(CommonAttributes.CIPHER_SUITE).asString());
    }
    if (ssl.has(CommonAttributes.PROTOCOL)) {
      config.setSslProtocol(ssl.get(CommonAttributes.PROTOCOL).asString());
    }
    if (ssl.has(CommonAttributes.CA_CERTIFICATE_FILE)) {
      config.setSslTrustStore(ssl.get(CommonAttributes.CA_CERTIFICATE_FILE).asString());
    }
    if (ssl.has(CommonAttributes.CA_REVOCATION_URL)) {
      config.setSslCrlFile(ssl.get(CommonAttributes.CA_REVOCATION_URL).asString());
    }
  }
  if (modelconf.hasDefined(CommonAttributes.ADVERTISE)) {
    config.setAdvertise(modelconf.get(CommonAttributes.ADVERTISE).asBoolean());
  }
  if (modelconf.hasDefined(CommonAttributes.PROXY_LIST)) {
    config.setProxyList(modelconf.get(CommonAttributes.PROXY_LIST).asString());
  }
  if (modelconf.hasDefined(CommonAttributes.PROXY_URL)) {
    config.setProxyURL(modelconf.get(CommonAttributes.PROXY_URL).asString());
  }
  if (modelconf.has(CommonAttributes.ADVERTISE_SECURITY_KEY)) {
    config.setAdvertiseSecurityKey(modelconf.get(CommonAttributes.ADVERTISE_SECURITY_KEY).asString());
  }
  if (modelconf.hasDefined(CommonAttributes.EXCLUDED_CONTEXTS)) {
    String defaulthost=((Engine)webServer.getValue().getService().getContainer()).getDefaultHost();
    String exluded_contexts=null;
    for (    String exluded_context : modelconf.get(CommonAttributes.EXCLUDED_CONTEXTS).asString().trim().split(",")) {
      String[] parts=exluded_context.trim().split(":");
      if (parts.length != 1) {
        if (exluded_contexts == null) {
          exluded_contexts="";
        }
 else {
          exluded_contexts=exluded_contexts.concat(",");
        }
        exluded_contexts=exluded_contexts.concat(exluded_context);
      }
 else {
        if (exluded_contexts == null) {
          exluded_contexts="";
        }
 else {
          exluded_contexts=exluded_contexts.concat(",");
        }
        exluded_contexts=exluded_contexts.concat(defaulthost).concat(":").concat(exluded_context);
      }
    }
    config.setExcludedContexts(exluded_contexts);
  }
  if (modelconf.hasDefined(CommonAttributes.AUTO_ENABLE_CONTEXTS)) {
    config.setAutoEnableContexts(modelconf.get(CommonAttributes.AUTO_ENABLE_CONTEXTS).asBoolean());
  }
  if (modelconf.hasDefined(CommonAttributes.STOP_CONTEXT_TIMEOUT)) {
    config.setStopContextTimeout(modelconf.get(CommonAttributes.STOP_CONTEXT_TIMEOUT).asInt());
    config.setStopContextTimeoutUnit(TimeUnit.SECONDS);
  }
  if (modelconf.hasDefined(CommonAttributes.SOCKET_TIMEOUT)) {
    config.setSocketTimeout(modelconf.get(CommonAttributes.SOCKET_TIMEOUT).asInt() * 1000);
  }
  if (modelconf.hasDefined(CommonAttributes.STICKY_SESSION)) {
    config.setStickySession(modelconf.get(CommonAttributes.STICKY_SESSION).asBoolean());
  }
  if (modelconf.hasDefined(CommonAttributes.STICKY_SESSION_REMOVE)) {
    config.setStickySessionRemove(modelconf.get(CommonAttributes.STICKY_SESSION_REMOVE).asBoolean());
  }
  if (modelconf.hasDefined(CommonAttributes.STICKY_SESSION_FORCE)) {
    config.setStickySessionForce(modelconf.get(CommonAttributes.STICKY_SESSION_FORCE).asBoolean());
  }
  if (modelconf.hasDefined(CommonAttributes.WORKER_TIMEOUT)) {
    config.setWorkerTimeout(modelconf.get(CommonAttributes.WORKER_TIMEOUT).asInt());
  }
  if (modelconf.hasDefined(CommonAttributes.MAX_ATTEMPTS)) {
    config.setMaxAttempts(modelconf.get(CommonAttributes.MAX_ATTEMPTS).asInt());
  }
  if (modelconf.hasDefined(CommonAttributes.FLUSH_PACKETS)) {
    config.setFlushPackets(modelconf.get(CommonAttributes.FLUSH_PACKETS).asBoolean());
  }
  if (modelconf.hasDefined(CommonAttributes.FLUSH_WAIT)) {
    config.setFlushWait(modelconf.get(CommonAttributes.FLUSH_WAIT).asInt());
  }
  if (modelconf.hasDefined(CommonAttributes.PING)) {
    config.setPing(modelconf.get(CommonAttributes.PING).asInt());
  }
  if (modelconf.hasDefined(CommonAttributes.SMAX)) {
    config.setSmax(modelconf.get(CommonAttributes.SMAX).asInt());
  }
  if (modelconf.hasDefined(CommonAttributes.TTL)) {
    config.setTtl(modelconf.get(CommonAttributes.TTL).asInt());
  }
  if (modelconf.hasDefined(CommonAttributes.NODE_TIMEOUT)) {
    config.setNodeTimeout(modelconf.get(CommonAttributes.NODE_TIMEOUT).asInt());
  }
  if (modelconf.hasDefined(CommonAttributes.BALANCER)) {
    config.setBalancer(modelconf.get(CommonAttributes.BALANCER).asString());
  }
  if (modelconf.hasDefined(CommonAttributes.LOAD_BALANCING_GROUP)) {
    config.setLoadBalancingGroup(modelconf.get(CommonAttributes.LOAD_BALANCING_GROUP).asString());
  }
  if (modelconf.hasDefined(CommonAttributes.SIMPLE_LOAD_PROVIDER_FACTOR)) {
    final ModelNode node=modelconf.get(CommonAttributes.SIMPLE_LOAD_PROVIDER_FACTOR);
    SimpleLoadBalanceFactorProvider myload=new SimpleLoadBalanceFactorProvider();
    myload.setLoadBalanceFactor(node.asInt(1));
    load=myload;
  }
  Set<LoadMetric> metrics=new HashSet<LoadMetric>();
  if (modelconf.get(ModClusterExtension.DYNAMIC_LOAD_PROVIDER.getKeyValuePair()).isDefined()) {
    final ModelNode node=modelconf.get(ModClusterExtension.DYNAMIC_LOAD_PROVIDER.getKeyValuePair());
    int decayFactor=node.get(CommonAttributes.DECAY).asInt(DynamicLoadBalanceFactorProvider.DEFAULT_DECAY_FACTOR);
    int history=node.get(CommonAttributes.HISTORY).asInt(DynamicLoadBalanceFactorProvider.DEFAULT_HISTORY);
    if (node.hasDefined(CommonAttributes.LOAD_METRIC)) {
      addLoadMetrics(metrics,node.get(CommonAttributes.LOAD_METRIC));
    }
    if (node.hasDefined(CommonAttributes.CUSTOM_LOAD_METRIC)) {
      addLoadMetrics(metrics,node.get(CommonAttributes.CUSTOM_LOAD_METRIC));
    }
    if (!metrics.isEmpty()) {
      DynamicLoadBalanceFactorProvider loader=new DynamicLoadBalanceFactorProvider(metrics);
      loader.setDecayFactor(decayFactor);
      loader.setHistory(history);
      load=loader;
    }
  }
  if (load == null) {
    ROOT_LOGGER.useDefaultLoadBalancer();
    SimpleLoadBalanceFactorProvider myload=new SimpleLoadBalanceFactorProvider();
    myload.setLoadBalanceFactor(1);
    load=myload;
  }
  service=new org.jboss.modcluster.ModClusterService(config,load);
  adapter=new CatalinaEventHandlerAdapter(service,webServer.getValue().getServer());
  adapter.start();
}
