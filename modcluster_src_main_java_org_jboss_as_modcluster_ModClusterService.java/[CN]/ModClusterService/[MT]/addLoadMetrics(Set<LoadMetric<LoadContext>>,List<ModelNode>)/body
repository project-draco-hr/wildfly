{
  Iterator<ModelNode> it=array.iterator();
  while (it.hasNext()) {
    final ModelNode node=(ModelNode)it.next();
    int capacity=node.get(CommonAttributes.CAPACITY).asInt(512);
    int weight=node.get(CommonAttributes.WEIGHT).asInt(9);
    String type=node.get(CommonAttributes.TYPE).asString();
    Class<? extends LoadMetric> loadMetricClass=null;
    LoadMetric<LoadContext> metric=null;
    if (type.equals("cpu"))     loadMetricClass=AverageSystemLoadMetric.class;
    if (type.equals("mem"))     loadMetricClass=SystemMemoryUsageLoadMetric.class;
    if (type.equals("heap"))     loadMetricClass=HeapMemoryUsageLoadMetric.class;
    if (type.equals("sessions"))     loadMetricClass=ActiveSessionsLoadMetric.class;
    if (type.equals("receive-traffic"))     loadMetricClass=ReceiveTrafficLoadMetric.class;
    if (type.equals("send-traffic"))     loadMetricClass=SendTrafficLoadMetric.class;
    if (type.equals("requests"))     loadMetricClass=RequestCountLoadMetric.class;
    if (type.equals("connection-pool"))     loadMetricClass=ConnectionPoolUsageLoadMetric.class;
    if (type.equals("busyness"))     loadMetricClass=BusyConnectorsLoadMetric.class;
    if (loadMetricClass != null) {
      try {
        metric=loadMetricClass.newInstance();
        metric.setCapacity(capacity);
        metric.setWeight(weight);
        metrics.add(metric);
      }
 catch (      InstantiationException e) {
        e.printStackTrace();
      }
catch (      IllegalAccessException e) {
        e.printStackTrace();
      }
    }
  }
}
