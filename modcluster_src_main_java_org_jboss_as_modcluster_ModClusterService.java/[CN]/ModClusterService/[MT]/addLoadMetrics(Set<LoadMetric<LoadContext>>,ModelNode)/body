{
  for (  ModelNode node : nodes.asList()) {
    double capacity=node.get(CommonAttributes.CAPACITY).asDouble(LoadMetric.DEFAULT_CAPACITY);
    int weight=node.get(CommonAttributes.WEIGHT).asInt(LoadMetric.DEFAULT_WEIGHT);
    Class<? extends LoadMetric> loadMetricClass=null;
    if (node.hasDefined(CommonAttributes.TYPE)) {
      String type=node.get(CommonAttributes.TYPE).asString();
      if (type.equals("cpu"))       loadMetricClass=AverageSystemLoadMetric.class;
      if (type.equals("mem"))       loadMetricClass=SystemMemoryUsageLoadMetric.class;
      if (type.equals("heap"))       loadMetricClass=HeapMemoryUsageLoadMetric.class;
      if (type.equals("sessions"))       loadMetricClass=ActiveSessionsLoadMetric.class;
      if (type.equals("receive-traffic"))       loadMetricClass=ReceiveTrafficLoadMetric.class;
      if (type.equals("send-traffic"))       loadMetricClass=SendTrafficLoadMetric.class;
      if (type.equals("requests"))       loadMetricClass=RequestCountLoadMetric.class;
      if (type.equals("connection-pool"))       loadMetricClass=ConnectionPoolUsageLoadMetric.class;
      if (type.equals("busyness"))       loadMetricClass=BusyConnectorsLoadMetric.class;
    }
 else {
      String className=node.get(CommonAttributes.CLASS).asString();
      try {
        loadMetricClass=(Class<? extends LoadMetric>)this.getClass().getClassLoader().loadClass(className);
      }
 catch (      ClassNotFoundException e) {
        e.printStackTrace();
      }
    }
    if (loadMetricClass != null) {
      try {
        LoadMetric<LoadContext> metric=loadMetricClass.newInstance();
        metric.setCapacity(capacity);
        metric.setWeight(weight);
        metrics.add(metric);
      }
 catch (      InstantiationException e) {
        e.printStackTrace();
      }
catch (      IllegalAccessException e) {
        e.printStackTrace();
      }
    }
  }
}
