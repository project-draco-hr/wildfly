{
  Class<?> clazz=componentClass;
  while (clazz != Object.class && clazz != null) {
    final ClassReflectionIndex<?> classIndex=reflectionIndex.getClassIndex(clazz);
    if (methodData.getMethodParams() == null) {
      final Collection<Method> methods=classIndex.getAllMethods(methodData.getMethodName());
      if (methods.size() > 1) {
        throw new DeploymentUnitProcessingException("More than one method " + methodData.getMethodName() + "found on class"+ componentClass.getName()+ " referenced in ejb-jar.xml. Specify the parameter types to resolve the ambiguity");
      }
 else       if (methods.size() == 1) {
        return methods.iterator().next();
      }
    }
 else {
      final Collection<Method> methods=classIndex.getAllMethods(methodData.getMethodName(),methodData.getMethodParams().size());
      for (      final Method method : methods) {
        boolean match=true;
        for (int i=0; i < method.getParameterTypes().length; ++i) {
          if (!method.getParameterTypes()[i].getName().equals(methodData.getMethodParams().get(i))) {
            match=false;
            break;
          }
        }
        if (match) {
          return method;
        }
      }
    }
    clazz=clazz.getSuperclass();
  }
  throw new DeploymentUnitProcessingException("Could not find method" + componentClass.getName() + "."+ methodData.getMethodName()+ " referenced in ejb-jar.xml");
}
