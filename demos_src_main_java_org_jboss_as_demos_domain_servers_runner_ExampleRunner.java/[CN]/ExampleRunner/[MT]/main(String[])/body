{
  DomainClient client=null;
  try {
    client=DomainClient.Factory.create(InetAddress.getByName("localhost"),9999);
    System.out.println("\nReading the list of configured servers:");
    Map<ServerIdentity,ServerStatus> statuses=new HashMap<ServerIdentity,ServerStatus>(client.getServerStatuses());
    for (    Map.Entry<ServerIdentity,ServerStatus> server : statuses.entrySet()) {
      ServerIdentity id=server.getKey();
      System.out.println("\nServer:\n");
      System.out.println("server name:         " + id.getServerName());
      System.out.println("host controller name: " + id.getHostName());
      System.out.println("server group name:   " + id.getServerGroupName());
      System.out.println("status:              " + server.getValue());
    }
    List<ServerIdentity> servers=findUsefulServers(statuses,ServerStatus.STARTED);
    for (    ServerIdentity server : servers) {
      System.out.println("\nReading runtime configuration for " + server.getServerName() + "\n");
      ServerModel hc=client.getServerModel(server.getHostName(),server.getServerName());
      if (hc == null) {
        System.out.println("ERROR: server model is null");
      }
 else {
        System.out.println(writeModel("server",hc));
      }
    }
    for (    ServerIdentity server : servers) {
      System.out.println("\nStopping server " + server.getServerName() + "\n");
      ServerStatus status=client.stopServer(server.getHostName(),server.getServerName(),-1,TimeUnit.SECONDS);
      System.out.println("Stop executed. Server status is " + status);
      statuses.put(server,status);
    }
    servers=findUsefulServers(statuses,ServerStatus.STOPPED);
    for (    ServerIdentity server : servers) {
      System.out.println("\nStarting server " + server.getServerName() + "\n");
      ServerStatus status=client.startServer(server.getHostName(),server.getServerName());
      System.out.println("Start executed. Server status is " + status);
      statuses.put(server,status);
    }
    Thread.sleep(2000);
    servers=findUsefulServers(statuses,ServerStatus.STARTED);
    for (    ServerIdentity server : servers) {
      System.out.println("\nRestarting server " + server.getServerName() + "\n");
      ServerStatus status=client.restartServer(server.getHostName(),server.getServerName(),-1,TimeUnit.SECONDS);
      System.out.println("Restart executed. Server status is " + status);
      statuses.put(server,status);
    }
    Thread.sleep(2000);
    System.out.println("\nCurrent server statuses\n");
    for (    Map.Entry<ServerIdentity,ServerStatus> server : client.getServerStatuses().entrySet()) {
      ServerIdentity id=server.getKey();
      System.out.println("\nServer:\n");
      System.out.println("server name:         " + id.getServerName());
      System.out.println("host controller name: " + id.getHostName());
      System.out.println("server group name:   " + id.getServerGroupName());
      System.out.println("status:              " + server.getValue());
    }
    Thread.sleep(2000);
    final String serverName="example-server";
    System.out.println("\nCreating new server: " + serverName + "\n");
    final List<String> hostControllers=client.getHostControllerNames();
    final String hostControllerName=hostControllers.get(0);
    System.out.println("Adding to host controller: " + hostControllerName);
    final String serverGroup=client.getDomainModel().getServerGroupNames().iterator().next();
    System.out.println("Adding to server group: " + serverGroup);
    List<AbstractHostModelUpdate<?>> updates=new ArrayList<AbstractHostModelUpdate<?>>(2);
    updates.add(new HostServerAdd(serverName,serverGroup));
    updates.add(HostServerUpdate.create(serverName,new ServerElementSocketBindingGroupUpdate("standard-sockets")));
    updates.add(HostServerUpdate.create(serverName,new ServerElementSocketBindingPortOffsetUpdate(350)));
    List<HostUpdateResult<?>> results=client.applyHostUpdates(hostControllerName,updates);
    HostUpdateResult<?> result=results.get(0);
    System.out.println("Add success: " + result.isSuccess());
    if (result.isSuccess()) {
      System.out.println("Starting server " + serverName);
      ServerStatus status=client.startServer(hostControllerName,serverName);
      System.out.println("Start executed. Server status is " + status);
      Thread.sleep(1000);
      System.out.println("\nStopping server " + serverName);
      status=client.stopServer(hostControllerName,serverName,-1,TimeUnit.SECONDS);
      System.out.println("Stop executed. Server status is " + status);
      System.out.println("Removing server " + serverName);
      updates=new ArrayList<AbstractHostModelUpdate<?>>(1);
      updates.add(new HostServerRemove(serverName));
      results=client.applyHostUpdates(hostControllerName,updates);
      result=results.get(0);
      System.out.println("Remove success: " + result.isSuccess());
    }
  }
  finally {
    safeClose(client);
  }
}
