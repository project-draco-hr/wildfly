{
  DomainClient client=null;
  try {
    client=DomainClient.Factory.create(InetAddress.getByName("localhost"),9999);
    System.out.println("\nReading the domain configuration:\n");
    System.out.println(writeModel("domain",client.getDomainModel()));
    System.out.println("\nReading the list of active server managers:\n");
    List<String> serverManagers=client.getServerManagerNames();
    for (    String sm : serverManagers) {
      System.out.println(sm);
    }
    for (    String sm : serverManagers) {
      System.out.println("\nReading host configuration for server manager " + sm + "\n");
      System.out.println(writeModel("host",client.getHostModel(sm)));
    }
    System.out.println("\nReading the list of configured servers:");
    Map<ServerIdentity,ServerStatus> statuses=new HashMap<ServerIdentity,ServerStatus>(client.getServerStatuses());
    for (    Map.Entry<ServerIdentity,ServerStatus> server : statuses.entrySet()) {
      ServerIdentity id=server.getKey();
      System.out.println("\nServer:\n");
      System.out.println("server name:         " + id.getServerName());
      System.out.println("server manager name: " + id.getHostName());
      System.out.println("server group name:   " + id.getServerGroupName());
      System.out.println("status:              " + server.getValue());
    }
    List<ServerIdentity> servers=findUsefulServers(statuses,ServerStatus.STARTED);
    for (    ServerIdentity server : servers) {
      System.out.println("\nReading runtime configuration for " + server.getServerName() + "\n");
      ServerModel sm=client.getServerModel(server.getHostName(),server.getServerName());
      if (sm == null) {
        System.out.println("ERROR: server model is null");
      }
 else {
        System.out.println(writeModel("server",sm));
      }
    }
    for (    ServerIdentity server : servers) {
      System.out.println("\nStopping server " + server.getServerName() + "\n");
      ServerStatus status=client.stopServer(server.getHostName(),server.getServerName(),-1,TimeUnit.SECONDS);
      System.out.println("Stop executed. Server status is " + status);
      statuses.put(server,status);
    }
    servers=findUsefulServers(statuses,ServerStatus.STOPPED);
    for (    ServerIdentity server : servers) {
      System.out.println("\nStarting server " + server.getServerName() + "\n");
      ServerStatus status=client.startServer(server.getHostName(),server.getServerName());
      System.out.println("Start executed. Server status is " + status);
      statuses.put(server,status);
    }
    Thread.sleep(2000);
    servers=findUsefulServers(statuses,ServerStatus.STARTED);
    for (    ServerIdentity server : servers) {
      System.out.println("\nRestarting server " + server.getServerName() + "\n");
      ServerStatus status=client.restartServer(server.getHostName(),server.getServerName(),-1,TimeUnit.SECONDS);
      System.out.println("Restart executed. Server status is " + status);
      statuses.put(server,status);
    }
    Thread.sleep(2000);
    System.out.println("\nCurrent server statuses\n");
    for (    Map.Entry<ServerIdentity,ServerStatus> server : client.getServerStatuses().entrySet()) {
      ServerIdentity id=server.getKey();
      System.out.println("\nServer:\n");
      System.out.println("server name:         " + id.getServerName());
      System.out.println("server manager name: " + id.getHostName());
      System.out.println("server group name:   " + id.getServerGroupName());
      System.out.println("status:              " + server.getValue());
    }
  }
  finally {
    safeClose(client);
  }
}
