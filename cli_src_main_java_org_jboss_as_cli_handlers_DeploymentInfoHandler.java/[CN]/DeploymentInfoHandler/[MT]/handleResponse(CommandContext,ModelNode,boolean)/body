{
  try {
    if (!response.hasDefined(Util.RESULT)) {
      throw new CommandFormatException("The operation response came back w/o result: " + response);
    }
    ModelNode result=response.get(Util.RESULT);
    if (ctx.isDomainMode()) {
      if (result.hasDefined(Util.DOMAIN_RESULTS)) {
        result=result.get(Util.DOMAIN_RESULTS);
      }
      final Iterator<Property> steps=result.asPropertyList().iterator();
      if (!steps.hasNext()) {
        throw new CommandFormatException("Response for the main resource info of the deployment is missing: " + result);
      }
      ModelNode step=steps.next().getValue();
      if (step.has(Util.STEP_1)) {
        step=step.get(Util.STEP_1);
      }
      if (!step.has(Util.RESULT)) {
        throw new CommandFormatException("Failed to read the main resource info of the deployment: " + Util.getFailureDescription(step));
      }
      ModelNode stepResponse=step.get(Util.RESULT);
      final StrictSizeTable table=new StrictSizeTable(1);
      table.addCell(Util.NAME,stepResponse.get(Util.NAME).asString());
      table.addCell(Util.RUNTIME_NAME,stepResponse.get(Util.RUNTIME_NAME).asString());
      ctx.printLine(table.toString());
      final SimpleTable groups=new SimpleTable(new String[]{"SERVER GROUP","STATE"});
      if (addedServerGroups == null) {
        if (steps.hasNext()) {
          throw new CommandFormatException("Didn't expect results for server groups but received " + (result.asPropertyList().size() - 1) + " more steps.");
        }
      }
 else {
        for (        String sg : addedServerGroups) {
          final Property prop=steps.next();
          stepResponse=prop.getValue();
          if (stepResponse.has(prop.getName())) {
            stepResponse=stepResponse.get(prop.getName());
          }
          if (stepResponse.hasDefined(Util.RESULT)) {
            final ModelNode stepResult=stepResponse.get(Util.RESULT);
            if (stepResult.hasDefined(Util.ENABLED)) {
              groups.addLine(new String[]{sg,stepResult.get(Util.ENABLED).asBoolean() ? Util.ENABLED : "added"});
            }
 else {
              groups.addLine(new String[]{sg,"n/a"});
            }
          }
 else {
            groups.addLine(new String[]{sg,"no response"});
          }
        }
      }
      if (otherServerGroups != null) {
        for (        String sg : otherServerGroups) {
          groups.addLine(new String[]{sg,"not added"});
        }
      }
      ctx.printLine(groups.toString(true));
    }
 else {
      final StrictSizeTable table=new StrictSizeTable(1);
      table.addCell(Util.NAME,result.get(Util.NAME).asString());
      table.addCell(Util.RUNTIME_NAME,result.get(Util.RUNTIME_NAME).asString());
      table.addCell(Util.PERSISTENT,result.get(Util.PERSISTENT).asString());
      table.addCell(Util.ENABLED,result.get(Util.ENABLED).asString());
      table.addCell(Util.STATUS,result.get(Util.STATUS).asString());
      ctx.printLine(table.toString());
    }
  }
  finally {
    addedServerGroups=null;
    otherServerGroups=null;
  }
}
