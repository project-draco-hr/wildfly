{
  final ParsedCommandLine parsedCmd=ctx.getParsedCommandLine();
  if (!name.isPresent(parsedCmd)) {
    throw new CommandFormatException("Required argument " + name.getFullName() + " is missing.");
  }
  final String deploymentName=name.getValue(parsedCmd);
  final ModelNode request=new ModelNode();
  if (ctx.isDomainMode()) {
    final List<String> serverGroups=Util.getServerGroups(ctx.getModelControllerClient());
    addedServerGroups=null;
    otherServerGroups=null;
{
      final ModelNode validateRequest=new ModelNode();
      validateRequest.get(Util.OPERATION).set(Util.COMPOSITE);
      validateRequest.get(Util.ADDRESS).setEmptyList();
      final ModelNode steps=validateRequest.get(Util.STEPS);
      for (      String serverGroup : serverGroups) {
        final ModelNode step=new ModelNode();
        step.get(Util.ADDRESS).setEmptyList();
        step.get(Util.OPERATION).set(Util.VALIDATE_ADDRESS);
        final ModelNode value=step.get(Util.VALUE);
        value.add(Util.SERVER_GROUP,serverGroup);
        value.add(Util.DEPLOYMENT,deploymentName);
        steps.add(step);
      }
      final ModelControllerClient client=ctx.getModelControllerClient();
      final ModelNode response;
      try {
        response=client.execute(validateRequest);
      }
 catch (      IOException e) {
        throw new CommandFormatException("Failed to query server groups for deployment " + deploymentName,e);
      }
      if (!response.hasDefined(Util.RESULT)) {
        throw new CommandFormatException("The validation response came back w/o result: " + response);
      }
      ModelNode result=response.get(Util.RESULT);
      if (result.hasDefined(Util.DOMAIN_RESULTS)) {
        result=result.get(Util.DOMAIN_RESULTS);
      }
      final List<Property> stepResponses=result.asPropertyList();
      for (int i=0; i < serverGroups.size(); ++i) {
        final Property prop=stepResponses.get(i);
        ModelNode stepResponse=prop.getValue();
        if (stepResponse.has(prop.getName())) {
          stepResponse=stepResponse.get(prop.getName());
        }
        if (stepResponse.hasDefined(Util.RESULT)) {
          final ModelNode stepResult=stepResponse.get(Util.RESULT);
          if (stepResult.hasDefined(Util.VALID) && stepResult.get(Util.VALID).asBoolean()) {
            if (addedServerGroups == null) {
              addedServerGroups=new ArrayList<String>();
            }
            addedServerGroups.add(serverGroups.get(i));
          }
 else {
            if (otherServerGroups == null) {
              otherServerGroups=new ArrayList<String>();
            }
            otherServerGroups.add(serverGroups.get(i));
          }
        }
 else {
          if (otherServerGroups == null) {
            otherServerGroups=new ArrayList<String>();
          }
          otherServerGroups.add(serverGroups.get(i));
        }
      }
    }
    request.get(Util.OPERATION).set(Util.COMPOSITE);
    request.get(Util.ADDRESS).setEmptyList();
    final ModelNode steps=request.get(Util.STEPS);
    ModelNode step=new ModelNode();
    ModelNode address=step.get(Util.ADDRESS);
    address.add(Util.DEPLOYMENT,deploymentName);
    step.get(Util.OPERATION).set(Util.READ_RESOURCE);
    steps.add(step);
    if (addedServerGroups != null) {
      for (      String serverGroup : addedServerGroups) {
        step=new ModelNode();
        address=step.get(Util.ADDRESS);
        address.add(Util.SERVER_GROUP,serverGroup);
        address.add(Util.DEPLOYMENT,deploymentName);
        step.get(Util.OPERATION).set(Util.READ_RESOURCE);
        steps.add(step);
      }
    }
  }
 else {
    final ModelNode address=request.get(Util.ADDRESS);
    address.add(Util.DEPLOYMENT,deploymentName);
    request.get(Util.OPERATION).set(Util.READ_RESOURCE);
    request.get(Util.INCLUDE_RUNTIME).set(true);
  }
  return request;
}
