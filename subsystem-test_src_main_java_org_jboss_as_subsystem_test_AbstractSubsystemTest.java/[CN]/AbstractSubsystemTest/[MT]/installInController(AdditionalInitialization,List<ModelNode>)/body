{
  if (additionalInit == null) {
    additionalInit=new AdditionalInitialization();
  }
  ControllerInitializer controllerInitializer=additionalInit.createControllerInitializer();
  PathManagerService pathManager=new PathManagerService(){
  }
;
  controllerInitializer.setPathManger(pathManager);
  additionalInit.setupController(controllerInitializer);
  ServiceContainer container=ServiceContainer.Factory.create("test" + counter.incrementAndGet());
  ServiceTarget target=container.subTarget();
  ControlledProcessState processState=new ControlledProcessState(true);
  List<ModelNode> extraOps=controllerInitializer.initializeBootOperations();
  List<ModelNode> allOps=new ArrayList<ModelNode>();
  if (extraOps != null) {
    allOps.addAll(extraOps);
  }
  allOps.addAll(bootOperations);
  StringConfigurationPersister persister=new StringConfigurationPersister(allOps,testParser);
  controllerExtensionRegistry=cloneExtensionRegistry();
  controllerExtensionRegistry.setWriterRegistry(persister);
  controllerExtensionRegistry.setPathManager(pathManager);
  ModelControllerService svc=new ModelControllerService(mainExtension,controllerInitializer,additionalInit,controllerExtensionRegistry,processState,persister,additionalInit.isValidateOperations());
  ServiceBuilder<ModelController> builder=target.addService(Services.JBOSS_SERVER_CONTROLLER,svc);
  builder.install();
  target.addService(PathManagerService.SERVICE_NAME,pathManager).install();
  additionalInit.addExtraServices(target);
  svc.latch.await();
  ModelController controller=svc.getValue();
  processState.setRunning();
  KernelServices kernelServices=new KernelServices(container,controller,persister,new OperationValidator(svc.rootRegistration),mainSubsystemName);
  this.kernelServices.add(kernelServices);
  if (svc.error != null) {
    throw svc.error;
  }
  validateDescriptionProviders(additionalInit,kernelServices);
  ManagementResourceRegistration subsystemReg=svc.rootRegistration.getSubModel(PathAddress.pathAddress(PathElement.pathElement(SUBSYSTEM,mainSubsystemName)));
  validateModelDescriptions(PathAddress.EMPTY_ADDRESS,subsystemReg);
  return kernelServices;
}
