{
  Assert.assertEquals(getCompareStackAsString() + " types",node1.getType(),node2.getType());
  if (node1.getType() == ModelType.OBJECT) {
    final Set<String> keys1=node1.keys();
    final Set<String> keys2=node2.keys();
    Assert.assertEquals(node1 + "\n" + node2,keys1.size(),keys2.size());
    for (    String key : keys1) {
      final ModelNode child1=node1.get(key);
      Assert.assertTrue("Missing: " + key + "\n"+ node1+ "\n"+ node2,node2.has(key));
      final ModelNode child2=node2.get(key);
      if (child1.isDefined()) {
        Assert.assertTrue("key=" + key + "\n with child1 \n"+ child1.toString()+ "\n has child2 not defined\n node2 is:\n"+ node2.toString(),child2.isDefined());
        stack.get().push(key + "/");
        compare(child1,child2);
        stack.get().pop();
      }
 else {
        Assert.assertFalse(child2.asString(),child2.isDefined());
      }
    }
  }
 else   if (node1.getType() == ModelType.LIST) {
    List<ModelNode> list1=node1.asList();
    List<ModelNode> list2=node2.asList();
    Assert.assertEquals(list1 + "\n" + list2,list1.size(),list2.size());
    for (int i=0; i < list1.size(); i++) {
      stack.get().push(i + "/");
      compare(list1.get(i),list2.get(i));
      stack.get().pop();
    }
  }
 else   if (node1.getType() == ModelType.PROPERTY) {
    Property prop1=node1.asProperty();
    Property prop2=node2.asProperty();
    Assert.assertEquals(prop1 + "\n" + prop2,prop1.getName(),prop2.getName());
    stack.get().push(prop1.getName() + "/");
    compare(prop1.getValue(),prop2.getValue());
    stack.get().pop();
  }
 else {
    try {
      Assert.assertEquals(getCompareStackAsString() + "\n\"" + node1.asString()+ "\"\n\""+ node2.asString()+ "\"\n-----",node2.asString().trim(),node1.asString().trim());
    }
 catch (    AssertionFailedError error) {
      throw error;
    }
  }
}
