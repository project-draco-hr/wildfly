{
  Resource rootResource=grabRootResource(kernelServices);
  List<PathAddress> addresses=new ArrayList<PathAddress>();
  PathAddress pathAddress=PathAddress.pathAddress(PathElement.pathElement(SUBSYSTEM,mainSubsystemName));
  Resource subsystemResource=rootResource.getChild(pathAddress.getLastElement());
  Assert.assertNotNull(subsystemResource);
  addresses.add(pathAddress);
  getAllChildAddressesForRemove(pathAddress,addresses,subsystemResource);
  ModelNode composite=new ModelNode();
  composite.get(OP).set(CompositeOperationHandler.NAME);
  composite.get(OP_ADDR).setEmptyList();
  composite.get("rollback-on-runtime-failure").set(true);
  for (ListIterator<PathAddress> iterator=addresses.listIterator(addresses.size()); iterator.hasPrevious(); ) {
    PathAddress cur=iterator.previous();
    ModelNode remove=new ModelNode();
    remove.get(OP).set(REMOVE);
    remove.get(OP_ADDR).set(cur.toModelNode());
    composite.get("steps").add(remove);
  }
  System.out.println(composite);
  System.out.println(kernelServices.readWholeModel());
  ModelNode result=kernelServices.executeOperation(composite);
  System.out.println(result);
  ModelNode model=kernelServices.readWholeModel().get(SUBSYSTEM,mainSubsystemName);
  Assert.assertFalse("Subsystem resources were not removed " + model,model.isDefined());
}
