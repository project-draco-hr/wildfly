{
  Resource rootResource=grabRootResource(kernelServices);
  List<PathAddress> addresses=new ArrayList<PathAddress>();
  PathAddress pathAddress=PathAddress.pathAddress(PathElement.pathElement(SUBSYSTEM,mainSubsystemName));
  Resource subsystemResource=rootResource.getChild(pathAddress.getLastElement());
  Assert.assertNotNull(subsystemResource);
  addresses.add(pathAddress);
  getAllChildAddressesForRemove(pathAddress,addresses,subsystemResource);
  for (ListIterator<PathAddress> iterator=addresses.listIterator(addresses.size()); iterator.hasPrevious(); ) {
    PathAddress cur=iterator.previous();
    ModelNode remove=new ModelNode();
    remove.get(OP).set(REMOVE);
    remove.get(OP_ADDR).set(cur.toModelNode());
    ModelNode result=kernelServices.executeOperation(remove);
    Assert.assertEquals("Error removing " + cur + ": "+ result.get(FAILURE_DESCRIPTION).asString(),SUCCESS,result.get(OUTCOME).asString());
  }
  ModelNode model=kernelServices.readWholeModel().get(SUBSYSTEM,mainSubsystemName);
  Assert.assertFalse("Subsystem resources were not removed " + model,model.isDefined());
}
