{
  ModelNode attributes=reg.getModelDescription(PathAddress.EMPTY_ADDRESS).getModelDescription(Locale.getDefault()).get(ATTRIBUTES);
  Set<String> regAttributeNames=reg.getAttributeNames(PathAddress.EMPTY_ADDRESS);
  Set<String> attributeNames=new HashSet<String>();
  if (attributes.isDefined()) {
    if (attributes.asList().size() != regAttributeNames.size()) {
      for (      Property p : attributes.asPropertyList()) {
        attributeNames.add(p.getName());
      }
      if (regAttributeNames.size() > attributeNames.size()) {
        regAttributeNames.removeAll(attributeNames);
        Assert.fail("More attributes defined on resource registration than in description, missing: " + regAttributeNames + " for "+ address);
      }
 else       if (regAttributeNames.size() < attributeNames.size()) {
        attributeNames.removeAll(regAttributeNames);
        Assert.fail("More attributes defined in description than on resource registration, missing: " + attributeNames + " for "+ address);
      }
    }
    if (!attributeNames.containsAll(regAttributeNames)) {
      for (      Property p : attributes.asPropertyList()) {
        attributeNames.add(p.getName());
      }
      Set<String> missDesc=new HashSet<String>(attributeNames);
      missDesc.removeAll(regAttributeNames);
      Set<String> missReg=new HashSet<String>(regAttributeNames);
      missReg.removeAll(attributeNames);
      if (!missReg.isEmpty()) {
        Assert.fail("There are different attributes defined on resource registration than in description, registered only on Resource Reg: " + missReg + " for "+ address);
      }
      if (!missDesc.isEmpty()) {
        Assert.fail("There are different attributes defined on resource registration than in description, registered only int description: " + missDesc + " for "+ address);
      }
    }
  }
  for (  PathElement pe : reg.getChildAddresses(PathAddress.EMPTY_ADDRESS)) {
    ManagementResourceRegistration sub=reg.getSubModel(PathAddress.pathAddress(pe));
    validateModelDescriptions(address.append(pe),sub);
  }
}
