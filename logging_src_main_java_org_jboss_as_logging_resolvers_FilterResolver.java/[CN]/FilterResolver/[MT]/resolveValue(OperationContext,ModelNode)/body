{
  if (!value.isDefined()) {
    return null;
  }
  if (value.hasDefined(CommonAttributes.ACCEPT.getName())) {
    return "accept";
  }
 else   if (value.hasDefined(CommonAttributes.ALL.getName())) {
    final StringBuilder result=new StringBuilder("all(");
    boolean add=false;
    for (    ModelNode filterValue : value.get(CommonAttributes.ALL.getName()).asList()) {
      if (add) {
        result.append(",");
      }
 else {
        add=true;
      }
      result.append(resolveValue(context,filterValue));
    }
    return result.append(")").toString();
  }
 else   if (value.hasDefined(CommonAttributes.ANY.getName())) {
    final StringBuilder result=new StringBuilder("any(");
    boolean add=false;
    for (    ModelNode filterValue : value.get(CommonAttributes.ANY.getName()).asList()) {
      if (add) {
        result.append(",");
      }
 else {
        add=true;
      }
      result.append(resolveValue(context,filterValue));
    }
    return result.append(")").toString();
  }
 else   if (value.hasDefined(CommonAttributes.CHANGE_LEVEL.getName())) {
    return String.format("levelChange(%s)",LevelResolver.INSTANCE.resolveValue(context,CommonAttributes.CHANGE_LEVEL.resolveModelAttribute(context,value)));
  }
 else   if (value.hasDefined(CommonAttributes.DENY.getName())) {
    return "deny";
  }
 else   if (value.hasDefined(CommonAttributes.LEVEL.getName())) {
    return String.format("levels(%s)",LevelResolver.INSTANCE.resolveValue(context,CommonAttributes.LEVEL.resolveModelAttribute(context,value)));
  }
 else   if (value.hasDefined(CommonAttributes.LEVEL_RANGE.getName())) {
    final ModelNode levelRange=CommonAttributes.LEVEL_RANGE.resolveModelAttribute(context,value);
    final StringBuilder result=new StringBuilder("levelRange");
    final boolean minInclusive=CommonAttributes.MIN_INCLUSIVE.resolveModelAttribute(context,levelRange).asBoolean();
    final boolean maxInclusive=CommonAttributes.MAX_INCLUSIVE.resolveModelAttribute(context,levelRange).asBoolean();
    if (minInclusive) {
      result.append("[");
    }
 else {
      result.append("(");
    }
    result.append(LevelResolver.INSTANCE.resolveValue(context,CommonAttributes.MIN_LEVEL.resolveModelAttribute(context,levelRange))).append(",");
    result.append(LevelResolver.INSTANCE.resolveValue(context,CommonAttributes.MAX_LEVEL.resolveModelAttribute(context,levelRange)));
    if (maxInclusive) {
      result.append("]");
    }
 else {
      result.append(")");
    }
    return result.toString();
  }
 else   if (value.hasDefined(CommonAttributes.MATCH.getName())) {
    return String.format("match(%s)",escapeString(context,CommonAttributes.MATCH,value));
  }
 else   if (value.hasDefined(CommonAttributes.NOT.getName())) {
    return String.format("not(%s)",resolveValue(context,CommonAttributes.NOT.resolveModelAttribute(context,value)));
  }
 else   if (value.hasDefined(CommonAttributes.REPLACE.getName())) {
    final ModelNode replace=CommonAttributes.REPLACE.resolveModelAttribute(context,value);
    final boolean replaceAll=CommonAttributes.REPLACE_ALL.resolveModelAttribute(context,replace).asBoolean();
    final StringBuilder result=new StringBuilder("substitute");
    if (replaceAll) {
      result.append("All");
    }
    return result.append("(").append(escapeString(context,CommonAttributes.PATTERN,replace)).append(",").append(escapeString(context,CommonAttributes.REPLACEMENT,replace)).append(")").toString();
  }
  final String name=value.hasDefined(CommonAttributes.FILTER.getName()) ? value.get(CommonAttributes.FILTER.getName()).asString() : value.asString();
  throw Logging.createOperationFailure(MESSAGES.invalidFilter(name));
}
