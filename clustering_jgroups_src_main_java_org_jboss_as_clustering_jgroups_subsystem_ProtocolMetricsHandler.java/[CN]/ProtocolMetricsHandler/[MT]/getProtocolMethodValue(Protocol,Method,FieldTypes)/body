{
  return AccessController.doPrivileged(new PrivilegedExceptionAction<ModelNode>(){
    @Override public ModelNode run() throws Exception {
      ModelNode result=new ModelNode();
      String value;
      if (!m.isAccessible()) {
        m.setAccessible(true);
      }
      Object invocationResult=m.invoke(p);
switch (t) {
case BOOLEAN:
        result.set((boolean)invocationResult);
      break;
case BYTE:
    result.set((byte)invocationResult);
  break;
case CHAR:
result.set((char)invocationResult);
break;
case SHORT:
result.set((short)invocationResult);
break;
case INT:
result.set((int)invocationResult);
break;
case LONG:
result.set((long)invocationResult);
break;
case FLOAT:
result.set((double)invocationResult);
break;
case DOUBLE:
result.set((double)invocationResult);
break;
case STRING:
value=(String)invocationResult;
if (value != null) {
result.set(value);
}
break;
case NON_PRIMITIVE:
result.set(invocationResult.toString());
break;
}
return result;
}
}
);
}
