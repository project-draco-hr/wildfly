{
  super.processModelNode(context,containerName,cache,builder,cacheConfigurationDependencies,cacheDependencies,dependencies);
  if (cache.hasDefined(ModelKeys.STATE_TRANSFER) && cache.get(ModelKeys.STATE_TRANSFER,ModelKeys.STATE_TRANSFER_NAME).isDefined()) {
    ModelNode stateTransfer=cache.get(ModelKeys.STATE_TRANSFER,ModelKeys.STATE_TRANSFER_NAME);
    final boolean enabled=StateTransferResourceDefinition.ENABLED.resolveModelAttribute(context,stateTransfer).asBoolean();
    final long timeout=StateTransferResourceDefinition.TIMEOUT.resolveModelAttribute(context,stateTransfer).asLong();
    final int chunkSize=StateTransferResourceDefinition.CHUNK_SIZE.resolveModelAttribute(context,stateTransfer).asInt();
    builder.clustering().stateTransfer().fetchInMemoryState(enabled);
    builder.clustering().stateTransfer().timeout(timeout);
    builder.clustering().stateTransfer().chunkSize(chunkSize);
  }
  if (cache.hasDefined(ModelKeys.BACKUP)) {
    SitesConfigurationBuilder sitesBuilder=builder.sites();
    for (    Property property : cache.get(ModelKeys.BACKUP).asPropertyList()) {
      String siteName=property.getName();
      ModelNode site=property.getValue();
      sitesBuilder.addBackup().site(siteName).backupFailurePolicy(BackupFailurePolicy.valueOf(BackupSiteResourceDefinition.FAILURE_POLICY.resolveModelAttribute(context,site).asString())).strategy(BackupStrategy.valueOf(BackupSiteResourceDefinition.STRATEGY.resolveModelAttribute(context,site).asString())).replicationTimeout(BackupSiteResourceDefinition.REPLICATION_TIMEOUT.resolveModelAttribute(context,site).asLong());
      if (BackupSiteResourceDefinition.ENABLED.resolveModelAttribute(context,site).asBoolean()) {
        sitesBuilder.addInUseBackupSite(siteName);
      }
    }
  }
  if (cache.hasDefined(ModelKeys.BACKUP_FOR) && cache.get(ModelKeys.BACKUP_FOR,ModelKeys.BACKUP_FOR_NAME).isDefined()) {
    ModelNode backupFor=cache.get(ModelKeys.BACKUP_FOR,ModelKeys.BACKUP_FOR_NAME);
    ModelNode resolvedValue=null;
    final String remoteCache=((resolvedValue=BackupForResourceDefinition.REMOTE_CACHE.resolveModelAttribute(context,backupFor)).isDefined()) ? resolvedValue.asString() : null;
    final String remoteSite=((resolvedValue=BackupForResourceDefinition.REMOTE_SITE.resolveModelAttribute(context,backupFor)).isDefined()) ? resolvedValue.asString() : null;
    SitesConfigurationBuilder sitesBuilder=builder.sites();
    sitesBuilder.backupFor().remoteCache(remoteCache).remoteSite(remoteSite);
  }
}
