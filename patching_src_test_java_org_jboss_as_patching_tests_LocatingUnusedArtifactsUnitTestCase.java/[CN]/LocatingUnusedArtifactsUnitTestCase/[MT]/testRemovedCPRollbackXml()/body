{
  installOneOffCpOneOff();
  final Context ctx=getContext(false);
  removeRollbackXml(ctx,CP_1_ID);
  PatchingHistory.State history=PatchingHistory.getInstance().getState(ctx);
  PatchArtifact.State patch=history.getLastAppliedPatch();
  assertPatch(ctx,patch,ONE_OFF_2_ID,PatchType.ONE_OFF);
  assertTrue(patch.hasPrevious(ctx));
  patch=patch.getPrevious(ctx);
  assertNotNull(patch);
  assertEquals(CP_1_ID,patch.getPatchId());
  assertEquals(PatchType.CUMULATIVE,patch.getType());
  assertHistoryExists(getExpectedHistoryDir(ctx,CP_1_ID),patch,true,true,false);
  assertNoPrevious(ctx,patch);
  final PatchingGarbageLocator garbageLocator=new PatchingGarbageLocator(ctx.getInstallationManager());
  history.handlePatches(ctx,garbageLocator);
  final List<File> inactiveHistory=garbageLocator.getInactiveHistory();
  assertEquals(1,inactiveHistory.size());
  assertEquals(getExpectedHistoryDir(ctx,ONE_OFF_1_ID),inactiveHistory.get(0).getAbsolutePath());
  final List<File> inactiveOverlays=garbageLocator.getInactiveOverlays();
  assertEquals(1,inactiveOverlays.size());
  assertEquals(getExpectedOverlayDir(ctx,"base",ONE_OFF_1_ID),inactiveOverlays.get(0).getAbsolutePath());
}
