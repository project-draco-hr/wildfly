{
  installOneOffCpOneOff();
  final Context ctx=getContext(false);
  removeRollbackXml(ctx,ONE_OFF_2_ID);
  PatchingHistory.State history=PatchingHistory.getInstance().getState(ctx);
  PatchArtifact.State patch=history.getLastAppliedPatch();
  assertNotNull(patch);
  assertEquals(ONE_OFF_2_ID,patch.getPatchId());
  assertEquals(PatchType.ONE_OFF,patch.getType());
  assertHistoryExists(getExpectedHistoryDir(ctx,ONE_OFF_2_ID),patch,true,true,false);
  assertNoPrevious(ctx,patch);
  PatchingGarbageLocator garbageLocator=new PatchingGarbageLocator(ctx.getInstallationManager());
  history.handlePatches(ctx,garbageLocator);
  final List<File> inactiveHistory=garbageLocator.getInactiveHistory();
  List<String> inactivePaths=Arrays.asList(new String[]{getExpectedHistoryDir(ctx,CP_1_ID),getExpectedHistoryDir(ctx,ONE_OFF_1_ID)});
  assertEqualPaths(inactivePaths,inactiveHistory);
  final List<File> inactiveOverlays=garbageLocator.getInactiveOverlays();
  inactivePaths=Arrays.asList(new String[]{getExpectedOverlayDir(ctx,"base",CP_1_ID),getExpectedOverlayDir(ctx,"base",ONE_OFF_1_ID)});
  assertEqualPaths(inactivePaths,inactiveOverlays);
  garbageLocator.deleteInactiveContent();
  garbageLocator=PatchingGarbageLocator.getIninitialized(ctx.getInstallationManager());
  assertTrue(garbageLocator.getInactiveHistory().isEmpty());
  assertTrue(garbageLocator.getInactiveOverlays().isEmpty());
  history=PatchingHistory.getInstance().getState(ctx);
  patch=history.getLastAppliedPatch();
  assertNotNull(patch);
  assertEquals(ONE_OFF_2_ID,patch.getPatchId());
  assertEquals(PatchType.ONE_OFF,patch.getType());
  assertHistoryExists(getExpectedHistoryDir(ctx,ONE_OFF_2_ID),patch,true,true,false);
  assertNoPrevious(ctx,patch);
  assertTrue(new File(getExpectedOverlayDir(ctx,"base",ONE_OFF_2_ID)).exists());
}
