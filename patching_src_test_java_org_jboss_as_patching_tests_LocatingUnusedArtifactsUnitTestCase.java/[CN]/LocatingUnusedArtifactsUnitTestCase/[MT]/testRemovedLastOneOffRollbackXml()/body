{
  installOneOffCpOneOff();
  removeRollbackXml(ONE_OFF_2_ID);
  PatchingGarbageLocator garbageLocator=PatchingGarbageLocator.getIninitialized(updateInstallationManager());
  final List<File> inactiveHistory=garbageLocator.getInactiveHistory();
  List<String> inactivePaths=Arrays.asList(new String[]{getExpectedHistoryDir(ONE_OFF_1_ID)});
  assertEqualPaths(inactivePaths,inactiveHistory);
  final List<File> inactiveOverlays=garbageLocator.getInactiveOverlays();
  inactivePaths=Arrays.asList(new String[]{getExpectedOverlayDir("base",ONE_OFF_1_ID)});
  assertEqualPaths(inactivePaths,inactiveOverlays);
  garbageLocator.deleteInactiveContent();
  garbageLocator.reset();
  assertTrue(garbageLocator.getInactiveHistory().isEmpty());
  assertTrue(garbageLocator.getInactiveOverlays().isEmpty());
  assertTrue(new File(getExpectedOverlayDir("base",ONE_OFF_2_ID)).exists());
}
