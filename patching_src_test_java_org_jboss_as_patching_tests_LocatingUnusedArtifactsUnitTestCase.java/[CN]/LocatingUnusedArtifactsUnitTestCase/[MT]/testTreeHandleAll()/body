{
  installOneOffCpOneOff();
  final Context ctx=getContext();
  final List<String> historyDirs=new ArrayList<String>();
  final List<String> moduleDirs=new ArrayList<String>();
  final List<String> bundleDirs=new ArrayList<String>();
  PatchingHistoryTree activeDirsHandler=Builder.getInstance().addHandler(PatchHistoryDir.getInstance(),new ArtifactStateHandler<PatchHistoryDir.State>(){
    @Override public void handle(    Context ctx,    PatchHistoryDir.State state){
      historyDirs.add(state.getDirectory().getName());
    }
  }
).addHandler(PatchElementProviderArtifact.getInstance(),new ArtifactStateHandler<PatchElementProviderArtifact.State>(){
    @Override public void handle(    Context ctx,    PatchElementProviderArtifact.State state){
      if (state.getBundlesDir() != null) {
        bundleDirs.add(state.getBundlesDir().getName());
      }
      if (state.getModulesDir() != null) {
        moduleDirs.add(state.getModulesDir().getName());
      }
    }
  }
).build();
  activeDirsHandler.handleAll(ctx);
  assertEquals(Arrays.asList(new String[]{"oneOff2","cp1","oneOff1"}),historyDirs);
  assertEquals(Arrays.asList(new String[]{"base-oneOff2","base-cp1","base-oneOff1"}),moduleDirs);
  assertTrue(bundleDirs.isEmpty());
}
