{
  final ModelNode address=operation.require(OP_ADDR);
  final String name=address.get(address.asInt() - 1).asString();
  final String path=operation.require(CommonAttributes.PATH).asString();
  final boolean enabled=operation.get(CommonAttributes.SCAN_ENABLED).asBoolean(true);
  final int interval=operation.get(CommonAttributes.SCAN_INTERVAL).asInt(5000);
  final String relativeTo=operation.get(CommonAttributes.RELATIVE_TO).asString();
  final ModelNode compensatingOperation=new ModelNode();
  compensatingOperation.get(OP).set(REMOVE);
  compensatingOperation.get(OP_ADDR).set(address);
  if (context instanceof NewRuntimeOperationContext) {
    final NewRuntimeOperationContext runtimeContext=(NewRuntimeOperationContext)context;
    final ServiceTarget serviceTarget=runtimeContext.getServiceTarget();
    DeploymentScannerService.addService(serviceTarget,name,relativeTo,path,interval,TimeUnit.MILLISECONDS,enabled);
  }
  final ModelNode subModel=new ModelNode();
  subModel.get(CommonAttributes.PATH).set(path);
  subModel.get(CommonAttributes.SCAN_ENABLED).set(enabled);
  subModel.get(CommonAttributes.SCAN_INTERVAL).set(interval);
  if (relativeTo != null)   subModel.get(CommonAttributes.RELATIVE_TO).set(relativeTo);
  resultHandler.handleResultComplete(compensatingOperation);
  return Cancellable.NULL;
}
