{
  super(method.getName());
  this.method=method;
  Class retCls=method.getReturnType();
  if (retCls.isInterface() && Remote.class.isAssignableFrom(retCls))   Util.isValidRMIIIOP(retCls);
  Class[] ex=method.getExceptionTypes();
  boolean gotRemoteException=false;
  ArrayList a=new ArrayList();
  for (int i=0; i < ex.length; ++i) {
    if (ex[i].isAssignableFrom(java.rmi.RemoteException.class))     gotRemoteException=true;
    if (Exception.class.isAssignableFrom(ex[i]) && !RuntimeException.class.isAssignableFrom(ex[i]) && !RemoteException.class.isAssignableFrom(ex[i]))     a.add(ExceptionAnalysis.getExceptionAnalysis(ex[i]));
  }
  if (!gotRemoteException && Remote.class.isAssignableFrom(method.getDeclaringClass()))   throw IIOPMessages.MESSAGES.badRMIIIOPMethodSignature(getJavaName(),method.getDeclaringClass().getName(),"1.2.3");
  final ExceptionAnalysis[] exceptions=new ExceptionAnalysis[a.size()];
  mappedExceptions=(ExceptionAnalysis[])a.toArray(exceptions);
  Class[] params=method.getParameterTypes();
  parameters=new ParameterAnalysis[params.length];
  for (int i=0; i < params.length; ++i) {
    parameters[i]=new ParameterAnalysis("param" + (i + 1),params[i]);
  }
}
