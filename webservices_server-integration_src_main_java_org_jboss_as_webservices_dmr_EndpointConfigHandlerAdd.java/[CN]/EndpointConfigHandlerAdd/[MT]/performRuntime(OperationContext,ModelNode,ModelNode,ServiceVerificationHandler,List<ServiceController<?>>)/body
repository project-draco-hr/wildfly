{
  final ServiceController<?> configService=context.getServiceRegistry(true).getService(WSServices.CONFIG_SERVICE);
  if (configService != null) {
    final PathAddress address=PathAddress.pathAddress(operation.require(OP_ADDR));
    final String configName=address.getElement(address.size() - 3).getValue();
    final String handlerChainType=address.getElement(address.size() - 2).getKey();
    final String handlerChainId=address.getElement(address.size() - 2).getValue();
    final String handlerName=address.getElement(address.size() - 1).getValue();
    final String handlerClass=operation.require(HANDLER_CLASS).asString();
    final ServerConfig config=(ServerConfig)configService.getValue();
    for (    final EndpointConfig endpointConfig : config.getEndpointConfigs()) {
      if (configName.equals(endpointConfig.getConfigName())) {
        final List<UnifiedHandlerChainMetaData> handlerChains;
        if (PRE_HANDLER_CHAIN.equals(handlerChainType)) {
          handlerChains=endpointConfig.getPreHandlerChains();
        }
 else         if (POST_HANDLER_CHAIN.equals(handlerChainType)) {
          handlerChains=endpointConfig.getPostHandlerChains();
        }
 else {
          throw MESSAGES.wrongHandlerChainType(handlerChainType,PRE_HANDLER_CHAIN,POST_HANDLER_CHAIN);
        }
        final UnifiedHandlerChainMetaData handlerChain=getChain(handlerChains,handlerChainId);
        if (handlerChain == null) {
          throw MESSAGES.multipleHandlerChainsWithSameId(handlerChainType,handlerChainId,configName);
        }
        final UnifiedHandlerMetaData handler=new UnifiedHandlerMetaData();
        handler.setHandlerName(handlerName);
        handler.setHandlerClass(handlerClass);
        handlerChain.addHandler(handler);
        if (!context.isBooting()) {
          context.restartRequired();
        }
        return;
      }
    }
    throw MESSAGES.missingEndpointConfig(configName);
  }
}
