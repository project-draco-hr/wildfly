{
  SubsystemState stateService=new SubsystemState();
  List<OperationStepHandler> addedSteps=new ArrayList<OperationStepHandler>();
  OperationContext context=mockOperationContext(stateService,addedSteps,OperationContext.ResultAction.KEEP);
  String pid="org.acme.pid1";
  Map<String,String> data=Collections.singletonMap("mykey","myval");
  ModelNode op=getAddOperation(pid,data);
  Assert.assertEquals("Precondition",0,addedSteps.size());
  execute(OSGiConfigurationAdd.INSTANCE,context,op);
  Assert.assertEquals(1,addedSteps.size());
  Assert.assertEquals("Precondition",0,stateService.getConfigurations().size());
  execute(addedSteps.get(0),context,op);
  Assert.assertEquals(1,stateService.getConfigurations().size());
  Dictionary<String,String> config=stateService.getConfiguration(pid);
  Assert.assertEquals(1,config.size());
  Assert.assertEquals("myval",config.get("mykey"));
  execute(OSGiConfigurationRemove.INSTANCE,context,op);
  Assert.assertEquals("Actual remove added as async step",2,addedSteps.size());
  configureForRollback(context,op);
  execute(addedSteps.get(1),context,op);
  Assert.assertEquals("Configuration rolled back",1,stateService.getConfiguration(pid).size());
  Assert.assertEquals("Configuration rolled back","myval",stateService.getConfiguration(pid).get("mykey"));
  configureForSuccess(context);
  execute(addedSteps.get(1),context,op);
  Assert.assertNull("Configuration should have been removed",stateService.getConfiguration(pid));
}
