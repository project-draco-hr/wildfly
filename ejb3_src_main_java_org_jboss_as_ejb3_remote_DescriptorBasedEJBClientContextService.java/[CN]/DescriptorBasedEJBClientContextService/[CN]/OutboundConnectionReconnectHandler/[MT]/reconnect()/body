{
  this.reconnectAttemptCount++;
  final ServiceController<?> serviceController=this.serviceRegistry.getService(this.outboundConnectionServiceName);
  if (serviceController == null) {
    EjbLogger.REMOTE_LOGGER.debugf("Unregistering %s since %s is no longer available",this,this.outboundConnectionServiceName);
    this.clientContext.unregisterReconnectHandler(this);
    return;
  }
  final AbstractOutboundConnectionService<?> outboundConnectionService=(AbstractOutboundConnectionService<?>)serviceController.getValue();
  try {
    final IoFuture<Connection> futureConnection=outboundConnectionService.connect();
    final Connection connection=IoFutureHelper.get(futureConnection,connectionTimeout,TimeUnit.MILLISECONDS);
    EjbLogger.REMOTE_LOGGER.debugf("Successful reconnect attempt#%s to outbound connection %s",this.reconnectAttemptCount,this.outboundConnectionServiceName);
    this.clientContext.unregisterReconnectHandler(this);
    final EJBReceiver receiver=new RemotingConnectionEJBReceiver(connection,this,channelCreationOpts,outboundConnectionService.getProtocol());
    this.clientContext.registerEJBReceiver(receiver);
  }
 catch (  Exception e) {
    EjbLogger.REMOTE_LOGGER.debugf(e,"Reconnect attempt#%s failed for outbound connection %s",this.reconnectAttemptCount,this.outboundConnectionServiceName);
  }
}
