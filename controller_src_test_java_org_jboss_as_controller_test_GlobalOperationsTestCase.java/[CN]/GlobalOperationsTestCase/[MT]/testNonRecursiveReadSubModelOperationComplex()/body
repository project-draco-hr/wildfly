{
  ModelNode operation=createOperation(READ_SUB_MODEL_OPERATION,"profile","profileB","subsystem","test2");
  operation.get(REQUEST_PROPERTIES,RECURSIVE).set(false);
  ModelNode result=CONTROLLER.execute(operation);
  assertNotNull(result);
  assertEquals(14,result.keys().size());
  assertEquals(new BigDecimal(100),result.require("bigdecimal").asBigDecimal());
  assertEquals(new BigInteger("101"),result.require("biginteger").asBigInteger());
  assertTrue(result.require("boolean").asBoolean());
  assertEquals(3,result.require("bytes").asBytes().length);
  assertEquals(1,result.require("bytes").asBytes()[0]);
  assertEquals(2,result.require("bytes").asBytes()[1]);
  assertEquals(3,result.require("bytes").asBytes()[2]);
  assertEquals(Double.MAX_VALUE,result.require("double").asDouble());
  assertEquals("{expr}",result.require("expression").asString());
  assertEquals(102,result.require("int").asInt());
  assertEquals(Long.MAX_VALUE,result.require("long").asLong());
  assertEquals("s1",result.require("string1").asString());
  assertEquals("s2",result.require("string2").asString());
  assertEquals(ModelType.TYPE,result.require("type").asType());
  assertFalse(result.require("list").isDefined());
  assertFalse(result.require("object").isDefined());
  assertFalse(result.require("property").isDefined());
}
