{
  ModelNode operation=createOperation(READ_ATTRIBUTE_OPERATION,"profile","profileA","subsystem","subsystem2");
  operation.get(NAME).set("int");
  ModelNode result=CONTROLLER.execute(operation);
  assertNotNull(result);
  assertEquals(ModelType.INT,result.getType());
  assertEquals(102,result.asInt());
  operation.get(NAME).set("string1");
  result=CONTROLLER.execute(operation);
  assertNotNull(result);
  assertEquals(ModelType.STRING,result.getType());
  assertEquals("s1",result.asString());
  operation.get(NAME).set("list");
  result=CONTROLLER.execute(operation);
  assertNotNull(result);
  assertEquals(ModelType.LIST,result.getType());
  List<ModelNode> list=result.asList();
  assertEquals(2,list.size());
  assertEquals("l1A",list.get(0).asString());
  assertEquals("l1B",list.get(1).asString());
  operation.get(NAME).set("non-existant-attribute");
  try {
    result=CONTROLLER.execute(operation);
    fail("Expected error for non-existant attribute");
  }
 catch (  OperationFailedException expected) {
  }
  operation.get(NAME).set("string2");
  try {
    result=CONTROLLER.execute(operation);
    fail("Expected error for attribute with no read handler");
  }
 catch (  OperationFailedException expected) {
  }
  operation=createOperation(READ_ATTRIBUTE_OPERATION,"profile","profileC","subsystem","subsystem4");
  operation.get(NAME).set("name");
  result=CONTROLLER.execute(operation);
  assertNotNull(result);
  assertFalse(result.isDefined());
  operation=createOperation(READ_ATTRIBUTE_OPERATION,"profile","profileC","subsystem","subsystem5");
  operation.get(NAME).set("value");
  result=CONTROLLER.execute(operation);
  assertNotNull(result);
  assertFalse(result.isDefined());
  operation.get(NAME).set("name");
  result=CONTROLLER.execute(operation);
  assertNotNull(result);
  assertEquals("Overridden by special read handler",result.asString());
}
