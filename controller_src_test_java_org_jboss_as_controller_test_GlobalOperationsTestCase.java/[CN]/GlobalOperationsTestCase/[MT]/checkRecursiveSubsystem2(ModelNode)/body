{
  assertEquals(14,result.keys().size());
  assertEquals(new BigDecimal(100),result.require("bigdecimal").asBigDecimal());
  assertEquals(new BigInteger("101"),result.require("biginteger").asBigInteger());
  assertTrue(result.require("boolean").asBoolean());
  assertEquals(3,result.require("bytes").asBytes().length);
  assertEquals(1,result.require("bytes").asBytes()[0]);
  assertEquals(2,result.require("bytes").asBytes()[1]);
  assertEquals(3,result.require("bytes").asBytes()[2]);
  assertEquals(Double.MAX_VALUE,result.require("double").asDouble(),0.0d);
  assertEquals("{expr}",result.require("expression").asString());
  assertEquals(102,result.require("int").asInt());
  List<ModelNode> list=result.require("list").asList();
  assertEquals(2,list.size());
  assertEquals("l1A",list.get(0).asString());
  assertEquals("l1B",list.get(1).asString());
  assertEquals(Long.MAX_VALUE,result.require("long").asLong());
  assertEquals("objVal",result.require("object").require("value").asString());
  Property prop=result.require("property").asProperty();
  assertEquals("prop1",prop.getName());
  assertEquals("value1",prop.getValue().asString());
  assertEquals("s1",result.require("string1").asString());
  assertEquals("s2",result.require("string2").asString());
  assertEquals(ModelType.TYPE,result.require("type").asType());
}
