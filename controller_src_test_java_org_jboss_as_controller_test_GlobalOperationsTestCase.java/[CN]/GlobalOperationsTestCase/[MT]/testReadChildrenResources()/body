{
  ModelNode operation=createOperation(READ_CHILDREN_RESOURCES_OPERATION,"profile","profileA");
  operation.get(CHILD_TYPE).set("subsystem");
  operation.get(INCLUDE_RUNTIME).set(true);
  ModelNode result=executeForResult(operation);
  assertNotNull(result);
  assertEquals(ModelType.OBJECT,result.getType());
  assertEquals(2,result.asList().size());
  ModelNode subsystem1=null;
  ModelNode subsystem2=null;
  for (  Property property : result.asPropertyList()) {
    if ("subsystem1".equals(property.getName())) {
      subsystem1=property.getValue();
    }
 else     if ("subsystem2".equals(property.getName())) {
      subsystem2=property.getValue();
    }
  }
  assertNotNull(subsystem1);
  checkNonRecursiveSubsystem1(subsystem1,true);
  assertNotNull(subsystem2);
  checkRecursiveSubsystem2(subsystem2);
  operation=createOperation(READ_CHILDREN_RESOURCES_OPERATION,"profile","profileA","subsystem","subsystem1");
  operation.get(CHILD_TYPE).set("type2");
  result=executeForResult(operation);
  assertNotNull(result);
  assertEquals(ModelType.OBJECT,result.getType());
  assertEquals(1,result.asList().size());
  ModelNode other=null;
  for (  Property property : result.asPropertyList()) {
    if ("other".equals(property.getName())) {
      other=property.getValue();
    }
  }
  assertNotNull(other);
  assertEquals("Name2",other.require(NAME).asString());
  operation.get(CHILD_TYPE).set("non-existant-child");
  try {
    result=executeForResult(operation);
    fail("Expected error for non-existant child");
  }
 catch (  OperationFailedException expected) {
  }
  operation=createOperation(READ_CHILDREN_RESOURCES_OPERATION,"profile","profileC","subsystem","subsystem4");
  operation.get(CHILD_TYPE).set("type1");
  try {
    result=executeForResult(operation);
    fail("Expected error for type1 child under subsystem4");
  }
 catch (  OperationFailedException expected) {
  }
  operation=createOperation(READ_CHILDREN_RESOURCES_OPERATION,"profile","profileC","subsystem","subsystem5");
  operation.get(CHILD_TYPE).set("type1");
  result=executeForResult(operation);
  assertNotNull(result);
  assertEquals(ModelType.OBJECT,result.getType());
  assertTrue(result.asList().isEmpty());
}
