{
  ModelNode operation=createOperation(READ_CHILDREN_NAMES_OPERATION,"profile","profileA");
  operation.get(CHILD_TYPE).set("subsystem");
  ModelNode result=CONTROLLER.execute(operation);
  assertNotNull(result);
  assertEquals(ModelType.LIST,result.getType());
  assertEquals(2,result.asList().size());
  assertTrue(modelNodeListToStringList(result.asList()).contains("subsystem1"));
  assertTrue(modelNodeListToStringList(result.asList()).contains("subsystem2"));
  operation=createOperation(READ_CHILDREN_NAMES_OPERATION,"profile","profileA","subsystem","subsystem1");
  operation.get(CHILD_TYPE).set("type2");
  result=CONTROLLER.execute(operation);
  assertNotNull(result);
  assertEquals(ModelType.LIST,result.getType());
  assertEquals(1,result.asList().size());
  assertTrue(modelNodeListToStringList(result.asList()).contains("other"));
  operation.get(CHILD_TYPE).set("non-existant-child");
  try {
    result=CONTROLLER.execute(operation);
    fail("Expected error for non-existant child");
  }
 catch (  OperationFailedException expected) {
  }
  operation=createOperation(READ_CHILDREN_NAMES_OPERATION,"profile","profileC","subsystem","subsystem4");
  operation.get(CHILD_TYPE).set("type1");
  result=CONTROLLER.execute(operation);
  assertNotNull(result);
  assertEquals(ModelType.LIST,result.getType());
  assertTrue(result.asList().isEmpty());
  operation=createOperation(READ_CHILDREN_NAMES_OPERATION,"profile","profileC","subsystem","subsystem5");
  operation.get(CHILD_TYPE).set("type1");
  result=CONTROLLER.execute(operation);
  assertNotNull(result);
  assertEquals(ModelType.LIST,result.getType());
  assertTrue(result.asList().isEmpty());
}
