{
  ModelNode operation=createOperation(READ_CHILDREN_TYPES_OPERATION,"profile","profileA");
  ModelNode result=executeForResult(operation);
  assertNotNull(result);
  assertEquals(ModelType.LIST,result.getType());
  assertEquals(1,result.asList().size());
  assertEquals("subsystem",result.asList().get(0).asString());
  operation=createOperation(READ_CHILDREN_TYPES_OPERATION,"profile","profileA","subsystem","subsystem1");
  result=executeForResult(operation);
  assertNotNull(result);
  assertEquals(ModelType.LIST,result.getType());
  assertEquals(2,result.asList().size());
  List<String> stringList=modelNodeListToStringList(result.asList());
  assertTrue(Arrays.asList("type1","type2").containsAll(stringList));
  operation=createOperation(READ_CHILDREN_TYPES_OPERATION,"profile","profileA","subsystem","non-existent");
  try {
    result=executeForResult(operation);
    fail("Expected error for non-existent child");
  }
 catch (  OperationFailedException expected) {
  }
  operation=createOperation(READ_CHILDREN_TYPES_OPERATION,"profile","profileC","subsystem","subsystem4");
  result=executeForResult(operation);
  assertNotNull(result);
  assertEquals(ModelType.LIST,result.getType());
  assertTrue(result.asList().isEmpty());
  operation=createOperation(READ_CHILDREN_TYPES_OPERATION,"profile","profileC","subsystem","subsystem5");
  result=executeForResult(operation);
  assertNotNull(result);
  assertEquals(ModelType.LIST,result.getType());
  assertEquals(1,result.asList().size());
  assertEquals("type1",result.asList().get(0).asString());
}
