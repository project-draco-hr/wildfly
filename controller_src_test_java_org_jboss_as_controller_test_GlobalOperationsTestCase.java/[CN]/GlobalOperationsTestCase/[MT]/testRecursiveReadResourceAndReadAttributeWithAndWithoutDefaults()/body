{
  ModelNode operation=createOperation(READ_RESOURCE_OPERATION);
  operation.get(RECURSIVE).set(true);
  ModelNode result=executeForResult(operation);
  assertTrue(result.get("profile","profileA","subsystem","subsystem1","type2","other","default").isDefined());
  Assert.assertEquals("Default string",result.get("profile","profileA","subsystem","subsystem1","type2","other","default").asString());
  Assert.assertEquals("Name2",result.get("profile","profileA","subsystem","subsystem1","type2","other","name").asString());
  operation=createOperation(READ_RESOURCE_OPERATION);
  operation.get(RECURSIVE).set(true);
  operation.get(INCLUDE_DEFAULTS).set(true);
  result=executeForResult(operation);
  assertTrue(result.get("profile","profileA","subsystem","subsystem1","type2","other","default").isDefined());
  Assert.assertEquals("Default string",result.get("profile","profileA","subsystem","subsystem1","type2","other","default").asString());
  Assert.assertEquals("Name2",result.get("profile","profileA","subsystem","subsystem1","type2","other","name").asString());
  operation=createOperation(READ_RESOURCE_OPERATION);
  operation.get(RECURSIVE).set(true);
  operation.get(INCLUDE_DEFAULTS).set(false);
  result=executeForResult(operation);
  assertFalse(result.get("profile","profileA","subsystem","subsystem1","type2","other","default").isDefined());
  Assert.assertEquals("Name2",result.get("profile","profileA","subsystem","subsystem1","type2","other","name").asString());
  operation=createOperation(READ_RESOURCE_OPERATION);
  operation.get(RECURSIVE).set(true);
  operation.get(OP_ADDR).add("profile","profileA").add("subsystem","subsystem1").add("type2","other");
  result=executeForResult(operation);
  Assert.assertEquals("Name2",result.get("name").asString());
  Assert.assertEquals("Default string",result.get("default").asString());
  operation=createOperation(READ_RESOURCE_OPERATION);
  operation.get(RECURSIVE).set(true);
  operation.get(INCLUDE_DEFAULTS).set(true);
  operation.get(OP_ADDR).add("profile","profileA").add("subsystem","subsystem1").add("type2","other");
  result=executeForResult(operation);
  Assert.assertEquals("Name2",result.get("name").asString());
  Assert.assertEquals("Default string",result.get("default").asString());
  operation=createOperation(READ_RESOURCE_OPERATION);
  operation.get(RECURSIVE).set(true);
  operation.get(INCLUDE_DEFAULTS).set(false);
  operation.get(OP_ADDR).add("profile","profileA").add("subsystem","subsystem1").add("type2","other");
  result=executeForResult(operation);
  Assert.assertEquals("Name2",result.get("name").asString());
  Assert.assertFalse(result.get("default").isDefined());
  operation=createOperation(READ_ATTRIBUTE_OPERATION);
  operation.get(OP_ADDR).add("profile","profileA").add("subsystem","subsystem1").add("type2","other");
  operation.get(NAME).set("default");
  result=executeForResult(operation);
  Assert.assertEquals("Default string",result.asString());
  operation=createOperation(READ_ATTRIBUTE_OPERATION);
  operation.get(OP_ADDR).add("profile","profileA").add("subsystem","subsystem1").add("type2","other");
  operation.get(NAME).set("default");
  operation.get(INCLUDE_DEFAULTS).set(true);
  result=executeForResult(operation);
  Assert.assertEquals("Default string",result.asString());
  operation=createOperation(READ_ATTRIBUTE_OPERATION);
  operation.get(OP_ADDR).add("profile","profileA").add("subsystem","subsystem1").add("type2","other");
  operation.get(NAME).set("default");
  operation.get(INCLUDE_DEFAULTS).set(false);
  result=executeForResult(operation);
  Assert.assertFalse(result.isDefined());
}
