{
  final DomainClient masterClient=support.getDomainMasterLifecycleUtil().createDomainClient();
  final DomainClient slaveClient=support.getDomainSlaveLifecycleUtil().createDomainClient();
  try {
    final PathAddress fullHaAddress=PathAddress.pathAddress(PROFILE,"new-profile");
    DomainTestUtils.executeForResult(Util.createAddOperation(fullHaAddress),masterClient);
    final ModelNode clone=Util.createEmptyOperation(CLONE,fullHaAddress);
    clone.get(TO_PROFILE).set("cloned");
    DomainTestUtils.executeForFailure(clone,masterClient);
    final PathAddress ignoredResourceAddress=PathAddress.pathAddress(HOST,"slave").append(CORE_SERVICE,IGNORED_RESOURCES).append(IGNORED_RESOURCE_TYPE,PROFILE);
    final ModelNode ignoreNewProfile=Util.createAddOperation(ignoredResourceAddress);
    ignoreNewProfile.get(NAMES).add("new-profile");
    DomainTestUtils.executeForResult(ignoreNewProfile,slaveClient);
    reloadHost(support.getDomainSlaveLifecycleUtil(),"slave");
    DomainTestUtils.executeForResult(clone,masterClient);
    DomainTestUtils.executeForFailure(Util.createAddOperation(PathAddress.pathAddress(PROFILE,"cloned").append(SUBSYSTEM,"jmx")),masterClient);
    reloadHost(support.getDomainSlaveLifecycleUtil(),"slave");
    DomainTestUtils.executeForResult(Util.createAddOperation(PathAddress.pathAddress(PROFILE,"cloned").append(SUBSYSTEM,"jmx")),masterClient);
  }
  finally {
    IoUtils.safeClose(slaveClient);
    IoUtils.safeClose(masterClient);
  }
}
