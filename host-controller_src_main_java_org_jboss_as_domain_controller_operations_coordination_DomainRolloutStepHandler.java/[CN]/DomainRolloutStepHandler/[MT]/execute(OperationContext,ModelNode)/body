{
  if (context.hasFailureDescription()) {
    context.setRollbackOnly();
    context.completeStep();
    return;
  }
  boolean pushToServers=!domainOperationContext.hasHostLevelFailures();
  if (pushToServers) {
    ModelNode ourResult=domainOperationContext.getCoordinatorResult();
    if (ourResult.has(FAILURE_DESCRIPTION)) {
      if (trace) {
        HOST_CONTROLLER_LOGGER.tracef("coordinator failed: %s",ourResult);
      }
      pushToServers=false;
      domainOperationContext.setCompleteRollback(true);
    }
 else {
      if (trace) {
        HOST_CONTROLLER_LOGGER.tracef("coordinator succeeded: %s",ourResult);
      }
      for (      ModelNode hostResult : domainOperationContext.getHostControllerResults().values()) {
        if (hostResult.has(FAILURE_DESCRIPTION)) {
          if (trace) {
            HOST_CONTROLLER_LOGGER.tracef("host failed: %s",hostResult);
          }
          pushToServers=false;
          domainOperationContext.setCompleteRollback(true);
          break;
        }
      }
    }
  }
  if (pushToServers) {
    domainOperationContext.setCompleteRollback(false);
    final Map<ServerIdentity,ProxyTask> tasks=new HashMap<ServerIdentity,ProxyTask>();
    final Map<ServerIdentity,Future<ModelNode>> futures=new HashMap<ServerIdentity,Future<ModelNode>>();
    try {
      pushToServers(context,tasks,futures);
      context.completeStep();
    }
  finally {
      boolean completeRollback=domainOperationContext.isCompleteRollback();
      for (      Map.Entry<ServerIdentity,ProxyTask> entry : tasks.entrySet()) {
        boolean rollback=completeRollback || domainOperationContext.isServerGroupRollback(entry.getKey().getServerGroupName());
        final ProxyTask task=entry.getValue();
        if (!task.finalizeTransaction(!rollback)) {
          try {
            final ServerIdentity identity=entry.getKey();
            final ModelNode result=task.getUncommittedResult();
            final ProxyController proxy=task.getProxyController();
            final Future<ModelNode> future=executorService.submit(new ServerRequireRestartTask(identity,proxy,result));
            futures.put(entry.getKey(),future);
          }
 catch (          Exception ignore) {
          }
        }
      }
      boolean interrupted=false;
      try {
        for (        Map.Entry<ServerIdentity,Future<ModelNode>> entry : futures.entrySet()) {
          Future<ModelNode> future=entry.getValue();
          try {
            ModelNode finalResult=future.isCancelled() ? getCancelledResult() : future.get();
            domainOperationContext.addServerResult(entry.getKey(),finalResult);
          }
 catch (          InterruptedException e) {
            interrupted=true;
            HOST_CONTROLLER_LOGGER.interruptedAwaitingFinalResponse(entry.getKey().getServerName(),entry.getKey().getHostName());
          }
catch (          ExecutionException e) {
            HOST_CONTROLLER_LOGGER.caughtExceptionAwaitingFinalResponse(e.getCause(),entry.getKey().getServerName(),entry.getKey().getHostName());
          }
        }
      }
  finally {
        if (interrupted) {
          Thread.currentThread().interrupt();
        }
      }
    }
  }
 else {
    reportHostFailures(context,operation);
    context.completeStep();
  }
}
