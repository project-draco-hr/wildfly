{
  String dynamicQL=(String)args[0];
  if (getLog().isDebugEnabled()) {
    getLog().debug("DYNAMIC-QL: " + dynamicQL);
  }
  QLCompiler compiler=null;
  try {
    compiler=JDBCQueryManager.getInstance(metadata.getQLCompilerClass(),catalog);
  }
 catch (  Throwable e) {
    throw new FinderException(e.getMessage());
  }
  Object[] parameters=(Object[])args[1];
  Class[] parameterTypes;
  if (parameters == null) {
    parameterTypes=new Class[0];
  }
 else {
    parameterTypes=new Class[parameters.length];
    for (int i=0; i < parameters.length; i++) {
      if (parameters[i] == null) {
        throw new FinderException("Parameter[" + i + "] is null");
      }
      parameterTypes[i]=parameters[i].getClass();
    }
  }
  try {
    compiler.compileJBossQL(dynamicQL,finderMethod.getReturnType(),parameterTypes,metadata);
  }
 catch (  Throwable t) {
    t.printStackTrace();
    throw new FinderException("Error compiling ejbql: " + t);
  }
  int offset=toInt(parameters,compiler.getOffsetParam(),compiler.getOffsetValue());
  int limit=toInt(parameters,compiler.getLimitParam(),compiler.getLimitValue());
  JDBCEntityBridge selectEntity=null;
  JDBCCMPFieldBridge selectField=null;
  SelectFunction selectFunction=null;
  if (compiler.isSelectEntity()) {
    selectEntity=(JDBCEntityBridge)compiler.getSelectEntity();
  }
 else   if (compiler.isSelectField()) {
    selectField=(JDBCCMPFieldBridge)compiler.getSelectField();
  }
 else {
    selectFunction=compiler.getSelectFunction();
  }
  boolean[] mask;
  List leftJoinCMRList;
  JDBCReadAheadMetaData readahead=metadata.getReadAhead();
  if (selectEntity != null && readahead.isOnFind()) {
    mask=selectEntity.getLoadGroupMask(readahead.getEagerLoadGroup());
    boolean modifiedMask=false;
    leftJoinCMRList=compiler.getLeftJoinCMRList();
    if (compiler.isSelectDistinct()) {
      JDBCFieldBridge[] tableFields=selectEntity.getTableFields();
      for (int i=0; i < tableFields.length; ++i) {
        if (mask[i] && !tableFields[i].getJDBCType().isSearchable()) {
          if (!modifiedMask) {
            boolean[] original=mask;
            mask=new boolean[original.length];
            System.arraycopy(original,0,mask,0,mask.length);
            modifiedMask=true;
          }
          mask[i]=false;
        }
      }
    }
  }
 else {
    mask=null;
    leftJoinCMRList=Collections.EMPTY_LIST;
  }
  setParameterList(compiler.getInputParameters());
  final CmpEntityBeanComponent component=((JDBCStoreManager)compiler.getStoreManager()).getComponent();
  EntityProxyFactory factoryToUse=new EntityProxyFactory(){
    public Object getEntityObject(    Object primaryKey){
      return metadata.isResultTypeMappingLocal() && component.getLocalHomeClass() != null ? component.getEjbLocalObject(primaryKey) : component.getEJBObject(primaryKey);
    }
  }
;
  return execute(compiler.getSQL(),parameters,offset,limit,selectEntity,selectField,selectFunction,(JDBCStoreManager)compiler.getStoreManager(),mask,compiler.getInputParameters(),leftJoinCMRList,metadata,factoryToUse,log);
}
