{
  ModelNode op=new ModelNode();
  op.get(OP).set(COMPOSITE);
  op.get(OP_ADDR).setEmptyList();
  ModelNode steps=op.get(STEPS);
  steps.setEmptyList();
  op.get(ROLLBACK_ON_RUNTIME_FAILURE).set(plan.isGlobalRollback());
  OperationBuilder builder=OperationBuilder.Factory.create(op);
  int stream=0;
  for (  DeploymentActionImpl action : plan.getDeploymentActionImpls()) {
    ModelNode step=new ModelNode();
    String uniqueName=action.getDeploymentUnitUniqueName();
switch (action.getType()) {
case ADD:
{
        configureDeploymentOperation(step,ADD,uniqueName);
        step.get(RUNTIME_NAME).set(action.getNewContentFileName());
        builder.addInputStream(action.getContentStream());
        step.get(INPUT_STREAM_INDEX).set(stream++);
        break;
      }
case DEPLOY:
{
      configureDeploymentOperation(step,DEPLOYMENT_DEPLOY_OPERATION,uniqueName);
      break;
    }
case FULL_REPLACE:
{
    step.get(OP).set(DEPLOYMENT_FULL_REPLACE_OPERATION);
    step.get(OP_ADDR).setEmptyList();
    step.get(NAME).set(uniqueName);
    step.get(RUNTIME_NAME).set(action.getNewContentFileName());
    builder.addInputStream(action.getContentStream());
    step.get(INPUT_STREAM_INDEX).set(stream++);
    break;
  }
case REDEPLOY:
{
  configureDeploymentOperation(step,DEPLOYMENT_REDEPLOY_OPERATION,uniqueName);
  break;
}
case REMOVE:
{
configureDeploymentOperation(step,DEPLOYMENT_REMOVE_OPERATION,uniqueName);
break;
}
case REPLACE:
{
step.get(OP).set(DEPLOYMENT_REPLACE_OPERATION);
step.get(OP_ADDR).setEmptyList();
step.get(NAME).set(uniqueName);
step.get(TO_REPLACE).set(action.getReplacedDeploymentUnitUniqueName());
break;
}
case UNDEPLOY:
{
configureDeploymentOperation(step,DEPLOYMENT_UNDEPLOY_OPERATION,uniqueName);
break;
}
default :
{
throw new IllegalStateException("Unknown action type " + action.getType());
}
}
steps.add(step);
}
return builder.build();
}
