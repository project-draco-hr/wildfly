{
  Class<?> targetClass=(Class<?>)input.readObject();
  try {
    this.object=targetClass.newInstance();
    while (targetClass != null) {
      SerializableClass clazz=registry.lookup(targetClass);
      for (      SerializableField field : clazz.getFields()) {
        Field accessibleField=field.getField();
switch (field.getKind()) {
case BOOLEAN:
{
            accessibleField.setBoolean(this.object,input.readBoolean());
            break;
          }
case BYTE:
{
          accessibleField.setByte(this.object,input.readByte());
          break;
        }
case CHAR:
{
        accessibleField.setChar(this.object,input.readChar());
        break;
      }
case DOUBLE:
{
      accessibleField.setDouble(this.object,input.readDouble());
      break;
    }
case FLOAT:
{
    accessibleField.setFloat(this.object,input.readFloat());
    break;
  }
case INT:
{
  accessibleField.setInt(this.object,input.readInt());
  break;
}
case LONG:
{
accessibleField.setLong(this.object,input.readLong());
break;
}
case SHORT:
{
accessibleField.setShort(this.object,input.readShort());
break;
}
case OBJECT:
{
accessibleField.set(this.object,input.readObject());
break;
}
}
}
targetClass=targetClass.getSuperclass();
}
}
 catch (InstantiationException e) {
throw new IllegalStateException(e);
}
catch (IllegalAccessException e) {
throw new IllegalStateException(e);
}
}
