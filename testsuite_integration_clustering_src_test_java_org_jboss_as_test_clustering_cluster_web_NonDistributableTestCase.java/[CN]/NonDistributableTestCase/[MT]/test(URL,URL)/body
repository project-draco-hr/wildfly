{
  URI uri1=SimpleServlet.createURI(baseURL1);
  URI uri2=SimpleServlet.createURI(baseURL2);
  HttpClient client=HttpClients.createDefault();
  try {
    HttpResponse response=client.execute(new HttpGet(uri1));
    try {
      Assert.assertEquals(HttpServletResponse.SC_OK,response.getStatusLine().getStatusCode());
      Assert.assertEquals(1,Integer.parseInt(response.getFirstHeader(SimpleServlet.VALUE_HEADER).getValue()));
      Map.Entry<String,String> entry=parseSessionRoute(response);
      Assert.assertEquals(NODE_1,entry.getValue());
      Assert.assertEquals(entry.getKey(),response.getFirstHeader(SimpleServlet.SESSION_ID_HEADER).getValue());
    }
  finally {
      HttpClientUtils.closeQuietly(response);
    }
    response=client.execute(new HttpGet(uri1));
    try {
      Assert.assertEquals(HttpServletResponse.SC_OK,response.getStatusLine().getStatusCode());
      Assert.assertEquals(2,Integer.parseInt(response.getFirstHeader(SimpleServlet.VALUE_HEADER).getValue()));
      Map.Entry<String,String> entry=parseSessionRoute(response);
      Assert.assertNull(entry);
    }
  finally {
      HttpClientUtils.closeQuietly(response);
    }
    response=client.execute(new HttpGet(uri2));
    try {
      Assert.assertEquals(HttpServletResponse.SC_OK,response.getStatusLine().getStatusCode());
      Assert.assertEquals(1,Integer.parseInt(response.getFirstHeader(SimpleServlet.VALUE_HEADER).getValue()));
      Map.Entry<String,String> entry=parseSessionRoute(response);
      Assert.assertEquals(NODE_2,entry.getValue());
      Assert.assertEquals(entry.getKey(),response.getFirstHeader(SimpleServlet.SESSION_ID_HEADER).getValue());
    }
  finally {
      HttpClientUtils.closeQuietly(response);
    }
    response=client.execute(new HttpGet(uri2));
    try {
      Assert.assertEquals(HttpServletResponse.SC_OK,response.getStatusLine().getStatusCode());
      Assert.assertEquals(2,Integer.parseInt(response.getFirstHeader(SimpleServlet.VALUE_HEADER).getValue()));
      Map.Entry<String,String> entry=parseSessionRoute(response);
      Assert.assertNull(entry);
    }
  finally {
      HttpClientUtils.closeQuietly(response);
    }
  }
  finally {
    HttpClientUtils.closeQuietly(client);
  }
}
