{
  if (parsedCmd.isRequestComplete()) {
    return -1;
  }
  if (parsedCmd.hasProperties() || parsedCmd.endsOnPropertyListStart()) {
    if (parsedCmd.endsOnPropertyValueSeparator()) {
      return -1;
    }
    OperationCandidatesProvider provider=ctx.getOperationCandidatesProvider();
    List<String> propertyNames=provider.getPropertyNames(parsedCmd.getOperationName(),parsedCmd.getAddress());
    if (propertyNames.isEmpty()) {
      if (parsedCmd.endsOnPropertyListStart()) {
        candidates.add(")");
        return buffer.length();
      }
      return -1;
    }
    if (parsedCmd.endsOnPropertyListStart()) {
      if (propertyNames.size() == 1) {
        candidates.add(propertyNames.get(0) + '=');
      }
 else {
        candidates.addAll(propertyNames);
        Collections.sort(candidates);
      }
      return parsedCmd.getLastSeparatorIndex() + 1;
    }
    Set<String> specifiedNames=parsedCmd.getPropertyNames();
    String chunk=null;
    for (    String specifiedName : specifiedNames) {
      String value=parsedCmd.getPropertyValue(specifiedName);
      if (value == null) {
        chunk=specifiedName;
      }
 else {
        propertyNames.remove(specifiedName);
      }
    }
    if (chunk == null) {
      if (parsedCmd.endsOnPropertySeparator()) {
        if (propertyNames.size() == 1) {
          candidates.add(propertyNames.get(0) + '=');
        }
 else {
          candidates.addAll(propertyNames);
          Collections.sort(candidates);
        }
      }
 else       if (propertyNames.isEmpty()) {
        candidates.add(")");
      }
      return buffer.length();
    }
    for (    String candidate : propertyNames) {
      if (candidate.startsWith(chunk)) {
        candidates.add(candidate);
      }
    }
    if (candidates.size() == 1) {
      candidates.set(0,(String)candidates.get(0) + '=');
    }
 else {
      Collections.sort(candidates);
    }
    return parsedCmd.endsOnSeparator() ? parsedCmd.getLastSeparatorIndex() + 1 : parsedCmd.getLastChunkIndex();
  }
  if (parsedCmd.hasOperationName() || parsedCmd.endsOnAddressOperationNameSeparator()) {
    if (parsedCmd.getAddress().endsOnType()) {
      return -1;
    }
    OperationCandidatesProvider provider=ctx.getOperationCandidatesProvider();
    final List<String> names=provider.getOperationNames(parsedCmd.getAddress());
    if (names.isEmpty()) {
      return -1;
    }
    final String chunk=parsedCmd.getOperationName();
    if (chunk == null) {
      candidates.addAll(names);
    }
 else {
      for (      String name : names) {
        if (chunk == null || name.startsWith(chunk)) {
          candidates.add(name);
        }
      }
    }
    Collections.sort(candidates);
    return parsedCmd.endsOnSeparator() ? parsedCmd.getLastSeparatorIndex() + 1 : parsedCmd.getLastChunkIndex();
  }
  final OperationRequestAddress address=parsedCmd.getAddress();
  if (buffer.endsWith("..")) {
    return -1;
  }
  final String chunk;
  if (address.isEmpty() || parsedCmd.endsOnNodeSeparator() || parsedCmd.endsOnNodeTypeNameSeparator()|| address.equals(ctx.getPrefix())) {
    chunk=null;
  }
 else   if (address.endsOnType()) {
    chunk=address.getNodeType();
    address.toParentNode();
  }
 else {
    chunk=address.toNodeType();
  }
  OperationCandidatesProvider provider=ctx.getOperationCandidatesProvider();
  final List<String> names;
  if (address.endsOnType()) {
    names=provider.getNodeNames(address);
  }
 else {
    names=provider.getNodeTypes(address);
  }
  if (names.isEmpty()) {
    return -1;
  }
  if (chunk == null) {
    candidates.addAll(names);
  }
 else {
    for (    String name : names) {
      if (chunk == null || name.startsWith(chunk)) {
        candidates.add(name);
      }
    }
  }
  if (candidates.size() == 1) {
    if (address.endsOnType()) {
      candidates.set(0,Util.escapeString(candidates.get(0),ESCAPE_SELECTOR));
    }
 else {
      candidates.set(0,Util.escapeString(candidates.get(0),ESCAPE_SELECTOR) + '=');
    }
  }
 else {
    Util.sortAndEscape(candidates,ESCAPE_SELECTOR);
  }
  return parsedCmd.endsOnSeparator() ? parsedCmd.getLastSeparatorIndex() + 1 : parsedCmd.getLastChunkIndex();
}
