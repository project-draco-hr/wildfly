{
  if (!value.isDefined()) {
    return;
  }
  if (describedProperty.hasDefined(MIN)) {
switch (modelType) {
case BIG_DECIMAL:
      Assert.assertFalse(paramName + ":" + value.asBigDecimal()+ " is smaller than min "+ describedProperty.get(MIN).asBigDecimal()+ " for "+ operation,value.asBigDecimal().compareTo(describedProperty.get(MIN).asBigDecimal()) == -1);
    break;
case BIG_INTEGER:
  Assert.assertFalse(paramName + ":" + value.asBigInteger()+ " is smaller than min "+ describedProperty.get(MIN).asBigInteger()+ " for "+ operation,value.asBigInteger().compareTo(describedProperty.get(MIN).asBigInteger()) == -1);
break;
case DOUBLE:
Assert.assertFalse(paramName + ":" + value.asDouble()+ " is smaller than min "+ describedProperty.get(MIN).asDouble()+ " for "+ operation,value.asDouble() < describedProperty.get(MIN).asDouble());
break;
case INT:
Assert.assertFalse(paramName + ":" + value.asInt()+ " is smaller than min "+ describedProperty.get(MIN).asInt()+ " for "+ operation,value.asInt() < describedProperty.get(MIN).asInt());
break;
case LONG:
Assert.assertFalse(paramName + ":" + value.asLong()+ " is smaller than min "+ describedProperty.get(MIN).asLong()+ " for "+ operation,value.asLong() < describedProperty.get(MIN).asLong());
break;
}
}
if (describedProperty.hasDefined(MAX)) {
switch (modelType) {
case BIG_DECIMAL:
Assert.assertFalse(paramName + ":" + value.asBigDecimal()+ " is bigger than max "+ describedProperty.get(MAX).asBigDecimal()+ " for "+ operation,value.asBigDecimal().compareTo(describedProperty.get(MAX).asBigDecimal()) == 1);
break;
case BIG_INTEGER:
Assert.assertFalse(paramName + ":" + value.asBigInteger()+ " is bigger than max "+ describedProperty.get(MAX).asBigInteger()+ " for "+ operation,value.asBigInteger().compareTo(describedProperty.get(MAX).asBigInteger()) == 1);
break;
case DOUBLE:
Assert.assertFalse(paramName + ":" + value.asDouble()+ " is bigger than max "+ describedProperty.get(MAX).asDouble()+ " for "+ operation,value.asDouble() > describedProperty.get(MAX).asDouble());
break;
case INT:
Assert.assertFalse(paramName + ":" + value.asInt()+ " is bigger than max "+ describedProperty.get(MAX).asInt()+ " for "+ operation,value.asInt() > describedProperty.get(MAX).asInt());
break;
case LONG:
Assert.assertFalse(paramName + ":" + value.asLong()+ " is bigger than max "+ describedProperty.get(MAX).asLong()+ " for "+ operation,value.asLong() > describedProperty.get(MAX).asLong());
break;
}
}
if (describedProperty.hasDefined(MIN_LENGTH)) {
int minLength=describedProperty.get(MIN_LENGTH).asInt();
switch (modelType) {
case LIST:
Assert.assertTrue(paramName + ":" + value.asList().size()+ " is shorter than min-length "+ minLength+ " for "+ operation,value.asList().size() >= minLength);
break;
case BYTES:
Assert.assertTrue(paramName + ":" + value.asBytes().length+ " is shorter than min-length "+ minLength+ " for "+ operation,value.asBytes().length >= minLength);
break;
case STRING:
Assert.assertTrue(paramName + ":" + value.asString().length()+ " is shorter than min-length "+ minLength+ " for "+ operation,value.asString().length() >= minLength);
break;
}
}
if (describedProperty.hasDefined(MAX_LENGTH)) {
int minLength=describedProperty.get(MAX_LENGTH).asInt();
switch (modelType) {
case LIST:
Assert.assertTrue(paramName + ":" + value.asList().size()+ " is longer than max-length "+ minLength+ " for "+ operation,value.asList().size() <= minLength);
break;
case BYTES:
Assert.assertTrue(paramName + ":" + value.asBytes().length+ " is longer than max-length "+ minLength+ " for "+ operation,value.asBytes().length <= minLength);
break;
case STRING:
Assert.assertTrue(paramName + ":" + value.asString().length()+ " is longer than max-length "+ minLength+ " for "+ operation,value.asString().length() <= minLength);
break;
}
}
}
