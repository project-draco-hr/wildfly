{
  super.registerChildren(resourceRegistration);
  resourceRegistration.registerSubModel(SystemPropertyResourceDefinition.createForDomainOrHost(Location.DOMAIN));
  resourceRegistration.registerSubModel(new InterfaceDefinition(InterfaceAddHandler.NAMED_INSTANCE,InterfaceRemoveHandler.INSTANCE,false));
  resourceRegistration.registerSubModel(CoreManagementResourceDefinition.forDomain(authorizer));
  resourceRegistration.registerSubModel(new ProfileResourceDefinition(extensionRegistry));
  resourceRegistration.registerSubModel(PathResourceDefinition.createNamed(pathManager));
  ResourceDefinition domainDeploymentDefinition=isMaster ? DomainDeploymentResourceDefinition.createForDomainMaster(contentRepo) : DomainDeploymentResourceDefinition.createForDomainSlave(environment.isBackupDomainFiles(),fileRepository);
  resourceRegistration.registerSubModel(domainDeploymentDefinition);
  resourceRegistration.registerSubModel(new DeploymentOverlayDefinition(null,contentRepo,fileRepository));
  resourceRegistration.registerSubModel(new ServerGroupResourceDefinition(isMaster,hostControllerInfo,fileRepository,runtimeIgnoreTransformationRegistry));
  resourceRegistration.registerSubModel(new SocketBindingGroupResourceDefinition(SocketBindingGroupAddHandler.INSTANCE,DomainSocketBindingGroupRemoveHandler.INSTANCE,true,SocketBindingResourceDefinition.INSTANCE,RemoteDestinationOutboundSocketBindingResourceDefinition.INSTANCE,LocalDestinationOutboundSocketBindingResourceDefinition.INSTANCE));
  resourceRegistration.registerSubModel(new ManagedDMRContentTypeResourceDefinition(contentRepo,ROLLOUT_PLAN,PathElement.pathElement(MANAGEMENT_CLIENT_CONTENT,ROLLOUT_PLANS),new RolloutPlanValidator(),DomainResolver.getResolver(ROLLOUT_PLANS),DomainResolver.getResolver(ROLLOUT_PLAN)));
  resourceRegistration.registerSubModel(new ExtensionResourceDefinition(extensionRegistry,true,false,!isMaster));
  DomainTransformers.initializeDomainRegistry(extensionRegistry.getTransformerRegistry());
}
