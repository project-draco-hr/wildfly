{
  super.registerOperations(resourceRegistration);
  XmlMarshallingHandler xmh=new XmlMarshallingHandler(configurationPersister);
  resourceRegistration.registerOperationHandler(XmlMarshallingHandler.DEFINITION,xmh);
  resourceRegistration.registerOperationHandler(NamespaceAddHandler.DEFINITION,NamespaceAddHandler.INSTANCE);
  resourceRegistration.registerOperationHandler(NamespaceRemoveHandler.DEFINITION,NamespaceRemoveHandler.INSTANCE);
  resourceRegistration.registerOperationHandler(SchemaLocationAddHandler.DEFINITION,SchemaLocationAddHandler.INSTANCE);
  resourceRegistration.registerOperationHandler(SchemaLocationRemoveHandler.DEFINITION,SchemaLocationRemoveHandler.INSTANCE);
  if (isMaster) {
    DeploymentUploadURLHandler.registerMaster(resourceRegistration,contentRepo);
    DeploymentUploadStreamAttachmentHandler.registerMaster(resourceRegistration,contentRepo);
    DeploymentUploadBytesHandler.registerMaster(resourceRegistration,contentRepo);
    SnapshotDeleteHandler snapshotDelete=new SnapshotDeleteHandler(configurationPersister);
    resourceRegistration.registerOperationHandler(SnapshotDeleteHandler.DEFINITION,snapshotDelete);
    SnapshotListHandler snapshotList=new SnapshotListHandler(configurationPersister);
    resourceRegistration.registerOperationHandler(SnapshotListHandler.DEFINITION,snapshotList);
    SnapshotTakeHandler snapshotTake=new SnapshotTakeHandler(configurationPersister);
    resourceRegistration.registerOperationHandler(SnapshotTakeHandler.DEFINITION,snapshotTake);
    final SubsystemDescriptionDump dumper=new SubsystemDescriptionDump(extensionRegistry);
    resourceRegistration.registerOperationHandler(SubsystemDescriptionDump.DEFINITION,dumper);
  }
 else {
    DeploymentUploadURLHandler.registerSlave(resourceRegistration);
    DeploymentUploadStreamAttachmentHandler.registerSlave(resourceRegistration);
    DeploymentUploadBytesHandler.registerSlave(resourceRegistration);
    final ApplyExtensionsHandler aexh=new ApplyExtensionsHandler(extensionRegistry,hostControllerInfo,ignoredDomainResourceRegistry);
    resourceRegistration.registerOperationHandler(ApplyExtensionsHandler.DEFINITION,aexh);
    ApplyRemoteMasterDomainModelHandler armdmh=new ApplyRemoteMasterDomainModelHandler(domainController,environment,fileRepository,contentRepo,hostControllerInfo,ignoredDomainResourceRegistry,authorizer.getWritableAuthorizerConfiguration());
    resourceRegistration.registerOperationHandler(ApplyRemoteMasterDomainModelHandler.DEFINITION,armdmh);
    ApplyMissingDomainModelResourcesHandler amdmrh=new ApplyMissingDomainModelResourcesHandler(domainController,environment,hostControllerInfo,ignoredDomainResourceRegistry);
    resourceRegistration.registerOperationHandler(ApplyMissingDomainModelResourcesHandler.DEFINITION,amdmrh);
  }
  resourceRegistration.registerOperationHandler(DeploymentAttributes.FULL_REPLACE_DEPLOYMENT_DEFINITION,isMaster ? new DeploymentFullReplaceHandler(contentRepo) : new DeploymentFullReplaceHandler(fileRepository));
  resourceRegistration.registerOperationHandler(ValidateAddressOperationHandler.DEFINITION,ValidateAddressOperationHandler.INSTANCE);
  resourceRegistration.registerOperationHandler(ResolveExpressionOnDomainHandler.DEFINITION,ResolveExpressionOnDomainHandler.INSTANCE);
  DomainServerLifecycleHandlers.registerDomainHandlers(resourceRegistration);
}
