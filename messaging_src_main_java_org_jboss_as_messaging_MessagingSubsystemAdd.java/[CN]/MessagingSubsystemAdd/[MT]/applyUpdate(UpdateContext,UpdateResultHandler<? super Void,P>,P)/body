{
  final HornetQService hqservice=new HornetQService();
  final Configuration hqConfig=new ConfigurationImpl();
  if (bindingsDirectory != null) {
    hqConfig.setBindingsDirectory(bindingsDirectory);
  }
  if (journalDirectory != null) {
    hqConfig.setJournalDirectory(journalDirectory);
  }
  if (largeMessagesDirectory != null) {
    hqConfig.setLargeMessagesDirectory(largeMessagesDirectory);
  }
  if (pagingDirectory != null) {
    hqConfig.setPagingDirectory(pagingDirectory);
  }
  if (clustered != null) {
    hqConfig.setClustered(clustered);
  }
  if (journalMinFiles != null) {
    hqConfig.setJournalMinFiles(journalMinFiles);
  }
  if (journalFileSize != null) {
    hqConfig.setJournalFileSize(journalFileSize);
  }
  if (journalType != null) {
    hqConfig.setJournalType(journalType);
  }
  final Map<String,AddressSettings> configAddressSettings=hqConfig.getAddressesSettings();
  for (  AddressSettingsSpecification addressSpec : addressSettings) {
    final AddressSettings settings=new AddressSettings();
    settings.setAddressFullMessagePolicy(addressSpec.getAddressFullMessagePolicy());
    settings.setDeadLetterAddress(addressSpec.getDeadLetterAddress());
    settings.setExpiryAddress(addressSpec.getExpiryAddress());
    if (addressSpec.isLastValueQueue() != null) {
      settings.setLastValueQueue(addressSpec.isLastValueQueue());
    }
    if (addressSpec.getMaxDeliveryAttempts() != null) {
      settings.setMaxDeliveryAttempts(addressSpec.getMaxDeliveryAttempts());
    }
    if (addressSpec.getMaxSizeBytes() != null) {
      settings.setMaxSizeBytes(addressSpec.getMaxSizeBytes());
    }
    if (addressSpec.getMessageCounterHistoryDayLimit() != null) {
      settings.setMessageCounterHistoryDayLimit(addressSpec.getMessageCounterHistoryDayLimit());
    }
    if (addressSpec.getPageSizeBytes() != null) {
      settings.setPageSizeBytes(addressSpec.getPageSizeBytes());
    }
    if (addressSpec.getRedeliveryDelay() != null) {
      settings.setRedeliveryDelay(addressSpec.getRedeliveryDelay());
    }
    if (addressSpec.getRedistributionDelay() != null) {
      settings.setRedistributionDelay(addressSpec.getRedistributionDelay());
    }
    if (addressSpec.isSendToDLAOnNoRoute() != null) {
      settings.setSendToDLAOnNoRoute(addressSpec.isSendToDLAOnNoRoute());
    }
    configAddressSettings.put(addressSpec.getMatch(),settings);
  }
  final Map<String,Set<Role>> hqSecurityRoles=hqConfig.getSecurityRoles();
  for (  SecuritySettingsSpecification securitySetting : securitySettings) {
    hqSecurityRoles.put(securitySetting.getMatch(),securitySetting.getRoles());
  }
  hqservice.setConfiguration(hqConfig);
  final BatchBuilder batchBuilder=updateContext.getBatchBuilder();
  final BatchServiceBuilder<HornetQServer> serviceBuilder=batchBuilder.addService(MessagingSubsystemElement.JBOSS_MESSAGING,hqservice);
  final Map<String,TransportConfiguration> connectors=hqConfig.getConnectorConfigurations();
  for (  TransportSpecification connectorSpec : this.connectors) {
    connectors.put(connectorSpec.getName(),new TransportConfiguration(connectorSpec.getFactoryClassName(),connectorSpec.getParams(),connectorSpec.getName()));
    final Object socketRef=connectorSpec.getParams().get("socket-ref");
    if (socketRef != null) {
      final String name=socketRef.toString();
      final ServiceName socketName=SocketBinding.JBOSS_BINDING_NAME.append(name);
      serviceBuilder.addDependency(socketName,SocketBinding.class,hqservice.getSocketBindingInjector(name));
    }
  }
  final Collection<TransportConfiguration> acceptors=hqConfig.getAcceptorConfigurations();
  for (  TransportSpecification acceptorSpec : this.acceptors) {
    acceptors.add(new TransportConfiguration(acceptorSpec.getFactoryClassName(),acceptorSpec.getParams(),acceptorSpec.getName()));
    final Object socketRef=acceptorSpec.getParams().get("socket-ref");
    if (socketRef != null) {
      final String name=socketRef.toString();
      final ServiceName socketName=SocketBinding.JBOSS_BINDING_NAME.append(name);
      serviceBuilder.addDependency(socketName,SocketBinding.class,hqservice.getSocketBindingInjector(name));
    }
  }
  serviceBuilder.setInitialMode(ServiceController.Mode.IMMEDIATE);
}
