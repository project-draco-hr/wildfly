{
  final HornetQService hqservice=new HornetQService();
  final Configuration hqConfig=new ConfigurationImpl();
  if (clustered != null) {
    hqConfig.setClustered(clustered);
  }
  if (journalMinFiles != null) {
    hqConfig.setJournalMinFiles(journalMinFiles);
  }
  if (journalFileSize != null) {
    hqConfig.setJournalFileSize(journalFileSize);
  }
  if (journalType != null) {
    hqConfig.setJournalType(journalType);
  }
  if (persistenceEnabled != null) {
    hqConfig.setPersistenceEnabled(persistenceEnabled);
  }
  final Map<String,AddressSettings> configAddressSettings=hqConfig.getAddressesSettings();
  for (  AddressSettingsElement addressSpec : addressSettings) {
    final AddressSettings settings=new AddressSettings();
    settings.setAddressFullMessagePolicy(addressSpec.getAddressFullMessagePolicy());
    settings.setDeadLetterAddress(addressSpec.getDeadLetterAddress());
    settings.setExpiryAddress(addressSpec.getExpiryAddress());
    if (addressSpec.isLastValueQueue() != null) {
      settings.setLastValueQueue(addressSpec.isLastValueQueue());
    }
    if (addressSpec.getMaxDeliveryAttempts() != null) {
      settings.setMaxDeliveryAttempts(addressSpec.getMaxDeliveryAttempts());
    }
    if (addressSpec.getMaxSizeBytes() != null) {
      settings.setMaxSizeBytes(addressSpec.getMaxSizeBytes());
    }
    if (addressSpec.getMessageCounterHistoryDayLimit() != null) {
      settings.setMessageCounterHistoryDayLimit(addressSpec.getMessageCounterHistoryDayLimit());
    }
    if (addressSpec.getPageSizeBytes() != null) {
      settings.setPageSizeBytes(addressSpec.getPageSizeBytes());
    }
    if (addressSpec.getRedeliveryDelay() != null) {
      settings.setRedeliveryDelay(addressSpec.getRedeliveryDelay());
    }
    if (addressSpec.getRedistributionDelay() != null) {
      settings.setRedistributionDelay(addressSpec.getRedistributionDelay());
    }
    if (addressSpec.isSendToDLAOnNoRoute() != null) {
      settings.setSendToDLAOnNoRoute(addressSpec.isSendToDLAOnNoRoute());
    }
    configAddressSettings.put(addressSpec.getMatch(),settings);
  }
  final Map<String,Set<Role>> hqSecurityRoles=hqConfig.getSecurityRoles();
  for (  SecuritySettingsElement securitySetting : securitySettings) {
    hqSecurityRoles.put(securitySetting.getMatch(),securitySetting.getRoles());
  }
  for (  final QueueElement queue : queues) {
    hqConfig.getQueueConfigurations().add(new CoreQueueConfiguration(queue.getAddress(),queue.getName(),queue.getFilter(),queue.isDurable()));
  }
  hqservice.setConfiguration(hqConfig);
  final BatchBuilder batchBuilder=updateContext.getBatchBuilder();
  final BatchServiceBuilder<HornetQServer> serviceBuilder=batchBuilder.addService(MessagingSubsystemElement.JBOSS_MESSAGING,hqservice).addOptionalDependency(ServiceName.JBOSS.append("mbean","server"),MBeanServer.class,hqservice.getMBeanServer());
  JMSService.addService(batchBuilder);
  createRelativePathService("bindings",bindingsDirectory,batchBuilder);
  addPathDependency("bindings",hqservice,serviceBuilder);
  createRelativePathService("journal",journalDirectory,batchBuilder);
  addPathDependency("journal",hqservice,serviceBuilder);
  createRelativePathService("largemessages",largeMessagesDirectory,batchBuilder);
  addPathDependency("largemessages",hqservice,serviceBuilder);
  createRelativePathService("paging",pagingDirectory,batchBuilder);
  addPathDependency("paging",hqservice,serviceBuilder);
  final Map<String,TransportConfiguration> connectors=hqConfig.getConnectorConfigurations();
  for (  AbstractTransportElement<?> connectorSpec : this.connectors) {
    final TransportConfiguration transport=new TransportConfiguration(connectorSpec.getFactoryClassName(),new HashMap<String,Object>(),connectorSpec.getName());
    connectorSpec.processHQConfig(transport);
    connectors.put(connectorSpec.getName(),transport);
    final String socketRef=connectorSpec.getSocketBindingRef();
    if (socketRef != null) {
      final ServiceName socketName=SocketBinding.JBOSS_BINDING_NAME.append(socketRef);
      serviceBuilder.addDependency(socketName,SocketBinding.class,hqservice.getSocketBindingInjector(socketRef));
    }
  }
  final Collection<TransportConfiguration> acceptors=hqConfig.getAcceptorConfigurations();
  for (  AbstractTransportElement<?> acceptorSpec : this.acceptors) {
    final TransportConfiguration transport=new TransportConfiguration(acceptorSpec.getFactoryClassName(),new HashMap<String,Object>(),acceptorSpec.getName());
    acceptorSpec.processHQConfig(transport);
    acceptors.add(transport);
    final String socketRef=acceptorSpec.getSocketBindingRef();
    if (socketRef != null) {
      final ServiceName socketName=SocketBinding.JBOSS_BINDING_NAME.append(socketRef);
      serviceBuilder.addDependency(socketName,SocketBinding.class,hqservice.getSocketBindingInjector(socketRef));
    }
  }
  serviceBuilder.setInitialMode(ServiceController.Mode.IMMEDIATE);
}
