{
  final MessagingSubsystemElement element=new MessagingSubsystemElement();
  if (bindingsDirectory != null)   element.setBindingsDirectory(getBindingsDirectory());
  if (journalDirectory != null)   element.setJournalDirectory(getJournalDirectory());
  if (largeMessagesDirectory != null)   element.setLargeMessagesDirectory(getLargeMessagesDirectory());
  if (pagingDirectory != null)   element.setPagingDirectory(getPagingDirectory());
  if (clustered != null)   element.setClustered(isClustered());
  if (journalMinFiles != null)   element.setJournalMinFiles(getJournalMinFiles());
  if (journalFileSize != null)   element.setJournalFileSize(getJournalFileSize());
  if (journalType != null)   element.setJournalType(getJournalType());
  for (  TransportSpecification acceptorSpec : acceptors) {
    TransportElement acceptorEl=element.addAcceptor(acceptorSpec.getName());
    acceptorEl.setFactoryClassName(acceptorSpec.getFactoryClassName());
    acceptorEl.setParams(acceptorSpec.getParams());
  }
  for (  AddressSettingsSpecification addressSpec : addressSettings) {
    AddressSettingsElement addressEl=element.addAddressSettings(addressSpec.getMatch());
    addressEl.setAddressFullMessagePolicy(addressSpec.getAddressFullMessagePolicy());
    addressEl.setDeadLetterAddress(addressSpec.getDeadLetterAddress());
    addressEl.setExpiryAddress(addressSpec.getExpiryAddress());
    if (addressSpec.isLastValueQueue() != null) {
      addressEl.setLastValueQueue(addressSpec.isLastValueQueue());
    }
    if (addressSpec.getMaxDeliveryAttempts() != null) {
      addressEl.setMaxDeliveryAttempts(addressSpec.getMaxDeliveryAttempts());
    }
    if (addressSpec.getMaxSizeBytes() != null) {
      addressEl.setMaxSizeBytes(addressSpec.getMaxSizeBytes());
    }
    if (addressSpec.getMessageCounterHistoryDayLimit() != null) {
      addressEl.setMessageCounterHistoryDayLimit(addressSpec.getMessageCounterHistoryDayLimit());
    }
    if (addressSpec.getPageSizeBytes() != null) {
      addressEl.setPageSizeBytes(addressSpec.getPageSizeBytes());
    }
    if (addressSpec.getRedeliveryDelay() != null) {
      addressEl.setRedeliveryDelay(addressSpec.getRedeliveryDelay());
    }
    if (addressSpec.getRedistributionDelay() != null) {
      addressEl.setRedistributionDelay(addressSpec.getRedistributionDelay());
    }
    if (addressSpec.isSendToDLAOnNoRoute() != null) {
      addressEl.setSendToDLAOnNoRoute(addressSpec.isSendToDLAOnNoRoute());
    }
  }
  for (  TransportSpecification connectorSpec : connectors) {
    TransportElement connectorEl=element.addAcceptor(connectorSpec.getName());
    connectorEl.setFactoryClassName(connectorSpec.getFactoryClassName());
    connectorEl.setParams(connectorSpec.getParams());
  }
  for (  SecuritySettingsSpecification securitySetting : securitySettings) {
    element.addSecuritySetting(securitySetting.getMatch(),securitySetting.getRoles());
  }
  return element;
}
