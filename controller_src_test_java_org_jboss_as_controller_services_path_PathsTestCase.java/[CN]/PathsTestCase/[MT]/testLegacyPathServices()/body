{
  getContainer().getRequiredService(AbstractPathService.pathNameOf("hardcoded"));
  ServiceName name1=AbstractPathService.pathNameOf("add1");
  ServiceName name2=AbstractPathService.pathNameOf("add2");
  ServiceName name3=AbstractPathService.pathNameOf("add3");
  Assert.assertNull(getContainer().getService(name1));
  Assert.assertNull(getContainer().getService(name2));
  TestServiceListener listener=new TestServiceListener();
  getContainer().addListener(listener);
  listener.reset(1);
  ModelNode operation=createOperation(ADD);
  operation.get(OP_ADDR).add(PATH,"add1");
  operation.get(PATH).set("xyz");
  executeForResult(operation);
  listener.latch.await();
  Assert.assertEquals(new ExpectedResultBuilder().addUp(name1).map,listener.services);
  checkServiceAndPathEntry("add1","xyz",null);
  listener.reset(1);
  operation=createOperation(ADD);
  operation.get(OP_ADDR).add(PATH,"add2");
  operation.get(PATH).set("abc");
  executeForResult(operation);
  listener.latch.await();
  Assert.assertEquals(new ExpectedResultBuilder().addUp(name2).map,listener.services);
  checkServiceAndPathEntry("add2","abc",null);
  listener.reset(1);
  operation=createOperation(ADD);
  operation.get(OP_ADDR).add(PATH,"add3");
  operation.get(PATH).set("456");
  operation.get(RELATIVE_TO).set("add1");
  executeForResult(operation);
  listener.latch.await();
  ServiceController<?> original3=getContainer().getRequiredService(name3);
  checkServiceAndPathEntry("add1","xyz",null);
  checkServiceAndPathEntry("add2","abc",null);
  checkServiceAndPathEntry("add3","456","add1");
  listener.reset(2);
  operation=createOperation(WRITE_ATTRIBUTE_OPERATION);
  operation.get(OP_ADDR).add(PATH,"add3");
  operation.get(NAME).set(PATH);
  operation.get(VALUE).set("new-value");
  executeForResult(operation);
  listener.latch.await();
  Assert.assertEquals(new ExpectedResultBuilder().addRemove(name3).addUp(name3).map,listener.services);
  checkServiceAndPathEntry("add3","new-value","add1");
  listener.reset(2);
  operation=createOperation(WRITE_ATTRIBUTE_OPERATION);
  operation.get(OP_ADDR).add(PATH,"add3");
  operation.get(NAME).set(RELATIVE_TO);
  operation.get(VALUE).set("add2");
  executeForResult(operation);
  listener.latch.await();
  Assert.assertEquals(new ExpectedResultBuilder().addRemove(name3).addUp(name3).map,listener.services);
  checkServiceAndPathEntry("add3","new-value","add2");
  listener.reset(2);
  operation=createOperation(UNDEFINE_ATTRIBUTE_OPERATION);
  operation.get(OP_ADDR).add(PATH,"add3");
  operation.get(NAME).set(RELATIVE_TO);
  executeForResult(operation);
  listener.latch.await();
  Assert.assertEquals(new ExpectedResultBuilder().addRemove(name3).addUp(name3).map,listener.services);
  checkServiceAndPathEntry("add3","new-value",null);
  listener.reset(2);
  operation=createOperation(WRITE_ATTRIBUTE_OPERATION);
  operation.get(OP_ADDR).add(PATH,"add3");
  operation.get(NAME).set(PATH);
  operation.get(VALUE).set("newer-value");
  executeForResult(operation);
  listener.latch.await();
  Assert.assertEquals(new ExpectedResultBuilder().addRemove(name3).addUp(name3).map,listener.services);
  checkServiceAndPathEntry("add3","newer-value",null);
  listener.reset(2);
  operation=createOperation(WRITE_ATTRIBUTE_OPERATION);
  operation.get(OP_ADDR).add(PATH,"add3");
  operation.get(NAME).set(RELATIVE_TO);
  operation.get(VALUE).set("add1");
  executeForResult(operation);
  listener.latch.await();
  Assert.assertEquals(new ExpectedResultBuilder().addRemove(name3).addUp(name3).map,listener.services);
  checkServiceAndPathEntry("add3","newer-value","add1");
  listener.reset(1);
  operation=createOperation(REMOVE);
  operation.get(OP_ADDR).add(PATH,"add3");
  executeForResult(operation);
  listener.latch.await();
  Assert.assertNull(getContainer().getService(name3));
  Assert.assertEquals(new ExpectedResultBuilder().addRemove(name3).map,listener.services);
}
