{
  this.compiler=compiler;
  this.lazyResultSetLoading=lazyResultSetLoading;
  this.method=method;
  this.readAhead=readAhead;
  from=props.get("from");
  where=props.get("where");
  order=props.get("order");
  other=props.get("other");
  this.resultTypeMappingLocal=isResultTypeMappingLocal;
  if (!props.isEmpty()) {
    distinct=props.get("distinct") != null;
    if (method.getName().startsWith("ejbSelect")) {
      ejbName=props.get("ejb-name");
      fieldName=props.get("field-name");
    }
 else {
      if (props.get("ejb-name") != null) {
        throw new RuntimeException("The ejb-name element of declared-sql select is only " + "allowed for ejbSelect queries.");
      }
      if (props.get("field-name") != null) {
        throw new RuntimeException("The field-name element of declared-sql select is only " + "allowed for ejbSelect queries.");
      }
      ejbName=null;
      fieldName=null;
    }
    alias=props.get("alias");
    additionalColumns=props.get("additional-columns");
  }
 else {
    if (method.getName().startsWith("ejbSelect")) {
      throw new RuntimeException("The select element of " + "declared-sql is required for ejbSelect queries.");
    }
    distinct=false;
    ejbName=null;
    fieldName=null;
    alias=null;
    additionalColumns=null;
  }
}
