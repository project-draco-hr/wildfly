{
  final ModelNode result=new ModelNode();
  result.get(ModelDescriptionConstants.TYPE).set(type);
  result.get(ModelDescriptionConstants.DESCRIPTION);
  result.get(ModelDescriptionConstants.EXPRESSIONS_ALLOWED).set(isAllowExpression());
  if (forOperation) {
    result.get(ModelDescriptionConstants.REQUIRED).set(!isAllowNull());
  }
  result.get(ModelDescriptionConstants.NILLABLE).set(isAllowNull());
  if (!forOperation && nilSignificant != null) {
    result.get(ModelDescriptionConstants.NIL_SIGNIFICANT).set(nilSignificant);
  }
  if (defaultValue != null && defaultValue.isDefined()) {
    result.get(ModelDescriptionConstants.DEFAULT).set(defaultValue);
  }
  if (measurementUnit != null && measurementUnit != MeasurementUnit.NONE) {
    result.get(ModelDescriptionConstants.UNIT).set(measurementUnit.getName());
  }
  if (alternatives != null) {
    for (    final String alternative : alternatives) {
      result.get(ModelDescriptionConstants.ALTERNATIVES).add(alternative);
    }
  }
  if (requires != null) {
    for (    final String required : requires) {
      result.get(ModelDescriptionConstants.REQUIRES).add(required);
    }
  }
  if (validator instanceof MinMaxValidator) {
    MinMaxValidator minMax=(MinMaxValidator)validator;
    Long min=minMax.getMin();
    if (min != null) {
switch (this.type) {
case STRING:
case LIST:
case OBJECT:
case BYTES:
        result.get(ModelDescriptionConstants.MIN_LENGTH).set(min);
      break;
default :
    result.get(ModelDescriptionConstants.MIN).set(min);
}
}
Long max=minMax.getMax();
if (max != null) {
switch (this.type) {
case STRING:
case LIST:
case OBJECT:
case BYTES:
  result.get(ModelDescriptionConstants.MAX_LENGTH).set(max);
break;
default :
result.get(ModelDescriptionConstants.MAX).set(max);
}
}
}
addAllowedValuesToDescription(result,validator);
return result;
}
