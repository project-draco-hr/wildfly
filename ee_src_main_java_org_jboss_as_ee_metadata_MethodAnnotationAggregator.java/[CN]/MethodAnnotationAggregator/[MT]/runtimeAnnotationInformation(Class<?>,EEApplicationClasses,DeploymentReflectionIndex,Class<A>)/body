{
  final HashSet<MethodIdentifier> methodIdentifiers=new HashSet<MethodIdentifier>();
  final Map<Method,List<T>> methods=new HashMap<Method,List<T>>();
  final Map<String,List<T>> classAnnotations=new HashMap<String,List<T>>();
  Class<?> c=componentClass;
  while (c != null && c != Object.class) {
    final ClassReflectionIndex<?> classIndex=index.getClassIndex(c);
    final EEModuleClassDescription description=applicationClasses.getClassByName(c.getName());
    if (description != null) {
      ClassAnnotationInformation<A,T> annotationData=description.getAnnotationInformation(annotationType);
      if (annotationData != null) {
        if (!annotationData.getClassLevelAnnotations().isEmpty()) {
          classAnnotations.put(c.getName(),annotationData.getClassLevelAnnotations());
        }
        for (        Map.Entry<MethodIdentifier,List<T>> entry : annotationData.getMethodLevelAnnotations().entrySet()) {
          if (!methodIdentifiers.contains(entry.getKey())) {
            Method method=classIndex.getMethod(entry.getKey());
            methods.put(method,entry.getValue());
          }
        }
      }
    }
    for (    Method method : classIndex.getMethods()) {
      if (!Modifier.isPrivate(method.getModifiers())) {
        methodIdentifiers.add(MethodIdentifier.getIdentifierForMethod(method));
      }
    }
    c=c.getSuperclass();
  }
  return new RuntimeAnnotationInformation<T>(classAnnotations,methods);
}
