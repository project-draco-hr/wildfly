{
  final HashSet<MethodIdentifier> methodIdentifiers=new HashSet<MethodIdentifier>();
  final Map<Method,List<T>> ret=new HashMap<Method,List<T>>();
  Class<?> c=componentClass;
  while (c != null && c != Object.class) {
    final EEModuleClassDescription description=applicationClasses.getClassByName(c.getName());
    ClassAnnotationInformation<A,T> annotationData=description.getAnnotationInformation(annotationType);
    if (annotationData != null) {
      final ClassReflectionIndex<?> classIndex=index.getClassIndex(c);
      for (      Map.Entry<MethodIdentifier,List<T>> entry : annotationData.getMethodLevelAnnotations().entrySet()) {
        if (!methodIdentifiers.contains(entry.getKey())) {
          Method method=classIndex.getMethod(entry.getKey());
          if (!Modifier.isPrivate(method.getModifiers())) {
            methodIdentifiers.add(entry.getKey());
          }
          ret.put(method,entry.getValue());
        }
      }
    }
    c=c.getSuperclass();
  }
  return ret;
}
