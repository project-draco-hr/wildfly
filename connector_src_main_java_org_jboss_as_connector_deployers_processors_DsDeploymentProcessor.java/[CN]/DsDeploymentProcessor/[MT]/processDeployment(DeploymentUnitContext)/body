{
  final ConnectorXmlDescriptor connectorXmlDescriptor=context.getAttachment(ConnectorXmlDescriptor.ATTACHMENT_KEY);
  Module module=context.getAttachment(ModuleDeploymentProcessor.MODULE_ATTACHMENT_KEY);
  String deploymentName=connectorXmlDescriptor == null ? null : connectorXmlDescriptor.getDeploymentName();
  DataSources datasources=null;
  datasources=dsValue.getValue();
  if (datasources == null || deploymentName == null || !deploymentName.startsWith("jdbc"))   return;
  log.tracef("Processing datasource deployement: %s",datasources);
  if (module == null)   throw new DeploymentUnitProcessingException("Failed to get module attachment for deployment: " + context.getName());
  try {
    if (deploymentName.indexOf("local") != -1) {
      List<DataSource> dss=datasources.getDataSource();
      if (dss != null && dss.size() > 0) {
        for (        DataSource ds : dss) {
          try {
            log.tracef("Processing datasource deployement: %s",ds);
            if (ds.getModule() != null && !ds.getModule().trim().equals("")) {
              ModuleIdentifier jdbcIdentifier=ModuleIdentifier.fromString(ds.getModule());
              Module jdbcModule=Module.getDefaultModuleLoader().loadModule(jdbcIdentifier);
              ModuleDependencies.addDependency(context,new ModuleConfig.Dependency(jdbcIdentifier,true,false,false));
            }
 else {
              log.warnf("No module defined for %s",ds.getJndiName());
            }
          }
 catch (          ModuleLoadException mle) {
            log.warnf("Unable to resolve %s for %s",ds.getModule(),ds.getJndiName());
          }
        }
        AS7Deployer deployer=new AS7Deployer(jndiStrategy.getValue(),module.getClassLoader(),log);
        String uniqueJdbcLocalId=deploymentName;
        String uniqueJdbcXAId=null;
        deployer.setTransactionManager(getTransactionManager());
        deployer.setMetadataRepository(mdr.getValue());
        deployer.doDeploy(new URL("file://DataSourceDeployment"),deploymentName,uniqueJdbcLocalId,uniqueJdbcXAId,datasources,module.getClassLoader());
      }
    }
 else {
      List<XaDataSource> xadss=datasources.getXaDataSource();
      if (xadss != null && xadss.size() > 0) {
        for (        XaDataSource xads : xadss) {
          try {
            log.tracef("Processing xa-datasource deployement: %s",xads);
            if (xads.getModule() != null && !xads.getModule().trim().equals("")) {
              ModuleIdentifier jdbcIdentifier=ModuleIdentifier.fromString(xads.getModule());
              Module jdbcModule=Module.getDefaultModuleLoader().loadModule(jdbcIdentifier);
              ModuleDependencies.addDependency(context,new ModuleConfig.Dependency(jdbcIdentifier,true,false,false));
            }
 else {
              log.warnf("No module defined for %s",xads.getJndiName());
            }
          }
 catch (          ModuleLoadException mle) {
            log.warnf("Unable to resolve %s for %s",xads.getModule(),xads.getJndiName());
          }
        }
        AS7Deployer deployer=new AS7Deployer(jndiStrategy.getValue(),module.getClassLoader(),log);
        String uniqueJdbcLocalId=null;
        String uniqueJdbcXAId=deploymentName;
        deployer.setTransactionManager(getTransactionManager());
        deployer.setMetadataRepository(mdr.getValue());
        deployer.doDeploy(new URL("file://DataSourceDeployment"),deploymentName,uniqueJdbcLocalId,uniqueJdbcXAId,datasources,module.getClassLoader());
      }
    }
  }
 catch (  Throwable t) {
    throw new DeploymentUnitProcessingException(t);
  }
}
