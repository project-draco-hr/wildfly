{
  final ConnectorXmlDescriptor connectorXmlDescriptor=phaseContext.getAttachment(ConnectorXmlDescriptor.ATTACHMENT_KEY);
  Module module=phaseContext.getAttachment(ModuleDeploymentProcessor.MODULE_ATTACHMENT_KEY);
  String deploymentName=connectorXmlDescriptor == null ? null : connectorXmlDescriptor.getDeploymentName();
  DataSources datasources=getDataSourcesAttachment(phaseContext);
  if (datasources == null || deploymentName == null || !deploymentName.startsWith("jdbc"))   return;
  log.tracef("Processing datasource deployement: %s",datasources);
  if (module == null)   throw new DeploymentUnitProcessingException("Failed to get module attachment for deployment: " + phaseContext.getName());
  String uniqueJdbcLocalId=null;
  String uniqueJdbcXAId=null;
  boolean shouldDeploy=false;
  if (deploymentName.indexOf("local") != -1) {
    List<DataSource> dss=datasources.getDataSource();
    if (dss != null && dss.size() > 0) {
      uniqueJdbcLocalId=deploymentName;
      shouldDeploy=true;
    }
  }
 else {
    List<XaDataSource> xadss=datasources.getXaDataSource();
    if (xadss != null && xadss.size() > 0) {
      uniqueJdbcXAId=deploymentName;
      shouldDeploy=true;
    }
  }
  if (shouldDeploy) {
    final ServiceTarget serviceTarget=phaseContext.getBatchBuilder();
    final DataSourceDeploymentService dataSourceDeploymentService=new DataSourceDeploymentService(deploymentName,uniqueJdbcLocalId,uniqueJdbcXAId,datasources,module);
    ServiceBuilder<?> serviceBuilder=serviceTarget.addService(DataSourceDeploymentService.SERVICE_NAME_BASE.append(deploymentName),dataSourceDeploymentService).addDependency(ConnectorServices.IRONJACAMAR_MDR,MetadataRepository.class,dataSourceDeploymentService.getMdrInjector()).addDependency(ConnectorServices.RESOURCE_ADAPTER_REGISTRY_SERVICE,ResourceAdapterDeploymentRegistry.class,dataSourceDeploymentService.getRegistryInjector()).addDependency(ConnectorServices.JNDI_STRATEGY_SERVICE,JndiStrategy.class,dataSourceDeploymentService.getJndiInjector()).addDependency(TxnServices.JBOSS_TXN_TRANSACTION_MANAGER,com.arjuna.ats.jbossatx.jta.TransactionManagerService.class,dataSourceDeploymentService.getTxmInjector()).addDependency(JDBCRARDeployService.NAME).addDependency(NamingService.SERVICE_NAME).addDependency(JDBCRARDeployService.NAME).setInitialMode(ServiceController.Mode.ACTIVE);
    if (uniqueJdbcLocalId != null) {
      serviceBuilder.addOptionalDependencies(ConnectorServices.RESOURCE_ADAPTER_SERVICE_PREFIX.append(uniqueJdbcLocalId));
      serviceBuilder.addOptionalDependencies(ConnectorServices.RESOURCE_ADAPTER_XML_SERVICE_PREFIX.append(uniqueJdbcLocalId));
    }
 else     if (uniqueJdbcXAId != null) {
      serviceBuilder.addOptionalDependencies(ConnectorServices.RESOURCE_ADAPTER_SERVICE_PREFIX.append(uniqueJdbcXAId));
      serviceBuilder.addOptionalDependencies(ConnectorServices.RESOURCE_ADAPTER_XML_SERVICE_PREFIX.append(uniqueJdbcXAId));
    }
    serviceBuilder.install();
  }
}
