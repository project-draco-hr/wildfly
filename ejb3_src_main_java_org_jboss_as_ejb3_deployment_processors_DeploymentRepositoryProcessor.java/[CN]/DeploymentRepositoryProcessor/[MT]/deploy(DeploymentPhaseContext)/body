{
  final DeploymentUnit deploymentUnit=phaseContext.getDeploymentUnit();
  final EEModuleDescription eeModuleDescription=deploymentUnit.getAttachment(Attachments.EE_MODULE_DESCRIPTION);
  final Module module=deploymentUnit.getAttachment(org.jboss.as.server.deployment.Attachments.MODULE);
  if (eeModuleDescription == null) {
    return;
  }
  String applicationName=eeModuleDescription.getEarApplicationName();
  applicationName=applicationName == null ? "" : applicationName;
  final DeploymentModuleIdentifier identifier=new DeploymentModuleIdentifier(applicationName,eeModuleDescription.getModuleName(),eeModuleDescription.getDistinctName());
  final Collection<ComponentDescription> componentDescriptions=eeModuleDescription.getComponentDescriptions();
  final Map<String,EjbDeploymentInformation> deploymentInformationMap=new HashMap<String,EjbDeploymentInformation>();
  final Set<ServiceName> componentStartServices=new HashSet<ServiceName>();
  final Map<ServiceName,InjectedValue<?>> injectedValues=new HashMap<ServiceName,InjectedValue<?>>();
  for (  final ComponentDescription component : componentDescriptions) {
    if (component instanceof EJBComponentDescription) {
      final EJBComponentDescription ejbComponentDescription=(EJBComponentDescription)component;
      componentStartServices.add(component.getStartServiceName());
      final InjectedValue<EJBComponent> componentInjectedValue=new InjectedValue<EJBComponent>();
      injectedValues.put(component.getCreateServiceName(),componentInjectedValue);
      final Map<String,InjectedValue<ComponentView>> remoteViews=new HashMap<String,InjectedValue<ComponentView>>();
      final Map<String,InjectedValue<ComponentView>> localViews=new HashMap<String,InjectedValue<ComponentView>>();
      for (      final ViewDescription view : ejbComponentDescription.getViews()) {
        boolean remoteView=false;
        if (view instanceof EJBViewDescription) {
          final MethodIntf viewType=((EJBViewDescription)view).getMethodIntf();
          if (viewType == MethodIntf.HOME || viewType == MethodIntf.REMOTE) {
            remoteView=true;
          }
        }
        final InjectedValue<ComponentView> componentViewInjectedValue=new InjectedValue<ComponentView>();
        if (remoteView) {
          remoteViews.put(view.getViewClassName(),componentViewInjectedValue);
        }
 else {
          localViews.put(view.getViewClassName(),componentViewInjectedValue);
        }
        injectedValues.put(view.getServiceName(),componentViewInjectedValue);
      }
      final InjectedValue<EjbIIOPService> iorFactory=new InjectedValue<EjbIIOPService>();
      if (ejbComponentDescription.isExposedViaIiop()) {
        injectedValues.put(ejbComponentDescription.getServiceName().append(EjbIIOPService.SERVICE_NAME),iorFactory);
      }
      final EjbDeploymentInformation info=new EjbDeploymentInformation(ejbComponentDescription.getEJBName(),componentInjectedValue,remoteViews,localViews,module.getClassLoader(),iorFactory);
      deploymentInformationMap.put(ejbComponentDescription.getEJBName(),info);
    }
  }
  final StartupCountdown countdown=deploymentUnit.getAttachment(Attachments.STARTUP_COUNTDOWN);
  final ModuleDeployment deployment=new ModuleDeployment(identifier,deploymentInformationMap,countdown);
  ServiceName moduleDeploymentService=deploymentUnit.getServiceName().append(ModuleDeployment.SERVICE_NAME);
  final ServiceBuilder<ModuleDeployment> builder=phaseContext.getServiceTarget().addService(moduleDeploymentService,deployment);
  for (  Map.Entry<ServiceName,InjectedValue<?>> entry : injectedValues.entrySet()) {
    builder.addDependency(entry.getKey(),(InjectedValue<Object>)entry.getValue());
  }
  builder.addDependency(DeploymentRepository.SERVICE_NAME,DeploymentRepository.class,deployment.getDeploymentRepository());
  builder.install();
  final ModuleDeployment.ModuleDeploymentStartService deploymentStart=new ModuleDeployment.ModuleDeploymentStartService(identifier,countdown);
  final ServiceBuilder<Void> startBuilder=phaseContext.getServiceTarget().addService(deploymentUnit.getServiceName().append(ModuleDeployment.START_SERVICE_NAME),deploymentStart);
  startBuilder.addDependencies(componentStartServices);
  startBuilder.addDependency(moduleDeploymentService);
  startBuilder.addDependency(DeploymentRepository.SERVICE_NAME,DeploymentRepository.class,deploymentStart.getDeploymentRepository());
  startBuilder.install();
}
