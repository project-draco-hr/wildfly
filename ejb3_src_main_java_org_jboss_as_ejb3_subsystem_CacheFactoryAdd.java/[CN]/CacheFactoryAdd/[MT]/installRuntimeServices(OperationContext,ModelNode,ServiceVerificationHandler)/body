{
  String name=model.require(EJB3SubsystemModel.NAME).asString();
  String passivationStore=model.hasDefined(EJB3SubsystemModel.PASSIVATION_STORE) ? model.get(EJB3SubsystemModel.PASSIVATION_STORE).asString() : null;
  Set<String> aliases=new HashSet<String>();
  if (model.hasDefined(EJB3SubsystemModel.ALIASES)) {
    for (    ModelNode alias : model.get(EJB3SubsystemModel.ALIASES).asList()) {
      aliases.add(alias.asString());
    }
  }
  ServiceTarget target=context.getServiceTarget();
  ServiceBuilder<?> builder=(passivationStore != null) ? new GroupAwareCacheFactoryService<Serializable,Cacheable<Serializable>>(name,aliases).build(target,passivationStore) : new NonPassivatingCacheFactoryService<Serializable,Cacheable<Serializable>>(name,aliases).build(target);
  if (verificationHandler != null) {
    builder.addListener(verificationHandler);
  }
  ServiceController<?> controller=builder.setInitialMode(ServiceController.Mode.ON_DEMAND).install();
  if (passivationStore != null) {
    InjectedValue<String> clusterName=new InjectedValue<String>();
    ServiceController<?> clusterNameController=target.addService(ClusteredBackingCacheEntryStoreSourceService.getCacheFactoryClusterNameServiceName(name),new ValueService<String>(clusterName)).addDependency(ClusteredBackingCacheEntryStoreSourceService.getPassivationStoreClusterNameServiceName(passivationStore),String.class,clusterName).setInitialMode(ServiceController.Mode.ON_DEMAND).install();
    return Arrays.<ServiceController<?>>asList(controller,clusterNameController);
  }
  return Collections.<ServiceController<?>>singleton(controller);
}
