{
  final String name=PathAddress.pathAddress(operation.get(ModelDescriptionConstants.ADDRESS)).getLastElement().getValue();
  ModelNode passivationStoreModel=CacheFactoryResourceDefinition.PASSIVATION_STORE.resolveModelAttribute(context,model);
  String passivationStore=passivationStoreModel.isDefined() ? passivationStoreModel.asString() : null;
  final Collection<String> unwrappedAliasValues=CacheFactoryResourceDefinition.ALIASES.unwrap(context,model);
  final Set<String> aliases=unwrappedAliasValues != null ? new HashSet<String>(unwrappedAliasValues) : Collections.EMPTY_SET;
  ServiceTarget target=context.getServiceTarget();
  ServiceBuilder<?> builder=(passivationStore != null) ? new GroupAwareCacheFactoryService<Serializable,Cacheable<Serializable>>(name,aliases).build(target,passivationStore) : new NonPassivatingCacheFactoryService<Serializable,Cacheable<Serializable>>(name,aliases).build(target);
  if (verificationHandler != null) {
    builder.addListener(verificationHandler);
  }
  ServiceController<?> controller=builder.setInitialMode(ServiceController.Mode.ON_DEMAND).install();
  if (passivationStore != null) {
    InjectedValue<String> clusterName=new InjectedValue<String>();
    final ServiceBuilder<String> passivationBuilder=target.addService(ClusteredBackingCacheEntryStoreSourceService.getCacheFactoryClusterNameServiceName(name),new ValueService<String>(clusterName)).addDependency(ClusteredBackingCacheEntryStoreSourceService.getPassivationStoreClusterNameServiceName(passivationStore),String.class,clusterName).setInitialMode(ServiceController.Mode.ON_DEMAND);
    if (verificationHandler != null) {
      passivationBuilder.addListener(verificationHandler);
    }
    ServiceController<?> clusterNameController=passivationBuilder.install();
    return Arrays.asList(controller,clusterNameController);
  }
  return Collections.<ServiceController<?>>singleton(controller);
}
