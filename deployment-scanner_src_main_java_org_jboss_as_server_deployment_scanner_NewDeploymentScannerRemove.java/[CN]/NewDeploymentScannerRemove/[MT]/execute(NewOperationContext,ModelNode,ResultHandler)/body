{
  final ModelNode address=operation.require(ADDRESS);
  final String name=address.get(address.asInt() - 1).asString();
  final ModelNode subModel=new ModelNode();
  final ModelNode compensatingOperation=new ModelNode();
  compensatingOperation.get(OP).set(ADD);
  compensatingOperation.get(OP_ADDR).set(address);
  compensatingOperation.get(REQUEST_PROPERTIES,CommonAttributes.PATH).set(subModel.get(CommonAttributes.PATH));
  compensatingOperation.get(REQUEST_PROPERTIES,CommonAttributes.SCAN_ENABLED).set(subModel.get(CommonAttributes.SCAN_ENABLED));
  compensatingOperation.get(REQUEST_PROPERTIES,CommonAttributes.SCAN_INTERVAL).set(subModel.get(CommonAttributes.SCAN_INTERVAL));
  compensatingOperation.get(REQUEST_PROPERTIES,CommonAttributes.RELATIVE_TO).set(subModel.get(CommonAttributes.RELATIVE_TO));
  if (context instanceof NewRuntimeOperationContext) {
    final NewRuntimeOperationContext runtimeContext=(NewRuntimeOperationContext)context;
    final ServiceController<?> controller=runtimeContext.getServiceRegistry().getService(DeploymentScannerService.getServiceName(name));
    if (controller != null) {
      controller.setMode(Mode.REMOVE);
    }
  }
  resultHandler.handleResultComplete(compensatingOperation);
  return Cancellable.NULL;
}
