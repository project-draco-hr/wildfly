{
  FileUtils.deleteDirectory(WORK_DIR);
  WORK_DIR.mkdirs();
  Utils.createKeyMaterial(WORK_DIR);
  TRACE_SECURITY.setup(managementClient,null);
  SecurityDomainsSetup.INSTANCE.setup(managementClient,null);
  final ModelControllerClient client=managementClient.getControllerClient();
  ModelNode operation=createOpNode("core-service=management/security-realm=" + HTTPS_REALM,ModelDescriptionConstants.ADD);
  Utils.applyUpdate(operation,client);
  operation=createOpNode("core-service=management/security-realm=" + HTTPS_REALM + "/authentication=truststore",ModelDescriptionConstants.ADD);
  operation.get("keystore-path").set(SERVER_TRUSTSTORE_FILE.getAbsolutePath());
  operation.get("keystore-password").set(SecurityTestConstants.KEYSTORE_PASSWORD);
  Utils.applyUpdate(operation,client);
  operation=createOpNode("core-service=management/security-realm=" + HTTPS_REALM + "/server-identity=ssl",ModelDescriptionConstants.ADD);
  operation.get(PROTOCOL).set("TLSv1");
  operation.get("keystore-path").set(SERVER_KEYSTORE_FILE.getAbsolutePath());
  operation.get("keystore-password").set(SecurityTestConstants.KEYSTORE_PASSWORD);
  Utils.applyUpdate(operation,client);
  LOGGER.info("*** restarting server");
  containerController.stop(CONTAINER);
  containerController.start(CONTAINER);
  operation=createOpNode("subsystem=undertow/server=default-server/https-listener=" + HTTPS,ModelDescriptionConstants.ADD);
  operation.get("socket-binding").set(HTTPS);
  operation.get("security-realm").set(HTTPS_REALM);
  Utils.applyUpdate(operation,client);
  addHttpsConnector("NOT_REQUESTED",HTTPS_NAME_VERIFY_NOT_REQUESTED,HTTPS_PORT_VERIFY_FALSE,client);
  addHttpsConnector("REQUESTED",HTTPS_NAME_VERIFY_REQUESTED,HTTPS_PORT_VERIFY_WANT,client);
  addHttpsConnector("REQUIRED",HTTPS_NAME_VERIFY_REQUIRED,HTTPS_PORT_VERIFY_TRUE,client);
}
