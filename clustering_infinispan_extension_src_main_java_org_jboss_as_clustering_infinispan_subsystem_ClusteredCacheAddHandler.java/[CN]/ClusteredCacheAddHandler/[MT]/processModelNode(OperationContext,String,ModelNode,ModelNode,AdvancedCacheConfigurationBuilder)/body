{
  super.processModelNode(context,containerName,containerModel,cache,configBuilder);
  ConfigurationBuilder builder=configBuilder.getConfigurationBuilder();
  final Mode mode=Mode.valueOf(ClusteredCacheResourceDefinition.MODE.resolveModelAttribute(context,cache).asString());
  final int queueSize=ClusteredCacheResourceDefinition.QUEUE_SIZE.resolveModelAttribute(context,cache).asInt();
  CacheMode cacheMode=mode.apply(this.mode);
  builder.clustering().cacheMode(cacheMode);
  if (cacheMode.isSynchronous()) {
    builder.clustering().sync().replTimeout(ClusteredCacheResourceDefinition.REMOTE_TIMEOUT.resolveModelAttribute(context,cache).asLong());
  }
 else {
    builder.clustering().async().useReplQueue(queueSize > 0).replQueueMaxElements(queueSize).replQueueInterval(ClusteredCacheResourceDefinition.QUEUE_FLUSH_INTERVAL.resolveModelAttribute(context,cache).asLong());
    if (ClusteredCacheResourceDefinition.ASYNC_MARSHALLING.resolveModelAttribute(context,cache).asBoolean()) {
      builder.clustering().async().asyncMarshalling();
    }
 else {
      builder.clustering().async().syncMarshalling();
    }
  }
}
