{
  final ModelNode opAddr=operation.require(OP_ADDR);
  final ModelNode model=context.getSubModel();
  final ModelNode existingFile=model.get(CommonAttributes.FILE);
  final ModelNode compensatingOperation=new ModelNode();
  compensatingOperation.get(OP).set(OPERATION_NAME);
  compensatingOperation.get(OP_ADDR).set(opAddr);
  compensatingOperation.get(CommonAttributes.PATH).set(existingFile.get(CommonAttributes.PATH));
  existingFile.get(CommonAttributes.PATH).set(operation.get(CommonAttributes.PATH));
  if (existingFile.hasDefined(CommonAttributes.RELATIVE_TO)) {
    compensatingOperation.get(CommonAttributes.RELATIVE_TO).set(existingFile.get(CommonAttributes.RELATIVE_TO));
    existingFile.get(CommonAttributes.RELATIVE_TO).set(operation.get(CommonAttributes.RELATIVE_TO));
  }
  final PathAddress address=PathAddress.pathAddress(operation.require(OP_ADDR));
  final String name=address.getLastElement().getValue();
  if (context.getRuntimeContext() != null) {
    context.getRuntimeContext().setRuntimeTask(new RuntimeTask(){
      public void execute(      RuntimeTaskContext context) throws OperationFailedException {
        final ServiceRegistry serviceRegistry=context.getServiceRegistry();
        final ServiceTarget serviceTarget=context.getServiceTarget();
        final ServiceController<?> controller=serviceRegistry.getService(LogServices.handlerFileName(name));
        if (controller != null) {
          controller.addListener(new AbstractServiceListener<Object>(){
            public void listenerAdded(            ServiceController<?> controller){
              controller.setMode(ServiceController.Mode.REMOVE);
            }
            public void serviceRemoved(            ServiceController<?> controller){
              installService(operation,serviceTarget,name,resultHandler);
            }
          }
);
        }
 else {
          installService(operation,serviceTarget,name,resultHandler);
        }
      }
    }
);
  }
 else {
    resultHandler.handleResultComplete();
  }
  return new BasicOperationResult(compensatingOperation);
}
