{
  final PathAddress address=PathAddress.pathAddress(operation.get(OP_ADDR));
  final String name=address.getLastElement().getValue();
  protocolStackSanityCheck(name,model);
  List<Property> orderedProtocols=getOrderedProtocolPropertyList(model);
  ModelNode transport=model.get(ModelKeys.TRANSPORT,ModelKeys.TRANSPORT_NAME);
  ModelNode resolvedValue=null;
  final String type=(resolvedValue=TransportResourceDefinition.TYPE.resolveModelAttribute(context,transport)).isDefined() ? resolvedValue.asString() : null;
  final boolean shared=TransportResourceDefinition.SHARED.resolveModelAttribute(context,transport).asBoolean();
  final String machine=(resolvedValue=TransportResourceDefinition.MACHINE.resolveModelAttribute(context,transport)).isDefined() ? resolvedValue.asString() : null;
  final String rack=(resolvedValue=TransportResourceDefinition.RACK.resolveModelAttribute(context,transport)).isDefined() ? resolvedValue.asString() : null;
  final String site=(resolvedValue=TransportResourceDefinition.SITE.resolveModelAttribute(context,transport)).isDefined() ? resolvedValue.asString() : null;
  final String timerExecutor=(resolvedValue=TransportResourceDefinition.TIMER_EXECUTOR.resolveModelAttribute(context,transport)).isDefined() ? resolvedValue.asString() : null;
  final String threadFactory=(resolvedValue=TransportResourceDefinition.THREAD_FACTORY.resolveModelAttribute(context,transport)).isDefined() ? resolvedValue.asString() : null;
  final String diagnosticsSocketBinding=(resolvedValue=TransportResourceDefinition.DIAGNOSTICS_SOCKET_BINDING.resolveModelAttribute(context,transport)).isDefined() ? resolvedValue.asString() : null;
  final String defaultExecutor=(resolvedValue=TransportResourceDefinition.DEFAULT_EXECUTOR.resolveModelAttribute(context,transport)).isDefined() ? resolvedValue.asString() : null;
  final String oobExecutor=(resolvedValue=TransportResourceDefinition.OOB_EXECUTOR.resolveModelAttribute(context,transport)).isDefined() ? resolvedValue.asString() : null;
  final String transportSocketBinding=(resolvedValue=TransportResourceDefinition.SOCKET_BINDING.resolveModelAttribute(context,transport)).isDefined() ? resolvedValue.asString() : null;
  Transport transportConfig=new Transport(type);
  transportConfig.setShared(shared);
  transportConfig.setTopology(site,rack,machine);
  initProtocolProperties(context,transport,transportConfig);
  Relay relayConfig=null;
  List<Map.Entry<String,Injector<ChannelFactory>>> stacks=new LinkedList<Map.Entry<String,Injector<ChannelFactory>>>();
  if (model.hasDefined(ModelKeys.RELAY)) {
    final ModelNode relay=model.get(ModelKeys.RELAY,ModelKeys.RELAY_NAME);
    final String siteName=RelayResourceDefinition.SITE.resolveModelAttribute(context,relay).asString();
    relayConfig=new Relay(siteName);
    initProtocolProperties(context,relay,relayConfig);
    if (relay.hasDefined(ModelKeys.REMOTE_SITE)) {
      List<RemoteSiteConfiguration> remoteSites=relayConfig.getRemoteSites();
      for (      Property remoteSiteProperty : relay.get(ModelKeys.REMOTE_SITE).asPropertyList()) {
        final String remoteSiteName=remoteSiteProperty.getName();
        final ModelNode remoteSite=remoteSiteProperty.getValue();
        final String cluster=RemoteSiteResourceDefinition.CLUSTER.resolveModelAttribute(context,remoteSite).asString();
        final String stack=RemoteSiteResourceDefinition.STACK.resolveModelAttribute(context,remoteSite).asString();
        final InjectedValue<ChannelFactory> channelFactory=new InjectedValue<ChannelFactory>();
        remoteSites.add(new RemoteSite(remoteSiteName,cluster,channelFactory));
        stacks.add(new AbstractMap.SimpleImmutableEntry<String,Injector<ChannelFactory>>(stack,channelFactory));
      }
    }
  }
  ProtocolStack stackConfig=new ProtocolStack(name,transportConfig,relayConfig);
  List<Map.Entry<Protocol,String>> protocolSocketBindings=new ArrayList<Map.Entry<Protocol,String>>(orderedProtocols.size());
  for (  Property protocolProperty : orderedProtocols) {
    ModelNode protocol=protocolProperty.getValue();
    final String protocolType=(resolvedValue=ProtocolResourceDefinition.TYPE.resolveModelAttribute(context,protocol)).isDefined() ? resolvedValue.asString() : null;
    Protocol protocolConfig=new Protocol(protocolType);
    initProtocolProperties(context,protocol,protocolConfig);
    stackConfig.getProtocols().add(protocolConfig);
    final String protocolSocketBinding=(resolvedValue=ProtocolResourceDefinition.SOCKET_BINDING.resolveModelAttribute(context,protocol)).isDefined() ? resolvedValue.asString() : null;
    protocolSocketBindings.add(new AbstractMap.SimpleImmutableEntry<Protocol,String>(protocolConfig,protocolSocketBinding));
  }
  ServiceController<ChannelFactory> cfsController=installChannelFactoryService(context.getServiceTarget(),name,diagnosticsSocketBinding,defaultExecutor,oobExecutor,timerExecutor,threadFactory,transportSocketBinding,protocolSocketBindings,transportConfig,stackConfig,stacks,verificationHandler);
  if (newControllers != null) {
    newControllers.add(cfsController);
  }
}
