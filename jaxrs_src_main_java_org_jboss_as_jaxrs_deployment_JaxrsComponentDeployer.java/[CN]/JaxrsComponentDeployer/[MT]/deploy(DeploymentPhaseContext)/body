{
  final DeploymentUnit deploymentUnit=phaseContext.getDeploymentUnit();
  final Module module=deploymentUnit.getAttachment(org.jboss.as.server.deployment.Attachments.MODULE);
  if (module == null) {
    return;
  }
  final ResteasyDeploymentData resteasy=deploymentUnit.getAttachment(JaxrsAttachments.RESTEASY_DEPLOYMENT_DATA);
  if (resteasy == null) {
    return;
  }
  if (!resteasy.isScanResources())   return;
  final EEModuleDescription moduleDescription=deploymentUnit.getAttachment(Attachments.EE_MODULE_DESCRIPTION);
  if (moduleDescription == null) {
    return;
  }
  final ClassLoader loader=module.getClassLoader();
  for (  final ComponentDescription component : moduleDescription.getComponentDescriptions()) {
    Class<?> componentClass=null;
    try {
      componentClass=loader.loadClass(component.getComponentClassName());
    }
 catch (    ClassNotFoundException e) {
      throw new DeploymentUnitProcessingException(e);
    }
    if (!GetRestful.isRootResource(componentClass))     continue;
    if (component instanceof SessionBeanComponentDescription) {
      if (component instanceof StatefulComponentDescription) {
        JAXRS_LOGGER.debugf("Stateful session bean %s is being used as a JAX-RS endpoint, this is not recommended",component.getComponentName());
        if (WeldDeploymentMarker.isPartOfWeldDeployment(deploymentUnit)) {
          continue;
        }
      }
      Class[] jaxrsType=GetRestful.getSubResourceClasses(componentClass);
      final String jndiName;
      if (component.getViews().size() == 1) {
        jndiName="java:app/" + moduleDescription.getModuleName() + "/"+ component.getComponentName();
      }
 else {
        boolean found=false;
        String foundType=null;
        for (        final ViewDescription view : component.getViews()) {
          for (          Class subResource : jaxrsType) {
            if (view.getViewClassName().equals(subResource.getName())) {
              foundType=subResource.getName();
              found=true;
              break;
            }
          }
          if (found) {
            break;
          }
        }
        if (!found) {
          throw JaxrsLogger.JAXRS_LOGGER.typeNameNotAnEjbView(Arrays.asList(jaxrsType),component.getComponentName());
        }
        jndiName="java:app/" + moduleDescription.getModuleName() + "/"+ component.getComponentName()+ "!"+ foundType;
      }
      JAXRS_LOGGER.debugf("Found JAX-RS Managed Bean: %s local jndi jaxRsTypeName: %s",component.getComponentClassName(),jndiName);
      StringBuilder buf=new StringBuilder();
      buf.append(jndiName).append(";").append(component.getComponentClassName()).append(";").append("true");
      resteasy.getScannedJndiComponentResources().add(buf.toString());
      resteasy.getScannedResourceClasses().remove(component.getComponentClassName());
    }
 else     if (component instanceof ManagedBeanComponentDescription) {
      String jndiName="java:app/" + moduleDescription.getModuleName() + "/"+ component.getComponentName();
      JAXRS_LOGGER.debugf("Found JAX-RS Managed Bean: %s local jndi name: %s",component.getComponentClassName(),jndiName);
      StringBuilder buf=new StringBuilder();
      buf.append(jndiName).append(";").append(component.getComponentClassName()).append(";").append("true");
      resteasy.getScannedJndiComponentResources().add(buf.toString());
      resteasy.getScannedResourceClasses().remove(component.getComponentClassName());
    }
  }
}
