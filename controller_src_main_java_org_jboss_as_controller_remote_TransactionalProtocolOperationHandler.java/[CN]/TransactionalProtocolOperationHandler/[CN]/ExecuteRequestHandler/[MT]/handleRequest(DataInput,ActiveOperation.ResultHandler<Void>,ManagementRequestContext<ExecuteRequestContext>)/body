{
  ControllerLogger.MGMT_OP_LOGGER.tracef("Handling transactional ExecuteRequest for %d",context.getOperationId());
  final ModelNode operation=new ModelNode();
  ProtocolUtils.expectHeader(input,ModelControllerProtocol.PARAM_OPERATION);
  operation.readExternal(input);
  ProtocolUtils.expectHeader(input,ModelControllerProtocol.PARAM_INPUTSTREAMS_LENGTH);
  final int attachmentsLength=input.readInt();
  final Subject subject;
  final Boolean readSubject=channelAssociation.getAttachments().getAttachment(TransactionalProtocolClient.SEND_SUBJECT);
  if (readSubject != null && readSubject) {
    subject=readSubject(input);
  }
 else {
    subject=new Subject();
  }
  final PrivilegedAction<Void> action=new PrivilegedAction<Void>(){
    @Override public Void run(){
      doExecute(operation,attachmentsLength,context);
      return null;
    }
  }
;
  final ExecuteRequestContext executeRequestContext=context.getAttachment();
  executeRequestContext.initialize(context);
  context.executeAsync(new AsyncTask<TransactionalProtocolOperationHandler.ExecuteRequestContext>(){
    @Override public void execute(    final ManagementRequestContext<ExecuteRequestContext> context) throws Exception {
      AccessController.doPrivileged(new PrivilegedAction<Void>(){
        @Override public Void run(){
          AccessAuditContext.doAs(subject,action);
          return null;
        }
      }
);
    }
  }
);
}
