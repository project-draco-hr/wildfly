{
  final CountDownLatch latch=new CountDownLatch(1);
  final IOExceptionHolder exceptionHolder=new IOExceptionHolder();
  context.executeAsync(new AsyncTask<TransactionalProtocolOperationHandler.ExecuteRequestContext>(){
    @Override public void execute(    final ManagementRequestContext<ExecuteRequestContext> context) throws Exception {
      FlushableDataOutput output=null;
      try {
        MGMT_OP_LOGGER.tracef("Transmitting response for %d",context.getOperationId());
        final ManagementResponseHeader header=ManagementResponseHeader.create(context.getRequestHeader());
        output=context.writeMessage(header);
        output.writeByte(responseType);
        response.writeExternal(output);
        output.writeByte(ManagementProtocol.RESPONSE_END);
        output.close();
      }
 catch (      IOException toCache) {
        exceptionHolder.exception=toCache;
      }
 finally {
        StreamUtils.safeClose(output);
        latch.countDown();
      }
    }
  }
,false);
  try {
    latch.await();
  }
 catch (  InterruptedException e) {
    Thread.currentThread().interrupt();
  }
  if (exceptionHolder.exception != null) {
    throw exceptionHolder.exception;
  }
}
