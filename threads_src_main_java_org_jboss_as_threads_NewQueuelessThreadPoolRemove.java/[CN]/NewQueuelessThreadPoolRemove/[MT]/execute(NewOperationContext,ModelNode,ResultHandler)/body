{
  final ModelNode model=context.getSubModel();
  final String name=model.require(NAME).asString();
  if (context instanceof NewRuntimeOperationContext) {
    final NewRuntimeOperationContext runtimeContext=(NewRuntimeOperationContext)context;
    final ServiceController<?> controller=runtimeContext.getServiceRegistry().getService(ThreadsServices.threadFactoryName(name));
    if (controller == null) {
      resultHandler.handleResultComplete(null);
      return Cancellable.NULL;
    }
 else {
      controller.setMode(Mode.REMOVE);
    }
  }
  final ModelNode compensating=new ModelNode();
  compensating.get(OP_ADDR).set(operation.require(ADDRESS));
  compensating.get(OP).set(ADD);
  compensating.get(NAME).set(name);
  if (model.has(THREAD_FACTORY)) {
    compensating.get(THREAD_FACTORY).set(model.get(THREAD_FACTORY));
  }
  if (model.has(PROPERTIES)) {
    compensating.get(PROPERTIES).set(model.get(PROPERTIES));
  }
  if (model.has(MAX_THREADS_COUNT)) {
    compensating.get(MAX_THREADS_COUNT).set(model.get(MAX_THREADS_COUNT));
  }
  if (model.has(MAX_THREADS_PER_CPU)) {
    compensating.get(MAX_THREADS_PER_CPU).set(model.get(MAX_THREADS_PER_CPU));
  }
  if (model.has(KEEPALIVE_TIME_DURATION)) {
    compensating.get(KEEPALIVE_TIME_DURATION).set(model.get(KEEPALIVE_TIME_DURATION));
  }
  if (model.has(KEEPALIVE_TIME_UNIT)) {
    compensating.get(KEEPALIVE_TIME_UNIT).set(model.get(KEEPALIVE_TIME_UNIT));
  }
  if (model.has(BLOCKING)) {
    compensating.get(BLOCKING).set(model.get(BLOCKING));
  }
  if (model.has(HANDOFF_EXECUTOR)) {
    compensating.get(HANDOFF_EXECUTOR).set(model.get(HANDOFF_EXECUTOR));
  }
  resultHandler.handleResultComplete(compensating);
  return Cancellable.NULL;
}
