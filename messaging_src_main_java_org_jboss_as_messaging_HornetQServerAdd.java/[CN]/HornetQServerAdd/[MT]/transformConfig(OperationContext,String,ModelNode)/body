{
  Configuration configuration=new ConfigurationImpl();
  configuration.setName(serverName);
  configuration.setAllowAutoFailBack(ALLOW_FAILBACK.resolveModelAttribute(context,model).asBoolean());
  configuration.setEnabledAsyncConnectionExecution(ASYNC_CONNECTION_EXECUTION_ENABLED.resolveModelAttribute(context,model).asBoolean());
  configuration.setBackup(BACKUP.resolveModelAttribute(context,model).asBoolean());
  if (model.hasDefined(LIVE_CONNECTOR_REF.getName())) {
    configuration.setLiveConnectorName(LIVE_CONNECTOR_REF.resolveModelAttribute(context,model).asString());
  }
  configuration.setClustered(CLUSTERED.resolveModelAttribute(context,model).asBoolean());
  configuration.setClusterPassword(CLUSTER_PASSWORD.resolveModelAttribute(context,model).asString());
  configuration.setClusterUser(CLUSTER_USER.resolveModelAttribute(context,model).asString());
  configuration.setConnectionTTLOverride(CONNECTION_TTL_OVERRIDE.resolveModelAttribute(context,model).asInt());
  configuration.setCreateBindingsDir(CREATE_BINDINGS_DIR.resolveModelAttribute(context,model).asBoolean());
  configuration.setCreateJournalDir(CREATE_JOURNAL_DIR.resolveModelAttribute(context,model).asBoolean());
  configuration.setFailbackDelay(FAILBACK_DELAY.resolveModelAttribute(context,model).asLong());
  configuration.setFailoverOnServerShutdown(FAILOVER_ON_SHUTDOWN.resolveModelAttribute(context,model).asBoolean());
  configuration.setIDCacheSize(ID_CACHE_SIZE.resolveModelAttribute(context,model).asInt());
  configuration.setJMXDomain(JMX_DOMAIN.resolveModelAttribute(context,model).asString());
  configuration.setJMXManagementEnabled(JMX_MANAGEMENT_ENABLED.resolveModelAttribute(context,model).asBoolean());
  final JournalType journalType=JournalType.valueOf(JOURNAL_TYPE.resolveModelAttribute(context,model).asString());
  configuration.setJournalType(journalType);
  configuration.setJournalBufferSize_AIO(JOURNAL_BUFFER_SIZE.resolveModelAttribute(context,model).asInt(ConfigurationImpl.DEFAULT_JOURNAL_BUFFER_SIZE_AIO));
  configuration.setJournalBufferTimeout_AIO(JOURNAL_BUFFER_TIMEOUT.resolveModelAttribute(context,model).asInt(ConfigurationImpl.DEFAULT_JOURNAL_BUFFER_TIMEOUT_AIO));
  configuration.setJournalMaxIO_AIO(JOURNAL_MAX_IO.resolveModelAttribute(context,model).asInt(ConfigurationImpl.DEFAULT_JOURNAL_MAX_IO_AIO));
  configuration.setJournalBufferSize_NIO(JOURNAL_BUFFER_SIZE.resolveModelAttribute(context,model).asInt(ConfigurationImpl.DEFAULT_JOURNAL_BUFFER_SIZE_NIO));
  configuration.setJournalBufferTimeout_NIO(JOURNAL_BUFFER_TIMEOUT.resolveModelAttribute(context,model).asInt(ConfigurationImpl.DEFAULT_JOURNAL_BUFFER_TIMEOUT_NIO));
  configuration.setJournalMaxIO_NIO(JOURNAL_MAX_IO.resolveModelAttribute(context,model).asInt(ConfigurationImpl.DEFAULT_JOURNAL_MAX_IO_NIO));
  configuration.setJournalCompactMinFiles(JOURNAL_COMPACT_MIN_FILES.resolveModelAttribute(context,model).asInt());
  configuration.setJournalCompactPercentage(JOURNAL_COMPACT_PERCENTAGE.resolveModelAttribute(context,model).asInt());
  configuration.setJournalFileSize(JOURNAL_FILE_SIZE.resolveModelAttribute(context,model).asInt());
  configuration.setJournalMinFiles(JOURNAL_MIN_FILES.resolveModelAttribute(context,model).asInt());
  configuration.setJournalSyncNonTransactional(JOURNAL_SYNC_NON_TRANSACTIONAL.resolveModelAttribute(context,model).asBoolean());
  configuration.setJournalSyncTransactional(JOURNAL_SYNC_TRANSACTIONAL.resolveModelAttribute(context,model).asBoolean());
  configuration.setLogJournalWriteRate(LOG_JOURNAL_WRITE_RATE.resolveModelAttribute(context,model).asBoolean());
  configuration.setManagementAddress(SimpleString.toSimpleString(MANAGEMENT_ADDRESS.resolveModelAttribute(context,model).asString()));
  configuration.setManagementNotificationAddress(SimpleString.toSimpleString(MANAGEMENT_NOTIFICATION_ADDRESS.resolveModelAttribute(context,model).asString()));
  configuration.setMemoryMeasureInterval(MEMORY_MEASURE_INTERVAL.resolveModelAttribute(context,model).asLong());
  configuration.setMemoryWarningThreshold(MEMORY_WARNING_THRESHOLD.resolveModelAttribute(context,model).asInt());
  configuration.setMessageCounterEnabled(MESSAGE_COUNTER_ENABLED.resolveModelAttribute(context,model).asBoolean());
  configuration.setMessageCounterSamplePeriod(MESSAGE_COUNTER_SAMPLE_PERIOD.resolveModelAttribute(context,model).asInt());
  configuration.setMessageCounterMaxDayHistory(MESSAGE_COUNTER_MAX_DAY_HISTORY.resolveModelAttribute(context,model).asInt());
  configuration.setMessageExpiryScanPeriod(MESSAGE_EXPIRY_SCAN_PERIOD.resolveModelAttribute(context,model).asLong());
  configuration.setMessageExpiryThreadPriority(MESSAGE_EXPIRY_THREAD_PRIORITY.resolveModelAttribute(context,model).asInt());
  configuration.setJournalPerfBlastPages(PERF_BLAST_PAGES.resolveModelAttribute(context,model).asInt());
  configuration.setPersistDeliveryCountBeforeDelivery(PERSIST_DELIVERY_COUNT_BEFORE_DELIVERY.resolveModelAttribute(context,model).asBoolean());
  configuration.setPersistenceEnabled(PERSISTENCE_ENABLED.resolveModelAttribute(context,model).asBoolean());
  configuration.setPersistIDCache(PERSIST_ID_CACHE.resolveModelAttribute(context,model).asBoolean());
  configuration.setRunSyncSpeedTest(RUN_SYNC_SPEED_TEST.resolveModelAttribute(context,model).asBoolean());
  configuration.setScheduledThreadPoolMaxSize(SCHEDULED_THREAD_POOL_MAX_SIZE.resolveModelAttribute(context,model).asInt());
  configuration.setSecurityEnabled(SECURITY_ENABLED.resolveModelAttribute(context,model).asBoolean());
  configuration.setSecurityInvalidationInterval(SECURITY_INVALIDATION_INTERVAL.resolveModelAttribute(context,model).asLong());
  configuration.setServerDumpInterval(SERVER_DUMP_INTERVAL.resolveModelAttribute(context,model).asLong());
  configuration.setSharedStore(SHARED_STORE.resolveModelAttribute(context,model).asBoolean());
  configuration.setThreadPoolMaxSize(THREAD_POOL_MAX_SIZE.resolveModelAttribute(context,model).asInt());
  configuration.setTransactionTimeout(TRANSACTION_TIMEOUT.resolveModelAttribute(context,model).asLong());
  configuration.setTransactionTimeoutScanPeriod(TRANSACTION_TIMEOUT_SCAN_PERIOD.resolveModelAttribute(context,model).asLong());
  configuration.setWildcardRoutingEnabled(WILD_CARD_ROUTING_ENABLED.resolveModelAttribute(context,model).asBoolean());
  processAddressSettings(context,configuration,model);
  processSecuritySettings(context,configuration,model);
  GroupingHandlerAdd.addGroupingHandlerConfig(context,configuration,model);
  BroadcastGroupAdd.addBroadcastGroupConfigs(context,configuration,model);
  DiscoveryGroupAdd.addDiscoveryGroupConfigs(context,configuration,model);
  DivertAdd.addDivertConfigs(context,configuration,model);
  QueueAdd.addQueueConfigs(context,configuration,model);
  BridgeAdd.addBridgeConfigs(context,configuration,model);
  ClusterConnectionAdd.addClusterConnectionConfigs(context,configuration,model);
  ConnectorServiceAdd.addConnectorServiceConfigs(context,configuration,model);
  return configuration;
}
