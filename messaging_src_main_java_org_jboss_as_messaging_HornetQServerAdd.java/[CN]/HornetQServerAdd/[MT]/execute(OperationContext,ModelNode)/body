{
  final HornetQServerResource resource=new HornetQServerResource();
  context.addResource(PathAddress.EMPTY_ADDRESS,resource);
  final ModelNode model=resource.getModel();
  for (  final AttributeDefinition attributeDefinition : CommonAttributes.SIMPLE_ROOT_RESOURCE_ATTRIBUTES) {
    attributeDefinition.validateAndSet(operation,model);
  }
  ModelNode mceVal=model.get(MESSAGE_COUNTER_ENABLED.getName());
  if (mceVal.isDefined()) {
    ModelNode seVal=model.get(STATISTICS_ENABLED.getName());
    if (seVal.isDefined() && !seVal.equals(mceVal)) {
      throw MessagingLogger.ROOT_LOGGER.inconsistentStatisticsSettings(MESSAGE_COUNTER_ENABLED.getName(),STATISTICS_ENABLED.getName());
    }
    seVal.set(mceVal);
    mceVal.set(new ModelNode());
  }
  if (context.isNormalServer()) {
    context.addStep(new OperationStepHandler(){
      @Override public void execute(      OperationContext context,      ModelNode operation) throws OperationFailedException {
        final ModelNode model=Resource.Tools.readModel(resource);
        for (        String path : PathDefinition.PATHS.keySet()) {
          if (!model.get(ModelDescriptionConstants.PATH).hasDefined(path)) {
            PathAddress pathAddress=PathAddress.pathAddress(PathElement.pathElement(ModelDescriptionConstants.PATH,path));
            context.createResource(pathAddress);
          }
        }
        context.stepCompleted();
      }
    }
,OperationContext.Stage.MODEL);
    context.addStep(new OperationStepHandler(){
      public void execute(      OperationContext context,      ModelNode operation) throws OperationFailedException {
        final List<ServiceController<?>> controllers=new ArrayList<ServiceController<?>>();
        final ServiceVerificationHandler verificationHandler=new ServiceVerificationHandler();
        performRuntime(context,resource,verificationHandler,controllers);
        context.addStep(verificationHandler,OperationContext.Stage.VERIFY);
        context.completeStep(new OperationContext.RollbackHandler(){
          @Override public void handleRollback(          OperationContext context,          ModelNode operation){
            for (            ServiceController<?> controller : controllers) {
              context.removeService(controller.getName());
            }
          }
        }
);
      }
    }
,OperationContext.Stage.RUNTIME);
  }
  context.stepCompleted();
}
