{
  context.addStep(new OperationStepHandler(){
    @Override public void execute(    OperationContext context,    ModelNode operation) throws OperationFailedException {
      final ServiceTarget serviceTarget=context.getServiceTarget();
      final String serverName=PathAddress.pathAddress(operation.require(OP_ADDR)).getLastElement().getValue();
      final ModelNode model=Resource.Tools.readModel(resource);
      final Configuration configuration=transformConfig(context,serverName,model);
      String bindingsPath=getPath(DEFAULT_BINDINGS_DIR,PATH.resolveModelAttribute(context,model.get(ModelDescriptionConstants.PATH,BINDINGS_DIRECTORY)));
      String bindingsRelativeToPath=getRelativeToPath(model.get(ModelDescriptionConstants.PATH,BINDINGS_DIRECTORY));
      String journalPath=getPath(DEFAULT_JOURNAL_DIR,PATH.resolveModelAttribute(context,model.get(ModelDescriptionConstants.PATH,JOURNAL_DIRECTORY)));
      String journalRelativeToPath=getRelativeToPath(model.get(ModelDescriptionConstants.PATH,JOURNAL_DIRECTORY));
      String largeMessagePath=getPath(DEFAULT_LARGE_MESSAGE_DIR,PATH.resolveModelAttribute(context,model.get(ModelDescriptionConstants.PATH,LARGE_MESSAGES_DIRECTORY)));
      String largeMessageRelativeToPath=getRelativeToPath(model.get(ModelDescriptionConstants.PATH,LARGE_MESSAGES_DIRECTORY));
      String pagingPath=getPath(DEFAULT_PAGING_DIR,PATH.resolveModelAttribute(context,model.get(ModelDescriptionConstants.PATH,PAGING_DIRECTORY)));
      String pagingRelativeToPath=getRelativeToPath(model.get(ModelDescriptionConstants.PATH,PAGING_DIRECTORY));
      final HornetQService hqService=new HornetQService(new PathConfig(bindingsPath,bindingsRelativeToPath,journalPath,journalRelativeToPath,largeMessagePath,largeMessageRelativeToPath,pagingPath,pagingRelativeToPath));
      hqService.setConfiguration(configuration);
      ServiceName hqServiceName=MessagingServices.getHornetQServiceName(serverName);
      final ServiceBuilder<HornetQServer> serviceBuilder=serviceTarget.addService(hqServiceName,hqService).addDependency(DependencyType.OPTIONAL,ServiceName.JBOSS.append("mbean","server"),MBeanServer.class,hqService.getMBeanServer());
      serviceBuilder.addDependency(PathManagerService.SERVICE_NAME,PathManager.class,hqService.getPathManagerInjector());
      String domain=SECURITY_DOMAIN.resolveModelAttribute(context,model).asString();
      serviceBuilder.addDependency(DependencyType.REQUIRED,SecurityDomainService.SERVICE_NAME.append(domain),SecurityDomainContext.class,hqService.getSecurityDomainContextInjector());
      final Set<String> socketBindings=new HashSet<String>();
      TransportConfigOperationHandlers.processAcceptors(configuration,model,socketBindings);
      for (      final String socketBinding : socketBindings) {
        final ServiceName socketName=SocketBinding.JBOSS_BINDING_NAME.append(socketBinding);
        serviceBuilder.addDependency(socketName,SocketBinding.class,hqService.getSocketBindingInjector(socketBinding));
      }
      final Set<String> outboundSocketBindings=new HashSet<String>();
      TransportConfigOperationHandlers.processConnectors(configuration,model,outboundSocketBindings);
      for (      final String outboundSocketBinding : outboundSocketBindings) {
        final ServiceName outboundSocketName=OutboundSocketBinding.OUTBOUND_SOCKET_BINDING_BASE_SERVICE_NAME.append(outboundSocketBinding);
        serviceBuilder.addDependency(DependencyType.OPTIONAL,outboundSocketName,OutboundSocketBinding.class,hqService.getOutboundSocketBindingInjector(outboundSocketBinding));
        if (!socketBindings.contains(outboundSocketBinding)) {
          final ServiceName socketName=SocketBinding.JBOSS_BINDING_NAME.append(outboundSocketBinding);
          serviceBuilder.addDependency(DependencyType.OPTIONAL,socketName,SocketBinding.class,hqService.getSocketBindingInjector(outboundSocketBinding));
        }
      }
      final List<BroadcastGroupConfiguration> broadcastGroupConfigurations=configuration.getBroadcastGroupConfigurations();
      final Map<String,DiscoveryGroupConfiguration> discoveryGroupConfigurations=configuration.getDiscoveryGroupConfigurations();
      if (broadcastGroupConfigurations != null) {
        for (        final BroadcastGroupConfiguration config : broadcastGroupConfigurations) {
          final String name=config.getName();
          final ServiceName groupBinding=GroupBindingService.getBroadcastBaseServiceName(hqServiceName).append(name);
          serviceBuilder.addDependency(groupBinding,SocketBinding.class,hqService.getGroupBindingInjector("broadcast" + name));
        }
      }
      if (discoveryGroupConfigurations != null) {
        for (        final DiscoveryGroupConfiguration config : discoveryGroupConfigurations.values()) {
          final String name=config.getName();
          final ServiceName groupBinding=GroupBindingService.getDiscoveryBaseServiceName(hqServiceName).append(name);
          serviceBuilder.addDependency(groupBinding,SocketBinding.class,hqService.getGroupBindingInjector("discovery" + name));
        }
      }
      serviceBuilder.addListener(verificationHandler);
      ServiceController<HornetQServer> hqServerServiceController=serviceBuilder.install();
      resource.setHornetQServerServiceController(hqServerServiceController);
      newControllers.add(hqServerServiceController);
      newControllers.add(JMSService.addService(serviceTarget,hqServiceName,verificationHandler));
      context.completeStep();
    }
  }
,OperationContext.Stage.RUNTIME);
}
