{
  final String fieldName=fieldInfo.name();
  final Field field;
  try {
    field=beanClass.getDeclaredField(fieldName);
    field.setAccessible(true);
  }
 catch (  NoSuchFieldException e) {
    throw new DeploymentUnitProcessingException("Failed to get field '" + fieldName + "' from class '"+ beanClass+ "'",e);
  }
  final Resource resource=field.getAnnotation(Resource.class);
  final String localContextName=resource.name().isEmpty() ? fieldName : resource.name();
  final Class<?> injectionType=resource.type().equals(Object.class) ? field.getType() : resource.type();
  return new ResourceConfiguration(fieldName,field,ResourceConfiguration.TargetType.FIELD,injectionType,localContextName,getTargetContextName(resource,fieldName,injectionType));
}
