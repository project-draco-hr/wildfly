{
  final List<AnnotationTarget> resourceInjectionTargets=classAnnotations.get(RESOURCE_ANNOTATION_NAME);
  if (resourceInjectionTargets == null) {
    managedBeanConfiguration.setResourceInjectionConfigurations(Collections.<ResourceInjectionConfiguration>emptyList());
    return;
  }
  final List<ResourceInjectionConfiguration> resourceInjectionConfigurations=new ArrayList<ResourceInjectionConfiguration>(resourceInjectionTargets.size());
  for (  AnnotationTarget annotationTarget : resourceInjectionTargets) {
    final AccessibleObject target;
    final Resource resource;
    final String targetName;
    final String contextNameSuffix;
    final ResourceInjectionConfiguration.TargetType targetType;
    Class<?> injectionType;
    if (annotationTarget instanceof FieldInfo) {
      final FieldInfo fieldInfo=FieldInfo.class.cast(annotationTarget);
      final String fieldName=fieldInfo.name();
      final Field field;
      try {
        field=beanClass.getDeclaredField(fieldName);
      }
 catch (      NoSuchFieldException e) {
        throw new DeploymentUnitProcessingException("Failed to get field '" + fieldName + "' from class '"+ beanClass+ "'",e,null);
      }
      resource=field.getAnnotation(Resource.class);
      contextNameSuffix=field.getName();
      targetType=ResourceInjectionConfiguration.TargetType.FIELD;
      injectionType=field.getType();
      targetName=fieldName;
      target=field;
    }
 else     if (annotationTarget instanceof MethodInfo) {
      final MethodInfo methodInfo=MethodInfo.class.cast(annotationTarget);
      final String methodName=methodInfo.name();
      final Type[] args=methodInfo.args();
      if (!methodName.startsWith("set") || args.length != 1) {
        throw new DeploymentUnitProcessingException("@Resource injection target is invalid.  Only setter methods are allowed: " + methodInfo,null);
      }
      final Method method;
      try {
        method=beanClass.getMethod(methodName);
      }
 catch (      NoSuchMethodException e) {
        throw new DeploymentUnitProcessingException("Failed to get method '" + methodName + "' from class '"+ beanClass+ "'",e,null);
      }
      resource=method.getAnnotation(Resource.class);
      contextNameSuffix=methodName.substring(3,4).toLowerCase() + methodName.substring(4);
      targetType=ResourceInjectionConfiguration.TargetType.METHOD;
      injectionType=method.getReturnType();
      targetName=methodName;
      target=method;
    }
 else {
      continue;
    }
    if (!resource.type().equals(Object.class)) {
      injectionType=resource.type();
    }
    final String resourceName=resource.name();
    final String localContextName=!"".equals(resourceName) ? resourceName : contextNameSuffix;
    String targetContextName=resource.mappedName();
    if ("".equals(targetContextName)) {
      if (isEnvironmentEntryType(injectionType)) {
        targetContextName=contextNameSuffix;
      }
 else       if (injectionType.isAnnotationPresent(ManagedBean.class)) {
        final ManagedBean managedBean=injectionType.getAnnotation(ManagedBean.class);
        targetContextName="".equals(managedBean.value()) ? injectionType.getName() : managedBean.value();
      }
 else {
        throw new DeploymentUnitProcessingException("Unable to determine mapped name for @Resource injection.",null);
      }
    }
    target.setAccessible(true);
    resourceInjectionConfigurations.add(new ResourceInjectionConfiguration(targetName,target,targetType,injectionType,localContextName,targetContextName));
  }
  managedBeanConfiguration.setResourceInjectionConfigurations(resourceInjectionConfigurations);
}
