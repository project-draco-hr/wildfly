{
  ModelNode op=appendAddOperation(list,parentAddress,JSSE,CLASSIC);
  EnumSet<Attribute> visited=EnumSet.noneOf(Attribute.class);
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    requireNoNamespaceAttribute(reader,i);
    final String value=reader.getAttributeValue(i);
    final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case KEYSTORE_PASSWORD:
{
        ComplexAttributes.PASSWORD.parseAndSetParameter(value,op.get(KEYSTORE),reader);
        visited.add(attribute);
        break;
      }
case KEYSTORE_TYPE:
{
      ComplexAttributes.TYPE.parseAndSetParameter(value,op.get(KEYSTORE),reader);
      break;
    }
case KEYSTORE_URL:
{
    ComplexAttributes.URL.parseAndSetParameter(value,op.get(KEYSTORE),reader);
    break;
  }
case KEYSTORE_PROVIDER:
{
  ComplexAttributes.PROVIDER.parseAndSetParameter(value,op.get(KEYSTORE),reader);
  break;
}
case KEYSTORE_PROVIDER_ARGUMENT:
{
ComplexAttributes.PROVIDER_ARGUMENT.parseAndSetParameter(value,op.get(KEYSTORE),reader);
break;
}
case KEY_MANAGER_FACTORY_PROVIDER:
{
ComplexAttributes.PROVIDER.parseAndSetParameter(value,op.get(KEY_MANAGER),reader);
break;
}
case KEY_MANAGER_FACTORY_ALGORITHM:
{
ComplexAttributes.ALGORITHM.parseAndSetParameter(value,op.get(KEY_MANAGER),reader);
break;
}
case TRUSTSTORE_PASSWORD:
{
ComplexAttributes.PASSWORD.parseAndSetParameter(value,op.get(TRUSTSTORE),reader);
visited.add(attribute);
break;
}
case TRUSTSTORE_TYPE:
{
ComplexAttributes.TYPE.parseAndSetParameter(value,op.get(TRUSTSTORE),reader);
break;
}
case TRUSTSTORE_URL:
{
ComplexAttributes.URL.parseAndSetParameter(value,op.get(TRUSTSTORE),reader);
break;
}
case TRUSTSTORE_PROVIDER:
{
ComplexAttributes.PROVIDER.parseAndSetParameter(value,op.get(TRUSTSTORE),reader);
break;
}
case TRUSTSTORE_PROVIDER_ARGUMENT:
{
ComplexAttributes.PROVIDER_ARGUMENT.parseAndSetParameter(value,op.get(TRUSTSTORE),reader);
break;
}
case TRUST_MANAGER_FACTORY_PROVIDER:
{
ComplexAttributes.PROVIDER.parseAndSetParameter(value,op.get(TRUST_MANAGER),reader);
break;
}
case TRUST_MANAGER_FACTORY_ALGORITHM:
{
ComplexAttributes.ALGORITHM.parseAndSetParameter(value,op.get(TRUST_MANAGER),reader);
break;
}
case CLIENT_ALIAS:
{
JSSEResourceDefinition.CLIENT_ALIAS.parseAndSetParameter(value,op,reader);
break;
}
case SERVER_ALIAS:
{
JSSEResourceDefinition.SERVER_ALIAS.parseAndSetParameter(value,op,reader);
break;
}
case CLIENT_AUTH:
{
JSSEResourceDefinition.CLIENT_AUTH.parseAndSetParameter(value,op,reader);
break;
}
case SERVICE_AUTH_TOKEN:
{
JSSEResourceDefinition.SERVICE_AUTH_TOKEN.parseAndSetParameter(value,op,reader);
break;
}
case CIPHER_SUITES:
{
JSSEResourceDefinition.CIPHER_SUITES.parseAndSetParameter(value,op,reader);
break;
}
case PROTOCOLS:
{
JSSEResourceDefinition.PROTOCOLS.parseAndSetParameter(value,op,reader);
break;
}
default :
throw unexpectedAttribute(reader,i);
}
}
if (visited.size() == 0) {
throw SecurityMessages.MESSAGES.xmlStreamExceptionMissingAttribute(Attribute.KEYSTORE_PASSWORD.getLocalName(),Attribute.TRUSTSTORE_PASSWORD.getLocalName(),reader.getLocation());
}
parseProperties(Element.PROPERTY.getLocalName(),reader,op.get(ADDITIONAL_PROPERTIES));
}
