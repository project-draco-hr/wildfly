{
  final List<AbstractSubsystemUpdate<SecuritySubsystemElement,?>> updates=new ArrayList<AbstractSubsystemUpdate<SecuritySubsystemElement,?>>();
  String authenticationManagerClassName=null;
  boolean deepCopySubjectMode=false;
  String defaultCallbackHandlerClassName=null;
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    final String value=reader.getAttributeValue(i);
    if (reader.getAttributeNamespace(i) != null) {
      throw ParseUtils.unexpectedAttribute(reader,i);
    }
 else {
      final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case AUTHENTICATION_MANAGER_CLASS_NAME:
{
          authenticationManagerClassName=value;
          break;
        }
case DEEP_COPY_SUBJECT_MODE:
{
        deepCopySubjectMode=Boolean.parseBoolean(value);
        break;
      }
case DEFAULT_CALLBACK_HANDLER_CLASS_NAME:
{
      defaultCallbackHandlerClassName=value;
      break;
    }
default :
  throw ParseUtils.unexpectedAttribute(reader,i);
}
}
}
if (authenticationManagerClassName == null) authenticationManagerClassName=SecuritySubsystemParser.defaultAuthenticationManagerClassName;
if (defaultCallbackHandlerClassName == null) defaultCallbackHandlerClassName=SecuritySubsystemParser.defaultCallbackHandlerClassName;
final SecuritySubsystemAdd subsystem=new SecuritySubsystemAdd(authenticationManagerClassName,deepCopySubjectMode,defaultCallbackHandlerClassName);
ParseUtils.requireNoContent(reader);
result.setResult(new ExtensionContext.SubsystemConfiguration<SecuritySubsystemElement>(subsystem,updates));
}
