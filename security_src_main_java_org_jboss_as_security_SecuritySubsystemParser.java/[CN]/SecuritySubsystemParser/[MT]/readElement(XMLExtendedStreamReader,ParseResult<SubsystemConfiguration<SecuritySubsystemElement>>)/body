{
  final List<AbstractSubsystemUpdate<SecuritySubsystemElement,?>> updates=new ArrayList<AbstractSubsystemUpdate<SecuritySubsystemElement,?>>();
  ParseUtils.requireNoAttributes(reader);
  boolean securityManagementParsed=false;
  boolean subjectFactoryParsed=false;
  while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
switch (Namespace.forUri(reader.getNamespaceURI())) {
case SECURITY_1_0:
{
        final Element element=Element.forName(reader.getLocalName());
switch (element) {
case SECURITY_MANAGEMENT:
{
            updates.add(parseSecurityManagement(reader));
            securityManagementParsed=true;
            break;
          }
case SUBJECT_FACTORY:
{
          updates.add(parseSubjectFactory(reader));
          subjectFactoryParsed=true;
          break;
        }
case JAAS:
{
        updates.add(parseJaas(reader));
        break;
      }
default :
{
      throw unexpectedElement(reader);
    }
}
break;
}
default :
{
throw unexpectedElement(reader);
}
}
}
if (!securityManagementParsed) updates.add(new AddSecurityManagementUpdate("default",false,"default"));
if (!subjectFactoryParsed) updates.add(new AddSubjectFactoryUpdate("default"));
final SecuritySubsystemAdd subsystem=new SecuritySubsystemAdd();
result.setResult(new ExtensionContext.SubsystemConfiguration<SecuritySubsystemElement>(subsystem,updates));
}
