{
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    requireNoNamespaceAttribute(reader,i);
    final String value=reader.getAttributeValue(i);
    final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
    if (notAllowed.contains(attribute))     throw unexpectedAttribute(reader,i);
    required.remove(attribute);
switch (attribute) {
case CODE:
{
        ModelNode code=LoginModulesAttributeDefinition.parseField(CODE,value,reader);
        node.get(CODE).set(code);
        break;
      }
case FLAG:
{
      ModelNode flag=LoginModulesAttributeDefinition.parseField(FLAG,value,reader);
      node.get(FLAG).set(flag);
      break;
    }
case TYPE:
{
    ModelNode type=MappingModulesAttributeDefinition.parseField(TYPE,value,reader);
    node.get(TYPE).set(type);
    break;
  }
case MODULE:
{
  ModelNode module=MappingModulesAttributeDefinition.parseField(MODULE,value,reader);
  node.get(MODULE).set(module);
  break;
}
default :
throw unexpectedAttribute(reader,i);
}
}
if (required.size() > 0) {
throw missingRequired(reader,required);
}
parseProperties(Element.MODULE_OPTION.getLocalName(),reader,node.get(MODULE_OPTIONS));
}
