{
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    requireNoNamespaceAttribute(reader,i);
    final String value=reader.getAttributeValue(i);
    final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
    if (notAllowed.contains(attribute))     throw unexpectedAttribute(reader,i);
    required.remove(attribute);
switch (attribute) {
case CODE:
{
        String code=value;
        node.get(CODE).set(code);
        break;
      }
case FLAG:
{
      validateFlag(value,reader,i);
      node.get(FLAG).set(value);
      break;
    }
case TYPE:
{
    validateType(value,reader,i);
    node.get(TYPE).set(value);
    break;
  }
default :
throw unexpectedAttribute(reader,i);
}
}
if (required.size() > 0) {
throw missingRequired(reader,required);
}
while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
final Element element=Element.forName(reader.getLocalName());
switch (element) {
case MODULE_OPTION:
{
parseModuleOption(reader,node.get(MODULE_OPTIONS));
break;
}
default :
{
throw unexpectedElement(reader);
}
}
}
}
