{
  String name=null;
  ModelNode val=null;
  EnumSet<Attribute> required=EnumSet.of(Attribute.NAME,Attribute.VALUE);
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    requireNoNamespaceAttribute(reader,i);
    final String value=reader.getAttributeValue(i);
    final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
    required.remove(attribute);
switch (attribute) {
case NAME:
{
        if (value == null)         throw invalidAttributeValue(reader,i);
        name=value.trim();
        break;
      }
case VALUE:
{
      String propValue=value != null ? value.trim() : value;
      if (propValue != null)       val=new ModelNode().set(ParseUtils.parsePossibleExpression(propValue));
 else       val=new ModelNode();
      break;
    }
default :
  throw unexpectedAttribute(reader,i);
}
}
if (required.size() > 0) {
throw missingRequired(reader,required);
}
properties.add(name,val);
requireNoContent(reader);
}
