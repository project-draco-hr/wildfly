{
  PathAddress address=PathAddress.pathAddress(PathElement.pathElement(SUBSYSTEM,SecurityExtension.SUBSYSTEM_NAME));
  final ModelNode subsystem=Util.createAddOperation(address);
  requireNoAttributes(reader);
  List<ModelNode> securityDomainsUpdates=null;
  ModelNode vault=null;
  final EnumSet<Element> visited=EnumSet.noneOf(Element.class);
  while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
    Namespace schemaVer=Namespace.forUri(reader.getNamespaceURI());
    final Element element=Element.forName(reader.getLocalName());
    if (!visited.add(element)) {
      throw unexpectedElement(reader);
    }
switch (element) {
case SECURITY_MANAGEMENT:
{
        parseSecurityManagement(reader,subsystem);
        break;
      }
case SECURITY_DOMAINS:
{
      securityDomainsUpdates=parseSecurityDomains(reader,address);
      break;
    }
case SECURITY_PROPERTIES:
  reader.discardRemainder();
break;
case VAULT:
{
if (schemaVer == Namespace.SECURITY_1_0) {
  throw unexpectedElement(reader);
}
final int count=reader.getAttributeCount();
vault=createAddOperation(address,VAULT,CLASSIC);
if (count > 1) {
  throw unexpectedAttribute(reader,count);
}
for (int i=0; i < count; i++) {
  requireNoNamespaceAttribute(reader,i);
  final String value=reader.getAttributeValue(i);
  final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case CODE:
{
      vault.get(CODE).set(value);
      break;
    }
default :
  throw unexpectedAttribute(reader,i);
}
}
parseProperties(Element.VAULT_OPTION.getLocalName(),reader,vault,VaultResourceDefinition.OPTIONS);
break;
}
default :
{
throw unexpectedElement(reader);
}
}
}
list.add(subsystem);
if (vault != null) {
list.add(vault);
}
if (securityDomainsUpdates != null) {
list.addAll(securityDomainsUpdates);
}
}
