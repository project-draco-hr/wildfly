{
  final ModelNode subsystem=new ModelNode();
  subsystem.get(OP).set(ADD);
  ModelNode address=subsystem.get(OP_ADDR);
  address.add(SUBSYSTEM,SecurityExtension.SUBSYSTEM_NAME);
  requireNoAttributes(reader);
  List<ModelNode> securityDomainsUpdates=null;
  final EnumSet<Element> visited=EnumSet.noneOf(Element.class);
  while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
    Namespace schemaVer=Namespace.forUri(reader.getNamespaceURI());
    final Element element=Element.forName(reader.getLocalName());
    if (!visited.add(element)) {
      throw unexpectedElement(reader);
    }
switch (element) {
case SECURITY_MANAGEMENT:
{
        parseSecurityManagement(reader,subsystem);
        break;
      }
case SUBJECT_FACTORY:
{
      parseSubjectFactory(reader,subsystem);
      break;
    }
case SECURITY_DOMAINS:
{
    securityDomainsUpdates=parseSecurityDomains(reader,address);
    break;
  }
case SECURITY_PROPERTIES:
{
  parseSecurityProperties(reader,subsystem);
  break;
}
case VAULT:
{
if (schemaVer == Namespace.SECURITY_1_0) throw unexpectedElement(reader);
final int count=reader.getAttributeCount();
ModelNode vault=subsystem.get(Constants.VAULT);
if (count > 1) {
  throw unexpectedAttribute(reader,count);
}
for (int i=0; i < count; i++) {
  requireNoNamespaceAttribute(reader,i);
  final String value=reader.getAttributeValue(i);
  final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case CODE:
{
      String code=value;
      vault.get(CODE).set(code);
      break;
    }
default :
  throw unexpectedAttribute(reader,i);
}
}
parseVault(reader,vault);
subsystem.get(Constants.VAULT).set(vault);
break;
}
default :
{
throw unexpectedElement(reader);
}
}
}
list.add(subsystem);
if (securityDomainsUpdates != null) {
list.addAll(securityDomainsUpdates);
}
}
