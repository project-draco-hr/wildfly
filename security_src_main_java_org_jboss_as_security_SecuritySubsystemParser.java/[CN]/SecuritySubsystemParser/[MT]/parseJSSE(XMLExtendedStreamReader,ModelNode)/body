{
  EnumSet<Attribute> visited=EnumSet.noneOf(Attribute.class);
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    requireNoNamespaceAttribute(reader,i);
    final String value=reader.getAttributeValue(i);
    final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case KEYSTORE_PASSWORD:
{
        op.get(KEYSTORE_PASSWORD).set(value);
        visited.add(attribute);
        break;
      }
case KEYSTORE_TYPE:
{
      op.get(KEYSTORE_TYPE).set(value);
      break;
    }
case KEYSTORE_URL:
{
    op.get(KEYSTORE_URL).set(value);
    break;
  }
case KEYSTORE_PROVIDER:
{
  op.get(KEYSTORE_PROVIDER).set(value);
  break;
}
case KEYSTORE_PROVIDER_ARGUMENT:
{
op.get(KEYSTORE_PROVIDER_ARGUMENT).set(value);
break;
}
case KEY_MANAGER_FACTORY_PROVIDER:
{
op.get(KEY_MANAGER_FACTORY_PROVIDER).set(value);
break;
}
case KEY_MANAGER_FACTORY_ALGORITHM:
{
op.get(KEY_MANAGER_FACTORY_ALGORITHM).set(value);
break;
}
case TRUSTSTORE_PASSWORD:
{
op.get(TRUSTSTORE_PASSWORD).set(value);
visited.add(attribute);
break;
}
case TRUSTSTORE_TYPE:
{
op.get(TRUSTSTORE_TYPE).set(value);
break;
}
case TRUSTSTORE_URL:
{
op.get(TRUSTSTORE_URL).set(value);
break;
}
case TRUSTSTORE_PROVIDER:
{
op.get(TRUSTSTORE_PROVIDER).set(value);
break;
}
case TRUSTSTORE_PROVIDER_ARGUMENT:
{
op.get(TRUSTSTORE_PROVIDER_ARGUMENT).set(value);
break;
}
case TRUST_MANAGER_FACTORY_PROVIDER:
{
op.get(TRUST_MANAGER_FACTORY_PROVIDER).set(value);
break;
}
case TRUST_MANAGER_FACTORY_ALGORITHM:
{
op.get(TRUST_MANAGER_FACTORY_ALGORITHM).set(value);
break;
}
case CLIENT_ALIAS:
{
op.get(CLIENT_ALIAS).set(value);
break;
}
case SERVER_ALIAS:
{
op.get(SERVER_ALIAS).set(value);
break;
}
case CLIENT_AUTH:
{
op.get(CLIENT_AUTH).set(value);
break;
}
case SERVICE_AUTH_TOKEN:
{
op.get(SERVICE_AUTH_TOKEN).set(value);
break;
}
case CIPHER_SUITES:
{
op.get(CIPHER_SUITES).set(value);
break;
}
case PROTOCOLS:
{
op.get(PROTOCOLS).set(value);
break;
}
default :
throw unexpectedAttribute(reader,i);
}
}
if (visited.size() == 0) {
throw new XMLStreamException("Missing required attribute: either " + Attribute.KEYSTORE_PASSWORD.getLocalName() + " or "+ Attribute.TRUSTSTORE_PASSWORD.getLocalName()+ " must be present",reader.getLocation());
}
while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
requireNoAttributes(reader);
final Element element=Element.forName(reader.getLocalName());
switch (element) {
case ADDITIONAL_PROPERTIES:
{
op.get(ADDITIONAL_PROPERTIES).set(reader.getElementText().trim());
break;
}
default :
{
throw unexpectedElement(reader);
}
}
}
}
