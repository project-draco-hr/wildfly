{
  context.startSubsystemElement(Namespace.CURRENT.getUriString(),false);
  ModelNode node=context.getModelNode();
  if (isNonStandard(node,AUTHENTICATION_MANAGER_CLASS_NAME) || (node.hasDefined(DEEP_COPY_SUBJECT_MODE) && node.get(DEEP_COPY_SUBJECT_MODE).asBoolean()) || isNonStandard(node,DEFAULT_CALLBACK_HANDLER_CLASS_NAME)|| isNonStandard(node,AUTHORIZATION_MANAGER_CLASS_NAME)|| isNonStandard(node,AUDIT_MANAGER_CLASS_NAME)|| isNonStandard(node,IDENTITY_TRUST_MANAGER_CLASS_NAME)|| isNonStandard(node,MAPPING_MANAGER_CLASS_NAME)) {
    writer.writeEmptyElement(Element.SECURITY_MANAGEMENT.getLocalName());
    if (isNonStandard(node,AUTHENTICATION_MANAGER_CLASS_NAME)) {
      writeAttribute(writer,Attribute.AUTHENTICATION_MANAGER_CLASS_NAME,node.get(AUTHENTICATION_MANAGER_CLASS_NAME));
    }
    if (node.hasDefined(DEEP_COPY_SUBJECT_MODE) && node.get(DEEP_COPY_SUBJECT_MODE).asBoolean()) {
      writeAttribute(writer,Attribute.DEEP_COPY_SUBJECT_MODE,node.get(DEEP_COPY_SUBJECT_MODE));
    }
    if (isNonStandard(node,DEFAULT_CALLBACK_HANDLER_CLASS_NAME)) {
      writeAttribute(writer,Attribute.DEFAULT_CALLBACK_HANDLER_CLASS_NAME,node.get(DEFAULT_CALLBACK_HANDLER_CLASS_NAME));
    }
    if (isNonStandard(node,AUTHORIZATION_MANAGER_CLASS_NAME)) {
      writeAttribute(writer,Attribute.AUTHORIZATION_MANAGER_CLASS_NAME,node.get(AUTHORIZATION_MANAGER_CLASS_NAME));
    }
    if (isNonStandard(node,AUDIT_MANAGER_CLASS_NAME)) {
      writeAttribute(writer,Attribute.AUDIT_MANAGER_CLASS_NAME,node.get(AUDIT_MANAGER_CLASS_NAME));
    }
    if (isNonStandard(node,IDENTITY_TRUST_MANAGER_CLASS_NAME)) {
      writeAttribute(writer,Attribute.IDENTITY_TRUST_MANAGER_CLASS_NAME,node.get(IDENTITY_TRUST_MANAGER_CLASS_NAME));
    }
    if (isNonStandard(node,MAPPING_MANAGER_CLASS_NAME)) {
      writeAttribute(writer,Attribute.MAPPING_MANAGER_CLASS_NAME,node.get(MAPPING_MANAGER_CLASS_NAME));
    }
  }
  if (isNonStandard(node,SUBJECT_FACTORY_CLASS_NAME)) {
    writer.writeEmptyElement(Element.SUBJECT_FACTORY.getLocalName());
    writeAttribute(writer,Attribute.SUBJECT_FACTORY_CLASS_NAME,node.get(SUBJECT_FACTORY_CLASS_NAME));
  }
  if (node.hasDefined(SECURITY_DOMAIN) && node.get(SECURITY_DOMAIN).asInt() > 0) {
    writer.writeStartElement(Element.SECURITY_DOMAINS.getLocalName());
    for (    Property policy : node.get(SECURITY_DOMAIN).asPropertyList()) {
      writer.writeStartElement(Element.SECURITY_DOMAIN.getLocalName());
      writer.writeAttribute(Attribute.NAME.getLocalName(),policy.getName());
      ModelNode policyDetails=policy.getValue();
      if (policyDetails.hasDefined(EXTENDS)) {
        writeAttribute(writer,Attribute.EXTENDS,policyDetails.get(EXTENDS));
      }
      if (policyDetails.hasDefined(CACHE_TYPE)) {
        writeAttribute(writer,Attribute.CACHE_TYPE,policyDetails.get(CACHE_TYPE));
      }
      writeSecurityDomainContent(writer,policyDetails);
      writer.writeEndElement();
    }
    writer.writeEndElement();
  }
  if (node.hasDefined(SECURITY_PROPERTIES)) {
    writer.writeStartElement(Element.SECURITY_PROPERTIES.getLocalName());
    ModelNode properties=node.get(SECURITY_PROPERTIES);
    for (    Property prop : properties.asPropertyList()) {
      writer.writeEmptyElement(Element.PROPERTY.getLocalName());
      writer.writeAttribute(Attribute.NAME.getLocalName(),prop.getName());
      writer.writeAttribute(Attribute.VALUE.getLocalName(),prop.getValue().asString());
    }
    writer.writeEndElement();
  }
  writer.writeEndElement();
}
