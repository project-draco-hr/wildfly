{
  ModelNode op=appendAddOperation(list,parentAddress,JSSE,CLASSIC);
  EnumSet<Attribute> visited=EnumSet.noneOf(Attribute.class);
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    requireNoNamespaceAttribute(reader,i);
    final String value=reader.getAttributeValue(i);
    final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case KEYSTORE_PASSWORD:
{
        ModelNode password=KeyStoreAttributeDefinition.parseField(PASSWORD,value,reader);
        op.get(KEYSTORE,PASSWORD).set(password);
        visited.add(attribute);
        break;
      }
case KEYSTORE_TYPE:
{
      ModelNode type=KeyStoreAttributeDefinition.parseField(TYPE,value,reader);
      op.get(KEYSTORE,TYPE).set(type);
      break;
    }
case KEYSTORE_URL:
{
    ModelNode url=KeyStoreAttributeDefinition.parseField(URL,value,reader);
    op.get(KEYSTORE,URL).set(url);
    break;
  }
case KEYSTORE_PROVIDER:
{
  ModelNode provider=KeyStoreAttributeDefinition.parseField(PROVIDER,value,reader);
  op.get(KEYSTORE,PROVIDER).set(provider);
  break;
}
case KEYSTORE_PROVIDER_ARGUMENT:
{
ModelNode argument=KeyStoreAttributeDefinition.parseField(PROVIDER_ARGUMENT,value,reader);
op.get(KEYSTORE,PROVIDER_ARGUMENT).set(argument);
break;
}
case KEY_MANAGER_FACTORY_PROVIDER:
{
ModelNode provider=KeyManagerAttributeDefinition.parseField(PROVIDER,value,reader);
op.get(KEY_MANAGER,PROVIDER).set(provider);
break;
}
case KEY_MANAGER_FACTORY_ALGORITHM:
{
ModelNode provider=KeyManagerAttributeDefinition.parseField(ALGORITHM,value,reader);
op.get(KEY_MANAGER,ALGORITHM).set(provider);
break;
}
case TRUSTSTORE_PASSWORD:
{
ModelNode password=KeyStoreAttributeDefinition.parseField(PASSWORD,value,reader);
op.get(TRUSTSTORE,PASSWORD).set(password);
visited.add(attribute);
break;
}
case TRUSTSTORE_TYPE:
{
ModelNode type=KeyStoreAttributeDefinition.parseField(TYPE,value,reader);
op.get(TRUSTSTORE,TYPE).set(type);
break;
}
case TRUSTSTORE_URL:
{
ModelNode url=KeyStoreAttributeDefinition.parseField(URL,value,reader);
op.get(TRUSTSTORE,URL).set(url);
break;
}
case TRUSTSTORE_PROVIDER:
{
ModelNode provider=KeyStoreAttributeDefinition.parseField(PROVIDER,value,reader);
op.get(TRUSTSTORE,PROVIDER).set(provider);
break;
}
case TRUSTSTORE_PROVIDER_ARGUMENT:
{
ModelNode argument=KeyStoreAttributeDefinition.parseField(PROVIDER_ARGUMENT,value,reader);
op.get(TRUSTSTORE,PROVIDER_ARGUMENT).set(argument);
break;
}
case TRUST_MANAGER_FACTORY_PROVIDER:
{
ModelNode provider=KeyManagerAttributeDefinition.parseField(PROVIDER,value,reader);
op.get(TRUST_MANAGER,PROVIDER).set(provider);
break;
}
case TRUST_MANAGER_FACTORY_ALGORITHM:
{
ModelNode provider=KeyManagerAttributeDefinition.parseField(ALGORITHM,value,reader);
op.get(TRUST_MANAGER,ALGORITHM).set(provider);
break;
}
case CLIENT_ALIAS:
{
JSSEResourceDefinition.CLIENT_ALIAS.parseAndSetParameter(value,op,reader);
break;
}
case SERVER_ALIAS:
{
JSSEResourceDefinition.SERVER_ALIAS.parseAndSetParameter(value,op,reader);
break;
}
case CLIENT_AUTH:
{
JSSEResourceDefinition.CLIENT_AUTH.parseAndSetParameter(value,op,reader);
break;
}
case SERVICE_AUTH_TOKEN:
{
JSSEResourceDefinition.SERVICE_AUTH_TOKEN.parseAndSetParameter(value,op,reader);
break;
}
case CIPHER_SUITES:
{
JSSEResourceDefinition.CIPHER_SUITES.parseAndSetParameter(value,op,reader);
break;
}
case PROTOCOLS:
{
JSSEResourceDefinition.PROTOCOLS.parseAndSetParameter(value,op,reader);
break;
}
default :
throw unexpectedAttribute(reader,i);
}
}
if (visited.size() == 0) {
throw new XMLStreamException("Missing required attribute: either " + Attribute.KEYSTORE_PASSWORD.getLocalName() + " or "+ Attribute.TRUSTSTORE_PASSWORD.getLocalName()+ " must be present",reader.getLocation());
}
parseProperties(Element.PROPERTY.getLocalName(),reader,op.get(ADDITIONAL_PROPERTIES));
}
