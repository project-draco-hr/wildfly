{
  Set<String> keys=new HashSet<String>(policyDetails.keys());
  keys.remove(Attribute.NAME.getLocalName());
  keys.remove(Attribute.EXTENDS.getLocalName());
  for (  String key : keys) {
    Element element=Element.forName(key);
switch (element) {
case AUTHENTICATION:
{
        writeAuthentication(writer,policyDetails.get(Element.AUTHENTICATION.getLocalName()));
        break;
      }
case AUTHORIZATION:
{
      writeAuthorization(writer,policyDetails.get(Element.AUTHORIZATION.getLocalName()));
      break;
    }
case ACL:
{
    writeACL(writer,policyDetails.get(Element.ACL.getLocalName()));
    break;
  }
case AUDIT:
{
  writeAudit(writer,policyDetails.get(Element.AUDIT.getLocalName()));
  break;
}
case IDENTITY_TRUST:
{
writeIdentityTrust(writer,policyDetails.get(Element.IDENTITY_TRUST.getLocalName()));
break;
}
case MAPPING:
{
writeMapping(writer,policyDetails.get(Element.MAPPING.getLocalName()));
break;
}
case AUTHENTICATION_JASPI:
{
writeAuthenticationJaspi(writer,policyDetails.get(Element.AUTHENTICATION_JASPI.getLocalName()));
break;
}
default :
throw new IllegalStateException("Unexpected field " + element.getLocalName());
}
}
}
