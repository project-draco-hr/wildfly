{
  Set<String> keys=new HashSet<String>(policyDetails.keys());
  keys.remove(NAME);
  keys.remove(EXTENDS);
  keys.remove(CACHE_TYPE);
  for (  String key : keys) {
    Element element=Element.forName(key);
switch (element) {
case AUTHENTICATION:
{
        writeAuthentication(writer,policyDetails.get(AUTHENTICATION));
        break;
      }
case AUTHORIZATION:
{
      writeAuthorization(writer,policyDetails.get(AUTHORIZATION));
      break;
    }
case ACL:
{
    writeACL(writer,policyDetails.get(ACL));
    break;
  }
case AUDIT:
{
  writeAudit(writer,policyDetails.get(AUDIT));
  break;
}
case IDENTITY_TRUST:
{
writeIdentityTrust(writer,policyDetails.get(IDENTITY_TRUST));
break;
}
case MAPPING:
{
writeMapping(writer,policyDetails.get(MAPPING));
break;
}
case AUTHENTICATION_JASPI:
{
writeAuthenticationJaspi(writer,policyDetails.get(AUTHENTICATION_JASPI));
break;
}
case JSSE:
{
writeJSSE(writer,policyDetails.get(JSSE));
break;
}
default :
throw new IllegalStateException("Unexpected field " + element.getLocalName());
}
}
}
