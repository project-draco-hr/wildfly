{
  ModelVersion modelVersion=ModelVersion.create(1,1,0);
  KernelServicesBuilder builder=createKernelServicesBuilder(AdditionalInitialization.MANAGEMENT);
  builder.createLegacyKernelServicesBuilder(null,controllerVersion,modelVersion).addMavenResourceURL("org.jboss.as:jboss-as-connector:" + controllerVersion.getMavenGavVersion()).setExtensionClassName("org.jboss.as.connector.subsystems.datasources.DataSourcesExtension").excludeFromParent(SingleClassFilter.createFilter(ConnectorLogger.class));
  KernelServices mainServices=builder.build();
  assertTrue(mainServices.isSuccessfulBoot());
  KernelServices legacyServices=mainServices.getLegacyServices(modelVersion);
  assertNotNull(legacyServices);
  assertTrue(legacyServices.isSuccessfulBoot());
  List<ModelNode> ops=builder.parseXmlResource(subsystemXml);
  PathAddress subsystemAddress=PathAddress.pathAddress(DataSourcesSubsystemRootDefinition.PATH_SUBSYSTEM);
  ModelTestUtils.checkFailedTransformedBootOperations(mainServices,modelVersion,ops,new FailedOperationTransformationConfig().addFailedAttribute(subsystemAddress.append(JdbcDriverDefinition.PATH_DRIVER),new FailedOperationTransformationConfig.RejectExpressionsConfig(Constants.DRIVER_MINOR_VERSION,Constants.DRIVER_MAJOR_VERSION){
    @Override protected boolean isAttributeWritable(    String attributeName){
      return false;
    }
  }
).addFailedAttribute(subsystemAddress.append(DataSourceDefinition.PATH_DATASOURCE),FAILED_TRANSFORMER_1_1_0).addFailedAttribute(subsystemAddress.append(XaDataSourceDefinition.PATH_XA_DATASOURCE),FAILED_TRANSFORMER_1_1_0));
}
