{
  KernelServicesBuilder builder=createKernelServicesBuilder(AdditionalInitialization.MANAGEMENT).setSubsystemXmlResource(subsystemXml);
  builder.createLegacyKernelServicesBuilder(null,controllerVersion,modelVersion).addMavenResourceURL("org.jboss.as:jboss-as-connector:" + controllerVersion.getMavenGavVersion()).setExtensionClassName("org.jboss.as.connector.subsystems.datasources.DataSourcesExtension").configureReverseControllerCheck(AdditionalInitialization.MANAGEMENT,null).excludeFromParent(SingleClassFilter.createFilter(ConnectorLogger.class));
  KernelServices mainServices=builder.build();
  Assert.assertTrue(mainServices.isSuccessfulBoot());
  KernelServices legacyServices=mainServices.getLegacyServices(modelVersion);
  Assert.assertTrue(legacyServices.isSuccessfulBoot());
  Assert.assertNotNull(legacyServices);
  checkSubsystemModelTransformation(mainServices,modelVersion,new ModelFixer(){
    @Override public ModelNode fixModel(    ModelNode modelNode){
      Assert.assertTrue(modelNode.get(Constants.XA_DATASOURCE).get("complexXaDs_Pool").get(Constants.JTA.getName()).asBoolean());
      modelNode.get(Constants.XA_DATASOURCE).get("complexXaDs_Pool").remove(Constants.JTA.getName());
      modelNode.get(Constants.DATA_SOURCE).get("complexDs_Pool").remove(Constants.ENABLED.getName());
      modelNode.get(Constants.XA_DATASOURCE).get("complexXaDs_Pool").remove(Constants.ENABLED.getName());
      return modelNode;
    }
  }
);
}
