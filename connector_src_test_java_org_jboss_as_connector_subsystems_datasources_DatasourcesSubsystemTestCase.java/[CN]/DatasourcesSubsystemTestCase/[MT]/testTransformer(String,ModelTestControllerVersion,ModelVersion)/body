{
  KernelServicesBuilder builder=createKernelServicesBuilder(AdditionalInitialization.MANAGEMENT);
  LegacyKernelServicesInitializer initializer=builder.createLegacyKernelServicesBuilder(null,controllerVersion,modelVersion);
  if (controllerVersion.equals(ModelTestControllerVersion.WILDFLY_8_0_0_FINAL)) {
    initializer.addMavenResourceURL("org.wildfly:wildfly-connector:" + controllerVersion.getMavenGavVersion());
  }
 else {
    initializer.addMavenResourceURL("org.jboss.as:jboss-as-connector:" + controllerVersion.getMavenGavVersion());
  }
  initializer.addMavenResourceURL("org.jboss.ironjacamar:ironjacamar-spec-api:1.1.4.Final").addMavenResourceURL("org.jboss.ironjacamar:ironjacamar-common-api:1.1.4.Final").setExtensionClassName("org.jboss.as.connector.subsystems.datasources.DataSourcesExtension").excludeFromParent(SingleClassFilter.createFilter(ConnectorLogger.class));
  KernelServices mainServices=builder.build();
  Assert.assertTrue(mainServices.isSuccessfulBoot());
  KernelServices legacyServices=mainServices.getLegacyServices(modelVersion);
  Assert.assertTrue(legacyServices.isSuccessfulBoot());
  Assert.assertNotNull(legacyServices);
  List<ModelNode> ops=builder.parseXmlResource(subsystemXml);
  PathAddress subsystemAddress=PathAddress.pathAddress(DataSourcesSubsystemRootDefinition.PATH_SUBSYSTEM);
  ModelTestUtils.checkFailedTransformedBootOperations(mainServices,modelVersion,ops,new FailedOperationTransformationConfig().addFailedAttribute(subsystemAddress.append(DataSourceDefinition.PATH_DATASOURCE),new FailedOperationTransformationConfig.NewAttributesConfig(Constants.TRACKING)).addFailedAttribute(subsystemAddress.append(XaDataSourceDefinition.PATH_XA_DATASOURCE),new FailedOperationTransformationConfig.NewAttributesConfig(Constants.TRACKING)));
}
