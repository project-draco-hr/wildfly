{
  System.setProperty("jboss.as.test.transformation.hack","true");
  try {
    ModelVersion modelVersion=ModelVersion.create(1,1,0);
    KernelServicesBuilder builder=createKernelServicesBuilder(AdditionalInitialization.MANAGEMENT);
    builder.createLegacyKernelServicesBuilder(null,modelVersion).addMavenResourceURL("org.jboss.as:jboss-as-connector:" + mavenVersion).setExtensionClassName("org.jboss.as.connector.subsystems.datasources.DataSourcesExtension");
    KernelServices mainServices=builder.build();
    assertTrue(mainServices.isSuccessfulBoot());
    KernelServices legacyServices=mainServices.getLegacyServices(modelVersion);
    assertNotNull(legacyServices);
    assertTrue(legacyServices.isSuccessfulBoot());
    List<ModelNode> ops=builder.parseXmlResource(subsystemXml);
    PathAddress subsystemAddress=PathAddress.pathAddress(DataSourcesSubsystemRootDefinition.PATH_SUBSYSTEM);
    ModelTestUtils.checkFailedTransformedBootOperations(mainServices,modelVersion,ops,new FailedOperationTransformationConfig().addFailedAttribute(subsystemAddress.append(JdbcDriverDefinition.PATH_DRIVER),new FailedOperationTransformationConfig.RejectExpressionsConfig(Constants.DRIVER_MINOR_VERSION,Constants.DRIVER_MAJOR_VERSION){
      @Override protected boolean isAttributeWritable(      String attributeName){
        return false;
      }
    }
).addFailedAttribute(subsystemAddress.append(DataSourceDefinition.PATH_DATASOURCE),new FailedOperationTransformationConfig.RejectExpressionsConfig(Constants.DATASOURCE_PROPERTIES_ATTRIBUTES)).addFailedAttribute(subsystemAddress.append(XaDataSourceDefinition.PATH_XA_DATASOURCE),new FailedOperationTransformationConfig.RejectExpressionsConfig(Constants.DATASOURCE_PROPERTIES_ATTRIBUTES)));
  }
  finally {
    System.clearProperty("jboss.as.test.transformation.hack");
  }
}
