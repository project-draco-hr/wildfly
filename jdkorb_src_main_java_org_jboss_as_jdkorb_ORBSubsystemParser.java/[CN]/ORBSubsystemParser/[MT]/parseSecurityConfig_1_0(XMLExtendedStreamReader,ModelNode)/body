{
  EnumSet<Attribute> expectedAttributes=EnumSet.of(Attribute.SECURITY_SUPPORT_SSL,Attribute.SECURITY_ADD_COMPONENT_INTERCEPTOR,Attribute.SECURITY_CLIENT_SUPPORTS,Attribute.SECURITY_CLIENT_REQUIRES,Attribute.SECURITY_SERVER_SUPPORTS,Attribute.SECURITY_SERVER_REQUIRES,Attribute.SECURITY_USE_DOMAIN_SF,Attribute.SECURITY_USE_DOMAIN_SSF);
  EnumSet<Attribute> parsedAttributes=EnumSet.noneOf(Attribute.class);
  for (int i=0; i < reader.getAttributeCount(); i++) {
    requireNoNamespaceAttribute(reader,i);
    String attrValue=reader.getAttributeValue(i);
    final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
    if (!expectedAttributes.contains(attribute))     throw unexpectedAttribute(reader,i);
    if (!parsedAttributes.add(attribute)) {
      throw duplicateAttribute(reader,attribute.getLocalName());
    }
switch (attribute) {
case SECURITY_CLIENT_SUPPORTS:
case SECURITY_CLIENT_REQUIRES:
case SECURITY_SERVER_SUPPORTS:
case SECURITY_SERVER_REQUIRES:
      SSLConfigValue value=SSLConfigValue.fromValue(attrValue);
    if (value == null)     throw ORBMessages.MESSAGES.invalidSSLConfig(attrValue,reader.getLocation());
  attrValue=value.toString();
default :
SimpleAttributeDefinition definition=((SimpleAttributeDefinition)ORBSubsystemDefinitions.valueOf(attribute.getLocalName()));
if (definition != null) definition.parseAndSetParameter(attrValue,node,reader);
}
}
requireNoContent(reader);
}
