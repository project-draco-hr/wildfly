{
  final DeploymentUnit deploymentUnit=phaseContext.getDeploymentUnit();
  if (!DeploymentTypeMarker.isType(DeploymentType.EAR,deploymentUnit)) {
    return;
  }
  final ResourceRoot deploymentRoot=phaseContext.getDeploymentUnit().getAttachment(Attachments.DEPLOYMENT_ROOT);
  final VirtualFile virtualFile=deploymentRoot.getRoot();
  deploymentRoot.putAttachment(Attachments.INDEX_RESOURCE_ROOT,false);
  ModuleRootMarker.mark(deploymentRoot,false);
  String libDirName=DEFAULT_LIB_DIR;
  final boolean appXmlPresent=deploymentRoot.getRoot().getChild("META-INF/application.xml").exists();
  final EarMetaData earMetaData=deploymentUnit.getAttachment(org.jboss.as.ee.structure.Attachments.EAR_METADATA);
  if (earMetaData != null) {
    final String xmlLibDirName=earMetaData.getLibraryDirectory();
    if (xmlLibDirName != null) {
      libDirName=xmlLibDirName;
    }
  }
  try {
    final VirtualFile libDir;
    if (!libDirName.isEmpty()) {
      libDir=virtualFile.getChild(libDirName);
      if (libDir.exists()) {
        List<VirtualFile> libArchives=libDir.getChildren(CHILD_ARCHIVE_FILTER);
        for (        final VirtualFile child : libArchives) {
          final Closeable closable=child.isFile() ? mount(child,false) : null;
          final MountHandle mountHandle=new MountHandle(closable);
          final ResourceRoot childResource=new ResourceRoot(child,mountHandle);
          if (child.getName().toLowerCase(Locale.ENGLISH).endsWith(JAR_EXTENSION)) {
            ModuleRootMarker.mark(childResource);
            deploymentUnit.addToAttachmentList(Attachments.RESOURCE_ROOTS,childResource);
          }
        }
      }
    }
 else {
      libDir=null;
    }
    final List<VirtualFile> childArchives=new ArrayList<VirtualFile>(virtualFile.getChildren(new SuffixMatchFilter(CHILD_ARCHIVE_EXTENSIONS,new VisitorAttributes(){
      @Override public boolean isLeavesOnly(){
        return false;
      }
      @Override public boolean isRecurse(      VirtualFile file){
        if (file.equals(libDir)) {
          return false;
        }
        for (        String suffix : CHILD_ARCHIVE_EXTENSIONS) {
          if (file.getName().endsWith(suffix)) {
            return false;
          }
        }
        return true;
      }
    }
)));
    if (!appXmlPresent) {
      for (      final VirtualFile child : childArchives) {
        final boolean isWarFile=child.getName().toLowerCase(Locale.ENGLISH).endsWith(WAR_EXTENSION);
        final boolean isRarFile=child.getName().toLowerCase(Locale.ENGLISH).endsWith(RAR_EXTENSION);
        this.createResourceRoot(deploymentUnit,child,isWarFile || isRarFile,isWarFile);
      }
    }
 else {
      final Set<VirtualFile> subDeploymentFiles=new HashSet<VirtualFile>();
      for (      final ModuleMetaData module : earMetaData.getModules()) {
        if (!SUPPORTED_MODULE_TYPES.contains(module.getType())) {
          EeLogger.ROOT_LOGGER.ignoringUnsupportedModuleType(module.getFileName());
          continue;
        }
        final VirtualFile moduleFile=virtualFile.getChild(module.getFileName());
        if (!moduleFile.exists()) {
          throw MESSAGES.cannotProcessEarModule(virtualFile,module.getFileName());
        }
        subDeploymentFiles.add(moduleFile);
        final boolean webArchive=module.getType() == ModuleType.Web;
        final ResourceRoot childResource=this.createResourceRoot(deploymentUnit,moduleFile,true,webArchive);
        childResource.putAttachment(org.jboss.as.ee.structure.Attachments.MODULE_META_DATA,module);
        if (!webArchive) {
          ModuleRootMarker.mark(childResource);
        }
        final String alternativeDD=module.getAlternativeDD();
        if (alternativeDD != null && alternativeDD.trim().length() > 0) {
          final VirtualFile alternateDeploymentDescriptor=deploymentRoot.getRoot().getChild(alternativeDD);
          if (!alternateDeploymentDescriptor.exists()) {
            throw MESSAGES.alternateDeploymentDescriptor(alternateDeploymentDescriptor,moduleFile);
          }
switch (module.getType()) {
case Client:
            childResource.putAttachment(org.jboss.as.ee.structure.Attachments.ALTERNATE_CLIENT_DEPLOYMENT_DESCRIPTOR,alternateDeploymentDescriptor);
          break;
case Connector:
        childResource.putAttachment(org.jboss.as.ee.structure.Attachments.ALTERNATE_CONNECTOR_DEPLOYMENT_DESCRIPTOR,alternateDeploymentDescriptor);
      break;
case Ejb:
    childResource.putAttachment(org.jboss.as.ee.structure.Attachments.ALTERNATE_EJB_DEPLOYMENT_DESCRIPTOR,alternateDeploymentDescriptor);
  break;
case Web:
childResource.putAttachment(org.jboss.as.ee.structure.Attachments.ALTERNATE_WEB_DEPLOYMENT_DESCRIPTOR,alternateDeploymentDescriptor);
break;
}
}
}
for (final VirtualFile child : childArchives) {
if (subDeploymentFiles.contains(child)) {
continue;
}
final String fileName=child.getName().toLowerCase(Locale.ENGLISH);
if (fileName.endsWith(SAR_EXTENSION) || fileName.endsWith(JAR_EXTENSION)) {
this.createResourceRoot(deploymentUnit,child,false,false);
}
}
}
}
 catch (IOException e) {
throw MESSAGES.failedToProcessChild(e,virtualFile);
}
}
