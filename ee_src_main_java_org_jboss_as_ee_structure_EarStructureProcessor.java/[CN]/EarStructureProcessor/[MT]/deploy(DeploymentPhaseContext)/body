{
  final DeploymentUnit deploymentUnit=phaseContext.getDeploymentUnit();
  if (!isEarDeployment(deploymentUnit)) {
    return;
  }
  final ResourceRoot resourceRoot=phaseContext.getDeploymentUnit().getAttachment(Attachments.DEPLOYMENT_ROOT);
  final VirtualFile virtualFile=resourceRoot.getRoot();
  resourceRoot.putAttachment(Attachments.INDEX_RESOURCE_ROOT,false);
  ModuleRootMarker.markRoot(resourceRoot,false);
  deploymentUnit.putAttachment(Attachments.PROCESS_CHILD_ANNOTATION_INDEX,false);
  deploymentUnit.putAttachment(Attachments.COMPUTE_COMPOSITE_ANNOTATION_INDEX,false);
  String libDirName=DEFAULT_LIB_DIR;
  final EarConfig earConfig=deploymentUnit.getAttachment(EarConfig.ATTACHMENT_KEY);
  if (earConfig != null) {
    final EarMetaData earMetaData=earConfig.getEarMetaData();
    if (earMetaData instanceof Ear6xMetaData) {
      final String xmlLibDirName=Ear6xMetaData.class.cast(earMetaData).getLibraryDirectory();
      if (xmlLibDirName != null) {
        libDirName=xmlLibDirName;
      }
    }
  }
  try {
    final List<VirtualFile> childArchives=new ArrayList<VirtualFile>(virtualFile.getChildren(CHILD_ARCHIVE_FILTER));
    if (!libDirName.isEmpty()) {
      final VirtualFile libDir=virtualFile.getChild(libDirName);
      if (libDir.exists()) {
        childArchives.addAll(libDir.getChildren(CHILD_ARCHIVE_FILTER));
      }
    }
    for (    final VirtualFile child : childArchives) {
      final Closeable closable=child.isFile() ? VFS.mountZip(child,child,TempFileProviderService.provider()) : NO_OP_CLOSEABLE;
      final MountHandle mountHandle=new MountHandle(closable);
      final ResourceRoot childResource=new ResourceRoot(child,mountHandle);
      if (child.getName().toLowerCase().endsWith(JAR_EXTENSION)) {
        ModuleRootMarker.markRoot(childResource);
      }
 else {
        childResource.putAttachment(Attachments.INDEX_RESOURCE_ROOT,false);
        SubDeploymentMarker.markRoot(childResource);
      }
      deploymentUnit.addToAttachmentList(Attachments.RESOURCE_ROOTS,childResource);
    }
  }
 catch (  IOException e) {
    throw new DeploymentUnitProcessingException("Failed to process children for EAR [" + virtualFile + "]",e);
  }
}
