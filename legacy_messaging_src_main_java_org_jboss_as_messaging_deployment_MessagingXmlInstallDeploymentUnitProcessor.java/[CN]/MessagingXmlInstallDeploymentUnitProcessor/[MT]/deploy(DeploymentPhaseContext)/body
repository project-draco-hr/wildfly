{
  final DeploymentUnit deploymentUnit=phaseContext.getDeploymentUnit();
  final List<ParseResult> parseResults=deploymentUnit.getAttachmentList(MessagingAttachments.PARSE_RESULT);
  final DeploymentResourceSupport deploymentResourceSupport=deploymentUnit.getAttachment(Attachments.DEPLOYMENT_RESOURCE_SUPPORT);
  for (  final ParseResult parseResult : parseResults) {
    for (    final JmsDestination topic : parseResult.getTopics()) {
      final ServiceName hqServiceName=MessagingServices.getHornetQServiceName(topic.getServer());
      String[] jndiBindings=null;
      if (topic.getDestination().hasDefined(CommonAttributes.DESTINATION_ENTRIES.getName())) {
        final ModelNode entries=topic.getDestination().resolve().get(CommonAttributes.DESTINATION_ENTRIES.getName());
        jndiBindings=JMSServices.getJndiBindings(entries);
      }
      JMSTopicService.installService(topic.getName(),hqServiceName,phaseContext.getServiceTarget(),jndiBindings);
      final PathElement serverElement=PathElement.pathElement(HORNETQ_SERVER,topic.getServer());
      final PathElement destination=PathElement.pathElement(JMS_TOPIC,topic.getName());
      deploymentResourceSupport.getDeploymentSubModel(MessagingExtension.SUBSYSTEM_NAME,serverElement);
      PathAddress registration=PathAddress.pathAddress(serverElement,destination);
      createDeploymentSubModel(registration,deploymentUnit);
      JMSTopicConfigurationRuntimeHandler.INSTANCE.registerResource(topic.getServer(),topic.getName(),topic.getDestination());
    }
    for (    final JmsDestination queue : parseResult.getQueues()) {
      final ServiceName hqServiceName=MessagingServices.getHornetQServiceName(queue.getServer());
      String[] jndiBindings=null;
      final ModelNode destination=queue.getDestination();
      if (destination.hasDefined(CommonAttributes.DESTINATION_ENTRIES.getName())) {
        final ModelNode entries=destination.resolve().get(CommonAttributes.DESTINATION_ENTRIES.getName());
        jndiBindings=JMSServices.getJndiBindings(entries);
      }
      final String selector=destination.hasDefined(SELECTOR.getName()) ? destination.get(SELECTOR.getName()).resolve().asString() : null;
      final boolean durable=destination.hasDefined(DURABLE.getName()) ? destination.get(DURABLE.getName()).resolve().asBoolean() : false;
      JMSQueueService.installService(queue.getName(),phaseContext.getServiceTarget(),hqServiceName,selector,durable,jndiBindings);
      final PathElement serverElement=PathElement.pathElement(HORNETQ_SERVER,queue.getServer());
      final PathElement dest=PathElement.pathElement(JMS_QUEUE,queue.getName());
      deploymentResourceSupport.getDeploymentSubModel(MessagingExtension.SUBSYSTEM_NAME,serverElement);
      PathAddress registration=PathAddress.pathAddress(serverElement,dest);
      createDeploymentSubModel(registration,deploymentUnit);
      JMSQueueConfigurationRuntimeHandler.INSTANCE.registerResource(queue.getServer(),queue.getName(),destination);
    }
  }
}
