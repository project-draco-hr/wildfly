{
  mdr.getValue().registerJndiMapping(url.toExternalForm(),ao.getClass().getName(),jndi);
  log.infof("Registerred admin object at %s on mdr",jndi);
  final AdminObjectService adminObjectService=new AdminObjectService(ao);
  final ServiceName adminObjectServiceName=AdminObjectService.SERVICE_NAME_BASE.append(jndi);
  serviceTarget.addService(adminObjectServiceName,adminObjectService).setInitialMode(ServiceController.Mode.ACTIVE).install();
  final AdminObjectReferenceFactoryService referenceFactoryService=new AdminObjectReferenceFactoryService();
  final ServiceName referenceFactoryServiceName=AdminObjectReferenceFactoryService.SERVICE_NAME_BASE.append(jndi);
  serviceTarget.addService(referenceFactoryServiceName,referenceFactoryService).addDependency(adminObjectServiceName,Object.class,referenceFactoryService.getDataSourceInjector()).setInitialMode(ServiceController.Mode.ACTIVE).install();
  final BinderService binderService=new BinderService(jndi.substring(6));
  final ServiceName binderServiceName=ContextNames.JAVA_CONTEXT_SERVICE_NAME.append(jndi);
  serviceTarget.addService(binderServiceName,binderService).addDependency(referenceFactoryServiceName,ManagedReferenceFactory.class,binderService.getManagedObjectInjector()).addDependency(ContextNames.JAVA_CONTEXT_SERVICE_NAME,NamingStore.class,binderService.getNamingStoreInjector()).addListener(new AbstractServiceListener<Object>(){
    public void serviceStarted(    ServiceController<?> controller){
      log.infof("Bound JCA AdminObject [%s]",jndi);
    }
    public void serviceStopped(    ServiceController<?> serviceController){
      log.infof("Unbound JCA AdminObject [%s]",jndi);
    }
    public void serviceRemoved(    ServiceController<?> serviceController){
      log.debugf("Removed JCA AdminObject [%s]",jndi);
      serviceController.removeListener(this);
    }
  }
).setInitialMode(ServiceController.Mode.ACTIVE).install();
  return new String[]{jndi};
}
