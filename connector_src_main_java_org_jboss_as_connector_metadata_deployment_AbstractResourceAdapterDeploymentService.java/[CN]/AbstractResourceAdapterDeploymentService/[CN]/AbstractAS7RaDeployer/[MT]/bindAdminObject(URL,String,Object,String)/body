{
  mdr.getValue().registerJndiMapping(url.toExternalForm(),ao.getClass().getName(),jndi);
  log.infof("Registerred admin object at %s",jndi);
  final AdminObjectService adminObjectService=new AdminObjectService(ao);
  final ServiceName adminObjectServiceName=AdminObjectService.SERVICE_NAME_BASE.append(jndi);
  serviceTarget.addService(adminObjectServiceName,adminObjectService).setInitialMode(ServiceController.Mode.ACTIVE).install();
  final AdminObjectReferenceFactoryService referenceFactoryService=new AdminObjectReferenceFactoryService();
  final ServiceName referenceFactoryServiceName=AdminObjectReferenceFactoryService.SERVICE_NAME_BASE.append(jndi);
  serviceTarget.addService(referenceFactoryServiceName,referenceFactoryService).addDependency(adminObjectServiceName,Object.class,referenceFactoryService.getDataSourceInjector()).setInitialMode(ServiceController.Mode.ACTIVE).install();
  final ContextNames.BindInfo bindInfo=ContextNames.bindInfoFor(jndi);
  final BinderService binderService=new BinderService(bindInfo.getBindName());
  final ServiceName binderServiceName=bindInfo.getBinderServiceName();
  serviceTarget.addService(binderServiceName,binderService).addDependency(referenceFactoryServiceName,ManagedReferenceFactory.class,binderService.getManagedObjectInjector()).addDependency(bindInfo.getParentContextServiceName(),ServiceBasedNamingStore.class,binderService.getNamingStoreInjector()).addListener(new AbstractServiceListener<Object>(){
    public void transition(    final ServiceController<? extends Object> controller,    final ServiceController.Transition transition){
switch (transition) {
case STARTING_to_UP:
{
          log.infof("Bound JCA AdminObject [%s]",jndi);
          break;
        }
case STOPPING_to_DOWN:
{
        log.infof("Unbound JCA AdminObject [%s]",jndi);
        break;
      }
case REMOVING_to_REMOVED:
{
      log.debugf("Removed JCA AdminObject [%s]",jndi);
    }
}
}
}
).setInitialMode(ServiceController.Mode.ACTIVE).install();
return new String[]{jndi};
}
