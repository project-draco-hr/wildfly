{
  ClassInfo klass=beanClass;
  while (klass != null) {
    Map<DotName,List<AnnotationInstance>> annotationsOnBean=klass.annotations();
    if (annotationsOnBean == null || annotationsOnBean.isEmpty()) {
      klass=getSuperClass(klass,index);
      continue;
    }
    final List<AnnotationInstance> permitAllAnnotations=annotationsOnBean.get(PERMIT_ALL_DOT_NAME);
    if (permitAllAnnotations == null || permitAllAnnotations.isEmpty()) {
      klass=getSuperClass(klass,index);
      continue;
    }
    for (    final AnnotationInstance permitAllAnnotation : permitAllAnnotations) {
      final AnnotationTarget target=permitAllAnnotation.target();
      if (target instanceof ClassInfo) {
        componentDescription.applyPermitAllOnAllViewsForClass(((ClassInfo)target).name().toString());
      }
 else       if (target instanceof MethodInfo) {
        final MethodInfo methodInfo=(MethodInfo)target;
        final EJBMethodIdentifier ejbMethodIdentifier=EJBMethodIdentifier.fromMethodInfo(methodInfo);
        componentDescription.applyPermitAllOnAllViewsForMethod(ejbMethodIdentifier);
      }
    }
    klass=this.getSuperClass(klass,index);
  }
}
