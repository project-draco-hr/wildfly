{
  final ProcessControllerClient client;
  try {
    final ProtocolClient.Configuration configuration=new ProtocolClient.Configuration();
    configuration.setReadExecutor(Executors.newCachedThreadPool());
    configuration.setServerAddress(new InetSocketAddress(environment.getProcessControllerAddress(),environment.getProcessControllerPort().intValue()));
    final ThreadFactory threadFactory=new JBossThreadFactory(new ThreadGroup("ProcessControllerConnection-threads"),Boolean.FALSE,null,"%G - %t",null,null,AccessController.getContext());
    configuration.setThreadFactory(threadFactory);
    configuration.setSocketFactory(SocketFactory.getDefault());
    client=ProcessControllerClient.connect(configuration,authCode,new ProcessMessageHandler(){
      @Override public void handleProcessAdded(      final ProcessControllerClient client,      final String processName){
      }
      @Override public void handleProcessStarted(      final ProcessControllerClient client,      final String processName){
        if (serverInventory == null) {
          throw new IllegalStateException("No server inventory");
        }
      }
      @Override public void handleProcessStopped(      final ProcessControllerClient client,      final String processName,      final long uptimeMillis){
        if (serverInventory == null) {
          throw new IllegalStateException("No server inventory");
        }
        serverInventory.serverStopped(processName);
      }
      @Override public void handleProcessRemoved(      final ProcessControllerClient client,      final String processName){
      }
      @Override public void handleProcessInventory(      final ProcessControllerClient client,      final Map<String,ProcessInfo> inventory){
        serverInventory.processInventory(inventory);
      }
      @Override public void handleConnectionShutdown(      final ProcessControllerClient client){
      }
      @Override public void handleConnectionFailure(      final ProcessControllerClient client,      final IOException cause){
      }
      @Override public void handleConnectionFinished(      final ProcessControllerClient client){
      }
    }
);
  }
 catch (  IOException e) {
    throw new StartException(e);
  }
  this.client=client;
}
