{
  try {
    this.onBeforeInvocation(wsInvocation);
    final ComponentView ejbContainer=this.getEjb3Container();
    final Method seiMethod=wsInvocation.getJavaMethod();
    final Serializable sessionId=null;
    final Map<String,Object> contextData=getWebServiceContext(wsInvocation).getMessageContext();
    final Method implMethod=seiMethod;
    final Object[] args=wsInvocation.getArgs();
    final ComponentViewInstance ejbInstance=ejbContainer.createInstance();
    final InterceptorContext interceptorContext=new InterceptorContext();
    final Method method=lookupProperMethod(implMethod,ejbInstance.allowedMethods());
    interceptorContext.setMethod(method);
    interceptorContext.setContextData(contextData);
    interceptorContext.setParameters(args);
    interceptorContext.setTarget(ejbInstance.createProxy());
    interceptorContext.putPrivateData(Component.class,ejbInstance.getComponent());
    final Object retObj=ejbInstance.getEntryPoint(method).processInvocation(interceptorContext);
    wsInvocation.setReturnValue(retObj);
  }
 catch (  Throwable t) {
    this.log.error("Method invocation failed with exception: " + t.getMessage(),t);
    this.handleInvocationException(t);
  }
 finally {
    this.onAfterInvocation(wsInvocation);
  }
}
