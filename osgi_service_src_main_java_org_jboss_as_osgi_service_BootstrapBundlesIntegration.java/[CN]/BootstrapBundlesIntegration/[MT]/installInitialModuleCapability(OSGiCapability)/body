{
  String identifier=configcap.getIdentifier();
  if (isValidModuleIdentifier(identifier)) {
    ModuleIdentifier moduleId=ModuleIdentifier.fromString(identifier);
    File bundleFile=ModuleIdentityRepository.getRepositoryEntry(bundlesPath,moduleId);
    if (bundleFile == null) {
      LOGGER.tracef("Installing initial module capability: %s",identifier);
      final Module module;
      try {
        ModuleLoader moduleLoader=Module.getBootModuleLoader();
        module=moduleLoader.loadModule(moduleId);
      }
 catch (      ModuleLoadException ex) {
        throw MESSAGES.cannotResolveInitialCapability(ex,identifier);
      }
      final OSGiMetaData metadata=getModuleMetadata(module);
      final BundleContext syscontext=injectedSystemContext.getValue();
      XBundleRevisionBuilderFactory factory=new XBundleRevisionBuilderFactory(){
        @Override public XBundleRevision createResource(){
          return new AbstractBundleRevisionAdaptor(syscontext,module);
        }
      }
;
      XBundleRevision brev;
      XResourceBuilder<XBundleRevision> builder=XBundleRevisionBuilderFactory.create(factory);
      if (metadata != null) {
        builder.loadFrom(metadata);
        brev=builder.getResource();
        brev.addAttachment(IntegrationConstants.OSGI_METADATA_KEY,metadata);
      }
 else {
        builder.loadFrom(module);
        brev=builder.getResource();
      }
      injectedEnvironment.getValue().installResources(brev);
      Integer startlevel=configcap.getStartLevel();
      if (startlevel != null && startlevel > 0) {
        XBundle bundle=brev.getBundle();
        BundleStartLevel bundleStartLevel=bundle.adapt(BundleStartLevel.class);
        bundleStartLevel.setStartLevel(startlevel);
      }
      return true;
    }
  }
  return false;
}
