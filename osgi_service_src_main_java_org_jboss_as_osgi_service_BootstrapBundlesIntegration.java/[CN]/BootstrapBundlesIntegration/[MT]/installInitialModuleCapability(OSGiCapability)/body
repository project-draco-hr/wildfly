{
  String identifier=configcap.getIdentifier();
  if (isValidModuleIdentifier(identifier)) {
    ModuleIdentifier moduleId=ModuleIdentifier.fromString(identifier);
    File bundleFile=ModuleIdentityRepository.getRepositoryEntry(bundlesDir,moduleId);
    if (bundleFile == null) {
      LOGGER.tracef("Installing initial module capability: %s",identifier);
      final Module module;
      try {
        ModuleLoader moduleLoader=Module.getBootModuleLoader();
        module=moduleLoader.loadModule(moduleId);
      }
 catch (      ModuleLoadException ex) {
        throw MESSAGES.cannotResolveInitialCapability(ex,identifier);
      }
      final OSGiMetaData metadata=getModuleMetadata(module);
      final BundleContext syscontext=injectedSystemContext.getValue();
      XBundleRevisionBuilderFactory factory=new XBundleRevisionBuilderFactory(){
        @Override public XBundleRevision createResource(){
          return new AbstractBundleRevisionAdaptor(syscontext,module);
        }
      }
;
      XResource resource;
      XResourceBuilder builder=XBundleRevisionBuilderFactory.create(factory);
      if (metadata != null) {
        builder.loadFrom(metadata);
        resource=builder.getResource();
        resource.addAttachment(OSGiMetaData.class,metadata);
      }
 else {
        builder.loadFrom(module);
        resource=builder.getResource();
      }
      injectedEnvironment.getValue().installResources(resource);
      return true;
    }
  }
  return false;
}
