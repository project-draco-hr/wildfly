{
  String identifier=configcap.getIdentifier();
  Integer level=configcap.getStartLevel();
  Deployment deployment=null;
  if (isValidModuleIdentifier(identifier)) {
    ModuleIdentifier moduleId=ModuleIdentifier.fromString(identifier);
    File bundleFile=ModuleIdentityRepository.getRepositoryEntry(bundlesDir,moduleId);
    if (bundleFile != null) {
      LOGGER.tracef("Installing initial bundle capability: %s",identifier);
      URL bundleURL=bundleFile.toURI().toURL();
      deployment=getDeploymentFromURL(bundleURL,identifier,level);
    }
  }
 else   if (isValidMavenIdentifier(identifier)) {
    LOGGER.tracef("Installing initial maven capability: %s",identifier);
    XRepository repository=injectedRepository.getValue();
    MavenCoordinates mavenId=MavenCoordinates.parse(identifier);
    Requirement req=XRequirementBuilder.create(mavenId).getRequirement();
    Collection<Capability> caps=repository.findProviders(req);
    if (caps.isEmpty() == false) {
      XResource resource=(XResource)caps.iterator().next().getResource();
      XCapability ccap=(XCapability)resource.getCapabilities(ContentNamespace.CONTENT_NAMESPACE).get(0);
      URL bundleURL=new URL((String)ccap.getAttribute(ContentNamespace.CAPABILITY_URL_ATTRIBUTE));
      deployment=getDeploymentFromURL(bundleURL,identifier,level);
    }
  }
  if (deployment == null)   throw MESSAGES.cannotResolveInitialCapability(null,identifier);
  return deployment;
}
