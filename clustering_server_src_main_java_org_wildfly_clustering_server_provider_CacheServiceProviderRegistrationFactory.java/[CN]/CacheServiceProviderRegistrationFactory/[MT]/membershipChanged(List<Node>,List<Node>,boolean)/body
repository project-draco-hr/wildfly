{
  if (this.getGroup().isCoordinator()) {
    final Set<Node> deadNodes=new HashSet<>(previousMembers);
    deadNodes.removeAll(members);
    final Set<Node> newNodes=new HashSet<>(members);
    newNodes.removeAll(previousMembers);
    Operation<Void> operation=new Operation<Void>(){
      @Override public Void invoke(      Cache<Object,Set<Node>> cache){
        if (!deadNodes.isEmpty()) {
          for (          Object service : cache.keySet()) {
            Set<Node> nodes=cache.get(service);
            if (nodes != null) {
              if (nodes.removeAll(deadNodes)) {
                cache.getAdvancedCache().withFlags(Flag.IGNORE_RETURN_VALUES).replace(service,nodes);
              }
            }
          }
        }
        if (merged) {
          for (          Node node : newNodes) {
            List<Object> services=CacheServiceProviderRegistrationFactory.this.getServices(node);
            for (            Object service : services) {
              Set<Node> nodes=new HashSet<>(Collections.singleton(node));
              Set<Node> existing=cache.getAdvancedCache().withFlags(Flag.FORCE_SYNCHRONOUS).putIfAbsent(service,nodes);
              if (existing != null) {
                if (existing.add(node)) {
                  cache.getAdvancedCache().withFlags(Flag.IGNORE_RETURN_VALUES).replace(service,existing);
                }
              }
            }
          }
        }
        return null;
      }
    }
;
    this.invoker.invoke(this.cache,operation);
  }
}
