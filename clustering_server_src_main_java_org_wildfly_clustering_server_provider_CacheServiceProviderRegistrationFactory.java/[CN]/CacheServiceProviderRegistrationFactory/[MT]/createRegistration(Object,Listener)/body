{
  if (this.listeners.putIfAbsent(service,listener) != null) {
    throw new IllegalArgumentException(service.toString());
  }
  final Node node=this.group.getLocalNode();
  Operation<Set<Node>> operation=new Operation<Set<Node>>(){
    @Override public Set<Node> invoke(    Cache<Object,Set<Node>> cache){
      Set<Node> nodes=new HashSet<>(Collections.singleton(node));
      Set<Node> existing=cache.getAdvancedCache().withFlags(Flag.FORCE_SYNCHRONOUS).putIfAbsent(service,nodes);
      if (existing != null) {
        if (existing.add(node)) {
          cache.getAdvancedCache().withFlags(Flag.IGNORE_RETURN_VALUES).replace(service,existing);
        }
      }
      return (existing != null) ? existing : nodes;
    }
  }
;
  this.invoker.invoke(this.cache,operation);
  return new AbstractServiceProviderRegistration(service,this){
    @Override public void close(){
      if (CacheServiceProviderRegistrationFactory.this.listeners.remove(service) != null) {
        final Node node=CacheServiceProviderRegistrationFactory.this.getGroup().getLocalNode();
        Operation<Void> operation=new Operation<Void>(){
          @Override public Void invoke(          Cache<Object,Set<Node>> cache){
            Set<Node> nodes=cache.get(service);
            if ((nodes != null) && nodes.remove(node)) {
              if (nodes.isEmpty()) {
                cache.remove(service);
              }
 else {
                cache.replace(service,nodes);
              }
            }
            return null;
          }
        }
;
        CacheServiceProviderRegistrationFactory.this.invoker.invoke(CacheServiceProviderRegistrationFactory.this.cache,operation,Flag.IGNORE_RETURN_VALUES);
      }
    }
  }
;
}
