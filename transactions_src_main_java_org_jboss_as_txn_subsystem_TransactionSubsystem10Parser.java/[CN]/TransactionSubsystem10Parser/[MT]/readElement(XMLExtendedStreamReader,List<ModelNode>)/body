{
  if (reader.getAttributeCount() > 0) {
    throw unexpectedAttribute(reader,0);
  }
  final ModelNode address=new ModelNode();
  address.add(ModelDescriptionConstants.SUBSYSTEM,TransactionExtension.SUBSYSTEM_NAME);
  address.protect();
  final ModelNode subsystem=new ModelNode();
  subsystem.get(OP).set(ADD);
  subsystem.get(OP_ADDR).set(address);
  list.add(subsystem);
  final EnumSet<Element> required=EnumSet.of(Element.RECOVERY_ENVIRONMENT,Element.CORE_ENVIRONMENT);
  final EnumSet<Element> encountered=EnumSet.noneOf(Element.class);
  while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
switch (Namespace.forUri(reader.getNamespaceURI())) {
case TRANSACTIONS_1_0:
{
        final Element element=Element.forName(reader.getLocalName());
        required.remove(element);
        if (!encountered.add(element)) {
          throw unexpectedElement(reader);
        }
switch (element) {
case RECOVERY_ENVIRONMENT:
{
            parseRecoveryEnvironmentElement(reader,subsystem);
            break;
          }
case CORE_ENVIRONMENT:
{
          parseCoreEnvironmentElement(reader,subsystem);
          break;
        }
case COORDINATOR_ENVIRONMENT:
{
        parseCoordinatorEnvironmentElement(reader,subsystem);
        break;
      }
case OBJECT_STORE:
{
      parseObjectStoreEnvironmentElementAndEnrichOperation(reader,subsystem);
      break;
    }
default :
{
    throw unexpectedElement(reader);
  }
}
break;
}
default :
{
throw unexpectedElement(reader);
}
}
}
if (!required.isEmpty()) {
throw missingRequiredElement(reader,required);
}
final ModelNode logStoreAddress=address.clone();
final ModelNode operation=new ModelNode();
operation.get(OP).set(ADD);
logStoreAddress.add(LogStoreConstants.LOG_STORE,LogStoreConstants.LOG_STORE);
logStoreAddress.protect();
operation.get(OP_ADDR).set(logStoreAddress);
list.add(operation);
}
