{
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    requireNoNamespaceAttribute(reader,i);
    final String value=reader.getAttributeValue(i);
    final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case NODE_IDENTIFIER:
      TransactionSubsystemAdd.NODE_IDENTIFIER.parseAndSetParameter(value,operation,reader.getLocation());
    break;
case PATH:
  TransactionSubsystemAdd.PATH.parseAndSetParameter(value,operation,reader.getLocation());
break;
case RELATIVE_TO:
TransactionSubsystemAdd.RELATIVE_TO.parseAndSetParameter(value,operation,reader.getLocation());
break;
default :
throw unexpectedAttribute(reader,i);
}
}
final EnumSet<Element> required=EnumSet.of(Element.PROCESS_ID);
final EnumSet<Element> encountered=EnumSet.noneOf(Element.class);
while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
final Element element=Element.forName(reader.getLocalName());
required.remove(element);
switch (element) {
case PROCESS_ID:
{
if (!encountered.add(element)) {
throw duplicateNamedElement(reader,reader.getLocalName());
}
parseProcessIdEnvironmentElement(reader,operation);
break;
}
default :
throw unexpectedElement(reader);
}
}
if (!required.isEmpty()) {
throw missingRequiredElement(reader,required);
}
}
