{
  if (context instanceof BootOperationContext) {
    final BootOperationContext updateContext=(BootOperationContext)context;
    logger.info("Activating EE subsystem");
    updateContext.addDeploymentProcessor(Phase.STRUCTURE,Phase.STRUCTURE_EAR_DEPLOYMENT_INIT,new EarInitializationProcessor());
    updateContext.addDeploymentProcessor(Phase.STRUCTURE,Phase.STRUCTURE_EAR_APP_XML_PARSE,new EarMetaDataParsingProcessor());
    updateContext.addDeploymentProcessor(Phase.STRUCTURE,Phase.STRUCTURE_EAR_JBOSS_APP_XML_PARSE,new JBossAppMetaDataParsingProcessor());
    updateContext.addDeploymentProcessor(Phase.STRUCTURE,Phase.STRUCTURE_EAR,new EarStructureProcessor());
    updateContext.addDeploymentProcessor(Phase.STRUCTURE,Phase.STRUCTURE_EJB_JAR_IN_EAR,new EjbJarDeploymentProcessor());
    updateContext.addDeploymentProcessor(Phase.STRUCTURE,Phase.STRUCTURE_MANAGED_BEAN_JAR_IN_EAR,new ManagedBeanSubDeploymentMarkingProcessor());
    updateContext.addDeploymentProcessor(Phase.STRUCTURE,Phase.STRUCTURE_EE_MODULE_INIT,new EEModuleInitialProcessor());
    updateContext.addDeploymentProcessor(Phase.PARSE,Phase.PARSE_MANAGED_BEAN_ANNOTATION,new ManagedBeanAnnotationProcessor());
    updateContext.addDeploymentProcessor(Phase.PARSE,Phase.PARSE_EE_MODULE_NAME,new EEModuleNameProcessor());
    updateContext.addDeploymentProcessor(Phase.PARSE,Phase.PARSE_EAR_LIB_CLASS_PATH,new EarLibManifestClassPathProcessor());
    updateContext.addDeploymentProcessor(Phase.DEPENDENCIES,Phase.DEPENDENCIES_MANAGED_BEAN,new ManagedBeanDependencyProcessor());
    updateContext.addDeploymentProcessor(Phase.POST_MODULE,Phase.POST_MODULE_BEAN_INTERCEPTOR_ANNOTATION,new ComponentInterceptorAnnotationParsingProcessor());
    updateContext.addDeploymentProcessor(Phase.POST_MODULE,Phase.POST_MODULE_LIEFCYCLE_ANNOTATION,new LifecycleAnnotationParsingProcessor());
    updateContext.addDeploymentProcessor(Phase.POST_MODULE,Phase.POST_MODULE_AROUNDINVOKE_ANNOTATION,new InterceptorAnnotationParsingProcessor());
    updateContext.addDeploymentProcessor(Phase.POST_MODULE,Phase.POST_MODULE_RESOURCE_INJECTION_ANNOTATION,new ResourceInjectionAnnotationParsingProcessor());
    updateContext.addDeploymentProcessor(Phase.POST_MODULE,Phase.POST_MODULE_VALIDATOR_FACTORY,new BeanValidationFactoryDeployer());
    updateContext.addDeploymentProcessor(Phase.POST_MODULE,Phase.POST_MODULE_EAR_DEPENDENCY,new EarDependencyProcessor());
    updateContext.addDeploymentProcessor(Phase.INSTALL,Phase.INSTALL_MODULE_CONTEXT,new ModuleContextProcessor());
    updateContext.addDeploymentProcessor(Phase.INSTALL,Phase.INSTALL_APP_CONTEXT,new ApplicationContextProcessor());
    updateContext.addDeploymentProcessor(Phase.INSTALL,Phase.INSTALL_EE_COMP_LAZY_BINDING_SOURCE_HANDLER,new ComponentLazyBindingSourceProcessor());
    updateContext.addDeploymentProcessor(Phase.INSTALL,Phase.INSTALL_EE_COMPONENT,new ComponentInstallProcessor());
    updateContext.addDeploymentProcessor(Phase.INSTALL,Phase.INSTALL_EAR_AGGREGATE_COMPONENT_INDEX,new ComponentAggregationProcessor());
  }
  final ModelNode compensatingOperation=new ModelNode();
  compensatingOperation.get(OP).set(REMOVE);
  compensatingOperation.get(OP_ADDR).set(operation.require(OP_ADDR));
  context.getSubModel().setEmptyObject();
  resultHandler.handleResultComplete();
  return new BasicOperationResult(compensatingOperation);
}
