{
  final EEJndiViewExtension extension=new EEJndiViewExtension();
  context.getServiceTarget().addService(EEJndiViewExtension.SERVICE_NAME,extension).addDependency(JndiViewExtensionRegistry.SERVICE_NAME,JndiViewExtensionRegistry.class,extension.getRegistryInjector()).addListener(verificationHandler).install();
  final boolean appclient=context.getProcessType() == ProcessType.APPLICATION_CLIENT;
  final ModelNode globalModules=GlobalModulesDefinition.INSTANCE.resolveModelAttribute(context,model);
  final boolean earSubDeploymentsIsolated=EeSubsystemRootResource.EAR_SUBDEPLOYMENTS_ISOLATED.resolveModelAttribute(context,model).asBoolean();
  final boolean specDescriptorPropertyReplacement=EeSubsystemRootResource.SPEC_DESCRIPTOR_PROPERTY_REPLACEMENT.resolveModelAttribute(context,model).asBoolean();
  final boolean jbossDescriptorPropertyReplacement=EeSubsystemRootResource.JBOSS_DESCRIPTOR_PROPERTY_REPLACEMENT.resolveModelAttribute(context,model).asBoolean();
  final boolean ejbAnnotationPropertyReplacement=EeSubsystemRootResource.ANNOTATION_PROPERTY_REPLACEMENT.resolveModelAttribute(context,model).asBoolean();
  moduleDependencyProcessor.setGlobalModules(GlobalModulesDefinition.createModuleList(context,globalModules));
  isolationProcessor.setEarSubDeploymentsIsolated(earSubDeploymentsIsolated);
  specDescriptorPropertyReplacementProcessor.setDescriptorPropertyReplacement(specDescriptorPropertyReplacement);
  jbossDescriptorPropertyReplacementProcessor.setDescriptorPropertyReplacement(jbossDescriptorPropertyReplacement);
  ejbAnnotationPropertyReplacementProcessor.setDescriptorPropertyReplacement(ejbAnnotationPropertyReplacement);
  context.addStep(new AbstractDeploymentChainStep(){
    protected void execute(    DeploymentProcessorTarget processorTarget){
      ROOT_LOGGER.debug("Activating EE subsystem");
      processorTarget.addDeploymentProcessor(EeExtension.SUBSYSTEM_NAME,Phase.STRUCTURE,Phase.STRUCTURE_EE_DEPLOYMENT_PROPERTIES,new DeploymentPropertiesProcessor());
      processorTarget.addDeploymentProcessor(EeExtension.SUBSYSTEM_NAME,Phase.STRUCTURE,Phase.STRUCTURE_EE_DEPLOYMENT_PROPERTY_RESOLVER,new DeploymentPropertyResolverProcessor());
      processorTarget.addDeploymentProcessor(EeExtension.SUBSYSTEM_NAME,Phase.STRUCTURE,Phase.STRUCTURE_EE_VAULT_PROPERTY_RESOLVER,new VaultPropertyResolverProcessor());
      processorTarget.addDeploymentProcessor(EeExtension.SUBSYSTEM_NAME,Phase.STRUCTURE,Phase.STRUCTURE_EE_SYSTEM_PROPERTY_RESOLVER,new SystemPropertyResolverProcessor());
      processorTarget.addDeploymentProcessor(EeExtension.SUBSYSTEM_NAME,Phase.STRUCTURE,Phase.STRUCTURE_EE_PROPERTY_RESOLVER,new PropertyResolverProcessor());
      processorTarget.addDeploymentProcessor(EeExtension.SUBSYSTEM_NAME,Phase.STRUCTURE,Phase.STRUCTURE_REGISTER_JBOSS_ALL_EE_APP,new JBossAllXmlParserRegisteringProcessor<JBossAppMetaData>(AppJBossAllParser.ROOT_ELEMENT,AppJBossAllParser.ATTACHMENT_KEY,new AppJBossAllParser()));
      processorTarget.addDeploymentProcessor(EeExtension.SUBSYSTEM_NAME,Phase.STRUCTURE,Phase.STRUCTURE_EE_SPEC_DESC_PROPERTY_REPLACEMENT,specDescriptorPropertyReplacementProcessor);
      processorTarget.addDeploymentProcessor(EeExtension.SUBSYSTEM_NAME,Phase.STRUCTURE,Phase.STRUCTURE_EE_JBOSS_DESC_PROPERTY_REPLACEMENT,jbossDescriptorPropertyReplacementProcessor);
      processorTarget.addDeploymentProcessor(EeExtension.SUBSYSTEM_NAME,Phase.STRUCTURE,Phase.STRUCTURE_EE_EJB_ANNOTATION_PROPERTY_REPLACEMENT,ejbAnnotationPropertyReplacementProcessor);
      processorTarget.addDeploymentProcessor(EeExtension.SUBSYSTEM_NAME,Phase.STRUCTURE,Phase.STRUCTURE_EAR_DEPLOYMENT_INIT,new EarInitializationProcessor());
      processorTarget.addDeploymentProcessor(EeExtension.SUBSYSTEM_NAME,Phase.STRUCTURE,Phase.STRUCTURE_EAR_APP_XML_PARSE,new EarMetaDataParsingProcessor());
      processorTarget.addDeploymentProcessor(EeExtension.SUBSYSTEM_NAME,Phase.STRUCTURE,Phase.STRUCTURE_JBOSS_EJB_CLIENT_XML_PARSE,new EJBClientDescriptorParsingProcessor());
      processorTarget.addDeploymentProcessor(EeExtension.SUBSYSTEM_NAME,Phase.STRUCTURE,Phase.STRUCTURE_EJB_EAR_APPLICATION_NAME,new EarApplicationNameProcessor());
      processorTarget.addDeploymentProcessor(EeExtension.SUBSYSTEM_NAME,Phase.STRUCTURE,Phase.STRUCTURE_EAR,new EarStructureProcessor());
      processorTarget.addDeploymentProcessor(EeExtension.SUBSYSTEM_NAME,Phase.STRUCTURE,Phase.STRUCTURE_EJB_JAR_IN_EAR,new EjbJarDeploymentProcessor());
      processorTarget.addDeploymentProcessor(EeExtension.SUBSYSTEM_NAME,Phase.STRUCTURE,Phase.STRUCTURE_APPLICATION_CLIENT_IN_EAR,new ApplicationClientDeploymentProcessor());
      processorTarget.addDeploymentProcessor(EeExtension.SUBSYSTEM_NAME,Phase.STRUCTURE,Phase.STRUCTURE_MANAGED_BEAN_JAR_IN_EAR,new ManagedBeanSubDeploymentMarkingProcessor());
      processorTarget.addDeploymentProcessor(EeExtension.SUBSYSTEM_NAME,Phase.STRUCTURE,Phase.STRUCTURE_EE_MODULE_INIT,new EEModuleInitialProcessor(context.getProcessType() == ProcessType.APPLICATION_CLIENT));
      processorTarget.addDeploymentProcessor(EeExtension.SUBSYSTEM_NAME,Phase.STRUCTURE,Phase.STRUCTURE_EE_RESOURCE_INJECTION_REGISTRY,new ResourceReferenceRegistrySetupProcessor());
      processorTarget.addDeploymentProcessor(EeExtension.SUBSYSTEM_NAME,Phase.STRUCTURE,Phase.STRUCTURE_GLOBAL_MODULES,moduleDependencyProcessor);
      processorTarget.addDeploymentProcessor(EeExtension.SUBSYSTEM_NAME,Phase.PARSE,Phase.PARSE_EE_MODULE_NAME,new EEModuleNameProcessor());
      processorTarget.addDeploymentProcessor(EeExtension.SUBSYSTEM_NAME,Phase.PARSE,Phase.PARSE_EE_ANNOTATIONS,new EEAnnotationProcessor());
      processorTarget.addDeploymentProcessor(EeExtension.SUBSYSTEM_NAME,Phase.PARSE,Phase.PARSE_LIFECYCLE_ANNOTATION,new LifecycleAnnotationParsingProcessor());
      processorTarget.addDeploymentProcessor(EeExtension.SUBSYSTEM_NAME,Phase.PARSE,Phase.PARSE_AROUNDINVOKE_ANNOTATION,new AroundInvokeAnnotationParsingProcessor());
      processorTarget.addDeploymentProcessor(EeExtension.SUBSYSTEM_NAME,Phase.PARSE,Phase.PARSE_EAR_SUBDEPLOYMENTS_ISOLATION_DEFAULT,isolationProcessor);
      processorTarget.addDeploymentProcessor(EeExtension.SUBSYSTEM_NAME,Phase.PARSE,Phase.PARSE_DISTINCT_NAME,new EEDistinctNameProcessor());
      processorTarget.addDeploymentProcessor(EeExtension.SUBSYSTEM_NAME,Phase.PARSE,Phase.PARSE_EAR_MESSAGE_DESTINATIONS,new EarMessageDestinationProcessor());
      processorTarget.addDeploymentProcessor(EeExtension.SUBSYSTEM_NAME,Phase.PARSE,Phase.PARSE_MANAGED_BEAN_ANNOTATION,new ManagedBeanAnnotationProcessor());
      processorTarget.addDeploymentProcessor(EeExtension.SUBSYSTEM_NAME,Phase.PARSE,Phase.PARSE_DESCRIPTOR_LIFECYCLE_METHOD_RESOLUTION,new DescriptorEnvironmentLifecycleMethodProcessor());
      processorTarget.addDeploymentProcessor(EeExtension.SUBSYSTEM_NAME,Phase.DEPENDENCIES,Phase.DEPENDENCIES_EE_PERMISSIONS,new EEDefaultPermissionsProcessor());
      processorTarget.addDeploymentProcessor(EeExtension.SUBSYSTEM_NAME,Phase.DEPENDENCIES,Phase.DEPENDENCIES_MANAGED_BEAN,new JavaEEDependencyProcessor());
      processorTarget.addDeploymentProcessor(EeExtension.SUBSYSTEM_NAME,Phase.DEPENDENCIES,Phase.DEPENDENCIES_EE_CLASS_DESCRIPTIONS,new ApplicationClassesAggregationProcessor());
      processorTarget.addDeploymentProcessor(EeExtension.SUBSYSTEM_NAME,Phase.POST_MODULE,Phase.POST_MODULE_VALIDATOR_FACTORY,new BeanValidationFactoryDeployer());
      processorTarget.addDeploymentProcessor(EeExtension.SUBSYSTEM_NAME,Phase.POST_MODULE,Phase.POST_MODULE_EAR_DEPENDENCY,new EarDependencyProcessor());
      processorTarget.addDeploymentProcessor(EeExtension.SUBSYSTEM_NAME,Phase.POST_MODULE,Phase.POST_INITIALIZE_IN_ORDER,new InitializeInOrderProcessor());
      processorTarget.addDeploymentProcessor(EeExtension.SUBSYSTEM_NAME,Phase.POST_MODULE,Phase.POST_MODULE_INJECTION_ANNOTATION,new ResourceInjectionAnnotationParsingProcessor());
      processorTarget.addDeploymentProcessor(EeExtension.SUBSYSTEM_NAME,Phase.POST_MODULE,Phase.POST_MODULE_ENV_ENTRY,new ResourceReferenceProcessor());
      processorTarget.addDeploymentProcessor(EeExtension.SUBSYSTEM_NAME,Phase.POST_MODULE,Phase.POST_MODULE_INTERCEPTOR_ANNOTATIONS,new InterceptorAnnotationProcessor());
      processorTarget.addDeploymentProcessor(EeExtension.SUBSYSTEM_NAME,Phase.POST_MODULE,Phase.POST_MODULE_NAMING_CONTEXT,new ModuleContextProcessor());
      processorTarget.addDeploymentProcessor(EeExtension.SUBSYSTEM_NAME,Phase.POST_MODULE,Phase.POST_MODULE_IN_APP_CLIENT,new InApplicationClientBindingProcessor(appclient));
      processorTarget.addDeploymentProcessor(EeExtension.SUBSYSTEM_NAME,Phase.POST_MODULE,Phase.POST_MODULE_EE_INSTANCE_NAME,new InstanceNameBindingProcessor());
      processorTarget.addDeploymentProcessor(EeExtension.SUBSYSTEM_NAME,Phase.POST_MODULE,Phase.POST_MODULE_APP_NAMING_CONTEXT,new ApplicationContextProcessor());
      processorTarget.addDeploymentProcessor(EeExtension.SUBSYSTEM_NAME,Phase.POST_MODULE,Phase.POST_MODULE_EE_CONCURRENT_CONTEXT,new EEConcurrentContextProcessor());
      processorTarget.addDeploymentProcessor(EeExtension.SUBSYSTEM_NAME,Phase.INSTALL,Phase.INSTALL_RESOLVE_MESSAGE_DESTINATIONS,new MessageDestinationResolutionProcessor());
      processorTarget.addDeploymentProcessor(EeExtension.SUBSYSTEM_NAME,Phase.INSTALL,Phase.INSTALL_COMPONENT_AGGREGATION,new ComponentAggregationProcessor());
      processorTarget.addDeploymentProcessor(EeExtension.SUBSYSTEM_NAME,Phase.INSTALL,Phase.INSTALL_DEFAULT_BINDINGS_EE_CONCURRENCY,new EEConcurrentDefaultBindingProcessor());
      processorTarget.addDeploymentProcessor(EeExtension.SUBSYSTEM_NAME,Phase.INSTALL,Phase.INSTALL_MODULE_JNDI_BINDINGS,new ModuleJndiBindingProcessor());
      processorTarget.addDeploymentProcessor(EeExtension.SUBSYSTEM_NAME,Phase.INSTALL,Phase.INSTALL_EE_MODULE_CONFIG,new EEModuleConfigurationProcessor());
      processorTarget.addDeploymentProcessor(EeExtension.SUBSYSTEM_NAME,Phase.INSTALL,Phase.INSTALL_EE_COMPONENT,new ComponentInstallProcessor());
      processorTarget.addDeploymentProcessor(EeExtension.SUBSYSTEM_NAME,Phase.CLEANUP,Phase.CLEANUP_EE,new EECleanUpProcessor());
    }
  }
,OperationContext.Stage.RUNTIME);
  newControllers.add(context.getServiceTarget().addService(ReflectiveClassIntrospector.SERVICE_NAME,new ReflectiveClassIntrospector()).addListener(verificationHandler).install());
}
