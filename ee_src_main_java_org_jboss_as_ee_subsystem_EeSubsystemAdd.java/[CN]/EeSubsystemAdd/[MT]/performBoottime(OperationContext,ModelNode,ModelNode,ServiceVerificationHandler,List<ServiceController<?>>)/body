{
  final EEJndiViewExtension extension=new EEJndiViewExtension();
  context.getServiceTarget().addService(EEJndiViewExtension.SERVICE_NAME,extension).addDependency(JndiViewExtensionRegistry.SERVICE_NAME,JndiViewExtensionRegistry.class,extension.getRegistryInjector()).addListener(verificationHandler).install();
  final ModelNode globalModules=GlobalModulesDefinition.INSTANCE.resolveModelAttribute(context,model);
  final boolean earSubDeploymentsIsolated=EeSubsystemRootResource.EAR_SUBDEPLOYMENTS_ISOLATED.resolveModelAttribute(context,model).asBoolean();
  context.addStep(new AbstractDeploymentChainStep(){
    protected void execute(    DeploymentProcessorTarget processorTarget){
      moduleDependencyProcessor.setGlobalModules(globalModules);
      isolationProcessor.setEarSubDeploymentsIsolated(earSubDeploymentsIsolated);
      logger.info("Activating EE subsystem");
      processorTarget.addDeploymentProcessor(Phase.STRUCTURE,Phase.STRUCTURE_EAR_DEPLOYMENT_INIT,new EarInitializationProcessor());
      processorTarget.addDeploymentProcessor(Phase.STRUCTURE,Phase.STRUCTURE_EAR_APP_XML_PARSE,new EarMetaDataParsingProcessor());
      processorTarget.addDeploymentProcessor(Phase.STRUCTURE,Phase.STRUCTURE_EAR_JBOSS_APP_XML_PARSE,new JBossAppMetaDataParsingProcessor());
      processorTarget.addDeploymentProcessor(Phase.STRUCTURE,Phase.STRUCTURE_EJB_EAR_APPLICATION_NAME,new EarApplicationNameProcessor());
      processorTarget.addDeploymentProcessor(Phase.STRUCTURE,Phase.STRUCTURE_EAR,new EarStructureProcessor());
      processorTarget.addDeploymentProcessor(Phase.STRUCTURE,Phase.STRUCTURE_EJB_JAR_IN_EAR,new EjbJarDeploymentProcessor());
      processorTarget.addDeploymentProcessor(Phase.STRUCTURE,Phase.STRUCTURE_APPLICATION_CLIENT_IN_EAR,new ApplicationClientDeploymentProcessor());
      processorTarget.addDeploymentProcessor(Phase.STRUCTURE,Phase.STRUCTURE_MANAGED_BEAN_JAR_IN_EAR,new ManagedBeanSubDeploymentMarkingProcessor());
      processorTarget.addDeploymentProcessor(Phase.STRUCTURE,Phase.STRUCTURE_EE_MODULE_INIT,new EEModuleInitialProcessor());
      processorTarget.addDeploymentProcessor(Phase.PARSE,Phase.PARSE_MANAGED_BEAN_ANNOTATION,new ManagedBeanAnnotationProcessor());
      processorTarget.addDeploymentProcessor(Phase.PARSE,Phase.PARSE_EE_MODULE_NAME,new EEModuleNameProcessor());
      processorTarget.addDeploymentProcessor(Phase.PARSE,Phase.PARSE_EAR_LIB_CLASS_PATH,new EarLibManifestClassPathProcessor());
      processorTarget.addDeploymentProcessor(Phase.PARSE,Phase.PARSE_INTERCEPTORS_ANNOTATION,new InterceptorsAnnotationParsingProcessor());
      processorTarget.addDeploymentProcessor(Phase.PARSE,Phase.PARSE_LIEFCYCLE_ANNOTATION,new LifecycleAnnotationParsingProcessor());
      processorTarget.addDeploymentProcessor(Phase.PARSE,Phase.PARSE_AROUNDINVOKE_ANNOTATION,new AroundInvokeAnnotationParsingProcessor());
      processorTarget.addDeploymentProcessor(Phase.PARSE,Phase.PARSE_EAR_SUBDEPLOYMENTS_ISOLATION_DEFAULT,isolationProcessor);
      processorTarget.addDeploymentProcessor(Phase.PARSE,Phase.PARSE_DATA_SOURCE_DEFINITION_ANNOTATION,new DataSourceDefinitionAnnotationParser());
      processorTarget.addDeploymentProcessor(Phase.PARSE,Phase.PARSE_DISTINCT_NAME,new EEDistinctNameProcessor());
      processorTarget.addDeploymentProcessor(Phase.DEPENDENCIES,Phase.DEPENDENCIES_MANAGED_BEAN,new JavaEEDependencyProcessor());
      processorTarget.addDeploymentProcessor(Phase.DEPENDENCIES,Phase.DEPENDENCIES_GLOBAL_MODULES,moduleDependencyProcessor);
      processorTarget.addDeploymentProcessor(Phase.DEPENDENCIES,Phase.DEPENDENCIES_EE_CLASS_DESCRIPTIONS,new ApplicationClassesAggregationProcessor());
      processorTarget.addDeploymentProcessor(Phase.POST_MODULE,Phase.POST_MODULE_VALIDATOR_FACTORY,new BeanValidationFactoryDeployer());
      processorTarget.addDeploymentProcessor(Phase.POST_MODULE,Phase.POST_MODULE_EAR_DEPENDENCY,new EarDependencyProcessor());
      processorTarget.addDeploymentProcessor(Phase.POST_MODULE,Phase.POST_INITIALIZE_IN_ORDER,new InitalizeInOrderProcessor());
      processorTarget.addDeploymentProcessor(Phase.POST_MODULE,Phase.POST_MODULE_INJECTION_ANNOTATION,new ResourceInjectionAnnotationParsingProcessor());
      processorTarget.addDeploymentProcessor(Phase.POST_MODULE,Phase.POST_MODULE_ENV_ENTRY,new ResourceReferenceProcessor());
      processorTarget.addDeploymentProcessor(Phase.POST_MODULE,Phase.POST_MODULE_DATASOURCE_REF,new DataSourceDefinitionDeploymentDescriptorParser());
      processorTarget.addDeploymentProcessor(Phase.INSTALL,Phase.INSTALL_COMPONENT_AGGREGATION,new ComponentAggregationProcessor());
      processorTarget.addDeploymentProcessor(Phase.INSTALL,Phase.INSTALL_MODULE_CONTEXT,new ModuleContextProcessor());
      processorTarget.addDeploymentProcessor(Phase.INSTALL,Phase.INSTALL_APP_CONTEXT,new ApplicationContextProcessor());
      processorTarget.addDeploymentProcessor(Phase.INSTALL,Phase.INSTALL_MODULE_JNDI_BINDINGS,new ModuleJndiBindingProcessor());
      processorTarget.addDeploymentProcessor(Phase.INSTALL,Phase.INSTALL_EE_MODULE_CONFIG,new EEModuleConfigurationProcessor());
      processorTarget.addDeploymentProcessor(Phase.INSTALL,Phase.INSTALL_EE_COMPONENT,new ComponentInstallProcessor());
      processorTarget.addDeploymentProcessor(Phase.CLEANUP,Phase.CLEANUP_EE,new EECleanUpProcessor());
    }
  }
,OperationContext.Stage.RUNTIME);
}
