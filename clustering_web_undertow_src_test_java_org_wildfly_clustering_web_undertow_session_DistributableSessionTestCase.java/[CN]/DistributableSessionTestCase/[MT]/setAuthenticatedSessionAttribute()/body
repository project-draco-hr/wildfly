{
  SessionManager<LocalSessionContext,Batch> manager=mock(SessionManager.class);
  Batcher<Batch> batcher=mock(Batcher.class);
  BatchContext context=mock(BatchContext.class);
  String name=CachedAuthenticatedSessionHandler.class.getName() + ".AuthenticatedSession";
  SessionAttributes attributes=mock(SessionAttributes.class);
  Account account=mock(Account.class);
  AuthenticatedSession auth=new AuthenticatedSession(account,HttpServletRequest.FORM_AUTH);
  Account oldAccount=mock(Account.class);
  AuthenticatedSession oldAuth=new AuthenticatedSession(oldAccount,HttpServletRequest.FORM_AUTH);
  when(this.manager.getSessionManager()).thenReturn(manager);
  when(manager.getBatcher()).thenReturn(batcher);
  when(batcher.resumeBatch(this.batch)).thenReturn(context);
  when(this.session.getAttributes()).thenReturn(attributes);
  when(attributes.setAttribute(name,auth)).thenReturn(oldAuth);
  AuthenticatedSession result=(AuthenticatedSession)this.adapter.setAttribute(name,auth);
  assertSame(oldAccount,result.getAccount());
  assertSame(HttpServletRequest.FORM_AUTH,result.getMechanism());
  verify(context).close();
  reset(context);
  when(attributes.setAttribute(name,auth)).thenReturn(null);
  result=(AuthenticatedSession)this.adapter.setAttribute(name,auth);
  assertNull(result);
  verify(context).close();
  reset(context);
  auth=new AuthenticatedSession(account,HttpServletRequest.BASIC_AUTH);
  AuthenticatedSession oldSession=new AuthenticatedSession(oldAccount,HttpServletRequest.BASIC_AUTH);
  LocalSessionContext localContext=mock(LocalSessionContext.class);
  when(this.session.getLocalContext()).thenReturn(localContext);
  when(localContext.getAuthenticatedSession()).thenReturn(oldSession);
  result=(AuthenticatedSession)this.adapter.setAttribute(name,auth);
  verify(localContext).setAuthenticatedSession(same(auth));
  verify(context).close();
}
