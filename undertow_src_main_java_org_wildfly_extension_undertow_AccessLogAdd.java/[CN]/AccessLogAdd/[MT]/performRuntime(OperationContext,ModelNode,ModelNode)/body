{
  final PathAddress address=context.getCurrentAddress();
  final PathAddress hostAddress=address.getParent();
  final PathAddress serverAddress=hostAddress.getParent();
  final String worker=AccessLogDefinition.WORKER.resolveModelAttribute(context,model).asString();
  final String pattern=AccessLogDefinition.PATTERN.resolveModelAttribute(context,model).asString();
  final String directory=AccessLogDefinition.DIRECTORY.resolveModelAttribute(context,model).asString();
  final String filePrefix=AccessLogDefinition.PREFIX.resolveModelAttribute(context,model).asString();
  final String fileSuffix=AccessLogDefinition.SUFFIX.resolveModelAttribute(context,model).asString();
  final boolean useServerLog=AccessLogDefinition.USE_SERVER_LOG.resolveModelAttribute(context,model).asBoolean();
  final boolean rotate=AccessLogDefinition.ROTATE.resolveModelAttribute(context,model).asBoolean();
  final ModelNode relativeToNode=AccessLogDefinition.RELATIVE_TO.resolveModelAttribute(context,model);
  final String relativeTo=relativeToNode.isDefined() ? relativeToNode.asString() : null;
  final AccessLogService service;
  if (useServerLog) {
    service=new AccessLogService(pattern);
  }
 else {
    service=new AccessLogService(pattern,directory,relativeTo,filePrefix,fileSuffix,rotate);
  }
  final String serverName=serverAddress.getLastElement().getValue();
  final String hostName=hostAddress.getLastElement().getValue();
  final ServiceName serviceName=UndertowService.accessLogServiceName(serverName,hostName);
  final ServiceBuilder<AccessLogService> builder=context.getServiceTarget().addService(serviceName,service).addDependency(IOServices.WORKER.append(worker),XnioWorker.class,service.getWorker()).addDependency(PathManagerService.SERVICE_NAME,PathManager.class,service.getPathManager()).addDependency(UndertowService.virtualHostName(serverName,hostName),Host.class,service.getHost());
  builder.setInitialMode(ServiceController.Mode.ACTIVE).install();
}
