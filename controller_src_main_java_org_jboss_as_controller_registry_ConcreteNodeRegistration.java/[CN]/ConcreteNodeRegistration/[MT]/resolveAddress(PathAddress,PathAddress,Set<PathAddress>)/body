{
  final PathAddress current=address.subAddress(base.size());
  final Iterator<PathElement> iterator=current.iterator();
  if (iterator.hasNext()) {
    final PathElement next=iterator.next();
    final NodeSubregistry subregistry=children.get(next.getKey());
    if (subregistry == null) {
      return;
    }
    if (next.isWildcard()) {
      for (      final String key : subregistry.getChildNames()) {
        final PathElement element=PathElement.pathElement(next.getKey(),key);
        subregistry.resolveAddress(address,base,element,addresses);
      }
    }
 else     if (next.isMultiTarget()) {
      for (      final String value : next.getSegments()) {
        final PathElement element=PathElement.pathElement(next.getKey(),value);
        subregistry.resolveAddress(address,base,element,addresses);
      }
    }
 else {
      final PathElement element=PathElement.pathElement(next.getKey(),next.getValue());
      subregistry.resolveAddress(address,base,element,addresses);
    }
  }
 else {
    addresses.add(base);
  }
}
