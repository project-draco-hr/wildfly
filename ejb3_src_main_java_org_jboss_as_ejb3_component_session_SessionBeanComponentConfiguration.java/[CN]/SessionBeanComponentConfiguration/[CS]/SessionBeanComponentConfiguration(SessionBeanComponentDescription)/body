{
  super(description);
  if (description.allowsConcurrentAccess()) {
    this.beanLevelLockType=description.getBeanLevelLockType();
    this.beanLevelAccessTimeout=description.getBeanLevelAccessTimeout();
    this.methodLevelLockTypes=description.getMethodApplicableLockTypes();
    this.methodAccessTimeouts=description.getMethodApplicableAccessTimeouts();
    if (description.getConcurrencyManagementType() != ConcurrencyManagementType.BEAN) {
      this.addComponentInstanceSystemInterceptorFactory(new ComponentInterceptorFactory(){
        @Override protected Interceptor create(        Component component,        InterceptorFactoryContext context){
          if (component instanceof LockableComponent) {
            return new ContainerManagedConcurrencyInterceptor((LockableComponent)component);
          }
 else {
            return new Interceptor(){
              @Override public Object processInvocation(              InterceptorContext interceptorContext) throws Exception {
                return interceptorContext.proceed();
              }
            }
;
          }
        }
      }
);
    }
  }
}
