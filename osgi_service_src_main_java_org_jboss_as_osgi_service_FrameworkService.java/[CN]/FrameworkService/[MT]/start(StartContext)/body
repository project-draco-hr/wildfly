{
  log.infof("Starting OSGi Framework");
  try {
    final BundleManager bundleManager=injectedBundleManager.getValue();
    framework=bundleManager.getFrameworkState();
    framework.start();
    BundleContext sysContext=framework.getBundleContext();
    MBeanServer mbeanServer=injectedMBeanServer.getValue();
    sysContext.registerService(MBeanServer.class.getName(),mbeanServer,null);
    ServiceContainer serviceContainer=context.getController().getServiceContainer();
    sysContext.registerService(ServiceContainer.class.getName(),serviceContainer,null);
    List<Deployment> deployments=new ArrayList<Deployment>();
    BundleDeploymentPlugin depPlugin=bundleManager.getPlugin(BundleDeploymentPlugin.class);
    for (    OSGiModule moduleMetaData : subsystemState.getModules()) {
      ModuleIdentifier identifier=moduleMetaData.getIdentifier();
      ModuleLoader moduleLoader=Module.getSystemModuleLoader();
      Module module=moduleLoader.loadModule(identifier);
      Deployment dep=depPlugin.createDeployment(module);
      dep.setAutoStart(moduleMetaData.isStart());
      deployments.add(dep);
    }
    DeployerService service=new SystemDeployerService(sysContext){
      @Override protected Bundle installBundle(      Deployment dep) throws BundleException {
        AbstractBundle bundleState=bundleManager.installBundle(dep);
        return bundleState.getBundleWrapper();
      }
    }
;
    service.deploy(deployments.toArray(new Deployment[deployments.size()]));
  }
 catch (  Throwable t) {
    throw new StartException("Failed to start OSGi Framework: " + framework,t);
  }
}
