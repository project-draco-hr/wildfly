{
  final PathAddress address=PathAddress.pathAddress(operation.get(OP_ADDR));
  final String servletContainerName=address.getElement(address.size() - 2).getValue();
  ModelNode nameValue=NAME.resolveModelAttribute(context,model);
  ModelNode domainValue=DOMAIN.resolveModelAttribute(context,model);
  ModelNode commentValue=COMMENT.resolveModelAttribute(context,model);
  ModelNode secureValue=SECURE.resolveModelAttribute(context,model);
  ModelNode httpOnlyValue=HTTP_ONLY.resolveModelAttribute(context,model);
  ModelNode maxAgeValue=MAX_AGE.resolveModelAttribute(context,model);
  final String name=nameValue.isDefined() ? nameValue.asString() : null;
  final String domain=domainValue.isDefined() ? domainValue.asString() : null;
  final String comment=commentValue.isDefined() ? commentValue.asString() : null;
  final Boolean secure=secureValue.isDefined() ? secureValue.asBoolean() : null;
  final Boolean httpOnly=httpOnlyValue.isDefined() ? httpOnlyValue.asBoolean() : null;
  final Integer maxAge=maxAgeValue.isDefined() ? maxAgeValue.asInt() : null;
  final SessionCookieConfigService service=new SessionCookieConfigService(name,domain,comment,httpOnly,secure,maxAge);
  ServiceBuilder<SessionCookieConfigService> builder=context.getServiceTarget().addService(SessionCookieConfigService.SERVICE_NAME.append(servletContainerName),service);
  if (verificationHandler != null) {
    builder.addListener(verificationHandler);
  }
  ServiceController<SessionCookieConfigService> controller=builder.install();
  if (newControllers != null) {
    newControllers.add(controller);
  }
}
