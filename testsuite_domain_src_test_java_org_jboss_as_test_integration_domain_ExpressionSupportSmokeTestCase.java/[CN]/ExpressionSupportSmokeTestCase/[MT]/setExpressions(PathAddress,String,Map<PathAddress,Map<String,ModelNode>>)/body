{
  ModelNode description=readResourceDescription(address);
  ModelNode resource=readResource(address,true);
  ModelNode resourceNoDefaults=readResource(address,false);
  Map<String,ModelNode> expressionAttrs=new HashMap<String,ModelNode>();
  Map<String,ModelNode> otherAttrs=new HashMap<String,ModelNode>();
  Map<String,ModelNode> expectedAttrs=new HashMap<String,ModelNode>();
  organizeAttributes(address,description,resource,resourceNoDefaults,expressionAttrs,otherAttrs,expectedAttrs);
  for (  Map.Entry<String,ModelNode> entry : expressionAttrs.entrySet()) {
    writeAttribute(address,entry.getKey(),entry.getValue());
  }
  for (  Map.Entry<String,ModelNode> entry : otherAttrs.entrySet()) {
    writeAttribute(address,entry.getKey(),entry.getValue());
  }
  if (expectedAttrs.size() > 0) {
    ModelNode modifiedResource=readResource(address,true);
    for (    Map.Entry<String,ModelNode> entry : expectedAttrs.entrySet()) {
      ModelNode expectedValue=entry.getValue();
      ModelNode modVal=modifiedResource.get(entry.getKey());
      validateAttributeValue(address,entry.getKey(),expectedValue,modVal);
    }
  }
  expectedValues.put(address,expectedAttrs);
  boolean isHost=address.size() == 1 && HOST.equals(address.getLastElement().getKey());
  for (  Property descProp : description.get(CHILDREN).asPropertyList()) {
    String childType=descProp.getName();
    if (isHost && SERVER.equals(childType)) {
      continue;
    }
    boolean hostChild=address.size() == 0 && HOST.equals(childType);
    List<String> children=readChildrenNames(address,childType);
    for (    String child : children) {
      if (!hostChild || hostName.equals(child)) {
        setExpressions(address.append(PathElement.pathElement(childType,child)),hostName,expectedValues);
      }
    }
  }
}
