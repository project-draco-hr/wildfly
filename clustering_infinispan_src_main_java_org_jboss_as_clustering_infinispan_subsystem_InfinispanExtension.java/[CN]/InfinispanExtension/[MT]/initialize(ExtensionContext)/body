{
  SubsystemRegistration subsystem=context.registerSubsystem(SUBSYSTEM_NAME,Namespace.CURRENT.getMajorVersion(),Namespace.CURRENT.getMinorVersion());
  subsystem.registerXMLElementWriter(new InfinispanSubsystemXMLWriter());
  ManagementResourceRegistration registration=subsystem.registerSubsystemModel(InfinispanSubsystemProviders.SUBSYSTEM);
  registration.registerOperationHandler(ADD,InfinispanSubsystemAdd.INSTANCE,InfinispanSubsystemProviders.SUBSYSTEM_ADD,false);
  registration.registerOperationHandler(DESCRIBE,InfinispanSubsystemDescribe.INSTANCE,InfinispanSubsystemProviders.SUBSYSTEM_DESCRIBE,false,EntryType.PRIVATE);
  registration.registerOperationHandler(REMOVE,ReloadRequiredRemoveStepHandler.INSTANCE,InfinispanSubsystemProviders.SUBSYSTEM_REMOVE,false);
  ManagementResourceRegistration container=registration.registerSubModel(containerPath,InfinispanSubsystemProviders.CACHE_CONTAINER);
  container.registerOperationHandler(ADD,CacheContainerAdd.INSTANCE,InfinispanSubsystemProviders.CACHE_CONTAINER_ADD,false);
  container.registerOperationHandler(REMOVE,CacheContainerRemove.INSTANCE,InfinispanSubsystemProviders.CACHE_CONTAINER_REMOVE,false);
  container.registerOperationHandler("add-alias",AddAliasCommand.INSTANCE,InfinispanSubsystemProviders.ADD_ALIAS,false);
  container.registerOperationHandler("remove-alias",RemoveAliasCommand.INSTANCE,InfinispanSubsystemProviders.REMOVE_ALIAS,false);
  CacheContainerWriteAttributeHandler.INSTANCE.registerAttributes(container);
  final ManagementResourceRegistration transport=container.registerSubModel(transportPath,InfinispanSubsystemProviders.TRANSPORT);
  transport.registerOperationHandler(ADD,TransportAdd.INSTANCE,InfinispanSubsystemProviders.TRANSPORT_ADD,false);
  transport.registerOperationHandler(REMOVE,TransportRemove.INSTANCE,InfinispanSubsystemProviders.TRANSPORT_REMOVE,false);
  TransportWriteAttributeHandler.INSTANCE.registerAttributes(transport);
  ManagementResourceRegistration local=container.registerSubModel(localCachePath,InfinispanSubsystemProviders.LOCAL_CACHE);
  local.registerOperationHandler(ADD,LocalCacheAdd.INSTANCE,InfinispanSubsystemProviders.LOCAL_CACHE_ADD,false);
  local.registerOperationHandler(REMOVE,CacheRemove.INSTANCE,InfinispanSubsystemProviders.CACHE_REMOVE,false);
  registerCommonCacheAttributeHandlers(local);
  ManagementResourceRegistration invalidation=container.registerSubModel(invalidationCachePath,InfinispanSubsystemProviders.INVALIDATION_CACHE);
  invalidation.registerOperationHandler(ADD,InvalidationCacheAdd.INSTANCE,InfinispanSubsystemProviders.INVALIDATION_CACHE_ADD,false);
  invalidation.registerOperationHandler(REMOVE,CacheRemove.INSTANCE,InfinispanSubsystemProviders.CACHE_REMOVE,false);
  registerCommonCacheAttributeHandlers(invalidation);
  ManagementResourceRegistration replicated=container.registerSubModel(replicatedCachePath,InfinispanSubsystemProviders.REPLICATED_CACHE);
  replicated.registerOperationHandler(ADD,ReplicatedCacheAdd.INSTANCE,InfinispanSubsystemProviders.REPLICATED_CACHE_ADD,false);
  replicated.registerOperationHandler(REMOVE,CacheRemove.INSTANCE,InfinispanSubsystemProviders.CACHE_REMOVE,false);
  registerCommonCacheAttributeHandlers(replicated);
  ManagementResourceRegistration distributed=container.registerSubModel(distributedCachePath,InfinispanSubsystemProviders.DISTRIBUTED_CACHE);
  distributed.registerOperationHandler(ADD,DistributedCacheAdd.INSTANCE,InfinispanSubsystemProviders.DISTRIBUTED_CACHE_ADD,false);
  distributed.registerOperationHandler(REMOVE,CacheRemove.INSTANCE,InfinispanSubsystemProviders.CACHE_REMOVE,false);
  registerCommonCacheAttributeHandlers(distributed);
}
