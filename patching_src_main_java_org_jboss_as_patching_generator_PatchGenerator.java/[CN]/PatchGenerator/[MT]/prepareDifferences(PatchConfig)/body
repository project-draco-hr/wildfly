{
  for (  Map.Entry<DistributionContentItem.Type,Map<ModificationType,SortedSet<DistributionContentItem>>> entry : patchConfig.getSpecifiedContent().entrySet()) {
switch (entry.getKey()) {
case MODULE_ROOT:
      for (      Map.Entry<ModificationType,SortedSet<DistributionContentItem>> modEntry : entry.getValue().entrySet()) {
switch (modEntry.getKey()) {
case ADD:
          for (          DistributionContentItem item : modEntry.getValue()) {
            recordModuleAdd(item);
          }
        break;
case MODIFY:
      for (      DistributionContentItem item : modEntry.getValue()) {
        recordModuleUpdateViaContentChange(item);
      }
    break;
case REMOVE:
  for (  DistributionContentItem item : modEntry.getValue()) {
    recordModuleRemove(item);
  }
break;
default :
throw new IllegalStateException();
}
}
break;
case BUNDLE_ROOT:
for (Map.Entry<ModificationType,SortedSet<DistributionContentItem>> modEntry : entry.getValue().entrySet()) {
switch (modEntry.getKey()) {
case ADD:
for (DistributionContentItem item : modEntry.getValue()) {
recordBundleAdd(item);
}
break;
case MODIFY:
for (DistributionContentItem item : modEntry.getValue()) {
recordBundleUpdate(item);
}
break;
case REMOVE:
for (DistributionContentItem item : modEntry.getValue()) {
recordBundleRemove(item);
}
break;
default :
throw new IllegalStateException();
}
}
break;
case MISC:
for (Map.Entry<ModificationType,SortedSet<DistributionContentItem>> modEntry : entry.getValue().entrySet()) {
switch (modEntry.getKey()) {
case ADD:
for (DistributionContentItem item : modEntry.getValue()) {
recordMiscFileAdd(item);
}
break;
case MODIFY:
for (DistributionContentItem item : modEntry.getValue()) {
recordMiscFileUpdate(item,patchConfig);
}
break;
case REMOVE:
for (DistributionContentItem item : modEntry.getValue()) {
recordMiscFileRemove(item,patchConfig);
}
break;
default :
throw new IllegalStateException();
}
}
break;
default :
throw new IllegalStateException();
}
}
}
