{
  final DeploymentUnit deploymentUnit=phaseContext.getDeploymentUnit();
  final ConnectorXmlDescriptor connectorXmlDescriptor=deploymentUnit.getAttachment(ConnectorXmlDescriptor.ATTACHMENT_KEY);
  if (connectorXmlDescriptor == null) {
    return;
  }
  final ResourceAdapters raxmls=getResourceAdaptersAttachment(deploymentUnit);
  if (raxmls == null)   return;
  log.tracef("processing Raxml");
  Module module=deploymentUnit.getAttachment(Attachments.MODULE);
  if (module == null)   throw new DeploymentUnitProcessingException("Failed to get module attachment for " + deploymentUnit);
  try {
    final ServiceTarget serviceTarget=phaseContext.getServiceTarget();
    for (    org.jboss.jca.common.api.metadata.resourceadapter.ResourceAdapter raxml : raxmls.getResourceAdapters()) {
      String archive=raxml.getArchive();
      URL deployment=null;
      Set<String> deployments=mdr.getResourceAdapters();
      for (      String s : deployments) {
        if (s.endsWith(archive) || s.endsWith(archive.substring(0,archive.indexOf(".rar"))))         deployment=new URL(s);
      }
      if (deployment != null) {
        Connector cmd=mdr.getResourceAdapter(deployment.toExternalForm());
        IronJacamar ijmd=mdr.getIronJacamar(deployment.toExternalForm());
        File root=mdr.getRoot(deployment.toExternalForm());
        cmd=(new Merger()).mergeConnectorWithCommonIronJacamar(raxml,cmd);
        String deploymentName=archive.substring(0,archive.indexOf(".rar"));
        ResourceAdapterXmlDeploymentService service=new ResourceAdapterXmlDeploymentService(connectorXmlDescriptor,raxml,cmd,ijmd,module,deploymentName,root);
        serviceTarget.addService(ConnectorServices.RESOURCE_ADAPTER_XML_SERVICE_PREFIX.append(deploymentName),service).addDependency(ConnectorServices.IRONJACAMAR_MDR,MetadataRepository.class,service.getMdrInjector()).addDependency(ConnectorServices.RA_REPOSISTORY_SERVICE,ResourceAdapterRepository.class,service.getRaRepositoryInjector()).addDependency(ConnectorServices.MANAGEMENT_REPOSISTORY_SERVICE,ManagementRepository.class,service.getManagementRepositoryInjector()).addDependency(ConnectorServices.RESOURCE_ADAPTER_REGISTRY_SERVICE,ResourceAdapterDeploymentRegistry.class,service.getRegistryInjector()).addDependency(ConnectorServices.JNDI_STRATEGY_SERVICE,JndiStrategy.class,service.getJndiInjector()).addDependency(ConnectorServices.TRANSACTION_INTEGRATION_SERVICE,TransactionIntegration.class,service.getTxIntegrationInjector()).addDependency(ConnectorServices.CONNECTOR_CONFIG_SERVICE,ConnectorSubsystemConfiguration.class,service.getConfigInjector()).addDependency(SubjectFactoryService.SERVICE_NAME,SubjectFactory.class,service.getSubjectFactoryInjector()).addDependency(NamingService.SERVICE_NAME).setInitialMode(Mode.ACTIVE).install();
      }
    }
  }
 catch (  Throwable t) {
    throw new DeploymentUnitProcessingException(t);
  }
}
