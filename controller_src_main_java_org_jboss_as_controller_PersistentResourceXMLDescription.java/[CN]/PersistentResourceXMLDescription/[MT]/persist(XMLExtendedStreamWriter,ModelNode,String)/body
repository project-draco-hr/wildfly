{
  boolean wildcard=resourceDefinition.getPathElement().isWildcard();
  model=wildcard ? model.get(resourceDefinition.getPathElement().getKey()) : model.get(resourceDefinition.getPathElement().getKeyValuePair());
  boolean isSubsystem=resourceDefinition.getPathElement().getKey().equals(ModelDescriptionConstants.SUBSYSTEM);
  if (!isSubsystem && !model.isDefined() && !useValueAsElementName) {
    return;
  }
  boolean writeWrapper=xmlWrapperElement != null;
  if (writeWrapper) {
    writeStartElement(writer,namespaceURI,xmlWrapperElement);
  }
  if (wildcard) {
    for (    Property p : model.asPropertyList()) {
      if (useValueAsElementName) {
        writeStartElement(writer,namespaceURI,p.getName());
      }
 else {
        writeStartElement(writer,namespaceURI,xmlElementName);
        writer.writeAttribute(NAME,p.getName());
      }
      for (      Map.Entry<String,AttributeDefinition> def : attributes.entrySet()) {
        def.getValue().getAttributeMarshaller().marshallAsAttribute(def.getValue(),p.getValue(),false,writer);
      }
      persistChildren(writer,p.getValue());
      writer.writeEndElement();
    }
  }
 else {
    if (useValueAsElementName) {
      writeStartElement(writer,namespaceURI,resourceDefinition.getPathElement().getValue());
    }
 else     if (isSubsystem) {
      startSubsystemElement(writer,namespaceURI,children.isEmpty());
    }
 else {
      writeStartElement(writer,namespaceURI,xmlElementName);
    }
    for (    Map.Entry<String,AttributeDefinition> def : attributes.entrySet()) {
      def.getValue().getAttributeMarshaller().marshallAsAttribute(def.getValue(),model,true,writer);
    }
    persistChildren(writer,model);
    if (!isSubsystem || !children.isEmpty()) {
      writer.writeEndElement();
    }
  }
  if (writeWrapper) {
    writer.writeEndElement();
  }
}
