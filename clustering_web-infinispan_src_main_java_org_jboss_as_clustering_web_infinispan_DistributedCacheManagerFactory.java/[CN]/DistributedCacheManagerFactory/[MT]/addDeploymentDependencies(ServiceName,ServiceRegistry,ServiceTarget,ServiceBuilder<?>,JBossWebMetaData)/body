{
  ServiceName templateCacheServiceName=this.getCacheServiceName(metaData.getReplicationConfig());
  if (registry.getService(templateCacheServiceName) == null) {
    return false;
  }
  String templateCacheName=templateCacheServiceName.getSimpleName();
  ServiceName containerServiceName=templateCacheServiceName.getParent();
  String containerName=containerServiceName.getSimpleName();
  ServiceName templateCacheConfigurationServiceName=AbstractCacheConfigurationService.getServiceName(containerName,templateCacheName);
  String cacheName=deploymentServiceName.getParent().getSimpleName() + deploymentServiceName.getSimpleName();
  ServiceName cacheConfigurationServiceName=AbstractCacheConfigurationService.getServiceName(containerName,cacheName);
  ServiceName cacheServiceName=CacheService.getServiceName(containerName,cacheName);
  final InjectedValue<EmbeddedCacheManager> container=new InjectedValue<EmbeddedCacheManager>();
  final InjectedValue<Configuration> config=new InjectedValue<Configuration>();
  target.addService(cacheConfigurationServiceName,new WebSessionCacheConfigurationService(cacheName,container,config)).addDependency(containerServiceName,EmbeddedCacheManager.class,container).addDependency(templateCacheConfigurationServiceName,Configuration.class,config).setInitialMode(ServiceController.Mode.ON_DEMAND).install();
  final InjectedValue<EmbeddedCacheManager> cacheContainer=new InjectedValue<EmbeddedCacheManager>();
  CacheService.Dependencies dependencies=new CacheService.Dependencies(){
    @Override public EmbeddedCacheManager getCacheContainer(){
      return cacheContainer.getValue();
    }
    @Override public XAResourceRecoveryRegistry getRecoveryRegistry(){
      return null;
    }
  }
;
  AsynchronousService.addService(target,cacheServiceName,new CacheService<Object,Object>(cacheName,dependencies)).addDependency(cacheConfigurationServiceName).addDependency(containerServiceName,EmbeddedCacheManager.class,cacheContainer).setInitialMode(ServiceController.Mode.ON_DEMAND).install();
  builder.addDependency(cacheServiceName,Cache.class,this.cache);
  builder.addDependency(JVM_ROUTE_REGISTRY_SERVICE_NAME,Registry.class,this.registry);
  builder.addDependency(DependencyType.OPTIONAL,SharedLocalYieldingClusterLockManagerService.getServiceName(containerName),SharedLocalYieldingClusterLockManager.class,this.lockManager);
  builder.addDependency(KeyAffinityServiceFactoryService.getServiceName(containerName),KeyAffinityServiceFactory.class,this.affinityFactory);
  return true;
}
