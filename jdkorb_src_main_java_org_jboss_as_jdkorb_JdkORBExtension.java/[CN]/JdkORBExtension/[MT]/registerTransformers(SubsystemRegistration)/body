{
  final ModelVersion version110=ModelVersion.create(1,1,0);
  final Set<String> expressionKeys=new HashSet<String>();
  for (  final AttributeDefinition def : JdkORBSubsystemDefinitions.ATTRIBUTES_BY_NAME.values()) {
    if (def.isAllowExpression()) {
      expressionKeys.add(def.getName());
    }
  }
  ResourceTransformationDescriptionBuilder builder=TransformationDescriptionBuilder.Factory.createSubsystemInstance();
  builder.getAttributeBuilder().addRejectCheck(RejectAttributeChecker.SIMPLE_EXPRESSIONS,expressionKeys.toArray(new String[expressionKeys.size()])).addRejectCheck(new RejectAttributeChecker.DefaultRejectAttributeChecker(){
    @Override public String getRejectionLogMessage(    Map<String,ModelNode> attributes){
      return JdkORBMessages.MESSAGES.cannotUseSecurityClient();
    }
    @Override protected boolean rejectAttribute(    PathAddress address,    String attributeName,    ModelNode attributeValue,    TransformationContext context){
      return attributeValue.getType() == ModelType.STRING && attributeValue.asString().equals(JdkORBSubsystemConstants.CLIENT);
    }
  }
,SECURITY).setValueConverter(new AttributeConverter.DefaultAttributeConverter(){
    @Override protected void convertAttribute(    PathAddress address,    String attributeName,    ModelNode attributeValue,    TransformationContext context){
      final String security=attributeValue.asString();
      if (security.equals(IDENTITY)) {
        attributeValue.set("on");
      }
    }
  }
,SECURITY).end();
  TransformationDescription.Tools.register(builder.build(),subsystem,version110);
}
