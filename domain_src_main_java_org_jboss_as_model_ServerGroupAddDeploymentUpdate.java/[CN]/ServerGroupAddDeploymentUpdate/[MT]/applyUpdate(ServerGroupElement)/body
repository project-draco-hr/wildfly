{
  final DeploymentUnitKey key=this.key;
  final VirtualFile deploymentRoot=VFS.getChild(getFullyQualifiedDeploymentPath(key.getName()));
  if (!deploymentRoot.exists())   throw new RuntimeException("Deployment root does not exist." + deploymentRoot);
  Closeable handle=null;
  try {
    try {
      if (deploymentRoot.isFile())       handle=VFS.mountZip(deploymentRoot,deploymentRoot,TempFileProviderService.provider());
    }
 catch (    IOException e) {
      throw new RuntimeException("Failed to mount deployment archive",e);
    }
    final String deploymentName=key.getName() + ":" + key.getSha1HashAsHexString();
    final DeploymentUnitContextImpl deploymentUnitContext=new DeploymentUnitContextImpl(deploymentName);
    attachVirtualFile(deploymentUnitContext,deploymentRoot);
    final DeploymentChainProvider deploymentChainProvider=DeploymentChainProvider.INSTANCE;
    final DeploymentChain deploymentChain=deploymentChainProvider.determineDeploymentChain(deploymentRoot);
    if (deploymentChain == null)     throw new RuntimeException("Failed determine the deployment chain for deployment root: " + deploymentRoot);
    try {
      deploymentChain.processDeployment(deploymentUnitContext);
    }
 catch (    DeploymentUnitProcessingException e) {
      throw new RuntimeException("Failed to process deployment chain.",e);
    }
    final List<DeploymentItem> deploymentItems=deploymentUnitContext.getDeploymentItems();
    DeploymentItemRegistry.registerDeploymentItems(key,deploymentItems);
  }
  finally {
    VFSUtils.safeClose(handle);
  }
  return null;
}
