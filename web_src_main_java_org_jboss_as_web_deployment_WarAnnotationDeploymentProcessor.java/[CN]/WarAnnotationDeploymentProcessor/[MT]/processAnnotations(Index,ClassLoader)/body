{
  Web30MetaData metaData=new Web30MetaData();
  AnnotationFinder<AnnotatedElement> finder=new DefaultAnnotationFinder<AnnotatedElement>();
  final List<AnnotationInstance> webServletAnnotations=index.getAnnotations(webServlet);
  if (webServletAnnotations != null && webServletAnnotations.size() > 0) {
    WebServletProcessor processor=new WebServletProcessor(finder);
    for (    final AnnotationInstance annotation : webServletAnnotations) {
      AnnotationTarget target=annotation.target();
      if (!(target instanceof ClassInfo)) {
        throw new DeploymentUnitProcessingException("@WebServlet is only allowed at class level " + target);
      }
      ClassInfo classInfo=ClassInfo.class.cast(target);
      Class<?> type=null;
      try {
        type=classLoader.loadClass(classInfo.name().toString());
      }
 catch (      Exception e) {
        throw new DeploymentUnitProcessingException("Could not process @WebServlet on " + target);
      }
      if (type != null) {
        processor.process(metaData,type);
      }
    }
  }
  final List<AnnotationInstance> webFilterAnnotations=index.getAnnotations(webFilter);
  if (webFilterAnnotations != null && webFilterAnnotations.size() > 0) {
    WebFilterProcessor processor=new WebFilterProcessor(finder);
    for (    final AnnotationInstance annotation : webFilterAnnotations) {
      AnnotationTarget target=annotation.target();
      if (!(target instanceof ClassInfo)) {
        throw new DeploymentUnitProcessingException("@WebFilter is only allowed at class level " + target);
      }
      ClassInfo classInfo=ClassInfo.class.cast(target);
      Class<?> type=null;
      try {
        type=classLoader.loadClass(classInfo.name().toString());
      }
 catch (      Exception e) {
        throw new DeploymentUnitProcessingException("Could not process @WebFilter on " + target);
      }
      if (type != null) {
        processor.process(metaData,type);
      }
    }
  }
  final List<AnnotationInstance> webListenerAnnotations=index.getAnnotations(webListener);
  if (webListenerAnnotations != null && webListenerAnnotations.size() > 0) {
    WebListenerProcessor processor=new WebListenerProcessor(finder);
    for (    final AnnotationInstance annotation : webListenerAnnotations) {
      AnnotationTarget target=annotation.target();
      if (!(target instanceof ClassInfo)) {
        throw new DeploymentUnitProcessingException("@WebListener is only allowed at class level " + target);
      }
      ClassInfo classInfo=ClassInfo.class.cast(target);
      Class<?> type=null;
      try {
        type=classLoader.loadClass(classInfo.name().toString());
      }
 catch (      Exception e) {
        throw new DeploymentUnitProcessingException("Could not process @WebListener on " + target);
      }
      if (type != null) {
        processor.process(metaData,type);
      }
    }
  }
  final List<AnnotationInstance> runAsAnnotations=index.getAnnotations(runAs);
  if (runAsAnnotations != null && runAsAnnotations.size() > 0) {
    RunAsProcessor processor=new RunAsProcessor(finder);
    AnnotationsMetaData annotations=metaData.getAnnotations();
    if (annotations == null) {
      annotations=new AnnotationsMetaData();
      metaData.setAnnotations(annotations);
    }
    for (    final AnnotationInstance annotation : runAsAnnotations) {
      AnnotationTarget target=annotation.target();
      if (!(target instanceof ClassInfo)) {
        throw new DeploymentUnitProcessingException("@RunAs is only allowed at class level " + target);
      }
      ClassInfo classInfo=ClassInfo.class.cast(target);
      Class<?> type=null;
      try {
        type=classLoader.loadClass(classInfo.name().toString());
      }
 catch (      Exception e) {
        throw new DeploymentUnitProcessingException("Could not process @RunAs on " + target);
      }
      if (type != null) {
        processor.process(annotations,type);
      }
    }
  }
  final List<AnnotationInstance> declareRolesAnnotations=index.getAnnotations(declareRoles);
  if (declareRolesAnnotations != null && declareRolesAnnotations.size() > 0) {
    DeclareRolesProcessor processor=new DeclareRolesProcessor(finder);
    SecurityRolesMetaData securityRoles=metaData.getSecurityRoles();
    if (securityRoles == null) {
      securityRoles=new SecurityRolesMetaData();
      metaData.setSecurityRoles(securityRoles);
    }
    for (    final AnnotationInstance annotation : declareRolesAnnotations) {
      AnnotationTarget target=annotation.target();
      if (!(target instanceof ClassInfo)) {
        throw new DeploymentUnitProcessingException("@DeclareRoles is only allowed at class level " + target);
      }
      ClassInfo classInfo=ClassInfo.class.cast(target);
      Class<?> type=null;
      try {
        type=classLoader.loadClass(classInfo.name().toString());
      }
 catch (      Exception e) {
        throw new DeploymentUnitProcessingException("Could not process @DeclareRoles on " + target);
      }
      if (type != null) {
        processor.process(securityRoles,type);
      }
    }
  }
  final List<AnnotationInstance> multipartConfigAnnotations=index.getAnnotations(multipartConfig);
  if (multipartConfigAnnotations != null && multipartConfigAnnotations.size() > 0) {
    MultipartConfigProcessor processor=new MultipartConfigProcessor(finder);
    AnnotationsMetaData annotations=metaData.getAnnotations();
    if (annotations == null) {
      annotations=new AnnotationsMetaData();
      metaData.setAnnotations(annotations);
    }
    for (    final AnnotationInstance annotation : multipartConfigAnnotations) {
      AnnotationTarget target=annotation.target();
      if (!(target instanceof ClassInfo)) {
        throw new DeploymentUnitProcessingException("@MultipartConfig is only allowed at class level " + target);
      }
      ClassInfo classInfo=ClassInfo.class.cast(target);
      Class<?> type=null;
      try {
        type=classLoader.loadClass(classInfo.name().toString());
      }
 catch (      Exception e) {
        throw new DeploymentUnitProcessingException("Could not process @MultipartConfig on " + target);
      }
      if (type != null) {
        processor.process(annotations,type);
      }
    }
  }
  final List<AnnotationInstance> servletSecurityAnnotations=index.getAnnotations(servletSecurity);
  if (servletSecurityAnnotations != null && servletSecurityAnnotations.size() > 0) {
    ServletSecurityProcessor processor=new ServletSecurityProcessor(finder);
    AnnotationsMetaData annotations=metaData.getAnnotations();
    if (annotations == null) {
      annotations=new AnnotationsMetaData();
      metaData.setAnnotations(annotations);
    }
    for (    final AnnotationInstance annotation : servletSecurityAnnotations) {
      AnnotationTarget target=annotation.target();
      if (!(target instanceof ClassInfo)) {
        throw new DeploymentUnitProcessingException("@ServletSecurity is only allowed at class level " + target);
      }
      ClassInfo classInfo=ClassInfo.class.cast(target);
      Class<?> type=null;
      try {
        type=classLoader.loadClass(classInfo.name().toString());
      }
 catch (      Exception e) {
        throw new DeploymentUnitProcessingException("Could not process @ServletSecurity on " + target);
      }
      if (type != null) {
        processor.process(annotations,type);
      }
    }
  }
  return metaData;
}
