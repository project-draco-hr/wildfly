{
  log.debugf("Initializing Threading Extension");
  final SubsystemRegistration registration=context.registerSubsystem(THREADS);
  registration.registerXMLElementWriter(NewThreadsSubsystemParser.INSTANCE);
  final ModelNodeRegistration subsystem=registration.registerSubsystemModel(SUBSYSTEM_PROVIDER);
  subsystem.registerOperationHandler(ADD,ThreadsSubsystemAdd.INSTANCE,ThreadsSubsystemAdd.INSTANCE,false);
  subsystem.registerOperationHandler(DESCRIBE,ThreadsSubsystemDescribeHandler.INSTANCE,ThreadsSubsystemDescribeHandler.INSTANCE,false,OperationEntry.EntryType.PRIVATE);
  final ModelNodeRegistration threadFactories=subsystem.registerSubModel(PathElement.pathElement(THREAD_FACTORY),THREAD_FACTORY_DESC);
  threadFactories.registerOperationHandler(ADD,ThreadFactoryAdd.INSTANCE,ThreadFactoryAdd.INSTANCE,false);
  threadFactories.registerOperationHandler(REMOVE,ThreadFactoryRemove.INSTANCE,ThreadFactoryRemove.INSTANCE,false);
  threadFactories.registerReadWriteAttribute(THREAD_NAME_PATTERN,null,ThreadFactoryThreadNamePatternUpdate.INSTANCE,Storage.CONFIGURATION);
  threadFactories.registerReadWriteAttribute(GROUP_NAME,null,ThreadFactoryGroupNameUpdate.INSTANCE,Storage.CONFIGURATION);
  threadFactories.registerReadWriteAttribute(PRIORITY,null,ThreadFactoryPriorityUpdate.INSTANCE,Storage.CONFIGURATION);
  final ModelNodeRegistration boundedQueueThreadPools=subsystem.registerSubModel(PathElement.pathElement(BOUNDED_QUEUE_THREAD_POOL),BOUNDED_QUEUE_THREAD_POOL_DESC);
  boundedQueueThreadPools.registerOperationHandler(ADD,BoundedQueueThreadPoolAdd.INSTANCE,BoundedQueueThreadPoolAdd.INSTANCE,false);
  boundedQueueThreadPools.registerOperationHandler(REMOVE,BoundedQueueThreadPoolRemove.INSTANCE,BoundedQueueThreadPoolRemove.INSTANCE,false);
  final ModelNodeRegistration unboundedQueueThreadPools=subsystem.registerSubModel(PathElement.pathElement(UNBOUNDED_QUEUE_THREAD_POOL),UNBOUNDED_QUEUE_THREAD_POOL_DESC);
  unboundedQueueThreadPools.registerOperationHandler(ADD,UnboundedQueueThreadPoolAdd.INSTANCE,UnboundedQueueThreadPoolAdd.INSTANCE,false);
  unboundedQueueThreadPools.registerOperationHandler(REMOVE,UnboundedQueueThreadPoolRemove.INSTANCE,UnboundedQueueThreadPoolRemove.INSTANCE,false);
  final ModelNodeRegistration queuelessThreadPools=subsystem.registerSubModel(PathElement.pathElement(QUEUELESS_THREAD_POOL),QUEUELESS_THREAD_POOL_DESC);
  queuelessThreadPools.registerOperationHandler(ADD,QueuelessThreadPoolAdd.INSTANCE,QueuelessThreadPoolAdd.INSTANCE,false);
  queuelessThreadPools.registerOperationHandler(REMOVE,QueuelessThreadPoolRemove.INSTANCE,QueuelessThreadPoolRemove.INSTANCE,false);
  final ModelNodeRegistration scheduledThreadPools=subsystem.registerSubModel(PathElement.pathElement(SCHEDULED_THREAD_POOL),SCHEDULED_THREAD_POOL_DESC);
  scheduledThreadPools.registerOperationHandler(ADD,ScheduledThreadPoolAdd.INSTANCE,ScheduledThreadPoolAdd.INSTANCE,false);
  scheduledThreadPools.registerOperationHandler(REMOVE,ScheduledThreadPoolRemove.INSTANCE,ScheduledThreadPoolRemove.INSTANCE,false);
}
