{
  log.debugf("Initializing Threading Extension");
  final boolean registerRuntimeOnly=context.isRuntimeOnlyRegistrationValid();
  final SubsystemRegistration registration=context.registerSubsystem(THREADS,1,0);
  registration.registerXMLElementWriter(ThreadsParser.INSTANCE);
  final ManagementResourceRegistration subsystem=registration.registerSubsystemModel(SUBSYSTEM_PROVIDER);
  subsystem.registerOperationHandler(ADD,ThreadsSubsystemAdd.INSTANCE,ThreadsSubsystemAdd.INSTANCE,false);
  subsystem.registerOperationHandler(DESCRIBE,ThreadsSubsystemDescribeHandler.INSTANCE,ThreadsSubsystemDescribeHandler.INSTANCE,false,OperationEntry.EntryType.PRIVATE);
  subsystem.registerOperationHandler(REMOVE,ReloadRequiredRemoveStepHandler.INSTANCE,SUBSYSTEM_REMOVE_PROVIDER,false);
  final ManagementResourceRegistration threadFactories=subsystem.registerSubModel(PathElement.pathElement(THREAD_FACTORY),THREAD_FACTORY_DESC);
  threadFactories.registerOperationHandler(ADD,ThreadFactoryAdd.INSTANCE,ThreadFactoryAdd.INSTANCE,false);
  threadFactories.registerOperationHandler(REMOVE,ThreadFactoryRemove.INSTANCE,ThreadFactoryRemove.INSTANCE,false);
  ThreadFactoryWriteAttributeHandler.INSTANCE.registerAttributes(threadFactories);
  final ManagementResourceRegistration boundedQueueThreadPools=subsystem.registerSubModel(PathElement.pathElement(BOUNDED_QUEUE_THREAD_POOL),BOUNDED_QUEUE_THREAD_POOL_DESC);
  boundedQueueThreadPools.registerOperationHandler(ADD,BoundedQueueThreadPoolAdd.INSTANCE,BoundedQueueThreadPoolAdd.INSTANCE,false);
  boundedQueueThreadPools.registerOperationHandler(REMOVE,BoundedQueueThreadPoolRemove.INSTANCE,BoundedQueueThreadPoolRemove.INSTANCE,false);
  if (registerRuntimeOnly) {
    BoundedQueueThreadPoolReadAttributeHandler.INSTANCE.registerAttributes(boundedQueueThreadPools);
  }
  BoundedQueueThreadPoolWriteAttributeHandler.INSTANCE.registerAttributes(boundedQueueThreadPools);
  final ManagementResourceRegistration unboundedQueueThreadPools=subsystem.registerSubModel(PathElement.pathElement(UNBOUNDED_QUEUE_THREAD_POOL),UNBOUNDED_QUEUE_THREAD_POOL_DESC);
  unboundedQueueThreadPools.registerOperationHandler(ADD,UnboundedQueueThreadPoolAdd.INSTANCE,UnboundedQueueThreadPoolAdd.INSTANCE,false);
  unboundedQueueThreadPools.registerOperationHandler(REMOVE,UnboundedQueueThreadPoolRemove.INSTANCE,UnboundedQueueThreadPoolRemove.INSTANCE,false);
  if (registerRuntimeOnly) {
    UnboundedQueueThreadPoolReadAttributeHandler.INSTANCE.registerAttributes(unboundedQueueThreadPools);
  }
  UnboundedQueueThreadPoolWriteAttributeHandler.INSTANCE.registerAttributes(unboundedQueueThreadPools);
  final ManagementResourceRegistration queuelessThreadPools=subsystem.registerSubModel(PathElement.pathElement(QUEUELESS_THREAD_POOL),QUEUELESS_THREAD_POOL_DESC);
  queuelessThreadPools.registerOperationHandler(ADD,QueuelessThreadPoolAdd.INSTANCE,QueuelessThreadPoolAdd.INSTANCE,false);
  queuelessThreadPools.registerOperationHandler(REMOVE,QueuelessThreadPoolRemove.INSTANCE,QueuelessThreadPoolRemove.INSTANCE,false);
  if (registerRuntimeOnly) {
    QueuelessThreadPoolReadAttributeHandler.INSTANCE.registerAttributes(queuelessThreadPools);
  }
  QueuelessThreadPoolWriteAttributeHandler.INSTANCE.registerAttributes(queuelessThreadPools);
  final ManagementResourceRegistration scheduledThreadPools=subsystem.registerSubModel(PathElement.pathElement(SCHEDULED_THREAD_POOL),SCHEDULED_THREAD_POOL_DESC);
  scheduledThreadPools.registerOperationHandler(ADD,ScheduledThreadPoolAdd.INSTANCE,ScheduledThreadPoolAdd.INSTANCE,false);
  scheduledThreadPools.registerOperationHandler(REMOVE,ScheduledThreadPoolRemove.INSTANCE,ScheduledThreadPoolRemove.INSTANCE,false);
  if (registerRuntimeOnly) {
    ScheduledThreadPoolReadAttributeHandler.INSTANCE.registerAttributes(scheduledThreadPools);
  }
  ScheduledThreadPoolWriteAttributeHandler.INSTANCE.registerAttributes(scheduledThreadPools);
}
