{
  uri=Utils.replaceHost(uri,Utils.getDefaultHost(true));
  LOGGER.info("Requesting URI: " + uri);
  httpClient.getAuthSchemes().register(AuthPolicy.SPNEGO,new JBossNegotiateSchemeFactory(true));
  httpClient.getCredentialsProvider().setCredentials(new AuthScope(null,-1,null),new NullHCCredentials());
  final HttpGet httpGet=new HttpGet(uri);
  final HttpResponse response=httpClient.execute(httpGet);
  int statusCode=response.getStatusLine().getStatusCode();
  if (HttpServletResponse.SC_UNAUTHORIZED != statusCode || StringUtils.isEmpty(user)) {
    assertEquals("Unexpected HTTP response status code.",expectedStatusCode,statusCode);
    return EntityUtils.toString(response.getEntity());
  }
  final HttpEntity entity=response.getEntity();
  final Header[] authnHeaders=response.getHeaders("WWW-Authenticate");
  assertTrue("WWW-Authenticate header is present",authnHeaders != null && authnHeaders.length > 0);
  final Set<String> authnHeaderValues=new HashSet<String>();
  for (  final Header header : authnHeaders) {
    authnHeaderValues.add(header.getValue());
  }
  assertTrue("WWW-Authenticate: Negotiate header is missing",authnHeaderValues.contains("Negotiate"));
  if (LOGGER.isDebugEnabled()) {
    LOGGER.debug("HTTP response was SC_UNAUTHORIZED, let's authenticate the user " + user);
  }
  if (entity != null)   EntityUtils.consume(entity);
  final Krb5LoginConfiguration krb5configuration=new Krb5LoginConfiguration(Utils.getLoginConfiguration());
  Configuration.setConfiguration(krb5configuration);
  final LoginContext lc=Utils.loginWithKerberos(krb5configuration,user,pass);
  final String responseBody=Subject.doAs(lc.getSubject(),new PrivilegedExceptionAction<String>(){
    public String run() throws Exception {
      final HttpResponse response=httpClient.execute(httpGet);
      int statusCode=response.getStatusLine().getStatusCode();
      assertEquals("Unexpected status code returned after the authentication.",expectedStatusCode,statusCode);
      return EntityUtils.toString(response.getEntity());
    }
  }
);
  lc.logout();
  krb5configuration.resetConfiguration();
  return responseBody;
}
