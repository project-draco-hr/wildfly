{
  log.infof("Starting '%s' Security Realm Service",name);
  if (authentication != null && authentication.has(USERS)) {
    callbackHandler=new UserDomainCallbackHandler(name,authentication.require(USERS));
  }
 else   if (authentication != null && authentication.has(LDAP)) {
    callbackHandler=new UserLdapCallbackHandler(connectionManagerValue.getValue(),authentication.require(LDAP));
  }
 else {
    callbackHandler=new DomainCallbackHandler(){
      @Override public Class[] getSupportedCallbacks(){
        return new Class[0];
      }
      @Override public void handle(      Callback[] callbacks) throws IOException, UnsupportedCallbackException {
        throw new IllegalStateException("No authentication mechanism defined in security realm.");
      }
    }
;
  }
  if (serverIdentities != null && serverIdentities.has(SSL)) {
    try {
      KeyManager[] keyManagers=null;
      ModelNode ssl=serverIdentities.get(SSL);
      String protocol="TLS";
      if (ssl.has(PROTOCOL)) {
        protocol=ssl.get(PROTOCOL).asString();
      }
      if (ssl.has(KEYSTORE)) {
        ModelNode keystoreNode=ssl.get(KEYSTORE);
        String file=keystoreNode.require(FILE).asString();
        char[] password=keystoreNode.require(PASSWORD).asString().toCharArray();
        KeyStore keystore=KeyStore.getInstance("JKS");
        FileInputStream fis=new FileInputStream(file);
        keystore.load(fis,password);
        KeyManagerFactory keyManagerFactory=KeyManagerFactory.getInstance("SunX509");
        keyManagerFactory.init(keystore,password);
        keyManagers=keyManagerFactory.getKeyManagers();
      }
      SSLContext sslContext=SSLContext.getInstance(protocol);
      sslContext.init(keyManagers,null,null);
      this.sslContext=sslContext;
    }
 catch (    NoSuchAlgorithmException nsae) {
      throw new StartException("Unable to start service",nsae);
    }
catch (    KeyManagementException kme) {
      throw new StartException("Unable to start service",kme);
    }
catch (    KeyStoreException kse) {
      throw new StartException("Unable to start service",kse);
    }
catch (    FileNotFoundException fnfe) {
      throw new StartException("Unable to start service",fnfe);
    }
catch (    CertificateException e) {
      throw new StartException("Unable to start service",e);
    }
catch (    IOException e) {
      throw new StartException("Unable to start service",e);
    }
catch (    UnrecoverableKeyException e) {
      throw new StartException("Unable to start service",e);
    }
  }
}
