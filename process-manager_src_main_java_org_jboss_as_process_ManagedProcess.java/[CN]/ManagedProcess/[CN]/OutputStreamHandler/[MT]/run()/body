{
  final InputStream inputStream=this.inputStream;
  final StringBuilder b=new StringBuilder();
  try {
    for (; ; ) {
      Status status=StreamUtils.readWord(inputStream,b);
      if (status == Status.END_OF_STREAM) {
        return;
      }
      try {
        final Command command=Command.valueOf(b.toString());
        OUT: switch (command) {
case ADD:
{
            if (status != Status.MORE) {
              break;
            }
            status=StreamUtils.readWord(inputStream,b);
            if (status != Status.MORE) {
              break;
            }
            final String name=b.toString();
            status=StreamUtils.readWord(inputStream,b);
            if (status != Status.MORE) {
              break;
            }
            final String workingDirectory=b.toString();
            status=StreamUtils.readWord(inputStream,b);
            if (status != Status.MORE) {
              break;
            }
            final String sizeString=b.toString();
            final int size;
            try {
              size=Integer.parseInt(sizeString,10);
            }
 catch (            NumberFormatException e) {
              break;
            }
            final List<String> execCmd=new ArrayList<String>();
            for (int i=0; i < size; i++) {
              status=StreamUtils.readWord(inputStream,b);
              if (status != Status.MORE) {
                break OUT;
              }
              execCmd.add(b.toString());
            }
            status=StreamUtils.readWord(inputStream,b);
            if (status != Status.MORE) {
              break;
            }
            final String mapSizeString=b.toString();
            final int mapSize;
            try {
              mapSize=Integer.parseInt(mapSizeString,10);
            }
 catch (            NumberFormatException e) {
              break;
            }
            final Map<String,String> env=new HashMap<String,String>();
            for (int i=0; i < mapSize; i++) {
              status=StreamUtils.readWord(inputStream,b);
              if (status != Status.MORE) {
                break OUT;
              }
              final String key=b.toString();
              status=StreamUtils.readWord(inputStream,b);
              if (status != Status.MORE) {
                break OUT;
              }
              env.put(key,b.toString());
            }
            master.addProcess(name,execCmd,env,workingDirectory);
            break;
          }
case START:
{
          if (status != Status.MORE) {
            break;
          }
          status=StreamUtils.readWord(inputStream,b);
          final String name=b.toString();
          master.startProcess(name);
          break;
        }
case STOP:
{
        if (status != Status.MORE) {
          break;
        }
        status=StreamUtils.readWord(inputStream,b);
        final String name=b.toString();
        master.stopProcess(name);
        break;
      }
case REMOVE:
{
      if (status != Status.MORE) {
        break;
      }
      status=StreamUtils.readWord(inputStream,b);
      final String name=b.toString();
      master.removeProcess(name);
      break;
    }
case SEND:
{
    if (status != Status.MORE) {
      break;
    }
    status=StreamUtils.readWord(inputStream,b);
    final String name=b.toString();
    final List<String> msg=new ArrayList<String>(0);
    while (status == Status.MORE) {
      status=StreamUtils.readWord(inputStream,b);
      msg.add(b.toString());
    }
    master.sendMessage(name,msg);
    break;
  }
case BROADCAST:
{
  final List<String> msg=new ArrayList<String>(0);
  while (status == Status.MORE) {
    status=StreamUtils.readWord(inputStream,b);
    msg.add(b.toString());
  }
  master.broadcastMessage(msg);
  break;
}
}
}
 catch (IllegalArgumentException e) {
}
if (status == Status.MORE) StreamUtils.readToEol(inputStream);
}
}
 catch (IOException e) {
}
 finally {
safeClose(inputStream);
for (; ; ) try {
process.waitFor();
break;
}
 catch (InterruptedException e) {
}
start=false;
}
}
