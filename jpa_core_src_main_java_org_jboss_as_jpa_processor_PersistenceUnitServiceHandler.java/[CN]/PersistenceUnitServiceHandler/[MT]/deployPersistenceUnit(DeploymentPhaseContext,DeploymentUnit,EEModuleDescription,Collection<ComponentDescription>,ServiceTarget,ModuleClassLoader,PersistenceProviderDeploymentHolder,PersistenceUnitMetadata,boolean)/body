{
  pu.setClassLoader(classLoader);
  try {
    SerializableValidatorFactory validatorFactory=null;
    final HashMap<String,ValidatorFactory> properties=new HashMap<String,ValidatorFactory>();
    if (!ValidationMode.NONE.equals(pu.getValidationMode())) {
      validatorFactory=SerializableValidatorFactory.validatorFactory();
      properties.put("javax.persistence.validation.factory",validatorFactory);
    }
    final PersistenceProviderAdaptor adaptor=getPersistenceProviderAdaptor(pu,persistenceProviderDeploymentHolder,deploymentUnit);
    PersistenceProvider provider=null;
    if (persistenceProviderDeploymentHolder != null && persistenceProviderDeploymentHolder.getProvider() != null) {
      List<PersistenceProvider> providerList=persistenceProviderDeploymentHolder.getProvider();
      for (      PersistenceProvider persistenceProvider : providerList) {
        if (persistenceProvider.getClass().getName().equals(pu.getPersistenceProviderClassName())) {
          provider=persistenceProvider;
          JPA_LOGGER.tracef("deployment %s is using its own copy of %s",deploymentUnit.getName(),pu.getPersistenceProviderClassName());
          break;
        }
      }
    }
    if (provider == null) {
      provider=lookupProvider(pu);
    }
    final PersistenceUnitServiceImpl service=new PersistenceUnitServiceImpl(classLoader,pu,adaptor,provider,PersistenceUnitRegistryImpl.INSTANCE,deploymentUnit.getServiceName());
    deploymentUnit.addToAttachmentList(REMOVAL_KEY,new PersistenceAdaptorRemoval(validatorFactory,pu,adaptor));
    adaptor.addProviderProperties(properties,pu);
    final ServiceName puServiceName=PersistenceUnitServiceImpl.getPUServiceName(pu);
    deploymentUnit.putAttachment(JpaAttachments.PERSISTENCE_UNIT_SERVICE_KEY,puServiceName);
    deploymentUnit.addToAttachmentList(Attachments.DEPLOYMENT_COMPLETE_SERVICES,puServiceName);
    addPUServiceDependencyToComponents(components,puServiceName);
    if (startEarly) {
      phaseContext.addToAttachmentList(Attachments.NEXT_PHASE_DEPS,puServiceName);
    }
    deploymentUnit.addToAttachmentList(Attachments.WEB_DEPENDENCIES,puServiceName);
    ServiceBuilder<PersistenceUnitService> builder=serviceTarget.addService(puServiceName,service);
    boolean useDefaultDataSource=true;
    final String jtaDataSource=adjustJndi(pu.getJtaDataSourceName());
    final String nonJtaDataSource=adjustJndi(pu.getNonJtaDataSourceName());
    if (jtaDataSource != null && jtaDataSource.length() > 0) {
      if (jtaDataSource.startsWith("java:")) {
        builder.addDependency(ContextNames.bindInfoForEnvEntry(eeModuleDescription.getApplicationName(),eeModuleDescription.getModuleName(),eeModuleDescription.getModuleName(),false,jtaDataSource).getBinderServiceName(),ManagedReferenceFactory.class,new ManagedReferenceFactoryInjector(service.getJtaDataSourceInjector()));
        useDefaultDataSource=false;
      }
 else {
        builder.addDependency(AbstractDataSourceService.SERVICE_NAME_BASE.append(jtaDataSource),new CastingInjector<DataSource>(service.getJtaDataSourceInjector(),DataSource.class));
        useDefaultDataSource=false;
      }
    }
    if (nonJtaDataSource != null && nonJtaDataSource.length() > 0) {
      if (nonJtaDataSource.startsWith("java:")) {
        builder.addDependency(ContextNames.bindInfoForEnvEntry(eeModuleDescription.getApplicationName(),eeModuleDescription.getModuleName(),eeModuleDescription.getModuleName(),false,nonJtaDataSource).getBinderServiceName(),ManagedReferenceFactory.class,new ManagedReferenceFactoryInjector(service.getNonJtaDataSourceInjector()));
        useDefaultDataSource=false;
      }
 else {
        builder.addDependency(AbstractDataSourceService.SERVICE_NAME_BASE.append(nonJtaDataSource),new CastingInjector<DataSource>(service.getNonJtaDataSourceInjector(),DataSource.class));
        useDefaultDataSource=false;
      }
    }
    if (useDefaultDataSource) {
      final String defaultJtaDataSource=adjustJndi(JPAService.getDefaultDataSourceName());
      if (defaultJtaDataSource != null && defaultJtaDataSource.length() > 0) {
        builder.addDependency(AbstractDataSourceService.SERVICE_NAME_BASE.append(defaultJtaDataSource),new CastingInjector<DataSource>(service.getJtaDataSourceInjector(),DataSource.class));
        JPA_LOGGER.tracef("%s is using the default data source '%s'",puServiceName,defaultJtaDataSource);
      }
    }
    if (WeldDeploymentMarker.isPartOfWeldDeployment(deploymentUnit)) {
      builder.addDependency(beanManagerServiceName(deploymentUnit),new CastingInjector<BeanManager>(service.getBeanManagerInjector(),BeanManager.class));
    }
    try {
      CacheDeploymentListener.setInternalDeploymentServiceBuilder(builder);
      adaptor.addProviderDependencies(pu);
    }
  finally {
      CacheDeploymentListener.clearInternalDeploymentServiceBuilder();
    }
    if (pu.getProperties().containsKey(ENTITYMANAGER_JNDI_PROPERTY)) {
      String jndiName=pu.getProperties().get(ENTITYMANAGER_JNDI_PROPERTY).toString();
      final ContextNames.BindInfo bindingInfo;
      if (jndiName.startsWith("java:")) {
        bindingInfo=ContextNames.bindInfoForEnvEntry(eeModuleDescription.getApplicationName(),eeModuleDescription.getModuleName(),eeModuleDescription.getModuleName(),false,jndiName);
      }
 else {
        bindingInfo=ContextNames.bindInfoFor(jndiName);
      }
      JPA_LOGGER.tracef("binding the transaction scoped entity manager to jndi name '%s'",bindingInfo.getAbsoluteJndiName());
      final BinderService binderService=new BinderService(bindingInfo.getBindName());
      serviceTarget.addService(bindingInfo.getBinderServiceName(),binderService).addDependency(bindingInfo.getParentContextServiceName(),ServiceBasedNamingStore.class,binderService.getNamingStoreInjector()).addDependency(puServiceName,PersistenceUnitServiceImpl.class,new Injector<PersistenceUnitServiceImpl>(){
        @Override public void inject(        final PersistenceUnitServiceImpl value) throws InjectionException {
          binderService.getManagedObjectInjector().inject(new ValueManagedReferenceFactory(new ImmediateValue<Object>(new TransactionScopedEntityManager(pu.getScopedPersistenceUnitName(),new HashMap(),value.getEntityManagerFactory(),SynchronizationType.SYNCHRONIZED))));
        }
        @Override public void uninject(){
          binderService.getNamingStoreInjector().uninject();
        }
      }
).install();
    }
    if (pu.getProperties().containsKey(ENTITYMANAGERFACTORY_JNDI_PROPERTY)) {
      String jndiName=pu.getProperties().get(ENTITYMANAGERFACTORY_JNDI_PROPERTY).toString();
      final ContextNames.BindInfo bindingInfo;
      if (jndiName.startsWith("java:")) {
        bindingInfo=ContextNames.bindInfoForEnvEntry(eeModuleDescription.getApplicationName(),eeModuleDescription.getModuleName(),eeModuleDescription.getModuleName(),false,jndiName);
      }
 else {
        bindingInfo=ContextNames.bindInfoFor(jndiName);
      }
      JPA_LOGGER.tracef("binding the entity manager factory to jndi name '%s'",bindingInfo.getAbsoluteJndiName());
      final BinderService binderService=new BinderService(bindingInfo.getBindName());
      serviceTarget.addService(bindingInfo.getBinderServiceName(),binderService).addDependency(bindingInfo.getParentContextServiceName(),ServiceBasedNamingStore.class,binderService.getNamingStoreInjector()).addDependency(puServiceName,PersistenceUnitServiceImpl.class,new Injector<PersistenceUnitServiceImpl>(){
        @Override public void inject(        final PersistenceUnitServiceImpl value) throws InjectionException {
          binderService.getManagedObjectInjector().inject(new ValueManagedReferenceFactory(new ImmediateValue<Object>(value.getEntityManagerFactory())));
        }
        @Override public void uninject(){
          binderService.getNamingStoreInjector().uninject();
        }
      }
).install();
    }
    builder.setInitialMode(ServiceController.Mode.ACTIVE).addInjection(service.getPropertiesInjector(),properties);
    addServerExecutorDependency(builder,service.getExecutorInjector(),false);
    builder.install();
    JPA_LOGGER.tracef("added PersistenceUnitService for '%s'.  PU is ready for injector action.",puServiceName);
    addManagementConsole(deploymentUnit,pu,adaptor);
  }
 catch (  ServiceRegistryException e) {
    throw JpaMessages.MESSAGES.failedToAddPersistenceUnit(e,pu.getPersistenceUnitName());
  }
}
