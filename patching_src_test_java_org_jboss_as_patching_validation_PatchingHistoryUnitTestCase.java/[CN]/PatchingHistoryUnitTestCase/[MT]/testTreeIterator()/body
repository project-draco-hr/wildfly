{
  installOneOffCpOneOff();
  final List<String> historyDirs=new ArrayList<String>();
  final List<String> moduleDirs=new ArrayList<String>();
  final List<String> bundleDirs=new ArrayList<String>();
  final PatchHistoryIterator.Builder builder=PatchHistoryIterator.Builder.create(updateInstallationManager());
  builder.addStateHandler(PatchingArtifacts.HISTORY_DIR,new PatchingArtifactStateHandler<PatchingFileArtifact.DirectoryArtifactState>(){
    @Override public void handleValidatedState(    PatchingFileArtifact.DirectoryArtifactState state){
      historyDirs.add(state.getFile().getName());
    }
  }
);
  builder.addStateHandler(PatchingArtifacts.MODULE_OVERLAY,new PatchingArtifactStateHandler<PatchingFileArtifact.DirectoryArtifactState>(){
    @Override public void handleValidatedState(    PatchingFileArtifact.DirectoryArtifactState state){
      moduleDirs.add(state.getFile().getName());
    }
  }
);
  builder.addStateHandler(PatchingArtifacts.BUNDLE_OVERLAY,new PatchingArtifactStateHandler<PatchingFileArtifact.DirectoryArtifactState>(){
    @Override public void handleValidatedState(    PatchingFileArtifact.DirectoryArtifactState state){
      bundleDirs.add(state.getFile().getName());
    }
  }
);
  final PatchHistoryIterator tree=builder.iterator();
  assertTrue(tree.hasNext());
  assertTrue(historyDirs.isEmpty());
  assertTrue(moduleDirs.isEmpty());
  assertTrue(bundleDirs.isEmpty());
  assertTrue(tree.hasNext());
  tree.next();
  assertEquals(1,historyDirs.size());
  assertTrue(historyDirs.contains("oneOff2"));
  assertTrue(moduleDirs.contains("base-oneOff2"));
  assertTrue(bundleDirs.isEmpty());
  assertTrue(tree.hasNext());
  tree.next();
  assertEquals(2,historyDirs.size());
  assertTrue(historyDirs.contains("cp1"));
  assertEquals(2,moduleDirs.size());
  assertTrue(moduleDirs.contains("base-cp1"));
  assertTrue(bundleDirs.isEmpty());
  assertTrue(tree.hasNext());
  tree.next();
  assertEquals(3,historyDirs.size());
  assertTrue(historyDirs.contains("oneOff1"));
  assertTrue(moduleDirs.contains("base-oneOff1"));
  assertTrue(bundleDirs.isEmpty());
  assertFalse(tree.hasNext());
}
