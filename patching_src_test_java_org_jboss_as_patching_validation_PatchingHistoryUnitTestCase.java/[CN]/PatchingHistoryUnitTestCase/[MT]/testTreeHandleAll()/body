{
  installOneOffCpOneOff();
  final List<String> historyDirs=new ArrayList<String>();
  final List<String> moduleDirs=new ArrayList<String>();
  final List<String> bundleDirs=new ArrayList<String>();
  final PatchHistoryIterator.Builder builder=PatchHistoryIterator.Builder.create(updateInstallationManager());
  builder.addStateHandler(PatchingArtifacts.HISTORY_DIR,new PatchingArtifactStateHandler<PatchingFileArtifact.DirectoryArtifactState>(){
    @Override public void handleValidatedState(    PatchingFileArtifact.DirectoryArtifactState state){
      historyDirs.add(state.getFile().getName());
    }
  }
);
  builder.addStateHandler(PatchingArtifacts.MODULE_OVERLAY,new PatchingArtifactStateHandler<PatchingFileArtifact.DirectoryArtifactState>(){
    @Override public void handleValidatedState(    PatchingFileArtifact.DirectoryArtifactState state){
      moduleDirs.add(state.getFile().getName());
    }
  }
);
  builder.addStateHandler(PatchingArtifacts.BUNDLE_OVERLAY,new PatchingArtifactStateHandler<PatchingFileArtifact.DirectoryArtifactState>(){
    @Override public void handleValidatedState(    PatchingFileArtifact.DirectoryArtifactState state){
      bundleDirs.add(state.getFile().getName());
    }
  }
);
  final PatchHistoryIterator iterator=builder.iterator();
  while (iterator.hasNext()) {
    iterator.next();
  }
  assertEquals(Arrays.asList(new String[]{"oneOff2","cp1","oneOff1"}),historyDirs);
  assertEquals(Arrays.asList(new String[]{"base-oneOff2","base-cp1","base-oneOff1"}),moduleDirs);
  assertTrue(bundleDirs.isEmpty());
}
