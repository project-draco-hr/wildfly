{
  final ModelVersion version=ModelVersion.create(1,4,0);
  final ResourceTransformationDescriptionBuilder subsystemBuilder=TransformationDescriptionBuilder.Factory.createSubsystemInstance();
  ResourceTransformationDescriptionBuilder cacheContainerBuilder=subsystemBuilder.addChildResource(CacheContainerResourceDefinition.CONTAINER_PATH).getAttributeBuilder().setDiscard(new DiscardAttributeChecker.DiscardAttributeValueChecker(false,false,new ModelNode(true)),CacheResourceDefinition.STATISTICS_ENABLED).addRejectCheck(RejectAttributeChecker.UNDEFINED,CacheResourceDefinition.STATISTICS_ENABLED).addRejectCheck(RejectAttributeChecker.SIMPLE_EXPRESSIONS,CacheResourceDefinition.STATISTICS_ENABLED).addRejectCheck(new RejectAttributeChecker.SimpleRejectAttributeChecker(new ModelNode(false)),CacheResourceDefinition.STATISTICS_ENABLED).end();
  ResourceTransformationDescriptionBuilder distributedCacheBuilder=cacheContainerBuilder.addChildResource(DistributedCacheResourceDefinition.DISTRIBUTED_CACHE_PATH).getAttributeBuilder().setDiscard(new DiscardAttributeChecker.DefaultDiscardAttributeChecker(false,true){
    @Override protected boolean isValueDiscardable(    PathAddress address,    String attributeName,    ModelNode attributeValue,    TransformationContext context){
      if (attributeName.equals(DistributedCacheResourceDefinition.VIRTUAL_NODES.getName())) {
        if (attributeValue.isDefined()) {
          if (attributeValue.equals(new ModelNode().set(1))) {
            return true;
          }
        }
      }
      return false;
    }
  }
,DistributedCacheResourceDefinition.VIRTUAL_NODES).addRejectCheck(VirtualNodesCheckerAndConverter.INSTANCE,DistributedCacheResourceDefinition.VIRTUAL_NODES).setValueConverter(VirtualNodesCheckerAndConverter.INSTANCE,DistributedCacheResourceDefinition.VIRTUAL_NODES).addRename(DistributedCacheResourceDefinition.VIRTUAL_NODES,DistributedCacheResourceDefinition.SEGMENTS.getName()).end();
  registerCacheTransformations(distributedCacheBuilder,CacheMode.DIST_SYNC);
  registerCacheTransformations(cacheContainerBuilder.addChildResource(ReplicatedCacheResourceDefinition.REPLICATED_CACHE_PATH),CacheMode.REPL_SYNC);
  registerCacheTransformations(cacheContainerBuilder.addChildResource(InvalidationCacheResourceDefinition.INVALIDATION_CACHE_PATH),CacheMode.INVALIDATION_SYNC);
  registerCacheTransformations(cacheContainerBuilder.addChildResource(LocalCacheResourceDefinition.LOCAL_CACHE_PATH),CacheMode.LOCAL);
  TransformationDescription.Tools.register(subsystemBuilder.build(),subsystem,version);
}
