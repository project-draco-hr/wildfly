{
  final ModelVersion version=ModelVersion.create(1,3);
  final ResourceTransformationDescriptionBuilder subsystemBuilder=TransformationDescriptionBuilder.Factory.createSubsystemInstance();
  final ResourceTransformationDescriptionBuilder cacheContainerBuilder=subsystemBuilder.addChildResource(CacheContainerResourceDefinition.CONTAINER_PATH).getAttributeBuilder().addRejectCheck(RejectAttributeChecker.SIMPLE_EXPRESSIONS,InfinispanRejectedExpressions_1_3.REJECT_CONTAINER_ATTRIBUTES).setDiscard(DiscardAttributeChecker.ALWAYS,CacheContainerResourceDefinition.STATISTICS).end();
  cacheContainerBuilder.addChildResource(TransportResourceDefinition.TRANSPORT_PATH).getAttributeBuilder().addRejectCheck(RejectAttributeChecker.SIMPLE_EXPRESSIONS,InfinispanRejectedExpressions_1_3.REJECT_TRANSPORT_ATTRIBUTES).end();
  @SuppressWarnings("deprecation") final ResourceTransformationDescriptionBuilder distributedCacheBuilder=cacheContainerBuilder.addChildResource(DistributedCacheResourceDefinition.DISTRIBUTED_CACHE_PATH).getAttributeBuilder().addRejectCheck(RejectAttributeChecker.SIMPLE_EXPRESSIONS,ClusteredCacheResourceDefinition.ASYNC_MARSHALLING,CacheResourceDefinition.BATCHING,CacheResourceDefinition.INDEXING,CacheResourceDefinition.JNDI_NAME,ClusteredCacheResourceDefinition.MODE,CacheResourceDefinition.MODULE,ClusteredCacheResourceDefinition.QUEUE_FLUSH_INTERVAL,ClusteredCacheResourceDefinition.QUEUE_SIZE,ClusteredCacheResourceDefinition.REMOTE_TIMEOUT,CacheResourceDefinition.START,DistributedCacheResourceDefinition.L1_LIFESPAN,DistributedCacheResourceDefinition.OWNERS,DistributedCacheResourceDefinition.VIRTUAL_NODES,DistributedCacheResourceDefinition.SEGMENTS).setDiscard(DiscardAttributeChecker.UNDEFINED,CacheResourceDefinition.INDEXING_PROPERTIES).addRejectCheck(RejectAttributeChecker.DEFINED,CacheResourceDefinition.INDEXING_PROPERTIES).setDiscard(DiscardAttributeChecker.UNDEFINED,DistributedCacheResourceDefinition.SEGMENTS).setDiscard(DiscardAttributeChecker.ALWAYS,CacheResourceDefinition.STATISTICS).setValueConverter(new AttributeConverter.DefaultAttributeConverter(){
    @Override protected void convertAttribute(    PathAddress address,    String attributeName,    ModelNode attributeValue,    TransformationContext context){
      if (attributeValue.isDefined()) {
        attributeValue.set(SegmentsAndVirtualNodeConverter.segmentsToVirtualNodes(attributeValue.asString()));
      }
    }
  }
,DistributedCacheResourceDefinition.SEGMENTS).addRename(DistributedCacheResourceDefinition.SEGMENTS,DistributedCacheResourceDefinition.VIRTUAL_NODES.getName()).end();
  registerCacheResourceChildren(distributedCacheBuilder,true);
  final ResourceTransformationDescriptionBuilder invalidationCacheBuilder=cacheContainerBuilder.addChildResource(InvalidationCacheResourceDefinition.INVALIDATION_CACHE_PATH).getAttributeBuilder().addRejectCheck(RejectAttributeChecker.SIMPLE_EXPRESSIONS,ClusteredCacheResourceDefinition.ASYNC_MARSHALLING,CacheResourceDefinition.BATCHING,CacheResourceDefinition.INDEXING,CacheResourceDefinition.JNDI_NAME,ClusteredCacheResourceDefinition.MODE,CacheResourceDefinition.MODULE,ClusteredCacheResourceDefinition.QUEUE_FLUSH_INTERVAL,ClusteredCacheResourceDefinition.QUEUE_SIZE,ClusteredCacheResourceDefinition.REMOTE_TIMEOUT,CacheResourceDefinition.START).setDiscard(DiscardAttributeChecker.UNDEFINED,CacheResourceDefinition.INDEXING_PROPERTIES).addRejectCheck(RejectAttributeChecker.DEFINED,CacheResourceDefinition.INDEXING_PROPERTIES).setDiscard(DiscardAttributeChecker.UNDEFINED,CacheResourceDefinition.STATISTICS).end();
  registerCacheResourceChildren(invalidationCacheBuilder,false);
  final ResourceTransformationDescriptionBuilder localCacheBuilder=cacheContainerBuilder.addChildResource(LocalCacheResourceDefinition.LOCAL_CACHE_PATH).getAttributeBuilder().addRejectCheck(RejectAttributeChecker.SIMPLE_EXPRESSIONS,CacheResourceDefinition.BATCHING,CacheResourceDefinition.INDEXING,CacheResourceDefinition.JNDI_NAME,CacheResourceDefinition.MODULE,CacheResourceDefinition.START).setDiscard(DiscardAttributeChecker.UNDEFINED,CacheResourceDefinition.INDEXING_PROPERTIES).addRejectCheck(RejectAttributeChecker.DEFINED,CacheResourceDefinition.INDEXING_PROPERTIES).setDiscard(DiscardAttributeChecker.UNDEFINED,CacheResourceDefinition.STATISTICS).end();
  registerCacheResourceChildren(localCacheBuilder,false);
  final ResourceTransformationDescriptionBuilder replicatedCacheBuilder=cacheContainerBuilder.addChildResource(ReplicatedCacheResourceDefinition.REPLICATED_CACHE_PATH).getAttributeBuilder().addRejectCheck(RejectAttributeChecker.SIMPLE_EXPRESSIONS,ClusteredCacheResourceDefinition.ASYNC_MARSHALLING,CacheResourceDefinition.BATCHING,CacheResourceDefinition.INDEXING,CacheResourceDefinition.JNDI_NAME,ClusteredCacheResourceDefinition.MODE,CacheResourceDefinition.MODULE,ClusteredCacheResourceDefinition.QUEUE_FLUSH_INTERVAL,ClusteredCacheResourceDefinition.QUEUE_SIZE,ClusteredCacheResourceDefinition.REMOTE_TIMEOUT,CacheResourceDefinition.START).setDiscard(DiscardAttributeChecker.UNDEFINED,CacheResourceDefinition.INDEXING_PROPERTIES).addRejectCheck(RejectAttributeChecker.DEFINED,CacheResourceDefinition.INDEXING_PROPERTIES).setDiscard(DiscardAttributeChecker.UNDEFINED,CacheResourceDefinition.STATISTICS).end();
  registerCacheResourceChildren(replicatedCacheBuilder,true);
  TransformationDescription.Tools.register(subsystemBuilder.build(),subsystem,version);
}
