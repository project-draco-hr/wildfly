{
  final StatefulSessionComponent component=getComponent(context,StatefulSessionComponent.class);
  final StatefulSessionComponentInstance instance=getComponentInstance(context);
  final TransactionSynchronizationRegistry transactionSynchronizationRegistry=component.getTransactionSynchronizationRegistry();
  lock.pushOwner(getLockOwner(transactionSynchronizationRegistry));
  try {
    final AccessTimeoutDetails timeout=component.getAccessTimeout(context.getMethod());
    if (log.isTraceEnabled()) {
      log.trace("Trying to acquire lock: " + lock + " for stateful component instance: "+ instance+ " during invocation: "+ context);
    }
    boolean acquired=lock.tryLock(timeout.getValue(),timeout.getTimeUnit());
    if (!acquired) {
      throw new ConcurrentAccessTimeoutException("EJB 3.1 FR 4.3.14.1 concurrent access timeout on " + context + " - could not obtain lock within "+ timeout.getValue()+ timeout.getTimeUnit());
    }
synchronized (threadLock) {
      if (log.isTraceEnabled()) {
        log.trace("Acquired lock: " + lock + " for stateful component instance: "+ instance+ " during invocation: "+ context);
      }
      Object currentTransactionKey=null;
      boolean wasTxSyncRegistered=false;
      try {
        if (!synchronizationRegistered) {
          currentTransactionKey=transactionSynchronizationRegistry.getTransactionKey();
          int status=transactionSynchronizationRegistry.getTransactionStatus();
          if (currentTransactionKey != null && status != Status.STATUS_COMMITTED) {
            final Synchronization statefulSessionSync=new StatefulSessionSynchronization(instance);
            transactionSynchronizationRegistry.registerInterposedSynchronization(statefulSessionSync);
            wasTxSyncRegistered=true;
            if (log.isTraceEnabled()) {
              log.trace("Registered tx synchronization: " + statefulSessionSync + " for tx: "+ currentTransactionKey+ " associated with stateful component instance: "+ instance);
            }
            instance.afterBegin();
          }
          synchronizationRegistered=true;
        }
        return context.proceed();
      }
  finally {
        if (!wasTxSyncRegistered) {
          releaseInstance(instance);
        }
      }
    }
  }
  finally {
    lock.popOwner();
  }
}
