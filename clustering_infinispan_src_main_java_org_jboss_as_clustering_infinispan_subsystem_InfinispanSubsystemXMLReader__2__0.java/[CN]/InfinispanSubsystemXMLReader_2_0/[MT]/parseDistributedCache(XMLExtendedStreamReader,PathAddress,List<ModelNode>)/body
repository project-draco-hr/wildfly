{
  ModelNode cache=Util.getEmptyOperation(ModelDescriptionConstants.ADD,null);
  List<ModelNode> additionalConfigurationOperations=new ArrayList<>();
  for (int i=0; i < reader.getAttributeCount(); i++) {
    String value=reader.getAttributeValue(i);
    Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case OWNERS:
{
        DistributedCacheResourceDefinition.OWNERS.parseAndSetParameter(value,cache,reader);
        break;
      }
case SEGMENTS:
{
      DistributedCacheResourceDefinition.SEGMENTS.parseAndSetParameter(value,cache,reader);
      break;
    }
case L1_LIFESPAN:
{
    DistributedCacheResourceDefinition.L1_LIFESPAN.parseAndSetParameter(value,cache,reader);
    break;
  }
default :
{
  this.parseClusteredCacheAttribute(reader,i,attribute,value,cache);
}
}
}
if (!cache.hasDefined(ModelKeys.NAME)) {
throw ParseUtils.missingRequired(reader,EnumSet.of(Attribute.NAME));
}
if (!cache.hasDefined(ModelKeys.MODE)) {
throw ParseUtils.missingRequired(reader,EnumSet.of(Attribute.MODE));
}
addCacheNameToAddress(cache,containerAddress,ModelKeys.DISTRIBUTED_CACHE);
while (reader.hasNext() && (reader.nextTag() != XMLStreamConstants.END_ELEMENT)) {
Element element=Element.forName(reader.getLocalName());
switch (element) {
default :
{
this.parseSharedStateCacheElement(reader,element,cache,additionalConfigurationOperations);
}
}
}
operations.add(cache);
for (ModelNode additionalOperation : additionalConfigurationOperations) {
operations.add(additionalOperation);
}
}
