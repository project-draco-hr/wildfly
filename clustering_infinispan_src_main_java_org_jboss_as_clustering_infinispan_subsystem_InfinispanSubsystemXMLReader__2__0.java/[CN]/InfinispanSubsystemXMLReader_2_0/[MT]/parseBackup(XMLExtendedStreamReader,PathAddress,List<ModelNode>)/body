{
  String site=require(reader,Attribute.SITE);
  PathAddress backupSiteAddress=cacheAddress.append(BackupSiteResourceDefinition.pathElement(site));
  ModelNode operation=Util.createAddOperation(backupSiteAddress);
  operations.add(operation);
  for (int i=0; i < reader.getAttributeCount(); i++) {
    String value=reader.getAttributeValue(i);
    Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case SITE:
{
        break;
      }
case STRATEGY:
{
      BackupSiteResourceDefinition.STRATEGY.parseAndSetParameter(value,operation,reader);
      break;
    }
case BACKUP_FAILURE_POLICY:
{
    BackupSiteResourceDefinition.FAILURE_POLICY.parseAndSetParameter(value,operation,reader);
    break;
  }
case TIMEOUT:
{
  BackupSiteResourceDefinition.REPLICATION_TIMEOUT.parseAndSetParameter(value,operation,reader);
  break;
}
case ENABLED:
{
BackupSiteResourceDefinition.ENABLED.parseAndSetParameter(value,operation,reader);
break;
}
default :
{
throw ParseUtils.unexpectedAttribute(reader,i);
}
}
}
while (reader.hasNext() && (reader.nextTag() != XMLStreamConstants.END_ELEMENT)) {
Element element=Element.forName(reader.getLocalName());
switch (element) {
case TAKE_OFFLINE:
{
this.parseTakeOffline(reader,operation);
break;
}
default :
{
throw ParseUtils.unexpectedElement(reader);
}
}
}
}
