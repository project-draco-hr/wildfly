{
  final ConnectorXmlDescriptor connectorXmlDescriptor=phaseContext.getDeploymentUnit().getAttachment(ConnectorXmlDescriptor.ATTACHMENT_KEY);
  final ManagementResourceRegistration registration;
  final ManagementResourceRegistration baseRegistration=phaseContext.getDeploymentUnit().getAttachment(DeploymentModelUtils.MUTABLE_REGISTRATION_ATTACHMENT);
  final Resource deploymentResource=phaseContext.getDeploymentUnit().getAttachment(DeploymentModelUtils.DEPLOYMENT_RESOURCE);
  if (connectorXmlDescriptor == null) {
    return;
  }
  final ServiceTarget serviceTarget=phaseContext.getServiceTarget();
  final DeploymentUnit deploymentUnit=phaseContext.getDeploymentUnit();
  if (deploymentUnit.getParent() != null) {
    registration=baseRegistration.getSubModel(PathAddress.pathAddress(PathElement.pathElement("subdeployment")));
  }
 else {
    registration=baseRegistration;
  }
  final IronJacamarXmlDescriptor ironJacamarXmlDescriptor=deploymentUnit.getAttachment(IronJacamarXmlDescriptor.ATTACHMENT_KEY);
  final Module module=deploymentUnit.getAttachment(Attachments.MODULE);
  if (module == null)   throw ConnectorLogger.ROOT_LOGGER.failedToGetModuleAttachment(phaseContext.getDeploymentUnit());
  DEPLOYMENT_CONNECTOR_LOGGER.debugf("ParsedRaDeploymentProcessor: Processing=%s",deploymentUnit);
  final ClassLoader classLoader=module.getClassLoader();
  Map<ResourceRoot,Index> annotationIndexes=AnnotationIndexUtils.getAnnotationIndexes(deploymentUnit);
  ServiceBuilder builder=process(connectorXmlDescriptor,ironJacamarXmlDescriptor,classLoader,serviceTarget,annotationIndexes,deploymentUnit.getServiceName(),registration,deploymentResource);
  if (builder != null) {
    String bootstrapCtx=null;
    if (ironJacamarXmlDescriptor != null && ironJacamarXmlDescriptor.getIronJacamar() != null && ironJacamarXmlDescriptor.getIronJacamar().getBootstrapContext() != null)     bootstrapCtx=ironJacamarXmlDescriptor.getIronJacamar().getBootstrapContext();
    if (bootstrapCtx == null)     bootstrapCtx="default";
    if (registration.isAllowsOverride() && registration.getOverrideModel(deploymentUnit.getName()) == null) {
      registration.registerOverrideModel(deploymentUnit.getName(),new OverrideDescriptionProvider(){
        @Override public Map<String,ModelNode> getAttributeOverrideDescriptions(        Locale locale){
          return Collections.emptyMap();
        }
        @Override public Map<String,ModelNode> getChildTypeOverrideDescriptions(        Locale locale){
          return Collections.emptyMap();
        }
      }
);
    }
    builder.setInitialMode(Mode.ACTIVE).install();
  }
}
