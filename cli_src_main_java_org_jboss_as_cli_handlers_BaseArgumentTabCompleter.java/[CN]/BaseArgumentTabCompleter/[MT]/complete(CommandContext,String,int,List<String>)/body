{
  int firstCharIndex=0;
  while (firstCharIndex < buffer.length()) {
    if (!Character.isWhitespace(buffer.charAt(firstCharIndex))) {
      break;
    }
    ++firstCharIndex;
  }
  final ParsedCommandLine parsedCmd=ctx.getParsedCommandLine();
  Iterable<CommandArgument> allArgs=getAllArguments(ctx);
  if (!allArgs.iterator().hasNext()) {
    return -1;
  }
  try {
    if (!parsedCmd.hasProperties()) {
      for (      CommandArgument arg : getAllArguments(ctx)) {
        if (arg.canAppearNext(ctx)) {
          if (arg.getIndex() >= 0) {
            final CommandLineCompleter valCompl=arg.getValueCompleter();
            if (valCompl != null) {
              valCompl.complete(ctx,"",cursor,candidates);
            }
          }
 else {
            String argName=arg.getFullName();
            if (arg.isValueRequired()) {
              argName+='=';
            }
            candidates.add(argName);
          }
        }
      }
      return cursor + buffer.length();
    }
  }
 catch (  CommandFormatException e) {
    return -1;
  }
  int result=cursor + buffer.length();
  String chunk=null;
  CommandLineCompleter valueCompleter=null;
  if (!parsedCmd.endsOnPropertySeparator()) {
    final String argName=parsedCmd.getLastParsedPropertyName();
    final String argValue=parsedCmd.getLastParsedPropertyValue();
    if (argValue != null || parsedCmd.endsOnPropertyValueSeparator()) {
      result=parsedCmd.getLastChunkIndex();
      if (parsedCmd.endsOnPropertyValueSeparator()) {
        ++result;
      }
      chunk=argValue;
      if (argName != null) {
        valueCompleter=getValueCompleter(ctx,argName);
      }
 else {
        valueCompleter=getValueCompleter(ctx,parsedCmd.getOtherProperties().size() - 1);
      }
      if (valueCompleter == null) {
        return -1;
      }
    }
 else {
      chunk=argName;
      if (firstCharIndex == buffer.length()) {
        result=cursor + firstCharIndex;
      }
 else {
        result=parsedCmd.getLastChunkIndex();
      }
    }
  }
 else {
    if (parsedCmd.getLastParsedPropertyValue() != null) {
      chunk=parsedCmd.getLastParsedPropertyValue();
    }
 else {
      chunk=parsedCmd.getLastParsedPropertyName();
    }
  }
  if (valueCompleter != null) {
    int valueResult=valueCompleter.complete(ctx,chunk == null ? "" : chunk,cursor,candidates);
    if (valueResult < 0) {
      return valueResult;
    }
 else {
      return result + valueResult;
    }
  }
  for (  CommandArgument arg : getAllArguments(ctx)) {
    try {
      if (arg.canAppearNext(ctx)) {
        if (arg.getIndex() >= 0) {
          CommandLineCompleter valCompl=arg.getValueCompleter();
          if (valCompl != null) {
            valCompl.complete(ctx,chunk == null ? "" : chunk,cursor,candidates);
          }
        }
 else {
          String argFullName=arg.getFullName();
          if (chunk == null) {
            if (arg.isValueRequired()) {
              argFullName+='=';
            }
            candidates.add(argFullName);
          }
 else           if (argFullName.startsWith(chunk)) {
            if (arg.isValueRequired()) {
              argFullName+='=';
            }
            candidates.add(argFullName);
          }
        }
      }
    }
 catch (    CommandFormatException e) {
      e.printStackTrace();
      return -1;
    }
  }
  Collections.sort(candidates);
  return result;
}
