{
  int firstCharIndex=0;
  while (firstCharIndex < buffer.length()) {
    if (!Character.isWhitespace(buffer.charAt(firstCharIndex))) {
      break;
    }
    ++firstCharIndex;
  }
  final DefaultParsedArguments parsedCmd=(DefaultParsedArguments)ctx.getParsedArguments();
  parsedCmd.reset(buffer,null);
  try {
    TheParser.parseCommandArgs(buffer,parsedCmd);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  parsedCmd.setParsed();
  Iterable<CommandArgument> allArgs=getAllArguments(ctx);
  if (!allArgs.iterator().hasNext()) {
    return -1;
  }
  try {
    if (!parsedCmd.hasArguments()) {
      for (      CommandArgument arg : getAllArguments(ctx)) {
        if (arg.canAppearNext(ctx)) {
          if (arg.getIndex() >= 0) {
            CommandLineCompleter valCompl=arg.getValueCompleter();
            if (valCompl != null) {
              valCompl.complete(ctx,"",cursor,candidates);
            }
          }
 else {
            String argName=arg.getFullName();
            if (arg.isValueRequired()) {
              argName+='=';
            }
            candidates.add(argName);
          }
        }
      }
      return buffer.length();
    }
  }
 catch (  CommandFormatException e) {
    e.printStackTrace();
    return -1;
  }
  int result=buffer.length();
  final String argName;
  final String argValue;
  final int argValueStart;
  String chunk=null;
  CommandLineCompleter valueCompleter=null;
  if (!parsedCmd.endsOnPropertySeparator()) {
    argName=parsedCmd.getLastParsedPropertyName();
    argValue=parsedCmd.getLastParsedPropertyValue();
    if (argValue != null || parsedCmd.endsOnPropertyValueSeparator()) {
      argValueStart=parsedCmd.getLastSeparatorIndex() + 1;
      result=argValueStart;
      chunk=argValue;
      if (argName != null) {
        valueCompleter=getValueCompleter(ctx,argName);
      }
 else {
        try {
          valueCompleter=getValueCompleter(ctx,parsedCmd.getOtherArguments().size() - 1);
        }
 catch (        CommandFormatException e) {
        }
      }
      if (valueCompleter == null) {
        return -1;
      }
    }
 else {
      chunk=argName;
      argValueStart=-1;
      if (firstCharIndex == buffer.length()) {
        result=firstCharIndex;
      }
 else {
        result=parsedCmd.getLastSeparatorIndex() + 1;
      }
    }
  }
 else {
    argName=null;
    argValue=null;
    argValueStart=-1;
  }
  if (valueCompleter != null) {
    int valueResult=valueCompleter.complete(ctx,chunk == null ? "" : chunk,cursor,candidates);
    if (valueResult < 0) {
      return valueResult;
    }
 else {
      return result + valueResult;
    }
  }
  for (  CommandArgument arg : getAllArguments(ctx)) {
    try {
      if (arg.canAppearNext(ctx)) {
        if (arg.getIndex() >= 0) {
          CommandLineCompleter valCompl=arg.getValueCompleter();
          if (valCompl != null) {
            valCompl.complete(ctx,chunk == null ? "" : chunk,cursor,candidates);
          }
        }
 else {
          String argFullName=arg.getFullName();
          if (chunk == null) {
            if (arg.isValueRequired()) {
              argFullName+='=';
            }
            candidates.add(argFullName);
          }
 else           if (argFullName.startsWith(chunk)) {
            if (arg.isValueRequired()) {
              argFullName+='=';
            }
            candidates.add(argFullName);
          }
        }
      }
    }
 catch (    CommandFormatException e) {
      return -1;
    }
  }
  Collections.sort(candidates);
  return result;
}
