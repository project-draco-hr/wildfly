{
  int firstCharIndex=0;
  while (firstCharIndex < buffer.length()) {
    if (!Character.isWhitespace(buffer.charAt(firstCharIndex))) {
      break;
    }
    ++firstCharIndex;
  }
  results.reset();
  final DefaultParsedArguments parsedArguments=(DefaultParsedArguments)ctx.getParsedArguments();
  parsedArguments.reset(null,null);
  try {
    CommandLineParser.parse(buffer,new CommandLineParser.CallbackHandler(){
      @Override public void argument(      String name,      int nameStart,      String value,      int valueStart,      int end) throws CommandFormatException {
        if (end > 0 && end < buffer.length()) {
          parsedArguments.argument(name,nameStart,value,valueStart,end);
        }
        results.argName=name;
        results.argValue=value;
        results.nameStart=nameStart;
        results.valueStart=valueStart;
        results.endIndex=end;
      }
      @Override public void outputTarget(      String outputTarget) throws CommandFormatException {
      }
    }
);
  }
 catch (  CommandLineException e) {
    return -1;
  }
  int result=buffer.length();
  String chunk=null;
  CommandLineCompleter valueCompleter=null;
  if (firstCharIndex != result) {
    if (results.argValue != null) {
      if (results.argValue.isEmpty()) {
        chunk=null;
        result=results.valueStart;
        valueCompleter=getValueCompleter(ctx,results.argName);
        if (valueCompleter == null) {
          return -1;
        }
      }
 else {
        if (results.endIndex < buffer.length()) {
          chunk=null;
        }
 else {
          chunk=results.argValue;
          result=results.valueStart;
          valueCompleter=getValueCompleter(ctx,results.argName);
          if (valueCompleter == null) {
            return -1;
          }
        }
      }
    }
 else {
      if (results.endIndex < buffer.length()) {
        chunk=null;
      }
 else {
        chunk=results.argName;
        if (results.argName != null) {
          result=results.nameStart;
        }
      }
    }
  }
  if (valueCompleter != null) {
    int valueResult=valueCompleter.complete(ctx,chunk == null ? "" : chunk,cursor,candidates);
    if (valueResult < 0) {
      return valueResult;
    }
 else {
      return result + valueResult;
    }
  }
  for (  CommandArgument arg : getAllArguments(ctx)) {
    try {
      if (arg.canAppearNext(ctx)) {
        if (arg.getIndex() >= 0) {
          CommandLineCompleter valCompl=arg.getValueCompleter();
          if (valCompl != null) {
            valCompl.complete(ctx,chunk == null ? "" : chunk,cursor,candidates);
          }
        }
 else {
          String argName=arg.getFullName();
          if (chunk == null) {
            if (arg.isValueRequired()) {
              argName+='=';
            }
            candidates.add(argName);
          }
 else           if (argName.startsWith(chunk)) {
            if (arg.isValueRequired()) {
              argName+='=';
            }
            candidates.add(argName);
          }
        }
      }
    }
 catch (    CommandFormatException e) {
      return -1;
    }
  }
  Collections.sort(candidates);
  return result;
}
