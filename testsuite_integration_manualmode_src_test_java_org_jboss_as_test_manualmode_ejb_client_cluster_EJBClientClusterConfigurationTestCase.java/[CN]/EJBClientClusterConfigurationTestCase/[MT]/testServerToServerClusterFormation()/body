{
  Assume.assumeFalse(IS_WINDOWS);
  this.container.start(DEFAULT_JBOSSAS);
  final ModelControllerClient serverBClient=createModelControllerClient(DEFAULT_JBOSSAS);
  ModelControllerClient serverAClient=null;
  try {
    this.deployer.deploy(DEFAULT_AS_DEPLOYMENT);
    this.container.start(JBOSSAS_WITH_REMOTE_OUTBOUND_CONNECTION);
    serverAClient=createModelControllerClient(JBOSSAS_WITH_REMOTE_OUTBOUND_CONNECTION);
    SystemPropertySetup.INSTANCE.setup(createManagementClient(serverAClient,JBOSSAS_WITH_REMOTE_OUTBOUND_CONNECTION),JBOSSAS_WITH_REMOTE_OUTBOUND_CONNECTION);
    this.deployer.deploy(DEPLOYMENT_WITH_JBOSS_EJB_CLIENT_XML);
    final NodeNameEcho nonClusteredBean=(NodeNameEcho)this.context.lookup("ejb:/" + MODULE_NAME + "//"+ NonClusteredStatefulNodeNameEcho.class.getSimpleName()+ "!"+ NodeNameEcho.class.getName()+ "?stateful");
    final String nodeNameBeforeShutdown=nonClusteredBean.getNodeName(true);
    Assert.assertEquals("EJB invocation ended up on unexpected node",DEFAULT_JBOSSAS_NODE_NAME,nodeNameBeforeShutdown);
    this.container.stop(DEFAULT_JBOSSAS);
    final String nodeNameAfterShutdown=nonClusteredBean.getNodeName(false);
    Assert.assertEquals("EJB invocation ended up on unexpected node after shutdown",JBOSSAS_WITH_OUTBOUND_CONNECTION_NODE_NAME,nodeNameAfterShutdown);
  }
  finally {
    try {
      this.deployer.undeploy(DEPLOYMENT_WITH_JBOSS_EJB_CLIENT_XML);
      SystemPropertySetup.INSTANCE.tearDown(createManagementClient(serverAClient,JBOSSAS_WITH_REMOTE_OUTBOUND_CONNECTION),JBOSSAS_WITH_REMOTE_OUTBOUND_CONNECTION);
    }
 catch (    Exception e) {
      logger.info("Exception during container shutdown",e);
    }
 finally {
      this.container.stop(JBOSSAS_WITH_REMOTE_OUTBOUND_CONNECTION);
    }
    try {
      if (!this.container.isStarted(DEFAULT_JBOSSAS)) {
        this.container.start(DEFAULT_JBOSSAS);
      }
      this.deployer.undeploy(DEFAULT_AS_DEPLOYMENT);
    }
 catch (    Exception e) {
      logger.info("Exception during container shutdown",e);
    }
 finally {
      this.container.stop(DEFAULT_JBOSSAS);
    }
    if (serverAClient != null) {
      serverAClient.close();
    }
    serverBClient.close();
  }
}
