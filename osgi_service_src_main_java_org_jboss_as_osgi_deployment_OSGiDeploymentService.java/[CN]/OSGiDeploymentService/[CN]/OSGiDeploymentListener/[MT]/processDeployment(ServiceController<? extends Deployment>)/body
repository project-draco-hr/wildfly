{
  controller.removeListener(this);
  Set<Deployment> bundlesToStart=null;
synchronized (this) {
    pendingDeployments.remove(controller.getValue());
    if (pendingDeployments.isEmpty()) {
      bundlesToStart=new HashSet<Deployment>(startedDeployments);
      startedDeployments.clear();
    }
  }
  if (bundlesToStart != null) {
    ServiceContainer serviceContainer=controller.getServiceContainer();
    PackageAdmin packageAdmin=PackageAdminService.getServiceValue(serviceContainer);
    StartLevel startLevel=StartLevelService.getServiceValue(serviceContainer);
    for (    Deployment dep : bundlesToStart) {
      Bundle bundle=dep.getAttachment(Bundle.class);
      if (packageAdmin.getBundleType(bundle) != PackageAdmin.BUNDLE_TYPE_FRAGMENT) {
        boolean autoStart=dep.isAutoStart();
        String contextName=InstallBundleInitiatorService.getContextName(dep);
        ServiceName serviceName=InstallBundleInitiatorService.getServiceName(contextName);
        ServiceController<?> initiatingController=serviceContainer.getService(serviceName);
        if (initiatingController != null) {
          try {
            Deployment initiatingDeployment=(Deployment)initiatingController.getValue();
            autoStart=initiatingDeployment.isAutoStart();
            Integer startlevel=initiatingDeployment.getStartLevel();
            if (startlevel != null)             startLevel.setBundleStartLevel(bundle,startlevel);
          }
  finally {
            initiatingController.setMode(Mode.REMOVE);
          }
        }
        if (autoStart) {
          log.tracef("Starting bundle: %s",bundle);
          try {
            bundle.start();
          }
 catch (          BundleException ex) {
            log.errorf(ex,"Cannot start bundle: %s",bundle);
          }
        }
      }
    }
  }
}
