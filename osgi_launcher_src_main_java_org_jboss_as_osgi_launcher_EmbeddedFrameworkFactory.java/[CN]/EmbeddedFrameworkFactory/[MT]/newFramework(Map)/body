{
  Map<String,String> props=new HashMap<String,String>();
  if (configuration != null) {
    props.putAll(configuration);
  }
  for (  Map.Entry<String,String> entry : props.entrySet()) {
    SecurityActions.setSystemProperty(entry.getKey(),entry.getValue());
  }
  log.debugf("Config: " + props);
  Set<String> syspackages=new HashSet<String>();
  syspackages.add("org.osgi.framework");
  syspackages.add("org.osgi.resource");
  syspackages.add("org.osgi.wiring");
  syspackages.add("org.osgi.util.tracker");
  addConfiguredPackages(syspackages,props,Constants.FRAMEWORK_SYSTEMPACKAGES);
  addConfiguredPackages(syspackages,props,Constants.FRAMEWORK_SYSTEMPACKAGES_EXTRA);
  addConfiguredPackages(syspackages,props,Constants.FRAMEWORK_BOOTDELEGATION);
  String jbossHome=getProperty(props,SYSPROP_KEY_JBOSS_HOME,null);
  String modulePath=getProperty(props,SYSPROP_KEY_MODULE_PATH,null);
  String bundlePath=getProperty(props,SYSPROP_KEY_BUNDLE_PATH,null);
  String serverConfig=getProperty(props,SYSPROP_KEY_JBOSS_SERVER_CONFIG,"standalone-osgi.xml");
  String[] sysarray=syspackages.toArray(new String[syspackages.size()]);
  String[] cmdargs=new String[]{CommandLineConstants.SERVER_CONFIG,serverConfig};
  return new FrameworkProxy(EmbeddedServerFactory.create(jbossHome,modulePath,bundlePath,sysarray,cmdargs));
}
