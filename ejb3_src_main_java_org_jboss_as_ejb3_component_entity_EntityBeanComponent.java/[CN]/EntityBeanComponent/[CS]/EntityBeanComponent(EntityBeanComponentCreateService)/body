{
  super(ejbComponentCreateService);
  StatelessObjectFactory<EntityBeanComponentInstance> factory=new StatelessObjectFactory<EntityBeanComponentInstance>(){
    @Override public EntityBeanComponentInstance create(){
      return (EntityBeanComponentInstance)createInstance();
    }
    @Override public void destroy(    EntityBeanComponentInstance obj){
      obj.destroy();
    }
  }
;
  pool=new InfinitePool<EntityBeanComponentInstance>(factory);
  this.cache=createEntityCache(ejbComponentCreateService);
  this.homeClass=ejbComponentCreateService.getHomeClass();
  this.localHomeClass=ejbComponentCreateService.getLocalHomeClass();
  this.localClass=ejbComponentCreateService.getLocalClass();
  this.remoteClass=ejbComponentCreateService.getRemoteClass();
  this.primaryKeyClass=ejbComponentCreateService.getPrimaryKeyClass();
  this.ejbActivate=ejbComponentCreateService.getEjbActivate();
  this.ejbActivateMethod=ejbComponentCreateService.getEjbActivateMethod();
  this.ejbLoad=ejbComponentCreateService.getEjbLoad();
  this.ejbLoadMethod=ejbComponentCreateService.getEjbLoadMethod();
  this.ejbStore=ejbComponentCreateService.getEjbStore();
  this.ejbStoreMethod=ejbComponentCreateService.getEjbStoreMethod();
  this.ejbPassivate=ejbComponentCreateService.getEjbPassivate();
  this.ejbPassivateMethod=ejbComponentCreateService.getEjbPassivateMethod();
  this.unsetEntityContext=ejbComponentCreateService.getUnsetEntityContext();
  this.unsetEntityContextMethod=ejbComponentCreateService.getUnsetEntityContextMethod();
}
