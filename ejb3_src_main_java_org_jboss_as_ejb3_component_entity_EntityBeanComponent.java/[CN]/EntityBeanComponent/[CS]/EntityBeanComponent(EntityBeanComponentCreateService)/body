{
  super(ejbComponentCreateService);
  factory=new StatelessObjectFactory<EntityBeanComponentInstance>(){
    @Override public EntityBeanComponentInstance create(){
      return (EntityBeanComponentInstance)createInstance();
    }
    @Override public void destroy(    EntityBeanComponentInstance obj){
      obj.destroy();
    }
  }
;
  optimisticLocking=ejbComponentCreateService.getOptimisticLocking();
  final PoolConfig poolConfig=ejbComponentCreateService.getPoolConfig();
  if (poolConfig == null) {
    ROOT_LOGGER.debugf("Pooling is disabled for entity bean %s",ejbComponentCreateService.getComponentName());
    this.pool=null;
    this.poolName=null;
  }
 else {
    ROOT_LOGGER.debugf("Using pool config %s to create pool for entity bean %s",poolConfig,ejbComponentCreateService.getComponentName());
    this.pool=poolConfig.createPool(factory);
    this.poolName=poolConfig.getPoolName();
  }
  this.cache=createEntityCache(ejbComponentCreateService);
  this.homeClass=ejbComponentCreateService.getHomeClass();
  this.localHomeClass=ejbComponentCreateService.getLocalHomeClass();
  this.localClass=ejbComponentCreateService.getLocalClass();
  this.remoteClass=ejbComponentCreateService.getRemoteClass();
  this.primaryKeyClass=ejbComponentCreateService.getPrimaryKeyClass();
  this.ejbActivate=ejbComponentCreateService.getEjbActivate();
  this.ejbActivateMethod=ejbComponentCreateService.getEjbActivateMethod();
  this.ejbLoad=ejbComponentCreateService.getEjbLoad();
  this.ejbLoadMethod=ejbComponentCreateService.getEjbLoadMethod();
  this.ejbStore=ejbComponentCreateService.getEjbStore();
  this.ejbStoreMethod=ejbComponentCreateService.getEjbStoreMethod();
  this.ejbPassivate=ejbComponentCreateService.getEjbPassivate();
  this.ejbPassivateMethod=ejbComponentCreateService.getEjbPassivateMethod();
  this.unsetEntityContext=ejbComponentCreateService.getUnsetEntityContext();
  this.unsetEntityContextMethod=ejbComponentCreateService.getUnsetEntityContextMethod();
}
