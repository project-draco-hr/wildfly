{
  requireNoAttributes(reader);
  final ModelNode subsystem=new ModelNode();
  subsystem.get(OP).set(ADD);
  subsystem.get(OP_ADDR).add(SUBSYSTEM,SUBSYSTEM_NAME);
  final EnumSet<Element> required=EnumSet.of(Element.CONFIGURATION);
  final EnumSet<Element> encountered=EnumSet.noneOf(Element.class);
  while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
switch (Namespace.forUri(reader.getNamespaceURI())) {
case WEBSERVICES_1_0:
{
        final Element element=Element.forName(reader.getLocalName());
        required.remove(element);
        if (!encountered.add(element)) {
          throw unexpectedElement(reader);
        }
switch (element) {
case CONFIGURATION:
{
            final ModelNode model=parseConfigurationElement(reader);
            subsystem.get(CONFIGURATION).set(model);
            break;
          }
default :
{
          throw unexpectedElement(reader);
        }
    }
    break;
  }
default :
{
  throw unexpectedElement(reader);
}
}
}
if (!required.isEmpty()) {
throw missingRequiredElement(reader,required);
}
list.add(subsystem);
}
