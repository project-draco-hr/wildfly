{
  if (operationRequest == null || operationRequest.isEmpty()) {
    return;
  }
  int aoSep=operationRequest.indexOf(ADDRESS_OPERATION_NAME_SEPARATOR);
  final int addressLength;
  if (aoSep < 0) {
    addressLength=operationRequest.length();
  }
 else   if (aoSep > 0) {
    addressLength=aoSep;
  }
 else {
    addressLength=0;
  }
  if (addressLength > 0) {
    final int nodePathStart;
    if (operationRequest.startsWith("./")) {
      nodePathStart=2;
      handler.nodeSeparator(1);
    }
 else {
      nodePathStart=0;
    }
    int nodeIndex=nodePathStart;
    while (nodeIndex < addressLength) {
      final int nodeSepIndex=operationRequest.indexOf(NODE_SEPARATOR,nodeIndex);
      final String node;
      if (nodeSepIndex < 0) {
        node=operationRequest.substring(nodeIndex,addressLength).trim();
      }
 else {
        node=operationRequest.substring(nodeIndex,nodeSepIndex).trim();
      }
      if (node.isEmpty()) {
        if (nodeSepIndex > 0) {
          throw new OperationFormatException("Node type/name is missing or the format is wrong for the prefix '" + operationRequest.substring(0,addressLength) + "'");
        }
 else         if (nodeSepIndex == 0) {
          handler.rootNode();
        }
      }
 else {
        int typeNameSep=node.indexOf(NODE_TYPE_NAME_SEPARATOR);
        if (typeNameSep < 0) {
          if (PARENT_NODE.equals(node)) {
            handler.parentNode();
          }
 else           if (NODE_TYPE.equals(node)) {
            handler.nodeType();
          }
 else {
            if (nodeIndex == nodePathStart) {
              if (nodeSepIndex < 0) {
                handler.nodeTypeOrName(node);
              }
 else               if (aoSep > 0) {
                handler.nodeName(node);
              }
 else {
                handler.nodeTypeOrName(node);
              }
            }
 else             if (nodeSepIndex < 0) {
              handler.nodeTypeOrName(node);
            }
          }
        }
 else {
          String nodeType=node.substring(0,typeNameSep).trim();
          handler.nodeType(nodeType);
          handler.nodeTypeNameSeparator(nodeIndex + typeNameSep);
          String nodeName=node.substring(typeNameSep + 1).trim();
          if (!nodeName.isEmpty()) {
            handler.nodeName(nodeName);
          }
        }
      }
      if (nodeSepIndex < 0) {
        nodeIndex=addressLength;
      }
 else {
        handler.nodeSeparator(nodeSepIndex);
        nodeIndex=nodeSepIndex + 1;
      }
    }
  }
  if (aoSep < 0) {
    return;
  }
  handler.addressOperationSeparator(aoSep);
  String operationName;
  int argListStartIndex=operationRequest.indexOf(ARGUMENTS_LIST_START,aoSep + 1);
  if (argListStartIndex < 0) {
    if (aoSep + 1 < operationRequest.length()) {
      operationName=operationRequest.substring(aoSep + 1);
      handler.operationName(operationName);
    }
    return;
  }
 else {
    operationName=operationRequest.substring(aoSep + 1,argListStartIndex).trim();
    handler.operationName(operationName);
  }
  ParsingUtil.parseParameters(operationRequest,argListStartIndex,handler);
}
