{
  if (operationRequest == null || operationRequest.isEmpty()) {
    return;
  }
  ParsingStateCallbackHandler stateCallbackHandler=new ParsingStateCallbackHandler(){
    StringBuilder buffer=new StringBuilder();
    int propNameValueSep=-1;
    StringBuilder propName;
    boolean propValueContent;
    @Override public void enteredState(    ParsingContext ctx) throws OperationFormatException {
      String stateId=ctx.getState().getId();
      if (stateId.equals(OperationState.ID)) {
        handler.addressOperationSeparator(ctx.getLocation());
      }
 else       if (stateId.equals(PropertyListState.ID)) {
        handler.propertyListStart(ctx.getLocation());
      }
 else       if (stateId.equals(PropertyState.ID)) {
        propName=new StringBuilder();
      }
 else       if (stateId.equals(PropertyValueState.ID)) {
        propNameValueSep=ctx.getLocation();
        propValueContent=true;
        buffer.setLength(0);
      }
      if (!propValueContent) {
        buffer.setLength(0);
      }
    }
    @Override public void leavingState(    ParsingContext ctx) throws OperationFormatException {
      String stateId=ctx.getState().getId();
      if (stateId.equals(PropertyListState.ID)) {
        if (ctx.getCharacter() == ')') {
          handler.propertyListEnd(ctx.getLocation());
        }
      }
 else       if (stateId.equals(PropertyState.ID)) {
        if (buffer.length() > 0) {
          handler.property(propName.toString().trim(),buffer.toString().trim(),propNameValueSep);
        }
 else {
          handler.propertyName(propName.toString().trim());
          if (propNameValueSep != -1) {
            handler.propertyNameValueSeparator(propNameValueSep);
          }
        }
        if (ctx.getCharacter() == ',') {
          handler.propertySeparator(ctx.getLocation());
        }
        propName=null;
        propNameValueSep=-1;
        propValueContent=false;
      }
 else       if (stateId.equals(OperationNameState.ID)) {
        handler.operationName(buffer.toString().trim());
      }
 else       if (stateId.equals(NodeState.ID)) {
        char ch=ctx.getCharacter();
        if (buffer.length() == 0) {
          if (ch == '/') {
            handler.rootNode();
            handler.nodeSeparator(ctx.getLocation());
          }
        }
 else {
          if (ch == '=') {
            handler.nodeType(buffer.toString().trim());
            handler.nodeTypeNameSeparator(ctx.getLocation());
          }
 else           if (ch == ':') {
            handler.nodeName(buffer.toString().trim());
          }
 else {
            final String value=buffer.toString().trim();
            if (".".equals(value)) {
            }
 else             if ("..".equals(value)) {
              handler.parentNode();
            }
 else             if (".type".equals(value)) {
              handler.nodeType();
            }
 else {
              if (ch == '/') {
                if ("".equals(value)) {
                  handler.rootNode();
                }
 else {
                  handler.nodeName(value);
                }
              }
 else {
                handler.nodeTypeOrName(value);
              }
            }
            if (ch == '/') {
              handler.nodeSeparator(ctx.getLocation());
            }
          }
        }
      }
    }
    @Override public void character(    ParsingContext ctx) throws OperationFormatException {
      String stateId=ctx.getState().getId();
      if (stateId.equals(PropertyState.ID)) {
        propName.append(ctx.getCharacter());
      }
 else {
        buffer.append(ctx.getCharacter());
      }
    }
  }
;
  StateParser.parse(operationRequest,stateCallbackHandler,OperationRequestState.INSTANCE);
}
