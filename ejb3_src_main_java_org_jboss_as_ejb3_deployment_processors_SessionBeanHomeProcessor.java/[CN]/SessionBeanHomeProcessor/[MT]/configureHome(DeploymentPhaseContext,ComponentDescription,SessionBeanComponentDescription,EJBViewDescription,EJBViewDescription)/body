{
  homeView.getConfigurators().add(new ViewConfigurator(){
    @Override public void configure(    final DeploymentPhaseContext context,    final ComponentConfiguration componentConfiguration,    final ViewDescription description,    final ViewConfiguration configuration) throws DeploymentUnitProcessingException {
      configuration.addClientPostConstructInterceptor(org.jboss.invocation.Interceptors.getTerminalInterceptorFactory(),InterceptorOrder.ClientPostConstruct.TERMINAL_INTERCEPTOR);
      configuration.addClientPreDestroyInterceptor(org.jboss.invocation.Interceptors.getTerminalInterceptorFactory(),InterceptorOrder.ClientPreDestroy.TERMINAL_INTERCEPTOR);
      final DeploymentClassIndex classIndex=phaseContext.getDeploymentUnit().getAttachment(Attachments.CLASS_INDEX);
      for (      Method method : configuration.getProxyFactory().getCachedMethods()) {
        if (method.getName().startsWith("create")) {
          if (ejbObjectView == null) {
            throw MESSAGES.invalidEjbLocalInterface(componentDescription.getComponentName());
          }
          final ViewDescription createdView=ejbObjectView;
          Method initMethod=resolveInitMethod(ejbComponentDescription,method);
          final SessionBeanHomeInterceptorFactory factory=new SessionBeanHomeInterceptorFactory(initMethod);
          componentConfiguration.getStartDependencies().add(new DependencyConfigurator<ComponentStartService>(){
            @Override public void configureDependency(            final ServiceBuilder<?> serviceBuilder,            final ComponentStartService service) throws DeploymentUnitProcessingException {
              serviceBuilder.addDependency(createdView.getServiceName(),ComponentView.class,factory.getViewToCreate());
            }
          }
);
          configuration.addClientInterceptor(method,ViewDescription.CLIENT_DISPATCHER_INTERCEPTOR_FACTORY,InterceptorOrder.Client.CLIENT_DISPATCHER);
          configuration.addViewInterceptor(method,factory,InterceptorOrder.View.HOME_METHOD_INTERCEPTOR);
        }
 else         if (method.getName().equals("getEJBMetaData") && method.getParameterTypes().length == 0) {
          final Class<?> ejbObjectClass;
          try {
            ejbObjectClass=classIndex.classIndex(ejbObjectView.getViewClassName()).getModuleClass();
          }
 catch (          ClassNotFoundException e) {
            throw EjbLogger.EJB3_LOGGER.failedToLoadViewClassForComponent(e,componentDescription.getComponentName());
          }
          final EjbMetadataInterceptorFactory factory=new EjbMetadataInterceptorFactory(ejbObjectClass,configuration.getViewClass(),null,true,componentDescription instanceof StatelessComponentDescription);
          componentConfiguration.getStartDependencies().add(new DependencyConfigurator<ComponentStartService>(){
            @Override public void configureDependency(            final ServiceBuilder<?> serviceBuilder,            final ComponentStartService service) throws DeploymentUnitProcessingException {
              serviceBuilder.addDependency(configuration.getViewServiceName(),ComponentView.class,factory.getHomeView());
            }
          }
);
          configuration.addClientInterceptor(method,ViewDescription.CLIENT_DISPATCHER_INTERCEPTOR_FACTORY,InterceptorOrder.Client.CLIENT_DISPATCHER);
          configuration.addViewInterceptor(method,factory,InterceptorOrder.View.HOME_METHOD_INTERCEPTOR);
        }
 else         if (method.getName().equals("remove") && method.getParameterTypes().length == 1 && method.getParameterTypes()[0] == Object.class) {
          configuration.addClientInterceptor(method,ViewDescription.CLIENT_DISPATCHER_INTERCEPTOR_FACTORY,InterceptorOrder.Client.CLIENT_DISPATCHER);
          configuration.addViewInterceptor(method,InvalidRemoveExceptionMethodInterceptor.FACTORY,InterceptorOrder.View.INVALID_METHOD_EXCEPTION);
        }
 else         if (method.getName().equals("remove") && method.getParameterTypes().length == 1 && method.getParameterTypes()[0] == Handle.class) {
          configuration.addClientInterceptor(method,ViewDescription.CLIENT_DISPATCHER_INTERCEPTOR_FACTORY,InterceptorOrder.Client.CLIENT_DISPATCHER);
          configuration.addViewInterceptor(method,HomeRemoveInterceptor.FACTORY,InterceptorOrder.View.HOME_METHOD_INTERCEPTOR);
        }
      }
    }
  }
);
}
