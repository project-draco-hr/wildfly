{
  File war=createFile("foo.war");
  File dodeploy=createFile("foo.war" + FileSystemDeploymentService.DO_DEPLOY);
  File deployed=new File(tmpDir,"foo.war" + FileSystemDeploymentService.DEPLOYED);
  File undeployed=new File(tmpDir,"foo.war" + FileSystemDeploymentService.UNDEPLOYED);
  TesteeSet ts=createTestee();
  ts.testee.setAutoDeployZippedContent(true);
  ts.controller.addCompositeSuccessResponse(1);
  ts.testee.scan();
  assertTrue(war.exists());
  assertFalse(dodeploy.exists());
  assertTrue(deployed.exists());
  assertEquals(1,ts.controller.added.size());
  assertEquals(1,ts.controller.deployed.size());
  byte[] bytes=ts.controller.deployed.get("foo.war");
  assertTrue(undeployed.createNewFile());
  undeployed.setLastModified(war.lastModified());
  assertTrue(deployed.delete());
  ts.controller.deployed.clear();
  ts.controller.added.clear();
  ts.controller.addCompositeSuccessResponse(1);
  ts.testee.scan();
  assertTrue(war.exists());
  assertFalse(dodeploy.exists());
  assertFalse(deployed.exists());
  assertTrue(undeployed.exists());
  ts.controller.added.put("foo.war",bytes);
  ts.controller.deployed.put("foo.war",bytes);
  ts.controller.addCompositeSuccessResponse(1);
  ts.testee.scan();
  assertTrue(war.exists());
  assertFalse(dodeploy.exists());
  assertTrue(deployed.exists());
  assertFalse(undeployed.exists());
  assertEquals(1,ts.controller.added.size());
  assertEquals(1,ts.controller.deployed.size());
}
