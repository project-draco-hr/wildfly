{
  if (context.isBooting()) {
    final PathAddress address=PathAddress.pathAddress(operation.require(OP_ADDR));
    final String name=address.getLastElement().getValue();
    final ServerConfig serverConfig=ASHelper.getMSCService(WSServices.CONFIG_SERVICE,ServerConfig.class,context);
    final ServiceName serviceName=getEndpointConfigServiceName(name);
    final ConfigService endpointConfigService=new ConfigService(serverConfig,name,false);
    final ServiceTarget target=context.getServiceTarget();
    final ServiceBuilder<?> serviceBuilder=target.addService(serviceName,endpointConfigService);
    for (    ServiceName sn : PackageUtils.getServiceNameDependencies(context,serviceName,address,Constants.PROPERTY)) {
      serviceBuilder.addDependency(sn,PropertyService.class,endpointConfigService.getPropertiesInjector());
    }
    for (    ServiceName sn : PackageUtils.getServiceNameDependencies(context,serviceName,address,Constants.PRE_HANDLER_CHAIN)) {
      serviceBuilder.addDependency(sn,UnifiedHandlerChainMetaData.class,endpointConfigService.getPreHandlerChainsInjector());
    }
    for (    ServiceName sn : PackageUtils.getServiceNameDependencies(context,serviceName,address,Constants.POST_HANDLER_CHAIN)) {
      serviceBuilder.addDependency(sn,UnifiedHandlerChainMetaData.class,endpointConfigService.getPostHandlerChainsInjector());
    }
    ServiceController<?> controller=serviceBuilder.setInitialMode(ServiceController.Mode.ACTIVE).install();
    if (newControllers != null) {
      newControllers.add(controller);
    }
  }
 else {
    context.reloadRequired();
  }
}
