{
  final PathAddress address=PathAddress.pathAddress(operation.require(OP_ADDR));
  final String name=address.getLastElement().getValue();
  final ModelNode compensatingOperation=new ModelNode();
  compensatingOperation.get(OP_ADDR).set(operation.require(OP_ADDR));
  compensatingOperation.get(OP).set(REMOVE);
  final ModelNode subModel=context.getSubModel();
  if (operation.hasDefined(Constants.PRE_HANDLER_CHAINS)) {
    ModelNode preHandlers=operation.get(Constants.PRE_HANDLER_CHAINS);
    subModel.get(Constants.PRE_HANDLER_CHAINS).set(preHandlers);
  }
  if (operation.hasDefined(Constants.POST_HANDLER_CHAINS)) {
    ModelNode postHandlers=operation.get(Constants.POST_HANDLER_CHAINS);
    subModel.get(Constants.POST_HANDLER_CHAINS).set(postHandlers);
  }
  if (operation.hasDefined(Constants.PROPERTY)) {
    ModelNode property=operation.get(Constants.PROPERTY);
    subModel.get(Constants.PROPERTY).set(property);
  }
  if (operation.hasDefined(Constants.FEATURE)) {
    ModelNode feature=operation.get(Constants.FEATURE);
    subModel.get(Constants.FEATURE).set(feature);
  }
  if (context.getRuntimeContext() != null) {
    context.getRuntimeContext().setRuntimeTask(new RuntimeTask(){
      public void execute(      RuntimeTaskContext context) throws OperationFailedException {
        ServiceController<?> configService=context.getServiceRegistry().getService(WSServices.CONFIG_SERVICE);
        if (configService != null) {
          ServerConfig config=(ServerConfig)configService.getValue();
          EndpointConfig endpointConfig=new EndpointConfig();
          endpointConfig.setConfigName(name);
          if (subModel.hasDefined(Constants.PRE_HANDLER_CHAINS)) {
            ModelNode preHandlers=subModel.get(Constants.PRE_HANDLER_CHAINS);
            endpointConfig.setPreHandlerChains(buildChainMD(preHandlers));
          }
          if (subModel.hasDefined(Constants.POST_HANDLER_CHAINS)) {
            ModelNode postHandlers=subModel.get(Constants.POST_HANDLER_CHAINS);
            endpointConfig.setPostHandlerChains(buildChainMD(postHandlers));
          }
          if (subModel.hasDefined(Constants.PROPERTY)) {
            for (            String name : subModel.get(Constants.PROPERTY).keys()) {
              endpointConfig.setProperty(name,subModel.get(Constants.PROPERTY).get(name).asString());
            }
          }
          if (subModel.hasDefined(Constants.FEATURE)) {
            for (            String name : subModel.get(Constants.FEATURE).keys()) {
              endpointConfig.setFeature(new Feature(name),true);
            }
          }
          config.addEndpointConfig(endpointConfig);
        }
        resultHandler.handleResultComplete();
      }
    }
);
  }
 else {
    resultHandler.handleResultComplete();
  }
  return new BasicOperationResult(compensatingOperation);
}
