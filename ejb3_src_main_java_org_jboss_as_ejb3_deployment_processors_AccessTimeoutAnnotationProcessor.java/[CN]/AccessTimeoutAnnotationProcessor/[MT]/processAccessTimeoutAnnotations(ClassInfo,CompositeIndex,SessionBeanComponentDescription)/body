{
  final DotName superName=beanClass.superName();
  if (superName != null) {
    ClassInfo superClass=compositeIndex.getClassByName(superName);
    if (superClass != null)     processAccessTimeoutAnnotations(superClass,compositeIndex,componentDescription);
  }
  final Map<DotName,List<AnnotationInstance>> classAnnotations=beanClass.annotations();
  if (classAnnotations == null) {
    return;
  }
  List<AnnotationInstance> annotations=classAnnotations.get(ACCESS_TIMEOUT_ANNOTATION_DOT_NAME);
  if (annotations == null) {
    return;
  }
  for (  AnnotationInstance annotationInstance : annotations) {
    AnnotationTarget target=annotationInstance.target();
    AccessTimeout accessTimeout=this.getAccessTimeout(annotationInstance);
    if (target instanceof ClassInfo) {
      componentDescription.setBeanLevelAccessTimeout(accessTimeout);
      logger.debug("Bean " + componentDescription.getEJBName() + " marked for access timeout: "+ accessTimeout);
    }
 else     if (target instanceof MethodInfo) {
      final MethodInfo method=(MethodInfo)target;
      String methodName=method.name();
      String[] methodParams=toString(method.args());
      componentDescription.setAccessTimeout(accessTimeout,methodName,methodParams);
      logger.debug("Method " + method.name() + methodParams+ " on bean "+ componentDescription.getEJBName()+ " marked for access timeout: "+ accessTimeout);
    }
  }
}
