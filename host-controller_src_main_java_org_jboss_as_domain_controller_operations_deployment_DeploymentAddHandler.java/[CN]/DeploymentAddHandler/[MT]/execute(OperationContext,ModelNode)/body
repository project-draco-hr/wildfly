{
  validator.validate(operation);
  PathAddress address=PathAddress.pathAddress(operation.get(OP_ADDR));
  String name=address.getLastElement().getValue();
  String runtimeName=operation.hasDefined(RUNTIME_NAME) ? operation.get(RUNTIME_NAME).asString() : name;
  byte[] hash=null;
  final ModelNode content=operation.require(CONTENT).clone();
  final ModelNode contentItemNode=content.require(0);
  if (contentItemNode.hasDefined(HASH)) {
    managedContentValidator.validate(contentItemNode);
    hash=contentItemNode.require(HASH).asBytes();
    if (contentRepository != null && !contentRepository.hasContent(hash)) {
      if (context.isBooting()) {
        if (context.getRunningMode() == RunningMode.ADMIN_ONLY) {
          DomainControllerLogger.HOST_CONTROLLER_LOGGER.reportAdminOnlyMissingDeploymentContent(HashUtil.bytesToHexString(hash),name);
        }
 else {
          throw createFailureException(MESSAGES.noDeploymentContentWithHashAtBoot(HashUtil.bytesToHexString(hash),name));
        }
      }
 else {
        throw createFailureException(MESSAGES.noDeploymentContentWithHash(HashUtil.bytesToHexString(hash)));
      }
    }
  }
 else   if (hasValidContentAdditionParameterDefined(contentItemNode)) {
    if (contentRepository == null) {
      throw createFailureException(MESSAGES.slaveCannotAcceptUploads());
    }
    InputStream in=getInputStream(context,contentItemNode);
    try {
      try {
        hash=contentRepository.addContent(in);
      }
 catch (      IOException e) {
        throw createFailureException(e.toString());
      }
    }
  finally {
      StreamUtils.safeClose(in);
    }
    contentItemNode.clear();
    contentItemNode.get(HASH).set(hash);
  }
 else {
    unmanagedContentValidator.validate(contentItemNode);
  }
  final Resource resource=context.createResource(PathAddress.EMPTY_ADDRESS);
  final ModelNode subModel=resource.getModel();
  subModel.get(NAME).set(name);
  subModel.get(RUNTIME_NAME).set(runtimeName);
  subModel.get(CONTENT).set(content);
  context.completeStep(OperationContext.RollbackHandler.NOOP_ROLLBACK_HANDLER);
}
