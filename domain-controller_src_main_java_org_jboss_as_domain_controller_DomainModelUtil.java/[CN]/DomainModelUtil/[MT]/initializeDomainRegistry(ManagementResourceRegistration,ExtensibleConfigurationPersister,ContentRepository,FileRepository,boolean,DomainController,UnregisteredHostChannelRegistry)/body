{
  final EnumSet<OperationEntry.Flag> readOnly=EnumSet.of(OperationEntry.Flag.READ_ONLY);
  final EnumSet<OperationEntry.Flag> deploymentUpload=EnumSet.of(OperationEntry.Flag.DEPLOYMENT_UPLOAD);
  root.registerOperationHandler(CompositeOperationHandler.NAME,CompositeOperationHandler.INSTANCE,CompositeOperationHandler.INSTANCE,false,OperationEntry.EntryType.PRIVATE);
  XmlMarshallingHandler xmh=new XmlMarshallingHandler(configurationPersister);
  root.registerOperationHandler(XmlMarshallingHandler.OPERATION_NAME,xmh,xmh,false,OperationEntry.EntryType.PUBLIC,readOnly);
  root.registerOperationHandler(NamespaceAddHandler.OPERATION_NAME,NamespaceAddHandler.INSTANCE,NamespaceAddHandler.INSTANCE,false);
  root.registerOperationHandler(NamespaceRemoveHandler.OPERATION_NAME,NamespaceRemoveHandler.INSTANCE,NamespaceRemoveHandler.INSTANCE,false);
  root.registerOperationHandler(SchemaLocationAddHandler.OPERATION_NAME,SchemaLocationAddHandler.INSTANCE,SchemaLocationAddHandler.INSTANCE,false);
  root.registerOperationHandler(SchemaLocationRemoveHandler.OPERATION_NAME,SchemaLocationRemoveHandler.INSTANCE,SchemaLocationRemoveHandler.INSTANCE,false);
  DeploymentUploadBytesHandler dubh=new DeploymentUploadBytesHandler(contentRepo);
  root.registerOperationHandler(DeploymentUploadBytesHandler.OPERATION_NAME,dubh,dubh,false,OperationEntry.EntryType.PUBLIC,deploymentUpload);
  DeploymentUploadURLHandler duuh=new DeploymentUploadURLHandler(contentRepo);
  root.registerOperationHandler(DeploymentUploadURLHandler.OPERATION_NAME,duuh,duuh,false,OperationEntry.EntryType.PUBLIC,deploymentUpload);
  DeploymentUploadStreamAttachmentHandler dush=new DeploymentUploadStreamAttachmentHandler(contentRepo);
  root.registerOperationHandler(DeploymentUploadStreamAttachmentHandler.OPERATION_NAME,dush,dush,false,OperationEntry.EntryType.PUBLIC,deploymentUpload);
  DeploymentFullReplaceHandler dfrh=isMaster ? new DeploymentFullReplaceHandler(contentRepo) : new DeploymentFullReplaceHandler(fileRepository);
  root.registerOperationHandler(DeploymentFullReplaceHandler.OPERATION_NAME,dfrh,dfrh);
  SnapshotDeleteHandler snapshotDelete=new SnapshotDeleteHandler(configurationPersister);
  root.registerOperationHandler(SnapshotDeleteHandler.OPERATION_NAME,snapshotDelete,snapshotDelete,false);
  SnapshotListHandler snapshotList=new SnapshotListHandler(configurationPersister);
  root.registerOperationHandler(SnapshotListHandler.OPERATION_NAME,snapshotList,snapshotList,false);
  SnapshotTakeHandler snapshotTake=new SnapshotTakeHandler(configurationPersister);
  root.registerOperationHandler(SnapshotTakeHandler.OPERATION_NAME,snapshotTake,snapshotTake,false);
  root.registerReadOnlyAttribute(PROCESS_TYPE,isMaster ? ProcessTypeHandler.MASTER : ProcessTypeHandler.SLAVE,Storage.RUNTIME);
  root.registerOperationHandler(GlobalOperationHandlers.VALIDATE_ADDRESS_OPERATION_NAME,GlobalOperationHandlers.VALIDATE_ADDRESS,CommonProviders.VALIDATE_ADDRESS_PROVIDER,true);
  ManagementResourceRegistration systemProperties=root.registerSubModel(PathElement.pathElement(SYSTEM_PROPERTY),DomainDescriptionProviders.SYSTEM_PROPERTY_PROVIDER);
  systemProperties.registerOperationHandler(SystemPropertyAddHandler.OPERATION_NAME,SystemPropertyAddHandler.INSTANCE_WITH_BOOTTIME,SystemPropertyAddHandler.INSTANCE_WITH_BOOTTIME,false);
  systemProperties.registerOperationHandler(SystemPropertyRemoveHandler.OPERATION_NAME,SystemPropertyRemoveHandler.INSTANCE,SystemPropertyRemoveHandler.INSTANCE,false);
  systemProperties.registerReadWriteAttribute(VALUE,null,SystemPropertyValueWriteAttributeHandler.INSTANCE,Storage.CONFIGURATION);
  systemProperties.registerReadWriteAttribute(BOOT_TIME,null,new ModelTypeValidatingHandler(ModelType.BOOLEAN),Storage.CONFIGURATION);
  final ManagementResourceRegistration interfaces=root.registerSubModel(PathElement.pathElement(INTERFACE),CommonProviders.NAMED_INTERFACE_PROVIDER);
  interfaces.registerOperationHandler(ADD,InterfaceAddHandler.NAMED_INSTANCE,InterfaceAddHandler.NAMED_INSTANCE,false);
  interfaces.registerOperationHandler(REMOVE,InterfaceAddHandler.NAMED_INSTANCE,InterfaceAddHandler.NAMED_INSTANCE,false);
  final ManagementResourceRegistration profile=root.registerSubModel(PathElement.pathElement(PROFILE),DomainDescriptionProviders.PROFILE);
  profile.registerOperationHandler(ADD,ProfileAddHandler.INSTANCE,ProfileAddHandler.INSTANCE,false);
  profile.registerOperationHandler(REMOVE,ProfileRemoveHandler.INSTANCE,ProfileRemoveHandler.INSTANCE,false);
  profile.registerOperationHandler(DESCRIBE,ProfileDescribeHandler.INSTANCE,ProfileDescribeHandler.INSTANCE,false,OperationEntry.EntryType.PRIVATE,readOnly);
  final ManagementResourceRegistration paths=root.registerSubModel(PathElement.pathElement(PATH),DomainDescriptionProviders.PATH_DESCRIPTION);
  paths.registerOperationHandler(ADD,PathAddHandler.NAMED_INSTANCE,PathAddHandler.NAMED_INSTANCE,false);
  paths.registerOperationHandler(REMOVE,PathRemoveHandler.INSTANCE,PathRemoveHandler.INSTANCE,false);
  final ManagementResourceRegistration socketBindingGroup=root.registerSubModel(PathElement.pathElement(SOCKET_BINDING_GROUP),DomainDescriptionProviders.SOCKET_BINDING_GROUP);
  socketBindingGroup.registerOperationHandler(ADD,SocketBindingGroupAddHandler.INSTANCE,SocketBindingGroupAddHandler.INSTANCE,false);
  socketBindingGroup.registerOperationHandler(REMOVE,SocketBindingGroupRemoveHandler.INSTANCE,SocketBindingGroupRemoveHandler.INSTANCE,false);
  socketBindingGroup.registerReadWriteAttribute(PORT_OFFSET,null,new IntRangeValidatingHandler(0,65535,true,true),Storage.CONFIGURATION);
  socketBindingGroup.registerReadWriteAttribute(DEFAULT_INTERFACE,null,new StringLengthValidatingHandler(1,false,true),Storage.CONFIGURATION);
  socketBindingGroup.registerReadWriteAttribute(INCLUDES,null,new ListValidatatingHandler(new StringLengthValidator(1,false),true,0,Integer.MAX_VALUE),Storage.CONFIGURATION);
  socketBindingGroup.registerOperationHandler(SocketBindingGroupIncludeAddHandler.OPERATION_NAME,SocketBindingGroupIncludeAddHandler.INSTANCE,SocketBindingGroupIncludeAddHandler.INSTANCE);
  socketBindingGroup.registerOperationHandler(SocketBindingGroupIncludeRemoveHandler.OPERATION_NAME,SocketBindingGroupIncludeRemoveHandler.INSTANCE,SocketBindingGroupIncludeRemoveHandler.INSTANCE);
  final ManagementResourceRegistration socketBindings=socketBindingGroup.registerSubModel(PathElement.pathElement(SOCKET_BINDING),DomainDescriptionProviders.SOCKET_BINDING);
  socketBindings.registerOperationHandler(ADD,SocketBindingAddHandler.INSTANCE,SocketBindingAddHandler.INSTANCE,false);
  socketBindings.registerOperationHandler(REMOVE,SocketBindingRemoveHandler.INSTANCE,SocketBindingRemoveHandler.INSTANCE,false);
  socketBindings.registerReadWriteAttribute(INTERFACE,null,new StringLengthValidatingHandler(1,true,true),Storage.CONFIGURATION);
  socketBindings.registerReadWriteAttribute(PORT,null,new IntRangeValidatingHandler(0,65535,false,true),Storage.CONFIGURATION);
  socketBindings.registerReadWriteAttribute(FIXED_PORT,null,new ModelTypeValidatingHandler(ModelType.BOOLEAN,true,true),Storage.CONFIGURATION);
  socketBindings.registerReadWriteAttribute(MULTICAST_ADDRESS,null,new InetAddressValidatingHandler(true,true),Storage.CONFIGURATION);
  socketBindings.registerReadWriteAttribute(MULTICAST_PORT,null,new IntRangeValidatingHandler(0,65535,true,true),Storage.CONFIGURATION);
  final ManagementResourceRegistration serverGroups=root.registerSubModel(PathElement.pathElement(SERVER_GROUP),DomainDescriptionProviders.SERVER_GROUP);
  serverGroups.registerOperationHandler(ADD,ServerGroupAddHandler.INSTANCE,ServerGroupAddHandler.INSTANCE,false);
  serverGroups.registerOperationHandler(REMOVE,ServerGroupRemoveHandler.INSTANCE,ServerGroupRemoveHandler.INSTANCE,false);
  serverGroups.registerReadWriteAttribute(SOCKET_BINDING_GROUP,null,WriteAttributeHandlers.WriteAttributeOperationHandler.INSTANCE,Storage.CONFIGURATION);
  serverGroups.registerReadWriteAttribute(SOCKET_BINDING_PORT_OFFSET,null,new IntRangeValidatingHandler(1),Storage.CONFIGURATION);
  final ManagementResourceRegistration groupVMs=serverGroups.registerSubModel(PathElement.pathElement(JVM),CommonProviders.JVM_PROVIDER);
  JVMHandlers.register(groupVMs);
  ServerGroupDeploymentReplaceHandler sgdrh=new ServerGroupDeploymentReplaceHandler(fileRepository);
  serverGroups.registerOperationHandler(ServerGroupDeploymentReplaceHandler.OPERATION_NAME,sgdrh,sgdrh);
  final ManagementResourceRegistration serverGroupDeployments=serverGroups.registerSubModel(PathElement.pathElement(DEPLOYMENT),DomainDescriptionProviders.SERVER_GROUP_DEPLOYMENT);
  ServerGroupDeploymentAddHandler sgdah=new ServerGroupDeploymentAddHandler(fileRepository);
  serverGroupDeployments.registerOperationHandler(ServerGroupDeploymentAddHandler.OPERATION_NAME,sgdah,sgdah);
  serverGroupDeployments.registerOperationHandler(ServerGroupDeploymentDeployHandler.OPERATION_NAME,ServerGroupDeploymentDeployHandler.INSTANCE,ServerGroupDeploymentDeployHandler.INSTANCE);
  serverGroupDeployments.registerOperationHandler(ServerGroupDeploymentRedeployHandler.OPERATION_NAME,ServerGroupDeploymentRedeployHandler.INSTANCE,ServerGroupDeploymentRedeployHandler.INSTANCE);
  serverGroupDeployments.registerOperationHandler(ServerGroupDeploymentUndeployHandler.OPERATION_NAME,ServerGroupDeploymentUndeployHandler.INSTANCE,ServerGroupDeploymentUndeployHandler.INSTANCE);
  serverGroupDeployments.registerOperationHandler(DeploymentRemoveHandler.OPERATION_NAME,ServerGroupDeploymentRemoveHandler.INSTANCE,ServerGroupDeploymentRemoveHandler.INSTANCE);
  ManagementResourceRegistration serverGroupSystemProperties=serverGroups.registerSubModel(PathElement.pathElement(SYSTEM_PROPERTY),DomainDescriptionProviders.SERVER_GROUP_SYSTEM_PROPERTY_PROVIDER);
  serverGroupSystemProperties.registerOperationHandler(SystemPropertyAddHandler.OPERATION_NAME,SystemPropertyAddHandler.INSTANCE_WITH_BOOTTIME,SystemPropertyAddHandler.INSTANCE_WITH_BOOTTIME,false);
  serverGroupSystemProperties.registerOperationHandler(SystemPropertyRemoveHandler.OPERATION_NAME,SystemPropertyRemoveHandler.INSTANCE,SystemPropertyRemoveHandler.INSTANCE,false);
  serverGroupSystemProperties.registerReadWriteAttribute(VALUE,null,SystemPropertyValueWriteAttributeHandler.INSTANCE,Storage.CONFIGURATION);
  serverGroupSystemProperties.registerReadWriteAttribute(BOOT_TIME,null,new ModelTypeValidatingHandler(ModelType.BOOLEAN),Storage.CONFIGURATION);
  final ManagementResourceRegistration deployments=root.registerSubModel(PathElement.pathElement(DEPLOYMENT),DomainDescriptionProviders.DEPLOYMENT_PROVIDER);
  DeploymentAddHandler dah=new DeploymentAddHandler(contentRepo);
  deployments.registerOperationHandler(DeploymentAddHandler.OPERATION_NAME,dah,dah);
  deployments.registerOperationHandler(DeploymentRemoveHandler.OPERATION_NAME,DeploymentRemoveHandler.INSTANCE,DeploymentRemoveHandler.INSTANCE);
  final ManagementResourceRegistration extensions=root.registerSubModel(PathElement.pathElement(EXTENSION),CommonProviders.EXTENSION_PROVIDER);
  final ExtensionContext extensionContext=new ExtensionContextImpl(profile,deployments,configurationPersister);
  final ExtensionAddHandler addExtensionHandler=new ExtensionAddHandler(extensionContext);
  extensions.registerOperationHandler(ExtensionAddHandler.OPERATION_NAME,addExtensionHandler,addExtensionHandler,false);
  extensions.registerOperationHandler(ExtensionRemoveHandler.OPERATION_NAME,ExtensionRemoveHandler.INSTANCE,ExtensionRemoveHandler.INSTANCE,false);
  if (!isMaster) {
    ApplyRemoteMasterDomainModelHandler armdmh=new ApplyRemoteMasterDomainModelHandler(extensionContext);
    root.registerOperationHandler(ApplyRemoteMasterDomainModelHandler.OPERATION_NAME,armdmh,armdmh,false,OperationEntry.EntryType.PRIVATE);
  }
 else {
    ReadMasterDomainModelHandler rmdmh=new ReadMasterDomainModelHandler(domainController,registry);
    root.registerOperationHandler(ReadMasterDomainModelHandler.OPERATION_NAME,rmdmh,rmdmh,false,OperationEntry.EntryType.PRIVATE,EnumSet.of(OperationEntry.Flag.READ_ONLY));
  }
  return extensionContext;
}
