{
  super.registerAttributes(resourceRegistration);
  resourceRegistration.registerReadOnlyAttribute(TIME_REMAINING,new AbstractReadAttributeHandler(){
    @Override protected void readAttribute(    TimerImpl timer,    ModelNode toSet){
      final long time=timer.getTimeRemaining();
      toSet.set(time);
    }
  }
);
  resourceRegistration.registerReadOnlyAttribute(NEXT_TIMEOUT,new AbstractReadAttributeHandler(){
    @Override protected void readAttribute(    TimerImpl timer,    ModelNode toSet){
      final Date d=timer.getNextTimeout();
      if (d != null) {
        toSet.set(d.getTime());
      }
    }
  }
);
  resourceRegistration.registerReadOnlyAttribute(CALENDAR_TIMER,new AbstractReadAttributeHandler(){
    @Override protected void readAttribute(    TimerImpl timer,    ModelNode toSet){
      final boolean calendarTimer=timer.isCalendarTimer();
      toSet.set(calendarTimer);
    }
  }
);
  resourceRegistration.registerReadOnlyAttribute(PERSISTENT,new AbstractReadAttributeHandler(){
    @Override protected void readAttribute(    TimerImpl timer,    ModelNode toSet){
      final boolean persistent=timer.isPersistent();
      toSet.set(persistent);
    }
  }
);
  resourceRegistration.registerReadOnlyAttribute(ACTIVE,new AbstractReadAttributeHandler(){
    @Override protected void readAttribute(    TimerImpl timer,    ModelNode toSet){
      final boolean active=timer.isActive();
      toSet.set(active);
    }
  }
);
  resourceRegistration.registerReadOnlyAttribute(SCHEDULE,new AbstractReadAttributeHandler(){
    @Override protected void readAttribute(    TimerImpl timer,    ModelNode toSet){
      if (!timer.isCalendarTimer()) {
        return;
      }
      ScheduleExpression sched=timer.getSchedule();
      addString(toSet,sched.getYear(),YEAR.getName());
      addString(toSet,sched.getMonth(),MONTH.getName());
      addString(toSet,sched.getDayOfMonth(),DAY_OF_MONTH.getName());
      addString(toSet,sched.getDayOfWeek(),DAY_OF_WEEK.getName());
      addString(toSet,sched.getHour(),HOUR.getName());
      addString(toSet,sched.getMinute(),MINUTE.getName());
      addString(toSet,sched.getSecond(),SECOND.getName());
      addString(toSet,sched.getTimezone(),TIMEZONE.getName());
      addDate(toSet,sched.getStart(),START.getName());
      addDate(toSet,sched.getEnd(),END.getName());
    }
    private void addString(    ModelNode schedNode,    String value,    String name){
      final ModelNode node=schedNode.get(name);
      if (value != null) {
        node.set(value);
      }
    }
    private void addDate(    ModelNode schedNode,    Date value,    String name){
      final ModelNode node=schedNode.get(name);
      if (value != null) {
        node.set(value.getTime());
      }
    }
  }
);
  resourceRegistration.registerReadOnlyAttribute(PRIMARY_KEY,new AbstractReadAttributeHandler(){
    @Override protected void readAttribute(    TimerImpl timer,    ModelNode toSet){
      final Object pk=timer.getPrimaryKey();
      if (pk != null) {
        toSet.set(pk.toString());
      }
    }
  }
);
  resourceRegistration.registerReadOnlyAttribute(INFO,new AbstractReadAttributeHandler(){
    @Override protected void readAttribute(    TimerImpl timer,    ModelNode toSet){
      if (timer.getInfo() != null) {
        toSet.set(timer.getInfo().toString());
      }
    }
  }
);
}
