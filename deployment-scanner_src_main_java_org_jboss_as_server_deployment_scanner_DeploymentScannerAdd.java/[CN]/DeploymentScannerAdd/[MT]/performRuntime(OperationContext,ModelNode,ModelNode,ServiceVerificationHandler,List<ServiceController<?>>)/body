{
  final PathAddress address=PathAddress.pathAddress(operation.get(OP_ADDR));
  final String name=address.getLastElement().getValue();
  final String path=operation.require(CommonAttributes.PATH).asString();
  final Boolean enabled=operation.hasDefined(CommonAttributes.SCAN_ENABLED) ? operation.get(CommonAttributes.SCAN_ENABLED).asBoolean() : true;
  final Integer interval=operation.hasDefined(CommonAttributes.SCAN_INTERVAL) ? operation.get(CommonAttributes.SCAN_INTERVAL).asInt() : 5000;
  final String relativeTo=operation.hasDefined(CommonAttributes.RELATIVE_TO) ? operation.get(CommonAttributes.RELATIVE_TO).asString() : null;
  final Boolean autoDeployZip=operation.hasDefined(CommonAttributes.AUTO_DEPLOY_ZIPPED) ? operation.get(CommonAttributes.AUTO_DEPLOY_ZIPPED).asBoolean() : true;
  final Boolean autoDeployExp=operation.hasDefined(CommonAttributes.AUTO_DEPLOY_EXPLODED) ? operation.get(CommonAttributes.AUTO_DEPLOY_EXPLODED).asBoolean() : false;
  final Boolean autoDeployXml=operation.hasDefined(CommonAttributes.AUTO_DEPLOY_XML) ? operation.get(CommonAttributes.AUTO_DEPLOY_XML).asBoolean() : true;
  final Long deploymentTimeout=operation.hasDefined(CommonAttributes.DEPLOYMENT_TIMEOUT) ? operation.get(CommonAttributes.DEPLOYMENT_TIMEOUT).asLong() : 60L;
  final ServiceTarget serviceTarget=context.getServiceTarget();
  DeploymentScannerService.addService(serviceTarget,name,relativeTo,path,interval,TimeUnit.MILLISECONDS,autoDeployZip,autoDeployExp,autoDeployXml,enabled,deploymentTimeout,newControllers,verificationHandler);
}
