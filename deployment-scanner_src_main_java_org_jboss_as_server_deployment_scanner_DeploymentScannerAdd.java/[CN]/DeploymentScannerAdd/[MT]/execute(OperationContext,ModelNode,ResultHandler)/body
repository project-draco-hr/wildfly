{
  final ModelNode opAddr=operation.require(OP_ADDR);
  final PathAddress address=PathAddress.pathAddress(opAddr);
  final String name=address.getLastElement().getValue();
  final String path=operation.require(CommonAttributes.PATH).asString();
  final Boolean enabled=operation.hasDefined(CommonAttributes.SCAN_ENABLED) ? operation.get(CommonAttributes.SCAN_ENABLED).asBoolean() : null;
  final Integer interval=operation.hasDefined(CommonAttributes.SCAN_INTERVAL) ? operation.get(CommonAttributes.SCAN_INTERVAL).asInt() : null;
  final String relativeTo=operation.hasDefined(CommonAttributes.RELATIVE_TO) ? operation.get(CommonAttributes.RELATIVE_TO).asString() : null;
  final Boolean autoDeployZip=operation.hasDefined(CommonAttributes.AUTO_DEPLOY_ZIPPED) ? operation.get(CommonAttributes.AUTO_DEPLOY_ZIPPED).asBoolean() : null;
  final Boolean autoDeployExp=operation.hasDefined(CommonAttributes.AUTO_DEPLOY_EXPLODED) ? operation.get(CommonAttributes.AUTO_DEPLOY_EXPLODED).asBoolean() : null;
  final Long deploymentTimeout=operation.hasDefined(CommonAttributes.DEPLOYMENT_TIMEOUT) ? operation.get(CommonAttributes.DEPLOYMENT_TIMEOUT).asLong() : null;
  final ModelNode compensatingOperation=Util.getResourceRemoveOperation(opAddr);
  final ModelNode subModel=context.getSubModel();
  subModel.get(CommonAttributes.NAME).set(name);
  subModel.get(CommonAttributes.PATH).set(path);
  if (enabled != null)   subModel.get(CommonAttributes.SCAN_ENABLED).set(enabled);
  if (interval != null)   subModel.get(CommonAttributes.SCAN_INTERVAL).set(interval);
  if (autoDeployZip != null)   subModel.get(CommonAttributes.AUTO_DEPLOY_ZIPPED).set(autoDeployZip);
  if (autoDeployExp != null)   subModel.get(CommonAttributes.AUTO_DEPLOY_EXPLODED).set(autoDeployExp);
  if (relativeTo != null)   subModel.get(CommonAttributes.RELATIVE_TO).set(relativeTo);
  if (deploymentTimeout != null)   subModel.get(CommonAttributes.DEPLOYMENT_TIMEOUT).set(deploymentTimeout);
  if (context.getRuntimeContext() != null) {
    context.getRuntimeContext().setRuntimeTask(new RuntimeTask(){
      @Override public void execute(      RuntimeTaskContext context) throws OperationFailedException {
        final ServiceTarget serviceTarget=context.getServiceTarget();
        DeploymentScannerService.addService(serviceTarget,name,relativeTo,path,interval,TimeUnit.MILLISECONDS,autoDeployZip,autoDeployExp,enabled,deploymentTimeout);
        resultHandler.handleResultComplete();
      }
    }
);
  }
 else {
    resultHandler.handleResultComplete();
  }
  return new BasicOperationResult(compensatingOperation);
}
