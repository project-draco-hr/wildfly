{
  ModelNode address=getComponentAddress(type,name).toModelNode();
  address.protect();
  ModelNode resourceDescription=executeOperation(ModelDescriptionConstants.READ_RESOURCE_DESCRIPTION_OPERATION,address);
  ModelNode resource=executeOperation(ModelDescriptionConstants.READ_RESOURCE_OPERATION,address);
  assertTrue(resourceDescription.get(ATTRIBUTES,COMPONENT_CLASS_NAME.getName()).isDefined());
  assertEquals(ModelType.STRING,resourceDescription.get(ATTRIBUTES,COMPONENT_CLASS_NAME.getName(),DESCRIPTION).getType());
  assertEquals(ModelType.STRING,resourceDescription.get(ATTRIBUTES,COMPONENT_CLASS_NAME.getName(),TYPE).asType());
  assertTrue(resource.get(COMPONENT_CLASS_NAME.getName()).isDefined());
  validateSecurity(address,resourceDescription,resource);
  if (type.hasPool()) {
    validatePool(address,resourceDescription,resource);
  }
 else {
    for (    AttributeDefinition attr : POOL_ATTRIBUTES) {
      assertFalse(resourceDescription.get(ModelDescriptionConstants.ATTRIBUTES).has(attr.getName()));
      assertFalse(resource.has(attr.getName()));
    }
  }
  if (type.hasTimer()) {
    validateTimer(address,resourceDescription,resource,expectTimer);
  }
 else {
    assertFalse(resourceDescription.get(ModelDescriptionConstants.ATTRIBUTES).has(TimerAttributeDefinition.INSTANCE.getName()));
    assertFalse(resource.has(TimerAttributeDefinition.INSTANCE.getName()));
  }
}
