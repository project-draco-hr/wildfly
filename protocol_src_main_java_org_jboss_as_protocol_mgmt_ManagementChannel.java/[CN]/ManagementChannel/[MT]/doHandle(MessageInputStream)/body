{
  ROOT_LOGGER.tracef("%s handling incoming data",this);
  final SimpleDataInput input=new SimpleDataInput(Marshalling.createByteInput(message));
  Exception error=null;
  ManagementRequestHeader requestHeader=null;
  ManagementRequestHandler requestHandler=null;
  boolean wasPing=false;
  try {
    ManagementProtocolHeader header;
    header=ManagementProtocolHeader.parse(input);
switch (header.getType()) {
case ManagementProtocol.TYPE_REQUEST:
      requestHeader=(ManagementRequestHeader)header;
    requestHandler=requestReceiver.readRequest(requestHeader,input);
  break;
case ManagementProtocol.TYPE_RESPONSE:
gotIncomingResponse();
responseReceiver.handleResponse((ManagementResponseHeader)header,input);
break;
case ManagementProtocol.TYPE_BYE_BYE:
ROOT_LOGGER.tracef("Received bye bye on %s, closing",this);
receivedByeBye=true;
close();
break;
case ManagementProtocol.TYPE_PING:
wasPing=true;
ROOT_LOGGER.tracef("Received ping on %s",this);
break;
case ManagementProtocol.TYPE_PONG:
ROOT_LOGGER.tracef("Received pong on %s",this);
gotIncomingResponse();
break;
}
}
 catch (Exception e) {
error=e;
ROOT_LOGGER.tracef(e,"%s error handling incoming data",this);
}
 finally {
ROOT_LOGGER.tracef("%s done handling incoming data",this);
try {
while (input.read() != -1) {
}
}
 catch (IOException ignore) {
}
IoUtils.safeClose(input);
IoUtils.safeClose(message);
}
if (requestHeader != null) {
if (error == null) {
try {
requestReceiver.processRequest(requestHeader,requestHandler);
}
 catch (Exception e) {
error=e;
}
}
if (error != null) {
ROOT_LOGGER.tracef(error,"Error processing request %s",this);
}
requestReceiver.writeResponse(requestHeader,requestHandler,error);
}
 else if (wasPing) {
ROOT_LOGGER.tracef("Sending pong on %s",this);
ManagementPongHeader pongHeader=new ManagementPongHeader(ManagementProtocol.VERSION);
sendHeaderAndCloseOnError(pongHeader);
}
}
