{
  lockingStrategy=optimisticLocking.getLockingStrategy();
switch (lockingStrategy) {
case FIELD_GROUP_STRATEGY:
{
      groupName=optimisticLocking.getGroupName();
      lockingField=null;
      keyGeneratorFactory=null;
      break;
    }
case MODIFIED_STRATEGY:
{
    groupName=null;
    lockingField=null;
    keyGeneratorFactory=null;
    break;
  }
case READ_STRATEGY:
{
  groupName=null;
  lockingField=null;
  keyGeneratorFactory=null;
  break;
}
case VERSION_COLUMN_STRATEGY:
{
if (optimisticLocking.getLockingField().getFieldType() != null) throw new RuntimeException("field-type is not allowed for version column. It is implicitly set to java.lang.Long.");
lockingField=constructLockingField(entity,optimisticLocking.getLockingField());
groupName=null;
keyGeneratorFactory=null;
break;
}
case TIMESTAMP_COLUMN_STRATEGY:
{
if (optimisticLocking.getLockingField().getFieldType() != null) throw new RuntimeException("field-type is not allowed for timestamp column. It is implicitly set to java.util.Date.");
lockingField=constructLockingField(entity,optimisticLocking.getLockingField());
groupName=null;
keyGeneratorFactory=null;
break;
}
case KEYGENERATOR_COLUMN_STRATEGY:
{
lockingField=constructLockingField(entity,optimisticLocking.getLockingField());
groupName=null;
keyGeneratorFactory=optimisticLocking.getKeyGeneratorFactory();
break;
}
default :
{
throw new RuntimeException("Unexpected error: entity " + entity.getName() + " has unkown/incorrect optimistic locking configuration. -- "+ lockingStrategy);
}
}
}
