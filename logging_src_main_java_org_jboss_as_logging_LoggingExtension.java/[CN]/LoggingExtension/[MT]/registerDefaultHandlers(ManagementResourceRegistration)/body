{
  final ManagementResourceRegistration rootLogger=registration.registerSubModel(rootLoggerPath,LoggingSubsystemProviders.ROOT_LOGGER);
  rootLogger.registerOperationHandler(ADD,LoggerOperations.ADD_ROOT_LOGGER,LoggingSubsystemProviders.ADD_ROOT_LOGGER,false);
  rootLogger.registerOperationHandler(LoggerOperations.ROOT_LOGGER_ADD_OPERATION_NAME,LoggerOperations.ADD_ROOT_LOGGER,LoggingSubsystemProviders.LEGACY_ADD_ROOT_LOGGER,false);
  rootLogger.registerOperationHandler(REMOVE,LoggerOperations.REMOVE_LOGGER,LoggingSubsystemProviders.REMOVE_ROOT_LOGGER,false);
  rootLogger.registerOperationHandler(LoggerOperations.ROOT_LOGGER_REMOVE_OPERATION_NAME,LoggerOperations.REMOVE_LOGGER,LoggingSubsystemProviders.LEGACY_REMOVE_ROOT_LOGGER,false);
  rootLogger.registerOperationHandler(LoggerOperations.ROOT_LOGGER_CHANGE_LEVEL_OPERATION_NAME,LoggerOperations.CHANGE_LEVEL,LoggingSubsystemProviders.ROOT_LOGGER_CHANGE_LEVEL,false);
  rootLogger.registerOperationHandler(LoggerOperations.ROOT_LOGGER_ADD_HANDLER_OPERATION_NAME,LoggerOperations.ADD_HANDLER,LoggingSubsystemProviders.ROOT_LOGGER_ASSIGN_HANDLER,false);
  rootLogger.registerOperationHandler(LoggerOperations.ROOT_LOGGER_REMOVE_HANDLER_OPERATION_NAME,LoggerOperations.REMOVE_HANDLER,LoggingSubsystemProviders.ROOT_LOGGER_UNASSIGN_HANDLER,false);
  addWriteAttributes(rootLogger,LoggerOperations.ROOT_LOGGER_WRITE_HANDLER);
  final ManagementResourceRegistration loggers=registration.registerSubModel(loggersPath,LoggingSubsystemProviders.LOGGER);
  loggers.registerOperationHandler(ADD,LoggerOperations.ADD_LOGGER,LoggingSubsystemProviders.LOGGER_ADD,false);
  loggers.registerOperationHandler(REMOVE,LoggerOperations.REMOVE_LOGGER,LoggingSubsystemProviders.LOGGER_REMOVE,false);
  loggers.registerOperationHandler(LoggerOperations.CHANGE_LEVEL_OPERATION_NAME,LoggerOperations.CHANGE_LEVEL,LoggingSubsystemProviders.LOGGER_CHANGE_LEVEL,false);
  loggers.registerOperationHandler(LoggerOperations.ADD_HANDLER_OPERATION_NAME,LoggerOperations.ADD_HANDLER,LoggingSubsystemProviders.LOGGER_ASSIGN_HANDLER,false);
  loggers.registerOperationHandler(LoggerOperations.REMOVE_HANDLER_OPERATION_NAME,LoggerOperations.REMOVE_HANDLER,LoggingSubsystemProviders.LOGGER_UNASSIGN_HANDLER,false);
  addWriteAttributes(loggers,LoggerOperations.LOGGER_WRITE_HANDLER);
  final ManagementResourceRegistration asyncHandler=registration.registerSubModel(asyncHandlersPath,LoggingSubsystemProviders.ASYNC_HANDLER);
  asyncHandler.registerOperationHandler(ADD,HandlerOperations.ADD_ASYNC_HANDLER,LoggingSubsystemProviders.ASYNC_HANDLER_ADD,false);
  asyncHandler.registerOperationHandler(REMOVE,HandlerOperations.REMOVE_HANDLER,LoggingSubsystemProviders.HANDLER_REMOVE,false);
  asyncHandler.registerOperationHandler(ENABLE,HandlerOperations.ENABLE_HANDLER,LoggingSubsystemProviders.HANDLER_ENABLE,false);
  asyncHandler.registerOperationHandler(DISABLE,HandlerOperations.DISABLE_HANDLER,LoggingSubsystemProviders.HANDLER_DISABLE,false);
  asyncHandler.registerOperationHandler(HandlerOperations.CHANGE_LEVEL_OPERATION_NAME,HandlerOperations.CHANGE_LEVEL,LoggingSubsystemProviders.HANDLER_CHANGE_LEVEL,false);
  asyncHandler.registerOperationHandler(HandlerOperations.UPDATE_OPERATION_NAME,HandlerOperations.UPDATE_ASYNC_PROPERTIES,LoggingSubsystemProviders.ASYNC_HANDLER_UPDATE,false);
  asyncHandler.registerOperationHandler(HandlerOperations.ADD_SUBHANDLER_OPERATION_NAME,HandlerOperations.ADD_SUBHANDLER,LoggingSubsystemProviders.ASYNC_HANDLER_ASSIGN_SUBHANDLER,false);
  asyncHandler.registerOperationHandler(HandlerOperations.REMOVE_SUBHANDLER_OPERATION_NAME,HandlerOperations.REMOVE_SUBHANDLER,LoggingSubsystemProviders.ASYNC_HANDLER_UNASSIGN_SUBHANDLER,false);
  addWriteAttributes(asyncHandler,HandlerOperations.ASYNC_WRITE_HANDLER);
  final ManagementResourceRegistration consoleHandler=registration.registerSubModel(consoleHandlersPath,LoggingSubsystemProviders.CONSOLE_HANDLER);
  consoleHandler.registerOperationHandler(ADD,HandlerOperations.ADD_CONSOLE_HANDLER,LoggingSubsystemProviders.CONSOLE_HANDLER_ADD,false);
  consoleHandler.registerOperationHandler(REMOVE,HandlerOperations.REMOVE_HANDLER,LoggingSubsystemProviders.HANDLER_REMOVE,false);
  consoleHandler.registerOperationHandler(ENABLE,HandlerOperations.ENABLE_HANDLER,LoggingSubsystemProviders.HANDLER_ENABLE,false);
  consoleHandler.registerOperationHandler(DISABLE,HandlerOperations.DISABLE_HANDLER,LoggingSubsystemProviders.HANDLER_DISABLE,false);
  consoleHandler.registerOperationHandler(HandlerOperations.CHANGE_LEVEL_OPERATION_NAME,HandlerOperations.CHANGE_LEVEL,LoggingSubsystemProviders.HANDLER_CHANGE_LEVEL,false);
  consoleHandler.registerOperationHandler(HandlerOperations.UPDATE_OPERATION_NAME,HandlerOperations.UPDATE_CONSOLE_PROPERTIES,LoggingSubsystemProviders.CONSOLE_HANDLER_UPDATE,false);
  addWriteAttributes(consoleHandler,HandlerOperations.CONSOLE_WRITE_ATTRIBUTES);
  final ManagementResourceRegistration fileHandler=registration.registerSubModel(fileHandlersPath,LoggingSubsystemProviders.FILE_HANDLER);
  fileHandler.registerOperationHandler(ADD,HandlerOperations.ADD_FILE_HANDLER,LoggingSubsystemProviders.FILE_HANDLER_ADD,false);
  fileHandler.registerOperationHandler(REMOVE,HandlerOperations.REMOVE_HANDLER,LoggingSubsystemProviders.HANDLER_REMOVE,false);
  fileHandler.registerOperationHandler(ENABLE,HandlerOperations.ENABLE_HANDLER,LoggingSubsystemProviders.HANDLER_ENABLE,false);
  fileHandler.registerOperationHandler(DISABLE,HandlerOperations.DISABLE_HANDLER,LoggingSubsystemProviders.HANDLER_DISABLE,false);
  fileHandler.registerOperationHandler(HandlerOperations.CHANGE_LEVEL_OPERATION_NAME,HandlerOperations.CHANGE_LEVEL,LoggingSubsystemProviders.HANDLER_CHANGE_LEVEL,false);
  fileHandler.registerOperationHandler(HandlerOperations.CHANGE_FILE_OPERATION_NAME,HandlerOperations.CHANGE_FILE,LoggingSubsystemProviders.HANDLER_CHANGE_FILE,false);
  fileHandler.registerOperationHandler(HandlerOperations.UPDATE_OPERATION_NAME,HandlerOperations.UPDATE_FILE_HANDLER_PROPERTIES,LoggingSubsystemProviders.FILE_HANDLER_UPDATE,false);
  addWriteAttributes(fileHandler,HandlerOperations.WRITE_FILE_HANDLER_ATTRIBUTES);
  final ManagementResourceRegistration periodicHandler=registration.registerSubModel(periodicHandlersPath,LoggingSubsystemProviders.PERIODIC_HANDLER);
  periodicHandler.registerOperationHandler(ADD,HandlerOperations.ADD_PERIODIC__ROTATING_FILE_HANDLER,LoggingSubsystemProviders.PERIODIC_HANDLER_ADD,false);
  periodicHandler.registerOperationHandler(REMOVE,HandlerOperations.REMOVE_HANDLER,LoggingSubsystemProviders.HANDLER_REMOVE,false);
  periodicHandler.registerOperationHandler(ENABLE,HandlerOperations.ENABLE_HANDLER,LoggingSubsystemProviders.HANDLER_ENABLE,false);
  periodicHandler.registerOperationHandler(DISABLE,HandlerOperations.DISABLE_HANDLER,LoggingSubsystemProviders.HANDLER_DISABLE,false);
  periodicHandler.registerOperationHandler(HandlerOperations.CHANGE_LEVEL_OPERATION_NAME,HandlerOperations.CHANGE_LEVEL,LoggingSubsystemProviders.HANDLER_CHANGE_LEVEL,false);
  periodicHandler.registerOperationHandler(HandlerOperations.CHANGE_FILE_OPERATION_NAME,HandlerOperations.CHANGE_FILE,LoggingSubsystemProviders.HANDLER_CHANGE_FILE,false);
  periodicHandler.registerOperationHandler(HandlerOperations.UPDATE_OPERATION_NAME,HandlerOperations.UPDATE_PERIODIC_ROTATING_FILE_HANDLER_PROPERTIES,LoggingSubsystemProviders.PERIODIC_HANDLER_UPDATE,false);
  addWriteAttributes(periodicHandler,HandlerOperations.WRITE_PERIODIC__ROTATING_FILE_HANDLER_ATTRIBUTES);
  final ManagementResourceRegistration sizePeriodicHandler=registration.registerSubModel(sizeRotatingHandlersPath,LoggingSubsystemProviders.SIZE_PERIODIC_HANDLER);
  sizePeriodicHandler.registerOperationHandler(ADD,HandlerOperations.ADD_SIZE_ROTATING_FILE_HANDLER,LoggingSubsystemProviders.SIZE_PERIODIC_HANDLER_ADD,false);
  sizePeriodicHandler.registerOperationHandler(REMOVE,HandlerOperations.REMOVE_HANDLER,LoggingSubsystemProviders.HANDLER_REMOVE,false);
  sizePeriodicHandler.registerOperationHandler(ENABLE,HandlerOperations.ENABLE_HANDLER,LoggingSubsystemProviders.HANDLER_ENABLE,false);
  sizePeriodicHandler.registerOperationHandler(DISABLE,HandlerOperations.DISABLE_HANDLER,LoggingSubsystemProviders.HANDLER_DISABLE,false);
  sizePeriodicHandler.registerOperationHandler(HandlerOperations.CHANGE_LEVEL_OPERATION_NAME,HandlerOperations.CHANGE_LEVEL,LoggingSubsystemProviders.HANDLER_CHANGE_LEVEL,false);
  sizePeriodicHandler.registerOperationHandler(HandlerOperations.CHANGE_FILE_OPERATION_NAME,HandlerOperations.CHANGE_FILE,LoggingSubsystemProviders.HANDLER_CHANGE_FILE,false);
  sizePeriodicHandler.registerOperationHandler(HandlerOperations.UPDATE_OPERATION_NAME,HandlerOperations.UPDATE_SIZE_ROTATING_FILE_HANDLER_PROPERTIES,LoggingSubsystemProviders.SIZE_PERIODIC_HANDLER_UPDATE,false);
  addWriteAttributes(sizePeriodicHandler,HandlerOperations.WRITE_SIZE_ROTATING_FILE_HANDLER_ATTRIBUTES);
  final ManagementResourceRegistration customHandler=registration.registerSubModel(customHandlerPath,LoggingSubsystemProviders.CUSTOM_HANDLER);
  customHandler.registerOperationHandler(ADD,HandlerOperations.ADD_CUSTOM_HANDLER,LoggingSubsystemProviders.CUSTOM_HANDLER_ADD,false);
  customHandler.registerOperationHandler(REMOVE,HandlerOperations.REMOVE_HANDLER,LoggingSubsystemProviders.HANDLER_REMOVE,false);
  customHandler.registerOperationHandler(ENABLE,HandlerOperations.ENABLE_HANDLER,LoggingSubsystemProviders.HANDLER_ENABLE,false);
  customHandler.registerOperationHandler(DISABLE,HandlerOperations.DISABLE_HANDLER,LoggingSubsystemProviders.HANDLER_DISABLE,false);
  customHandler.registerOperationHandler(HandlerOperations.CHANGE_LEVEL_OPERATION_NAME,HandlerOperations.CHANGE_LEVEL,LoggingSubsystemProviders.HANDLER_CHANGE_LEVEL,false);
  customHandler.registerOperationHandler(HandlerOperations.UPDATE_OPERATION_NAME,HandlerOperations.UPDATE_CUSTOM_PROPERTIES,LoggingSubsystemProviders.CUSTOM_HANDLER_UPDATE,false);
  addWriteAttributes(customHandler,HandlerOperations.CUSTOM_HANDLER_WRITE_ATTRIBUTES);
  customHandler.registerReadWriteAttribute(PROPERTIES,null,HandlerOperations.CUSTOM_HANDLER_WRITE_ATTRIBUTES,EnumSet.of(AttributeAccess.Flag.RESTART_NONE));
  customHandler.registerReadOnlyAttribute(CommonAttributes.CLASS,null);
  customHandler.registerReadOnlyAttribute(CommonAttributes.MODULE,null);
}
