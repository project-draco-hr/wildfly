{
  final RootLoggerResourceDefinition rootLoggerResourceDefinition=new RootLoggerResourceDefinition(includeLegacyAttributes);
  registration.registerSubModel(rootLoggerResourceDefinition);
  final LoggerResourceDefinition loggerResourceDefinition=new LoggerResourceDefinition(includeLegacyAttributes);
  registration.registerSubModel(loggerResourceDefinition);
  final AsyncHandlerResourceDefinition asyncHandlerResourceDefinition=new AsyncHandlerResourceDefinition(includeLegacyAttributes);
  registration.registerSubModel(asyncHandlerResourceDefinition);
  final ConsoleHandlerResourceDefinition consoleHandlerResourceDefinition=new ConsoleHandlerResourceDefinition(includeLegacyAttributes);
  registration.registerSubModel(consoleHandlerResourceDefinition);
  final FileHandlerResourceDefinition fileHandlerResourceDefinition=new FileHandlerResourceDefinition(resolvePathHandler,includeLegacyAttributes);
  registration.registerSubModel(fileHandlerResourceDefinition);
  final PeriodicHandlerResourceDefinition periodicHandlerResourceDefinition=new PeriodicHandlerResourceDefinition(resolvePathHandler,includeLegacyAttributes);
  registration.registerSubModel(periodicHandlerResourceDefinition);
  final SizeRotatingHandlerResourceDefinition sizeRotatingHandlerResourceDefinition=new SizeRotatingHandlerResourceDefinition(resolvePathHandler,includeLegacyAttributes);
  registration.registerSubModel(sizeRotatingHandlerResourceDefinition);
  final CustomHandlerResourceDefinition customHandlerResourceDefinition=new CustomHandlerResourceDefinition(includeLegacyAttributes);
  registration.registerSubModel(customHandlerResourceDefinition);
  registration.registerSubModel(SyslogHandlerResourceDefinition.INSTANCE);
  registration.registerSubModel(PatternFormatterResourceDefinition.INSTANCE);
  registration.registerSubModel(CustomFormatterResourceDefinition.INSTANCE);
  if (registerTransformers) {
    for (    KnownModelVersion modelVersion : KnownModelVersion.values()) {
      if (modelVersion.hasTransformers()) {
        final ResourceTransformationDescriptionBuilder subsystemBuilder=TransformationDescriptionBuilder.Factory.createSubsystemInstance();
        final ResourceTransformationDescriptionBuilder loggingProfileBuilder;
        if (modelVersion == KnownModelVersion.VERSION_1_1_0) {
          subsystemBuilder.rejectChildResource(LOGGING_PROFILE_PATH);
          loggingProfileBuilder=null;
        }
 else {
          loggingProfileBuilder=subsystemBuilder.addChildResource(LOGGING_PROFILE_PATH);
        }
        rootLoggerResourceDefinition.registerTransformers(modelVersion,subsystemBuilder,loggingProfileBuilder);
        loggerResourceDefinition.registerTransformers(modelVersion,subsystemBuilder,loggingProfileBuilder);
        asyncHandlerResourceDefinition.registerTransformers(modelVersion,subsystemBuilder,loggingProfileBuilder);
        consoleHandlerResourceDefinition.registerTransformers(modelVersion,subsystemBuilder,loggingProfileBuilder);
        fileHandlerResourceDefinition.registerTransformers(modelVersion,subsystemBuilder,loggingProfileBuilder);
        periodicHandlerResourceDefinition.registerTransformers(modelVersion,subsystemBuilder,loggingProfileBuilder);
        sizeRotatingHandlerResourceDefinition.registerTransformers(modelVersion,subsystemBuilder,loggingProfileBuilder);
        customHandlerResourceDefinition.registerTransformers(modelVersion,subsystemBuilder,loggingProfileBuilder);
        SyslogHandlerResourceDefinition.INSTANCE.registerTransformers(modelVersion,subsystemBuilder,loggingProfileBuilder);
        PatternFormatterResourceDefinition.INSTANCE.registerTransformers(modelVersion,subsystemBuilder,loggingProfileBuilder);
        CustomFormatterResourceDefinition.INSTANCE.registerTransformers(modelVersion,subsystemBuilder,loggingProfileBuilder);
        TransformationDescription.Tools.register(subsystemBuilder.build(),subsystem,modelVersion.getModelVersion());
      }
    }
  }
}
