{
  if (!java.util.logging.LogManager.getLogManager().getClass().getName().equals(org.jboss.logmanager.LogManager.class.getName())) {
    throw LoggingLogger.ROOT_LOGGER.extensionNotInitialized();
  }
  LogContext.setLogContextSelector(CONTEXT_SELECTOR);
  StdioContext.setStdioContextSelector(new LogContextStdioContextSelector(StdioContext.getStdioContext()));
  try {
    final ModuleLoader moduleLoader=Module.forClass(LoggingExtension.class).getModuleLoader();
    for (    ModuleIdentifier moduleIdentifier : LOGGING_API_MODULES) {
      try {
        CONTEXT_SELECTOR.addLogApiClassLoader(moduleLoader.loadModule(moduleIdentifier).getClassLoader());
      }
 catch (      Throwable ignore) {
      }
    }
  }
 catch (  Exception ignore) {
  }
  final SubsystemRegistration subsystem=context.registerSubsystem(SUBSYSTEM_NAME,MANAGEMENT_API_MAJOR_VERSION,MANAGEMENT_API_MINOR_VERSION,MANAGEMENT_API_MICRO_VERSION);
  final LoggingRootResource rootResource;
  final ResolvePathHandler resolvePathHandler;
  if (context.getProcessType().isServer()) {
    rootResource=new LoggingRootResource(context.getPathManager());
    resolvePathHandler=ResolvePathHandler.Builder.of(context.getPathManager()).setParentAttribute(CommonAttributes.FILE).build();
  }
 else {
    rootResource=new LoggingRootResource(null);
    resolvePathHandler=null;
  }
  final ManagementResourceRegistration registration=subsystem.registerSubsystemModel(rootResource);
  registration.registerOperationHandler(GenericSubsystemDescribeHandler.DEFINITION,DESCRIBE_HANDLER);
  registerSubModels(registration,resolvePathHandler,true,subsystem,rootResource,context.isRegisterTransformers());
  ApplicationTypeConfig atc=new ApplicationTypeConfig(SUBSYSTEM_NAME,CommonAttributes.LOGGING_PROFILE);
  final List<AccessConstraintDefinition> accessConstraints=new ApplicationTypeAccessConstraintDefinition(atc).wrapAsList();
  ResourceDefinition profile=new SimpleResourceDefinition(LOGGING_PROFILE_PATH,getResourceDescriptionResolver(),LoggingProfileOperations.ADD_PROFILE,LoggingProfileOperations.REMOVE_PROFILE){
    @Override public List<AccessConstraintDefinition> getAccessConstraints(){
      return accessConstraints;
    }
  }
;
  registerLoggingProfileSubModels(registration.registerSubModel(profile),resolvePathHandler);
  subsystem.registerXMLElementWriter(LoggingSubsystemWriter.INSTANCE);
}
