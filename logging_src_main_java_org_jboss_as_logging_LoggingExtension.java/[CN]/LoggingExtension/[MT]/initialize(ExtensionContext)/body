{
  final SubsystemRegistration subsystem=context.registerSubsystem(SUBSYSTEM_NAME);
  final ManagementResourceRegistration registration=subsystem.registerSubsystemModel(LoggingSubsystemProviders.SUBSYSTEM);
  registration.registerOperationHandler(ADD,NewLoggingSubsystemAdd.ADD_INSTANCE,LoggingSubsystemProviders.SUBSYSTEM_ADD,false);
  registration.registerOperationHandler(DESCRIBE,LoggingDescribeHandler.INSTANCE,LoggingDescribeHandler.INSTANCE,false,OperationEntry.EntryType.PRIVATE);
  registration.registerOperationHandler(RootLoggerAdd.OPERATION_NAME,RootLoggerAdd.INSTANCE,LoggingSubsystemProviders.SET_ROOT_LOGGER,false);
  registration.registerOperationHandler(RootLoggerRemove.OPERATION_NAME,RootLoggerRemove.INSTANCE,LoggingSubsystemProviders.REMOVE_ROOT_LOGGER,false);
  registration.registerOperationHandler(RootLoggerLevelChange.OPERATION_NAME,RootLoggerLevelChange.INSTANCE,LoggingSubsystemProviders.ROOT_LOGGER_CHANGE_LEVEL,false);
  registration.registerOperationHandler(RootLoggerAssignHandler.getOperationName(),RootLoggerAssignHandler.getInstance(),LoggingSubsystemProviders.ROOT_LOGGER_ASSIGN_HANDLER,false);
  registration.registerOperationHandler(RootLoggerUnassignHandler.getOperationName(),RootLoggerUnassignHandler.getInstance(),LoggingSubsystemProviders.ROOT_LOGGER_UNASSIGN_HANDLER,false);
  subsystem.registerXMLElementWriter(LoggingSubsystemParser.getInstance());
  final ManagementResourceRegistration loggers=registration.registerSubModel(loggersPath,LoggingSubsystemProviders.LOGGER);
  loggers.registerOperationHandler(ADD,LoggerAdd.INSTANCE,LoggingSubsystemProviders.LOGGER_ADD,false);
  loggers.registerOperationHandler(REMOVE,LoggerRemove.INSTANCE,LoggingSubsystemProviders.LOGGER_REMOVE,false);
  loggers.registerOperationHandler(LoggerLevelChange.OPERATION_NAME,LoggerLevelChange.INSTANCE,LoggingSubsystemProviders.LOGGER_CHANGE_LEVEL,false);
  loggers.registerOperationHandler(LoggerAssignHandler.getOperationName(),LoggerAssignHandler.getInstance(),LoggingSubsystemProviders.LOGGER_ASSIGN_HANDLER,false);
  loggers.registerOperationHandler(LoggerUnassignHandler.getOperationName(),LoggerUnassignHandler.getInstance(),LoggingSubsystemProviders.LOGGER_UNASSIGN_HANDLER,false);
  final ManagementResourceRegistration asyncHandler=registration.registerSubModel(asyncHandlersPath,LoggingSubsystemProviders.ASYNC_HANDLER);
  asyncHandler.registerOperationHandler(ADD,AsyncHandlerAdd.INSTANCE,LoggingSubsystemProviders.ASYNC_HANDLER_ADD,false);
  asyncHandler.registerOperationHandler(REMOVE,LoggerHandlerRemove.INSTANCE,LoggingSubsystemProviders.HANDLER_REMOVE,false);
  asyncHandler.registerOperationHandler(ENABLE,HandlerEnable.INSTANCE,LoggingSubsystemProviders.HANDLER_ENABLE,false);
  asyncHandler.registerOperationHandler(DISABLE,HandlerDisable.INSTANCE,LoggingSubsystemProviders.HANDLER_DISABLE,false);
  asyncHandler.registerOperationHandler(HandlerLevelChange.OPERATION_NAME,HandlerLevelChange.INSTANCE,LoggingSubsystemProviders.HANDLER_CHANGE_LEVEL,false);
  asyncHandler.registerOperationHandler(AsyncHandlerUpdateProperties.OPERATION_NAME,AsyncHandlerUpdateProperties.INSTANCE,LoggingSubsystemProviders.ASYNC_HANDLER_UPDATE,false);
  asyncHandler.registerOperationHandler(AsyncHandlerAssignSubhandler.getOperationName(),AsyncHandlerAssignSubhandler.getInstance(),LoggingSubsystemProviders.ASYNC_HANDLER_ASSIGN_SUBHANDLER,false);
  asyncHandler.registerOperationHandler(AsyncHandlerUnassignSubhandler.getOperationName(),AsyncHandlerUnassignSubhandler.getInstance(),LoggingSubsystemProviders.ASYNC_HANDLER_UNASSIGN_SUBHANDLER,false);
  final ManagementResourceRegistration consoleHandler=registration.registerSubModel(consoleHandlersPath,LoggingSubsystemProviders.CONSOLE_HANDLER);
  consoleHandler.registerOperationHandler(ADD,ConsoleHandlerAdd.INSTANCE,LoggingSubsystemProviders.CONSOLE_HANDLER_ADD,false);
  consoleHandler.registerOperationHandler(REMOVE,LoggerHandlerRemove.INSTANCE,LoggingSubsystemProviders.HANDLER_REMOVE,false);
  consoleHandler.registerOperationHandler(ENABLE,HandlerEnable.INSTANCE,LoggingSubsystemProviders.HANDLER_ENABLE,false);
  consoleHandler.registerOperationHandler(DISABLE,HandlerDisable.INSTANCE,LoggingSubsystemProviders.HANDLER_DISABLE,false);
  consoleHandler.registerOperationHandler(HandlerLevelChange.OPERATION_NAME,HandlerLevelChange.INSTANCE,LoggingSubsystemProviders.HANDLER_CHANGE_LEVEL,false);
  consoleHandler.registerOperationHandler(ConsoleHandlerUpdateProperties.OPERATION_NAME,ConsoleHandlerUpdateProperties.INSTANCE,LoggingSubsystemProviders.CONSOLE_HANDLER_UPDATE,false);
  final ManagementResourceRegistration fileHandler=registration.registerSubModel(fileHandlersPath,LoggingSubsystemProviders.FILE_HANDLER);
  fileHandler.registerOperationHandler(ADD,FileHandlerAdd.INSTANCE,LoggingSubsystemProviders.FILE_HANDLER_ADD,false);
  fileHandler.registerOperationHandler(REMOVE,LoggerHandlerRemove.INSTANCE,LoggingSubsystemProviders.HANDLER_REMOVE,false);
  fileHandler.registerOperationHandler(ENABLE,HandlerEnable.INSTANCE,LoggingSubsystemProviders.HANDLER_ENABLE,false);
  fileHandler.registerOperationHandler(DISABLE,HandlerDisable.INSTANCE,LoggingSubsystemProviders.HANDLER_DISABLE,false);
  fileHandler.registerOperationHandler(HandlerLevelChange.OPERATION_NAME,HandlerLevelChange.INSTANCE,LoggingSubsystemProviders.HANDLER_CHANGE_LEVEL,false);
  fileHandler.registerOperationHandler(HandlerFileChange.OPERATION_NAME,HandlerFileChange.INSTANCE,LoggingSubsystemProviders.HANDLER_CHANGE_FILE,false);
  fileHandler.registerOperationHandler(FileHandlerUpdateProperties.OPERATION_NAME,FileHandlerUpdateProperties.INSTANCE,LoggingSubsystemProviders.FILE_HANDLER_UPDATE,false);
  final ManagementResourceRegistration periodicHandler=registration.registerSubModel(periodicHandlersPath,LoggingSubsystemProviders.PERIODIC_HANDLER);
  periodicHandler.registerOperationHandler(ADD,PeriodicRotatingFileHandlerAdd.INSTANCE,LoggingSubsystemProviders.PERIODIC_HANDLER_ADD,false);
  periodicHandler.registerOperationHandler(REMOVE,LoggerHandlerRemove.INSTANCE,LoggingSubsystemProviders.HANDLER_REMOVE,false);
  periodicHandler.registerOperationHandler(ENABLE,HandlerEnable.INSTANCE,LoggingSubsystemProviders.HANDLER_ENABLE,false);
  periodicHandler.registerOperationHandler(DISABLE,HandlerDisable.INSTANCE,LoggingSubsystemProviders.HANDLER_DISABLE,false);
  periodicHandler.registerOperationHandler(HandlerLevelChange.OPERATION_NAME,HandlerLevelChange.INSTANCE,LoggingSubsystemProviders.HANDLER_CHANGE_LEVEL,false);
  periodicHandler.registerOperationHandler(HandlerFileChange.OPERATION_NAME,HandlerFileChange.INSTANCE,LoggingSubsystemProviders.HANDLER_CHANGE_FILE,false);
  periodicHandler.registerOperationHandler(PeriodicHandlerUpdateProperties.OPERATION_NAME,PeriodicHandlerUpdateProperties.INSTANCE,LoggingSubsystemProviders.PERIODIC_HANDLER_UPDATE,false);
  final ManagementResourceRegistration sizePeriodicHandler=registration.registerSubModel(sizePeriodicHandlersPath,LoggingSubsystemProviders.SIZE_PERIODIC_HANDLER);
  sizePeriodicHandler.registerOperationHandler(ADD,SizeRotatingFileHandlerAdd.INSTANCE,LoggingSubsystemProviders.SIZE_PERIODIC_HANDLER_ADD,false);
  sizePeriodicHandler.registerOperationHandler(REMOVE,LoggerHandlerRemove.INSTANCE,LoggingSubsystemProviders.HANDLER_REMOVE,false);
  sizePeriodicHandler.registerOperationHandler(ENABLE,HandlerEnable.INSTANCE,LoggingSubsystemProviders.HANDLER_ENABLE,false);
  sizePeriodicHandler.registerOperationHandler(DISABLE,HandlerDisable.INSTANCE,LoggingSubsystemProviders.HANDLER_DISABLE,false);
  sizePeriodicHandler.registerOperationHandler(HandlerLevelChange.OPERATION_NAME,HandlerLevelChange.INSTANCE,LoggingSubsystemProviders.HANDLER_CHANGE_LEVEL,false);
  sizePeriodicHandler.registerOperationHandler(HandlerFileChange.OPERATION_NAME,HandlerFileChange.INSTANCE,LoggingSubsystemProviders.HANDLER_CHANGE_FILE,false);
  sizePeriodicHandler.registerOperationHandler(SizeRotatingHandlerUpdateProperties.OPERATION_NAME,SizeRotatingHandlerUpdateProperties.INSTANCE,LoggingSubsystemProviders.SIZE_PERIODIC_HANDLER_UPDATE,false);
  final ManagementResourceRegistration customHandler=registration.registerSubModel(customHandlerPath,LoggingSubsystemProviders.CUSTOM_HANDLER);
  customHandler.registerOperationHandler(ADD,CustomHandlerAdd.INSTANCE,LoggingSubsystemProviders.CUSTOM_HANDLER_ADD,false);
  customHandler.registerOperationHandler(REMOVE,LoggerHandlerRemove.INSTANCE,LoggingSubsystemProviders.HANDLER_REMOVE,false);
  customHandler.registerOperationHandler(ENABLE,HandlerEnable.INSTANCE,LoggingSubsystemProviders.HANDLER_ENABLE,false);
  customHandler.registerOperationHandler(DISABLE,HandlerDisable.INSTANCE,LoggingSubsystemProviders.HANDLER_DISABLE,false);
  customHandler.registerOperationHandler(HandlerLevelChange.OPERATION_NAME,HandlerLevelChange.INSTANCE,LoggingSubsystemProviders.HANDLER_CHANGE_LEVEL,false);
  customHandler.registerOperationHandler(CustomHandlerUpdateProperties.OPERATION_NAME,CustomHandlerUpdateProperties.INSTANCE,LoggingSubsystemProviders.CUSTOM_HANDLER_UPDATE,false);
}
