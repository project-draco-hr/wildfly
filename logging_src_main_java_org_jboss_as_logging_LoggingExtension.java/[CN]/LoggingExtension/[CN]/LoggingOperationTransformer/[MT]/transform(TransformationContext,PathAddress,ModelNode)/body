{
  final String key=address.getLastElement().getKey();
  final String name=address.getLastElement().getValue();
  final String operationName=operation.get(ModelDescriptionConstants.OP).asString();
  if (operationName.equals(CommonAttributes.ADD_HANDLER_OPERATION_NAME)) {
    if (key.equals(CommonAttributes.ROOT_LOGGER)) {
      operation.get(ModelDescriptionConstants.OP).set(RootLoggerResourceDefinition.ROOT_LOGGER_ADD_HANDLER_OPERATION_NAME);
    }
 else     if (key.equals(CommonAttributes.LOGGER)) {
      operation.get(ModelDescriptionConstants.OP).set(LoggerResourceDefinition.LEGACY_ADD_HANDLER_OPERATION_NAME);
    }
 else     if (key.equals(CommonAttributes.ASYNC_HANDLER)) {
      operation.get(ModelDescriptionConstants.OP).set(AsyncHandlerResourceDefinition.ADD_SUBHANDLER_OPERATION_NAME);
    }
  }
 else   if (operationName.equals(CommonAttributes.REMOVE_HANDLER_OPERATION_NAME)) {
    if (key.equals(CommonAttributes.ROOT_LOGGER)) {
      operation.get(ModelDescriptionConstants.OP).set(RootLoggerResourceDefinition.ROOT_LOGGER_REMOVE_HANDLER_OPERATION_NAME);
    }
 else     if (key.equals(CommonAttributes.LOGGER)) {
      operation.get(ModelDescriptionConstants.OP).set(LoggerResourceDefinition.LEGACY_REMOVE_HANDLER_OPERATION_NAME);
    }
 else     if (key.equals(CommonAttributes.ASYNC_HANDLER)) {
      operation.get(ModelDescriptionConstants.OP).set(AsyncHandlerResourceDefinition.REMOVE_SUBHANDLER_OPERATION_NAME);
    }
  }
 else   if (operationName.equals(ModelDescriptionConstants.WRITE_ATTRIBUTE_OPERATION)) {
    final String attributeName=operation.get(ModelDescriptionConstants.NAME).asString();
    if (attributeName.equals(CommonAttributes.FORMATTER.getName())) {
      final String currentPattern=operation.get(ModelDescriptionConstants.VALUE).asString();
      operation.get(ModelDescriptionConstants.VALUE).set(fixFormatPattern(currentPattern));
    }
 else     if (attributeName.equals(CommonAttributes.FILTER_SPEC.getName())) {
      operation.get(ModelDescriptionConstants.NAME).set(CommonAttributes.FILTER.getName());
      final String filterExpression=operation.get(ModelDescriptionConstants.VALUE).asString();
      operation.get(ModelDescriptionConstants.VALUE).set(Filters.filterSpecToFilter(filterExpression));
    }
  }
 else   if (operationName.equals(ModelDescriptionConstants.ADD)) {
    if (CommonAttributes.LOGGER.equals(key)) {
      operation.get(CommonAttributes.CATEGORY.getName()).set(name);
    }
 else     if (!CommonAttributes.ROOT_LOGGER.equals(key)) {
      operation.get(CommonAttributes.NAME.getName()).set(name);
    }
  }
 else   if (operationName.equals(RootLoggerResourceDefinition.ROOT_LOGGER_ADD_OPERATION_NAME)) {
    operation.remove(CommonAttributes.NAME.getName());
  }
  if (operation.hasDefined(CommonAttributes.FORMATTER.getName())) {
    final String currentPattern=operation.get(CommonAttributes.FORMATTER.getName()).asString();
    operation.get(CommonAttributes.FORMATTER.getName()).set(fixFormatPattern(currentPattern));
  }
  if (operation.hasDefined(CommonAttributes.FILTER_SPEC.getName())) {
    final String filterExpression=operation.get(CommonAttributes.FILTER_SPEC.getName()).asString();
    operation.get(CommonAttributes.FILTER.getName()).set(Filters.filterSpecToFilter(filterExpression));
  }
  operation.remove(CommonAttributes.FILTER_SPEC.getName());
  return operation;
}
