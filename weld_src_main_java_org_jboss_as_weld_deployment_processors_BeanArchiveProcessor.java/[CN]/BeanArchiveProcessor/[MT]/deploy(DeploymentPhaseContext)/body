{
  final DeploymentUnit deploymentUnit=phaseContext.getDeploymentUnit();
  if (!WeldDeploymentMarker.isPartOfWeldDeployment(deploymentUnit)) {
    return;
  }
  WeldLogger.DEPLOYMENT_LOGGER.processingWeldDeployment(deploymentUnit.getName());
  final Map<ResourceRoot,Index> indexes=AnnotationIndexUtils.getAnnotationIndexes(deploymentUnit);
  final Map<ResourceRoot,BeanDeploymentArchiveImpl> bdaMap=new HashMap<ResourceRoot,BeanDeploymentArchiveImpl>();
  final Components components=new Components(deploymentUnit,indexes);
  final ResourceRootHandler handler=new ResourceRootHandler(deploymentUnit,components,indexes);
  for (  ResourceRoot resourceRoot : deploymentUnit.getAttachmentList(Attachments.RESOURCE_ROOTS)) {
    if (ModuleRootMarker.isModuleRoot(resourceRoot) && !SubDeploymentMarker.isSubDeployment(resourceRoot)) {
      if (isClassesRoot(resourceRoot)) {
        continue;
      }
      handler.handleResourceRoot(bdaMap,resourceRoot);
    }
  }
  if (!DeploymentTypeMarker.isType(DeploymentType.EAR,deploymentUnit)) {
    handler.handleResourceRoot(bdaMap,handler.deploymentResourceRoot);
  }
  if (!bdaMap.containsKey(handler.deploymentResourceRoot)) {
    BeanDeploymentArchiveImpl bda=new BeanDeploymentArchiveImpl(Collections.<String>emptySet(),BeansXml.EMPTY_BEANS_XML,handler.module,getDeploymentUnitId(deploymentUnit),BeanArchiveType.SYNTHETIC,true);
    WeldLogger.DEPLOYMENT_LOGGER.beanArchiveDiscovered(bda);
    bdaMap.put(handler.deploymentResourceRoot,bda);
  }
  deploymentUnit.putAttachment(WeldAttachments.DEPLOYMENT_ROOT_BEAN_DEPLOYMENT_ARCHIVE,bdaMap.get(handler.deploymentResourceRoot));
  for (  Map.Entry<ResourceRoot,ComponentDescription> entry : components.componentDescriptions.entries()) {
    BeanDeploymentArchiveImpl bda=bdaMap.get(entry.getKey());
    String id=null;
    if (bda != null) {
      id=bda.getId();
    }
 else {
      id=deploymentUnit.getAttachment(WeldAttachments.DEPLOYMENT_ROOT_BEAN_DEPLOYMENT_ARCHIVE).getId();
    }
    entry.getValue().setBeanDeploymentArchiveId(id);
  }
  final JpaInjectionServices jpaInjectionServices=new WeldJpaInjectionServices(deploymentUnit);
  final JaxwsInjectionServices jaxwsInjectionServices=new WeldJaxwsInjectionServices(deploymentUnit);
  final BeanDeploymentModule bdm=new BeanDeploymentModule(handler.module.getIdentifier().toString(),deploymentUnit,bdaMap.values());
  bdm.addService(JpaInjectionServices.class,jpaInjectionServices);
  bdm.addService(JaxwsInjectionServices.class,jaxwsInjectionServices);
  deploymentUnit.putAttachment(WeldAttachments.BEAN_DEPLOYMENT_MODULE,bdm);
}
