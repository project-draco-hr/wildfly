{
  InputStream in=new BufferedInputStream(new FileInputStream(inputFile));
  try {
    XMLInputFactory factory=XMLInputFactory.newInstance();
    factory.setProperty(XMLInputFactory.IS_COALESCING,Boolean.FALSE);
    XMLStreamReader reader=factory.createXMLStreamReader(in);
    reader.require(START_DOCUMENT,null,null);
    Map<String,String> configAttributes=new HashMap<String,String>();
    configAttributes.put("default-supplement",null);
    ParsingUtils.getNextElement(reader,"config",configAttributes,false);
    extensionModule=ParsingUtils.getNextElement(reader,"extension-module",null,true);
    ParsingUtils.getNextElement(reader,"subsystem",null,false);
    subsystem=super.parseNode(reader,"subsystem");
    while (reader.hasNext()) {
      if (reader.next() == START_ELEMENT) {
        if (reader.getLocalName().equals("subsystem")) {
          throw new XMLStreamException("Only one subsystem element is allowed",reader.getLocation());
        }
 else         if (reader.getLocalName().equals("supplement")) {
          parseSupplement(reader,((ElementNode)subsystem).getNamespace());
        }
 else         if (reader.getLocalName().equals("socket-binding")) {
          ElementNode socketBinding=new NodeParser(socketBindingNamespace).parseNode(reader,"socket-binding");
          socketBindings.put(socketBinding.getAttributeValue("name"),socketBinding);
        }
 else         if (reader.getLocalName().equals("outbound-socket-binding")) {
          ElementNode socketBinding=new NodeParser(socketBindingNamespace).parseNode(reader,"outbound-socket-binding");
          outboundSocketBindings.put(socketBinding.getAttributeValue("name"),socketBinding);
        }
      }
    }
    String supplementName=this.supplementName;
    if (supplementName == null) {
      supplementName=configAttributes.get("default-supplement");
    }
    if (supplementName != null) {
      Supplement supplement=supplementReplacements.get(supplementName);
      if (supplement == null) {
        throw new IllegalStateException("No supplement called '" + supplementName + "' could be found to augment the subsystem configuration");
      }
      Map<String,ElementNode> nodeReplacements=supplement.getAllNodeReplacements();
      for (      Map.Entry<String,ProcessingInstructionNode> entry : supplementPlaceholders.entrySet()) {
        ElementNode replacement=nodeReplacements.get(entry.getKey());
        if (replacement != null) {
          for (Iterator<Node> it=replacement.iterateChildren(); it.hasNext(); ) {
            entry.getValue().addDelegate(it.next());
          }
        }
      }
      Map<String,String> attributeReplacements=supplement.getAllAttributeReplacements();
      for (      Map.Entry<String,List<AttributeValue>> entry : attributesForReplacement.entrySet()) {
        String replacement=attributeReplacements.get(entry.getKey());
        if (replacement == null) {
          throw new IllegalStateException("No replacement found for " + entry.getKey() + " in supplement "+ supplementName);
        }
        for (        AttributeValue attrValue : entry.getValue()) {
          attrValue.setValue(replacement);
        }
      }
    }
  }
  finally {
    try {
      in.close();
    }
 catch (    Exception ignore) {
    }
  }
}
