{
  KernelServicesBuilder builder=createKernelServicesBuilder(createAdditionalInitialization());
  ModelVersion version_1_0_0=ModelVersion.create(1,0,0);
  LegacyKernelServicesInitializer legacyInitializer=builder.createLegacyKernelServicesBuilder(null,controllerVersion,version_1_0_0).addMavenResourceURL("org.jboss.as:jboss-as-osgi-service:" + controllerVersion.getMavenGavVersion());
  for (  String mavenGAV : mavenGAVs) {
    legacyInitializer.addMavenResourceURL(mavenGAV);
  }
  KernelServices mainServices=builder.build();
  KernelServices legacyServices=mainServices.getLegacyServices(version_1_0_0);
  org.junit.Assert.assertNotNull(legacyServices);
  org.junit.Assert.assertTrue("main services did not boot",mainServices.isSuccessfulBoot());
  org.junit.Assert.assertTrue(legacyServices.isSuccessfulBoot());
  List<ModelNode> xmlOps=builder.parseXml(SUBSYSTEM_XML_1_2_EXPRESSIONS);
  ModelTestUtils.checkFailedTransformedBootOperations(mainServices,version_1_0_0,xmlOps,new FailedOperationTransformationConfig().addFailedAttribute(PathAddress.pathAddress(OSGiRootResource.SUBSYSTEM_PATH),new FailedOperationTransformationConfig.RejectExpressionsConfig(OSGiRootResource.ACTIVATION)).addFailedAttribute(PathAddress.pathAddress(OSGiRootResource.SUBSYSTEM_PATH,FrameworkPropertyResource.PROPERTY_PATH),new FailedOperationTransformationConfig.RejectExpressionsConfig(FrameworkPropertyResource.VALUE)).addFailedAttribute(PathAddress.pathAddress(OSGiRootResource.SUBSYSTEM_PATH,FrameworkCapabilityResource.CAPABILITY_PATH),new FailedOperationTransformationConfig.RejectExpressionsConfig(FrameworkCapabilityResource.STARTLEVEL).setReadOnly(FrameworkCapabilityResource.STARTLEVEL)));
}
