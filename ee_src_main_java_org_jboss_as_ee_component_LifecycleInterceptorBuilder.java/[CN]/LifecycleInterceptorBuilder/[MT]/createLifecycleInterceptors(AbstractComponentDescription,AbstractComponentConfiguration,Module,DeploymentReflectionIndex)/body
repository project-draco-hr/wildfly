{
  final ClassLoader classLoader=module.getClassLoader();
  for (  InterceptorMethodDescription lifecycleConfiguration : description.getPostConstructs()) {
    try {
      if (lifecycleConfiguration.isDeclaredOnTargetClass()) {
        componentConfiguration.addPostConstructLifecycle(createLifecycle(classLoader,componentConfiguration,lifecycleConfiguration,deploymentReflectionIndex));
      }
 else {
        componentConfiguration.addPostConstructInterceptorLifecycle(createInterceptorLifecycle(classLoader,componentConfiguration,lifecycleConfiguration,deploymentReflectionIndex));
      }
    }
 catch (    Exception e) {
      throw new DeploymentUnitProcessingException("Failed to create lifecycle interceptor instance: " + lifecycleConfiguration.getIdentifier().getName(),e);
    }
  }
  for (  InterceptorMethodDescription lifecycleConfiguration : description.getPreDestroys()) {
    try {
      if (lifecycleConfiguration.isDeclaredOnTargetClass()) {
        componentConfiguration.addPreDestroyLifecycle(createLifecycle(classLoader,componentConfiguration,lifecycleConfiguration,deploymentReflectionIndex));
      }
 else {
        componentConfiguration.addPreDestroyInterceptorLifecycle(createInterceptorLifecycle(classLoader,componentConfiguration,lifecycleConfiguration,deploymentReflectionIndex));
      }
    }
 catch (    Exception e) {
      throw new DeploymentUnitProcessingException("Failed to create lifecycle interceptor instance: " + lifecycleConfiguration.getIdentifier().getName(),e);
    }
  }
}
