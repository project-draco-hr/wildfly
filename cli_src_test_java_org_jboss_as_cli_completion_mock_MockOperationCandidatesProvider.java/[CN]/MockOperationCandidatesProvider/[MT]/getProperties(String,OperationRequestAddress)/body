{
  MockOperation operation=root.getOperation(operationName);
  if (operation == null) {
    return Collections.emptyList();
  }
  final List<String> names=operation.getPropertyNames();
  final List<CommandArgument> result=new ArrayList<CommandArgument>(names.size());
  for (  final String name : names) {
    result.add(new CommandArgument(){
      @Override public String getFullName(){
        return name;
      }
      @Override public String getShortName(){
        return null;
      }
      @Override public int getIndex(){
        return -1;
      }
      @Override public boolean isPresent(      ParsedCommandLine args) throws CommandFormatException {
        return args.hasProperty(name);
      }
      @Override public boolean canAppearNext(      CommandContext ctx) throws CommandFormatException {
        ParsedCommandLine args=ctx.getParsedCommandLine();
        if (isPresent(args)) {
          return !isValueComplete(args);
        }
        return true;
      }
      @Override public String getValue(      ParsedCommandLine args) throws CommandFormatException {
        return args.getPropertyValue(name);
      }
      @Override public String getValue(      ParsedCommandLine args,      boolean required) throws CommandFormatException {
        if (!isPresent(args)) {
          throw new CommandFormatException("Property '" + name + "' is missing required value.");
        }
        return args.getPropertyValue(name);
      }
      @Override public boolean isValueComplete(      ParsedCommandLine args) throws CommandFormatException {
        if (!isPresent(args)) {
          return false;
        }
        if (name.equals(args.getLastParsedPropertyName())) {
          return false;
        }
        return true;
      }
      @Override public boolean isValueRequired(){
        return true;
      }
      @Override public CommandLineCompleter getValueCompleter(){
        return null;
      }
    }
);
  }
  return result;
}
