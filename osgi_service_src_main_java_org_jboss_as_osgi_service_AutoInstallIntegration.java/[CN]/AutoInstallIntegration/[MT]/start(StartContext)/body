{
  serviceController=context.getController();
  ROOT_LOGGER.debugf("Starting: %s in mode %s",serviceController.getName(),serviceController.getMode());
  final Map<ServiceName,OSGiCapability> installedServices=new LinkedHashMap<ServiceName,OSGiCapability>();
  final Set<ServiceName> resolvableServices=new LinkedHashSet<ServiceName>();
  final BundleContext syscontext=injectedSystemBundle.getValue().getBundleContext();
  final String slstr=syscontext.getProperty(Constants.FRAMEWORK_BEGINNING_STARTLEVEL);
  final Integer beginningStartLevel=Integer.parseInt(slstr != null ? slstr : "1");
  try {
    final BundleManagerService bundleManager=injectedBundleManager.getValue();
    final ServiceContainer serviceContainer=serviceController.getServiceContainer();
    serviceTarget=context.getChildTarget();
    ServerEnvironment serverEnvironment=injectedEnvironment.getValue();
    bundlesDir=serverEnvironment.getBundlesDir();
    if (bundlesDir.isDirectory() == false)     throw MESSAGES.cannotFindBundleDir(bundlesDir);
    injectedSubsystemState.getValue().addObserver(this);
    List<OSGiCapability> configcaps=new ArrayList<OSGiCapability>();
    configcaps.add(new OSGiCapability("javax.api",null));
    configcaps.add(new OSGiCapability("org.osgi.enterprise",null));
    configcaps.addAll(injectedSubsystemState.getValue().getCapabilities());
    for (    OSGiCapability moduleMetaData : configcaps) {
      ServiceName serviceName=installModule(bundleManager,moduleMetaData);
      if (serviceName != null) {
        installedServices.put(serviceName,moduleMetaData);
        if (moduleMetaData.getStartLevel() <= beginningStartLevel) {
          resolvableServices.add(serviceName);
        }
      }
    }
    ServiceBuilder<Void> builder=serviceTarget.addService(Services.AUTOINSTALL_PROVIDER_COMPLETE,new AbstractService<Void>(){
      public void start(      StartContext context) throws StartException {
        Set<Bundle> resolvableBundles=new LinkedHashSet<Bundle>();
        for (        ServiceName serviceName : resolvableServices) {
          ServiceController<?> requiredService=serviceContainer.getRequiredService(serviceName);
          resolvableBundles.add((Bundle)requiredService.getValue());
        }
        Bundle[] bundleArr=resolvableBundles.toArray(new Bundle[resolvableBundles.size()]);
        PackageAdmin packageAdmin=injectedPackageAdmin.getValue();
        packageAdmin.resolveBundles(bundleArr);
        for (        ServiceName serviceName : resolvableServices) {
          OSGiCapability moduleMetaData=installedServices.get(serviceName);
          startBundle(serviceContainer,serviceName,moduleMetaData);
        }
        ROOT_LOGGER.debugf("Auto bundles bundles started");
      }
    }
);
    ServiceName[] serviceNameArray=resolvableServices.toArray(new ServiceName[resolvableServices.size()]);
    builder.addDependencies(serviceNameArray);
    builder.install();
  }
 catch (  Exception ex) {
    throw new StartException(MESSAGES.failedToCreateAutoInstallList(),ex);
  }
}
