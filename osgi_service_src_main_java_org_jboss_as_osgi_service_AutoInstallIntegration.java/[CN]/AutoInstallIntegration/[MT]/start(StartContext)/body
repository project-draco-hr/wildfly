{
  serviceController=context.getController();
  ROOT_LOGGER.debugf("Starting: %s in mode %s",serviceController.getName(),serviceController.getMode());
  final Map<ServiceName,OSGiCapability> pendingServices=new LinkedHashMap<ServiceName,OSGiCapability>();
  try {
    final BundleManagerService bundleManager=injectedBundleManager.getValue();
    final ServiceContainer serviceContainer=serviceController.getServiceContainer();
    serviceTarget=context.getChildTarget();
    modulesDir=injectedEnvironment.getValue().getModulesDir();
    bundlesDir=new File(modulesDir.getPath() + "/../bundles").getCanonicalFile();
    if (bundlesDir.isDirectory() == false)     throw MESSAGES.cannotFindBundleDir(bundlesDir);
    injectedSubsystemState.getValue().addObserver(this);
    for (    OSGiCapability moduleMetaData : injectedSubsystemState.getValue().getCapabilities()) {
      ServiceName serviceName=installModule(bundleManager,moduleMetaData);
      pendingServices.put(serviceName,moduleMetaData);
    }
    ServiceName servicesInstalled=Services.AUTOINSTALL_PROVIDER.append("INSTALLED");
    ServiceBuilder<Void> builder=serviceTarget.addService(servicesInstalled,new AbstractService<Void>(){
      public void start(      StartContext context) throws StartException {
        ROOT_LOGGER.debugf("Auto bundles installed");
      }
    }
);
    builder.addDependencies(pendingServices.keySet());
    builder.install();
    builder=serviceTarget.addService(Services.AUTOINSTALL_PROVIDER_COMPLETE,new AbstractService<Void>(){
      public void start(      StartContext context) throws StartException {
        for (        ServiceName serviceName : pendingServices.keySet()) {
          OSGiCapability moduleMetaData=pendingServices.get(serviceName);
          startBundle(serviceContainer,serviceName,moduleMetaData);
        }
        ROOT_LOGGER.debugf("Auto bundles bundles started");
      }
    }
);
    builder.addDependencies(servicesInstalled);
    builder.install();
  }
 catch (  Exception ex) {
    throw new StartException(MESSAGES.failedToCreateAutoInstallList(),ex);
  }
}
