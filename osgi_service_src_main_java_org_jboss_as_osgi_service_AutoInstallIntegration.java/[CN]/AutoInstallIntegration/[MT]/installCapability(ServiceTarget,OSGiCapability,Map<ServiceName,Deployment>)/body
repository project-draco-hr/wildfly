{
  String identifier=osgicap.getIdentifier();
  Integer startLevel=osgicap.getStartLevel();
  if (isValidModuleIdentifier(identifier)) {
    ModuleIdentifier moduleId=ModuleIdentifier.fromString(identifier);
    File bundleFile=ModuleIdentityArtifactProvider.getRepositoryEntry(bundlesDir,moduleId);
    if (bundleFile != null) {
      URL bundleURL=bundleFile.toURI().toURL();
      return installBundleFromURL(serviceTarget,bundleURL,startLevel,installedBundles);
    }
    Module module=null;
    try {
      ModuleLoader moduleLoader=Module.getBootModuleLoader();
      module=moduleLoader.loadModule(moduleId);
    }
 catch (    ModuleLoadException e) {
      LOGGER.debugf("Cannot load module: %s",moduleId);
    }
    if (module != null) {
      OSGiMetaData metadata=getModuleMetadata(module);
      XResourceBuilder builder=XResourceBuilderFactory.create();
      if (metadata != null) {
        builder.loadFrom(metadata);
      }
 else {
        builder.loadFrom(module);
      }
      XResource res=builder.getResource();
      res.addAttachment(Module.class,module);
      injectedEnvironment.getValue().installResources(res);
      return null;
    }
  }
 else   if (isValidMavenIdentifier(identifier)) {
    Repository repository=injectedRepository.getValue();
    MavenCoordinates mavenId=MavenCoordinates.parse(identifier);
    Requirement req=XRequirementBuilder.createArtifactRequirement(mavenId);
    Collection<Capability> caps=repository.findProviders(Collections.singleton(req)).get(req);
    if (caps.isEmpty() == false) {
      XIdentityCapability icap=(XIdentityCapability)caps.iterator().next();
      URL bundleURL=(URL)icap.getAttribute(XResourceConstants.CONTENT_URL);
      return installBundleFromURL(serviceTarget,bundleURL,startLevel,installedBundles);
    }
  }
  LOGGER.warnCannotResolveCapability(identifier);
  return null;
}
