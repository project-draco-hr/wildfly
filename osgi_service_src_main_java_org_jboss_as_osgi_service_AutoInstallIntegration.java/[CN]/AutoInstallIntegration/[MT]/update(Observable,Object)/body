{
  if (arg instanceof SubsystemState.ChangeEvent == false)   return;
  SubsystemState.ChangeEvent event=(ChangeEvent)arg;
  if (event.getType() != ChangeType.CAPABILITY)   return;
  if (event.isRemoved() == false) {
    try {
      for (      final OSGiCapability moduleMetaData : injectedSubsystemState.getValue().getCapabilities()) {
        if (moduleMetaData.getIdentifier().toString().equals(event.getId())) {
          final ServiceName serviceName=installModule(injectedBundleManager.getValue(),moduleMetaData);
          if (serviceName != null) {
            final ServiceContainer serviceContainer=serviceController.getServiceContainer();
            ServiceBuilder<Void> builder=serviceContainer.addService(ServiceName.of(Services.AUTOINSTALL_PROVIDER,"ModuleUpdater","" + updateServiceIdCounter.incrementAndGet()),new AbstractService<Void>(){
              @Override public void start(              StartContext context) throws StartException {
                try {
                  ServiceController<?> controller=serviceContainer.getRequiredService(serviceName);
                  Bundle bundle=(Bundle)controller.getValue();
                  startBundle(bundle,moduleMetaData.getStartLevel());
                }
  finally {
                  context.getController().setMode(Mode.REMOVE);
                }
              }
            }
);
            builder.addDependency(serviceName);
            builder.install();
          }
          return;
        }
      }
    }
 catch (    Exception e) {
      LOGGER.errorAddingModule(e,event.getId());
      return;
    }
    LOGGER.errorModuleNotFound(event.getId());
  }
}
