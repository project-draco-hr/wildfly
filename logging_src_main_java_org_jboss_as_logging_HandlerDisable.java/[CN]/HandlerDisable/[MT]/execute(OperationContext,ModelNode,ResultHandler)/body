{
  final ModelNode opAddr=operation.require(OP_ADDR);
  final ModelNode compensatingOperation=new ModelNode();
  compensatingOperation.get(OP).set(ENABLE);
  compensatingOperation.get(OP_ADDR).set(opAddr);
  final PathAddress address=PathAddress.pathAddress(operation.require(OP_ADDR));
  final String name=address.getLastElement().getValue();
  if (context.getRuntimeContext() != null) {
    context.getRuntimeContext().setRuntimeTask(new RuntimeTask(){
      public void execute(      RuntimeTaskContext context) throws OperationFailedException {
        final ServiceRegistry serviceRegistry=context.getServiceRegistry();
        final ServiceController<?> controller=serviceRegistry.getService(LogServices.handlerName(name));
        if (controller != null) {
          controller.addListener(new AbstractServiceListener<Object>(){
            public void listenerAdded(            ServiceController<?> serviceController){
              serviceController.setMode(ServiceController.Mode.NEVER);
            }
            public void serviceStopped(            ServiceController<?> serviceController){
              resultHandler.handleResultComplete();
            }
          }
);
        }
 else {
          resultHandler.handleResultComplete();
        }
      }
    }
);
  }
 else {
    resultHandler.handleResultComplete();
  }
  return new BasicOperationResult(compensatingOperation);
}
