{
  final Collection<ViewDescription> views=sessionBean.getViews();
  if (views == null || views.isEmpty()) {
    EjbLogger.ROOT_LOGGER.noJNDIBindingsForSessionBean(sessionBean.getEJBName());
    return;
  }
  final String applicationName=sessionBean.getModuleDescription().getEarApplicationName();
  final String globalJNDIBaseName="java:global/" + (applicationName != null ? applicationName + "/" : "") + sessionBean.getModuleName()+ "/"+ sessionBean.getEJBName();
  final String appJNDIBaseName="java:app/" + sessionBean.getModuleName() + "/"+ sessionBean.getEJBName();
  final String moduleJNDIBaseName="java:module/" + sessionBean.getEJBName();
  final String remoteExportedJNDIBaseName="java:jboss/exported/" + (applicationName != null ? applicationName + "/" : "") + sessionBean.getModuleName()+ "/"+ sessionBean.getEJBName();
  final StringBuilder jndiBindingsLogMessage=new StringBuilder();
  jndiBindingsLogMessage.append("JNDI bindings for session bean named " + sessionBean.getEJBName() + " in deployment unit "+ deploymentUnit+ " are as follows:\n\n");
  EJBViewDescription ejbViewDescription=null;
  for (  ViewDescription viewDescription : views) {
    ejbViewDescription=(EJBViewDescription)viewDescription;
    if (appclient && ejbViewDescription.getMethodIntf() != MethodIntf.REMOTE && ejbViewDescription.getMethodIntf() != MethodIntf.HOME) {
      continue;
    }
    if (!ejbViewDescription.hasJNDIBindings())     continue;
    final String viewClassName=ejbViewDescription.getViewClassName();
    final String globalJNDIName=globalJNDIBaseName + "!" + viewClassName;
    registerBinding(sessionBean,viewDescription,globalJNDIName);
    logBinding(jndiBindingsLogMessage,globalJNDIName);
    final String appJNDIName=appJNDIBaseName + "!" + viewClassName;
    registerBinding(sessionBean,viewDescription,appJNDIName);
    logBinding(jndiBindingsLogMessage,appJNDIName);
    final String moduleJNDIName=moduleJNDIBaseName + "!" + viewClassName;
    registerBinding(sessionBean,viewDescription,moduleJNDIName);
    logBinding(jndiBindingsLogMessage,moduleJNDIName);
    if (ejbViewDescription.getMethodIntf() == MethodIntf.REMOTE || ejbViewDescription.getMethodIntf() == MethodIntf.HOME) {
      final String remoteJNDIName=remoteExportedJNDIBaseName + "!" + viewClassName;
      registerRemoteBinding(sessionBean,viewDescription,remoteJNDIName);
      logBinding(jndiBindingsLogMessage,remoteJNDIName);
    }
  }
  if (views.size() == 1) {
    final EJBViewDescription viewDescription=(EJBViewDescription)views.iterator().next();
    if (ejbViewDescription.hasJNDIBindings()) {
      registerBinding(sessionBean,viewDescription,globalJNDIBaseName);
      logBinding(jndiBindingsLogMessage,globalJNDIBaseName);
      registerBinding(sessionBean,viewDescription,appJNDIBaseName);
      logBinding(jndiBindingsLogMessage,appJNDIBaseName);
      registerBinding(sessionBean,viewDescription,moduleJNDIBaseName);
      logBinding(jndiBindingsLogMessage,moduleJNDIBaseName);
    }
  }
  logger.info(jndiBindingsLogMessage);
}
