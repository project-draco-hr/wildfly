{
  String relatedEntityName=metadata.getRelatedRole().getEntity().getName();
  Catalog catalog=manager.getCatalog();
  relatedEntity=(JDBCEntityBridge)catalog.getEntityByEJBName(relatedEntityName);
  if (relatedEntity == null) {
    throw new RuntimeException("Related entity not found: " + "entity=" + entity.getEntityName() + ", "+ "cmrField="+ getFieldName()+ ", "+ "relatedEntity="+ relatedEntityName);
  }
  JDBCCMRFieldBridge[] cmrFields=(JDBCCMRFieldBridge[])relatedEntity.getCMRFields();
  for (int i=0; i < cmrFields.length; ++i) {
    JDBCCMRFieldBridge cmrField=cmrFields[i];
    if (metadata.getRelatedRole() == cmrField.getMetaData()) {
      relatedCMRField=cmrField;
      break;
    }
  }
  if (relatedCMRField == null) {
    String message="Related CMR field not found in " + relatedEntity.getEntityName() + " for relationship from";
    message+=entity.getEntityName() + ".";
    if (getFieldName() != null) {
      message+=getFieldName();
    }
 else {
      message+="<no-field>";
    }
    message+=" to ";
    message+=relatedEntityName + ".";
    if (metadata.getRelatedRole().getCMRFieldName() != null) {
      message+=metadata.getRelatedRole().getCMRFieldName();
    }
 else {
      message+="<no-field>";
    }
    throw new RuntimeException(message);
  }
  relatedManager=(JDBCStoreManager)relatedEntity.getManager();
  CmpEntityBeanComponent relatedComponent=relatedManager.getComponent();
  this.relatedContainerRef=new WeakReference<CmpEntityBeanComponent>(relatedComponent);
  Class homeClass=(relatedComponent.getLocalHomeClass() != null ? relatedComponent.getLocalHomeClass() : relatedComponent.getHomeClass());
  try {
    relatedFindByPrimaryKey=homeClass.getMethod("findByPrimaryKey",new Class[]{relatedEntity.getPrimaryKeyClass()});
  }
 catch (  Exception e) {
    throw new RuntimeException("findByPrimaryKey(" + relatedEntity.getPrimaryKeyClass().getName() + " pk) was not found in "+ homeClass.getName());
  }
  if (metadata.getRelationMetaData().isTableMappingStyle()) {
    Collection tableKeys=metadata.getKeyFields();
    List keyFieldsList=new ArrayList(tableKeys.size());
    Map pkFieldsToFKFields=new HashMap(tableKeys.size());
    for (Iterator i=tableKeys.iterator(); i.hasNext(); ) {
      JDBCCMPFieldMetaData cmpFieldMetaData=(JDBCCMPFieldMetaData)i.next();
      FieldBridge pkField=entity.getFieldByName(cmpFieldMetaData.getFieldName());
      if (pkField == null) {
        throw new RuntimeException("Primary key not found for key-field " + cmpFieldMetaData.getFieldName());
      }
      pkFieldsToFKFields.put(pkField,new JDBCCMP2xFieldBridge(manager,cmpFieldMetaData));
    }
    JDBCFieldBridge[] pkFields=entity.getPrimaryKeyFields();
    for (int i=0; i < pkFields.length; ++i) {
      Object fkField=pkFieldsToFKFields.get(pkFields[i]);
      if (fkField == null) {
        throw new RuntimeException("Primary key " + pkFields[i].getFieldName() + " is not mapped.");
      }
      keyFieldsList.add(fkField);
    }
    tableKeyFields=(JDBCCMP2xFieldBridge[])keyFieldsList.toArray(new JDBCCMP2xFieldBridge[keyFieldsList.size()]);
    dataSource=manager.getDataSource(metadata.getRelationMetaData().getDataSourceName());
  }
 else {
    initializeForeignKeyFields();
    dataSource=hasForeignKey() ? entity.getDataSource() : relatedEntity.getDataSource();
  }
  qualifiedTableName=SQLUtil.fixTableName(metadata.getRelationMetaData().getDefaultTableName(),dataSource);
  tableName=SQLUtil.getTableNameWithoutSchema(qualifiedTableName);
  relationManager=relatedCMRField.initRelationManager(this);
}
