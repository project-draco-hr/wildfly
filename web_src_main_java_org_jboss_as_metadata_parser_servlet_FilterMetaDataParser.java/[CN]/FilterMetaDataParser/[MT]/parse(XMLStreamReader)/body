{
  FilterMetaData filter=new FilterMetaData();
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    final String value=reader.getAttributeValue(i);
    if (reader.getAttributeNamespace(i) != null) {
      continue;
    }
    final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case ID:
{
        filter.setId(value);
        break;
      }
default :
    throw unexpectedAttribute(reader,i);
}
}
DescriptionGroupMetaData descriptionGroup=new DescriptionGroupMetaData();
while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
if (DescriptionGroupMetaDataParser.parse(reader,descriptionGroup)) {
  if (filter.getDescriptionGroup() == null) {
    filter.setDescriptionGroup(descriptionGroup);
  }
  continue;
}
final Element element=Element.forName(reader.getLocalName());
switch (element) {
case FILTER_NAME:
  filter.setFilterName(reader.getElementText());
break;
case FILTER_CLASS:
filter.setFilterClass(reader.getElementText());
break;
case ASYNC_SUPPORTED:
if (Boolean.TRUE.equals(Boolean.valueOf(reader.getElementText()))) {
filter.setAsyncSupported(true);
}
 else {
filter.setAsyncSupported(false);
}
break;
case INIT_PARAM:
List<ParamValueMetaData> initParams=filter.getInitParam();
if (initParams == null) {
initParams=new ArrayList<ParamValueMetaData>();
filter.setInitParam(initParams);
}
initParams.add(ParamValueMetaDataParser.parse(reader));
break;
default :
throw unexpectedElement(reader);
}
}
return filter;
}
