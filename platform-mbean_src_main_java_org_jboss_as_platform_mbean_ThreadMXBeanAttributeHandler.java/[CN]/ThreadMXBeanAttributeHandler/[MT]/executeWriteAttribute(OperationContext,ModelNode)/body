{
  final String name=operation.require(ModelDescriptionConstants.NAME).asString();
  try {
    if (PlatformMBeanConstants.THREAD_CONTENTION_MONITORING_ENABLED.equals(name)) {
      enabledValidator.validate(operation);
      ManagementFactory.getThreadMXBean().setThreadContentionMonitoringEnabled(operation.require(ModelDescriptionConstants.VALUE).asBoolean());
    }
 else     if (PlatformMBeanConstants.THREAD_CPU_TIME_ENABLED.equals(name)) {
      enabledValidator.validate(operation);
      ManagementFactory.getThreadMXBean().setThreadCpuTimeEnabled(operation.require(ModelDescriptionConstants.VALUE).asBoolean());
    }
 else     if (PlatformMBeanConstants.THREADING_READ_WRITE_ATTRIBUTES.contains(name)) {
      throw PlatformMBeanMessages.MESSAGES.badWriteAttributeImpl4(name);
    }
 else {
      throw unknownAttribute(operation);
    }
  }
 catch (  SecurityException e) {
    throw new OperationFailedException(new ModelNode().set(e.toString()));
  }
catch (  UnsupportedOperationException e) {
    throw new OperationFailedException(new ModelNode().set(e.toString()));
  }
}
