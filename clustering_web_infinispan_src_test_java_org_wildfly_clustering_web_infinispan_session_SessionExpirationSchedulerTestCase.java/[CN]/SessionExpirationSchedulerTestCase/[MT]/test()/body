{
  Batcher batcher=mock(Batcher.class);
  Remover<String> remover=mock(Remover.class);
  ImmutableSession immortalSession=mock(ImmutableSession.class);
  ImmutableSession expiringSession=mock(ImmutableSession.class);
  ImmutableSession canceledSession=mock(ImmutableSession.class);
  SessionMetaData immortalMetaData=mock(SessionMetaData.class);
  SessionMetaData shortTimeoutMetaData=mock(SessionMetaData.class);
  SessionMetaData longTimeoutMetaData=mock(SessionMetaData.class);
  String expiringSessionId="expiring";
  String canceledSessionId="canceled";
  when(batcher.startBatch()).thenReturn(true);
  when(immortalSession.isValid()).thenReturn(true);
  when(expiringSession.isValid()).thenReturn(true);
  when(canceledSession.isValid()).thenReturn(true);
  when(immortalSession.getMetaData()).thenReturn(immortalMetaData);
  when(expiringSession.getMetaData()).thenReturn(shortTimeoutMetaData);
  when(canceledSession.getMetaData()).thenReturn(longTimeoutMetaData);
  when(immortalMetaData.getMaxInactiveInterval(TimeUnit.MILLISECONDS)).thenReturn(0L);
  when(shortTimeoutMetaData.getMaxInactiveInterval(TimeUnit.MILLISECONDS)).thenReturn(1L);
  when(longTimeoutMetaData.getMaxInactiveInterval(TimeUnit.MILLISECONDS)).thenReturn(10000L);
  when(expiringSession.getId()).thenReturn(expiringSessionId);
  when(canceledSession.getId()).thenReturn(canceledSessionId);
  try (Scheduler<ImmutableSession> scheduler=new SessionExpirationScheduler(batcher,remover)){
    scheduler.schedule(immortalSession);
    scheduler.schedule(canceledSession);
    scheduler.schedule(expiringSession);
    Thread.sleep(1000);
    scheduler.cancel(canceledSession);
    scheduler.schedule(canceledSession);
  }
   verify(remover).remove(expiringSessionId);
  verify(remover,never()).remove(canceledSessionId);
  verify(batcher).endBatch(true);
}
