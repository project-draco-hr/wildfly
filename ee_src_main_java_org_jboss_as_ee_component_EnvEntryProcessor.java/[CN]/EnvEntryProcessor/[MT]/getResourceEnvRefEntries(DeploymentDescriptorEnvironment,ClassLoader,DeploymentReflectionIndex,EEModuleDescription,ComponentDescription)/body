{
  List<BindingConfiguration> bindings=new ArrayList<BindingConfiguration>();
  final ResourceEnvironmentReferencesMetaData entries=environment.getEnvironment().getResourceEnvironmentReferences();
  if (entries == null) {
    return bindings;
  }
  for (  ResourceEnvironmentReferenceMetaData envEntry : entries) {
    final String name;
    if (envEntry.getName().startsWith("java:")) {
      name=envEntry.getName();
    }
 else {
      name=environment.getDefaultContext() + envEntry.getName();
    }
    Class<?> classType=null;
    if (envEntry.getType() != null) {
      try {
        classType=classLoader.loadClass(envEntry.getType());
      }
 catch (      ClassNotFoundException e) {
        throw new DeploymentUnitProcessingException("Could not load " + envEntry.getType() + " referenced in env-entry ",e);
      }
    }
    LookupInjectionSource injectionSource=new LookupInjectionSource(name);
    classType=processInjectionTargets(moduleDescription,injectionSource,classLoader,deploymentReflectionIndex,envEntry,classType);
    BindingConfiguration bindingConfiguration=null;
    if (!isEmpty(envEntry.getLookupName())) {
      bindingConfiguration=new BindingConfiguration(name,new LookupInjectionSource(envEntry.getLookupName()));
    }
 else {
      throw new RuntimeException("res-env-ref without a lookup-name isn't yet supported");
    }
    bindings.add(bindingConfiguration);
  }
  return bindings;
}
