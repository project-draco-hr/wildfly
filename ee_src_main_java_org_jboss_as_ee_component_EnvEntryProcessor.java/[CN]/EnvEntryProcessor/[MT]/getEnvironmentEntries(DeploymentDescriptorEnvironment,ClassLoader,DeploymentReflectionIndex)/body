{
  List<BindingDescription> bindings=new ArrayList<BindingDescription>();
  final EnvironmentEntriesMetaData entries=environment.getEnvironment().getEnvironmentEntries();
  if (entries == null) {
    return bindings;
  }
  for (  EnvironmentEntryMetaData envEntry : entries) {
    final String name;
    if (envEntry.getName().startsWith("java:")) {
      name=envEntry.getName();
    }
 else {
      name=environment.getDefaultContext() + envEntry.getEnvEntryName();
    }
    BindingDescription description=new BindingDescription(name);
    Class<?> classType=null;
    if (envEntry.getType() != null) {
      try {
        classType=classLoader.loadClass(envEntry.getType());
      }
 catch (      ClassNotFoundException e) {
        throw new DeploymentUnitProcessingException("Could not load " + envEntry.getType() + " referenced in env-entry ",e);
      }
    }
    description.setDependency(true);
    classType=processInjectionTargets(classLoader,deploymentReflectionIndex,envEntry,description,classType);
    if (classType == null) {
      throw new DeploymentUnitProcessingException("Could not determine type for <env-entry> " + name + " please specify the <env-entry-type>. Component");
    }
    final String value=envEntry.getValue();
    if (isEmpty(value)) {
      continue;
    }
    final String type=classType.getName();
    description.setBindingType(classType.getName());
    if (type.equals(String.class.getName())) {
      description.setReferenceSourceDescription(new EnvEntryInjectionSource(value));
    }
 else     if (type.equals(Integer.class.getName())) {
      description.setReferenceSourceDescription(new EnvEntryInjectionSource(Integer.valueOf(value)));
    }
 else     if (type.equals(Short.class.getName())) {
      description.setReferenceSourceDescription(new EnvEntryInjectionSource(Short.valueOf(value)));
    }
 else     if (type.equals(Long.class.getName())) {
      description.setReferenceSourceDescription(new EnvEntryInjectionSource(Long.valueOf(value)));
    }
 else     if (type.equals(Byte.class.getName())) {
      description.setReferenceSourceDescription(new EnvEntryInjectionSource(Byte.valueOf(value)));
    }
 else     if (type.equals(Double.class.getName())) {
      description.setReferenceSourceDescription(new EnvEntryInjectionSource(Double.valueOf(value)));
    }
 else     if (type.equals(Float.class.getName())) {
      description.setReferenceSourceDescription(new EnvEntryInjectionSource(Float.valueOf(value)));
    }
 else     if (type.equals(Boolean.class.getName())) {
      description.setReferenceSourceDescription(new EnvEntryInjectionSource(Boolean.valueOf(value)));
    }
 else     if (type.equals(Character.class.getName())) {
      if (value.length() != 1) {
        throw new DeploymentUnitProcessingException("env-entry of type java.lang.Character is not exactly one character long " + value);
      }
      description.setReferenceSourceDescription(new EnvEntryInjectionSource(value.charAt(0)));
    }
 else     if (type.equals(Class.class.getName())) {
      try {
        description.setReferenceSourceDescription(new EnvEntryInjectionSource(classLoader.loadClass(value)));
      }
 catch (      ClassNotFoundException e) {
        throw new DeploymentUnitProcessingException("Could not load class " + value + " specified in env-entry");
      }
    }
 else     if (classType.isEnum() || (classType.getEnclosingClass() != null && classType.getEnclosingClass().isEnum())) {
      description.setReferenceSourceDescription(new EnvEntryInjectionSource(Enum.valueOf((Class)classType,value)));
    }
 else {
      throw new DeploymentUnitProcessingException("Unkown env-entry type " + type);
    }
    bindings.add(description);
  }
  return bindings;
}
