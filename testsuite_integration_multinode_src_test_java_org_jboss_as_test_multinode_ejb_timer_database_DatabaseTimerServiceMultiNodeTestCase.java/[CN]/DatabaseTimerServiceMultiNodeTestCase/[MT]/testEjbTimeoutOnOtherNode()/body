{
  Context clientContext=getRemoteContext(clientClient);
  try {
    RemoteTimedBean clientBean=(RemoteTimedBean)clientContext.lookup(ARCHIVE_NAME + "/" + TimedObjectTimerServiceBean.class.getSimpleName()+ "!"+ RemoteTimedBean.class.getName());
    Set<String> names=new HashSet<>();
    long time=System.currentTimeMillis() + TIMER_DELAY;
    for (int i=0; i < TIMER_COUNT; ++i) {
      String name="timer" + i;
      clientBean.scheduleTimer(time,name);
      names.add(name);
    }
    final Context remoteContext=getRemoteContext(serverClient);
    try {
      Collector serverBean=(Collector)remoteContext.lookup(ARCHIVE_NAME + "/" + CollectionSingleton.class.getSimpleName()+ "!"+ Collector.class.getName());
      List<TimerData> res=serverBean.collect(TIMER_COUNT);
      Assert.assertEquals("Expected " + TIMER_COUNT + " was "+ res.size()+ " "+ res,TIMER_COUNT,res.size());
      boolean server=false;
      boolean client=false;
      final Set<String> newNames=new HashSet<>(names);
      for (      TimerData r : res) {
        if (!newNames.remove(r.getInfo())) {
          if (!names.contains(r.getInfo())) {
            throw new RuntimeException("Timer " + r.getInfo() + " not run "+ res);
          }
 else {
            throw new RuntimeException("Timer " + r.getInfo() + " run twice "+ res);
          }
        }
        if (r.getNode().equals("client")) {
          client=true;
        }
 else         if (r.getNode().equals("server")) {
          server=true;
        }
      }
      Assert.assertTrue(client);
      Assert.assertTrue(server);
    }
  finally {
      remoteContext.close();
    }
  }
  finally {
    clientContext.close();
  }
}
