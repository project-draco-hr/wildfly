{
  final RuntimeAnnotationInformation<String[]> data=MethodAnnotationAggregator.runtimeAnnotationInformation(componentClass,applicationClasses,deploymentReflectionIndex,RolesAllowed.class);
  for (  Map.Entry<String,List<String[]>> entry : data.getClassAnnotations().entrySet()) {
    description.setRolesAllowedOnAllViewsForClass(entry.getKey(),new HashSet<String>(Arrays.<String>asList(entry.getValue().get(0))));
  }
  for (  Map.Entry<Method,List<String[]>> entry : data.getMethodAnnotations().entrySet()) {
    EJBMethodIdentifier identifier=EJBMethodIdentifier.fromMethod(entry.getKey());
    description.setRolesAllowedOnAllViewsForMethod(identifier,new HashSet<String>(Arrays.<String>asList(entry.getValue().get(0))));
  }
  final RuntimeAnnotationInformation<Boolean> denyData=MethodAnnotationAggregator.runtimeAnnotationInformation(componentClass,applicationClasses,deploymentReflectionIndex,DenyAll.class);
  for (  Map.Entry<String,List<Boolean>> entry : denyData.getClassAnnotations().entrySet()) {
    description.applyDenyAllOnAllViewsForClass(entry.getKey());
  }
  for (  Map.Entry<Method,List<Boolean>> entry : denyData.getMethodAnnotations().entrySet()) {
    EJBMethodIdentifier identifier=EJBMethodIdentifier.fromMethod(entry.getKey());
    description.applyDenyAllOnAllViewsForMethod(identifier);
  }
  final RuntimeAnnotationInformation<Boolean> permitData=MethodAnnotationAggregator.runtimeAnnotationInformation(componentClass,applicationClasses,deploymentReflectionIndex,PermitAll.class);
  for (  Map.Entry<String,List<Boolean>> entry : permitData.getClassAnnotations().entrySet()) {
    description.applyPermitAllOnAllViewsForClass(entry.getKey());
  }
  for (  Map.Entry<Method,List<Boolean>> entry : permitData.getMethodAnnotations().entrySet()) {
    EJBMethodIdentifier identifier=EJBMethodIdentifier.fromMethod(entry.getKey());
    description.applyPermitAllOnAllViewsForMethod(identifier);
  }
}
