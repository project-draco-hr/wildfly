{
  final ExcludeListMetaData excludeList=assemblyDescriptor.getExcludeListByEjbName(description.getEJBName());
  if (excludeList == null) {
    return;
  }
  final MethodsMetaData methods=excludeList.getMethods();
  if (methods == null || methods.isEmpty()) {
    return;
  }
  for (  final MethodMetaData denyAllMethod : methods) {
    final String methodName=denyAllMethod.getMethodName();
    final MethodIntf methodIntf=this.getMethodIntf(denyAllMethod.getMethodIntf());
    if (methodName.equals("*")) {
      if (methodIntf == null) {
        description.applyDenyAllOnAllMethodsOfAllViews();
      }
 else {
        description.applyDenyAllOnAllMethodsOfViewType(methodIntf);
      }
    }
 else {
      final MethodParametersMetaData methodParams=denyAllMethod.getMethodParams();
      if (methodParams == null || methodParams.isEmpty()) {
        final Collection<Method> denyAllApplicableMethods=ClassReflectionIndexUtil.findAllMethodsByName(deploymentReflectionIndex,classReflectionIndex,methodName);
        if (denyAllApplicableMethods.isEmpty()) {
          ROOT_LOGGER.noMethodFoundOnEjbExcludeList(methodName,description.getEJBName());
          continue;
        }
        this.applyDenyAll(description,methodIntf,denyAllApplicableMethods);
      }
 else {
        final String[] paramTypes=methodParams.toArray(new String[methodParams.size()]);
        final Collection<Method> denyAllApplicableMethods=ClassReflectionIndexUtil.findMethods(deploymentReflectionIndex,classReflectionIndex,methodName,paramTypes);
        if (denyAllApplicableMethods.isEmpty()) {
          ROOT_LOGGER.noMethodFoundOnEjbWithParamExcludeList(methodName,Arrays.toString(paramTypes),description.getEJBName());
          continue;
        }
        this.applyDenyAll(description,methodIntf,denyAllApplicableMethods);
      }
    }
  }
}
