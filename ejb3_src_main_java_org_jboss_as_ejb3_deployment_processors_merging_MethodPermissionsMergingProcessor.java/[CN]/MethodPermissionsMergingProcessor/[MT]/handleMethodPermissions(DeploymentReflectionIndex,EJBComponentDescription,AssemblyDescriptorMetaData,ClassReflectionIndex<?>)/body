{
  final MethodPermissionsMetaData methodPermissions=assemblyDescriptor.getMethodPermissionsByEjbName(description.getEJBName());
  if (methodPermissions == null || methodPermissions.isEmpty()) {
    return;
  }
  for (  final MethodPermissionMetaData methodPermission : methodPermissions) {
    final MethodsMetaData methods=methodPermission.getMethods();
    if (methods == null || methods.isEmpty()) {
      continue;
    }
    if (methodPermission.isNotChecked()) {
      continue;
    }
    final Set<String> securityRoles=methodPermission.getRoles();
    for (    final MethodMetaData method : methods) {
      final String methodName=method.getMethodName();
      final MethodIntf methodIntf=this.getMethodIntf(method.getMethodIntf());
      if (methodName.equals("*")) {
        if (methodIntf == null) {
          description.setRolesAllowedForAllMethodsOfAllViews(securityRoles);
        }
 else {
          description.setRolesAllowedForAllMethodsOnViewType(methodIntf,securityRoles);
        }
      }
 else {
        final MethodParametersMetaData methodParams=method.getMethodParams();
        if (methodParams == null || methodParams.isEmpty()) {
          final Collection<Method> applicableMethods=ClassReflectionIndexUtil.findAllMethodsByName(deploymentReflectionIndex,classReflectionIndex,methodName);
          if (applicableMethods.isEmpty()) {
            ROOT_LOGGER.noMethodFoundOnEjbPermission(methodName,description.getEJBName());
            continue;
          }
          this.setRolesAllowed(description,methodIntf,applicableMethods,securityRoles);
        }
 else {
          final String[] paramTypes=methodParams.toArray(new String[methodParams.size()]);
          final Collection<Method> applicableMethods=ClassReflectionIndexUtil.findMethods(deploymentReflectionIndex,classReflectionIndex,methodName,paramTypes);
          if (applicableMethods.isEmpty()) {
            ROOT_LOGGER.noMethodFoundWithParamOnEjbMethodPermission(methodName,Arrays.toString(paramTypes),description.getEJBName());
            continue;
          }
          this.setRolesAllowed(description,methodIntf,applicableMethods,securityRoles);
        }
      }
    }
  }
}
