{
  if (configurationPersister == null) {
    throw MESSAGES.persisterNotInjected();
  }
  final ServiceController<?> serviceController=context.getController();
  final ServiceContainer container=serviceController.getServiceContainer();
  final ServiceTarget target=context.getChildTarget();
  final ExecutorService executorService=injectedExecutorService.getOptionalValue();
  ManagementResourceRegistration rootResourceRegistration=rootDescriptionProvider != null ? ManagementResourceRegistration.Factory.create(rootDescriptionProvider) : ManagementResourceRegistration.Factory.create(rootResourceDefinition);
  final ModelControllerImpl controller=new ModelControllerImpl(container,target,rootResourceRegistration,new ContainerStateMonitor(container,serviceController),configurationPersister,processType,runningModeControl,prepareStep,processState,executorService,expressionResolver);
  initModel(controller.getRootResource(),controller.getRootRegistration());
  this.controller=controller;
  final long bootStackSize=getBootStackSize();
  final Thread bootThread=new Thread(null,new Runnable(){
    public void run(){
      try {
        try {
          boot(new BootContext(){
            public ServiceTarget getServiceTarget(){
              return target;
            }
          }
);
        }
  finally {
          processState.setRunning();
        }
      }
 catch (      Throwable t) {
        container.shutdown();
        if (t instanceof StackOverflowError) {
          ROOT_LOGGER.errorBootingContainer(t,bootStackSize,BOOT_STACK_SIZE_PROPERTY);
        }
 else {
          ROOT_LOGGER.errorBootingContainer(t);
        }
      }
    }
  }
,"Controller Boot Thread",bootStackSize);
  bootThread.start();
}
