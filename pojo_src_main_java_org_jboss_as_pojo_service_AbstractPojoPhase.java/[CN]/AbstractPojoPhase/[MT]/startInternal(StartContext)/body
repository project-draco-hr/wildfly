{
  try {
    executeInstalls();
    if (getLifecycleState().isAfter(BeanState.DESCRIBED)) {
      addCallbacks(true);
      addCallbacks(false);
      ServiceRegistry registry=context.getController().getServiceContainer();
      InstancesService.addInstance(registry,context.getChildTarget(),getLifecycleState(),getBean());
    }
    final AbstractPojoPhase nextPhase=createNextPhase();
    if (nextPhase != null) {
      final BeanState state=getLifecycleState();
      final BeanState next=state.next();
      final BeanMetaDataConfig beanConfig=getBeanConfig();
      final ServiceName name=BeanMetaDataConfig.toBeanName(beanConfig.getName(),next);
      final ServiceTarget serviceTarget=context.getChildTarget();
      final ServiceBuilder serviceBuilder=serviceTarget.addService(name,nextPhase);
      registerAliases(serviceBuilder,next);
      final ConfigVisitor visitor=new DefaultConfigVisitor(serviceBuilder,state,getModule(),getIndex(),getBeanInfo());
      beanConfig.visit(visitor);
      nextPhase.setModule(getModule());
      nextPhase.setBeanConfig(getBeanConfig());
      nextPhase.setIndex(getIndex());
      nextPhase.setBeanInfo(getBeanInfo());
      nextPhase.setBean(getBean());
      serviceBuilder.install();
    }
  }
 catch (  Throwable t) {
    throw new StartException(t);
  }
}
