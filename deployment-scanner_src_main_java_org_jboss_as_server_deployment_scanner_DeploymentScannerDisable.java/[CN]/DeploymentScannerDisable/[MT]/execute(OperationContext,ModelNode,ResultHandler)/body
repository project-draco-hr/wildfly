{
  final PathAddress address=PathAddress.pathAddress(operation.require(OP_ADDR));
  final String name=address.getLastElement().getValue();
  final ModelNode compensatingOperation=new ModelNode();
  compensatingOperation.get(OP).set("enable");
  compensatingOperation.get(OP_ADDR).set(operation.require(OP_ADDR));
  context.getSubModel().get(CommonAttributes.SCAN_ENABLED).set(false);
  if (context instanceof RuntimeOperationContext) {
    RuntimeOperationContext.class.cast(context).executeRuntimeTask(new RuntimeTask(){
      public void execute(      RuntimeTaskContext context,      ResultHandler resultHandler) throws OperationFailedException {
        final ServiceController<?> controller=context.getServiceRegistry().getService(DeploymentScannerService.getServiceName(name));
        if (controller == null) {
          throw new OperationFailedException(new ModelNode().set("scanner not configured"));
        }
 else {
          try {
            final DeploymentScanner scanner=(DeploymentScanner)controller.getValue();
            scanner.stopScanner();
            resultHandler.handleResultComplete();
          }
 catch (          Throwable t) {
            throw new OperationFailedException(getFailureResult(t));
          }
        }
      }
    }
,resultHandler);
  }
 else {
    resultHandler.handleResultComplete();
  }
  return new BasicOperationResult(compensatingOperation);
}
