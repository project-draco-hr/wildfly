{
  HashSet<Role> securityRoles=new HashSet<Role>();
  Pair<String,Set<Role>> securityMatch=new Pair<String,Set<Role>>(match,securityRoles);
  ArrayList<String> send=new ArrayList<String>();
  ArrayList<String> consume=new ArrayList<String>();
  ArrayList<String> createDurableQueue=new ArrayList<String>();
  ArrayList<String> deleteDurableQueue=new ArrayList<String>();
  ArrayList<String> createNonDurableQueue=new ArrayList<String>();
  ArrayList<String> deleteNonDurableQueue=new ArrayList<String>();
  ArrayList<String> manageRoles=new ArrayList<String>();
  ArrayList<String> allRoles=new ArrayList<String>();
  int tag=reader.getEventType();
  String localName=null;
  do {
    tag=reader.nextTag();
    localName=reader.getLocalName();
    if (localName.equals(Element.PERMISSION_ELEMENT_NAME.getLocalName()) == false)     break;
    final Element element=Element.forName(reader.getLocalName());
    List<String> roles=null;
    String type=null;
    final int count=reader.getAttributeCount();
    for (int i=0; i < count; i++) {
      if (reader.getAttributeNamespace(i) != null) {
        throw unexpectedAttribute(reader,i);
      }
 else {
        final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case ROLES_ATTR_NAME:
          roles=reader.getListAttributeValue(i);
        break;
case TYPE_ATTR_NAME:
      type=reader.getAttributeValue(i);
    break;
default :
  throw unexpectedAttribute(reader,i);
}
}
}
for (String role : roles) {
if (Attribute.SEND_NAME.getLocalName().equals(type)) {
send.add(role.trim());
}
 else if (Attribute.CONSUME_NAME.getLocalName().equals(type)) {
consume.add(role.trim());
}
 else if (Attribute.CREATEDURABLEQUEUE_NAME.getLocalName().equals(type)) {
createDurableQueue.add(role);
}
 else if (Attribute.DELETEDURABLEQUEUE_NAME.getLocalName().equals(type)) {
deleteDurableQueue.add(role);
}
 else if (Attribute.CREATE_NON_DURABLE_QUEUE_NAME.getLocalName().equals(type)) {
createNonDurableQueue.add(role);
}
 else if (Attribute.DELETE_NON_DURABLE_QUEUE_NAME.getLocalName().equals(type)) {
deleteNonDurableQueue.add(role);
}
 else if (Attribute.CREATETEMPQUEUE_NAME.getLocalName().equals(type)) {
createNonDurableQueue.add(role);
}
 else if (Attribute.DELETETEMPQUEUE_NAME.getLocalName().equals(type)) {
deleteNonDurableQueue.add(role);
}
 else if (Attribute.MANAGE_NAME.getLocalName().equals(type)) {
manageRoles.add(role);
}
if (!allRoles.contains(role.trim())) {
allRoles.add(role.trim());
}
}
reader.discardRemainder();
}
 while (reader.hasNext());
for (String role : allRoles) {
securityRoles.add(new Role(role,send.contains(role),consume.contains(role),createDurableQueue.contains(role),deleteDurableQueue.contains(role),createNonDurableQueue.contains(role),deleteNonDurableQueue.contains(role),manageRoles.contains(role)));
}
return securityMatch;
}
