{
synchronized (existingResourceDescriptionResolver) {
    final EntityManagerFactoryLookup entityManagerFactoryLookup=new EntityManagerFactoryLookup();
    final Statistics statistics=managementAdaptor.getStatistics();
    if (false == existingResourceDescriptionResolver.contains(managementAdaptor.getVersion())) {
      ResourceDescriptionResolver resourceDescriptionResolver=new StandardResourceDescriptionResolver(statistics.getResourceBundleKeyPrefix(),statistics.getResourceBundleName(),statistics.getClass().getClassLoader()){
        private ResourceDescriptionResolver fallback=JPAExtension.getResourceDescriptionResolver();
        @Override public String getResourceAttributeDescription(        String attributeName,        Locale locale,        ResourceBundle bundle){
          if (bundle.containsKey(getBundleKey(attributeName))) {
            return super.getResourceAttributeDescription(attributeName,locale,bundle);
          }
 else {
            return fallback.getResourceAttributeDescription(attributeName,locale,fallback.getResourceBundle(locale));
          }
        }
      }
;
      PathElement subsystemPE=PathElement.pathElement(ModelDescriptionConstants.SUBSYSTEM,JPAExtension.SUBSYSTEM_NAME);
      ManagementResourceRegistration deploymentResourceRegistration=deploymentUnit.getAttachment(DeploymentModelUtils.MUTABLE_REGISTRATION_ATTACHMENT);
      ManagementResourceRegistration deploymentSubsystemRegistration=deploymentResourceRegistration.getSubModel(PathAddress.pathAddress(subsystemPE));
      ManagementResourceRegistration subdeploymentSubsystemRegistration=deploymentResourceRegistration.getSubModel(PathAddress.pathAddress(PathElement.pathElement(ModelDescriptionConstants.SUBDEPLOYMENT),subsystemPE));
      ManagementResourceRegistration providerResource=deploymentSubsystemRegistration.registerSubModel(new ManagementResourceDefinition(PathElement.pathElement(managementAdaptor.getIdentificationLabel()),resourceDescriptionResolver,statistics,entityManagerFactoryLookup));
      providerResource.registerReadOnlyAttribute(PersistenceUnitServiceHandler.SCOPED_UNIT_NAME,null);
      providerResource=subdeploymentSubsystemRegistration.registerSubModel(new ManagementResourceDefinition(PathElement.pathElement(managementAdaptor.getIdentificationLabel()),resourceDescriptionResolver,statistics,entityManagerFactoryLookup));
      providerResource.registerReadOnlyAttribute(PersistenceUnitServiceHandler.SCOPED_UNIT_NAME,null);
      existingResourceDescriptionResolver.add(managementAdaptor.getVersion());
    }
    return new DynamicManagementStatisticsResource(statistics,scopedPersistenceUnitName,managementAdaptor.getIdentificationLabel(),entityManagerFactoryLookup);
  }
}
