{
  KernelServicesBuilder builder=createKernelServicesBuilder(AdditionalInitialization.MANAGEMENT).setSubsystemXmlResource("empty_subsystem_1_3.xml");
  builder.createLegacyKernelServicesBuilder(createAdditionalInitialization(),VERSION_1_1_0).addMavenResourceURL("org.hornetq:hornetq-core:2.2.16.Final").addMavenResourceURL("org.hornetq:hornetq-jms:2.2.16.Final").addMavenResourceURL("org.hornetq:hornetq-ra:2.2.16.Final").addMavenResourceURL("org.jboss.as:jboss-as-messaging:7.1.2.Final").addMavenResourceURL("org.jboss.as:jboss-as-controller:7.1.2.Final").addParentFirstClassPattern("org.jboss.as.controller.*");
  KernelServices mainServices=builder.build();
  assertTrue(mainServices.isSuccessfulBoot());
  KernelServices legacyServices=mainServices.getLegacyServices(VERSION_1_1_0);
  assertNotNull(legacyServices);
  assertTrue(legacyServices.isSuccessfulBoot());
  PathAddress subsystemAddress=PathAddress.pathAddress(pathElement(SUBSYSTEM,MessagingExtension.SUBSYSTEM_NAME));
  List<ModelNode> modelNodes=builder.parseXmlResource("subsystem_incompatible_1_3.xml");
  modelNodes.remove(0);
  checkFailedTransformedBootOperations(mainServices,VERSION_1_1_0,modelNodes,new FailedOperationTransformationConfig().addFailedAttribute(subsystemAddress.append(HORNETQ_SERVER_PATH),new RejectExpressionsConfig(HornetQServerResourceDefinition.REJECTED_EXPRESSION_ATTRIBUTES)).addFailedAttribute(subsystemAddress.append(HORNETQ_SERVER_PATH).append(pathElement(ModelDescriptionConstants.PATH)),new RejectExpressionsConfig(ModelDescriptionConstants.PATH)).addFailedAttribute(subsystemAddress.append(HORNETQ_SERVER_PATH).append(pathElement(CommonAttributes.IN_VM_CONNECTOR)),new RejectExpressionsConfig(InVMTransportDefinition.SERVER_ID)).addFailedAttribute(subsystemAddress.append(HORNETQ_SERVER_PATH).append(pathElement(CommonAttributes.CONNECTOR)),new RejectExpressionsConfig(CommonAttributes.FACTORY_CLASS)).addFailedAttribute(subsystemAddress.append(HORNETQ_SERVER_PATH).append(pathElement(CommonAttributes.IN_VM_ACCEPTOR)),new RejectExpressionsConfig(InVMTransportDefinition.SERVER_ID)).addFailedAttribute(subsystemAddress.append(HORNETQ_SERVER_PATH).append(pathElement(CommonAttributes.ACCEPTOR)),new RejectExpressionsConfig(CommonAttributes.FACTORY_CLASS)).addFailedAttribute(subsystemAddress.append(HORNETQ_SERVER_PATH).append(BroadcastGroupDefinition.PATH),new RejectExpressionsConfig(BroadcastGroupDefinition.BROADCAST_PERIOD){
    @Override public boolean expectFailed(    ModelNode operation){
      if ("groupT".equals(operation.get(OP_ADDR).get(2).get(CommonAttributes.BROADCAST_GROUP).asString())) {
        return true;
      }
      return super.expectFailed(operation);
    }
  }
).addFailedAttribute(subsystemAddress.append(HORNETQ_SERVER_PATH).append(DiscoveryGroupDefinition.PATH),new RejectExpressionsConfig(DiscoveryGroupDefinition.REFRESH_TIMEOUT,DiscoveryGroupDefinition.INITIAL_WAIT_TIMEOUT){
    @Override public boolean expectFailed(    ModelNode operation){
      if ("groupU".equals(operation.get(OP_ADDR).get(2).get(CommonAttributes.DISCOVERY_GROUP).asString())) {
        return true;
      }
      return super.expectFailed(operation);
    }
  }
).addFailedAttribute(subsystemAddress.append(HORNETQ_SERVER_PATH).append(DivertDefinition.PATH),new RejectExpressionsConfig(DivertDefinition.REJECTED_EXPRESSION_ATTRIBUTES)).addFailedAttribute(subsystemAddress.append(HORNETQ_SERVER_PATH).append(QueueDefinition.PATH),new RejectExpressionsConfig(QueueDefinition.REJECTED_EXPRESSION_ATTRIBUTES)).addFailedAttribute(subsystemAddress.append(HORNETQ_SERVER_PATH).append(ClusterConnectionDefinition.PATH),new RejectExpressionsConfig(ClusterConnectionDefinition.REJECTED_EXPRESSION_ATTRIBUTES)).addFailedAttribute(subsystemAddress.append(HORNETQ_SERVER_PATH).append(BridgeDefinition.PATH),new RejectExpressionsConfig(BridgeDefinition.REJECTED_EXPRESSION_ATTRIBUTES)).addFailedAttribute(subsystemAddress.append(HORNETQ_SERVER_PATH).append(GroupingHandlerDefinition.PATH),new RejectExpressionsConfig(GroupingHandlerDefinition.REJECTED_EXPRESSION_ATTRIBUTES)).addFailedAttribute(subsystemAddress.append(HORNETQ_SERVER_PATH).append(AddressSettingDefinition.PATH),new RejectExpressionsConfig(AddressSettingDefinition.REJECTED_EXPRESSION_ATTRIBUTES)).addFailedAttribute(subsystemAddress.append(HORNETQ_SERVER_PATH).append(ConnectorServiceDefinition.PATH),new RejectExpressionsConfig(CommonAttributes.FACTORY_CLASS)).addFailedAttribute(subsystemAddress.append(HORNETQ_SERVER_PATH).append(ConnectorServiceDefinition.PATH).append(ConnectorServiceParamDefinition.PATH),new RejectExpressionsConfig(ConnectorServiceParamDefinition.VALUE)).addFailedAttribute(subsystemAddress.append(HORNETQ_SERVER_PATH).append(ConnectionFactoryDefinition.PATH),new RejectExpressionsConfig(ConnectionFactoryDefinition.REJECTED_EXPRESSION_ATTRIBUTES).setReadOnly(FACTORY_TYPE)).addFailedAttribute(subsystemAddress.append(HORNETQ_SERVER_PATH).append(PooledConnectionFactoryDefinition.PATH),new RejectExpressionsConfig(PooledConnectionFactoryDefinition.REJECTED_EXPRESSION_ATTRIBUTES)).addFailedAttribute(subsystemAddress.append(HORNETQ_SERVER_PATH).append(JMSQueueDefinition.PATH),new RejectExpressionsConfig(JMSQueueDefinition.REJECTED_EXPRESSION_ATTRIBUTES)).addFailedAttribute(subsystemAddress.append(JMSBridgeDefinition.PATH),new RejectExpressionsConfig(new String[0]){
    @Override public boolean expectFailed(    ModelNode operation){
      return true;
    }
  }
));
}
