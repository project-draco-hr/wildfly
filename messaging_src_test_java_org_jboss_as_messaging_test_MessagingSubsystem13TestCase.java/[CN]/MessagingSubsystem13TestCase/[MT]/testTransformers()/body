{
  String subsystemXml=readResource("subsystem_1_3.xml");
  KernelServicesBuilder builder=createKernelServicesBuilder(createAdditionalInitialization()).setSubsystemXml(subsystemXml);
  ModelVersion version_1_1_0=ModelVersion.create(1,1,0);
  builder.createLegacyKernelServicesBuilder(createAdditionalInitialization(),version_1_1_0).addMavenResourceURL("org.jboss.as:jboss-as-messaging:7.1.2.Final");
  KernelServices mainServices=builder.build();
  KernelServices legacyServices=mainServices.getLegacyServices(version_1_1_0);
  assertNotNull(legacyServices);
  checkSubsystemModelTransformation(mainServices,version_1_1_0);
  ModelNode operation=new ModelNode();
  operation.get(OP).set(WRITE_ATTRIBUTE_OPERATION);
  ModelNode address=new ModelNode();
  address.add(SUBSYSTEM,MessagingExtension.SUBSYSTEM_NAME);
  address.add("hornetq-server","default");
  address.add("path","journal-directory");
  operation.get(OP_ADDR).set(address);
  operation.get(NAME).set("path");
  operation.get(VALUE).set("${my.journal.dir:journal}");
  ModelNode mainResult=mainServices.executeOperation(operation);
  assertEquals(mainResult.toJSONString(true),SUCCESS,mainResult.get(OUTCOME).asString());
  ModelNode successResult=new ModelNode();
  successResult.get(OUTCOME).set(SUCCESS);
  successResult.protect();
  ModelNode failedResult=new ModelNode();
  failedResult.get(OUTCOME).set(FAILED);
  failedResult.protect();
  ModelNode ignoreResult=new ModelNode();
  ignoreResult.get(OUTCOME).set(IGNORED);
  ignoreResult.protect();
  final OperationTransformer.TransformedOperation op=mainServices.transformOperation(version_1_1_0,operation);
  final ModelNode result=mainServices.executeOperation(version_1_1_0,op);
  Assert.assertEquals("should reject the expression",FAILED,result.get(OUTCOME).asString());
  operation=new ModelNode();
  operation.get(OP).set(WRITE_ATTRIBUTE_OPERATION);
  address=new ModelNode();
  address.add(SUBSYSTEM,MessagingExtension.SUBSYSTEM_NAME);
  address.add(HORNETQ_SERVER,"default");
  address.add(POOLED_CONNECTION_FACTORY,"hornetq-ra-local");
  operation.get(OP_ADDR).set(address);
  operation.get(NAME).set("use-auto-recovery");
  operation.get(VALUE).set("false");
  mainResult=mainServices.executeOperation(operation);
  assertEquals(mainResult.toJSONString(true),SUCCESS,mainResult.get(OUTCOME).asString());
  TransformedOperation transformedOperation=mainServices.transformOperation(version_1_1_0,operation);
  ModelNode transformedResult=transformedOperation.getResultTransformer().transformResult(successResult);
  assertEquals("success transformed to failed",FAILED,transformedResult.get(OUTCOME).asString());
  transformedResult=transformedOperation.getResultTransformer().transformResult(successResult);
  assertEquals("failed transformed to failed",FAILED,transformedResult.get(OUTCOME).asString());
  assertTrue("failed transformed with failure description",transformedResult.hasDefined(FAILURE_DESCRIPTION));
  transformedResult=transformedOperation.getResultTransformer().transformResult(ignoreResult);
  assertEquals("ignored result untransformed",IGNORED,transformedResult.get(OUTCOME).asString());
}
