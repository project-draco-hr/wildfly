{
  if (targetController.getState() == targetState)   return;
  final Queue<ServiceController<?>> controllers=new ConcurrentLinkedQueue<ServiceController<?>>(Collections.singleton(targetController));
  final ServiceListener<Object> listener=new AbstractServiceListener<Object>(){
    @Override public void transition(    ServiceController<? extends Object> controller,    Transition transition){
      log.tracef("%s transitioned from %s",controller.getName(),transition);
      if (transition.leavesRestState()) {
        if (controller != targetController) {
          controllers.add(controller);
        }
      }
 else       if (transition.entersRestState()) {
synchronized (controller) {
          controller.notify();
        }
      }
    }
  }
;
  targetController.addListener(ServiceListener.Inheritance.ALL,listener);
  try {
    if (targetController.getSubstate().isRestState()) {
      Mode targetMode=modeToggle.get(targetState).get(targetController.getMode());
      if (targetMode != null) {
        targetController.setMode(targetMode);
      }
    }
    while (!controllers.isEmpty()) {
      ServiceController<?> controller=controllers.remove();
synchronized (controller) {
        if (!controller.getSubstate().isRestState()) {
          controller.wait();
        }
      }
      if (targetState == State.UP) {
        StartException exception=controller.getStartException();
        if (exception != null) {
          throw exception;
        }
      }
    }
  }
 catch (  InterruptedException e) {
    Thread.currentThread().interrupt();
  }
 finally {
    targetController.removeListener(listener);
  }
}
