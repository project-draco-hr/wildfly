{
  String failure=validator.validate(operation);
  if (failure != null) {
    throw new OperationFailedException(new ModelNode().set(failure));
  }
  final String name=Util.getNameFromAddress(operation.require(OP_ADDR));
  ModelNode model=context.getSubModel();
  if (!model.isDefined()) {
    throw new OperationFailedException(notConfigured(name));
  }
  ModelNode oldValue=model.get(CommonAttributes.GROUP_NAME);
  final String newGroupName;
  ModelNode newValue;
  if (operation.hasDefined(VALUE)) {
    newValue=operation.get(VALUE);
    newGroupName=newValue.resolve().asString();
  }
 else {
    newValue=new ModelNode();
    newGroupName=null;
  }
  model.get(CommonAttributes.GROUP_NAME).set(newValue);
  if (context.getRuntimeContext() != null) {
    final ServiceController<?> service=context.getRuntimeContext().getServiceRegistry().getService(ThreadsServices.threadFactoryName(name));
    if (service == null) {
      throw new OperationFailedException(notConfigured(name));
    }
 else {
      final ThreadFactoryService threadFactoryService=(ThreadFactoryService)service.getValue();
      threadFactoryService.setThreadGroupName(newGroupName);
    }
    resultHandler.handleResultComplete();
  }
 else {
    resultHandler.handleResultComplete();
  }
  final ModelNode compensatingOp=operation.clone();
  compensatingOp.get(VALUE).set(oldValue);
  return new BasicOperationResult(compensatingOp);
}
