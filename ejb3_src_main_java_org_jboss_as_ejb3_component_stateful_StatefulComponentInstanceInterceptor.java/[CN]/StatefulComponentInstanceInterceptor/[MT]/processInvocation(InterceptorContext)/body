{
  StatefulSessionComponent component=getComponent(context,StatefulSessionComponent.class);
  SessionID sessionId=context.getPrivateData(SessionID.class);
  if (sessionId == null) {
    throw MESSAGES.statefulSessionIdIsNull(component.getComponentName());
  }
  ROOT_LOGGER.debug("Looking for stateful component instance with session id: " + sessionId);
  StatefulSessionComponentInstance instance=component.getCache().get(sessionId);
  if (instance == null) {
    throw EjbMessages.MESSAGES.couldNotFindEjb(sessionId.toString());
  }
  try {
    context.putPrivateData(ComponentInstance.class,instance);
    return context.proceed();
  }
 catch (  Exception ex) {
    if (component.getApplicationException(ex.getClass(),context.getMethod()) != null) {
      throw ex;
    }
    if (ex instanceof ConcurrentAccessTimeoutException || ex instanceof ConcurrentAccessException) {
      throw ex;
    }
    if (!(ex instanceof RemoveException)) {
      if (ex instanceof RuntimeException || ex instanceof RemoteException) {
        if (ROOT_LOGGER.isTraceEnabled())         ROOT_LOGGER.trace("Removing bean " + sessionId + " because of exception",ex);
        instance.discard();
      }
    }
    throw ex;
  }
catch (  final Error e) {
    if (ROOT_LOGGER.isTraceEnabled())     ROOT_LOGGER.trace("Removing bean " + sessionId + " because of error",e);
    instance.discard();
    throw e;
  }
catch (  final Throwable t) {
    if (ROOT_LOGGER.isTraceEnabled())     ROOT_LOGGER.trace("Removing bean " + sessionId + " because of Throwable",t);
    instance.discard();
    throw new RuntimeException(t);
  }
}
