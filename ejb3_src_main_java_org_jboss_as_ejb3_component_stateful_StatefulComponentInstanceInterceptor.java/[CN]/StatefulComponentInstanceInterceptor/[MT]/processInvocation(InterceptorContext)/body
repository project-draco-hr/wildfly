{
  StatefulSessionComponent component=getComponent(context,StatefulSessionComponent.class);
  Serializable sessionId=this.sessionIdReference.get();
  if (sessionId == null) {
    throw new IllegalStateException("Session id hasn't been set for stateful component: " + component.getComponentName());
  }
  log.debug("Looking for stateful component instance with session id: " + sessionId);
  StatefulSessionComponentInstance instance=component.getCache().get(sessionId);
  try {
    context.putPrivateData(ComponentInstance.class,instance);
    return context.proceed();
  }
 catch (  Exception ex) {
    if (component.getApplicationException(ex.getClass()) != null) {
      throw ex;
    }
    if (ex instanceof ConcurrentAccessTimeoutException || ex instanceof ConcurrentAccessException) {
      throw ex;
    }
    if (ex instanceof RuntimeException || ex instanceof RemoteException) {
      if (log.isTraceEnabled())       log.trace("Removing bean " + sessionId + " because of exception",ex);
      component.getCache().discard(sessionId);
    }
    throw ex;
  }
catch (  final Error e) {
    if (log.isTraceEnabled())     log.trace("Removing bean " + sessionId + " because of error",e);
    component.getCache().discard(sessionId);
    throw e;
  }
catch (  final Throwable t) {
    if (log.isTraceEnabled())     log.trace("Removing bean " + sessionId + " because of Throwable",t);
    component.getCache().discard(sessionId);
    throw new RuntimeException(t);
  }
 finally {
    context.putPrivateData(ComponentInstance.class,null);
  }
}
