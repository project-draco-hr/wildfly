{
  final int attCount=reader.getAttributeCount();
  String name=null;
  String module=null;
  String factory=null;
  final EnumSet<NamingSubsystemXMLAttribute> required=EnumSet.of(NamingSubsystemXMLAttribute.NAME,NamingSubsystemXMLAttribute.MODULE,NamingSubsystemXMLAttribute.CLASS);
  for (int i=0; i < attCount; i++) {
    requireNoNamespaceAttribute(reader,i);
    final String value=reader.getAttributeValue(i);
    final NamingSubsystemXMLAttribute attribute=NamingSubsystemXMLAttribute.forName(reader.getAttributeLocalName(i));
    required.remove(attribute);
switch (attribute) {
case NAME:
      name=value.trim();
    break;
case MODULE:
  module=NamingBindingResourceDefinition.MODULE.parse(value,reader.getLocation()).asString();
break;
case CLASS:
factory=NamingBindingResourceDefinition.CLASS.parse(value,reader.getLocation()).asString();
break;
default :
throw unexpectedAttribute(reader,i);
}
}
if (!required.isEmpty()) {
throw missingRequired(reader,required);
}
requireNoContent(reader);
final ModelNode address=new ModelNode();
address.add(SUBSYSTEM,NamingExtension.SUBSYSTEM_NAME);
address.add(BINDING,name);
final ModelNode bindingAdd=new ModelNode();
bindingAdd.get(OP).set(ADD);
bindingAdd.get(OP_ADDR).set(address);
bindingAdd.get(BINDING_TYPE).set(OBJECT_FACTORY);
bindingAdd.get(MODULE).set(module);
bindingAdd.get(CLASS).set(factory);
operations.add(bindingAdd);
}
