{
  final ModelNode namingSubsystemAdd=new ModelNode();
  namingSubsystemAdd.get(OP).set(ADD);
  namingSubsystemAdd.get(OP_ADDR).add(SUBSYSTEM,NamingExtension.SUBSYSTEM_NAME);
  operations.add(namingSubsystemAdd);
  final ModelNode remoteNamingAdd=new ModelNode();
  remoteNamingAdd.get(OP).set(ADD);
  remoteNamingAdd.get(OP_ADDR).add(SUBSYSTEM,NamingExtension.SUBSYSTEM_NAME);
  remoteNamingAdd.get(OP_ADDR).add(NamingSubsystemModel.SERVICE,NamingSubsystemModel.REMOTE_NAMING);
  operations.add(remoteNamingAdd);
  final EnumSet<NamingSubsystemXMLElement> encountered=EnumSet.noneOf(NamingSubsystemXMLElement.class);
  while (reader.hasNext() && reader.nextTag() != XMLStreamConstants.END_ELEMENT) {
switch (NamingSubsystemNamespace.forUri(reader.getNamespaceURI())) {
case NAMING_1_1:
{
        final NamingSubsystemXMLElement element=NamingSubsystemXMLElement.forName(reader.getLocalName());
        if (!encountered.add(element)) {
          throw unexpectedElement(reader);
        }
switch (element) {
case BINDINGS:
{
            parseBindings(reader,operations);
            break;
          }
default :
{
          throw unexpectedElement(reader);
        }
    }
    break;
  }
default :
{
  throw unexpectedElement(reader);
}
}
}
}
