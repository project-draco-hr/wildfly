{
  final PathAddress address=PathAddress.pathAddress(operation.require(OP_ADDR));
  final String name=address.getLastElement().getValue();
  final ModelNode compensatingOperation=new ModelNode();
  compensatingOperation.get(OP_ADDR).set(operation.require(OP_ADDR));
  compensatingOperation.get(OP).set(REMOVE);
  final String handlerType=operation.require(HANDLER_TYPE).asString();
  final LoggerHandlerType type=LoggerHandlerType.valueOf(handlerType);
  if (type != LoggerHandlerType.CONSOLE_HANDLER) {
    resultHandler.handleFailed(new ModelNode().set("invalid operation for handler-type: " + type));
  }
  if (context instanceof NewRuntimeOperationContext) {
    final NewRuntimeOperationContext runtimeContext=(NewRuntimeOperationContext)context;
    final ServiceTarget serviceTarget=runtimeContext.getServiceTarget();
    try {
      final ConsoleHandlerService service=new ConsoleHandlerService();
      final ServiceBuilder<Handler> serviceBuilder=serviceTarget.addService(LogServices.handlerName(name),service);
      service.setLevel(Level.parse(operation.get(LEVEL).asString()));
      final Boolean autoFlush=operation.get(AUTOFLUSH).asBoolean();
      if (autoFlush != null)       service.setAutoflush(autoFlush.booleanValue());
      if (operation.has(ENCODING))       service.setEncoding(operation.get(ENCODING).asString());
      if (operation.has(FORMATTER))       service.setFormatterSpec(createFormatterSpec(operation));
      serviceBuilder.setInitialMode(ServiceController.Mode.ACTIVE);
      serviceBuilder.install();
    }
 catch (    Throwable t) {
      resultHandler.handleFailed(new ModelNode().set(t.getLocalizedMessage()));
      return Cancellable.NULL;
    }
  }
  final ModelNode subModel=context.getSubModel();
  subModel.get(AUTOFLUSH).set(operation.get(AUTOFLUSH));
  subModel.get(ENCODING).set(operation.get(ENCODING));
  subModel.get(FORMATTER).set(operation.get(FORMATTER));
  subModel.get(HANDLER_TYPE).set(handlerType);
  subModel.get(LEVEL).set(operation.get(LEVEL));
  subModel.get(QUEUE_LENGTH).set(operation.get(QUEUE_LENGTH));
  resultHandler.handleResultComplete(compensatingOperation);
  return Cancellable.NULL;
}
