{
  final ModelNode add=Util.createAddOperation();
  list.add(add);
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    final String value=reader.getAttributeValue(i);
    if (!isNoNamespaceAttribute(reader,i)) {
      throw unexpectedAttribute(reader,i);
    }
    final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case NAME:
{
        add.get(OP_ADDR).set(address).add(ModelDescriptionConstants.SYSLOG_HANDLER,value);
        break;
      }
case MAX_FAILURE_COUNT:
{
      SyslogAuditLogHandlerResourceDefinition.MAX_FAILURE_COUNT.parseAndSetParameter(value,add,reader);
      break;
    }
case FORMATTER:
{
    SyslogAuditLogHandlerResourceDefinition.FORMATTER.parseAndSetParameter(value,add,reader);
    break;
  }
case MAX_LENGTH:
{
  SyslogAuditLogHandlerResourceDefinition.MAX_LENGTH.parseAndSetParameter(value,add,reader);
  break;
}
case TRUNCATE:
{
SyslogAuditLogHandlerResourceDefinition.TRUNCATE.parseAndSetParameter(value,add,reader);
break;
}
case FACILITY:
{
SyslogAuditLogHandlerResourceDefinition.FACILITY.parseAndSetParameter(value,add,reader);
break;
}
case APP_NAME:
{
SyslogAuditLogHandlerResourceDefinition.APP_NAME.parseAndSetParameter(value,add,reader);
break;
}
case SYSLOG_FORMAT:
{
SyslogAuditLogHandlerResourceDefinition.SYSLOG_FORMAT.parseAndSetParameter(value,add,reader);
break;
}
default :
{
throw unexpectedAttribute(reader,i);
}
}
}
if (!add.get(OP_ADDR).isDefined()) {
throw missingRequired(reader,Collections.singleton(Attribute.NAME));
}
boolean protocolSet=false;
while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
requireNamespace(reader,expectedNs);
final Element element=Element.forName(reader.getLocalName());
if (protocolSet) {
throw DomainManagementLogger.ROOT_LOGGER.onlyOneSyslogHandlerProtocol(reader.getLocation());
}
protocolSet=true;
switch (element) {
case UDP:
case TCP:
case TLS:
{
switch (expectedNs) {
case DOMAIN_1_5:
case DOMAIN_2_0:
case DOMAIN_2_1:
parseSyslogAuditLogHandlerProtocol2_0(reader,add.get(OP_ADDR),expectedNs,list,element);
break;
default :
parseSyslogAuditLogHandlerProtocol3_0(reader,add.get(OP_ADDR),expectedNs,list,element);
}
break;
}
default :
throw unexpectedElement(reader);
}
}
}
