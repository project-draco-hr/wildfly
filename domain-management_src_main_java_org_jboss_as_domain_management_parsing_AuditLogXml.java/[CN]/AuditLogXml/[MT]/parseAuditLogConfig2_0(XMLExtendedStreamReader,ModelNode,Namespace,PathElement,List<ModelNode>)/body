{
  requireNamespace(reader,expectedNs);
  final ModelNode configAddress=address.clone().add(pathElement.getKey(),pathElement.getValue());
  final ModelNode add=new ModelNode();
  add.get(OP).set(ADD);
  add.get(OP_ADDR).set(configAddress);
  list.add(add);
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    final String value=reader.getAttributeValue(i);
    if (!isNoNamespaceAttribute(reader,i)) {
      throw unexpectedAttribute(reader,i);
    }
    final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case LOG_READ_ONLY:
{
        AuditLogLoggerResourceDefinition.LOG_READ_ONLY.parseAndSetParameter(value,add,reader);
        break;
      }
case LOG_BOOT:
{
      AuditLogLoggerResourceDefinition.LOG_BOOT.parseAndSetParameter(value,add,reader);
      break;
    }
case ENABLED:
{
    AuditLogLoggerResourceDefinition.ENABLED.parseAndSetParameter(value,add,reader);
    break;
  }
default :
{
  throw unexpectedAttribute(reader,i);
}
}
}
while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
requireNamespace(reader,expectedNs);
final Element element=Element.forName(reader.getLocalName());
switch (element) {
case HANDLERS:
{
parseAuditLogHandlersReference2_0(reader,configAddress,expectedNs,list);
break;
}
default :
throw unexpectedElement(reader);
}
}
}
