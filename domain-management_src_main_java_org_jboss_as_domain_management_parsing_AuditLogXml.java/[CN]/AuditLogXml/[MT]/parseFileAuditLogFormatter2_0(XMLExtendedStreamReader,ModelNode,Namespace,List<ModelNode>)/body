{
  final ModelNode add=Util.createAddOperation();
  list.add(add);
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    final String value=reader.getAttributeValue(i);
    if (!isNoNamespaceAttribute(reader,i)) {
      throw unexpectedAttribute(reader,i);
    }
    final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case NAME:
{
        add.get(OP_ADDR).set(address).add(ModelDescriptionConstants.JSON_FORMATTER,value);
        break;
      }
case COMPACT:
{
      JsonAuditLogFormatterResourceDefinition.COMPACT.parseAndSetParameter(value,add,reader);
      break;
    }
case DATE_FORMAT:
{
    JsonAuditLogFormatterResourceDefinition.DATE_FORMAT.parseAndSetParameter(value,add,reader);
    break;
  }
case DATE_SEPARATOR:
{
  JsonAuditLogFormatterResourceDefinition.DATE_SEPARATOR.parseAndSetParameter(value,add,reader);
  break;
}
case ESCAPE_CONTROL_CHARACTERS:
{
JsonAuditLogFormatterResourceDefinition.ESCAPE_CONTROL_CHARACTERS.parseAndSetParameter(value,add,reader);
break;
}
case ESCAPE_NEW_LINE:
{
JsonAuditLogFormatterResourceDefinition.ESCAPE_NEW_LINE.parseAndSetParameter(value,add,reader);
break;
}
case INCLUDE_DATE:
{
JsonAuditLogFormatterResourceDefinition.INCLUDE_DATE.parseAndSetParameter(value,add,reader);
break;
}
default :
{
throw unexpectedAttribute(reader,i);
}
}
}
requireNoContent(reader);
}
