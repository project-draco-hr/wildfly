{
  writer.writeStartElement(Element.AUDIT_LOG.getLocalName());
  if (auditLog.hasDefined(ModelDescriptionConstants.JSON_FORMATTER) && auditLog.get(ModelDescriptionConstants.JSON_FORMATTER).keys().size() > 0) {
    writer.writeStartElement(Element.FORMATTERS.getLocalName());
    for (    Property prop : auditLog.get(ModelDescriptionConstants.JSON_FORMATTER).asPropertyList()) {
      writer.writeStartElement(Element.JSON_FORMATTER.getLocalName());
      writer.writeAttribute(Attribute.NAME.getLocalName(),prop.getName());
      JsonAuditLogFormatterResourceDefinition.COMPACT.marshallAsAttribute(prop.getValue(),writer);
      JsonAuditLogFormatterResourceDefinition.DATE_FORMAT.marshallAsAttribute(prop.getValue(),writer);
      JsonAuditLogFormatterResourceDefinition.DATE_SEPARATOR.marshallAsAttribute(prop.getValue(),writer);
      JsonAuditLogFormatterResourceDefinition.ESCAPE_CONTROL_CHARACTERS.marshallAsAttribute(prop.getValue(),writer);
      JsonAuditLogFormatterResourceDefinition.ESCAPE_NEW_LINE.marshallAsAttribute(prop.getValue(),writer);
      JsonAuditLogFormatterResourceDefinition.INCLUDE_DATE.marshallAsAttribute(prop.getValue(),writer);
      writer.writeEndElement();
    }
    writer.writeEndElement();
  }
  if ((auditLog.hasDefined(ModelDescriptionConstants.FILE_HANDLER) && auditLog.get(ModelDescriptionConstants.FILE_HANDLER).keys().size() > 0) || (auditLog.hasDefined(ModelDescriptionConstants.SYSLOG_HANDLER) && auditLog.get(ModelDescriptionConstants.SYSLOG_HANDLER).keys().size() > 0)) {
    writer.writeStartElement(Element.HANDLERS.getLocalName());
    if (auditLog.hasDefined(ModelDescriptionConstants.FILE_HANDLER)) {
      for (      String name : auditLog.get(ModelDescriptionConstants.FILE_HANDLER).keys()) {
        writer.writeStartElement(Element.FILE_HANDLER.getLocalName());
        writer.writeAttribute(Attribute.NAME.getLocalName(),name);
        ModelNode handler=auditLog.get(ModelDescriptionConstants.FILE_HANDLER,name);
        FileAuditLogHandlerResourceDefinition.FORMATTER.marshallAsAttribute(handler,writer);
        FileAuditLogHandlerResourceDefinition.MAX_FAILURE_COUNT.marshallAsAttribute(handler,writer);
        FileAuditLogHandlerResourceDefinition.PATH.marshallAsAttribute(handler,writer);
        FileAuditLogHandlerResourceDefinition.RELATIVE_TO.marshallAsAttribute(handler,writer);
        writer.writeEndElement();
      }
    }
    if (auditLog.hasDefined(ModelDescriptionConstants.SYSLOG_HANDLER)) {
      for (      String name : auditLog.get(ModelDescriptionConstants.SYSLOG_HANDLER).keys()) {
        writer.writeStartElement(Element.SYSLOG_HANDLER.getLocalName());
        writer.writeAttribute(Attribute.NAME.getLocalName(),name);
        ModelNode handler=auditLog.get(ModelDescriptionConstants.SYSLOG_HANDLER,name);
        SyslogAuditLogHandlerResourceDefinition.FORMATTER.marshallAsAttribute(handler,writer);
        SyslogAuditLogHandlerResourceDefinition.MAX_FAILURE_COUNT.marshallAsAttribute(handler,writer);
        SyslogAuditLogHandlerResourceDefinition.SYSLOG_FORMAT.marshallAsAttribute(handler,writer);
        SyslogAuditLogHandlerResourceDefinition.MAX_LENGTH.marshallAsAttribute(handler,writer);
        SyslogAuditLogHandlerResourceDefinition.TRUNCATE.marshallAsAttribute(handler,writer);
        if (handler.hasDefined(ModelDescriptionConstants.PROTOCOL)) {
          writeAuditLogSyslogProtocol(writer,handler.get(ModelDescriptionConstants.PROTOCOL));
        }
        writer.writeEndElement();
      }
    }
    writer.writeEndElement();
  }
  writeAuditLogger(writer,auditLog,Element.LOGGER.getLocalName());
  writeAuditLogger(writer,auditLog,Element.SERVER_LOGGER.getLocalName());
  writer.writeEndElement();
}
