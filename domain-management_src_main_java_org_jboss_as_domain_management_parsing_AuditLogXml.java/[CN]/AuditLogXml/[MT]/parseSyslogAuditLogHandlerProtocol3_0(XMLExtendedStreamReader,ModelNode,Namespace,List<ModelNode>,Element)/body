{
  PathAddress protocolAddress=PathAddress.pathAddress(address.clone().add(ModelDescriptionConstants.PROTOCOL,protocolElement.getLocalName()));
  ModelNode add=Util.createAddOperation(protocolAddress);
  list.add(add);
  final int tcpCount=reader.getAttributeCount();
  for (int i=0; i < tcpCount; i++) {
    final String value=reader.getAttributeValue(i);
    if (!isNoNamespaceAttribute(reader,i)) {
      throw unexpectedAttribute(reader,i);
    }
    final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case HOST:
{
        SyslogAuditLogProtocolResourceDefinition.Udp.HOST.parseAndSetParameter(value,add,reader);
        break;
      }
case PORT:
{
      SyslogAuditLogProtocolResourceDefinition.Udp.PORT.parseAndSetParameter(value,add,reader);
      break;
    }
case MESSAGE_TRANSFER:
{
    if (protocolElement != Element.UDP) {
      SyslogAuditLogProtocolResourceDefinition.Tcp.MESSAGE_TRANSFER.parseAndSetParameter(value,add,reader);
      break;
    }
  }
case RECONNECT_TIMEOUT:
if (protocolElement != Element.UDP) {
  SyslogAuditLogProtocolResourceDefinition.Tcp.RECONNECT_TIMEOUT.parseAndSetParameter(value,add,reader);
  break;
}
default :
{
throw unexpectedAttribute(reader,i);
}
}
}
if (protocolElement != Element.TLS) {
requireNoContent(reader);
}
 else {
boolean seenTrustStore=false;
boolean seenClientCertStore=false;
while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
requireNamespace(reader,expectedNs);
final Element element=Element.forName(reader.getLocalName());
switch (element) {
case TRUSTSTORE:
{
if (seenTrustStore) {
  throw duplicateNamedElement(reader,Element.TRUSTSTORE.getLocalName());
}
seenTrustStore=true;
parseSyslogTlsKeystore(reader,protocolAddress,expectedNs,list,SyslogAuditLogProtocolResourceDefinition.Tls.TlsKeyStore.TRUSTSTORE_ELEMENT,false);
break;
}
case CLIENT_CERT_STORE:
{
if (seenClientCertStore) {
throw duplicateNamedElement(reader,Element.CLIENT_CERT_STORE.getLocalName());
}
seenClientCertStore=true;
parseSyslogTlsKeystore(reader,protocolAddress,expectedNs,list,SyslogAuditLogProtocolResourceDefinition.Tls.TlsKeyStore.CLIENT_CERT_ELEMENT,true);
break;
}
default :
throw unexpectedElement(reader);
}
}
}
}
