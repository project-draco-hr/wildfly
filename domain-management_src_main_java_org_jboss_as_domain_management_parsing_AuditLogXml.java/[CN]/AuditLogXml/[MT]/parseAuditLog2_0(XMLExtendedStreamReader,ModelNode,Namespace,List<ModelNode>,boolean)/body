{
  requireNamespace(reader,expectedNs);
  final ModelNode auditLogAddress=address.clone().add(AccessAuditResourceDefinition.PATH_ELEMENT.getKey(),AccessAuditResourceDefinition.PATH_ELEMENT.getValue());
  final ModelNode add=new ModelNode();
  add.get(OP).set(ADD);
  add.get(OP_ADDR).set(auditLogAddress);
  list.add(add);
  requireNoAttributes(reader);
  while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
    requireNamespace(reader,expectedNs);
    final Element element=Element.forName(reader.getLocalName());
switch (element) {
case FORMATTERS:
      parseAuditLogFormatters2_0(reader,auditLogAddress,expectedNs,list);
    break;
case HANDLERS:
{
    parseAuditLogHandlers2_0(reader,auditLogAddress,expectedNs,list);
    break;
  }
case LOGGER:
{
  parseAuditLogConfig2_0(reader,auditLogAddress,expectedNs,AuditLogLoggerResourceDefinition.PATH_ELEMENT,list);
  break;
}
case SERVER_LOGGER:
{
if (host) {
  parseAuditLogConfig2_0(reader,auditLogAddress,expectedNs,AuditLogLoggerResourceDefinition.HOST_SERVER_PATH_ELEMENT,list);
  break;
}
}
default :
throw unexpectedElement(reader);
}
}
}
