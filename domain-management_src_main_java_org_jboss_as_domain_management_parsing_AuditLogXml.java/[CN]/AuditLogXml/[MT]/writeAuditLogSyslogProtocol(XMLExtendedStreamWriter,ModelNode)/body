{
  String type=protocol.keys().iterator().next();
  ModelNode protocolContents=protocol.get(type);
  if (type.equals(ModelDescriptionConstants.UDP)) {
    writer.writeStartElement(type);
    SyslogAuditLogProtocolResourceDefinition.Udp.HOST.marshallAsAttribute(protocolContents,writer);
    SyslogAuditLogProtocolResourceDefinition.Udp.PORT.marshallAsAttribute(protocolContents,writer);
    writer.writeEndElement();
  }
 else   if (type.equals(ModelDescriptionConstants.TCP)) {
    writer.writeStartElement(type);
    SyslogAuditLogProtocolResourceDefinition.Tcp.HOST.marshallAsAttribute(protocolContents,writer);
    SyslogAuditLogProtocolResourceDefinition.Tcp.PORT.marshallAsAttribute(protocolContents,writer);
    SyslogAuditLogProtocolResourceDefinition.Tcp.MESSAGE_TRANSFER.marshallAsAttribute(protocolContents,writer);
    SyslogAuditLogProtocolResourceDefinition.Tcp.RECONNECT_TIMEOUT.marshallAsAttribute(protocolContents,writer);
    writer.writeEndElement();
  }
 else   if (type.equals(ModelDescriptionConstants.TLS)) {
    writer.writeStartElement(type);
    SyslogAuditLogProtocolResourceDefinition.Tls.HOST.marshallAsAttribute(protocolContents,writer);
    SyslogAuditLogProtocolResourceDefinition.Tls.PORT.marshallAsAttribute(protocolContents,writer);
    SyslogAuditLogProtocolResourceDefinition.Tls.MESSAGE_TRANSFER.marshallAsAttribute(protocolContents,writer);
    SyslogAuditLogProtocolResourceDefinition.Tcp.RECONNECT_TIMEOUT.marshallAsAttribute(protocolContents,writer);
    if (protocolContents.hasDefined(AUTHENTICATION)) {
      writeAuditLogSyslogTlsProtocolKeyStore(writer,protocolContents.get(AUTHENTICATION),TRUSTSTORE);
      writeAuditLogSyslogTlsProtocolKeyStore(writer,protocolContents.get(AUTHENTICATION),CLIENT_CERT_STORE);
    }
    writer.writeEndElement();
  }
}
