{
  Flag[] attemptFlags=null;
  if ((allFlags != null) && (allFlags.length > 0)) {
    Set<Flag> flags=EnumSet.noneOf(Flag.class);
    flags.addAll(Arrays.asList(allFlags));
    flags.remove(Flag.FAIL_SILENTLY);
    attemptFlags=flags.toArray(new Flag[flags.size()]);
  }
  Exception exception=null;
  for (int i=0; i <= this.backOffIntervals.length; ++i) {
    boolean retry=(i < this.backOffIntervals.length);
    try {
      return this.invoker.invoke(cache,operation,retry ? attemptFlags : allFlags);
    }
 catch (    TimeoutException e) {
      exception=e;
    }
catch (    SuspectException e) {
      exception=e;
    }
    if (retry) {
      int delay=this.backOffIntervals[i];
      if (ROOT_LOGGER.isTraceEnabled()) {
        ROOT_LOGGER.tracef(exception,"Cache operation failed.  Retrying in %d ms",delay);
      }
      if (delay > 0) {
        try {
          Thread.sleep(delay);
        }
 catch (        InterruptedException e) {
          Thread.currentThread().interrupt();
        }
      }
 else {
        Thread.yield();
      }
      if (Thread.currentThread().isInterrupted())       break;
    }
  }
  throw InfinispanLogger.ROOT_LOGGER.abortingCacheOperation(exception,this.backOffIntervals.length);
}
