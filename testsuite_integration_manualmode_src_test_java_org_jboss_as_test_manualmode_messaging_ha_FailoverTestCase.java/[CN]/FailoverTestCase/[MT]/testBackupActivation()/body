{
  ModelControllerClient client2=createClient2();
  JMSOperations jmsOperations2=JMSOperationsProvider.getInstance(client2);
  checkJMSQueue(jmsOperations2,jmsQueueName,false);
  InitialContext context1=createJNDIContextFromServer1();
  sendAndReceiveMessage(context1,jmsQueueLookup);
  String text="sent to server1, received from server2 (after failover)";
  sendMessage(context1,jmsQueueLookup,text);
  context1.close();
  System.out.println("===================");
  System.out.println("STOP SERVER1...");
  System.out.println("===================");
  container.stop(SERVER1);
  waitForHornetQServerActivation(jmsOperations2,true);
  checkJMSQueue(jmsOperations2,jmsQueueName,true);
  InitialContext context2=createJNDIContextFromServer2();
  receiveMessage(context2,jmsQueueLookup,text);
  sendAndReceiveMessage(context2,jmsQueueLookup);
  String text2="sent to server2, received from server 1 (after failback)";
  sendMessage(context2,jmsQueueLookup,text2);
  context2.close();
  System.out.println("====================");
  System.out.println("START SERVER1...");
  System.out.println("====================");
  container.start(SERVER1);
  ModelControllerClient client1=createClient1();
  JMSOperations jmsOperations1=JMSOperationsProvider.getInstance(client1);
  waitForHornetQServerActivation(jmsOperations1,true);
  checkHornetQServerStartedAndActiveAttributes(jmsOperations1,true,true);
  waitForHornetQServerActivation(jmsOperations2,false);
  checkHornetQServerStartedAndActiveAttributes(jmsOperations2,true,false);
  checkJMSQueue(jmsOperations2,jmsQueueName,false);
  context1=createJNDIContextFromServer1();
  receiveMessage(context1,jmsQueueLookup,text2);
  sendAndReceiveMessage(context1,jmsQueueLookup);
  context1.close();
  System.out.println("=============================");
  System.out.println("RETURN TO NORMAL OPERATION...");
  System.out.println("=============================");
}
