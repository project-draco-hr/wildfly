{
  try {
    LOOP:     while (true) {
      int command=input.read();
switch (command) {
case ModelControllerClientProtocol.PARAM_OPERATION:
{
          result.setCompensatingOperation(readNode(input));
          break;
        }
case ModelControllerClientProtocol.PARAM_HANDLE_RESULT_FRAGMENT:
{
        expectHeader(input,ModelControllerClientProtocol.PARAM_LOCATION);
        int length=StreamUtils.readInt(input);
        String[] location=new String[length];
        for (int i=0; i < length; i++) {
          location[i]=StreamUtils.readUTFZBytes(input);
        }
        expectHeader(input,ModelControllerClientProtocol.PARAM_OPERATION);
        ModelNode node=readNode(input);
        handler.handleResultFragment(location,node);
        break;
      }
case ModelControllerClientProtocol.PARAM_HANDLE_CANCELLATION:
{
      handler.handleCancellation();
      break LOOP;
    }
case ModelControllerClientProtocol.PARAM_HANDLE_RESULT_FAILED:
{
    ModelNode node=readNode(input);
    handler.handleException(new RuntimeException(node.toString()));
    break LOOP;
  }
case ModelControllerClientProtocol.PARAM_HANDLE_RESULT_COMPLETE:
{
  handler.handleResultComplete();
  break LOOP;
}
case ModelControllerClientProtocol.PARAM_REQUEST_ID:
{
result.setAsynchronousId(StreamUtils.readInt(input));
break;
}
default :
{
throw new IllegalStateException("Unknown response code " + command);
}
}
}
}
 catch (Exception e) {
handler.handleException(e);
}
return null;
}
