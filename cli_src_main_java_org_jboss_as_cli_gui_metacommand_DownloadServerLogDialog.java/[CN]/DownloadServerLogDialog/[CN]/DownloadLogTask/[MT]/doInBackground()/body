{
  PrintStream out=null;
  try {
    out=new PrintStream(new BufferedOutputStream(new FileOutputStream(selectedFile)));
    int linesToRead=5000;
    int skip=0;
    List<ModelNode> dataLines=null;
    long bytesRead=0;
    long bytesReadOldValue=0;
    int lineSepLength=System.getProperty("line.separator").length();
    do {
      String command="/subsystem=logging/:read-log-file(name=" + fileName + ",lines="+ linesToRead+ ",skip="+ skip+ ",tail=false)";
      ModelNode result=cliGuiCtx.getExecutor().doCommand(command);
      if (result.get("outcome").asString().equals("failed")) {
        cancel(false);
        String error="Failure at server: " + result.get("failure-description").toString();
        JOptionPane.showMessageDialog(cliGuiCtx.getMainWindow(),error,"Download Failed",JOptionPane.ERROR_MESSAGE);
        return null;
      }
      dataLines=result.get("result").asList();
      for (      ModelNode line : dataLines) {
        String strLine=line.asString();
        bytesRead+=strLine.length() + lineSepLength;
        out.println(strLine);
      }
      skip+=linesToRead;
      setProgress(Math.min(Math.round(((float)bytesRead / (float)fileSize) * 100),100));
      firePropertyChange("bytesRead",bytesReadOldValue,bytesRead);
      bytesReadOldValue=bytesRead;
    }
 while ((dataLines.size() == linesToRead) && !isCancelled());
  }
 catch (  IOException|CommandFormatException ex) {
    throw new RuntimeException(ex);
  }
 finally {
    if (out != null) {
      out.close();
    }
    if (isCancelled()) {
      selectedFile.delete();
    }
  }
  return null;
}
