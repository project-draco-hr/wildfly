{
  final StringBuilder buf=new StringBuilder((rowsTotal + 1) * totalWidth);
  int columnOffset=0;
  Iterator<Column> iter=columns.values().iterator();
  while (iter.hasNext()) {
    final Column column=iter.next();
    if (buf.length() < columnOffset) {
      buf.setLength(columnOffset);
    }
    buf.insert(columnOffset,column.header.toUpperCase());
    for (int i=column.header.length(); i < column.maxWidth; ++i) {
      buf.insert(columnOffset + i,' ');
    }
    if (columnOffset == 0) {
      buf.insert(column.maxWidth,'\n');
    }
    for (int i=0; i < rowsTotal; ++i) {
      final int offset=(i + 1) * (columnOffset + column.maxWidth + 1) + columnOffset;
      if (buf.length() < offset) {
        buf.setLength(offset);
      }
      String value=column.cells[i];
      if (value == null) {
        value="n/a";
      }
      buf.insert(offset,value);
      for (int j=value.length(); j < column.maxWidth; ++j) {
        buf.insert(offset + j,' ');
      }
      if (columnOffset == 0) {
        buf.insert(offset + column.maxWidth,'\n');
      }
    }
    columnOffset+=column.maxWidth;
  }
  return buf.toString();
}
