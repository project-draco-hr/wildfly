{
  final ModelNode config=operation.get(Constants.CONTAINER_CONFIG);
  final ModelNode subModel=updateContext.getSubModel();
  subModel.get(Constants.CONTAINER_CONFIG).set(config);
  subModel.get(Constants.CONNECTOR).setEmptyObject();
  subModel.get(Constants.VIRTUAL_SERVER).setEmptyObject();
  if (updateContext instanceof BootOperationContext) {
    final BootOperationContext ctx=(BootOperationContext)updateContext;
    updateContext.getRuntimeContext().setRuntimeTask(new RuntimeTask(){
      public void execute(      RuntimeTaskContext context) throws OperationFailedException {
        final String defaultVirtualServer=operation.has(Constants.DEFAULT_VIRTUAL_SERVER) ? operation.get(Constants.DEFAULT_VIRTUAL_SERVER).asString() : DEFAULT_VIRTUAL_SERVER;
        final boolean useNative=operation.has(Constants.NATIVE) ? operation.get(Constants.NATIVE).asBoolean() : DEFAULT_NATIVE;
        try {
          final WebServerService service=new WebServerService(defaultVirtualServer,useNative);
          context.getServiceTarget().addService(WebSubsystemServices.JBOSS_WEB,service).addDependency(AbstractPathService.pathNameOf(TEMP_DIR),String.class,service.getPathInjector()).addDependency(DependencyType.OPTIONAL,ServiceName.JBOSS.append("mbean","server"),MBeanServer.class,service.getMbeanServer()).setInitialMode(Mode.ON_DEMAND).install();
        }
 catch (        Throwable t) {
          throw new OperationFailedException(new ModelNode().set(t.getLocalizedMessage()));
        }
        final SharedWebMetaDataBuilder sharedWebBuilder=new SharedWebMetaDataBuilder(config.clone());
        final SharedTldsMetaDataBuilder sharedTldsBuilder=new SharedTldsMetaDataBuilder(config.clone());
        ctx.addDeploymentProcessor(Phase.STRUCTURE,Phase.STRUCTURE_WAR_DEPLOYMENT_INIT,new WarDeploymentInitializingProcessor());
        ctx.addDeploymentProcessor(Phase.STRUCTURE,Phase.STRUCTURE_WAR,new WarStructureDeploymentProcessor(sharedWebBuilder.create(),sharedTldsBuilder.create()));
        ctx.addDeploymentProcessor(Phase.PARSE,Phase.PARSE_WEB_DEPLOYMENT,new WebParsingDeploymentProcessor());
        ctx.addDeploymentProcessor(Phase.PARSE,Phase.PARSE_WEB_DEPLOYMENT_FRAGMENT,new WebFragmentParsingDeploymentProcessor());
        ctx.addDeploymentProcessor(Phase.PARSE,Phase.PARSE_JBOSS_WEB_DEPLOYMENT,new JBossWebParsingDeploymentProcessor());
        ctx.addDeploymentProcessor(Phase.PARSE,Phase.PARSE_TLD_DEPLOYMENT,new TldParsingDeploymentProcessor());
        ctx.addDeploymentProcessor(Phase.PARSE,Phase.PARSE_ANNOTATION_WAR,new WarAnnotationDeploymentProcessor());
        ctx.addDeploymentProcessor(Phase.PARSE,Phase.PARSE_JSF_MANAGED_BEANS,new JsfManagedBeanProcessor());
        ctx.addDeploymentProcessor(Phase.PARSE,Phase.PARSE_WEB_COMPONENTS,new WebComponentProcessor());
        ctx.addDeploymentProcessor(Phase.PARSE,Phase.PARSE_EAR_CONTEXT_ROOT,new EarContextRootProcessor());
        ctx.addDeploymentProcessor(Phase.PARSE,Phase.PARSE_WEB_MERGE_METADATA,new WarMetaDataProcessor());
        ctx.addDeploymentProcessor(Phase.DEPENDENCIES,Phase.DEPENDENCIES_WAR_MODULE,new WarClassloadingDependencyProcessor());
        ctx.addDeploymentProcessor(Phase.INSTALL,Phase.INSTALL_SERVLET_INIT_DEPLOYMENT,new ServletContainerInitializerDeploymentProcessor());
        ctx.addDeploymentProcessor(Phase.INSTALL,Phase.INSTALL_JSF_ANNOTATIONS,new JsfAnnotationProcessor());
        ctx.addDeploymentProcessor(Phase.INSTALL,Phase.INSTALL_WAR_DEPLOYMENT,new WarDeploymentProcessor(defaultVirtualServer));
        resultHandler.handleResultComplete();
      }
    }
);
  }
 else {
    resultHandler.handleResultComplete();
  }
  final ModelNode compensatingOperation=new ModelNode();
  compensatingOperation.get(OP).set(REMOVE);
  compensatingOperation.get(OP_ADDR).set(operation.require(OP_ADDR));
  return new BasicOperationResult(compensatingOperation);
}
