{
  ModelVersion oldVersion=ModelVersion.create(1,0,0);
  KernelServicesBuilder builder=createKernelServicesBuilder(AdditionalInitialization.MANAGEMENT);
  builder.createLegacyKernelServicesBuilder(null,controllerVersion,oldVersion).setExtensionClassName(IDMExtension.class.getName()).addMavenResourceURL("org.wildfly:wildfly-picketlink:" + controllerVersion.getMavenGavVersion()).addMavenResourceURL("org.picketlink.distribution:picketlink-jbas7:" + picketLinkJBossAs7Version).dontPersistXml();
  KernelServices mainServices=builder.build();
  KernelServices legacyServices=mainServices.getLegacyServices(oldVersion);
  Assert.assertNotNull(legacyServices);
  Assert.assertTrue(mainServices.isSuccessfulBoot());
  Assert.assertTrue(legacyServices.isSuccessfulBoot());
  ModelNode op=createOperation(ADD,ModelElement.PARTITION_MANAGER.getName(),"test.partition",ModelElement.IDENTITY_CONFIGURATION.getName(),"test.config",ModelElement.LDAP_STORE.getName(),"ldap-store");
  op.get(ModelElement.LDAP_STORE_ACTIVE_DIRECTORY.getName()).set(true);
  TransformedOperation transformedOperation=mainServices.transformOperation(oldVersion,op);
  Assert.assertTrue(transformedOperation.rejectOperation(null));
  op=createOperation(ADD,ModelElement.PARTITION_MANAGER.getName(),"test.partition",ModelElement.IDENTITY_CONFIGURATION.getName(),"test.config",ModelElement.LDAP_STORE.getName(),"ldap-store");
  op.get(ModelElement.LDAP_STORE_UNIQUE_ID_ATTRIBUTE_NAME.getName()).set("SOMEaTTRIBUTE");
  transformedOperation=mainServices.transformOperation(oldVersion,op);
  Assert.assertTrue(transformedOperation.rejectOperation(null));
}
