{
  Builder builder=context.getModuleSpecBuilder();
  XBundleRevision brev=context.getBundleRevision();
  Map<ModuleIdentifier,DependencySpec> moduleDependencies=context.getModuleDependencies();
  Deployment deployment=brev.getBundle().adapt(Deployment.class);
  ModuleSpecification moduleSpecification=deployment.getAttachment(BundleDeploymentProcessor.MODULE_SPECIFICATION_KEY);
  if (moduleSpecification != null) {
    List<ModuleDependency> dependencies=moduleSpecification.getAllDependencies();
    LOGGER.debugf("Adding integration dependencies: %d",dependencies.size());
    for (    ModuleDependency moduleDep : dependencies) {
      ModuleIdentifier moduleId=moduleDep.getIdentifier();
      if (moduleDependencies.get(moduleId) != null) {
        LOGGER.debugf("  -dependency on %s (skipped)",moduleId);
        continue;
      }
      MultiplePathFilterBuilder importBuilder=PathFilters.multiplePathFilterBuilder(true);
      for (      FilterSpecification filter : moduleDep.getImportFilters()) {
        importBuilder.addFilter(filter.getPathFilter(),filter.isInclude());
      }
      PathFilter importFilter=importBuilder.create();
      MultiplePathFilterBuilder exportBuilder=PathFilters.multiplePathFilterBuilder(true);
      for (      FilterSpecification filter : moduleDep.getExportFilters()) {
        importBuilder.addFilter(filter.getPathFilter(),filter.isInclude());
      }
      PathFilter exportFilter=exportBuilder.create();
      ModuleLoader moduleLoader=moduleDep.getModuleLoader();
      boolean optional=moduleDep.isOptional();
      DependencySpec depSpec=DependencySpec.createModuleDependencySpec(importFilter,exportFilter,moduleLoader,moduleId,optional);
      LOGGER.debugf("  +%s",depSpec);
      builder.addDependency(depSpec);
    }
  }
}
