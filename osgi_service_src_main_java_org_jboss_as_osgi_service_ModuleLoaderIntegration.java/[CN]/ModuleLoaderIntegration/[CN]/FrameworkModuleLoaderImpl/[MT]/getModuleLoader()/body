{
class DelegatingModuleLoader extends ModuleLoader {
    @Override protected ModuleSpec findModule(    ModuleIdentifier identifier) throws ModuleLoadException {
      ModuleSpec moduleSpec=injectedModuleLoader.getValue().findModule(identifier);
      if (moduleSpec == null)       LOGGER.debugf("Cannot obtain module spec for: %s",identifier);
      return moduleSpec;
    }
    @Override protected Module preloadModule(    ModuleIdentifier identifier) throws ModuleLoadException {
      Module module=ModuleLoader.preloadModule(identifier,injectedModuleLoader.getValue());
      if (module == null)       LOGGER.debugf("Cannot obtain module for: %s",identifier);
      return module;
    }
    @Override public void setAndRelinkDependencies(    Module module,    List<DependencySpec> dependencies) throws ModuleLoadException {
      throw new UnsupportedOperationException();
    }
    @Override public String toString(){
      return ModuleLoaderIntegration.class.getSimpleName() + "." + getClass().getSimpleName();
    }
  }
  return new DelegatingModuleLoader();
}
