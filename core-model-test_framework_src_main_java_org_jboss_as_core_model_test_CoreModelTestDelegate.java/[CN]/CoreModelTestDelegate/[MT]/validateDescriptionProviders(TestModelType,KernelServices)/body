{
  ModelNode op=new ModelNode();
  op.get(OP).set(READ_RESOURCE_DESCRIPTION_OPERATION);
  op.get(OP_ADDR).setEmptyList();
  op.get(RECURSIVE).set(true);
  op.get(INHERITED).set(false);
  op.get(OPERATIONS).set(true);
  op.get(INCLUDE_ALIASES).set(true);
  ModelNode result=kernelServices.executeOperation(op);
  if (result.hasDefined(FAILURE_DESCRIPTION)) {
    throw new RuntimeException(result.get(FAILURE_DESCRIPTION).toString());
  }
  ModelNode model=result.get(RESULT);
  if (type == TestModelType.HOST) {
    model=model.require(CHILDREN).require(HOST).require(MODEL_DESCRIPTION).require(MASTER);
  }
  ValidationConfiguration config=KnownIssuesValidationConfiguration.createAndFixupModel(type,model);
  ModelTestModelDescriptionValidator validator=new ModelTestModelDescriptionValidator(PathAddress.EMPTY_ADDRESS.toModelNode(),model,config);
  List<ValidationFailure> validationMessages=validator.validateResources();
  if (validationMessages.size() > 0) {
    final StringBuilder builder=new StringBuilder("VALIDATION ERRORS IN MODEL:");
    for (    ValidationFailure failure : validationMessages) {
      builder.append(failure);
      builder.append("\n");
    }
    Assert.fail("Failed due to validation errors in the model. Please fix :-) " + builder.toString());
  }
}
