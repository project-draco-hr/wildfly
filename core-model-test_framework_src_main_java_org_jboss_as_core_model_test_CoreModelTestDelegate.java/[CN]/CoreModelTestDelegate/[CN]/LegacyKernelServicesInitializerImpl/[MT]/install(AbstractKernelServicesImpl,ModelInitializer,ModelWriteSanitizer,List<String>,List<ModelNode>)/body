{
  if (testControllerVersion == null) {
    throw new IllegalStateException();
  }
  if (!skipReverseCheck) {
    bootCurrentVersionWithLegacyBootOperations(bootOperations,modelInitializer,modelWriteSanitizer,contentRepositoryContents,mainServices);
  }
  classLoaderBuilder.addParentFirstClassPattern("org.jboss.as.core.model.bridge.shared.*");
  File file=new File("target","cached-classloader" + modelVersion + "_"+ testControllerVersion);
  boolean cached=file.exists();
  ClassLoader legacyCl;
  if (cached) {
    classLoaderBuilder.createFromFile(file);
    legacyCl=classLoaderBuilder.build();
  }
 else {
    String version=LegacyKernelServicesInitializer.VersionLocator.getCurrentVersion();
    classLoaderBuilder.addMavenResourceURL("org.jboss.as:jboss-as-core-model-test-framework:" + version);
    classLoaderBuilder.addMavenResourceURL("org.jboss.as:jboss-as-model-test:" + version);
    if (testControllerVersion != TestControllerVersion.MASTER) {
      classLoaderBuilder.addRecursiveMavenResourceURL(testControllerVersion.getLegacyControllerMavenGav());
      classLoaderBuilder.addMavenResourceURL("org.jboss.as:jboss-as-core-model-test-controller-" + testControllerVersion.getTestControllerVersion() + ":"+ version);
    }
    legacyCl=classLoaderBuilder.build(file);
  }
  ScopedKernelServicesBootstrap scopedBootstrap=new ScopedKernelServicesBootstrap(legacyCl);
  LegacyControllerKernelServicesProxy legacyServices=scopedBootstrap.createKernelServices(bootOperations,validateOperations,modelVersion,modelInitializerEntries);
  return legacyServices;
}
