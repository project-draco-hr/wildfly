{
  if (testControllerVersion == null) {
    throw new IllegalStateException();
  }
  if (!skipReverseCheck) {
    bootCurrentVersionWithLegacyBootOperations(bootOperations,modelInitializer,modelWriteSanitizer,contentRepositoryContents,mainServices);
  }
  final ClassLoader legacyCl;
  if (currentTransformerClassloaderParameter != null && currentTransformerClassloaderParameter.getClassLoader() != null) {
    legacyCl=currentTransformerClassloaderParameter.getClassLoader();
  }
 else {
    classLoaderBuilder.addParentFirstClassPattern("org.jboss.as.core.model.bridge.shared.*");
    classLoaderBuilder.addParentFirstClassPattern("org.jboss.modules.*");
    classLoaderBuilder.addParentFirstClassPattern("org.jboss.logmanager.*");
    classLoaderBuilder.addMavenResourceURL("org.wildfly:wildfly-core-model-test-framework:" + ModelTestControllerVersion.CurrentVersion.VERSION);
    classLoaderBuilder.addMavenResourceURL("org.wildfly:wildfly-model-test:" + ModelTestControllerVersion.CurrentVersion.VERSION);
    if (testControllerVersion != ModelTestControllerVersion.MASTER) {
      String groupId=testControllerVersion.getMavenGavVersion().startsWith("7.") ? "org.jboss.as" : "org.wildfly";
      String hostControllerArtifactId=testControllerVersion.getMavenGavVersion().startsWith("7.") ? "jboss-as-host-controller" : "wildfly-host-controller";
      classLoaderBuilder.addRecursiveMavenResourceURL(groupId + ":" + hostControllerArtifactId+ ":"+ testControllerVersion.getMavenGavVersion());
      classLoaderBuilder.addMavenResourceURL("org.wildfly:wildfly-core-model-test-controller-" + testControllerVersion.getTestControllerVersion() + ":"+ ModelTestControllerVersion.CurrentVersion.VERSION);
    }
    legacyCl=classLoaderBuilder.build();
    if (currentTransformerClassloaderParameter != null) {
      currentTransformerClassloaderParameter.setClassLoader(legacyCl);
    }
  }
  ScopedKernelServicesBootstrap scopedBootstrap=new ScopedKernelServicesBootstrap(legacyCl);
  LegacyControllerKernelServicesProxy legacyServices=scopedBootstrap.createKernelServices(bootOperations,getOperationValidationFilter(),modelVersion,modelInitializerEntries);
  return legacyServices;
}
