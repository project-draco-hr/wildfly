{
  SessionAttributes attributes=mock(SessionAttributes.class);
  SessionContext context=mock(SessionContext.class);
  HttpSessionAttributeListener listener=mock(HttpSessionAttributeListener.class);
  String addedName="added";
  HttpSessionBindingListener addedValue=mock(HttpSessionBindingListener.class);
  when(this.session.getAttributes()).thenReturn(attributes);
  when(this.session.getContext()).thenReturn(context);
  when(context.getSessionAttributeListeners()).thenReturn(Collections.singleton(listener));
  when(attributes.setAttribute(addedName,addedValue)).thenReturn(null);
  this.httpSession.setAttribute(addedName,addedValue);
  ArgumentCaptor<HttpSessionBindingEvent> capturedEvent=ArgumentCaptor.forClass(HttpSessionBindingEvent.class);
  verify(listener).attributeAdded(capturedEvent.capture());
  HttpSessionBindingEvent event=capturedEvent.getValue();
  assertSame(event.getSession(),this.httpSession);
  assertSame(event.getName(),addedName);
  assertSame(event.getValue(),addedValue);
  capturedEvent=ArgumentCaptor.forClass(HttpSessionBindingEvent.class);
  verify(addedValue).valueBound(capturedEvent.capture());
  event=capturedEvent.getValue();
  assertSame(event.getSession(),this.httpSession);
  assertSame(event.getName(),addedName);
  assertNull(event.getValue());
  verify(listener,never()).attributeReplaced(any(HttpSessionBindingEvent.class));
  verify(listener,never()).attributeRemoved(any(HttpSessionBindingEvent.class));
  verify(addedValue,never()).valueUnbound(any(HttpSessionBindingEvent.class));
  reset(listener);
  String replacedName="replaced";
  HttpSessionBindingListener replacedNewValue=mock(HttpSessionBindingListener.class);
  HttpSessionBindingListener replacedOldValue=mock(HttpSessionBindingListener.class);
  when(attributes.setAttribute(replacedName,replacedNewValue)).thenReturn(replacedOldValue);
  this.httpSession.setAttribute(replacedName,replacedNewValue);
  capturedEvent=ArgumentCaptor.forClass(HttpSessionBindingEvent.class);
  verify(listener).attributeReplaced(capturedEvent.capture());
  event=capturedEvent.getValue();
  assertSame(event.getSession(),this.httpSession);
  assertSame(event.getName(),replacedName);
  assertSame(event.getValue(),replacedOldValue);
  capturedEvent=ArgumentCaptor.forClass(HttpSessionBindingEvent.class);
  verify(replacedNewValue).valueBound(capturedEvent.capture());
  event=capturedEvent.getValue();
  assertSame(event.getSession(),this.httpSession);
  assertSame(event.getName(),replacedName);
  assertNull(event.getValue());
  capturedEvent=ArgumentCaptor.forClass(HttpSessionBindingEvent.class);
  verify(replacedOldValue).valueUnbound(capturedEvent.capture());
  event=capturedEvent.getValue();
  assertSame(event.getSession(),this.httpSession);
  assertSame(event.getName(),replacedName);
  assertNull(event.getValue());
  verify(listener,never()).attributeAdded(any(HttpSessionBindingEvent.class));
  verify(listener,never()).attributeRemoved(any(HttpSessionBindingEvent.class));
  verify(replacedNewValue,never()).valueUnbound(any(HttpSessionBindingEvent.class));
  verify(replacedOldValue,never()).valueBound(any(HttpSessionBindingEvent.class));
  reset(listener);
  String removedName="removed";
  HttpSessionBindingListener removedValue=mock(HttpSessionBindingListener.class);
  when(attributes.setAttribute(removedName,null)).thenReturn(removedValue);
  this.httpSession.setAttribute(removedName,null);
  capturedEvent=ArgumentCaptor.forClass(HttpSessionBindingEvent.class);
  verify(listener).attributeRemoved(capturedEvent.capture());
  event=capturedEvent.getValue();
  assertSame(event.getSession(),this.httpSession);
  assertSame(event.getName(),removedName);
  assertSame(event.getValue(),removedValue);
  capturedEvent=ArgumentCaptor.forClass(HttpSessionBindingEvent.class);
  verify(removedValue).valueUnbound(capturedEvent.capture());
  event=capturedEvent.getValue();
  assertSame(event.getSession(),this.httpSession);
  assertSame(event.getName(),removedName);
  assertNull(event.getValue());
  verify(listener,never()).attributeAdded(any(HttpSessionBindingEvent.class));
  verify(listener,never()).attributeReplaced(any(HttpSessionBindingEvent.class));
  verify(removedValue,never()).valueBound(any(HttpSessionBindingEvent.class));
  reset(listener);
  String sameName="same";
  HttpSessionBindingListener sameValue=mock(HttpSessionBindingListener.class);
  when(attributes.setAttribute(sameName,sameValue)).thenReturn(sameValue);
  this.httpSession.setAttribute(sameName,sameValue);
  verify(listener,never()).attributeAdded(any(HttpSessionBindingEvent.class));
  verify(listener,never()).attributeReplaced(any(HttpSessionBindingEvent.class));
  verify(listener,never()).attributeRemoved(any(HttpSessionBindingEvent.class));
  verify(sameValue,never()).valueUnbound(any(HttpSessionBindingEvent.class));
  verify(sameValue,never()).valueBound(any(HttpSessionBindingEvent.class));
  reset(listener);
  String nullName="null";
  when(attributes.setAttribute(nullName,null)).thenReturn(null);
  this.httpSession.setAttribute(nullName,null);
  verify(listener,never()).attributeAdded(any(HttpSessionBindingEvent.class));
  verify(listener,never()).attributeReplaced(any(HttpSessionBindingEvent.class));
  verify(listener,never()).attributeRemoved(any(HttpSessionBindingEvent.class));
  reset(listener);
}
