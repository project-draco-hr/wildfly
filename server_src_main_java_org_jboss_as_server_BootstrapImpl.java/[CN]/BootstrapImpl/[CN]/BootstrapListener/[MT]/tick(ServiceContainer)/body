{
  if (outstanding.decrementAndGet() != 0 || done.getAndSet(true)) {
    return;
  }
  container.removeListener(this);
  if (cancelLikely) {
    return;
  }
  final int failed=this.failed.get();
  future.done(serverControllerService.getValue());
  final long elapsedTime=Math.max(System.currentTimeMillis() - startTime,0L);
  final Logger log=Logger.getLogger("org.jboss.as");
  final int started=this.started.get();
  final int active=map.get(ServiceController.Mode.ACTIVE).get();
  final int passive=map.get(ServiceController.Mode.PASSIVE).get();
  final int onDemand=map.get(ServiceController.Mode.ON_DEMAND).get();
  final int never=map.get(ServiceController.Mode.NEVER).get();
  if (failed == 0) {
    log.infof("JBoss AS %s \"%s\" started in %dms - Started %d of %d services (%d services are passive or on-demand)",Version.AS_VERSION,Version.AS_RELEASE_CODENAME,Long.valueOf(elapsedTime),Integer.valueOf(started),Integer.valueOf(active + passive + onDemand+ never),Integer.valueOf(onDemand + passive));
  }
 else {
    log.errorf("JBoss AS %s \"%s\" started (with errors) in %dms - Started %d of %d services (%d services failed, %d services are passive or on-demand)",Version.AS_VERSION,Version.AS_RELEASE_CODENAME,Long.valueOf(elapsedTime),Integer.valueOf(started),Integer.valueOf(active + passive + onDemand+ never),Integer.valueOf(failed),Integer.valueOf(onDemand + passive));
  }
}
