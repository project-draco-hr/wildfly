{
  if (configuration == null) {
    throw new IllegalArgumentException("configuration is null");
  }
  final ModuleLoader moduleLoader=configuration.getModuleLoader();
  final ServerEnvironment serverEnvironment=configuration.getServerEnvironment();
  if (serverEnvironment == null) {
    throw new IllegalArgumentException("serverEnvironment is null");
  }
  final String name=serverEnvironment.getServerName();
  final Bootstrap.ConfigurationPersisterFactory configurationPersisterFactory=configuration.getConfigurationPersisterFactory();
  if (moduleLoader == null) {
    throw new IllegalArgumentException("moduleLoader is null");
  }
  if (name == null) {
    throw new IllegalArgumentException("name is null");
  }
  if (configurationPersisterFactory == null) {
    throw new IllegalArgumentException("configurationPersisterFactory is null");
  }
  try {
    Module.registerURLStreamHandlerFactoryModule(moduleLoader.loadModule(ModuleIdentifier.create("org.jboss.vfs")));
  }
 catch (  ModuleLoadException e) {
    throw new IllegalArgumentException("VFS is not available from the configured module loader");
  }
  final FutureServiceContainer future=new FutureServiceContainer(container);
  final ServiceTarget tracker=container.subTarget();
  final Service<?> applicationServerService=new ApplicationServerService(extraServices,configuration);
  tracker.addService(Services.JBOSS_AS,applicationServerService).install();
  final ServiceController<?> rootService=container.getRequiredService(Services.JBOSS_AS);
  rootService.addListener(new AbstractServiceListener<Object>(){
    @Override public void transition(    final ServiceController<? extends Object> controller,    final ServiceController.Transition transition){
switch (transition) {
case STARTING_to_UP:
{
          controller.removeListener(this);
          final ServiceController<?> controllerServiceController=controller.getServiceContainer().getRequiredService(Services.JBOSS_SERVER_CONTROLLER);
          controllerServiceController.addListener(new AbstractServiceListener<Object>(){
            public void transition(            final ServiceController<? extends Object> controller,            final ServiceController.Transition transition){
switch (transition) {
case STARTING_to_UP:
{
                  future.done();
                  controller.removeListener(this);
                  break;
                }
case STARTING_to_START_FAILED:
{
                future.failed(controller.getStartException());
                controller.removeListener(this);
                break;
              }
case REMOVING_to_REMOVED:
{
              future.failed(new ServiceNotFoundException("Server controller service was removed"));
              controller.removeListener(this);
              break;
            }
        }
      }
    }
);
    break;
  }
case STARTING_to_START_FAILED:
{
  controller.removeListener(this);
  future.failed(controller.getStartException());
  break;
}
case REMOVING_to_REMOVED:
{
controller.removeListener(this);
future.failed(new ServiceNotFoundException("Root service was removed"));
break;
}
}
}
}
);
return future;
}
