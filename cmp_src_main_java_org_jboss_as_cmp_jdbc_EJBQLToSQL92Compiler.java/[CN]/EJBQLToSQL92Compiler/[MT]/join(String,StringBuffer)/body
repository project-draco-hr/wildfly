{
  Map paths=(Map)joinPaths.get(alias);
  if (paths == null || paths.isEmpty()) {
    return;
  }
  for (Iterator iter=paths.values().iterator(); iter.hasNext(); ) {
    String leftAlias=alias;
    ASTPath path=(ASTPath)iter.next();
    for (int i=1; i < path.size(); ++i) {
      if (path.isCMRField(i)) {
        final String curPath=path.getPath(i);
        final String joinAlias=aliasManager.getAlias(curPath);
        if (joinedAliases.add(joinAlias)) {
          final JDBCAbstractCMRFieldBridge cmrField=(JDBCAbstractCMRFieldBridge)path.getCMRField(i);
          final JDBCAbstractEntityBridge joinEntity=(JDBCAbstractEntityBridge)cmrField.getRelatedEntity();
          JDBCRelationMetaData relation=cmrField.getMetaData().getRelationMetaData();
          String join=(path.innerJoin ? " INNER JOIN " : " LEFT OUTER JOIN ");
          if (relation.isTableMappingStyle()) {
            String relTableAlias=aliasManager.getRelationTableAlias(curPath);
            sql.append(join).append(cmrField.getQualifiedTableName()).append(' ').append(relTableAlias).append(" ON ");
            SQLUtil.getRelationTableJoinClause(cmrField,leftAlias,relTableAlias,sql);
            sql.append(join).append(joinEntity.getQualifiedTableName()).append(' ').append(joinAlias).append(" ON ");
            SQLUtil.getRelationTableJoinClause(cmrField.getRelatedCMRField(),joinAlias,relTableAlias,sql);
          }
 else {
            sql.append(join).append(joinEntity.getQualifiedTableName()).append(' ').append(joinAlias).append(" ON ");
            SQLUtil.getJoinClause(cmrField,leftAlias,joinAlias,sql);
          }
          join(joinAlias,sql);
        }
        leftAlias=joinAlias;
      }
    }
  }
}
