{
  StringBuffer buf=(StringBuffer)data;
  node.setResultType(returnType);
  Object[] args;
  final ASTPath cntPath=(ASTPath)node.jjtGetChild(0);
  if (cntPath.isCMPField()) {
    args=new Object[]{node.distinct,node.jjtGetChild(0).jjtAccept(this,new StringBuffer()).toString()};
  }
 else {
    JDBCAbstractEntityBridge entity=(JDBCAbstractEntityBridge)cntPath.getEntity();
    final JDBCFieldBridge[] pkFields=entity.getPrimaryKeyFields();
    if (pkFields.length > 1) {
      countCompositePk=true;
      forceDistinct=node.distinct.length() > 0;
      addLeftJoinPath(cntPath);
      String alias=aliasManager.getAlias(cntPath.getPath());
      SQLUtil.getColumnNamesClause(entity.getPrimaryKeyFields(),alias,buf);
      return buf;
    }
 else {
      final String alias=aliasManager.getAlias(cntPath.getPath());
      StringBuffer keyColumn=new StringBuffer(20);
      SQLUtil.getColumnNamesClause(pkFields[0],alias,keyColumn);
      args=new Object[]{node.distinct,keyColumn.toString()};
    }
  }
  JDBCTypeMappingMetaData.COUNT_FUNC.getFunctionSql(args,buf);
  return data;
}
