{
  Node selectNode=node.jjtGetChild(0);
  Node fromNode=node.jjtGetChild(1);
  StringBuffer selectClause=new StringBuffer(50);
  selectNode.jjtAccept(this,selectClause);
  StringBuffer whereClause=null;
  StringBuffer orderByClause=null;
  for (int i=2; i < node.jjtGetNumChildren(); ++i) {
    Node childNode=node.jjtGetChild(i);
    if (childNode instanceof ASTWhere) {
      whereClause=new StringBuffer(20);
      childNode.jjtAccept(this,whereClause);
    }
 else     if (childNode instanceof ASTOrderBy) {
      orderByClause=new StringBuffer();
      childNode.jjtAccept(this,orderByClause);
    }
 else     if (childNode instanceof ASTLimitOffset) {
      childNode.jjtAccept(this,null);
    }
  }
  StringBuffer fromClause=new StringBuffer(30);
  fromNode.jjtAccept(this,fromClause);
  for (Iterator iter=identifierToTable.entrySet().iterator(); iter.hasNext(); ) {
    final Map.Entry entry=(Map.Entry)iter.next();
    final String identifier=(String)entry.getKey();
    final String table=(String)entry.getValue();
    final String alias=aliasManager.getAlias(identifier);
    fromClause.append(table).append(' ').append(alias);
    join(alias,fromClause);
    if (iter.hasNext()) {
      fromClause.append(SQLUtil.COMMA);
    }
  }
  selectDistinct=((ASTSelect)selectNode).distinct || returnType == Set.class || forceDistinct;
  StringBuffer sql=(StringBuffer)data;
  if (selectManager.getMetaData().hasRowLocking() && !(selectObject instanceof SelectFunction)) {
    JDBCFunctionMappingMetaData rowLockingTemplate=typeMapping.getRowLockingTemplate();
    if (rowLockingTemplate == null) {
      throw new IllegalStateException("Row locking template is not defined for given mapping: " + typeMapping.getName());
    }
    boolean distinct=selectDistinct;
    Object[] args=new Object[]{distinct ? SQLUtil.DISTINCT + selectClause : selectClause.toString(),fromClause,whereClause == null || whereClause.length() == 0 ? null : whereClause,orderByClause == null || orderByClause.length() == 0 ? null : orderByClause};
    rowLockingTemplate.getFunctionSql(args,sql);
  }
 else {
    sql.append(SQLUtil.SELECT);
    if (selectDistinct) {
      sql.append(SQLUtil.DISTINCT);
    }
    sql.append(selectClause).append(SQLUtil.FROM).append(fromClause);
    if (whereClause != null && whereClause.length() > 0) {
      sql.append(SQLUtil.WHERE).append(whereClause);
    }
    if (orderByClause != null && orderByClause.length() > 0) {
      sql.append(SQLUtil.ORDERBY).append(orderByClause);
    }
  }
  if (countCompositePk) {
    sql.insert(0,"SELECT COUNT(*) FROM (").append(") t_count");
  }
  return data;
}
