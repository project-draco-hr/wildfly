{
  if (!newValue.equals(currentValue)) {
    validateProfileName(context,newValue.asString());
    final Resource rootResource=context.getRootResource();
    final Resource hostResource=rootResource.getChild(PathElement.pathElement(HOST,localHostControllerInfo.getLocalHostName()));
    final String groupName=PathAddress.pathAddress(operation.require(OP_ADDR)).getLastElement().getValue();
    final Set<ServerIdentity> affectedServers=getServersForServerGroup(hostResource,groupName);
    if (!affectedServers.isEmpty()) {
      final ModelNode hostModel=Resource.Tools.readModel(hostResource);
      final Map<String,ProxyController> serverProxies=DomainServerUtils.getServerProxies(localHostControllerInfo.getLocalHostName(),rootResource,rootResourceRegistration);
      final Set<ServerIdentity> runningServers=DomainServerUtils.getAllRunningServers(hostModel,localHostControllerInfo.getLocalHostName(),serverProxies);
      for (      ServerIdentity serverIdentity : affectedServers) {
        if (!runningServers.contains(serverIdentity)) {
          continue;
        }
        final PathAddress serverAddress=PathAddress.pathAddress(PathElement.pathElement(HOST,serverIdentity.getHostName()),PathElement.pathElement(SERVER,serverIdentity.getServerName()));
        final OperationStepHandler handler=rootResourceRegistration.getOperationHandler(serverAddress,ServerRestartRequiredHandler.OPERATION_NAME);
        final ModelNode op=new ModelNode();
        op.get(OP).set(ServerRestartRequiredHandler.OPERATION_NAME);
        op.get(OP_ADDR).set(serverAddress.toModelNode());
        context.addStep(op,handler,OperationContext.Stage.IMMEDIATE);
      }
    }
  }
  context.completeStep();
}
