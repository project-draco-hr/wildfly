{
  if (context.isBooting()) {
    final PathAddress address=PathAddress.pathAddress(operation.require(OP_ADDR));
    final String propertyName=address.getElement(address.size() - 1).getValue();
    final PathElement confElem=address.getElement(address.size() - 2);
    final String configType=confElem.getKey();
    final String configName=confElem.getValue();
    final String propertyValue=operation.has(VALUE) ? Attributes.VALUE.resolveModelAttribute(context,operation).asString() : null;
    final PropertyService<AbstractCommonConfig> service=new PropertyService<AbstractCommonConfig>(propertyName,propertyValue);
    final ServiceTarget target=context.getServiceTarget();
    final ServiceName configServiceName=getConfigServiceName(configType,configName);
    if (context.getServiceRegistry(false).getService(configServiceName) == null) {
      throw MESSAGES.missingConfig(configName);
    }
    final ServiceName propertyServiceName=getPropertyServiceName(configServiceName,propertyName);
    final ServiceBuilder<?> propertyServiceBuilder=target.addService(propertyServiceName,service);
    propertyServiceBuilder.addDependency(configServiceName,AbstractCommonConfig.class,service.getAbstractCommonConfig());
    ServiceController<?> controller=propertyServiceBuilder.setInitialMode(ServiceController.Mode.ACTIVE).install();
    if (newControllers != null) {
      newControllers.add(controller);
    }
  }
 else {
    context.reloadRequired();
  }
}
