{
synchronized (existingResourceDescriptionResolver) {
    final EntityManagerFactoryLookup entityManagerFactoryLookup=new EntityManagerFactoryLookup();
    final Statistics statistics=managementAdaptor.getStatistics();
    if (false == existingResourceDescriptionResolver.contains(managementAdaptor.getVersion())) {
      ResourceDescriptionResolver resourceDescriptionResolver=new StandardResourceDescriptionResolver(statistics.getResourceBundleKeyPrefix(),statistics.getResourceBundleName(),statistics.getClass().getClassLoader());
      PathElement subsystemPE=PathElement.pathElement(ModelDescriptionConstants.SUBSYSTEM,JPAExtension.SUBSYSTEM_NAME);
      ManagementResourceRegistration deploymentResourceRegistration=deploymentUnit.getAttachment(DeploymentModelUtils.MUTABLE_REGISTRATION_ATTACHMENT);
      ManagementResourceRegistration deploymentSubsystemRegistration=deploymentResourceRegistration.getSubModel(PathAddress.pathAddress(subsystemPE));
      ManagementResourceRegistration subdeploymentSubsystemRegistration=deploymentResourceRegistration.getSubModel(PathAddress.pathAddress(PathElement.pathElement(ModelDescriptionConstants.SUBDEPLOYMENT),subsystemPE));
      deploymentSubsystemRegistration.registerSubModel(new ManagementResourceDefinition(PathElement.pathElement(managementAdaptor.getIdentificationLabel()),resourceDescriptionResolver,statistics,entityManagerFactoryLookup));
      subdeploymentSubsystemRegistration.registerSubModel(new ManagementResourceDefinition(PathElement.pathElement(managementAdaptor.getIdentificationLabel()),resourceDescriptionResolver,statistics,entityManagerFactoryLookup));
      existingResourceDescriptionResolver.add(managementAdaptor.getVersion());
    }
    return new DynamicManagementStatisticsResource(statistics,scopedPersistenceUnitName,managementAdaptor.getIdentificationLabel(),entityManagerFactoryLookup);
  }
}
