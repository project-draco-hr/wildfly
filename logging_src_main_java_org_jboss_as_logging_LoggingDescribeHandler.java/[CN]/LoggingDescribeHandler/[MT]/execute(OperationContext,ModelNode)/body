{
  final ModelNode model=context.readModel(PathAddress.EMPTY_ADDRESS);
  PathAddress rootAddress=PathAddress.pathAddress(PathAddress.pathAddress(operation.require(OP_ADDR)).getLastElement());
  final ModelNode result=context.getResult();
  result.add(LoggingExtension.NewLoggingSubsystemAdd.createOperation(rootAddress.toModelNode()));
  if (model.hasDefined(ROOT_LOGGER)) {
    ModelNode add=Util.getEmptyOperation(RootLoggerAdd.OPERATION_NAME,rootAddress.toModelNode());
    copy(LEVEL,model.get(ROOT_LOGGER),add);
    copy(FILTER,model.get(ROOT_LOGGER),add);
    copy(HANDLERS,model.get(ROOT_LOGGER),add);
    result.add(add);
  }
  if (model.hasDefined(LOGGER)) {
    for (    Property prop : model.get(LOGGER).asPropertyList()) {
      ModelNode add=Util.getEmptyOperation(ADD,rootAddress.append(PathElement.pathElement(LOGGER,prop.getName())).toModelNode());
      copy(USE_PARENT_HANDLERS,prop.getValue(),add);
      copy(HANDLERS,prop.getValue(),add);
      copy(LEVEL,prop.getValue(),add);
      result.add(add);
    }
  }
  if (model.hasDefined(ASYNC_HANDLER)) {
    for (    Property prop : model.get(ASYNC_HANDLER).asPropertyList()) {
      result.add(defineAsynchHandler(prop.getName(),prop.getValue(),rootAddress));
    }
  }
  if (model.hasDefined(CONSOLE_HANDLER)) {
    for (    Property prop : model.get(CONSOLE_HANDLER).asPropertyList()) {
      result.add(defineConsoleHandler(prop.getName(),prop.getValue(),rootAddress));
    }
  }
  if (model.hasDefined(FILE_HANDLER)) {
    for (    Property prop : model.get(FILE_HANDLER).asPropertyList()) {
      result.add(defineFileHandler(prop.getName(),prop.getValue(),rootAddress));
    }
  }
  if (model.hasDefined(CUSTOM_HANDLER)) {
    for (    Property prop : model.get(CUSTOM_HANDLER).asPropertyList()) {
      result.add(defineCustomHandler(prop.getName(),prop.getValue(),rootAddress));
    }
  }
  if (model.hasDefined(PERIODIC_ROTATING_FILE_HANDLER)) {
    for (    Property prop : model.get(PERIODIC_ROTATING_FILE_HANDLER).asPropertyList()) {
      result.add(definePeriodicRotatingFileHandler(prop.getName(),prop.getValue(),rootAddress));
    }
  }
  if (model.hasDefined(SIZE_ROTATING_FILE_HANDLER)) {
    for (    Property prop : model.get(SIZE_ROTATING_FILE_HANDLER).asPropertyList()) {
      result.add(defineSizeRotatingFileHandler(prop.getName(),prop.getValue(),rootAddress));
    }
  }
  context.completeStep();
}
