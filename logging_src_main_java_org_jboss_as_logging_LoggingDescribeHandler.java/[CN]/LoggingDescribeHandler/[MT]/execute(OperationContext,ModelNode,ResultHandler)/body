{
  final ModelNode model=context.getSubModel();
  PathAddress rootAddress=PathAddress.pathAddress(PathAddress.pathAddress(operation.require(OP_ADDR)).getLastElement());
  final ModelNode result=new ModelNode();
  result.add(LoggingExtension.NewLoggingSubsystemAdd.createOperation(rootAddress.toModelNode()));
  if (model.hasDefined(ROOT_LOGGER)) {
    ModelNode add=Util.getEmptyOperation(RootLoggerAdd.OPERATION_NAME,rootAddress.toModelNode());
    add.get(LEVEL).set(model.get(ROOT_LOGGER,LEVEL));
    add.get(HANDLERS).set(model.get(ROOT_LOGGER,HANDLERS));
    result.add(add);
  }
  if (model.hasDefined(LOGGER)) {
    for (    Property prop : model.get(LOGGER).asPropertyList()) {
      ModelNode add=Util.getEmptyOperation(ADD,rootAddress.append(PathElement.pathElement(LOGGER,prop.getName())).toModelNode());
      add.get(HANDLERS).set(prop.getValue().get(HANDLERS));
      add.get(LEVEL).set(prop.getValue().get(LEVEL));
      result.add(add);
    }
  }
  if (model.hasDefined(ASYNC_HANDLER)) {
    for (    Property prop : model.get(ASYNC_HANDLER).asPropertyList()) {
      result.add(defineAsynchHandler(prop.getName(),prop.getValue(),rootAddress));
    }
  }
  if (model.hasDefined(CONSOLE_HANDLER)) {
    for (    Property prop : model.get(CONSOLE_HANDLER).asPropertyList()) {
      result.add(defineConsoleHandler(prop.getName(),prop.getValue(),rootAddress));
    }
  }
  if (model.hasDefined(FILE_HANDLER)) {
    for (    Property prop : model.get(FILE_HANDLER).asPropertyList()) {
      result.add(defineFileHandler(prop.getName(),prop.getValue(),rootAddress));
    }
  }
  if (model.hasDefined(PERIODIC_ROTATING_FILE_HANDLER)) {
    for (    Property prop : model.get(PERIODIC_ROTATING_FILE_HANDLER).asPropertyList()) {
      result.add(definePeriodicRotatingFileHandler(prop.getName(),prop.getValue(),rootAddress));
    }
  }
  if (model.hasDefined(SIZE_ROTATING_FILE_HANDLER)) {
    for (    Property prop : model.get(SIZE_ROTATING_FILE_HANDLER).asPropertyList()) {
      result.add(defineSizeRotatingFileHandler(prop.getName(),prop.getValue(),rootAddress));
    }
  }
  resultHandler.handleResultFragment(Util.NO_LOCATION,result);
  resultHandler.handleResultComplete();
  return new BasicOperationResult();
}
