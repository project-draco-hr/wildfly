{
  final ModelNode address=new ModelNode();
  address.add(SUBSYSTEM,EJB3Extension.SUBSYSTEM_NAME);
  address.add(SERVICE,TIMER_SERVICE);
  final ModelNode timerServiceAdd=new ModelNode();
  timerServiceAdd.get(OP).set(ADD);
  timerServiceAdd.get(OP_ADDR).set(address);
  final int attCount=reader.getAttributeCount();
  String threadPoolName=null;
  String defaultDataStore=null;
  final EnumSet<EJB3SubsystemXMLAttribute> required=EnumSet.of(EJB3SubsystemXMLAttribute.THREAD_POOL_NAME,EJB3SubsystemXMLAttribute.DEFAULT_DATA_STORE);
  for (int i=0; i < attCount; i++) {
    requireNoNamespaceAttribute(reader,i);
    final String value=reader.getAttributeValue(i);
    final EJB3SubsystemXMLAttribute attribute=EJB3SubsystemXMLAttribute.forName(reader.getAttributeLocalName(i));
    required.remove(attribute);
switch (attribute) {
case THREAD_POOL_NAME:
{
        threadPoolName=value;
        break;
      }
case DEFAULT_DATA_STORE:
{
      defaultDataStore=value;
      break;
    }
default :
  throw unexpectedAttribute(reader,i);
}
}
if (!required.isEmpty()) {
throw missingRequired(reader,required);
}
timerServiceAdd.get(THREAD_POOL_NAME).set(threadPoolName);
timerServiceAdd.get(DEFAULT_DATA_STORE).set(defaultDataStore);
operations.add(timerServiceAdd);
while (reader.hasNext() && reader.nextTag() != XMLStreamConstants.END_ELEMENT) {
switch (EJB3SubsystemXMLElement.forName(reader.getLocalName())) {
case DATA_STORES:
{
  parseDataStores(reader,operations);
}
}
}
}
