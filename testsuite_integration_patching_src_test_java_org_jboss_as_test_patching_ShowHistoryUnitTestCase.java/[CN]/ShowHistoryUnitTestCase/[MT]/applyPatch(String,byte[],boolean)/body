{
  String moduleName="module-test";
  String patchElementId=randomString();
  File patchDir=mkdir(tempDir,patchID);
  Module module=new Module.Builder(moduleName).miscFile(new ResourceItem("resource-test",("resource patch " + patchID).getBytes())).build();
  ContentModification moduleModified=ContentModificationUtils.modifyModule(patchDir,patchElementId,targetHash,module);
  PatchBuilder patchBuilder=PatchBuilder.create().setPatchId(patchID).setDescription(randomString());
  if (cp) {
    patchBuilder=patchBuilder.upgradeIdentity(productConfig.getProductName(),productConfig.getProductVersion(),productConfig.getProductVersion() + "_CP" + patchID).getParent().upgradeElement(patchElementId,"base",false).addContentModification(moduleModified).getParent();
  }
 else {
    patchBuilder=patchBuilder.oneOffPatchIdentity(productConfig.getProductName(),productConfig.getProductVersion()).getParent().oneOffPatchElement(patchElementId,"base",false).addContentModification(moduleModified).getParent();
  }
  Patch patch=patchBuilder.build();
  createPatchXMLFile(patchDir,patch);
  File zippedPatch=createZippedPatchFile(patchDir,patch.getPatchId());
  controller.start(CONTAINER);
  try {
    Assert.assertTrue("Patch should be accepted",CliUtilsForPatching.applyPatch(zippedPatch.getAbsolutePath()));
    Assert.assertTrue("server should be in restart-required mode",CliUtilsForPatching.doesServerRequireRestart());
  }
  finally {
    controller.stop(CONTAINER);
  }
  return moduleModified.getItem().getContentHash();
}
