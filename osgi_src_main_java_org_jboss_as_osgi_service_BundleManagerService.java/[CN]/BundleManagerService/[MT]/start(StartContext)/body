{
  log.debugf("Starting OSGi BundleManager");
  try {
    String handlerModules=SystemPropertyActions.getProperty("jboss.protocol.handler.modules");
    if (handlerModules == null)     System.setProperty("jboss.protocol.handler.modules","org.jboss.osgi.framework");
    Configuration config=injectedConfig.getValue();
    ServiceContainer container=context.getController().getServiceContainer();
    ModuleLoader moduleLoader=injectedModuleLoader.getValue().getModuleLoader();
    final Map<String,Object> props=new HashMap<String,Object>(config.getProperties());
    props.put(IntegrationMode.class.getName(),IntegrationMode.CONTAINER);
    props.put(ModuleLoader.class.getName(),moduleLoader);
    props.put(ServiceContainer.class.getName(),container);
    props.put("org.osgi.service.http.port","" + osgiHttpServerPortBinding.getValue().getSocketAddress().getPort());
    bundleManager=new BundleManager(props);
    ModuleManagerPlugin plugin=bundleManager.getPlugin(ModuleManagerPlugin.class);
    ModuleLoader osgiModuleLoader=plugin.getModuleLoader();
    ServiceController<?> controller=container.getRequiredService(ClassifyingModuleLoaderService.SERVICE_NAME);
    ClassifyingModuleLoaderService moduleLoaderService=(ClassifyingModuleLoaderService)controller.getValue();
    Value<ModuleLoader> value=new ImmediateValue<ModuleLoader>(osgiModuleLoader);
    osgiModuleLoaderInjector=new ClassifyingModuleLoaderInjector(Constants.JBOSGI_PREFIX,value);
    osgiModuleLoaderInjector.inject(moduleLoaderService);
    setupFrameworkDependencies(plugin);
  }
 catch (  Throwable t) {
    throw new StartException("Failed to create BundleManager",t);
  }
}
