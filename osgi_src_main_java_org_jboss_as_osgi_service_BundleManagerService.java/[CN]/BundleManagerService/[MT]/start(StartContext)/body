{
  log.debugf("Starting OSGi BundleManager");
  try {
    String handlerModules=System.getProperty("jboss.protocol.handler.modules");
    if (handlerModules == null)     System.setProperty("jboss.protocol.handler.modules","org.jboss.osgi.framework");
    Configuration config=injectedConfig.getValue();
    Map<String,Object> props=new HashMap<String,Object>(config.getProperties());
    props.put(IntegrationMode.class.getName(),IntegrationMode.CONTAINER);
    ServiceContainer container=context.getController().getServiceContainer();
    props.put(ServiceContainer.class.getName(),container);
    props.put("org.osgi.service.http.port","" + osgiHttpServerPortBinding.getValue().getSocketAddress().getPort());
    props.put(Constants.FRAMEWORK_STORAGE_CLEAN,Constants.FRAMEWORK_STORAGE_CLEAN_ONFIRSTINIT);
    bundleManager=new BundleManager(props);
    Module frameworkModule=new FrameworkModuleLoader(bundleManager).getFrameworkModule();
    bundleManager.setProperty(Module.class.getName(),frameworkModule);
    ServerDeploymentManager deploymentManager=injectedDeploymentManager.getValue();
    bundleManager.addPlugin(DeployerServicePlugin.class,new ServerDeployerServicePlugin(bundleManager,deploymentManager));
    BundleManagerMBean bundleManagerMBean=new BundleManagerMBean(){
      @Override public long installBundle(      ModuleIdentifier identifier) throws BundleException {
        Bundle bundle=bundleManager.installBundle(identifier);
        return bundle.getBundleId();
      }
      @Override public long installBundle(      String location,      ModuleIdentifier identifier) throws BundleException {
        Bundle bundle=bundleManager.installBundle(location,identifier);
        return bundle.getBundleId();
      }
    }
;
    StandardMBean mbean=new StandardMBean(bundleManagerMBean,BundleManagerMBean.class);
    injectedMBeanServer.getValue().registerMBean(mbean,BundleManagerMBean.OBJECTNAME);
  }
 catch (  Throwable t) {
    throw new StartException("Failed to create BundleManager",t);
  }
}
