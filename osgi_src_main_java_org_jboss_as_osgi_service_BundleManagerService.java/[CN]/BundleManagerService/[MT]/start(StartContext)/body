{
  log.debugf("Starting OSGi BundleManager");
  try {
    String handlerModules=SystemPropertyActions.getProperty("jboss.protocol.handler.modules");
    if (handlerModules == null)     System.setProperty("jboss.protocol.handler.modules","org.jboss.osgi.framework");
    Configuration config=injectedConfig.getValue();
    ServiceContainer container=context.getController().getServiceContainer();
    ModuleLoader classifyingModuleLoader=injectedModuleLoader.getValue().getModuleLoader();
    final Map<String,Object> props=new HashMap<String,Object>(config.getProperties());
    props.put(IntegrationMode.class.getName(),IntegrationMode.CONTAINER);
    props.put(ModuleLoader.class.getName(),classifyingModuleLoader);
    props.put(ServiceContainer.class.getName(),container);
    bundleManager=new BundleManager(props);
    ModuleManagerPlugin plugin=bundleManager.getPlugin(ModuleManagerPlugin.class);
    ModuleLoader moduleLoader=plugin.getModuleLoader();
    ServiceController<?> controller=container.getRequiredService(ClassifyingModuleLoaderService.SERVICE_NAME);
    ClassifyingModuleLoaderService moduleLoaderService=(ClassifyingModuleLoaderService)controller.getValue();
    Value<ModuleLoader> value=new ImmediateValue<ModuleLoader>(moduleLoader);
    osgiModuleLoaderInjector=new ClassifyingModuleLoaderInjector(Constants.JBOSGI_PREFIX,value);
    osgiModuleLoaderInjector.inject(moduleLoaderService);
    ModuleSpecCreationHook creationHook=new ModuleSpecCreationHook(){
      @Override public ModuleSpec create(      ModuleSpec.Builder specBuilder){
        ModuleIdentifier identifier=specBuilder.getIdentifier();
        if (identifier.getName().equals(Constants.JBOSGI_PREFIX + ".system.bundle")) {
          List<ModuleIdentifier> systemModules=new ArrayList<ModuleIdentifier>();
          systemModules.add(ModuleIdentifier.create("org.jboss.logging"));
          systemModules.add(ModuleIdentifier.create("org.osgi.core"));
          systemModules.add(ModuleIdentifier.create("org.osgi.compendium"));
          systemModules.add(ModuleIdentifier.create("org.jboss.osgi.spi"));
          systemModules.add(ModuleIdentifier.create("org.jboss.osgi.deployment"));
          String modulesProps=(String)props.get(Configuration.PROP_JBOSS_OSGI_SYSTEM_MODULES);
          if (modulesProps != null) {
            for (            String moduleProp : modulesProps.split(",")) {
              ModuleIdentifier moduleId=ModuleIdentifier.create(moduleProp.trim());
              systemModules.add(moduleId);
            }
          }
          PathFilter all=PathFilters.acceptAll();
          ModuleLoader moduleLoader=Module.getDefaultModuleLoader();
          for (          ModuleIdentifier moduleId : systemModules)           specBuilder.addDependency(DependencySpec.createModuleDependencySpec(all,all,moduleLoader,moduleId,false));
        }
        return specBuilder.create();
      }
    }
;
    plugin.setModuleSpecCreationHook(creationHook);
  }
 catch (  Throwable t) {
    throw new StartException("Failed to create BundleManager",t);
  }
}
