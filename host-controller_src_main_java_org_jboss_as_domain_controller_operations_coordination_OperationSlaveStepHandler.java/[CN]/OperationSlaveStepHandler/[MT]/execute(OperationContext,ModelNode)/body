{
  ModelNode headers=operation.get(OPERATION_HEADERS);
  headers.remove(EXECUTE_FOR_COORDINATOR);
  final ModelNode missingResources=operation.get(OPERATION_HEADERS).remove(DomainControllerRuntimeIgnoreTransformationRegistry.MISSING_DOMAIN_RESOURCES);
  if (headers.hasDefined(DomainControllerLockIdUtils.DOMAIN_CONTROLLER_LOCK_ID)) {
    int id=headers.remove(DomainControllerLockIdUtils.DOMAIN_CONTROLLER_LOCK_ID).asInt();
    context.attach(DomainControllerLockIdUtils.DOMAIN_CONTROLLER_LOCK_ID_ATTACHMENT,id);
  }
  final HostControllerExecutionSupport hostControllerExecutionSupport=addSteps(context,operation,null,true);
  if (missingResources != null) {
    ModelNode applyMissingResourcesOp=ApplyMissingDomainModelResourcesHandler.createPiggyBackedMissingDataOperation(missingResources);
    context.addStep(applyMissingResourcesOp,applyMissingDomainModelResourcesHandler,OperationContext.Stage.MODEL,true);
  }
  context.completeStep(new OperationContext.RollbackHandler(){
    @Override public void handleRollback(    OperationContext context,    ModelNode operation){
      if (hostControllerExecutionSupport.getDomainOperation() != null) {
        final ModelNode domainResult=hostControllerExecutionSupport.getFormattedDomainResult(context.getResult());
        context.getResult().set(domainResult);
      }
    }
  }
);
}
