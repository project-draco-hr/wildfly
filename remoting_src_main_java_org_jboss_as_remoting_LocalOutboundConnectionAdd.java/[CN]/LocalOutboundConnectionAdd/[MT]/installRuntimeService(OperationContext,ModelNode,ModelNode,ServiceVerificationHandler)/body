{
  final PathAddress address=PathAddress.pathAddress(operation.require(ModelDescriptionConstants.OP_ADDR));
  final String connectionName=address.getLastElement().getValue();
  final String outboundSocketBindingRef=LocalOutboundConnectionResourceDefinition.OUTBOUND_SOCKET_BINDING_REF.resolveModelAttribute(context,operation).asString();
  final ServiceName outboundSocketBindingDependency=OutboundSocketBinding.OUTBOUND_SOCKET_BINDING_BASE_SERVICE_NAME.append(outboundSocketBindingRef);
  final OptionMap connectionCreationOptions=ConnectorResource.getOptions(context,fullModel.get(CommonAttributes.PROPERTY));
  final LocalOutboundConnectionService outboundConnectionService=new LocalOutboundConnectionService(connectionName,connectionCreationOptions);
  final ServiceName serviceName=AbstractOutboundConnectionService.OUTBOUND_CONNECTION_BASE_SERVICE_NAME.append(connectionName);
  final ServiceName aliasServiceName=LocalOutboundConnectionService.LOCAL_OUTBOUND_CONNECTION_BASE_SERVICE_NAME.append(connectionName);
  final ServiceBuilder<LocalOutboundConnectionService> svcBuilder=context.getServiceTarget().addService(serviceName,outboundConnectionService).addAliases(aliasServiceName).addDependency(RemotingServices.SUBSYSTEM_ENDPOINT,Endpoint.class,outboundConnectionService.getEndpointInjector()).addDependency(outboundSocketBindingDependency,OutboundSocketBinding.class,outboundConnectionService.getDestinationOutboundSocketBindingInjector());
  if (verificationHandler != null) {
    svcBuilder.addListener(verificationHandler);
  }
  return svcBuilder.install();
}
