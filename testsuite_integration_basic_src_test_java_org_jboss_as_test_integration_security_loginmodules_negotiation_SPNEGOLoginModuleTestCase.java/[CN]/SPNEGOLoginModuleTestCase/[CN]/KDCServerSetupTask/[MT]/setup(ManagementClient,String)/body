{
  try {
    if (Security.getProvider(BouncyCastleProvider.PROVIDER_NAME) == null) {
      Security.addProvider(new BouncyCastleProvider());
      removeBouncyCastle=true;
    }
  }
 catch (  SecurityException ex) {
    LOGGER.warn("Cannot register BouncyCastleProvider",ex);
  }
  directoryService=DSAnnotationProcessor.getDirectoryService();
  final String hostname=Utils.getCannonicalHost(managementClient);
  final Map<String,String> map=new HashMap<String,String>();
  map.put("hostname",NetworkUtils.formatPossibleIpv6Address(hostname));
  final String ldifContent=StrSubstitutor.replace(IOUtils.toString(SPNEGOLoginModuleTestCase.class.getResourceAsStream(SPNEGOLoginModuleTestCase.class.getSimpleName() + ".ldif"),"UTF-8"),map);
  LOGGER.info(ldifContent);
  final SchemaManager schemaManager=directoryService.getSchemaManager();
  try {
    for (    LdifEntry ldifEntry : new LdifReader(IOUtils.toInputStream(ldifContent))) {
      directoryService.getAdminSession().add(new DefaultEntry(schemaManager,ldifEntry.getEntry()));
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    throw e;
  }
  kdcServer=KDCServerAnnotationProcessor.getKdcServer(directoryService,1024,hostname);
}
