{
  final PatchingTestBuilder test=createDefaultBuilder();
  final File root=test.getRoot();
  final File installation=new File(root,JBOSS_INSTALLATION);
  final File moduleRoot=new File(installation,"modules/system/layers/base");
  final File module0=createModule0(moduleRoot,MODULE_NAME,CONTENT_TASK);
  final File resource=new File(module0,"main/resource0.jar");
  assertLoadable(resource);
  final byte[] existingHash=HashUtils.hashFile(module0);
  final byte[] resultingHash=Arrays.copyOf(existingHash,existingHash.length);
  final PatchingTestStepBuilder oop1=test.createStepBuilder();
  oop1.setPatchId("oop1").oneOffPatchIdentity(PRODUCT_VERSION).oneOffPatchElement("base:oop1","base",false).updateModule(MODULE_NAME,existingHash,resultingHash,CONTENT_TASK);
  apply(oop1);
  assertNotLoadable(resource);
  final File resource1=getModuleResource("base:oop1",MODULE_NAME);
  assertLoadable(resource1);
  final PatchingTestStepBuilder oop2=test.createStepBuilder();
  oop2.setPatchId("oop2").oneOffPatchIdentity(PRODUCT_VERSION).oneOffPatchElement("base:oop2","base",false).updateModule(MODULE_NAME,resultingHash,null,CONTENT_TASK);
  apply(oop2);
  final File resource2=getModuleResource("base:oop2",MODULE_NAME);
  assertNotLoadable(resource);
  assertNotLoadable(resource1);
  assertLoadable(resource2);
  final PatchingTestStepBuilder cp1=test.createStepBuilder();
  cp1.setPatchId("cp1").upgradeIdentity(PRODUCT_VERSION,PRODUCT_VERSION).upgradeElement("base:cp1","base",false).updateModule(MODULE_NAME,existingHash,resultingHash,CONTENT_TASK);
  apply(cp1);
  final File resource3=getModuleResource("base:cp1",MODULE_NAME);
  assertNotLoadable(resource);
  assertNotLoadable(resource1);
  assertNotLoadable(resource2);
  assertLoadable(resource3);
  final PatchingTestStepBuilder cp2=test.createStepBuilder();
  cp2.setPatchId("cp2").upgradeIdentity(PRODUCT_VERSION,PRODUCT_VERSION).upgradeElement("base:cp2","base",false).updateModule(MODULE_NAME,resultingHash,null,CONTENT_TASK);
  apply(cp2);
  final File resource4=getModuleResource("base:cp2",MODULE_NAME);
  assertNotLoadable(resource);
  assertNotLoadable(resource1);
  assertNotLoadable(resource2);
  assertNotLoadable(resource3);
  assertLoadable(resource4);
  rollback(cp2);
  assertNotLoadable(resource);
  assertNotLoadable(resource1);
  assertNotLoadable(resource2);
  assertLoadable(resource3);
  rollback(cp1);
  assertNotLoadable(resource);
  assertNotLoadable(resource1);
  assertLoadable(resource2);
  rollback(oop2);
  assertNotLoadable(resource);
  assertLoadable(resource1);
  rollback(oop1);
  assertLoadable(resource);
}
