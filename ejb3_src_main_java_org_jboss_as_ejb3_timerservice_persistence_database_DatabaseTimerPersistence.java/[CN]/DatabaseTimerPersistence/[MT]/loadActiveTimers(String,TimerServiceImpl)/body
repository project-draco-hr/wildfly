{
  String loadTimer=sql(LOAD_ALL_TIMERS);
  Connection connection=null;
  PreparedStatement statement=null;
  ResultSet resultSet=null;
  try {
    connection=dataSource.getConnection();
    statement=connection.prepareStatement(loadTimer);
    statement.setString(1,timedObjectId);
    statement.setString(2,partition);
    resultSet=statement.executeQuery();
    final List<Holder> timers=new ArrayList<>();
    while (resultSet.next()) {
      try {
        final Holder timerImpl=timerFromResult(resultSet,timerService);
        if (timerImpl != null) {
          timers.add(timerImpl);
        }
      }
 catch (      Exception e) {
        EjbLogger.ROOT_LOGGER.timerReinstatementFailed(resultSet.getString(2),resultSet.getString(1),e);
      }
    }
synchronized (this) {
      Set<String> ids=new HashSet<>();
      for (      Holder timer : timers) {
        ids.add(timer.timer.getId());
      }
      knownTimerIds.put(timedObjectId,ids);
      for (      Holder timer : timers) {
        if (timer.requiresReset) {
          TimerImpl ret=timer.timer;
          EjbLogger.DEPLOYMENT_LOGGER.loadedPersistentTimerInTimeout(ret.getId(),ret.getTimedObjectId());
          if (ret.getNextExpiration() == null) {
            ret.setTimerState(TimerState.CANCELED);
            persistTimer(ret);
            return null;
          }
 else {
            ret.setTimerState(TimerState.ACTIVE);
            persistTimer(ret);
          }
        }
      }
    }
    List<TimerImpl> ret=new ArrayList<>();
    for (    Holder timer : timers) {
      ret.add(timer.timer);
    }
    return ret;
  }
 catch (  SQLException e) {
    throw new RuntimeException(e);
  }
 finally {
    safeClose(resultSet);
    safeClose(statement);
    safeClose(connection);
  }
}
