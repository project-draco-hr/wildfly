{
  final String action=this.action.getValue(args,true);
  PatchOperationBuilder builder;
  if (APPLY.equals(action)) {
    final String path=this.path.getValue(args,true);
    final File f=new File(path);
    if (!f.exists()) {
      throw new CommandFormatException("Path " + f.getAbsolutePath() + " doesn't exist.");
    }
    if (f.isDirectory()) {
      throw new CommandFormatException(f.getAbsolutePath() + " is a directory.");
    }
    builder=PatchOperationBuilder.Factory.patch(f);
  }
 else   if (ROLLBACK.equals(action)) {
    String resetConfigValue=resetConfiguration.getValue(args,true);
    boolean resetConfig;
    if (Util.TRUE.equalsIgnoreCase(resetConfigValue)) {
      resetConfig=true;
    }
 else     if (Util.FALSE.equalsIgnoreCase(resetConfigValue)) {
      resetConfig=false;
    }
 else {
      throw new CommandFormatException("Unexpected value for --reset-configuration (only true and false are allowed): " + resetConfigValue);
    }
    if (patchId.isPresent(args)) {
      final String id=patchId.getValue(args,true);
      final boolean rollbackTo=this.rollbackTo.isPresent(args);
      builder=PatchOperationBuilder.Factory.rollback(id,rollbackTo,resetConfig);
    }
 else {
      builder=PatchOperationBuilder.Factory.rollbackLast(resetConfig);
    }
  }
 else   if (INFO.equals(action)) {
    builder=PatchOperationBuilder.Factory.info();
    return builder;
  }
 else   if (HISTORY.equals(action)) {
    builder=PatchOperationBuilder.Factory.history();
    return builder;
  }
 else {
    throw new CommandFormatException("Unrecognized action '" + action + "'");
  }
  if (overrideModules.isPresent(args)) {
    builder.ignoreModuleChanges();
  }
  if (overrideAll.isPresent(args)) {
    builder.overrideAll();
  }
  if (override.isPresent(args)) {
    String overrideList=override.getValue(args);
    for (    String path : overrideList.split(",+")) {
      builder.overrideItem(path);
    }
  }
  if (preserve.isPresent(args)) {
    String overrideList=preserve.getValue(args);
    for (    String path : overrideList.split(",+")) {
      builder.preserveItem(path);
    }
  }
  return builder;
}
