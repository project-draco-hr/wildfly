{
  super(PATCH,false);
  action=new ArgumentWithValue(this,new SimpleTabCompleter(new String[]{APPLY,ROLLBACK,INFO}),0,"--action");
  host=new ArgumentWithValue(this,new DefaultCompleter(CandidatesProviders.HOSTS),"--host"){
    @Override public boolean canAppearNext(    CommandContext ctx) throws CommandFormatException {
      boolean connected=ctx.getControllerHost() != null;
      return connected && ctx.isDomainMode() && super.canAppearNext(ctx);
    }
  }
;
  overrideModules=new ArgumentWithoutValue(this,"--override-modules"){
    @Override public boolean canAppearNext(    CommandContext ctx) throws CommandFormatException {
      if (canOnlyAppearAfterActions(ctx,APPLY,ROLLBACK)) {
        return super.canAppearNext(ctx);
      }
      return false;
    }
  }
;
  overrideModules.addRequiredPreceding(action);
  overrideAll=new ArgumentWithoutValue(this,"--override-all"){
    @Override public boolean canAppearNext(    CommandContext ctx) throws CommandFormatException {
      if (canOnlyAppearAfterActions(ctx,APPLY,ROLLBACK)) {
        return super.canAppearNext(ctx);
      }
      return false;
    }
  }
;
  overrideAll.addRequiredPreceding(action);
  override=new ArgumentWithValue(this,"--override"){
    @Override public boolean canAppearNext(    CommandContext ctx) throws CommandFormatException {
      if (canOnlyAppearAfterActions(ctx,APPLY,ROLLBACK)) {
        return super.canAppearNext(ctx);
      }
      return false;
    }
  }
;
  override.addRequiredPreceding(action);
  preserve=new ArgumentWithValue(this,"--preserve"){
    @Override public boolean canAppearNext(    CommandContext ctx) throws CommandFormatException {
      if (canOnlyAppearAfterActions(ctx,APPLY,ROLLBACK)) {
        return super.canAppearNext(ctx);
      }
      return false;
    }
  }
;
  preserve.addRequiredPreceding(action);
  final FilenameTabCompleter pathCompleter=Util.isWindows() ? new WindowsFilenameTabCompleter(context) : new DefaultFilenameTabCompleter(context);
  path=new FileSystemPathArgument(this,pathCompleter,1,"--path"){
    @Override public boolean canAppearNext(    CommandContext ctx) throws CommandFormatException {
      if (canOnlyAppearAfterActions(ctx,APPLY)) {
        return super.canAppearNext(ctx);
      }
      return false;
    }
  }
;
  path.addRequiredPreceding(action);
  patchId=new ArgumentWithValue(this,"--patch-id"){
    @Override public boolean canAppearNext(    CommandContext ctx) throws CommandFormatException {
      if (canOnlyAppearAfterActions(ctx,ROLLBACK)) {
        return super.canAppearNext(ctx);
      }
      return false;
    }
  }
;
  patchId.addRequiredPreceding(action);
  rollbackTo=new ArgumentWithoutValue(this,"--rollback-to"){
    @Override public boolean canAppearNext(    CommandContext ctx) throws CommandFormatException {
      if (canOnlyAppearAfterActions(ctx,ROLLBACK)) {
        return super.canAppearNext(ctx);
      }
      return false;
    }
  }
;
  rollbackTo.addRequiredPreceding(action);
  keepConfiguration=new ArgumentWithoutValue(this,"--keep-configuration"){
    @Override public boolean canAppearNext(    CommandContext ctx) throws CommandFormatException {
      if (canOnlyAppearAfterActions(ctx,ROLLBACK)) {
        return super.canAppearNext(ctx);
      }
      return false;
    }
  }
;
  keepConfiguration.addRequiredPreceding(action);
}
