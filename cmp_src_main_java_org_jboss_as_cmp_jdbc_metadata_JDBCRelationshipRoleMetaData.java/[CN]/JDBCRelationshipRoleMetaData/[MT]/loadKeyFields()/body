{
  if (relationMetaData.isForeignKeyMappingStyle()) {
    if (isMultiplicityMany())     return Collections.emptyMap();
 else     if (getRelatedRole().isMultiplicityOne() && !getRelatedRole().isNavigable())     return Collections.emptyMap();
  }
  List<JDBCCMPFieldMetaData> pkFields=new ArrayList<JDBCCMPFieldMetaData>();
  for (  JDBCCMPFieldMetaData cmpField : entity.getCMPFields()) {
    if (cmpField.isPrimaryKeyMember()) {
      pkFields.add(cmpField);
    }
  }
  Map<String,JDBCCMPFieldMetaData> fields=new HashMap<String,JDBCCMPFieldMetaData>(pkFields.size());
  for (  JDBCCMPFieldMetaData cmpField : pkFields) {
    String columnName;
    if (relationMetaData.isTableMappingStyle()) {
      if (entity.equals(relatedRole.getEntity()))       columnName=getCMRFieldName();
 else       columnName=entity.getName();
    }
 else {
      columnName=relatedRole.getCMRFieldName();
    }
    if (pkFields.size() > 1) {
      columnName+="_" + cmpField.getFieldName();
    }
    genIndex=(genIndex) || cmpField.isIndexed();
    cmpField=new JDBCCMPFieldMetaData(entity,cmpField,columnName,false,relationMetaData.isTableMappingStyle(),relationMetaData.isReadOnly(),relationMetaData.getReadTimeOut(),relationMetaData.isTableMappingStyle());
    fields.put(cmpField.getFieldName(),cmpField);
  }
  return Collections.unmodifiableMap(fields);
}
