{
  final BatchBuilder batchBuilder=context.getBatchBuilder();
  final Map<String,ExtensionElement> extensionsCopy;
synchronized (this.extensions) {
    extensionsCopy=new TreeMap<String,ExtensionElement>(this.extensions);
  }
  for (  Map.Entry<String,ExtensionElement> extensionEntry : extensionsCopy.entrySet()) {
    final ExtensionElement extensionElement=extensionEntry.getValue();
    final String moduleSpec=extensionElement.getModule();
    try {
      for (      Extension extension : Module.loadService(moduleSpec,Extension.class)) {
        extension.activate(context);
      }
    }
 catch (    ModuleLoadException e) {
      throw new RuntimeException("Failed activate subsystem: " + extensionEntry.getKey(),e);
    }
  }
  profile.activate(context);
  final Map<String,InterfaceElement> interfaces;
synchronized (this.interfaces) {
    interfaces=new TreeMap<String,InterfaceElement>(this.interfaces);
  }
  for (  InterfaceElement interfaceElement : interfaces.values()) {
    interfaceElement.activate(context);
  }
  batchBuilder.addService(SocketBindingManager.SOCKET_BINDING_MANAGER,new SocketBindingManagerService(portOffset)).setInitialMode(Mode.ON_DEMAND);
  socketBindings.activate(context);
  new ServiceDeploymentActivator().activate(context);
  final Map<DeploymentUnitKey,ServerGroupDeploymentElement> deployments;
synchronized (this.deployments) {
    deployments=new TreeMap<DeploymentUnitKey,ServerGroupDeploymentElement>(this.deployments);
  }
  for (  ServerGroupDeploymentElement deploymentElement : deployments.values()) {
    try {
      deploymentElement.activate(context);
    }
 catch (    Throwable t) {
      log.error("Failed to activate deployment " + deploymentElement.getName(),t);
    }
  }
}
