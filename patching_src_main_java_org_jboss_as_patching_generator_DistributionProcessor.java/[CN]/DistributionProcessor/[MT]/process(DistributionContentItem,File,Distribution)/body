{
  final DistributionProcessor processor=new DistributionProcessor();
  final File[] children=distributionRoot.listFiles();
  if (children != null && children.length != 0) {
    for (    final File child : children) {
      processor.processMisc(parent,child,distribution);
    }
  }
  final List<File> mp=new ArrayList<File>();
  final Set<DistributionContentItem> moduleRoots=processor.moduleRoots;
  for (  final DistributionContentItem item : moduleRoots) {
    final File file=item.getFile(distributionRoot);
    mp.add(file);
  }
  final ModuleLoader loader=new LocalModuleLoader(mp.toArray(new File[mp.size()]));
  try {
    Module module=loader.loadModule(ModuleIdentifier.create("org.jboss.as.version"));
    final Class<?> clazz=module.getClassLoader().loadClass("org.jboss.as.version.ProductConfig");
    final Method resolveName=clazz.getMethod("resolveName");
    final Method resolveVersion=clazz.getMethod("resolveVersion");
    final Constructor<?> constructor=clazz.getConstructor(ModuleLoader.class,String.class,Map.class);
    final Object productConfig=constructor.newInstance(loader,distributionRoot.getAbsolutePath(),Collections.emptyMap());
    distribution.setName((String)resolveName.invoke(productConfig));
    distribution.setVersion((String)resolveVersion.invoke(productConfig));
  }
 catch (  Exception e) {
    throw new IOException(e);
  }
}
