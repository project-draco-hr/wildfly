{
  ProcessMessageHandler.OperationType operationType=null;
  String processName=null;
  try {
    final int cmd=StreamUtils.readUnsignedByte(dataStream);
switch (cmd) {
case Protocol.SEND_STDIN:
{
        if (isPrivileged) {
          operationType=ProcessMessageHandler.OperationType.SEND_STDIN;
          processName=readUTFZBytes(dataStream);
          SERVER_LOGGER.tracef("Received send_stdin for process %s",processName);
          processController.sendStdin(processName,dataStream);
        }
 else {
          SERVER_LOGGER.tracef("Ignoring send_stdin message from untrusted source");
        }
        dataStream.close();
        break;
      }
case Protocol.ADD_PROCESS:
{
      if (isPrivileged) {
        operationType=ProcessMessageHandler.OperationType.ADD;
        processName=readUTFZBytes(dataStream);
        final byte[] authKey=new byte[16];
        readFully(dataStream,authKey);
        final int commandCount=readInt(dataStream);
        final String[] command=new String[commandCount];
        for (int i=0; i < commandCount; i++) {
          command[i]=readUTFZBytes(dataStream);
        }
        final int envCount=readInt(dataStream);
        final Map<String,String> env=new HashMap<String,String>();
        for (int i=0; i < envCount; i++) {
          env.put(readUTFZBytes(dataStream),readUTFZBytes(dataStream));
        }
        final String workingDirectory=readUTFZBytes(dataStream);
        SERVER_LOGGER.tracef("Received add_process for process %s",processName);
        processController.addProcess(processName,authKey,Arrays.asList(command),env,workingDirectory,false,false);
      }
 else {
        SERVER_LOGGER.tracef("Ignoring add_process message from untrusted source");
      }
      dataStream.close();
      break;
    }
case Protocol.START_PROCESS:
{
    if (isPrivileged) {
      operationType=ProcessMessageHandler.OperationType.START;
      processName=readUTFZBytes(dataStream);
      processController.startProcess(processName);
      SERVER_LOGGER.tracef("Received start_process for process %s",processName);
    }
 else {
      SERVER_LOGGER.tracef("Ignoring start_process message from untrusted source");
    }
    dataStream.close();
    break;
  }
case Protocol.STOP_PROCESS:
{
  if (isPrivileged) {
    operationType=ProcessMessageHandler.OperationType.STOP;
    processName=readUTFZBytes(dataStream);
    processController.stopProcess(processName);
  }
 else {
    SERVER_LOGGER.tracef("Ignoring stop_process message from untrusted source");
  }
  dataStream.close();
  break;
}
case Protocol.REMOVE_PROCESS:
{
if (isPrivileged) {
  operationType=ProcessMessageHandler.OperationType.REMOVE;
  processName=readUTFZBytes(dataStream);
  processController.removeProcess(processName);
}
 else {
  SERVER_LOGGER.tracef("Ignoring remove_process message from untrusted source");
}
dataStream.close();
break;
}
case Protocol.REQUEST_PROCESS_INVENTORY:
{
if (isPrivileged) {
operationType=ProcessMessageHandler.OperationType.INVENTORY;
processController.sendInventory();
}
 else {
SERVER_LOGGER.tracef("Ignoring request_process_inventory message from untrusted source");
}
dataStream.close();
break;
}
case Protocol.RECONNECT_PROCESS:
{
if (isPrivileged) {
operationType=ProcessMessageHandler.OperationType.REMOVE;
processName=readUTFZBytes(dataStream);
final String hostName=readUTFZBytes(dataStream);
final int port=readInt(dataStream);
final boolean managementSubsystemEndpoint=readBoolean(dataStream);
final byte[] asAuthKey=new byte[16];
readFully(dataStream,asAuthKey);
processController.sendReconnectProcess(processName,hostName,port,managementSubsystemEndpoint,asAuthKey);
}
 else {
SERVER_LOGGER.tracef("Ignoring reconnect_process message from untrusted source");
}
dataStream.close();
break;
}
case Protocol.SHUTDOWN:
{
if (isPrivileged) {
final int exitCode=readInt(dataStream);
new Thread(new Runnable(){
public void run(){
processController.shutdown();
System.exit(exitCode);
}
}
).start();
}
 else {
SERVER_LOGGER.tracef("Ignoring shutdown message from untrusted source");
}
break;
}
case Protocol.DESTROY_PROECESS:
{
if (isPrivileged) {
operationType=ProcessMessageHandler.OperationType.STOP;
processName=readUTFZBytes(dataStream);
processController.destroyProcess(processName);
}
 else {
SERVER_LOGGER.tracef("Ignoring destroy_process message from untrusted source");
}
dataStream.close();
break;
}
case Protocol.KILL_PROCESS:
{
if (isPrivileged) {
operationType=ProcessMessageHandler.OperationType.STOP;
processName=readUTFZBytes(dataStream);
processController.killProcess(processName);
}
 else {
SERVER_LOGGER.tracef("Ignoring destroy_process message from untrusted source");
}
dataStream.close();
break;
}
default :
{
SERVER_LOGGER.receivedUnknownMessageCode(Integer.valueOf(cmd));
dataStream.close();
}
}
}
 catch (IOException e) {
if (operationType != null && processName != null) {
safeClose(dataStream);
try {
final OutputStream os=connection.writeMessage();
try {
os.write(Protocol.OPERATION_FAILED);
os.write(operationType.getCode());
StreamUtils.writeUTFZBytes(os,processName);
os.close();
}
  finally {
safeClose(os);
}
}
 catch (IOException ignore) {
ROOT_LOGGER.debugf(ignore,"failed to write operation failed message");
}
}
throw e;
}
 finally {
safeClose(dataStream);
}
}
