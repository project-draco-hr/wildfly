{
  final ConnectorXmlDescriptor connectorXmlDescriptor=phaseContext.getDeploymentUnit().getAttachment(ConnectorXmlDescriptor.ATTACHMENT_KEY);
  final ManagementResourceRegistration registration=phaseContext.getDeploymentUnit().getAttachment(DeploymentModelUtils.MUTABLE_REGISTRATION_ATTACHMENT);
  if (connectorXmlDescriptor == null) {
    return;
  }
  final DeploymentUnit deploymentUnit=phaseContext.getDeploymentUnit();
  final IronJacamarXmlDescriptor ironJacamarXmlDescriptor=deploymentUnit.getAttachment(IronJacamarXmlDescriptor.ATTACHMENT_KEY);
  final Module module=deploymentUnit.getAttachment(Attachments.MODULE);
  if (module == null)   throw MESSAGES.failedToGetModuleAttachment(phaseContext.getDeploymentUnit());
  final ClassLoader classLoader=module.getClassLoader();
  Connector cmd=connectorXmlDescriptor != null ? connectorXmlDescriptor.getConnector() : null;
  final IronJacamar ijmd=ironJacamarXmlDescriptor != null ? ironJacamarXmlDescriptor.getIronJacamar() : null;
  try {
    Annotations annotator=new Annotations();
    Map<ResourceRoot,Index> indexes=AnnotationIndexUtils.getAnnotationIndexes(deploymentUnit);
    for (    Entry<ResourceRoot,Index> entry : indexes.entrySet()) {
      AnnotationRepository repository=new JandexAnnotationRepositoryImpl(entry.getValue(),classLoader);
      cmd=annotator.merge(cmd,repository,classLoader);
    }
    if (cmd != null) {
      cmd.validate();
      cmd=(new Merger()).mergeConnectorWithCommonIronJacamar(ijmd,cmd);
    }
    final ServiceName deployerServiceName=ConnectorServices.RESOURCE_ADAPTER_DEPLOYER_SERVICE_PREFIX.append(connectorXmlDescriptor.getDeploymentName());
    final ResourceAdapterDeploymentService raDeployementService=new ResourceAdapterDeploymentService(connectorXmlDescriptor,cmd,ijmd,module,null);
    final ServiceTarget serviceTarget=phaseContext.getServiceTarget();
    ServiceBuilder builder=serviceTarget.addService(deployerServiceName,raDeployementService).addDependency(ConnectorServices.IRONJACAMAR_MDR,MetadataRepository.class,raDeployementService.getMdrInjector()).addDependency(ConnectorServices.RA_REPOSISTORY_SERVICE,ResourceAdapterRepository.class,raDeployementService.getRaRepositoryInjector()).addDependency(ConnectorServices.MANAGEMENT_REPOSISTORY_SERVICE,ManagementRepository.class,raDeployementService.getManagementRepositoryInjector()).addDependency(ConnectorServices.RESOURCE_ADAPTER_REGISTRY_SERVICE,ResourceAdapterDeploymentRegistry.class,raDeployementService.getRegistryInjector()).addDependency(ConnectorServices.TRANSACTION_INTEGRATION_SERVICE,TransactionIntegration.class,raDeployementService.getTxIntegrationInjector()).addDependency(ConnectorServices.CONNECTOR_CONFIG_SERVICE,JcaSubsystemConfiguration.class,raDeployementService.getConfigInjector()).addDependency(SubjectFactoryService.SERVICE_NAME,SubjectFactory.class,raDeployementService.getSubjectFactoryInjector()).addDependency(ConnectorServices.CCM_SERVICE,CachedConnectionManager.class,raDeployementService.getCcmInjector()).addDependency(ConnectorServices.IDLE_REMOVER_SERVICE).addDependency(ConnectorServices.CONNECTION_VALIDATOR_SERVICE).addDependency(NamingService.SERVICE_NAME);
    builder.addListener(new AbstractServiceListener<Object>(){
      public void transition(      final ServiceController<? extends Object> controller,      final ServiceController.Transition transition){
switch (transition) {
case STARTING_to_UP:
{
            CommonDeployment deploymentMD=((ResourceAdapterDeploymentService)controller.getService()).getRaDeployment();
            if (deploymentMD.getConnectionManagers() != null && deploymentMD.getConnectionManagers()[0].getPool() != null) {
              StatisticsPlugin poolStats=deploymentMD.getConnectionManagers()[0].getPool().getStatistics();
              if (poolStats.getNames().size() != 0) {
                DescriptionProvider statsResourceDescriptionProvider=new StatisticsDescriptionProvider(ResourceAdaptersSubsystemProviders.RESOURCE_NAME,"statistics",poolStats);
                PathElement pe=PathElement.pathElement(ModelDescriptionConstants.SUBSYSTEM,ResourceAdaptersExtension.SUBSYSTEM_NAME);
                ManagementResourceRegistration overrideRegistration=registration;
                if (registration.isAllowsOverride()) {
                  overrideRegistration=registration.registerOverrideModel(deploymentUnit.getName(),new OverrideDescriptionProvider(){
                    @Override public Map<String,ModelNode> getAttributeOverrideDescriptions(                    Locale locale){
                      return Collections.emptyMap();
                    }
                    @Override public Map<String,ModelNode> getChildTypeOverrideDescriptions(                    Locale locale){
                      return Collections.emptyMap();
                    }
                  }
);
                }
                ManagementResourceRegistration subRegistration=overrideRegistration.registerSubModel(pe,statsResourceDescriptionProvider);
                for (                String statName : poolStats.getNames()) {
                  subRegistration.registerMetric(statName,new PoolMetrics.ParametrizedPoolMetricsHandler(poolStats));
                }
                subRegistration.registerOperationHandler("clear-statistics",new ClearStatisticsHandler(poolStats),ResourceAdaptersSubsystemProviders.CLEAR_STATISTICS_DESC,false);
              }
            }
            break;
          }
case UP_to_STOP_REQUESTED:
{
          PathElement pe=PathElement.pathElement(ModelDescriptionConstants.SUBSYSTEM,ResourceAdaptersExtension.SUBSYSTEM_NAME);
          ManagementResourceRegistration overrideRegistration=registration.getOverrideModel(deploymentUnit.getName());
          if (overrideRegistration.getSubModel(PathAddress.pathAddress(pe)) != null) {
            overrideRegistration.unregisterSubModel(pe);
          }
          break;
        }
    }
  }
}
);
builder.setInitialMode(Mode.ACTIVE).install();
}
 catch (Throwable t) {
throw new DeploymentUnitProcessingException(t);
}
}
