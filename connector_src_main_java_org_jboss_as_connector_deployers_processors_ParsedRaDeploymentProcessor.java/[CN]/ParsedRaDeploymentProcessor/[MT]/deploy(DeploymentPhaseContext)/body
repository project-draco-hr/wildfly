{
  final ConnectorXmlDescriptor connectorXmlDescriptor=phaseContext.getDeploymentUnit().getAttachment(ConnectorXmlDescriptor.ATTACHMENT_KEY);
  if (connectorXmlDescriptor == null) {
    return;
  }
  final DeploymentUnit deploymentUnit=phaseContext.getDeploymentUnit();
  final IronJacamarXmlDescriptor ironJacamarXmlDescriptor=deploymentUnit.getAttachment(IronJacamarXmlDescriptor.ATTACHMENT_KEY);
  final Module module=deploymentUnit.getAttachment(Attachments.MODULE);
  if (module == null)   throw MESSAGES.failedToGetModuleAttachment(phaseContext.getDeploymentUnit());
  final ClassLoader classLoader=module.getClassLoader();
  Connector cmd=connectorXmlDescriptor != null ? connectorXmlDescriptor.getConnector() : null;
  final IronJacamar ijmd=ironJacamarXmlDescriptor != null ? ironJacamarXmlDescriptor.getIronJacamar() : null;
  try {
    Annotations annotator=new Annotations();
    Map<ResourceRoot,Index> indexes=AnnotationIndexUtils.getAnnotationIndexes(deploymentUnit);
    for (    Entry<ResourceRoot,Index> entry : indexes.entrySet()) {
      AnnotationRepository repository=new JandexAnnotationRepositoryImpl(entry.getValue(),classLoader);
      cmd=annotator.merge(cmd,repository,classLoader);
    }
    if (cmd != null) {
      cmd.validate();
      cmd=(new Merger()).mergeConnectorWithCommonIronJacamar(ijmd,cmd);
    }
    final ResourceAdapterDeploymentService raDeployementService=new ResourceAdapterDeploymentService(connectorXmlDescriptor,cmd,ijmd,module);
    final ServiceTarget serviceTarget=phaseContext.getServiceTarget();
    serviceTarget.addService(ConnectorServices.RESOURCE_ADAPTER_SERVICE_PREFIX.append(connectorXmlDescriptor.getDeploymentName()),raDeployementService).addDependency(ConnectorServices.IRONJACAMAR_MDR,MetadataRepository.class,raDeployementService.getMdrInjector()).addDependency(ConnectorServices.RA_REPOSISTORY_SERVICE,ResourceAdapterRepository.class,raDeployementService.getRaRepositoryInjector()).addDependency(ConnectorServices.MANAGEMENT_REPOSISTORY_SERVICE,ManagementRepository.class,raDeployementService.getManagementRepositoryInjector()).addDependency(ConnectorServices.RESOURCE_ADAPTER_REGISTRY_SERVICE,ResourceAdapterDeploymentRegistry.class,raDeployementService.getRegistryInjector()).addDependency(ConnectorServices.TRANSACTION_INTEGRATION_SERVICE,TransactionIntegration.class,raDeployementService.getTxIntegrationInjector()).addDependency(ConnectorServices.CONNECTOR_CONFIG_SERVICE,JcaSubsystemConfiguration.class,raDeployementService.getConfigInjector()).addDependency(SubjectFactoryService.SERVICE_NAME,SubjectFactory.class,raDeployementService.getSubjectFactoryInjector()).addDependency(ConnectorServices.CCM_SERVICE,CachedConnectionManager.class,raDeployementService.getCcmInjector()).addDependency(NamingService.SERVICE_NAME).setInitialMode(Mode.ACTIVE).install();
  }
 catch (  Throwable t) {
    throw new DeploymentUnitProcessingException(t);
  }
}
