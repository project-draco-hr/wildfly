{
  requireSingleAttribute(reader,CommonAttributes.NAME);
  final String name=propertyReplacer.replaceProperties(reader.getAttributeValue(0));
  if (name == null) {
    throw ParseUtils.missingRequired(reader,Collections.singleton("name"));
  }
  final ModelNode queue=new ModelNode();
  while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
switch (reader.getLocalName()) {
case ENTRY:
{
        final String entry=propertyReplacer.replaceProperties(readStringAttributeElement(reader,CommonAttributes.NAME));
        CommonAttributes.DESTINATION_ENTRIES.parseAndAddParameterElement(entry,queue,reader);
        break;
      }
case "selector":
{
      if (queue.has(SELECTOR.getName())) {
        throw ParseUtils.duplicateNamedElement(reader,reader.getLocalName());
      }
      requireSingleAttribute(reader,CommonAttributes.STRING);
      final String selector=propertyReplacer.replaceProperties(readStringAttributeElement(reader,CommonAttributes.STRING));
      SELECTOR.parseAndSetParameter(selector,queue,reader);
      break;
    }
case "durable":
{
    if (queue.has(DURABLE.getName())) {
      throw ParseUtils.duplicateNamedElement(reader,reader.getLocalName());
    }
    DURABLE.parseAndSetParameter(propertyReplacer.replaceProperties(reader.getElementText()),queue,reader);
    break;
  }
default :
{
  throw ParseUtils.unexpectedElement(reader);
}
}
}
result.getQueues().add(new JmsDestination(queue,serverName,name));
}
