{
  final File binDir=createInstalledImage(env,"consoleSlot",productConfig.getProductName(),productConfig.getProductVersion());
  String patchID=randomString();
  String patchElementId=randomString();
  File patchDir=mkdir(tempDir,patchID);
  File baseModuleDir=newFile(env.getInstalledImage().getModulesDir(),SYSTEM,LAYERS,BASE);
  String moduleName="module-test";
  File moduleDir=createModule0(baseModuleDir,moduleName);
  ContentModification moduleModified=ContentModificationUtils.modifyModule(patchDir,patchElementId,moduleDir,"new resource in the module");
  String fileName="file-test.txt";
  File miscFile=touch(binDir,fileName);
  dump(miscFile,"original script to run standalone AS7");
  byte[] originalFileHash=HashUtils.hashFile(miscFile);
  ContentModification fileModified=ContentModificationUtils.modifyMisc(patchDir,patchID,"updated script",miscFile,"bin",fileName);
  File baseBundleDir=newFile(env.getInstalledImage().getBundlesDir(),SYSTEM,LAYERS,BASE);
  String bundleName="bundle-test";
  File bundleDir=createBundle0(baseBundleDir,bundleName,"bundle content");
  ContentModification bundleModified=ContentModificationUtils.modifyBundle(patchDir,patchElementId,bundleDir,"updated bundle content");
  Patch patch=PatchBuilder.create().setPatchId(patchID).setDescription(randomString()).upgradeIdentity(productConfig.getProductName(),productConfig.getProductVersion(),productConfig.getProductVersion() + "CP1").getParent().addContentModification(fileModified).upgradeElement(patchElementId,"base",false).addContentModification(moduleModified).addContentModification(bundleModified).getParent().build();
  createPatchXMLFile(patchDir,patch,false);
  File zippedPatch=createZippedPatchFile(patchDir,patch.getPatchId());
  assertPatchElements(baseModuleDir,null);
  assertPatchElements(baseBundleDir,null);
  CommandContext ctx=CommandContextFactory.getInstance().newCommandContext();
  try {
    ctx.handle("patch apply " + zippedPatch.getAbsolutePath() + " --distribution="+ env.getInstalledImage().getJbossHome());
  }
 catch (  Exception e) {
    ctx.terminateSession();
    throw e;
  }
  assertPatchElements(baseModuleDir,new String[]{patchElementId});
  assertPatchElements(baseBundleDir,new String[]{patchElementId});
  byte[] patch1FileHash=HashUtils.hashFile(miscFile);
  assertNotEqual(originalFileHash,patch1FileHash);
  final String patchID2=randomString();
  final String patchElementId2=randomString();
  ContentModification fileModified2=ContentModificationUtils.modifyMisc(patchDir,patchID2,"another file update",miscFile,"bin",fileName);
  ContentModification moduleModified2=ContentModificationUtils.modifyModule(patchDir,patchElementId2,moduleDir,"another module update");
  ContentModification bundleModified2=ContentModificationUtils.modifyBundle(patchDir,patchElementId2,bundleDir,"another bundle update");
  Patch patch2=PatchBuilder.create().setPatchId(patchID2).setDescription(randomString()).upgradeIdentity(productConfig.getProductName(),productConfig.getProductVersion(),productConfig.getProductName() + "CP2").getParent().addContentModification(fileModified2).upgradeElement(patchElementId2,"base",false).addContentModification(moduleModified2).addContentModification(bundleModified2).getParent().build();
  createPatchXMLFile(patchDir,patch2,false);
  File zippedPatch2=createZippedPatchFile(patchDir,patch2.getPatchId());
  try {
    ctx.handle("patch apply " + zippedPatch2.getAbsolutePath() + " --distribution="+ env.getInstalledImage().getJbossHome());
  }
 catch (  Exception e) {
    ctx.terminateSession();
    throw e;
  }
  assertPatchElements(baseModuleDir,new String[]{patchElementId,patchElementId2});
  assertPatchElements(baseBundleDir,new String[]{patchElementId,patchElementId2});
  byte[] patch2FileHash=HashUtils.hashFile(miscFile);
  assertNotEqual(patch1FileHash,patch2FileHash);
  assertNotEqual(originalFileHash,patch2FileHash);
  try {
    ctx.handle("patch rollback --reset-configuration=false --distribution=" + env.getInstalledImage().getJbossHome());
  }
 catch (  Exception e) {
    ctx.terminateSession();
    throw e;
  }
  assertPatchElements(baseModuleDir,new String[]{patchElementId});
  assertPatchElements(baseBundleDir,new String[]{patchElementId});
  byte[] curFileHash=HashUtils.hashFile(miscFile);
  assertNotEqual(curFileHash,patch2FileHash);
  assertArrayEquals(curFileHash,patch1FileHash);
  assertNotEqual(curFileHash,originalFileHash);
  try {
    ctx.handle("patch rollback --reset-configuration=false --distribution=" + env.getInstalledImage().getJbossHome());
  }
 catch (  Exception e) {
    ctx.terminateSession();
    throw e;
  }
 finally {
    ctx.terminateSession();
  }
  assertPatchElements(baseModuleDir,null);
  assertPatchElements(baseBundleDir,null);
  curFileHash=HashUtils.hashFile(miscFile);
  assertNotEqual(curFileHash,patch2FileHash);
  assertNotEqual(curFileHash,patch1FileHash);
  assertArrayEquals(curFileHash,originalFileHash);
}
