{
  final ResourceRoot deploymentRoot=phaseContext.getDeploymentUnitContext().getAttachment(Attachments.DEPLOYMENT_ROOT);
  final List<VirtualFile> list=new ArrayList<VirtualFile>(1);
  try {
    deploymentRoot.getRoot().visit(new VirtualFileVisitor(){
      public void visit(      VirtualFile virtualFile){
        if (virtualFile.getName().endsWith(".jar")) {
          list.add(virtualFile);
        }
      }
      public VisitorAttributes getAttributes(){
        return VisitorAttributes.RECURSE_LEAVES_ONLY;
      }
    }
);
  }
 catch (  IOException e) {
    throw new DeploymentUnitProcessingException("Could not mount nested jars in deployment: " + phaseContext.getDeploymentUnitContext().getName(),e);
  }
  if (list.size() == 0)   return;
  final NestedMounts mounts=new NestedMounts(list.size());
  for (  VirtualFile file : list)   try {
    MountHandle handle=new MountHandle(VFS.mountZip(file,file,TempFileProviderService.provider()));
    mounts.add(file,handle);
  }
 catch (  IOException e) {
    log.warnf("Could not mount %s in deployment %s, skipping",file.getPathNameRelativeTo(deploymentRoot),deploymentRoot.getName());
  }
  phaseContext.getDeploymentUnitContext().putAttachment(NestedMounts.ATTACHMENT_KEY,mounts);
}
