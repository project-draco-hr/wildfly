{
  reader.require(START_DOCUMENT,null,null);
  Version version=null;
  while (reader.hasNext() && reader.next() != START_ELEMENT) {
    if (reader.getEventType() == DTD) {
      final String dtdLocation=readDTDLocation(reader);
      if (dtdLocation != null) {
        version=Version.forLocation(dtdLocation);
      }
    }
  }
  final String schemaLocation=readSchemaLocation(reader);
  if (schemaLocation != null) {
    version=Version.forLocation(schemaLocation);
  }
  if (version == null || Version.UNKNOWN.equals(version)) {
    String versionString=null;
    final int count=reader.getAttributeCount();
    for (int i=0; i < count; i++) {
      if (reader.getAttributeNamespace(i) != null) {
        continue;
      }
      final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
      if (attribute == Attribute.VERSION) {
        versionString=reader.getAttributeValue(i);
      }
    }
    if ("1.4".equals(versionString)) {
      version=Version.APP_1_4;
    }
 else     if ("5".equals(versionString)) {
      version=Version.APP_5_0;
    }
 else     if ("6".equals(versionString)) {
      version=Version.APP_6_0;
    }
  }
  if (version == null || Version.UNKNOWN.equals(version)) {
    version=Version.APP_6_0;
  }
  EarMetaData earMetaData=null;
switch (version) {
case APP_1_3:
{
      earMetaData=new Ear13DTDMetaData();
      break;
    }
case APP_1_4:
{
    earMetaData=new Ear14MetaData();
    break;
  }
case APP_5_0:
{
  earMetaData=new Ear50MetaData();
  break;
}
case APP_6_0:
{
earMetaData=new Ear60MetaData();
break;
}
}
final int count=reader.getAttributeCount();
for (int i=0; i < count; i++) {
final String value=reader.getAttributeValue(i);
if (reader.getAttributeNamespace(i) != null) {
continue;
}
final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case ID:
{
earMetaData.setId(value);
break;
}
case VERSION:
{
earMetaData.setVersion(value);
break;
}
default :
throw unexpectedAttribute(reader,i);
}
}
final DescriptionGroupMetaData descriptionGroup=new DescriptionGroupMetaData();
final SecurityRolesMetaData securityRolesMetaData=new SecurityRolesMetaData();
final EarEnvironmentRefsGroupMetaData environmentRefsGroupMetaData=new EarEnvironmentRefsGroupMetaData();
final ModulesMetaData modulesMetaData=new ModulesMetaData();
while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
if (DescriptionGroupMetaDataParser.parse(reader,descriptionGroup)) {
continue;
}
if (EnvironmentRefsGroupMetaDataParser.parse(reader,environmentRefsGroupMetaData)) {
continue;
}
final Element element=Element.forName(reader.getLocalName());
switch (element) {
case APPLICATION_NAME:
{
if (earMetaData instanceof Ear6xMetaData) {
Ear6xMetaData.class.cast(earMetaData).setApplicationName(reader.getElementText());
}
 else {
throw unexpectedElement(reader);
}
break;
}
case INITIALIZATION_IN_ORDER:
{
if (earMetaData instanceof Ear6xMetaData) {
Ear6xMetaData.class.cast(earMetaData).setInitializeInOrder(Boolean.parseBoolean(reader.getElementText()));
}
 else {
throw unexpectedElement(reader);
}
break;
}
case LIBRARY_DIRECTORY:
{
if (earMetaData instanceof Ear5xMetaData) {
Ear5xMetaData.class.cast(earMetaData).setLibraryDirectory(reader.getElementText());
}
 else {
throw unexpectedElement(reader);
}
break;
}
case MODULE:
{
modulesMetaData.add(EarModuleConfigParser.parse(reader));
break;
}
case SECURITY_ROLE:
{
securityRolesMetaData.add(SecurityRoleMetaDataParser.parse(reader));
break;
}
default :
throw unexpectedElement(reader);
}
}
earMetaData.setDescriptionGroup(descriptionGroup);
earMetaData.setModules(modulesMetaData);
earMetaData.setSecurityRoles(securityRolesMetaData);
if (earMetaData instanceof Ear6xMetaData) {
Ear6xMetaData.class.cast(earMetaData).setEarEnvironmentRefsGroup(environmentRefsGroupMetaData);
}
return earMetaData;
}
