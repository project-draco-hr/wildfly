{
  start(DEPLOYMENT_1,CONTAINER_1);
  start(DEPLOYMENT_2,CONTAINER_2);
  DefaultHttpClient client=new DefaultHttpClient();
  String xpc1_create_url=baseURL1 + "count?command=createEmployee";
  String xpc2_create_url=baseURL2 + "count?command=createEmployee";
  String xpc1_flush_url=baseURL1 + "count?command=flush";
  String xpc2_flush_url=baseURL2 + "count?command=flush";
  String xpc1_clear_url=baseURL1 + "count?command=clear";
  String xpc2_clear_url=baseURL2 + "count?command=clear";
  String xpc1_echo_url=baseURL1 + "count?command=echo&message=";
  String xpc2_echo_url=baseURL2 + "count?command=echo&message=";
  String xpc1_get_url=baseURL1 + "count?command=getEmployee";
  String xpc2_get_url=baseURL2 + "count?command=getEmployee";
  String xpc1_getdestroy_url=baseURL2 + "count?command=destroy";
  String xpc1_delete_url=baseURL1 + "count?command=deleteEmployee";
  String xpc2_delete_url=baseURL2 + "count?command=deleteEmployee";
  String xpc1_secondLevelCacheEntries_url=baseURL1 + "count?command=getEmployeesInSecondLevelCache";
  String xpc2_secondLevelCacheEntries_url=baseURL2 + "count?command=getEmployeesInSecondLevelCache";
  try {
    this.establishView(client,baseURL1,NODE_1,NODE_2);
    assertExecuteUrl(client,xpc1_echo_url + "StartingTestSecondLevelCache");
    assertExecuteUrl(client,xpc2_echo_url + "StartingTestSecondLevelCache");
    String employeeName=executeUrlWithAnswer(client,xpc1_create_url,"create entity in node1 in memory db");
    assertEquals(employeeName,"Tom Brady");
    System.out.println(new Date() + "about to read entity on node1 (from xpc queue)");
    employeeName=executeUrlWithAnswer(client,xpc1_get_url,"on node1, node1 should be able to read entity on node1");
    assertEquals(employeeName,"Tom Brady");
    String employeesInCache=executeUrlWithAnswer(client,xpc1_secondLevelCacheEntries_url,"get number of elements in node1 second level cache (should be zero)");
    assertEquals(employeesInCache,"0");
    assertExecuteUrl(client,xpc1_flush_url);
    assertExecuteUrl(client,xpc1_clear_url);
    employeeName=executeUrlWithAnswer(client,xpc2_create_url,"create entity in node2 in memory db (each node has its own database)");
    assertEquals(employeeName,"Tom Brady");
    assertExecuteUrl(client,xpc2_flush_url);
    assertExecuteUrl(client,xpc2_clear_url);
    employeeName=executeUrlWithAnswer(client,xpc2_get_url,"node2 should be able to read entity from 2lc");
    assertEquals(employeeName,"Tom Brady");
    employeesInCache=executeUrlWithAnswer(client,xpc2_secondLevelCacheEntries_url,"get number of elements in node2 second level cache (should be zero)");
    assertEquals(employeesInCache,"1");
    assertExecuteUrl(client,xpc1_echo_url + "testSecondLevelCacheclearedXPC");
    assertExecuteUrl(client,xpc2_echo_url + "testSecondLevelCacheclearedXPC");
    assertExecuteUrl(client,xpc2_delete_url);
    assertExecuteUrl(client,xpc1_echo_url + "testSecondLevelCachedeletedEnityOnNode2");
    assertExecuteUrl(client,xpc1_echo_url + "2lcOnNode1ShouldHaveZeroElemementsLoaded");
    employeesInCache=executeUrlWithAnswer(client,xpc1_secondLevelCacheEntries_url,"get number of elements in node1 second level cache (should be zero)");
    assertEquals(employeesInCache,"0");
    employeesInCache=executeUrlWithAnswer(client,xpc2_secondLevelCacheEntries_url,"get number of elements in node2 second level cache (should be zero)");
    assertEquals(employeesInCache,"0");
    assertExecuteUrl(client,xpc1_delete_url);
    String destroyed=executeUrlWithAnswer(client,xpc1_getdestroy_url,"destroy the bean on node1");
    assertEquals(destroyed,"destroy");
  }
  finally {
    HttpClientUtils.closeQuietly(client);
    stop(DEPLOYMENT_1,CONTAINER_1);
    stop(DEPLOYMENT_2,CONTAINER_2);
  }
}
