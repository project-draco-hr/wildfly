{
  for (  String name : handlerNames) {
    final HandlerConfiguration handlerConfig=logContextConfig.getHandlerConfiguration(name);
    final ModelNode handlerModel=findHandlerModel(model,name);
    final Set<String> modelPropertyNames=new HashSet<String>(handlerModel.keys());
    final List<String> configPropertyNames=new ArrayList<String>(handlerConfig.getPropertyNames());
    modelPropertyNames.remove(CommonAttributes.FILTER.getName());
    modelPropertyNames.remove(CommonAttributes.NAME.getName());
    for (    String modelPropertyName : modelPropertyNames) {
      ModelNode modelValue=handlerModel.get(modelPropertyName);
      String modelStringValue=modelValue.asString();
      final String configValue;
      if (modelPropertyName.equals(CommonAttributes.ENABLED.getName())) {
        final String propertyName=CommonAttributes.ENABLED.getPropertyName();
        if (configPropertyNames.contains(propertyName)) {
          configValue=handlerConfig.getPropertyValueString(propertyName);
        }
 else {
          continue;
        }
      }
 else       if (modelPropertyName.equals(CommonAttributes.ENCODING.getName())) {
        configValue=handlerConfig.getEncoding();
      }
 else       if (modelPropertyName.equals(AbstractHandlerDefinition.FORMATTER.getName()) || modelPropertyName.equals(AbstractHandlerDefinition.NAMED_FORMATTER.getName())) {
        if (handlerModel.hasDefined(AbstractHandlerDefinition.NAMED_FORMATTER.getName())) {
          configValue=handlerConfig.getFormatterName();
          modelValue=handlerModel.get(AbstractHandlerDefinition.NAMED_FORMATTER.getName());
        }
 else {
          final String formatterName=handlerConfig.getFormatterName();
          if (formatterName == null) {
            configValue=null;
          }
 else {
            final FormatterConfiguration formatterConfig=logContextConfig.getFormatterConfiguration(formatterName);
            configValue=formatterConfig.getPropertyValueString(PatternFormatterResourceDefinition.PATTERN.getName());
            modelValue=handlerModel.get(AbstractHandlerDefinition.FORMATTER.getName());
          }
        }
        modelStringValue=modelValue.asString();
      }
 else       if (modelPropertyName.equals(CommonAttributes.FILTER_SPEC.getName())) {
        configValue=handlerConfig.getFilter();
      }
 else       if (modelPropertyName.equals(CommonAttributes.LEVEL.getName())) {
        configValue=handlerConfig.getLevel();
      }
 else {
        final String configPropertyName;
        if (modelPropertyName.equals(CommonAttributes.AUTOFLUSH.getName())) {
          configPropertyName=CommonAttributes.AUTOFLUSH.getPropertyName();
        }
 else         if (modelPropertyName.equals(SizeRotatingHandlerResourceDefinition.ROTATE_SIZE.getName())) {
          configPropertyName=SizeRotatingHandlerResourceDefinition.ROTATE_SIZE.getPropertyName();
          modelStringValue=String.valueOf(SizeResolver.INSTANCE.parseSize(modelValue));
        }
 else         if (modelPropertyName.equals(CommonAttributes.FILE.getName())) {
          configPropertyName=CommonAttributes.FILE.getPropertyName();
          modelStringValue=modelValue.get(PathResourceDefinition.PATH.getName()).asString();
          if (modelValue.hasDefined(PathResourceDefinition.RELATIVE_TO.getName())) {
            final String relativeTo=System.getProperty(modelValue.get(PathResourceDefinition.RELATIVE_TO.getName()).asString());
            modelStringValue=relativeTo + File.separator + modelStringValue;
          }
        }
 else         if (modelPropertyName.equals(ConsoleHandlerResourceDefinition.TARGET.getName())) {
          configPropertyName=ConsoleHandlerResourceDefinition.TARGET.getPropertyName();
          modelStringValue=Target.fromString(modelValue.asString()).name();
        }
 else         if (modelPropertyName.equals(AsyncHandlerResourceDefinition.SUBHANDLERS.getName())) {
          final List<String> handlerHandlerNames=handlerConfig.getHandlerNames();
          final ModelNode handlers=handlerModel.get(modelPropertyName);
          if (handlers.isDefined()) {
            final List<String> modelHandlerNames=new ArrayList<String>();
            for (            ModelNode handler : handlers.asList()) {
              modelHandlerNames.add(handler.asString());
            }
            final List<String> missingConfigHandlers=new ArrayList<String>(handlerHandlerNames);
            missingConfigHandlers.removeAll(modelHandlerNames);
            final List<String> missingModelHandlers=new ArrayList<String>(modelHandlerNames);
            missingModelHandlers.removeAll(handlerHandlerNames);
            Assert.assertTrue("Logger in model contains handlers not in the configuration: " + missingConfigHandlers,missingConfigHandlers.isEmpty());
            Assert.assertTrue("Logger in configuration contains handlers not in the model: " + missingModelHandlers,missingModelHandlers.isEmpty());
          }
 else {
            Assert.assertTrue("Handlers attached to loggers in the configuration that are not attached to loggers in the model. Logger: " + name,handlerHandlerNames.isEmpty());
          }
          continue;
        }
 else         if (modelPropertyName.equals(SyslogHandlerResourceDefinition.FACILITY.getName())) {
          configPropertyName=modelPropertyName;
          modelStringValue=FacilityAttribute.fromString(modelValue.asString()).getFacility().name();
        }
 else         if (modelPropertyName.equals(SyslogHandlerResourceDefinition.SERVER_ADDRESS.getName())) {
          configPropertyName=SyslogHandlerResourceDefinition.SERVER_ADDRESS.getPropertyName();
        }
 else         if (modelPropertyName.equals(SyslogHandlerResourceDefinition.SYSLOG_FORMATTER.getName())) {
          configPropertyName=SyslogHandlerResourceDefinition.SYSLOG_FORMATTER.getPropertyName();
        }
 else {
          configPropertyName=convertModelPropertyName(modelPropertyName);
        }
        Assert.assertTrue("Configuration is missing property name: " + modelPropertyName,configPropertyNames.contains(configPropertyName));
        configValue=handlerConfig.getPropertyValueString(configPropertyName);
      }
      if (configValue == null) {
        Assert.assertFalse(String.format("Handler property values do not match.%nConfig Value: %s%nModel Value:  %s",configValue,modelValue),modelValue.isDefined());
      }
 else {
        Assert.assertEquals(String.format("Handler property values do not match.%nConfig Value: %s%nModel Value:  %s",configValue,modelStringValue),configValue,modelStringValue);
      }
    }
  }
}
