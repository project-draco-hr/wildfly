{
  ModelNode bindingRemove=new ModelNode();
  bindingRemove.get(OP).set(REMOVE);
  bindingRemove.get(OP_ADDR).set(createAddress("nocache"));
  bindingRemove.get(OPERATION_HEADERS).get(ALLOW_RESOURCE_SERVICE_RESTART).set(true);
  ModelNode removeResult=managementClient.getControllerClient().execute(bindingRemove);
  Assert.assertFalse(removeResult.get(FAILURE_DESCRIPTION).toString(),removeResult.get(FAILURE_DESCRIPTION).isDefined());
  LOGGER.info("Object factory with uncached InitialContext unbound.");
  bindingRemove=new ModelNode();
  bindingRemove.get(OP).set(REMOVE);
  bindingRemove.get(OP_ADDR).set(createAddress("cache"));
  bindingRemove.get(OPERATION_HEADERS).get(ALLOW_RESOURCE_SERVICE_RESTART).set(true);
  removeResult=managementClient.getControllerClient().execute(bindingRemove);
  Assert.assertFalse(removeResult.get(FAILURE_DESCRIPTION).toString(),removeResult.get(FAILURE_DESCRIPTION).isDefined());
  LOGGER.info("Object factory with cached InitialContext unbound.");
  bindingRemove=new ModelNode();
  bindingRemove.get(OP).set(REMOVE);
  bindingRemove.get(OP_ADDR).set(createAddress("ldap"));
  bindingRemove.get(OPERATION_HEADERS).get(ALLOW_RESOURCE_SERVICE_RESTART).set(true);
  removeResult=managementClient.getControllerClient().execute(bindingRemove);
  Assert.assertFalse(removeResult.get(FAILURE_DESCRIPTION).toString(),removeResult.get(FAILURE_DESCRIPTION).isDefined());
  LOGGER.info("Object factory with uncached InitialDirContext unbound.");
  bindingRemove=new ModelNode();
  bindingRemove.get(OP).set(REMOVE);
  bindingRemove.get(OP_ADDR).set(createAddress("ldap-cache"));
  bindingRemove.get(OPERATION_HEADERS).get(ALLOW_RESOURCE_SERVICE_RESTART).set(true);
  removeResult=managementClient.getControllerClient().execute(bindingRemove);
  Assert.assertFalse(removeResult.get(FAILURE_DESCRIPTION).toString(),removeResult.get(FAILURE_DESCRIPTION).isDefined());
  LOGGER.info("Object factory with cached InitialDirContext unbound.");
}
