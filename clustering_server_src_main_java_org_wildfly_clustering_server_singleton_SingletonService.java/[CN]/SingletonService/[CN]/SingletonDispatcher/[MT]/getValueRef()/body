{
  try {
    Map<Node,CommandResponse<AtomicReference<T>>> results=Collections.emptyMap();
    while (results.isEmpty()) {
      if (!SingletonService.this.started) {
        throw new IllegalStateException(ClusteringServerLogger.ROOT_LOGGER.notStarted(SingletonService.this.singletonServiceName.getCanonicalName()));
      }
      results=SingletonService.this.dispatcher.executeOnCluster(new SingletonValueCommand<T>());
      Iterator<CommandResponse<AtomicReference<T>>> responses=results.values().iterator();
      while (responses.hasNext()) {
        if (responses.next().get() == null) {
          responses.remove();
        }
      }
      int count=results.size();
      if (count > 1) {
        throw ClusteringServerLogger.ROOT_LOGGER.unexpectedResponseCount(SingletonService.this.singletonServiceName.getCanonicalName(),count);
      }
      if (count == 0) {
        ClusteringServerLogger.ROOT_LOGGER.noResponseFromMaster(SingletonService.this.singletonServiceName.getCanonicalName());
        if (SingletonService.this.registration.getProviders().size() < SingletonService.this.quorum) {
          return new AtomicReference<>();
        }
        Thread.yield();
      }
    }
    return results.values().iterator().next().get();
  }
 catch (  Exception e) {
    throw new IllegalStateException(e);
  }
}
