{
  final String queueName=CommonAttributes.QUEUE_NAME.validateResolvedOperation(model).asString();
  final ModelNode forwardingNode=CommonAttributes.BRIDGE_FORWARDING_ADDRESS.validateResolvedOperation(model);
  final String forwardingAddress=forwardingNode.isDefined() ? forwardingNode.asString() : null;
  final ModelNode filterNode=CommonAttributes.FILTER.validateResolvedOperation(model);
  final String filterString=filterNode.isDefined() ? filterNode.asString() : null;
  final ModelNode transformerNode=CommonAttributes.TRANSFORMER_CLASS_NAME.validateResolvedOperation(model);
  final String transformerClassName=transformerNode.isDefined() ? transformerNode.asString() : null;
  final long retryInterval=CommonAttributes.RETRY_INTERVAL.validateResolvedOperation(model).asLong();
  final double retryIntervalMultiplier=CommonAttributes.RETRY_INTERVAL_MULTIPLIER.validateResolvedOperation(model).asDouble();
  final int reconnectAttempts=CommonAttributes.BRIDGE_RECONNECT_ATTEMPTS.validateResolvedOperation(model).asInt();
  final boolean useDuplicateDetection=CommonAttributes.USE_DUPLICATE_DETECTION.validateResolvedOperation(model).asBoolean();
  final int confirmationWindowSize=CommonAttributes.CONFIRMATION_WINDOW_SIZE.validateResolvedOperation(model).asInt();
  final long clientFailureCheckPeriod=HornetQClient.DEFAULT_CLIENT_FAILURE_CHECK_PERIOD;
  final ModelNode discoveryNode=CommonAttributes.DISCOVERY_GROUP_NAME.validateResolvedOperation(model);
  final String discoveryGroupName=discoveryNode.isDefined() ? discoveryNode.asString() : null;
  List<String> staticConnectors=discoveryGroupName == null ? getStaticConnectors(model) : null;
  final boolean ha=CommonAttributes.HA.validateResolvedOperation(model).asBoolean();
  final String user=CommonAttributes.USER.validateResolvedOperation(model).asString();
  final String password=CommonAttributes.PASSWORD.validateResolvedOperation(model).asString();
  if (discoveryGroupName != null) {
    return new BridgeConfiguration(name,queueName,forwardingAddress,filterString,transformerClassName,retryInterval,retryIntervalMultiplier,reconnectAttempts,useDuplicateDetection,confirmationWindowSize,clientFailureCheckPeriod,discoveryGroupName,ha,user,password);
  }
 else {
    return new BridgeConfiguration(name,queueName,forwardingAddress,filterString,transformerClassName,retryInterval,retryIntervalMultiplier,reconnectAttempts,useDuplicateDetection,confirmationWindowSize,clientFailureCheckPeriod,staticConnectors,ha,user,password);
  }
}
