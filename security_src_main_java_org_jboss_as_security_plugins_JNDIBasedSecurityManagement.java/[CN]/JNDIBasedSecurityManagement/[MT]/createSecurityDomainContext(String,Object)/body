{
  log.debug("Creating SDC for domain=" + securityDomain);
  AuthenticationManager am=createAuthenticationManager(securityDomain);
  if (cacheFactory instanceof EmbeddedCacheManager) {
    EmbeddedCacheManager cacheManager=EmbeddedCacheManager.class.cast(cacheFactory);
    Cache<Principal,DomainInfo> cache=null;
    if (cacheManager != null) {
      cacheManager.defineConfiguration(securityDomain,"auth-cache",new Configuration());
      cache=cacheManager.getCache(securityDomain);
    }
    if (cache != null && am instanceof CacheableManager) {
      @SuppressWarnings("unchecked") CacheableManager<ConcurrentMap<Principal,DomainInfo>,Principal> cm=(CacheableManager<ConcurrentMap<Principal,DomainInfo>,Principal>)am;
      cm.setCache(cache);
    }
  }
 else   if (cacheFactory instanceof DefaultAuthenticationCacheFactory) {
    DefaultAuthenticationCacheFactory cacheManager=DefaultAuthenticationCacheFactory.class.cast(cacheFactory);
    ConcurrentMap<Principal,DomainInfo> cache=cacheManager.getCache();
    if (cache != null && am instanceof CacheableManager) {
      @SuppressWarnings("unchecked") CacheableManager<ConcurrentMap<Principal,DomainInfo>,Principal> cm=(CacheableManager<ConcurrentMap<Principal,DomainInfo>,Principal>)am;
      cm.setCache(cache);
    }
  }
  if (deepCopySubjectMode) {
    setDeepCopySubjectMode(am);
  }
  SecurityDomainContext securityDomainContext=new SecurityDomainContext(am);
  securityDomainContext.setAuthorizationManager(createAuthorizationManager(securityDomain));
  securityDomainContext.setAuditManager(createAuditManager(securityDomain));
  securityDomainContext.setIdentityTrustManager(createIdentityTrustManager(securityDomain));
  securityDomainContext.setMappingManager(createMappingManager(securityDomain));
  return securityDomainContext;
}
