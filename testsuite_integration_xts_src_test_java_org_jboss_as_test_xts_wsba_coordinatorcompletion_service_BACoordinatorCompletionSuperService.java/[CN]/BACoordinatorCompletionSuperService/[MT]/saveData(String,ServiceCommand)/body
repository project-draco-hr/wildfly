{
  log.info("[BA COORDINATOR COMPL SERVICE] web method saveData('" + value + "')");
  eventLog.foundEventLogName(value);
  BusinessActivityManager activityManager=BusinessActivityManagerFactory.businessActivityManager();
  String transactionId;
  try {
    transactionId=activityManager.currentTransaction().toString();
  }
 catch (  SystemException e) {
    throw new RuntimeException("Unable to lookup existing busines activity",e);
  }
  BACoordinationCompletionParticipant participantBA=BACoordinationCompletionParticipant.getSomeParticipant(transactionId);
  if (participantBA != null && ServiceCommand.isPresent(REUSE_BA_PARTICIPANT,serviceCommands)) {
    log.info("[BA COORDINATOR COMPL SERVICE] Re-using the existing participant, already registered for this BA - command set to: " + REUSE_BA_PARTICIPANT);
  }
 else {
    try {
      participantBA=new BACoordinationCompletionParticipant(serviceCommands,eventLog,transactionId,value);
      BACoordinationCompletionParticipant.recordParticipant(transactionId,participantBA);
      log.info("[BA COORDINATOR COMPL SERVICE] Enlisting a participant into the BA");
      BAParticipantManager baParticipantManager=activityManager.enlistForBusinessAgreementWithCoordinatorCompletion(participantBA,"BACoordinatorCompletition:" + new Uid().toString());
      if (ServiceCommand.isPresent(CANNOT_COMPLETE,serviceCommands)) {
        baParticipantManager.cannotComplete();
        return;
      }
      if (ServiceCommand.isPresent(DO_COMPLETE,serviceCommands)) {
        throw new RuntimeException("Only ParticipantCompletion participants are supposed to call complete. " + "CoordinatorCompletion participants need to wait to be notified by the coordinator.");
      }
    }
 catch (    Exception e) {
      log.error("[BA COORDINATOR COMPL SERVICE] Participant enlistment failed",e);
      throw new RuntimeException("Error enlisting participant",e);
    }
  }
  participantBA.addValue(value);
  if (ServiceCommand.isPresent(APPLICATION_EXCEPTION,serviceCommands)) {
    throw new TestApplicationException("Intentionally thrown Application Exception - service command set to: " + APPLICATION_EXCEPTION);
  }
  log.info("[BA COORDINATOR COMPL SERVICE] Invoking the back-end business logic - saving value: " + value);
}
