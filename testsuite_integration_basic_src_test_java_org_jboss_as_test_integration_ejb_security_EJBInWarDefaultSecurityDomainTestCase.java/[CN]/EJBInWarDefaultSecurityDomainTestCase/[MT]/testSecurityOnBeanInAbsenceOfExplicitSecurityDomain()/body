{
  final Context ctx=new InitialContext();
  final Restriction restrictedBean=(Restriction)ctx.lookup("java:module/" + BeanWithoutExplicitSecurityDomain.class.getSimpleName() + "!"+ Restriction.class.getName());
  try {
    restrictedBean.restrictedMethod();
    Assert.fail("Call to restrictedMethod() method was expected to fail");
  }
 catch (  EJBAccessException ejbae) {
  }
  final FullAccess fullAccessBean=(FullAccess)ctx.lookup("java:module/" + BeanWithoutExplicitSecurityDomain.class.getSimpleName() + "!"+ FullAccess.class.getName());
  fullAccessBean.doAnything();
  final BeanWithoutExplicitSecurityDomain specificRoleAccessBean=(BeanWithoutExplicitSecurityDomain)ctx.lookup("java:module/" + BeanWithoutExplicitSecurityDomain.class.getSimpleName() + "!"+ BeanWithoutExplicitSecurityDomain.class.getName());
  try {
    specificRoleAccessBean.allowOnlyRoleTwoToAccess();
    Assert.fail("Invocation was expected to fail since only a specific role was expected to be allowed to access the bean method");
  }
 catch (  EJBAccessException ejbae) {
  }
  LoginContext lc=Util.getCLMLoginContext("user1","password1");
  lc.login();
  try {
    specificRoleAccessBean.allowOnlyRoleOneToAccess();
    try {
      specificRoleAccessBean.allowOnlyRoleTwoToAccess();
      Assert.fail("Call to toBeInvokedByRole2() was expected to fail");
    }
 catch (    EJBAccessException ejbae) {
    }
  }
  finally {
    lc.logout();
  }
  lc=Util.getCLMLoginContext("user2","password2");
  lc.login();
  try {
    specificRoleAccessBean.allowOnlyRoleTwoToAccess();
    try {
      specificRoleAccessBean.allowOnlyRoleOneToAccess();
      Assert.fail("Call to toBeInvokedOnlyByRole1() was expected to fail");
    }
 catch (    EJBAccessException ejbae) {
    }
  }
  finally {
    lc.logout();
  }
}
