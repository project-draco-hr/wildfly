{
  requireNoAttributes(reader);
  final ModelNode eeSubSystem=createEESubSystemAddOperation();
  list.add(eeSubSystem);
  final EnumSet<Element> encountered=EnumSet.noneOf(Element.class);
  while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
switch (Namespace.forUri(reader.getNamespaceURI())) {
case EE_1_0:
{
        final Element element=Element.forName(reader.getLocalName());
        if (!encountered.add(element)) {
          throw unexpectedElement(reader);
        }
switch (element) {
case GLOBAL_MODULES:
{
            final ModelNode model=parseGlobalModules(reader);
            eeSubSystem.get(CommonAttributes.GLOBAL_MODULES).set(model);
            break;
          }
case EAR_SUBDEPLOYMENTS_ISOLATED:
{
          Location location=reader.getLocation();
          final String earSubDeploymentsIsolated=this.parseEarSubDeploymentsIsolatedElement(reader);
          CommonAttributes.EAR_SUBDEPLOYMENTS_ISOLATED.parseAndSetParameter(earSubDeploymentsIsolated,eeSubSystem,location);
          break;
        }
default :
{
        throw unexpectedElement(reader);
      }
  }
  break;
}
default :
{
throw unexpectedElement(reader);
}
}
}
}
