{
  final ModelNode eeSubSystem=createEESubSystemAddOperation();
  list.add(eeSubSystem);
  Boolean earSubDeploymentsIsolated=null;
  final int attrCount=reader.getAttributeCount();
  for (int i=0; i < attrCount; i++) {
    requireNoNamespaceAttribute(reader,i);
    final String attributeValue=reader.getAttributeValue(i);
    final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case EAR_SUBDEPLOYMENTS_ISOLATED:
{
        earSubDeploymentsIsolated=Boolean.parseBoolean(attributeValue);
        break;
      }
default :
    throw ParseUtils.unexpectedAttribute(reader,i);
}
}
if (earSubDeploymentsIsolated != null) {
eeSubSystem.get(CommonAttributes.EAR_SUBDEPLOYMENTS_ISOLATED).set(earSubDeploymentsIsolated.booleanValue());
}
final EnumSet<Element> encountered=EnumSet.noneOf(Element.class);
while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
switch (Namespace.forUri(reader.getNamespaceURI())) {
case EE_1_0:
{
    final Element element=Element.forName(reader.getLocalName());
    if (!encountered.add(element)) {
      throw unexpectedElement(reader);
    }
switch (element) {
case GLOBAL_MODULES:
{
        final ModelNode model=parseGlobalModules(reader);
        eeSubSystem.get(CommonAttributes.GLOBAL_MODULES).set(model);
        break;
      }
default :
{
      throw unexpectedElement(reader);
    }
}
break;
}
default :
{
throw unexpectedElement(reader);
}
}
}
}
