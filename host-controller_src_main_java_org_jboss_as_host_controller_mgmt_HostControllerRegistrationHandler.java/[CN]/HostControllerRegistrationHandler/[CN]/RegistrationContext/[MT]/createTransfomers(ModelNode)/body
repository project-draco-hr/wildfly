{
  final ModelNode subsystems=executeBlocking(new IOTask<ModelNode>(){
    @Override void sendMessage(    FlushableDataOutput output) throws IOException {
      sendResponse(output,DomainControllerProtocol.PARAM_OK,extensions);
    }
  }
);
  if (failed) {
    throw new OperationFailedException(new ModelNode("failed to setup transformers"));
  }
  final int major=hostInfo.get(MANAGEMENT_MAJOR_VERSION).asInt();
  final int minor=hostInfo.get(MANAGEMENT_MINOR_VERSION).asInt();
  final int micro=hostInfo.hasDefined(MANAGEMENT_MICRO_VERSION) ? hostInfo.get(MANAGEMENT_MICRO_VERSION).asInt() : 0;
  final TransformationTarget target=TransformationTargetImpl.create(major,minor,micro,subsystems);
  final Transformers transformers=Transformers.Factory.create(target);
  this.transformers=transformers;
  return transformers;
}
