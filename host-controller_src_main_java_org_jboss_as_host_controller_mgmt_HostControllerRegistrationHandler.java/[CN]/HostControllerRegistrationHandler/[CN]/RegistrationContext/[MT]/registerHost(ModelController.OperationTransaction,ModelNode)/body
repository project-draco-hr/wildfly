{
  final Boolean registered=executeBlocking(new IOTask<Boolean>(){
    @Override void sendMessage(    final FlushableDataOutput output) throws IOException {
      sendResponse(output,DomainControllerProtocol.PARAM_OK,result);
    }
  }
);
  if (!registered) {
    transaction.rollback();
    return;
  }
synchronized (this) {
    Long pingPongId=hostInfo.hasDefined(RemoteDomainConnectionService.DOMAIN_CONNECTION_ID) ? hostInfo.get(RemoteDomainConnectionService.DOMAIN_CONNECTION_ID).asLong() : null;
    domainController.registerRemoteHost(hostName,handler,transformers,pingPongId);
    if (!failed) {
      transaction.commit();
    }
 else {
      transaction.rollback();
      return;
    }
  }
  final String productName;
  if (hostInfo.hasDefined(PRODUCT_NAME)) {
    final String name=hostInfo.get(PRODUCT_NAME).asString();
    final String version1=hostInfo.get(PRODUCT_VERSION).asString();
    final String version2=hostInfo.get(RELEASE_VERSION).asString();
    productName=ProductConfig.getPrettyVersionString(name,version1,version2);
  }
 else {
    String version1=hostInfo.get(RELEASE_VERSION).asString();
    String version2=hostInfo.get(RELEASE_CODENAME).asString();
    productName=ProductConfig.getPrettyVersionString(null,version1,version2);
  }
  DOMAIN_LOGGER.registeredRemoteSlaveHost(hostName,productName);
}
