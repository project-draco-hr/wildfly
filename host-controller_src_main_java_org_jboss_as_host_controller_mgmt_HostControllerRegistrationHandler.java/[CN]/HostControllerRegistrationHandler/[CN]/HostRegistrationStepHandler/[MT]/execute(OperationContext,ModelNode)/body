{
  context.acquireControllerLock();
  if (domainController.isHostRegistered(registrationContext.hostName)) {
    final String failureDescription=DomainControllerMessages.MESSAGES.slaveAlreadyRegistered(registrationContext.hostName);
    registrationContext.failed(SlaveRegistrationException.ErrorCode.HOST_ALREADY_EXISTS,failureDescription);
    context.getFailureDescription().set(failureDescription);
    context.completeStep();
    return;
  }
  final Resource root=context.readResourceFromRoot(PathAddress.EMPTY_ADDRESS.append(PathElement.pathElement(EXTENSION)),true);
  final HostInfo hostInfo=registrationContext.hostInfo;
  final int major=hostInfo.getManagementMajorVersion();
  final int minor=hostInfo.getManagementMinorVersion();
  final int micro=hostInfo.getManagementMicroVersion();
  boolean as711=(major == 1 && minor == 1);
  if (as711) {
    final OperationFailedException failure=HostControllerMessages.MESSAGES.unsupportedManagementVersionForHost(major,minor,1,2);
    registrationContext.failed(failure);
    throw failure;
  }
  final TransformationTarget target=TransformationTargetImpl.create(transformerRegistry,ModelVersion.create(major,minor,micro),Collections.<PathAddress,ModelVersion>emptyMap(),hostInfo,TransformationTarget.TransformationTargetType.HOST);
  final Transformers transformers=Transformers.Factory.create(target);
  final ModelNode extensions=new ModelNode();
  final Resource transformed=transformers.transformResource(Transformers.Factory.getTransformationContext(target,context),root);
  final Collection<Resource.ResourceEntry> resources=transformed.getChildren(EXTENSION);
  for (  final Resource.ResourceEntry entry : resources) {
    extensions.add(entry.getName());
  }
  if (!extensions.isDefined()) {
    throw new OperationFailedException(extensions);
  }
  registrationContext.processSubsystems(transformers,extensions);
  final ReadMasterDomainModelHandler handler=new ReadMasterDomainModelHandler(transformers);
  context.addStep(READ_DOMAIN_MODEL,handler,OperationContext.Stage.MODEL);
  context.completeStep(OperationContext.RollbackHandler.NOOP_ROLLBACK_HANDLER);
}
