{
  context.acquireControllerLock();
  if (domainController.isHostRegistered(registrationContext.hostName)) {
    final String failureDescription=DomainControllerMessages.MESSAGES.slaveAlreadyRegistered(registrationContext.hostName);
    registrationContext.failed(SlaveRegistrationException.ErrorCode.HOST_ALREADY_EXISTS,failureDescription);
    context.getFailureDescription().set(failureDescription);
    context.completeStep();
    return;
  }
  final Resource root=context.readResource(PathAddress.EMPTY_ADDRESS);
  final ModelNode hostInfo=registrationContext.hostInfo;
  boolean as711=hostInfo.get(MANAGEMENT_MAJOR_VERSION).asInt() == 1 && hostInfo.get(MANAGEMENT_MINOR_VERSION).asInt() == 1;
  final Transformers transformers;
  if (as711) {
    final OperationFailedException failure=HostControllerMessages.MESSAGES.unsupportedManagementVersionForHost(hostInfo.get(MANAGEMENT_MAJOR_VERSION).asInt(),hostInfo.get(MANAGEMENT_MINOR_VERSION).asInt(),1,2);
    registrationContext.failed(failure);
    throw failure;
  }
 else {
    final ModelNode extensions=new ModelNode();
    final Collection<Resource.ResourceEntry> resources=root.getChildren(EXTENSION);
    for (    final Resource.ResourceEntry entry : resources) {
      extensions.add(entry.getName());
    }
    transformers=registrationContext.createTransfomers(extensions);
  }
  final ReadMasterDomainModelHandler handler=new ReadMasterDomainModelHandler(transformers);
  context.addStep(READ_DOMAIN_MODEL,handler,OperationContext.Stage.MODEL);
  context.completeStep(OperationContext.RollbackHandler.NOOP_ROLLBACK_HANDLER);
}
