{
  ProtocolChannelClient client;
  ProtocolChannelClient.Configuration configuration=new ProtocolChannelClient.Configuration();
  configuration.setEndpoint(endpointInjector.getValue());
  final Connection connection;
  try {
    configuration.setUri(new URI("remote://" + host.getHostAddress() + ":"+ port));
    client=ProtocolChannelClient.create(configuration);
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
  this.handler=new TransactionalModelControllerOperationHandler(controller,executor);
  try {
    CallbackHandler handler=null;
    CallbackHandlerFactory handlerFactory=callbackFactoryInjector.getOptionalValue();
    if (handlerFactory != null) {
      handler=handlerFactory.getCallbackHandler(name);
    }
    connection=client.connectSync(handler);
    this.channelClient=client;
    channel=connection.openChannel(ManagementRemotingServices.DOMAIN_CHANNEL,OptionMap.EMPTY).get();
    channel.addCloseHandler(new CloseHandler<Channel>(){
      public void handleClose(      final Channel closed,      final IOException exception){
        connectionClosed();
      }
    }
);
    channel.receiveMessage(ManagementChannelReceiver.createDelegating(this.handler));
    masterProxy=new ExistingChannelModelControllerClient(channel,executor);
  }
 catch (  IOException e) {
    ROOT_LOGGER.cannotConnect(host.getHostAddress(),port);
    throw new IllegalStateException(e);
  }
  SlaveRegistrationException error=null;
  try {
    error=new RegisterModelControllerRequest().executeForResult(handler,channel,null);
  }
 catch (  Exception e) {
    ROOT_LOGGER.errorRetrievingDomainModel(host.getHostAddress(),port,e.getLocalizedMessage());
    throw new IllegalStateException(e);
  }
  if (error != null) {
    if (error.getErrorCode() == ErrorCode.HOST_ALREADY_EXISTS) {
      throw new HostAlreadyExistsException(error.getErrorMessage());
    }
    throw new IllegalStateException(error.getErrorMessage());
  }
  HostControllerLogger.ROOT_LOGGER.registeredAtRemoteHostController();
}
