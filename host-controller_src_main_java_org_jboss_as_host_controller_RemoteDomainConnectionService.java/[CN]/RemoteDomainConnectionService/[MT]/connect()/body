{
  AccessController.doPrivileged(new PrivilegedAction<Object>(){
    public Object run(){
      return Security.insertProviderAt(new JBossSaslProvider(),1);
    }
  }
);
  if (this.channelClient != null) {
    try {
      new UnregisterModelControllerRequest().executeForResult(executor,ManagementClientChannelStrategy.create(channel));
    }
 catch (    Exception e) {
    }
    this.channelClient.close();
    this.channelClient=null;
  }
  txOperationHandler=new TransactionalModelControllerOperationHandler(executor,controller);
  ProtocolChannelClient<ManagementChannel> client;
  ProtocolChannelClient.Configuration<ManagementChannel> configuration=new ProtocolChannelClient.Configuration<ManagementChannel>();
  configuration.setEndpointName("endpoint");
  configuration.setExecutor(RemotingServices.createExecutor());
  configuration.setUriScheme("remote");
  try {
    configuration.setUri(new URI("remote://" + host.getHostAddress() + ":"+ port));
    configuration.setChannelFactory(new ManagementChannelFactory(txOperationHandler));
    client=ProtocolChannelClient.create(configuration);
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
  try {
    CallbackHandler handler=null;
    CallbackHandlerFactory handlerFactory=callbackFactoryInjector.getOptionalValue();
    if (handlerFactory != null) {
      handler=handlerFactory.getCallbackHandler(name);
    }
    client.connect(handler);
    this.channelClient=client;
    ManagementChannel channel=client.openChannel(ManagementRemotingServices.DOMAIN_CHANNEL);
    this.channel=channel;
    channel.addCloseHandler(new CloseHandler<Channel>(){
      public void handleClose(      final Channel closed,      final IOException exception){
        connectionClosed();
      }
    }
);
    channel.startReceiving();
    masterProxy=new ExistingChannelModelControllerClient(channel);
  }
 catch (  IOException e) {
    log.warnf("Could not connect to remote domain controller %s:%d",host.getHostAddress(),port);
    throw new IllegalStateException(e);
  }
  SlaveRegistrationError error=null;
  try {
    error=new RegisterModelControllerRequest().executeForResult(executor,ManagementClientChannelStrategy.create(channel));
  }
 catch (  Exception e) {
    log.warnf("Error retrieving domain model from remote domain controller %s:%d: %s",host.getHostAddress(),port,e.getMessage());
    throw new IllegalStateException(e);
  }
  if (error != null) {
    if (error.getErrorCode() == ErrorCode.HOST_ALREADY_EXISTS) {
      log.info(error.getErrorMessage() + " - exiting");
      throw new HostAlreadyExistsException(error.getErrorMessage());
    }
    throw new IllegalStateException(error.getErrorMessage());
  }
}
