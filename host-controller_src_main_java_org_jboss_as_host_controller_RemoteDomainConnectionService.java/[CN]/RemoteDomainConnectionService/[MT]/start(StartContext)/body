{
  final RemoteDomainConnection connection;
  final ManagementChannelHandler handler;
  try {
    ThreadFactory threadFactory=new JBossThreadFactory(new ThreadGroup("domain-connection-threads"),Boolean.FALSE,null,"%G - %t",null,null,AccessController.getContext());
    this.executor=Executors.newCachedThreadPool(threadFactory);
    ThreadFactory scheduledThreadFactory=new JBossThreadFactory(new ThreadGroup("domain-connection-pinger-threads"),Boolean.TRUE,null,"%G - %t",null,null,AccessController.getContext());
    this.scheduledExecutorService=Executors.newSingleThreadScheduledExecutor(scheduledThreadFactory);
    final ModelNode hostInfo=HostInfo.createLocalHostHostInfo(localHostInfo,productConfig,ignoredDomainResourceRegistry,ReadRootResourceHandler.grabDomainResource(operationExecutor).getChildren(HOST).iterator().next());
    final OptionMap options=OptionMap.builder().set(RemotingOptions.HEARTBEAT_INTERVAL,15000).set(Options.READ_TIMEOUT,45000).set(RemotingOptions.RECEIVE_WINDOW_SIZE,ProtocolChannelClient.Configuration.WINDOW_SIZE).getMap();
    final ProtocolChannelClient.Configuration configuration=new ProtocolChannelClient.Configuration();
    configuration.setEndpoint(endpointInjector.getValue());
    configuration.setOptionMap(options);
    final SecurityRealm realm=securityRealmInjector.getOptionalValue();
    connection=new RemoteDomainConnection(localHostInfo.getLocalHostName(),hostInfo,configuration,realm,localHostInfo.getRemoteDomainControllerUsername(),localHostInfo.getRemoteDomainControllerDiscoveryOptions(),executor,scheduledExecutorService,new RemoteDomainConnection.HostRegistrationCallback(){
      @Override public ModelNode resolveSubsystemVersions(      ModelNode extensions){
        return resolveSubsystems(extensions.asList());
      }
      @Override public boolean applyDomainModel(      final List<ModelNode> bootOperations){
        return applyRemoteDomainModel(bootOperations);
      }
      @Override public void registrationComplete(      ManagementChannelHandler handler){
      }
    }
);
    handler=connection.getChannelHandler();
  }
 catch (  Exception e) {
    throw new StartException(e);
  }
 finally {
    futureClient.setClient(this);
  }
  this.connection=connection;
  this.handler=handler;
}
