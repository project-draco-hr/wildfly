{
  boolean connected=false;
  final long timeout=30000;
  final long endTime=System.currentTimeMillis() + timeout;
  int retries=0;
  while (!connected) {
    RemoteDomainConnection.RegistrationResult result=null;
    try {
      result=connection.connect();
      connected=true;
    }
 catch (    IOException e) {
      Throwable cause=e;
      while ((cause=cause.getCause()) != null) {
        if (cause instanceof SaslException) {
          throw MESSAGES.authenticationFailureUnableToConnect(cause);
        }
      }
      if (System.currentTimeMillis() > endTime) {
        throw MESSAGES.connectionToMasterTimeout(e,retries,timeout);
      }
      try {
        HostControllerLogger.ROOT_LOGGER.cannotConnect(localHostInfo.getRemoteDomainControllerHost(),localHostInfo.getRemoteDomainControllertPort());
        ReconnectPolicy.CONNECT.wait(retries);
      }
 catch (      InterruptedException ie) {
        throw MESSAGES.connectionToMasterInterrupted();
      }
    }
    if (result != null && !result.isOK()) {
switch (result.getCode()) {
case HOST_ALREADY_EXISTS:
        throw new HostAlreadyExistsException(result.getMessage());
default :
      throw new IOException(new SlaveRegistrationException(result.getCode(),result.getMessage()).marshal());
  }
}
}
if (connected) {
handler.addHandlerFactory(new TransactionalModelControllerOperationHandler(controller,handler));
masterProxy=ExistingChannelModelControllerClient.createAndAdd(handler);
}
}
