{
  boolean connected=false;
  List<DiscoveryOption> discoveryOptions=localHostInfo.getRemoteDomainControllerDiscoveryOptions();
  for (Iterator<DiscoveryOption> i=discoveryOptions.iterator(); i.hasNext(); ) {
    DiscoveryOption discoveryOption=i.next();
    final long timeout=CONNECTION_TIMEOUT;
    final long endTime=System.currentTimeMillis() + timeout;
    int retries=0;
    String host=null;
    int port=-1;
    try {
      discoveryOption.discover();
      host=discoveryOption.getRemoteDomainControllerHost();
      port=discoveryOption.getRemoteDomainControllerPort();
      connection.setUri(new URI("remote://" + NetworkUtils.formatPossibleIpv6Address(host) + ":"+ port));
      while (!connected) {
        try {
          connection.connect();
          connected=true;
        }
 catch (        IOException e) {
          Throwable cause=e;
          HostControllerLogger.ROOT_LOGGER.debugf(e,"failed to connect to %s:%d",host,port);
          while ((cause=cause.getCause()) != null) {
            if (cause instanceof SaslException) {
              throw MESSAGES.authenticationFailureUnableToConnect(cause);
            }
 else             if (cause instanceof SSLHandshakeException) {
              throw MESSAGES.sslFailureUnableToConnect(cause);
            }
 else             if (cause instanceof SlaveRegistrationException) {
              throw new IOException(cause);
            }
          }
          if (System.currentTimeMillis() > endTime) {
            throw MESSAGES.connectionToMasterTimeout(e,retries,timeout);
          }
          try {
            HostControllerLogger.ROOT_LOGGER.cannotConnect(host,port,e);
            ReconnectPolicy.CONNECT.wait(retries);
            retries++;
          }
 catch (          InterruptedException ie) {
            throw MESSAGES.connectionToMasterInterrupted();
          }
        }
      }
      if (connected) {
        handler.addHandlerFactory(new TransactionalProtocolOperationHandler(controller,handler));
        masterProxy=ExistingChannelModelControllerClient.createAndAdd(handler);
        txMasterProxy=new TransactionalDomainControllerClient(handler);
        break;
      }
    }
 catch (    Exception e) {
      if (i.hasNext()) {
        HostControllerLogger.ROOT_LOGGER.tryingAnotherDiscoveryOption(e);
      }
 else {
        HostControllerLogger.ROOT_LOGGER.noDiscoveryOptionsLeft(e);
        throw MESSAGES.discoveryOptionsFailureUnableToConnect(e);
      }
    }
  }
}
