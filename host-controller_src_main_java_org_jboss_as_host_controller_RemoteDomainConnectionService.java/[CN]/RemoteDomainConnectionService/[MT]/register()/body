{
  boolean connected=false;
  final long timeout=CONNECTION_TIMEOUT;
  final long endTime=System.currentTimeMillis() + timeout;
  int retries=0;
  while (!connected) {
    try {
      connection.connect();
      connected=true;
    }
 catch (    IOException e) {
      Throwable cause=e;
      HostControllerLogger.ROOT_LOGGER.debugf(e,"failed to connect to %s:%d",localHostInfo.getRemoteDomainControllerHost(),localHostInfo.getRemoteDomainControllerPort());
      while ((cause=cause.getCause()) != null) {
        if (cause instanceof SaslException) {
          throw MESSAGES.authenticationFailureUnableToConnect(cause);
        }
 else         if (cause instanceof SSLHandshakeException) {
          throw MESSAGES.sslFailureUnableToConnect(cause);
        }
 else         if (cause instanceof SlaveRegistrationException) {
          throw new IOException(cause);
        }
      }
      if (System.currentTimeMillis() > endTime) {
        throw MESSAGES.connectionToMasterTimeout(e,retries,timeout);
      }
      try {
        HostControllerLogger.ROOT_LOGGER.cannotConnect(localHostInfo.getRemoteDomainControllerHost(),localHostInfo.getRemoteDomainControllerPort(),e);
        ReconnectPolicy.CONNECT.wait(retries);
        retries++;
      }
 catch (      InterruptedException ie) {
        throw MESSAGES.connectionToMasterInterrupted();
      }
    }
  }
  if (connected) {
    handler.addHandlerFactory(new TransactionalProtocolOperationHandler(controller,handler));
    masterProxy=ExistingChannelModelControllerClient.createAndAdd(handler);
  }
}
