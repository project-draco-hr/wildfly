{
  boolean connected=false;
  List<DiscoveryOption> discoveryOptions=localHostInfo.getRemoteDomainControllerDiscoveryOptions();
  for (Iterator<DiscoveryOption> i=discoveryOptions.iterator(); i.hasNext(); ) {
    DiscoveryOption discoveryOption=i.next();
    final long timeout=CONNECTION_TIMEOUT;
    final long endTime=System.currentTimeMillis() + timeout;
    int retries=0;
    URI masterURI=null;
    try {
      discoveryOption.discover();
      String host=discoveryOption.getRemoteDomainControllerHost();
      int port=discoveryOption.getRemoteDomainControllerPort();
      masterURI=new URI("remote://" + NetworkUtils.formatPossibleIpv6Address(host) + ":"+ port);
      connection.setUri(masterURI);
      while (!connected) {
        try {
          connection.connect();
          connected=true;
        }
 catch (        IOException e) {
          rethrowIrrecoverableConnectionFailures(e);
          HostControllerLogger.ROOT_LOGGER.cannotConnect(masterURI,e);
          if (System.currentTimeMillis() > endTime) {
            throw MESSAGES.connectionToMasterTimeout(e,retries,timeout);
          }
          try {
            ReconnectPolicy.CONNECT.wait(retries);
            retries++;
          }
 catch (          InterruptedException ie) {
            Thread.currentThread().interrupt();
            throw MESSAGES.connectionToMasterInterrupted();
          }
        }
      }
      HostControllerLogger.ROOT_LOGGER.connectedToMaster(masterURI);
      handler.addHandlerFactory(new TransactionalProtocolOperationHandler(controller,handler));
      masterProxy=ExistingChannelModelControllerClient.createAndAdd(handler);
      txMasterProxy=new TransactionalDomainControllerClient(handler);
      break;
    }
 catch (    Exception e) {
      boolean moreOptions=i.hasNext();
      logConnectionException(masterURI,discoveryOption,moreOptions,e);
      if (!moreOptions) {
        throw MESSAGES.discoveryOptionsFailureUnableToConnect(e);
      }
    }
  }
}
