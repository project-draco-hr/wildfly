{
  byte status=input.readByte();
  final ModelNode domainModel=new ModelNode();
  domainModel.readExternal(input);
  if (status == DomainControllerProtocol.PARAM_OK) {
    context.executeAsync(new ManagementRequestContext.AsyncTask<Void>(){
      @Override public void execute(      ManagementRequestContext<Void> voidManagementRequestContext) throws Exception {
        final List<ModelNode> bootOperations=domainModel.get(ModelDescriptionConstants.RESULT).asList();
        final ModelNode operation=new ModelNode();
        operation.get(OP).set(ApplyRemoteMasterDomainModelHandler.OPERATION_NAME);
        operation.get(OPERATION_HEADERS,"execute-for-coordinator").set(true);
        operation.get(OP_ADDR).setEmptyList();
        operation.get(DOMAIN_MODEL).set(bootOperations);
        final ModelNode result;
        try {
          result=controller.execute(operation,OperationMessageHandler.logging,ModelController.OperationTransactionControl.COMMIT,OperationAttachments.EMPTY);
        }
 catch (        Exception e) {
          handler.executeRequest(context.getOperationId(),new CompleteRegistrationRequest(DomainControllerProtocol.PARAM_ERROR));
          return;
        }
        final byte param;
        if (result.get(OUTCOME).asString().equals(SUCCESS)) {
          param=DomainControllerProtocol.PARAM_OK;
        }
 else {
          param=DomainControllerProtocol.PARAM_ERROR;
        }
        handler.executeRequest(context.getOperationId(),new CompleteRegistrationRequest(param));
      }
    }
);
  }
 else {
    resultHandler.failed(new IOException("failed " + domainModel));
  }
}
