{
  if (logger.isTraceEnabled()) {
    logger.tracef("transition(): status=%s updates.size()=%s updatedCount=%s rollbacks.size()=%s rolledBackCount=%s",status,updates.size(),updatedCount.get(),rollbacks.size(),rolledBackCount.get());
  }
switch (status) {
case ACTIVE:
{
      if (updateFailure) {
        status=Status.MARKED_ROLLBACK;
      }
      if (updateFailure && allowOverallRollback) {
        handleRollback();
      }
 else       if (updatedCount.get() == updates.size()) {
        handleCommit();
      }
      break;
    }
case MARKED_ROLLBACK:
{
    if (rolledBackCount.get() == rollbacks.size()) {
      handleCommit();
    }
    break;
  }
case ROLLING_BACK:
{
  if (rolledBackCount.get() == rollbacks.size()) {
    handleCommit();
  }
  break;
}
case ROLLED_BACK:
case COMMITING:
case COMMITTED:
break;
default :
throw new IllegalStateException("Unexpected status " + status);
}
}
