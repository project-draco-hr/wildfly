{
  final Map<ServiceName,Set<ServiceName>> missingDeps=new HashMap<ServiceName,Set<ServiceName>>();
  for (  ServiceController<?> controller : servicesWithMissingDeps) {
    for (    ServiceName missing : controller.getImmediateUnavailableDependencies()) {
      Set<ServiceName> dependents=missingDeps.get(missing);
      if (dependents == null) {
        dependents=new HashSet<ServiceName>();
        missingDeps.put(missing,dependents);
      }
      dependents.add(controller.getName());
    }
  }
  final Set<ServiceName> previousMissing=previousMissingDepSet;
  final Map<ServiceName,Boolean> noLongerMissingServices=new TreeMap<ServiceName,Boolean>();
  for (  ServiceName name : previousMissing) {
    if (!missingDeps.containsKey(name)) {
      ServiceController<?> controller=serviceRegistry.getService(name);
      noLongerMissingServices.put(name,controller == null);
    }
  }
  final Map<ServiceName,MissingDependencyInfo> missingServices=new TreeMap<ServiceName,MissingDependencyInfo>();
  for (  Map.Entry<ServiceName,Set<ServiceName>> entry : missingDeps.entrySet()) {
    final ServiceName name=entry.getKey();
    if (!previousMissing.contains(name)) {
      ServiceController<?> controller=serviceRegistry.getService(name);
      boolean unavailable=controller != null;
      missingServices.put(name,new MissingDependencyInfo(name,unavailable,entry.getValue()));
    }
  }
  final Map<ServiceController<?>,String> currentFailedControllers=new TreeMap<ServiceController<?>,String>(failedControllers);
  previousMissingDepSet=new HashSet<ServiceName>(missingDeps.keySet());
  failedControllers.clear();
  boolean needReport=!missingServices.isEmpty() || !currentFailedControllers.isEmpty() || !noLongerMissingServices.isEmpty();
  return needReport ? new ContainerStateChangeReport(missingServices,currentFailedControllers,noLongerMissingServices) : null;
}
