{
  final DeploymentUnit deploymentUnit=phaseContext.getDeploymentUnit();
  final DeploymentUnit topLevelDeployment=deploymentUnit.getParent() == null ? deploymentUnit : deploymentUnit.getParent();
  if (!DeploymentTypeMarker.isType(DeploymentType.WAR,deploymentUnit)) {
    return;
  }
  if (JsfVersionMarker.getVersion(topLevelDeployment).equals(JsfVersionMarker.WAR_BUNDLES_JSF_IMPL)) {
    return;
  }
  final ModuleSpecification moduleSpecification=deploymentUnit.getAttachment(Attachments.MODULE_SPECIFICATION);
  final ModuleLoader moduleLoader=Module.getBootModuleLoader();
  String defaultJsfVersion=JSFModuleIdFactory.getInstance().getDefaultSlot();
  String jsfVersion=JsfVersionMarker.getVersion(topLevelDeployment);
  if (!moduleIdFactory.isValidJSFSlot(jsfVersion)) {
    JSFLogger.ROOT_LOGGER.unknownJSFVersion(jsfVersion,defaultJsfVersion);
    jsfVersion=defaultJsfVersion;
  }
  if (jsfVersion.equals(defaultJsfVersion) && !moduleIdFactory.isValidJSFSlot(jsfVersion)) {
    throw JSFMessages.MESSAGES.invalidDefaultJSFImpl(defaultJsfVersion);
  }
  addJSFAPI(jsfVersion,moduleSpecification,moduleLoader);
  addJSFImpl(jsfVersion,moduleSpecification,moduleLoader,topLevelDeployment);
  moduleSpecification.addSystemDependency(new ModuleDependency(moduleLoader,JSTL,false,false,false,false));
  moduleSpecification.addSystemDependency(new ModuleDependency(moduleLoader,BEAN_VALIDATION,false,false,true,false));
  moduleSpecification.addSystemDependency(new ModuleDependency(moduleLoader,JSF_SUBSYSTEM,false,false,true,false));
  addJSFInjection(jsfVersion,moduleSpecification,moduleLoader);
  WarMetaData warMetaData=deploymentUnit.getAttachment(WarMetaData.ATTACHMENT_KEY);
  addCDIFlag(warMetaData,topLevelDeployment);
}
