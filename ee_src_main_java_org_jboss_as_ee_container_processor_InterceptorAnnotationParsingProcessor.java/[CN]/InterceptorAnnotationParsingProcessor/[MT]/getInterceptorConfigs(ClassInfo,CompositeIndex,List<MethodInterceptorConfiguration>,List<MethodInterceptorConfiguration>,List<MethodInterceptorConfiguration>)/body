{
  final ClassInfo superClassInfo=index.getClassByName(classInfo.superName());
  if (superClassInfo != null) {
    getInterceptorConfigs(superClassInfo,index,classLevelInterceptorConfigurations,methodLevelInterceptorConfigurations,componentDefinedInterceptors);
  }
  final Map<DotName,List<AnnotationInstance>> classAnnotations=classInfo.annotations();
  if (classAnnotations == null) {
    return;
  }
  final List<AnnotationInstance> interceptorAnnotations=classAnnotations.get(INTERCEPTORS_ANNOTATION_NAME);
  if (interceptorAnnotations == null || interceptorAnnotations.isEmpty()) {
    return;
  }
  for (  AnnotationInstance annotationInstance : interceptorAnnotations) {
    final AnnotationValue value=annotationInstance.value();
    if (value != null)     for (    Type interceptorClass : value.asClassArray()) {
      final ClassInfo interceptorClassInfo=index.getClassByName(interceptorClass.name());
      if (interceptorClassInfo == null) {
        continue;
      }
      final MethodInfo aroundInvokeMethod=getAroundInvokeMethod(interceptorClassInfo);
      validateArgumentType(classInfo,aroundInvokeMethod);
      final AnnotationTarget target=annotationInstance.target();
      if (target instanceof MethodInfo) {
        final MethodInfo methodInfo=MethodInfo.class.cast(target);
        final List<String> argTypes=new ArrayList<String>(methodInfo.args().length);
        for (        Type argType : methodInfo.args()) {
          argTypes.add(argType.name().toString());
        }
        methodLevelInterceptorConfigurations.add(new MethodInterceptorConfiguration(interceptorClassInfo.name().toString(),aroundInvokeMethod.name(),new MethodInterceptorMatchFilter(methodInfo.name(),argTypes.toArray(new String[argTypes.size()]))));
      }
 else {
        classLevelInterceptorConfigurations.add(new MethodInterceptorConfiguration(interceptorClassInfo.name().toString(),aroundInvokeMethod.name(),MethodInterceptorAllFilter.INSTANCE));
      }
    }
  }
  final MethodInfo methodInfo=getAroundInvokeMethod(classInfo);
  if (methodInfo != null) {
    componentDefinedInterceptors.add(new MethodInterceptorConfiguration(classInfo.name().toString(),methodInfo.name(),MethodInterceptorAllFilter.INSTANCE));
  }
}
