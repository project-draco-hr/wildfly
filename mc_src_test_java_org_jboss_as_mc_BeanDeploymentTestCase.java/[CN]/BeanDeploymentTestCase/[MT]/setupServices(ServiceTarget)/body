{
  super.setupServices(serviceTarget);
  final DeploymentChain deploymentChain=new DeploymentChainImpl();
  deploymentChain.addProcessor(new ManifestAttachmentProcessor(),Phase.MANIFEST_ATTACHMENT_PROCESSOR);
  deploymentChain.addProcessor(new AnnotationIndexProcessor(),Phase.ANNOTATION_INDEX_PROCESSOR);
  deploymentChain.addProcessor(new ModuleDependencyProcessor(),Phase.MODULE_DEPENDENCY_PROCESSOR);
  deploymentChain.addProcessor(new ModuleConfigProcessor(),Phase.MODULE_CONFIG_PROCESSOR);
  deploymentChain.addProcessor(new DeploymentModuleLoaderProcessor(new DeploymentModuleLoaderImpl()),Phase.DEPLOYMENT_MODULE_LOADER_PROCESSOR);
  deploymentChain.addProcessor(new ModuleDeploymentProcessor(),Phase.MODULE_DEPLOYMENT_PROCESSOR);
  deploymentChain.addProcessor(new KernelDeploymentParsingProcessor(),Phase.MC_BEAN_DEPLOYMENT_PARSING_PROCESSOR);
  deploymentChain.addProcessor(new ParsedKernelDeploymentProcessor(),Phase.PARSED_MC_BEAN_DEPLOYMENT_PROCESSOR);
  serviceTarget.addService(DeploymentChain.SERVICE_NAME,new DeploymentChainService(deploymentChain));
  Service<Context> ns=new AbstractService<Context>(){
    @Override public Context getValue() throws IllegalStateException {
      try {
        return new MockContext();
      }
 catch (      NamingException e) {
        throw new IllegalStateException(e);
      }
    }
  }
;
  serviceTarget.addService(ContextNames.GLOBAL_CONTEXT_SERVICE_NAME,ns);
}
