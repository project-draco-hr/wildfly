{
  ModelNode accContAddr=address.clone().add(CORE_SERVICE,ACCESS_CONTROL);
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    final String value=reader.getAttributeValue(i);
    if (!isNoNamespaceAttribute(reader,i)) {
      throw ParseUtils.unexpectedAttribute(reader,i);
    }
    final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
    if (attribute == Attribute.PROVIDER) {
      ModelNode provider=AccessControlResourceDefinition.PROVIDER.parse(value,reader);
      ModelNode op=new ModelNode();
      op.get(OP).set(WRITE_ATTRIBUTE_OPERATION);
      op.get(OP_ADDR).set(accContAddr);
      op.get(NAME).set(AccessControlResourceDefinition.PROVIDER.getName());
      op.get(VALUE).set(provider);
      list.add(op);
    }
 else {
      throw unexpectedAttribute(reader,i);
    }
  }
  while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
    requireNamespace(reader,expectedNs);
    final Element element=Element.forName(reader.getLocalName());
switch (element) {
case SERVER_GROUP_SCOPED_ROLES:
      ManagementXml.parseServerGroupScopedRoles(reader,accContAddr,expectedNs,list);
    break;
case HOST_SCOPED_ROLES:
  ManagementXml.parseHostScopedRoles(reader,accContAddr,expectedNs,list);
break;
case CONSTRAINTS:
{
ManagementXml.parseAccessControlConstraints(reader,accContAddr,expectedNs,list);
break;
}
default :
{
throw unexpectedElement(reader);
}
}
}
}
