{
  parseNamespaces(reader,address,list);
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
switch (Namespace.forUri(reader.getAttributeNamespace(i))) {
case XML_SCHEMA_INSTANCE:
{
switch (Attribute.forName(reader.getAttributeLocalName(i))) {
case SCHEMA_LOCATION:
{
            parseSchemaLocations(reader,address,list,i);
            break;
          }
case NO_NAMESPACE_SCHEMA_LOCATION:
{
          break;
        }
default :
{
        throw unexpectedAttribute(reader,i);
      }
  }
  break;
}
default :
throw unexpectedAttribute(reader,i);
}
}
Element element=nextElement(reader,expectedNs);
if (element == Element.EXTENSIONS) {
parseExtensions(reader,address,expectedNs,list);
element=nextElement(reader,expectedNs);
}
if (element == Element.SYSTEM_PROPERTIES) {
parseSystemProperties(reader,address,expectedNs,list,false);
element=nextElement(reader,expectedNs);
}
if (element == Element.PATHS) {
parsePaths(reader,address,expectedNs,list,false);
element=nextElement(reader,expectedNs);
}
if (element == Element.PROFILES) {
parseProfiles(reader,address,expectedNs,list);
element=nextElement(reader,expectedNs);
}
final Set<String> interfaceNames=new HashSet<String>();
if (element == Element.INTERFACES) {
parseInterfaces(reader,interfaceNames,address,expectedNs,list,false);
element=nextElement(reader,expectedNs);
}
if (element == Element.SOCKET_BINDING_GROUPS) {
parseDomainSocketBindingGroups(reader,address,expectedNs,list,interfaceNames);
element=nextElement(reader,expectedNs);
}
if (element == Element.DEPLOYMENTS) {
parseDeployments(reader,address,expectedNs,list,false);
element=nextElement(reader,expectedNs);
}
if (element == Element.SERVER_GROUPS) {
parseServerGroups(reader,address,expectedNs,list);
element=nextElement(reader,expectedNs);
}
if (element != null) {
throw unexpectedElement(reader);
}
}
