{
  requireNoAttributes(reader);
  final Set<String> names=new HashSet<String>();
  while (reader.nextTag() != END_ELEMENT) {
    requireNamespace(reader,expectedNs);
    Element serverGroup=Element.forName(reader.getLocalName());
    if (Element.SERVER_GROUP != serverGroup) {
      throw unexpectedElement(reader);
    }
    final ModelNode groupAddOp=new ModelNode();
    groupAddOp.get(OP).set(ADD);
    groupAddOp.get(OP_ADDR);
    String name=null;
    Set<Attribute> required=EnumSet.of(Attribute.NAME,Attribute.PROFILE);
    final int count=reader.getAttributeCount();
    for (int i=0; i < count; i++) {
      final String value=reader.getAttributeValue(i);
      if (!isNoNamespaceAttribute(reader,i)) {
        throw ParseUtils.unexpectedAttribute(reader,i);
      }
 else {
        final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
        required.remove(attribute);
switch (attribute) {
case NAME:
{
            if (!names.add(value)) {
              throw ParseUtils.duplicateNamedElement(reader,value);
            }
            name=value;
            break;
          }
case PROFILE:
{
          ServerGroupResourceDefinition.PROFILE.parseAndSetParameter(value,groupAddOp,reader);
          break;
        }
case MANAGEMENT_SUBSYSTEM_ENDPOINT:
{
        ServerGroupResourceDefinition.MANAGEMENT_SUBSYSTEM_ENDPOINT.parseAndSetParameter(value,groupAddOp,reader);
        break;
      }
default :
    throw ParseUtils.unexpectedAttribute(reader,i);
}
}
}
if (!required.isEmpty()) {
throw missingRequired(reader,required);
}
final ModelNode groupAddress=new ModelNode().set(address);
groupAddress.add(ModelDescriptionConstants.SERVER_GROUP,name);
groupAddOp.get(OP_ADDR).set(groupAddress);
list.add(groupAddOp);
boolean sawDeployments=false;
while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
requireNamespace(reader,expectedNs);
final Element element=Element.forName(reader.getLocalName());
switch (element) {
case JVM:
{
  JvmXml.parseJvm(reader,groupAddress,expectedNs,list,new HashSet<String>());
  break;
}
case SOCKET_BINDING_GROUP:
{
parseSocketBindingGroupRef(reader,groupAddOp,ServerGroupResourceDefinition.SOCKET_BINDING_GROUP,ServerGroupResourceDefinition.SOCKET_BINDING_PORT_OFFSET);
break;
}
case DEPLOYMENTS:
{
if (sawDeployments) {
throw MESSAGES.alreadyDefined(element.getLocalName(),reader.getLocation());
}
sawDeployments=true;
List<ModelNode> deployments=new ArrayList<ModelNode>();
parseDeployments(reader,groupAddress,expectedNs,deployments,EnumSet.of(Attribute.NAME,Attribute.RUNTIME_NAME,Attribute.ENABLED),Collections.<Element>emptySet(),true);
list.addAll(deployments);
break;
}
case DEPLOYMENT_OVERLAYS:
{
parseDeploymentOverlays(reader,expectedNs,groupAddress,list,false,true);
break;
}
case SYSTEM_PROPERTIES:
{
parseSystemProperties(reader,groupAddress,expectedNs,list,false);
break;
}
default :
throw ParseUtils.unexpectedElement(reader);
}
}
}
}
