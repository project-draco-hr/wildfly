{
  requireNoAttributes(reader);
  final Set<String> names=new HashSet<String>();
  while (reader.nextTag() != END_ELEMENT) {
    requireNamespace(reader,expectedNs);
    Element element=Element.forName(reader.getLocalName());
    if (Element.PROFILE != element) {
      throw unexpectedElement(reader);
    }
    requireSingleAttribute(reader,Attribute.NAME.getLocalName());
    final String name=reader.getAttributeValue(0);
    if (!names.add(name)) {
      throw ControllerLogger.ROOT_LOGGER.duplicateDeclaration("profile",name,reader.getLocation());
    }
    final Map<String,List<ModelNode>> profileOps=new LinkedHashMap<String,List<ModelNode>>();
    while (reader.nextTag() != END_ELEMENT) {
      Namespace ns=Namespace.forUri(reader.getNamespaceURI());
switch (ns) {
case UNKNOWN:
{
          if (Element.forName(reader.getLocalName()) != Element.SUBSYSTEM) {
            throw unexpectedElement(reader);
          }
          String namespace=reader.getNamespaceURI();
          if (profileOps.containsKey(namespace)) {
            throw ControllerLogger.ROOT_LOGGER.duplicateDeclaration("subsystem",name,reader.getLocation());
          }
          final List<ModelNode> subsystems=new ArrayList<ModelNode>();
          reader.handleAny(subsystems);
          profileOps.put(namespace,subsystems);
          break;
        }
case DOMAIN_1_0:
case DOMAIN_1_1:
case DOMAIN_1_2:
case DOMAIN_1_3:
{
        requireNamespace(reader,expectedNs);
        if (profileOps.size() > 0) {
          throw unexpectedElement(reader);
        }
        if (Element.forName(reader.getLocalName()) != Element.INCLUDE) {
          throw unexpectedElement(reader);
        }
        if (ns == Namespace.DOMAIN_1_0) {
          HOST_CONTROLLER_LOGGER.warnIgnoringProfileInclude(reader.getLocation());
        }
        throw unexpectedElement(reader);
      }
default :
{
      throw unexpectedElement(reader);
    }
}
}
Set<ProfileParsingCompletionHandler> completionHandlers=extensionRegistry.getProfileParsingCompletionHandlers();
for (ProfileParsingCompletionHandler completionHandler : completionHandlers) {
completionHandler.handleProfileParsingCompletion(profileOps,list);
}
final ModelNode profile=new ModelNode();
profile.get(OP).set(ADD);
profile.get(OP_ADDR).set(address).add(ModelDescriptionConstants.PROFILE,name);
list.add(profile);
for (List<ModelNode> subsystems : profileOps.values()) {
for (final ModelNode update : subsystems) {
  final ModelNode subsystemAddress=address.clone().set(address).add(ModelDescriptionConstants.PROFILE,name);
  for (  final Property path : update.get(OP_ADDR).asPropertyList()) {
    subsystemAddress.add(path.getName(),path.getValue().asString());
  }
  update.get(OP_ADDR).set(subsystemAddress);
  list.add(update);
}
}
}
}
