{
  parseNamespaces(reader,address,list);
  readDomainElementAttributes_1_1(reader,address,list);
  Element element=nextElement(reader,expectedNs);
  if (element == Element.EXTENSIONS) {
    extensionXml.parseExtensions(reader,address,expectedNs,list);
    element=nextElement(reader,expectedNs);
  }
  if (element == Element.SYSTEM_PROPERTIES) {
    parseSystemProperties(reader,address,expectedNs,list,false);
    element=nextElement(reader,expectedNs);
  }
  if (element == Element.PATHS) {
    parsePaths(reader,address,expectedNs,list,false);
    element=nextElement(reader,expectedNs);
  }
  if (element == Element.PROFILES) {
    parseProfiles(reader,address,expectedNs,list);
    element=nextElement(reader,expectedNs);
  }
  final Set<String> interfaceNames=new HashSet<String>();
  if (element == Element.INTERFACES) {
    parseInterfaces(reader,interfaceNames,address,expectedNs,list,false);
    element=nextElement(reader,expectedNs);
  }
  if (element == Element.SOCKET_BINDING_GROUPS) {
    parseDomainSocketBindingGroups(reader,address,expectedNs,list,interfaceNames);
    element=nextElement(reader,expectedNs);
  }
  if (element == Element.DEPLOYMENTS) {
    parseDeployments(reader,address,expectedNs,list,EnumSet.of(Attribute.NAME,Attribute.RUNTIME_NAME),EnumSet.of(Element.CONTENT,Element.FS_ARCHIVE,Element.FS_EXPLODED),false);
    element=nextElement(reader,expectedNs);
  }
  if (element == Element.SERVER_GROUPS) {
    parseServerGroups(reader,address,expectedNs,list);
    element=nextElement(reader,expectedNs);
  }
  if (element == Element.MANAGEMENT_CLIENT_CONTENT) {
    parseManagementClientContent(reader,address,expectedNs,list);
    element=nextElement(reader,expectedNs);
  }
 else   if (element == null) {
    initializeRolloutPlans(address,list);
  }
 else {
    throw unexpectedElement(reader);
  }
}
