{
  SecurityActions.setSystemProperty("log4j.defaultInitOverride","true");
  new BridgeRepositorySelector().start();
  try {
    Class.forName(ConsoleHandler.class.getName(),true,ConsoleHandler.class.getClassLoader());
  }
 catch (  Throwable ignored) {
  }
  StdioContext.install();
  try {
    Module.registerURLStreamHandlerFactoryModule(Module.getBootModuleLoader().loadModule(ModuleIdentifier.create("org.jboss.vfs")));
    final ParsedOptions options=determineEnvironment(args,new Properties(SecurityActions.getSystemProperties()),SecurityActions.getSystemEnvironment(),ServerEnvironment.LaunchType.APPCLIENT);
    ServerEnvironment serverEnvironment=options.environment;
    final List<String> clientArgs=options.clientArguments;
    if (clientArgs.isEmpty()) {
      System.err.println(MESSAGES.appClientNotSpecified());
      usage();
      abort(null);
    }
 else {
      final QName rootElement=new QName(Namespace.CURRENT.getUriString(),"server");
      final String file=clientArgs.get(0);
      final List<String> params=clientArgs.subList(1,clientArgs.size());
      final String deploymentName;
      final String earPath;
      int pos=file.lastIndexOf("#");
      if (pos == -1) {
        earPath=file;
        deploymentName=null;
      }
 else {
        deploymentName=file.substring(pos + 1);
        earPath=file.substring(0,pos);
      }
      File realFile=new File(earPath);
      if (!realFile.exists()) {
        throw MESSAGES.cannotFindAppClientFile(realFile.getAbsoluteFile());
      }
      final Bootstrap bootstrap=Bootstrap.Factory.newInstance();
      final Bootstrap.Configuration configuration=new Bootstrap.Configuration(serverEnvironment);
      configuration.setModuleLoader(Module.getBootModuleLoader());
      final ExtensionRegistry extensionRegistry=configuration.getExtensionRegistry();
      final AppClientXml parser=new AppClientXml(Module.getBootModuleLoader(),extensionRegistry);
      final Bootstrap.ConfigurationPersisterFactory configurationPersisterFactory=new Bootstrap.ConfigurationPersisterFactory(){
        @Override public ExtensibleConfigurationPersister createConfigurationPersister(        ServerEnvironment serverEnvironment,        ExecutorService executorService){
          ExtensibleConfigurationPersister persister=new ApplicationClientConfigurationPersister(earPath,deploymentName,options.hostUrl,params,serverEnvironment.getServerConfigurationFile().getBootFile(),rootElement,parser);
          extensionRegistry.setWriterRegistry(persister);
          return persister;
        }
      }
;
      configuration.setConfigurationPersisterFactory(configurationPersisterFactory);
      bootstrap.bootstrap(configuration,Collections.<ServiceActivator>emptyList()).get();
    }
  }
 catch (  Throwable t) {
    abort(t);
  }
}
