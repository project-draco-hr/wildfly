{
  this.listener=listener;
  this.cache=cache;
  for (  Method method : listener.getClass().getMethods()) {
    for (    Map.Entry<Event.Type,Class<? extends Annotation>> entry : events.entrySet()) {
      Class<? extends Annotation> annotation=entry.getValue();
      if (method.isAnnotationPresent(annotation)) {
        List<Method> methods=this.methods.get(entry.getValue());
        if (methods == null) {
          methods=new LinkedList<Method>();
          this.methods.put(entry.getKey(),methods);
        }
        methods.add(method);
      }
    }
  }
}
