{
  LOGGER.infoActivatingSubsystem();
  final Activation activationMode=getActivationMode(operation);
  final InitialDeploymentTracker deploymentTracker=new InitialDeploymentTracker(context,activationMode);
  context.addStep(new OperationStepHandler(){
    public void execute(    OperationContext context,    ModelNode operation) throws OperationFailedException {
      ServiceTarget serviceTarget=context.getServiceTarget();
      newControllers.add(SubsystemState.addService(serviceTarget,activationMode));
      newControllers.add(BundleInstallIntegration.addService(serviceTarget));
      newControllers.add(FrameworkBootstrapService.addService(serviceTarget,verificationHandler));
      newControllers.add(PersistentBundlesIntegration.addService(serviceTarget,deploymentTracker));
      context.completeStep();
    }
  }
,OperationContext.Stage.RUNTIME);
  context.addStep(new AbstractDeploymentChainStep(){
    protected void execute(    DeploymentProcessorTarget processorTarget){
      processorTarget.addDeploymentProcessor(Phase.STRUCTURE,Phase.STRUCTURE_OSGI_MANIFEST,new OSGiManifestStructureProcessor());
      processorTarget.addDeploymentProcessor(Phase.PARSE,Phase.PARSE_OSGI_BUNDLE_INFO,new OSGiBundleInfoParseProcessor());
      processorTarget.addDeploymentProcessor(Phase.PARSE,Phase.PARSE_OSGI_XSERVICE_PROPERTIES,new OSGiXServiceParseProcessor());
      processorTarget.addDeploymentProcessor(Phase.PARSE,Phase.PARSE_OSGI_DEPLOYMENT,new BundleDeploymentProcessor());
      processorTarget.addDeploymentProcessor(Phase.INSTALL,Phase.INSTALL_BUNDLE_CONTEXT_BINDING,new BundleContextBindingProcessor());
      processorTarget.addDeploymentProcessor(Phase.INSTALL,Phase.INSTALL_OSGI_DEPLOYMENT,new BundleInstallProcessor(deploymentTracker));
      processorTarget.addDeploymentProcessor(Phase.INSTALL,Phase.INSTALL_OSGI_MODULE,new ModuleRegisterProcessor());
    }
  }
,OperationContext.Stage.RUNTIME);
  context.addStep(new OperationStepHandler(){
    @Override public void execute(    OperationContext context,    ModelNode operation) throws OperationFailedException {
      ServiceBuilder<Void> builder=context.getServiceTarget().addService(Services.JBOSGI_BASE_NAME.append("OSGiSubsystem").append("initialize"),new AbstractService<Void>(){
        @SuppressWarnings("unchecked") @Override public void start(        StartContext context) throws StartException {
          try {
            ServiceContainer ctr=context.getController().getServiceContainer();
            ServiceController<Bundle> sc=(ServiceController<Bundle>)ctr.getRequiredService(Services.SYSTEM_BUNDLE);
            resource.setBundleContextServiceController(sc);
          }
  finally {
            context.getController().setMode(Mode.REMOVE);
          }
        }
      }
);
      builder.addDependency(Services.SYSTEM_BUNDLE);
      builder.setInitialMode(Mode.PASSIVE);
      builder.install();
      context.completeStep();
    }
  }
,OperationContext.Stage.RUNTIME);
  LOGGER.debugf("Activated OSGi Subsystem");
}
