{
  LOGGER.infoActivatingSubsystem();
  final Activation activation=getActivationMode(operation);
  final ServiceTarget serviceTarget=context.getServiceTarget();
  final InitialDeploymentTracker deploymentTracker=new InitialDeploymentTracker(context,verificationHandler);
  final ModuleRegistrationTracker registrationTracker=new ModuleRegistrationTracker();
  final List<SubsystemExtension> extensions=new ArrayList<SubsystemExtension>();
  final Iterator<SubsystemExtension> services=ServiceLoader.load(SubsystemExtension.class,getClass().getClassLoader()).iterator();
  while (services.hasNext()) {
    extensions.add(services.next());
  }
  FrameworkActivator.create(serviceTarget,activation == Activation.LAZY);
  context.addStep(new OperationStepHandler(){
    @Override public void execute(    OperationContext context,    ModelNode operation) throws OperationFailedException {
      newControllers.add(FrameworkBootstrapService.addService(serviceTarget,resource,extensions,verificationHandler));
      newControllers.add(registrationTracker.install(serviceTarget,verificationHandler));
      context.completeStep(OperationContext.RollbackHandler.NOOP_ROLLBACK_HANDLER);
    }
  }
,OperationContext.Stage.RUNTIME);
  context.addStep(new AbstractDeploymentChainStep(){
    @Override protected void execute(    DeploymentProcessorTarget processorTarget){
      processorTarget.addDeploymentProcessor(OSGiExtension.SUBSYSTEM_NAME,Phase.STRUCTURE,Phase.STRUCTURE_OSGI_MANIFEST,new OSGiManifestStructureProcessor());
      processorTarget.addDeploymentProcessor(OSGiExtension.SUBSYSTEM_NAME,Phase.STRUCTURE,Phase.STRUCTURE_BUNDLE_SUB_DEPLOYMENT,new BundleSubDeploymentMarkingProcessor());
      processorTarget.addDeploymentProcessor(OSGiExtension.SUBSYSTEM_NAME,Phase.PARSE,Phase.PARSE_OSGI_BUNDLE_INFO,new OSGiBundleInfoParseProcessor());
      processorTarget.addDeploymentProcessor(OSGiExtension.SUBSYSTEM_NAME,Phase.PARSE,Phase.PARSE_OSGI_PROPERTIES,new OSGiXServiceParseProcessor());
      processorTarget.addDeploymentProcessor(OSGiExtension.SUBSYSTEM_NAME,Phase.PARSE,Phase.PARSE_OSGI_DEPLOYMENT,new BundleDeploymentProcessor());
      processorTarget.addDeploymentProcessor(OSGiExtension.SUBSYSTEM_NAME,Phase.PARSE,Phase.PARSE_OSGI_COMPONENTS,new OSGiComponentParseProcessor());
      processorTarget.addDeploymentProcessor(OSGiExtension.SUBSYSTEM_NAME,Phase.PARSE,Phase.PARSE_OSGI_SUBSYSTEM_ACTIVATOR,new FrameworkActivateProcessor(deploymentTracker));
      processorTarget.addDeploymentProcessor(OSGiExtension.SUBSYSTEM_NAME,Phase.REGISTER,Phase.REGISTER_BUNDLE_INSTALL,new BundleInstallProcessor(deploymentTracker));
      processorTarget.addDeploymentProcessor(OSGiExtension.SUBSYSTEM_NAME,Phase.CONFIGURE_MODULE,Phase.CONFIGURE_RESOLVE_BUNDLE,new BundleResolveProcessor());
      processorTarget.addDeploymentProcessor(OSGiExtension.SUBSYSTEM_NAME,Phase.CONFIGURE_MODULE,Phase.CONFIGURE_RESOLVE_SUB_BUNDLE,new BundleResolveSubProcessor());
      processorTarget.addDeploymentProcessor(OSGiExtension.SUBSYSTEM_NAME,Phase.INSTALL,Phase.INSTALL_RESOLVER_MODULE,new ModuleRegisterProcessor(registrationTracker));
      processorTarget.addDeploymentProcessor(OSGiExtension.SUBSYSTEM_NAME,Phase.INSTALL,Phase.INSTALL_BUNDLE_ACTIVATE,new BundleActivateProcessor());
    }
  }
,OperationContext.Stage.RUNTIME);
  for (  SubsystemExtension extension : extensions) {
    extension.performBoottime(context,operation,model,verificationHandler,newControllers);
  }
  newControllers.add(SubsystemState.addService(serviceTarget,activation));
}
