{
  populateSubModel(context.getSubModel(),operation);
  if (context instanceof BootOperationContext) {
    final BootOperationContext updateContext=(BootOperationContext)context;
    context.getRuntimeContext().setRuntimeTask(new RuntimeTask(){
      public void execute(      RuntimeTaskContext context) throws OperationFailedException {
        log.infof("Activating OSGi Subsystem");
        long begin=System.currentTimeMillis();
        SubsystemState subsystemState=createSubsystemState(operation);
        String value=SecurityActions.getSystemProperty("jboss.protocol.handler.modules","org.jboss.osgi.framework");
        if (!value.equals("org.jboss.osgi.framework")) {
          value=value + "|org.jboss.osgi.framework";
        }
        SecurityActions.setSystemProperty("jboss.protocol.handler.modules",value);
        ServiceTarget serviceTarget=context.getServiceTarget();
        Activation policy=subsystemState.getActivationPolicy();
        BundleContextService.addService(serviceTarget,policy);
        BundleStartupProcessor.addService(serviceTarget);
        DeployerServiceIntegration.addService(serviceTarget);
        FrameworkService.addService(serviceTarget,subsystemState);
        PackageAdminService.addService(serviceTarget);
        StartLevelService.addService(serviceTarget);
        ConfigAdminServiceImpl.addService(serviceTarget,subsystemState);
        new OSGiDeploymentActivator().activate(updateContext);
        resultHandler.handleResultComplete();
        long end=System.currentTimeMillis();
        log.debugf("Activated OSGi Subsystem in %dms",end - begin);
      }
    }
);
  }
 else {
    resultHandler.handleResultComplete();
  }
  final ModelNode compensatingOperation=new ModelNode();
  compensatingOperation.get(OP).set(REMOVE);
  compensatingOperation.get(OP_ADDR).set(operation.require(OP_ADDR));
  return new BasicOperationResult(compensatingOperation);
}
