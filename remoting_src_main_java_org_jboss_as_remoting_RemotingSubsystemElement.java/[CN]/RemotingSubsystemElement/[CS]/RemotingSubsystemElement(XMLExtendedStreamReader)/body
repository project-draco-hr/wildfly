{
  super(reader);
  String threadPoolName=null;
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    final String value=reader.getAttributeValue(i);
    if (reader.getAttributeNamespace(i) != null) {
      throw unexpectedAttribute(reader,i);
    }
 else {
      final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case THREAD_POOL_NAME:
{
          threadPoolName=value;
          break;
        }
default :
      throw unexpectedAttribute(reader,i);
  }
}
}
if (threadPoolName == null) {
throw missingRequired(reader,Collections.singleton(Attribute.THREAD_POOL_NAME));
}
this.threadPoolName=threadPoolName;
while (reader.hasNext()) {
if (reader.nextTag() == START_ELEMENT) {
switch (Namespace.forUri(reader.getNamespaceURI())) {
case REMOTING_1_0:
{
      final Element element=Element.forName(reader.getLocalName());
switch (element) {
case CONNECTOR:
{
          final ConnectorElement connector=new ConnectorElement(reader);
          connectors.put(connector.getName(),connector);
          break;
        }
default :
      throw unexpectedElement(reader);
  }
  break;
}
default :
throw unexpectedElement(reader);
}
}
}
}
