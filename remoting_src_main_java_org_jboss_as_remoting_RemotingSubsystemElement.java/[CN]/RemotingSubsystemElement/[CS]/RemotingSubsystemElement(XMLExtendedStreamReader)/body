{
  super(reader);
  String threadPoolName=null;
  final EnumSet<Attribute> required=EnumSet.of(Attribute.THREAD_POOL_NAME);
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    final String value=reader.getAttributeValue(i);
    if (reader.getAttributeNamespace(i) != null) {
      reader.handleAttribute(this,i);
    }
 else {
      final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case THREAD_POOL_NAME:
{
          threadPoolName=value;
          break;
        }
default :
      throw unexpectedAttribute(reader,i);
  }
  required.remove(attribute);
}
}
if (!required.isEmpty()) {
throw missingRequired(reader,required);
}
this.threadPoolName=threadPoolName;
while (reader.hasNext()) {
switch (reader.nextTag()) {
case END_ELEMENT:
{
    break;
  }
case START_ELEMENT:
{
  if (RemotingSubsystemElement.NAMESPACES.contains(reader.getNamespaceURI())) {
    final Element element=Element.forName(reader.getLocalName());
switch (element) {
case CONNECTOR:
{
        final ConnectorElement connector=new ConnectorElement(reader);
        connectors.put(connector.getName(),connector);
        break;
      }
default :
    throw unexpectedElement(reader);
}
}
 else {
throw unexpectedElement(reader);
}
break;
}
default :
throw new IllegalStateException();
}
}
}
