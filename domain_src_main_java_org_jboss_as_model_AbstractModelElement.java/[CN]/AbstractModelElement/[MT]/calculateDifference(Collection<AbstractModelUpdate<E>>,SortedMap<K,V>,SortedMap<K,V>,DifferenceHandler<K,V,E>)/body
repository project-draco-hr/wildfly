{
  final Iterator<Map.Entry<K,V>> ourIterator=ourMap.entrySet().iterator();
  final Iterator<Map.Entry<K,V>> theirIterator=theirMap.entrySet().iterator();
  final Comparator<? super K> comparator=comparatorOf(ourMap);
  Map.Entry<K,V> ours=null;
  Map.Entry<K,V> theirs=null;
  K ourKey=null;
  K theirKey=null;
  int diff;
  if (ourIterator.hasNext() && theirIterator.hasNext()) {
    ours=ourIterator.next();
    theirs=theirIterator.next();
    for (; ; ) {
      ourKey=ours.getKey();
      theirKey=theirs.getKey();
      diff=comparator.compare(ourKey,theirKey);
      if (diff == 0) {
        handler.handleChange(target,ourKey,ours.getValue(),theirs.getValue());
        if (!(ourIterator.hasNext() && theirIterator.hasNext())) {
          break;
        }
        ours=ourIterator.next();
        theirs=theirIterator.next();
      }
 else       if (diff < 0) {
        handler.handleRemove(target,ourKey,ours.getValue());
        if (!ourIterator.hasNext()) {
          break;
        }
        ours=ourIterator.next();
      }
 else {
        handler.handleAdd(target,theirKey,theirs.getValue());
        if (!theirIterator.hasNext()) {
          break;
        }
        ours=theirIterator.next();
      }
    }
  }
  while (ourIterator.hasNext()) {
    ours=ourIterator.next();
    handler.handleRemove(target,ours.getKey(),ours.getValue());
  }
  while (theirIterator.hasNext()) {
    theirs=theirIterator.next();
    handler.handleAdd(target,theirs.getKey(),theirs.getValue());
  }
}
