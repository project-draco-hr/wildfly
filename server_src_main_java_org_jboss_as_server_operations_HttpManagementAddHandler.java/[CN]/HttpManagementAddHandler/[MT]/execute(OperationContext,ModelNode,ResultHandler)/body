{
  final ModelNode compensatingOperation=new ModelNode();
  compensatingOperation.get(OP).set(ModelDescriptionConstants.REMOVE);
  compensatingOperation.get(OP_ADDR).set(operation.require(OP_ADDR));
  final String interfaceName=operation.require(ModelDescriptionConstants.INTERFACE).asString();
  final int port=getIntValue(operation,ModelDescriptionConstants.PORT);
  final int securePort=getIntValue(operation,ModelDescriptionConstants.SECURE_PORT);
  final String securityRealm=operation.hasDefined(SECURITY_REALM) ? operation.get(SECURITY_REALM).asString() : null;
  final ModelNode subModel=context.getSubModel();
  subModel.get(ModelDescriptionConstants.INTERFACE).set(interfaceName);
  if (port > -1) {
    subModel.get(ModelDescriptionConstants.PORT).set(port);
  }
  if (securePort > -1) {
    subModel.get(ModelDescriptionConstants.SECURE_PORT).set(securePort);
  }
  if (securityRealm != null) {
    subModel.get(ModelDescriptionConstants.SECURITY_REALM).set(securityRealm);
  }
  if (context.getRuntimeContext() != null) {
    context.getRuntimeContext().setRuntimeTask(new RuntimeTask(){
      public void execute(      RuntimeTaskContext context) throws OperationFailedException {
        final ServiceTarget serviceTarget=context.getServiceTarget();
        Logger.getLogger("org.jboss.as").infof("creating http management service using network interface (%s) port (%s) securePort (%s)",interfaceName,port,securePort);
        final HttpManagementService service=new HttpManagementService();
        ServiceBuilder builder=serviceTarget.addService(HttpManagementService.SERVICE_NAME,service).addDependency(NetworkInterfaceService.JBOSS_NETWORK_INTERFACE.append(interfaceName),NetworkInterfaceBinding.class,service.getInterfaceInjector()).addDependency(Services.JBOSS_SERVER_CONTROLLER,ModelController.class,service.getModelControllerInjector()).addDependency(AbstractPathService.pathNameOf(ServerEnvironment.SERVER_TEMP_DIR),String.class,service.getTempDirInjector()).addInjection(service.getPortInjector(),port).addInjection(service.getSecurePortInjector(),securePort).addInjection(service.getExecutorServiceInjector(),Executors.newCachedThreadPool(new JBossThreadFactory(new ThreadGroup("HttpManagementService-threads"),Boolean.FALSE,null,"%G - %t",null,null,AccessController.getContext())));
        if (securityRealm != null) {
          builder.addDependency(SecurityRealmService.BASE_SERVICE_NAME.append(securityRealm),SecurityRealmService.class,service.getSecurityRealmInjector());
        }
        builder.setInitialMode(ServiceController.Mode.ACTIVE).install();
        resultHandler.handleResultComplete();
      }
    }
);
  }
 else {
    resultHandler.handleResultComplete();
  }
  return new BasicOperationResult(compensatingOperation);
}
