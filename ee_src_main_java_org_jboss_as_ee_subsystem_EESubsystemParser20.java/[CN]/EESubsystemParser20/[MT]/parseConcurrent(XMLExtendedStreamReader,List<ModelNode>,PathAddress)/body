{
  requireNoAttributes(reader);
  final EnumSet<Element> required=EnumSet.of(Element.DEFAULT_CONTEXT_SERVICE,Element.DEFAULT_MANAGED_THREAD_FACTORY,Element.DEFAULT_MANAGED_EXECUTOR_SERVICE,Element.DEFAULT_MANAGED_SCHEDULED_EXECUTOR_SERVICE);
  while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
    final Element element=Element.forName(reader.getLocalName());
    required.remove(element);
switch (element) {
case DEFAULT_CONTEXT_SERVICE:
{
        parseDefaultContextService(reader,operations,subsystemPathAddress);
        break;
      }
case DEFAULT_MANAGED_THREAD_FACTORY:
{
      parseDefaultManagedThreadFactory(reader,operations,subsystemPathAddress);
      break;
    }
case DEFAULT_MANAGED_EXECUTOR_SERVICE:
{
    parseDefaultManagedExecutorService(reader,operations,subsystemPathAddress);
    break;
  }
case DEFAULT_MANAGED_SCHEDULED_EXECUTOR_SERVICE:
{
  parseDefaultManagedScheduledExecutorService(reader,operations,subsystemPathAddress);
  break;
}
case MANAGED_THREAD_FACTORIES:
{
parseManagedThreadFactories(reader,operations,subsystemPathAddress);
break;
}
case MANAGED_EXECUTOR_SERVICES:
{
parseManagedExecutorServices(reader,operations,subsystemPathAddress);
break;
}
case MANAGED_SCHEDULED_EXECUTOR_SERVICES:
{
parseManagedScheduledExecutorServices(reader,operations,subsystemPathAddress);
break;
}
default :
{
throw unexpectedElement(reader);
}
}
}
if (!required.isEmpty()) {
throw missingRequired(reader,required);
}
}
