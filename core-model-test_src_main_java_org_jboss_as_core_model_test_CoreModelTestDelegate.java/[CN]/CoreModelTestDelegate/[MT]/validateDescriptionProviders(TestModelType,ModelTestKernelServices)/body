{
  ModelNode op=new ModelNode();
  op.get(OP).set("read-resource-description");
  op.get(OP_ADDR).setEmptyList();
  op.get("recursive").set(true);
  op.get("inherited").set(false);
  op.get("operations").set(true);
  op.get("include-aliases").set(true);
  ModelNode result=kernelServices.executeOperation(op);
  if (result.hasDefined(FAILURE_DESCRIPTION)) {
    throw new RuntimeException(result.get(FAILURE_DESCRIPTION).asString());
  }
  ModelNode model=result.get(RESULT);
  if (type == TestModelType.HOST) {
    model=model.require("children").require("host").require("model-description").require("master");
  }
  System.out.println(model);
  ValidationConfiguration config=KnownIssuesValidationConfiguration.createAndFixupModel(type,model);
  ModelTestModelDescriptionValidator validator=new ModelTestModelDescriptionValidator(PathAddress.EMPTY_ADDRESS.toModelNode(),model,config);
  List<ValidationFailure> validationMessages=validator.validateResources();
  if (validationMessages.size() > 0) {
    final StringBuilder builder=new StringBuilder("VALIDATION ERRORS IN MODEL:");
    for (    ValidationFailure failure : validationMessages) {
      builder.append(failure);
      builder.append("\n");
    }
    Assert.fail("Failed due to validation errors in the model. Please fix :-) " + builder.toString());
  }
}
