{
  InputStream input=deployer.getDeployment(CONFIG_ADMIN_BUNDLE_A);
  Bundle bundle=context.installBundle(CONFIG_ADMIN_PID_C,input);
  try {
    bundle.start();
    Assert.assertEquals("Bundle ACTIVE",Bundle.ACTIVE,bundle.getState());
    BundleContext context=bundle.getBundleContext();
    ConfigAdmin configAdmin=getConfigAdmin(context);
    ConfigurationAdmin configurationAdmin=FrameworkUtils.waitForService(context,ConfigurationAdmin.class);
    final CountDownLatch latch=new CountDownLatch(1);
    ConfigAdminListener listener=new ConfigAdminListener(){
      @Override public void configurationModified(      String pid,      Dictionary<String,String> props){
        if (props != null)         latch.countDown();
      }
      @Override public Set<String> getPIDs(){
        return Collections.singleton(CONFIG_ADMIN_PID_C);
      }
    }
;
    configAdmin.addListener(listener);
    Dictionary<String,String> modelProps=new Hashtable<String,String>();
    modelProps.put("foo","bar");
    ConfigAdminManagement.updateConfiguration(getControllerClient(),CONFIG_ADMIN_PID_C,modelProps);
    try {
      Assert.assertTrue(latch.await(3,TimeUnit.SECONDS));
      Configuration config=configurationAdmin.getConfiguration(CONFIG_ADMIN_PID_C);
      Assert.assertEquals("bar",config.getProperties().get("foo"));
      ServiceReference<ConfiguredService> sref=context.getServiceReference(ConfiguredService.class);
      ConfiguredService service=context.getService(sref);
      Assert.assertTrue(service.awaitUpdate(3,TimeUnit.SECONDS));
      Assert.assertEquals("bar",service.getProperties().get("foo"));
    }
  finally {
      configAdmin.removeListener(listener);
      ConfigAdminManagement.removeConfiguration(getControllerClient(),CONFIG_ADMIN_PID_C);
    }
  }
  finally {
    bundle.uninstall();
  }
}
