{
  return new DeploymentUnit(){
    private Map<AttachmentKey<?>,Object> attachments=new HashMap();
    @Override public ServiceName getServiceName(){
      return Services.deploymentUnitName(duName);
    }
    @Override public DeploymentUnit getParent(){
      return null;
    }
    @Override public String getName(){
      return duName;
    }
    @Override public ServiceRegistry getServiceRegistry(){
      throw new RuntimeException("NYI");
    }
    @Override public boolean hasAttachment(    AttachmentKey<?> key){
      return this.attachments.containsKey(key);
    }
    @Override public <T>T getAttachment(    AttachmentKey<T> key){
      if (key == null) {
        return null;
      }
      return key.cast(attachments.get(key));
    }
    @Override public <T>List<T> getAttachmentList(    AttachmentKey<? extends List<T>> key){
      throw new RuntimeException("NYI");
    }
    @Override public <T>T putAttachment(    AttachmentKey<T> key,    T value){
      if (key == null) {
        throw new IllegalArgumentException("key is null");
      }
      return key.cast(attachments.put(key,key.cast(value)));
    }
    @Override public <T>T removeAttachment(    AttachmentKey<T> key){
      throw new RuntimeException("NYI");
    }
    @Override public <T>void addToAttachmentList(    AttachmentKey<AttachmentList<T>> key,    T value){
      throw new RuntimeException("NYI");
    }
    @Override public ModelNode getDeploymentSubsystemModel(    String subsystemName){
      return new ModelNode();
    }
    @Override public ModelNode createDeploymentSubModel(    String subsystemName,    PathElement address){
      return new ModelNode();
    }
  }
;
}
