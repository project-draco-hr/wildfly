{
  Class<?> clazz;
  try {
    clazz=loader.loadClass(NAME);
  }
 catch (  ClassNotFoundException e) {
    try {
      final ClassFile file=new ClassFile(NAME,SerializationHackProxy.class.getName());
      final ClassMethod method=file.addMethod(Modifier.PUBLIC,"read","Ljava/lang/Object;","Ljava/io/ObjectInputStream;");
      final CodeAttribute codeAttribute=method.getCodeAttribute();
      codeAttribute.aload(1);
      codeAttribute.invokevirtual("java/io/ObjectInputStream","readObject","()Ljava/lang/Object;");
      codeAttribute.returnInstruction();
      ClassMethod ctor=file.addMethod(Modifier.PUBLIC,"<init>","V");
      ctor.getCodeAttribute().aload(0);
      ctor.getCodeAttribute().invokespecial(SerializationHackProxy.class.getName(),"<init>","()V");
      ctor.getCodeAttribute().returnInstruction();
      clazz=file.define(loader);
    }
 catch (    RuntimeException ex) {
      try {
        clazz=loader.loadClass(NAME);
      }
 catch (      ClassNotFoundException e1) {
        throw ex;
      }
    }
  }
  try {
    return (SerializationHackProxy)clazz.newInstance();
  }
 catch (  InstantiationException e) {
    throw new RuntimeException(e);
  }
catch (  IllegalAccessException e) {
    throw new RuntimeException(e);
  }
}
