{
  final EEModuleClassDescription clazz=applicationClasses.getClassByName(componentClass.getName());
  if (clazz == null) {
    return;
  }
  final ClassAnnotationInformation<Clustered,ClusteringInfo> clustering=clazz.getAnnotationInformation(Clustered.class);
  if (clustering == null || clustering.getClassLevelAnnotations().isEmpty()) {
    return;
  }
  if (ejbComponentDescription instanceof MessageDrivenComponentDescription) {
    throw EjbMessages.MESSAGES.clusteredAnnotationIsNotApplicableForMDB(deploymentUnit,ejbComponentDescription.getComponentName(),ejbComponentDescription.getComponentClassName());
  }
  if (ejbComponentDescription instanceof EntityBeanComponentDescription) {
    throw EjbMessages.MESSAGES.clusteredAnnotationIsNotApplicableForEntityBean(deploymentUnit,ejbComponentDescription.getComponentName(),ejbComponentDescription.getComponentClassName());
  }
  if (ejbComponentDescription instanceof SingletonComponentDescription) {
    throw EjbMessages.MESSAGES.clusteredAnnotationNotYetImplementedForSingletonBean(deploymentUnit,ejbComponentDescription.getComponentName(),ejbComponentDescription.getComponentClassName());
  }
  if (!(ejbComponentDescription instanceof SessionBeanComponentDescription)) {
    throw EjbMessages.MESSAGES.clusteredAnnotationIsNotApplicableForBean(deploymentUnit,ejbComponentDescription.getComponentName(),ejbComponentDescription.getComponentClassName());
  }
  final ClusteringInfo clusteringInfo=clustering.getClassLevelAnnotations().get(0);
  ((SessionBeanComponentDescription)ejbComponentDescription).setClustering(clusteringInfo);
}
