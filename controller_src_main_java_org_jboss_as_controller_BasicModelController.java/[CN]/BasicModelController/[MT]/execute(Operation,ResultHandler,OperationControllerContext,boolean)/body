{
  boolean locked=false;
  try {
    final PathAddress address=PathAddress.pathAddress(operation.getOperation().get(ModelDescriptionConstants.OP_ADDR));
    final boolean multiTarget=address.isMultiTarget();
    if (multiTarget && resolve) {
      final MultiTargetAction action=new MultiTargetAction(address);
      return action.execute(operation,handler,operationExecutionContext);
    }
    final NewProxyController proxyExecutor=registry.getProxyController(address);
    if (proxyExecutor != null) {
      Operation newContext=operation.clone();
      newContext.getOperation().get(OP_ADDR).set(address.subAddress(proxyExecutor.getProxyNodeAddress().size()).toModelNode());
      throw new IllegalStateException("BasicModelController is no longer used");
    }
    if (isMultiStepOperation(operation.getOperation(),address)) {
      MultiStepOperationController multistepController=getMultiStepOperationController(operation,handler,operationExecutionContext);
      return multistepController.execute(handler);
    }
    final OperationHandler operationHandler=getHandlerForOperation(operation.getOperation(),address);
    if (!isReadOnly(operationHandler)) {
      locked=acquireWriteLock(operationExecutionContext);
    }
    final OperationContext context=operationExecutionContext.getOperationContextFactory().getOperationContext(operationExecutionContext.getModelProvider(),address,operationHandler,operation);
    return doExecute(context,operation,operationHandler,handler,address,operationExecutionContext);
  }
 catch (  OperationFailedException e) {
    log.warnf(e,"operation (%s) failed - address: (%s)",operation.getOperation().get(OP),operation.getOperation().get(OP_ADDR));
    handler.handleFailed(e.getFailureDescription());
    return new BasicOperationResult();
  }
catch (  final Throwable t) {
    log.errorf(t,"operation (%s) failed - address: (%s)",operation.getOperation().get(OP),operation.getOperation().get(OP_ADDR));
    handler.handleFailed(getFailureResult(t));
    return new BasicOperationResult();
  }
 finally {
    if (locked) {
      operationExecutionContext.unlock();
    }
  }
}
