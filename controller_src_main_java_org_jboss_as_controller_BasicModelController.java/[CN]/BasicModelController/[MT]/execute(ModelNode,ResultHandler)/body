{
  final PathAddress address=PathAddress.pathAddress(operation.get("address"));
  final String operationName=operation.get("operation").asString();
  final OperationHandler operationHandler=registry.getOperationHandler(address,operationName);
  final ModelNode subModel;
  try {
    subModel=address.navigate(model,false);
  }
 catch (  final NoSuchElementException e) {
    handler.handleResultFragment(NO_STRINGS,getFailureResult(e));
    return Cancellable.NULL;
  }
  final NewOperationContext context=getOperationContext(subModel,operation,operationHandler);
  final ResultHandler persistingHandler=new ResultHandler(){
    @Override public void handleResultFragment(    final String[] location,    final ModelNode result){
      handler.handleResultFragment(location,result);
    }
    @Override public void handleResultComplete(    final ModelNode compensatingOperation){
      handler.handleResultComplete(compensatingOperation);
      try {
        configurationPersister.store(model);
      }
 catch (      final ConfigurationPersistenceException e) {
        log.warnf("Failed to persist configuration change: %s",e);
      }
    }
    @Override public void handleFailed(    final ModelNode failureDescription){
      handler.handleFailed(failureDescription);
    }
    @Override public void handleCancellation(){
      handler.handleCancellation();
    }
  }
;
  try {
    return doExecute(context,operation,operationHandler,persistingHandler);
  }
 catch (  final Throwable t) {
    handler.handleFailed(getFailureResult(t));
    return Cancellable.NULL;
  }
}
