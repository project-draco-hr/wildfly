{
  try {
    final PathAddress address=PathAddress.pathAddress(operation.require(ModelDescriptionConstants.OP_ADDR));
    final ProxyController proxyExecutor=registry.getProxyController(address);
    if (proxyExecutor != null) {
      ModelNode newOperation=operation.clone();
      newOperation.get(OP_ADDR).set(address.subAddress(proxyExecutor.getProxyNodeAddress().size()).toModelNode());
      return proxyExecutor.execute(newOperation,handler);
    }
    final String operationName=operation.require(ModelDescriptionConstants.OP).asString();
    final OperationHandler operationHandler=registry.getOperationHandler(address,operationName);
    if (operationHandler == null) {
      throw new IllegalStateException("No handler for " + operationName + " at address "+ address);
    }
    final ModelNode subModel;
    if (operationHandler instanceof ModelAddOperationHandler) {
      validateNewAddress(address);
      subModel=new ModelNode();
    }
 else     if (operationHandler instanceof ModelQueryOperationHandler) {
      final ModelNode model=this.model;
synchronized (model) {
        subModel=address.navigate(model,false).clone();
      }
    }
 else {
      subModel=null;
    }
    final NewOperationContext context=getOperationContext(subModel,operation,operationHandler);
    final ResultHandler useHandler=(operationHandler instanceof ModelUpdateOperationHandler) ? new ResultHandler(){
      @Override public void handleResultFragment(      final String[] location,      final ModelNode result){
        handler.handleResultFragment(location,result);
      }
      @Override public void handleResultComplete(      final ModelNode compensatingOperation){
        final ModelNode model=BasicModelController.this.model;
synchronized (model) {
          if (operationHandler instanceof ModelRemoveOperationHandler) {
            address.remove(model);
          }
 else {
            address.navigate(model,true).set(subModel);
          }
          persistConfiguration(model);
        }
        handler.handleResultComplete(compensatingOperation);
      }
      @Override public void handleFailed(      final ModelNode failureDescription){
        handler.handleFailed(failureDescription);
      }
      @Override public void handleCancellation(){
        handler.handleCancellation();
      }
    }
 : handler;
    return doExecute(context,operation,operationHandler,useHandler);
  }
 catch (  final Throwable t) {
    log.errorf(t,"operation (%s) failed - address: (%s)",operation.get(OP),operation.get(OP_ADDR));
    handler.handleFailed(getFailureResult(t));
    return Cancellable.NULL;
  }
}
