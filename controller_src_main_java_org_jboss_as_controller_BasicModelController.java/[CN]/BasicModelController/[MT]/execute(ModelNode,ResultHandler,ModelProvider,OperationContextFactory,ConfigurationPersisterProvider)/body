{
  try {
    final PathAddress address=PathAddress.pathAddress(operation.get(ModelDescriptionConstants.OP_ADDR));
    final ProxyController proxyExecutor=registry.getProxyController(address);
    if (proxyExecutor != null) {
      ModelNode newOperation=operation.clone();
      newOperation.get(OP_ADDR).set(address.subAddress(proxyExecutor.getProxyNodeAddress().size()).toModelNode());
      return proxyExecutor.execute(newOperation,handler);
    }
    if (isMultiStepOperation(operation,address)) {
      MultiStepOperationController multistepController=getMultiStepOperationController(operation,handler,modelSource);
      return multistepController.execute(handler);
    }
    final String operationName=operation.require(ModelDescriptionConstants.OP).asString();
    final OperationHandler operationHandler=registry.getOperationHandler(address,operationName);
    if (operationHandler == null) {
      throw new IllegalStateException("No handler for " + operationName + " at address "+ address);
    }
    final OperationContext context=contextFactory.getOperationContext(modelSource,address,operationHandler);
    try {
      return doExecute(context,operation,operationHandler,handler,address,modelSource,configurationPersisterProvider);
    }
 catch (    OperationFailedException e) {
      handler.handleFailed(e.getFailureDescription());
      return new BasicOperationResult();
    }
  }
 catch (  final Throwable t) {
    log.errorf(t,"operation (%s) failed - address: (%s)",operation.get(OP),operation.get(OP_ADDR));
    handler.handleFailed(getFailureResult(t));
    return new BasicOperationResult();
  }
}
