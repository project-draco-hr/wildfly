{
  this.operation=operation;
  final ModelNode operationNode=operation.getOperation();
  stepsValidator.validateParameter(STEPS,operationNode.get(STEPS));
  this.resultHandler=resultHandler;
  this.steps=operationNode.require(STEPS).asList();
  this.unfinishedCount.set(steps.size());
  this.rollbackOnRuntimeFailure=(!operationNode.hasDefined(OPERATION_HEADERS) || !operationNode.get(OPERATION_HEADERS).hasDefined(ROLLBACK_ON_RUNTIME_FAILURE) || operationNode.get(OPERATION_HEADERS,ROLLBACK_ON_RUNTIME_FAILURE).asBoolean());
  this.modelSource=modelProvider;
  this.localModel=this.modelSource.getModel().clone();
  this.injectedConfigPersisterProvider=injectedConfigPersisterProvider;
  this.injectedOperationControllerContext=injectedOperationControllerContext;
  for (int i=0; i < unfinishedCount.get(); i++) {
    ModelNode stepResult=getStepResultNode(i);
    stepResult.get(OUTCOME);
    stepResult.get(OP_ADDR).set(steps.get(i).get(OP_ADDR));
    stepResult.get(RESULT);
  }
}
