{
  final ModelNode resolveOperation=new ModelNode();
  resolveOperation.get(ModelDescriptionConstants.OP).set(GlobalOperationHandlers.ResolveAddressOperationHandler.OPERATION_NAME);
  resolveOperation.get(ModelDescriptionConstants.OP_ADDR).setEmptyList();
  resolveOperation.get(GlobalOperationHandlers.ResolveAddressOperationHandler.ADDRESS_PARAM).set(address.toModelNode());
  resolveOperation.get(GlobalOperationHandlers.ResolveAddressOperationHandler.ORIGINAL_OPERATION).set(executionContext.getOperation().require(ModelDescriptionConstants.OP));
  final Collection<ModelNode> resolved=new ArrayList<ModelNode>();
  final AtomicInteger status=new AtomicInteger();
  final ModelNode failureResult=new ModelNode();
  final ExecutionContext resolveContext=ExecutionContextBuilder.Factory.create(resolveOperation).build();
  final ResultHandler resolveHandler=new ResultHandler(){
    @Override public void handleResultFragment(    String[] location,    ModelNode result){
synchronized (failureResult) {
        if (status.get() == 0) {
          resolved.add(result);
        }
      }
    }
    @Override public void handleResultComplete(){
synchronized (failureResult) {
        status.compareAndSet(0,1);
        failureResult.notify();
      }
    }
    @Override public void handleFailed(    ModelNode failureDescription){
synchronized (failureResult) {
        failureResult.set(failureDescription);
        status.compareAndSet(0,2);
        failureResult.notify();
      }
    }
    @Override public void handleCancellation(){
synchronized (failureResult) {
        status.compareAndSet(0,3);
        failureResult.notify();
      }
    }
  }
;
  final OperationResult result=BasicModelController.this.execute(resolveContext,resolveHandler,modelSource,contextFactory,configurationPersisterProvider,false);
  boolean intr=false;
  try {
synchronized (failureResult) {
      for (; ; ) {
        try {
          final int s=status.get();
switch (s) {
case 1:
            return executeMultiOperation(resolved,executionContext,handler,modelSource,contextFactory,configurationPersisterProvider);
case 2:
          handler.handleFailed(failureResult);
        return new BasicOperationResult();
case 3:
      throw new CancellationException();
  }
  failureResult.wait();
}
 catch (InterruptedException e) {
  intr=true;
  result.getCancellable().cancel();
}
}
}
}
  finally {
if (intr) {
Thread.currentThread().interrupt();
}
}
}
