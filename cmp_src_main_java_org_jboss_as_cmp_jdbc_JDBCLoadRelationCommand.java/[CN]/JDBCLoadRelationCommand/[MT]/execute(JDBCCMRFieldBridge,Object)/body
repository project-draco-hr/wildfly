{
  JDBCCMRFieldBridge relatedCMRField=(JDBCCMRFieldBridge)cmrField.getRelatedCMRField();
  ReadAheadCache readAheadCache=manager.getReadAheadCache();
  ReadAheadCache relatedReadAheadCache=cmrField.getRelatedManager().getReadAheadCache();
  ReadAheadCache.EntityReadAheadInfo info=readAheadCache.getEntityReadAheadInfo(pk);
  List loadKeys=info.getLoadKeys();
  Connection con=null;
  PreparedStatement ps=null;
  ResultSet rs=null;
  try {
    boolean[] preloadMask=getPreloadMask(cmrField);
    String sql=getSQL(cmrField,preloadMask,loadKeys.size());
    if (log.isDebugEnabled())     log.debug("load relation SQL: " + sql);
    con=cmrField.getDataSource().getConnection();
    ps=con.prepareStatement(sql.toString());
    if (entity.getFetchSize() > 0) {
      ps.setFetchSize(entity.getFetchSize());
    }
    JDBCCMPFieldBridge[] myKeyFields=getMyKeyFields(cmrField);
    JDBCCMPFieldBridge[] relatedKeyFields=getRelatedKeyFields(cmrField);
    int paramIndex=1;
    for (int i=0; i < loadKeys.size(); i++) {
      Object key=loadKeys.get(i);
      for (int j=0; j < myKeyFields.length; ++j)       paramIndex=myKeyFields[j].setPrimaryKeyParameters(ps,paramIndex,key);
    }
    rs=ps.executeQuery();
    Map resultsMap=new HashMap(loadKeys.size());
    for (int i=0; i < loadKeys.size(); ++i) {
      resultsMap.put(loadKeys.get(i),new ArrayList());
    }
    Object[] ref=new Object[1];
    while (rs.next()) {
      int index=1;
      ref[0]=null;
      Object loadedPk=pk;
      if (loadKeys.size() > 1) {
        for (int i=0; i < myKeyFields.length; ++i) {
          index=myKeyFields[i].loadPrimaryKeyResults(rs,index,ref);
          if (ref[0] == null) {
            break;
          }
        }
        loadedPk=ref[0];
      }
      ref[0]=null;
      for (int i=0; i < relatedKeyFields.length; ++i) {
        index=relatedKeyFields[i].loadPrimaryKeyResults(rs,index,ref);
        if (ref[0] == null) {
          break;
        }
      }
      Object loadedFk=ref[0];
      if (loadedFk != null) {
        List results=(List)resultsMap.get(loadedPk);
        results.add(loadedFk);
        if (relatedCMRField.isSingleValued()) {
          relatedReadAheadCache.addPreloadData(loadedFk,relatedCMRField,Collections.singletonList(loadedPk));
        }
        if (preloadMask != null) {
          JDBCFieldBridge[] relatedFields=cmrField.getRelatedJDBCEntity().getTableFields();
          for (int i=0; i < relatedFields.length; ++i) {
            if (preloadMask[i]) {
              JDBCFieldBridge field=relatedFields[i];
              ref[0]=null;
              index=field.loadArgumentResults(rs,index,ref);
              relatedReadAheadCache.addPreloadData(loadedFk,field,ref[0]);
            }
          }
        }
      }
    }
    JDBCReadAheadMetaData readAhead=relatedCMRField.getReadAhead();
    for (Iterator iter=resultsMap.keySet().iterator(); iter.hasNext(); ) {
      Object key=iter.next();
      List results=(List)resultsMap.get(key);
      relatedReadAheadCache.addFinderResults(results,readAhead);
      if (!key.equals(pk)) {
        readAheadCache.addPreloadData(key,cmrField,results);
      }
    }
    return (List)resultsMap.get(pk);
  }
 catch (  EJBException e) {
    throw e;
  }
catch (  Exception e) {
    throw new EJBException("Load relation failed",e);
  }
 finally {
    JDBCUtil.safeClose(rs);
    JDBCUtil.safeClose(ps);
    JDBCUtil.safeClose(con);
  }
}
