{
  RefResolver<String,ProfileElement> resolver=new SimpleRefResolver<String,ProfileElement>(profiles);
  Map<String,Location> locations=new HashMap<String,javax.xml.stream.Location>();
  while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
switch (Namespace.forUri(reader.getNamespaceURI())) {
case DOMAIN_1_0:
{
        final Element element=Element.forName(reader.getLocalName());
switch (element) {
case PROFILE:
{
            final Location location=reader.getLocation();
            final ProfileElement profile=new ProfileElement(reader,resolver);
            final String name=profile.getName();
            if (profiles.containsKey(name)) {
              throw new XMLStreamException("Profile " + name + " already declared",location);
            }
            locations.put(name,location);
            profiles.put(name,profile);
            break;
          }
default :
        throw unexpectedElement(reader);
    }
    break;
  }
default :
throw unexpectedElement(reader);
}
}
for (ProfileElement profile : profiles.values()) {
for (ProfileIncludeElement include : profile.getIncludedProfiles()) {
ProfileElement included=profiles.get(include.getProfile());
if (included == null) {
throw new XMLStreamException("Included profile " + include.getProfile() + " not found",locations.get(profile.getName()));
}
}
}
}
