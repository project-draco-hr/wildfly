{
  calculateDifference(target,safeCopyMap(namespaces),safeCopyMap(other.namespaces),new DifferenceHandler<String,NamespaceAttribute,DomainModel>(){
    @Override public void handleAdd(    Collection<AbstractModelUpdate<DomainModel>> target,    String name,    NamespaceAttribute newElement){
      throw new UnsupportedOperationException("implement me");
    }
    @Override public void handleChange(    Collection<AbstractModelUpdate<DomainModel>> target,    String name,    NamespaceAttribute oldElement,    NamespaceAttribute newElement){
      throw new UnsupportedOperationException("implement me");
    }
    @Override public void handleRemove(    Collection<AbstractModelUpdate<DomainModel>> target,    String name,    NamespaceAttribute oldElement){
      throw new UnsupportedOperationException("implement me");
    }
  }
);
  calculateDifference(target,safeCopyMap(extensions),safeCopyMap(other.extensions),new DifferenceHandler<String,ExtensionElement,DomainModel>(){
    public void handleAdd(    final Collection<AbstractModelUpdate<DomainModel>> target,    final String name,    final ExtensionElement newElement){
      throw new UnsupportedOperationException("implement me");
    }
    public void handleRemove(    final Collection<AbstractModelUpdate<DomainModel>> target,    final String name,    final ExtensionElement oldElement){
      throw new UnsupportedOperationException("implement me");
    }
    public void handleChange(    final Collection<AbstractModelUpdate<DomainModel>> target,    final String name,    final ExtensionElement oldElement,    final ExtensionElement newElement){
      throw new IllegalStateException();
    }
  }
);
  calculateDifference(target,safeCopyMap(profiles),safeCopyMap(other.profiles),new DifferenceHandler<String,ProfileElement,DomainModel>(){
    public void handleAdd(    final Collection<AbstractModelUpdate<DomainModel>> target,    final String name,    final ProfileElement newElement){
      throw new UnsupportedOperationException("implement me");
    }
    public void handleRemove(    final Collection<AbstractModelUpdate<DomainModel>> target,    final String name,    final ProfileElement oldElement){
      throw new UnsupportedOperationException("implement me");
    }
    public void handleChange(    final Collection<AbstractModelUpdate<DomainModel>> target,    final String name,    final ProfileElement oldElement,    final ProfileElement newElement){
      throw new UnsupportedOperationException("implement me");
    }
  }
);
  calculateDifference(target,safeCopyMap(interfaces),safeCopyMap(other.interfaces),new DifferenceHandler<String,InterfaceElement,DomainModel>(){
    public void handleAdd(    final Collection<AbstractModelUpdate<DomainModel>> target,    final String name,    final InterfaceElement newElement){
      throw new UnsupportedOperationException("implement me");
    }
    public void handleRemove(    final Collection<AbstractModelUpdate<DomainModel>> target,    final String name,    final InterfaceElement oldElement){
      throw new UnsupportedOperationException("implement me");
    }
    public void handleChange(    final Collection<AbstractModelUpdate<DomainModel>> target,    final String name,    final InterfaceElement oldElement,    final InterfaceElement newElement){
      throw new UnsupportedOperationException("implement me");
    }
  }
);
  calculateDifference(target,safeCopyMap(bindingGroups),safeCopyMap(other.bindingGroups),new DifferenceHandler<String,SocketBindingGroupElement,DomainModel>(){
    public void handleAdd(    final Collection<AbstractModelUpdate<DomainModel>> target,    final String name,    final SocketBindingGroupElement newElement){
      throw new UnsupportedOperationException("implement me");
    }
    public void handleRemove(    final Collection<AbstractModelUpdate<DomainModel>> target,    final String name,    final SocketBindingGroupElement oldElement){
      throw new UnsupportedOperationException("implement me");
    }
    public void handleChange(    final Collection<AbstractModelUpdate<DomainModel>> target,    final String name,    final SocketBindingGroupElement oldElement,    final SocketBindingGroupElement newElement){
      throw new UnsupportedOperationException("implement me");
    }
  }
);
  systemProperties.appendDifference(null,other.systemProperties);
  calculateDifference(target,safeCopyMap(deployments),safeCopyMap(other.deployments),new DifferenceHandler<DeploymentUnitKey,DeploymentUnitElement,DomainModel>(){
    public void handleAdd(    final Collection<AbstractModelUpdate<DomainModel>> target,    final DeploymentUnitKey key,    final DeploymentUnitElement newElement){
      throw new UnsupportedOperationException("implement me");
    }
    public void handleRemove(    final Collection<AbstractModelUpdate<DomainModel>> target,    final DeploymentUnitKey key,    final DeploymentUnitElement oldElement){
      throw new UnsupportedOperationException("implement me");
    }
    public void handleChange(    final Collection<AbstractModelUpdate<DomainModel>> target,    final DeploymentUnitKey key,    final DeploymentUnitElement oldElement,    final DeploymentUnitElement newElement){
      throw new UnsupportedOperationException("implement me");
    }
  }
);
  calculateDifference(target,safeCopyMap(serverGroups),safeCopyMap(other.serverGroups),new DifferenceHandler<String,ServerGroupElement,DomainModel>(){
    public void handleAdd(    final Collection<AbstractModelUpdate<DomainModel>> target,    final String name,    final ServerGroupElement newElement){
      throw new UnsupportedOperationException("implement me");
    }
    public void handleRemove(    final Collection<AbstractModelUpdate<DomainModel>> target,    final String name,    final ServerGroupElement oldElement){
      throw new UnsupportedOperationException("implement me");
    }
    public void handleChange(    final Collection<AbstractModelUpdate<DomainModel>> target,    final String name,    final ServerGroupElement oldElement,    final ServerGroupElement newElement){
      oldElement.appendDifference(null,newElement);
    }
  }
);
}
