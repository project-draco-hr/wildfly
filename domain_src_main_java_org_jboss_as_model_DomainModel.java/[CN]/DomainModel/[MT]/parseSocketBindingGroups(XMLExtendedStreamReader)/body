{
  RefResolver<String,SocketBindingGroupElement> groupResolver=new SimpleRefResolver<String,SocketBindingGroupElement>(bindingGroups);
  RefResolver<String,InterfaceElement> intfResolver=new SimpleRefResolver<String,InterfaceElement>(interfaces);
  Map<String,Location> locations=new HashMap<String,Location>();
  while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
switch (Namespace.forUri(reader.getNamespaceURI())) {
case DOMAIN_1_0:
{
        final Element element=Element.forName(reader.getLocalName());
switch (element) {
case SOCKET_BINDING_GROUP:
{
            final Location location=reader.getLocation();
            SocketBindingGroupElement group=new SocketBindingGroupElement(reader,intfResolver,groupResolver);
            final String name=group.getName();
            if (bindingGroups.containsKey(name)) {
              throw new XMLStreamException(element.getLocalName() + " with name " + name+ " already declared",location);
            }
            bindingGroups.put(name,group);
            locations.put(name,location);
            break;
          }
default :
        throw unexpectedElement(reader);
    }
    break;
  }
default :
throw unexpectedElement(reader);
}
}
for (SocketBindingGroupElement group : bindingGroups.values()) {
for (SocketBindingGroupIncludeElement include : group.getIncludedSocketBindingGroups()) {
SocketBindingGroupElement included=bindingGroups.get(include.getGroupName());
if (included == null) {
throw new XMLStreamException("Included " + Element.SOCKET_BINDING_GROUP.getLocalName() + " "+ include.getGroupName()+ " not found",locations.get(group.getName()));
}
}
}
}
