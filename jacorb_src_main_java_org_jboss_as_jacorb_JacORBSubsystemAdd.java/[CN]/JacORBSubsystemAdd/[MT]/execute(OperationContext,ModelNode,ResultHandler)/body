{
  this.jacorbConfigValidator.validate(operation);
  for (  JacORBElement configElement : JacORBElement.getRootElements()) {
    String configElementName=configElement.getLocalName();
    if (operation.hasDefined(configElementName)) {
      context.getSubModel().get(configElementName).set(operation.get(configElementName));
    }
  }
  if (context instanceof BootOperationContext) {
    context.getRuntimeContext().setRuntimeTask(new RuntimeTask(){
      @Override public void execute(      RuntimeTaskContext context) throws OperationFailedException {
        log.info("Activating JacORB Subsystem");
        EnumSet<ORBInitializer> initializers=getORBInitializers(operation);
        Properties props=new Properties();
        getConfigurationProperties(operation,props);
        CorbaORBService orbService=new CorbaORBService(initializers,props);
        final ServiceBuilder<ORB> builder=context.getServiceTarget().addService(CorbaORBService.SERVICE_NAME,orbService);
        builder.addDependency(SocketBinding.JBOSS_BINDING_NAME.append(JACORB_SOCKET_BINDING),SocketBinding.class,orbService.getJacORBSocketBindingInjector());
        builder.addDependency(SocketBinding.JBOSS_BINDING_NAME.append(JACORB_SSL_SOCKET_BINDING),SocketBinding.class,orbService.getJacORBSSLSocketBindingInjector());
        builder.setInitialMode(ServiceController.Mode.ACTIVE).install();
        CorbaPOAService rootPOAService=new CorbaPOAService("RootPOA","poa");
        context.getServiceTarget().addService(CorbaPOAService.SERVICE_NAME.append("rootpoa"),rootPOAService).addDependency(CorbaORBService.SERVICE_NAME,ORB.class,rootPOAService.getORBInjector()).setInitialMode(ServiceController.Mode.ACTIVE).install();
        CorbaPOAService irPOAService=new CorbaPOAService("IRPOA","irpoa",IdAssignmentPolicyValue.USER_ID,null,null,LifespanPolicyValue.PERSISTENT,null,null,null);
        context.getServiceTarget().addService(CorbaPOAService.SERVICE_NAME.append("irpoa"),irPOAService).addDependency(CorbaPOAService.SERVICE_NAME.append("rootpoa"),POA.class,irPOAService.getParentPOAInjector()).setInitialMode(ServiceController.Mode.ACTIVE).install();
        CorbaPOAService namingPOAService=new CorbaPOAService("NamingPOA",null,IdAssignmentPolicyValue.USER_ID,null,null,LifespanPolicyValue.PERSISTENT,null,null,null);
        context.getServiceTarget().addService(CorbaPOAService.SERVICE_NAME.append("namingpoa"),namingPOAService).addDependency(CorbaPOAService.SERVICE_NAME.append("rootpoa"),POA.class,namingPOAService.getParentPOAInjector()).setInitialMode(ServiceController.Mode.ACTIVE).install();
        CorbaNamingService namingService=new CorbaNamingService();
        context.getServiceTarget().addService(CorbaNamingService.SERVICE_NAME,namingService).addDependency(CorbaORBService.SERVICE_NAME,ORB.class,namingService.getORBInjector()).addDependency(CorbaPOAService.SERVICE_NAME.append("rootpoa"),POA.class,namingService.getRootPOAInjector()).addDependency(CorbaPOAService.SERVICE_NAME.append("namingpoa"),POA.class,namingService.getNamingPOAInjector()).setInitialMode(ServiceController.Mode.ACTIVE).install();
        resultHandler.handleResultComplete();
      }
    }
);
  }
 else {
    resultHandler.handleResultComplete();
  }
  final ModelNode compensatingOperation=Util.getResourceRemoveOperation(operation.require(OP_ADDR));
  return new BasicOperationResult(compensatingOperation);
}
