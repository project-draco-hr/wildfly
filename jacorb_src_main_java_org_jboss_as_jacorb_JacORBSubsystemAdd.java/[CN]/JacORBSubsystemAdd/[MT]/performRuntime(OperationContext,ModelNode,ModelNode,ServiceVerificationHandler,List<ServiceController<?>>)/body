{
  log.info("Activating JacORB Subsystem");
  SecurityActions.setSystemProperty("org.jboss.com.sun.CORBA.ORBUseDynamicStub","true");
  SecurityActions.setSystemProperty(ORBConstants.DYNAMIC_STUB_FACTORY_FACTORY_CLASS,"org.jboss.as.jacorb.rmi.DelegatingStubFactoryFactory");
  InitialContext.addUrlContextFactory("corbaloc",JBossCNCtxFactory.INSTANCE);
  InitialContext.addUrlContextFactory("corbaname",JBossCNCtxFactory.INSTANCE);
  InitialContext.addUrlContextFactory("IOR",JBossCNCtxFactory.INSTANCE);
  InitialContext.addUrlContextFactory("iiopname",JBossCNCtxFactory.INSTANCE);
  InitialContext.addUrlContextFactory("iiop",JBossCNCtxFactory.INSTANCE);
  context.addStep(new AbstractDeploymentChainStep(){
    public void execute(    DeploymentProcessorTarget processorTarget){
      processorTarget.addDeploymentProcessor(Phase.DEPENDENCIES,Phase.DEPENDENCIES_JACORB,new JacORBDependencyProcessor());
      processorTarget.addDeploymentProcessor(Phase.PARSE,Phase.PARSE_JACORB,new JacORBMarkerProcessor());
    }
  }
,OperationContext.Stage.RUNTIME);
  Properties props=this.getConfigurationProperties(model);
  this.setupInitializers(props);
  this.setupSSLFactories(props);
  CorbaORBService orbService=new CorbaORBService(props);
  final ServiceBuilder<ORB> builder=context.getServiceTarget().addService(CorbaORBService.SERVICE_NAME,orbService);
  builder.addDependency(SocketBinding.JBOSS_BINDING_NAME.append(JACORB_SOCKET_BINDING),SocketBinding.class,orbService.getJacORBSocketBindingInjector());
  builder.addDependency(SocketBinding.JBOSS_BINDING_NAME.append(JACORB_SSL_SOCKET_BINDING),SocketBinding.class,orbService.getJacORBSSLSocketBindingInjector());
  builder.addListener(verificationHandler);
  newControllers.add(builder.setInitialMode(ServiceController.Mode.ACTIVE).install());
  CorbaPOAService rootPOAService=new CorbaPOAService("RootPOA","poa");
  newControllers.add(context.getServiceTarget().addService(CorbaPOAService.ROOT_SERVICE_NAME,rootPOAService).addDependency(CorbaORBService.SERVICE_NAME,ORB.class,rootPOAService.getORBInjector()).addListener(verificationHandler).setInitialMode(ServiceController.Mode.ACTIVE).install());
  final CorbaPOAService irPOAService=new CorbaPOAService("IRPOA","irpoa",IdAssignmentPolicyValue.USER_ID,null,null,LifespanPolicyValue.PERSISTENT,null,null,null);
  newControllers.add(context.getServiceTarget().addService(CorbaPOAService.INTERFACE_REPOSITORY_SERVICE_NAME,irPOAService).addDependency(CorbaPOAService.ROOT_SERVICE_NAME,POA.class,irPOAService.getParentPOAInjector()).addListener(verificationHandler).setInitialMode(ServiceController.Mode.ACTIVE).install());
  final CorbaPOAService namingPOAService=new CorbaPOAService("Naming",null,IdAssignmentPolicyValue.USER_ID,null,null,LifespanPolicyValue.PERSISTENT,null,null,null);
  newControllers.add(context.getServiceTarget().addService(CorbaPOAService.SERVICE_NAME.append("namingpoa"),namingPOAService).addDependency(CorbaPOAService.ROOT_SERVICE_NAME,POA.class,namingPOAService.getParentPOAInjector()).addListener(verificationHandler).setInitialMode(ServiceController.Mode.ACTIVE).install());
  final CorbaNamingService namingService=new CorbaNamingService();
  newControllers.add(context.getServiceTarget().addService(CorbaNamingService.SERVICE_NAME,namingService).addDependency(CorbaORBService.SERVICE_NAME,ORB.class,namingService.getORBInjector()).addDependency(CorbaPOAService.ROOT_SERVICE_NAME,POA.class,namingService.getRootPOAInjector()).addDependency(CorbaPOAService.SERVICE_NAME.append("namingpoa"),POA.class,namingService.getNamingPOAInjector()).addListener(verificationHandler).setInitialMode(ServiceController.Mode.ACTIVE).install());
}
