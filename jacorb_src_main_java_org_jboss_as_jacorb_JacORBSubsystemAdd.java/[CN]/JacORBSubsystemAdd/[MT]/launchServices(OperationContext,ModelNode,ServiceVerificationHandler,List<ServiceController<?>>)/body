{
  JacORBLogger.ROOT_LOGGER.activatingSubsystem();
  WildFlySecurityManager.setPropertyPrivileged("org.jboss.com.sun.CORBA.ORBUseDynamicStub","true");
  org.jboss.com.sun.corba.se.spi.orb.ORB.getPresentationManager().setStubFactoryFactory(true,new DelegatingStubFactoryFactory());
  org.jboss.com.sun.corba.se.spi.orb.ORB.getPresentationManager().setStubFactoryFactory(false,new DelegatingStubFactoryFactory());
  InitialContext.addUrlContextFactory("corbaloc",JBossCNCtxFactory.INSTANCE);
  InitialContext.addUrlContextFactory("corbaname",JBossCNCtxFactory.INSTANCE);
  InitialContext.addUrlContextFactory("IOR",JBossCNCtxFactory.INSTANCE);
  InitialContext.addUrlContextFactory("iiopname",JBossCNCtxFactory.INSTANCE);
  InitialContext.addUrlContextFactory("iiop",JBossCNCtxFactory.INSTANCE);
  context.addStep(new AbstractDeploymentChainStep(){
    public void execute(    DeploymentProcessorTarget processorTarget){
      processorTarget.addDeploymentProcessor(JacORBExtension.SUBSYSTEM_NAME,Phase.DEPENDENCIES,Phase.DEPENDENCIES_JACORB,new JacORBDependencyProcessor());
      processorTarget.addDeploymentProcessor(JacORBExtension.SUBSYSTEM_NAME,Phase.PARSE,Phase.PARSE_JACORB,new JacORBMarkerProcessor());
    }
  }
,OperationContext.Stage.RUNTIME);
  Properties props=this.getConfigurationProperties(context,model);
  this.setupInitializers(props);
  this.setupSSLFactories(props);
  CorbaORBService orbService=new CorbaORBService(props);
  final ServiceBuilder<ORB> builder=context.getServiceTarget().addService(CorbaORBService.SERVICE_NAME,orbService);
  org.jboss.as.server.Services.addServerExecutorDependency(builder,orbService.getExecutorInjector(),false);
  String securityDomain=props.getProperty(JacORBSubsystemConstants.SECURITY_SECURITY_DOMAIN);
  if (securityDomain != null && !securityDomain.isEmpty())   builder.addDependency(SECURITY_DOMAIN_SERVICE_NAME.append(securityDomain));
  String socketBinding=props.getProperty(JacORBSubsystemConstants.ORB_SOCKET_BINDING);
  builder.addDependency(SocketBinding.JBOSS_BINDING_NAME.append(socketBinding),SocketBinding.class,orbService.getJacORBSocketBindingInjector());
  String sslSocketBinding=props.getProperty(JacORBSubsystemConstants.ORB_SSL_SOCKET_BINDING);
  builder.addDependency(SocketBinding.JBOSS_BINDING_NAME.append(sslSocketBinding),SocketBinding.class,orbService.getJacORBSSLSocketBindingInjector());
  builder.addListener(verificationHandler);
  newControllers.add(builder.setInitialMode(ServiceController.Mode.ACTIVE).install());
  CorbaPOAService rootPOAService=new CorbaPOAService("RootPOA","poa");
  newControllers.add(context.getServiceTarget().addService(CorbaPOAService.ROOT_SERVICE_NAME,rootPOAService).addDependency(CorbaORBService.SERVICE_NAME,ORB.class,rootPOAService.getORBInjector()).addListener(verificationHandler).setInitialMode(ServiceController.Mode.ACTIVE).install());
  final CorbaPOAService irPOAService=new CorbaPOAService("IRPOA","irpoa",IdAssignmentPolicyValue.USER_ID,null,null,LifespanPolicyValue.PERSISTENT,null,null,null);
  newControllers.add(context.getServiceTarget().addService(CorbaPOAService.INTERFACE_REPOSITORY_SERVICE_NAME,irPOAService).addDependency(CorbaPOAService.ROOT_SERVICE_NAME,POA.class,irPOAService.getParentPOAInjector()).addListener(verificationHandler).setInitialMode(ServiceController.Mode.ACTIVE).install());
  final CorbaPOAService namingPOAService=new CorbaPOAService("Naming",null,IdAssignmentPolicyValue.USER_ID,null,null,LifespanPolicyValue.PERSISTENT,null,null,null);
  newControllers.add(context.getServiceTarget().addService(CorbaPOAService.SERVICE_NAME.append("namingpoa"),namingPOAService).addDependency(CorbaPOAService.ROOT_SERVICE_NAME,POA.class,namingPOAService.getParentPOAInjector()).addListener(verificationHandler).setInitialMode(ServiceController.Mode.ACTIVE).install());
  final CorbaNamingService namingService=new CorbaNamingService();
  newControllers.add(context.getServiceTarget().addService(CorbaNamingService.SERVICE_NAME,namingService).addDependency(CorbaORBService.SERVICE_NAME,ORB.class,namingService.getORBInjector()).addDependency(CorbaPOAService.ROOT_SERVICE_NAME,POA.class,namingService.getRootPOAInjector()).addDependency(CorbaPOAService.SERVICE_NAME.append("namingpoa"),POA.class,namingService.getNamingPOAInjector()).addListener(verificationHandler).setInitialMode(ServiceController.Mode.ACTIVE).install());
  IORSecurityConfigMetaData securityConfigMetaData=null;
  if (model.hasDefined(JacORBSubsystemConstants.IOR_SETTINGS)) {
    securityConfigMetaData=this.createIORSecurityConfigMetaData(context,model.get(IORSettingsDefinition.INSTANCE.getPathElement().getKeyValuePair()));
  }
  newControllers.add(context.getServiceTarget().addService(IORSecConfigMetaDataService.SERVICE_NAME,new IORSecConfigMetaDataService(securityConfigMetaData)).addListener(verificationHandler).setInitialMode(ServiceController.Mode.ACTIVE).install());
}
