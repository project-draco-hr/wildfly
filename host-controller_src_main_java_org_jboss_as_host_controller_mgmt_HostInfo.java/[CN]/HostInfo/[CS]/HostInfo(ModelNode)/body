{
  hostName=hostInfo.require(NAME).asString();
  releaseVersion=hostInfo.require(RELEASE_VERSION).asString();
  releaseCodeName=hostInfo.require(RELEASE_CODENAME).asString();
  managementMajorVersion=hostInfo.require(MANAGEMENT_MAJOR_VERSION).asInt();
  managementMinorVersion=hostInfo.require(MANAGEMENT_MINOR_VERSION).asInt();
  managementMicroVersion=hostInfo.hasDefined(MANAGEMENT_MICRO_VERSION) ? hostInfo.require(MANAGEMENT_MICRO_VERSION).asInt() : 0;
  productName=hostInfo.hasDefined(PRODUCT_NAME) ? hostInfo.require(PRODUCT_NAME).asString() : null;
  productVersion=hostInfo.hasDefined(PRODUCT_VERSION) ? hostInfo.require(PRODUCT_VERSION).asString() : null;
  remoteConnectionId=hostInfo.hasDefined(RemoteDomainConnectionService.DOMAIN_CONNECTION_ID) ? hostInfo.get(RemoteDomainConnectionService.DOMAIN_CONNECTION_ID).asLong() : null;
  if (hostInfo.hasDefined(IGNORED_RESOURCES)) {
    ignoredResources=new HashMap<String,IgnoredType>();
    for (    Property prop : hostInfo.require(IGNORED_RESOURCES).asPropertyList()) {
      String type=prop.getName();
      ModelNode model=prop.getValue();
      IgnoredType ignoredType=model.get(WILDCARD).asBoolean(false) ? new IgnoredType() : new IgnoredType(model.get(NAMES));
      ignoredResources.put(type,ignoredType);
    }
  }
 else {
    ignoredResources=null;
  }
}
