{
  ModelNode codeNode=DiscoveryOptionResourceDefinition.CODE.resolveModelAttribute(context,model);
  String discoveryOptionClassName=codeNode.isDefined() ? codeNode.asString() : null;
  ModelNode moduleNode=DiscoveryOptionResourceDefinition.MODULE.resolveModelAttribute(context,model);
  String moduleName=moduleNode.isDefined() ? moduleNode.asString() : null;
  final Map<String,ModelNode> discoveryOptionProperties=new HashMap<String,ModelNode>();
  if (operation.hasDefined(DiscoveryOptionResourceDefinition.PROPERTIES.getName())) {
    for (    Map.Entry<String,String> discoveryOptionProperty : DiscoveryOptionResourceDefinition.PROPERTIES.unwrap(context,model).entrySet()) {
      discoveryOptionProperties.put(discoveryOptionProperty.getKey(),new ModelNode(discoveryOptionProperty.getValue()));
    }
  }
  try {
    ModuleIdentifier moduleID=ModuleIdentifier.fromString(moduleName);
    final Class<? extends DiscoveryOption> discoveryOptionClass=Module.loadClassFromCallerModuleLoader(moduleID,discoveryOptionClassName).asSubclass(DiscoveryOption.class);
    final Constructor<? extends DiscoveryOption> constructor=discoveryOptionClass.getConstructor(new Class[]{Map.class});
    final DiscoveryOption discoveryOption=constructor.newInstance(discoveryOptionProperties);
    hostControllerInfo.addRemoteDomainControllerDiscoveryOption(discoveryOption);
  }
 catch (  Exception e) {
    throw HostControllerLogger.ROOT_LOGGER.cannotInstantiateDiscoveryOptionClass(discoveryOptionClassName,e.getLocalizedMessage());
  }
}
