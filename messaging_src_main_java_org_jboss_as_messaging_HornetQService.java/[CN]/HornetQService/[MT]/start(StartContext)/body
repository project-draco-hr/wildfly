{
  ClassLoader origTCCL=SecurityActions.getContextClassLoader();
  JournalType jtype=configuration.getJournalType();
  if (jtype == JournalType.ASYNCIO) {
    boolean supportsAIO=AIOSequentialFileFactory.isSupported();
    if (supportsAIO == false) {
      log.warn("AIO wasn't located on this platform, it will fall back to using pure Java NIO. If your platform is Linux, install LibAIO to enable the AIO journal");
      configuration.setJournalType(JournalType.NIO);
    }
  }
  configuration.setFileDeploymentEnabled(false);
  configuration.setLogDelegateFactoryClassName(LOGGING_FACTORY);
  configuration.setBindingsDirectory(paths.get("bindings"));
  configuration.setLargeMessagesDirectory(paths.get("largemessages"));
  configuration.setJournalDirectory(paths.get("journal"));
  configuration.setPagingDirectory(paths.get("paging"));
  configuration.setSecurityEnabled(false);
  try {
    Collection<TransportConfiguration> acceptors=configuration.getAcceptorConfigurations();
    Collection<TransportConfiguration> connectors=configuration.getConnectorConfigurations().values();
    Collection<BroadcastGroupConfiguration> broadcastGroups=configuration.getBroadcastGroupConfigurations();
    Map<String,DiscoveryGroupConfiguration> discoveryGroups=configuration.getDiscoveryGroupConfigurations();
    if (connectors != null) {
      for (      TransportConfiguration tc : connectors) {
        Object socketRef=tc.getParams().remove(SOCKET_REF);
        if (socketRef != null) {
          String name=socketRef.toString();
          SocketBinding binding=socketBindings.get(name);
          if (binding == null) {
            throw new StartException("Failed to find SocketBinding for connector: " + tc.getName());
          }
          tc.getParams().put(HOST,binding.getSocketAddress().getHostName());
          tc.getParams().put(PORT,"" + binding.getSocketAddress().getPort());
        }
      }
    }
    if (acceptors != null) {
      for (      TransportConfiguration tc : acceptors) {
        Object socketRef=tc.getParams().remove(SOCKET_REF);
        if (socketRef != null) {
          String name=socketRef.toString();
          SocketBinding binding=socketBindings.get(name);
          if (binding == null) {
            throw new StartException("Failed to find SocketBinding for connector: " + tc.getName());
          }
          tc.getParams().put(HOST,binding.getSocketAddress().getHostName());
          tc.getParams().put(PORT,"" + binding.getSocketAddress().getPort());
        }
      }
    }
    if (broadcastGroups != null) {
      final List<BroadcastGroupConfiguration> newConfigs=new ArrayList<BroadcastGroupConfiguration>();
      for (      final BroadcastGroupConfiguration config : broadcastGroups) {
        final String name=config.getName();
        final SocketBinding binding=groupBindings.get(name);
        if (binding == null) {
          throw new StartException("Failed to find SocketBinding for broadcast binding: " + name);
        }
        newConfigs.add(BroadcastGroupAdd.createBroadcastGroupConfiguration(name,config,binding));
      }
    }
    if (discoveryGroups != null) {
      configuration.setDiscoveryGroupConfigurations(new HashMap<String,DiscoveryGroupConfiguration>());
      for (      final Map.Entry<String,DiscoveryGroupConfiguration> entry : discoveryGroups.entrySet()) {
        final String name=entry.getKey();
        final SocketBinding binding=groupBindings.get(name);
        if (binding == null) {
          throw new StartException("Failed to find SocketBinding for discovery binding: " + entry.getKey());
        }
        final DiscoveryGroupConfiguration config=DiscoveryGroupAdd.createDiscoveryGroupConfiguration(name,entry.getValue(),binding);
        configuration.getDiscoveryGroupConfigurations().put(name,config);
      }
    }
    server=new HornetQServerImpl(configuration,mbeanServer.getOptionalValue(),null);
  }
 catch (  Exception e) {
    throw new StartException("Failed to start service",e);
  }
 finally {
    SecurityActions.setContextClassLoader(origTCCL);
  }
}
