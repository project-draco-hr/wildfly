{
  final ModelNode opAddr=operation.get(OP_ADDR);
  final PathAddress address=PathAddress.pathAddress(opAddr);
  final String name=address.getLastElement().getValue();
  final String groupName=operation.hasDefined(GROUP_NAME) ? operation.get(GROUP_NAME).asString() : null;
  final String threadNamePattern=operation.hasDefined(THREAD_NAME_PATTERN) ? operation.get(THREAD_NAME_PATTERN).asString() : null;
  final int priority=operation.hasDefined(PRIORITY) ? operation.get(PRIORITY).asInt() : -1;
  if (priority != -1 && priority < 0 || priority > 10) {
    throw new IllegalArgumentException(PRIORITY + " is out of range " + priority);
  }
  final ModelNode properties=operation.hasDefined(PROPERTIES) ? operation.get(PROPERTIES) : null;
  final ModelNode model=context.readModelForUpdate(PathAddress.EMPTY_ADDRESS);
  model.get(NAME).set(name);
  if (groupName != null) {
    model.get(GROUP_NAME).set(groupName);
  }
  if (threadNamePattern != null) {
    model.get(THREAD_NAME_PATTERN).set(threadNamePattern);
  }
  if (priority >= 0) {
    model.get(PRIORITY).set(priority);
  }
  if (properties != null) {
    model.get(PROPERTIES).set(properties);
  }
  if (context.getType() == NewOperationContext.Type.SERVER) {
    context.addStep(new NewStepHandler(){
      public void execute(      NewOperationContext context,      ModelNode operation){
        final ServiceVerificationHandler verificationHandler=new ServiceVerificationHandler();
        final ServiceTarget target=context.getServiceTarget();
        final ThreadFactoryService service=new ThreadFactoryService();
        service.setNamePattern(threadNamePattern);
        service.setPriority(priority);
        service.setThreadGroupName(groupName);
        target.addService(ThreadsServices.threadFactoryName(name),service).addListener(verificationHandler).setInitialMode(ServiceController.Mode.ACTIVE).install();
        context.addStep(verificationHandler,NewOperationContext.Stage.VERIFY);
        if (context.completeStep() == NewOperationContext.ResultAction.ROLLBACK) {
          context.removeService(ThreadsServices.threadFactoryName(name));
        }
      }
    }
,NewOperationContext.Stage.RUNTIME);
  }
  context.completeStep();
}
