{
  registration.registerOperationHandler(getOperationDefinition("update"),new OperationStepHandler(){
    @Override public void execute(    final OperationContext context,    final ModelNode operation) throws OperationFailedException {
      final Resource resource=context.readResourceForUpdate(PathAddress.EMPTY_ADDRESS);
      final ModelNode model=resource.getModel();
      model.get("test-attribute").set("test");
      context.getResult().set(model);
      context.stepCompleted();
    }
  }
);
  registration.registerSubModel(createResourceDefinition(NEW_ELEMENT));
  registration.registerSubModel(createResourceDefinition(OTHER_NEW_ELEMENT));
  registration.registerSubModel(createResourceDefinition(RENAMED));
  registration.registerOperationHandler(getOperationDefinition("test"),new OperationStepHandler(){
    @Override public void execute(    OperationContext context,    ModelNode operation) throws OperationFailedException {
      context.getResult().set(true);
      context.stepCompleted();
    }
  }
);
  final ResourceTransformationDescriptionBuilder subsystemBuilder=TransformationDescriptionBuilder.Factory.createSubsystemInstance();
  subsystemBuilder.getAttributeBuilder().addRejectCheck(RejectAttributeChecker.SIMPLE_EXPRESSIONS,"int","string").end().addRawOperationTransformationOverride("update",new UpdateTransformer()).addOperationTransformationOverride("test").inheritResourceAttributeDefinitions().setCustomOperationTransformer(new OperationTransformer(){
    @Override public TransformedOperation transformOperation(    TransformationContext context,    PathAddress address,    ModelNode operation) throws OperationFailedException {
      return new TransformedOperation(operation,new OperationResultTransformer(){
        @Override public ModelNode transformResult(        ModelNode result){
          result.get(RESULT).set(false);
          return result;
        }
      }
);
    }
  }
);
  final ModelVersion version=ModelVersion.create(1,0,0);
  subsystemBuilder.discardChildResource(NEW_ELEMENT);
  subsystemBuilder.rejectChildResource(OTHER_NEW_ELEMENT);
  subsystemBuilder.addChildRedirection(RENAMED,PathElement.pathElement("element","renamed"));
  TransformationDescription.Tools.register(subsystemBuilder.build(),subsystem,version);
}
