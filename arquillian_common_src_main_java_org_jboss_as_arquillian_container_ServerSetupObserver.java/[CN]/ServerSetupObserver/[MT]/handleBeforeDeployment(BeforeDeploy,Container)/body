{
  final ClassContext classContext=classContextInstance.get();
  if (classContext == null) {
    return;
  }
  final Class<?> currentClass=classContext.getActiveId();
  final ContainerClassHolder holder=new ContainerClassHolder(container.getName(),currentClass);
  if (alreadyRun.contains(holder)) {
    return;
  }
  alreadyRun.add(holder);
  ServerSetup setup=currentClass.getAnnotation(ServerSetup.class);
  if (setup == null) {
    return;
  }
  final Class<? extends ServerSetupTask>[] classes=setup.value();
  if (current.isEmpty()) {
    for (    Class<? extends ServerSetupTask> clazz : classes) {
      Constructor<? extends ServerSetupTask> ctor=clazz.getDeclaredConstructor();
      ctor.setAccessible(true);
      current.add(ctor.newInstance());
    }
  }
 else {
    for (int i=0; i < current.size(); ++i) {
      if (classes[i] != current.get(i).getClass()) {
        throw new RuntimeException("Mismatched ServerSetupTask current is " + current + " but "+ currentClass+ " is expecting "+ Arrays.asList(classes));
      }
    }
  }
  final ManagementClient client=managementClient.get();
  for (  ServerSetupTask instance : current) {
    instance.setup(client);
  }
  active.add(client);
}
