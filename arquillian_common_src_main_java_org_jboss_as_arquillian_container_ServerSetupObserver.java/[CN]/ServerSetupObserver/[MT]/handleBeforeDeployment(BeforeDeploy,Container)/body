{
  if (deployed == null) {
    deployed=new HashMap<String,Integer>();
    setupTasksAll.clear();
    setupTasksInForce.clear();
    afterClassRun=false;
  }
  if (deployed.containsKey(container.getName())) {
    deployed.put(container.getName(),deployed.get(container.getName()) + 1);
  }
 else {
    deployed.put(container.getName(),1);
  }
  if (active.containsKey(container.getName())) {
    return;
  }
  final ClassContext classContext=classContextInstance.get();
  if (classContext == null) {
    return;
  }
  final Class<?> currentClass=classContext.getActiveId();
  final ContainerClassHolder holder=new ContainerClassHolder(container.getName(),currentClass);
  ServerSetup setup=currentClass.getAnnotation(ServerSetup.class);
  if (setup == null) {
    return;
  }
  final Class<? extends ServerSetupTask>[] classes=setup.value();
  if (setupTasksAll.isEmpty()) {
    for (    Class<? extends ServerSetupTask> clazz : classes) {
      Constructor<? extends ServerSetupTask> ctor=clazz.getDeclaredConstructor();
      ctor.setAccessible(true);
      setupTasksAll.add(ctor.newInstance());
    }
  }
 else {
    for (int i=0; i < setupTasksAll.size(); ++i) {
      if (classes[i] != setupTasksAll.get(i).getClass()) {
        throw new RuntimeException("Mismatched ServerSetupTask current is " + setupTasksAll + " but "+ currentClass+ " is expecting "+ Arrays.asList(classes));
      }
    }
  }
  final ManagementClient client=managementClient.get();
  int index=0;
  try {
    for (; index < setupTasksAll.size(); index++) {
      final ServerSetupTask instance=setupTasksAll.get(index);
      setupTasksInForce.add(instance);
      instance.setup(client,container.getName());
    }
  }
 catch (  Throwable e) {
    log.error("Setup task failed during setup. Offending class '" + setupTasksAll.get(index) + "'",e);
  }
  active.put(container.getName(),client);
}
