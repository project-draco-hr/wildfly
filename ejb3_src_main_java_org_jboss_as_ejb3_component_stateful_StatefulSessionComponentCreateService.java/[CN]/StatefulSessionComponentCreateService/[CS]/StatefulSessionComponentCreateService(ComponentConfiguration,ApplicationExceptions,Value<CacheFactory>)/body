{
  super(componentConfiguration,ejbJarConfiguration);
  final StatefulComponentDescription componentDescription=(StatefulComponentDescription)componentConfiguration.getComponentDescription();
  final ClassLoader classLoader=componentConfiguration.getModuleClassLoader();
  final InterceptorFactory tcclInterceptorFactory=new ImmediateInterceptorFactory(new ContextClassLoaderInterceptor(classLoader));
  final InterceptorFactory namespaceContextInterceptorFactory=componentConfiguration.getNamespaceContextInterceptorFactory();
  this.afterBeginMethod=componentDescription.getAfterBegin();
  this.afterBegin=(this.afterBeginMethod != null) ? Interceptors.getChainedInterceptorFactory(tcclInterceptorFactory,namespaceContextInterceptorFactory,CurrentInvocationContextInterceptor.FACTORY,invokeMethodOnTarget(this.afterBeginMethod)) : null;
  this.afterCompletionMethod=componentDescription.getAfterCompletion();
  this.afterCompletion=(this.afterCompletionMethod != null) ? Interceptors.getChainedInterceptorFactory(tcclInterceptorFactory,namespaceContextInterceptorFactory,CurrentInvocationContextInterceptor.FACTORY,invokeMethodOnTarget(this.afterCompletionMethod)) : null;
  this.beforeCompletionMethod=componentDescription.getBeforeCompletion();
  this.beforeCompletion=(this.beforeCompletionMethod != null) ? Interceptors.getChainedInterceptorFactory(tcclInterceptorFactory,namespaceContextInterceptorFactory,CurrentInvocationContextInterceptor.FACTORY,invokeMethodOnTarget(this.beforeCompletionMethod)) : null;
  this.prePassivate=Interceptors.getChainedInterceptorFactory(componentConfiguration.getPrePassivateInterceptors());
  this.postActivate=Interceptors.getChainedInterceptorFactory(componentConfiguration.getPostActivateInterceptors());
  this.statefulTimeout=componentDescription.getStatefulTimeout();
  this.ejb2XRemoveMethod=Interceptors.getChainedInterceptorFactory(StatefulSessionSynchronizationInterceptor.factory(componentDescription.getTransactionManagementType()),new ImmediateInterceptorFactory(new StatefulRemoveInterceptor(false)),Interceptors.getTerminalInterceptorFactory());
  this.cache=componentDescription.getCache();
  this.loader=componentConfiguration.getModuleClassLoader();
  this.moduleLoader=componentConfiguration.getModuleLoader();
  this.serializableInterceptorContextKeys=componentConfiguration.getInterceptorContextKeys();
  this.passivationCapable=componentDescription.isPassivationApplicable();
  this.deploymentUnitServiceName=componentDescription.getDeploymentUnitServiceName();
  this.componentServiceName=componentDescription.getServiceName();
  this.cacheFactory=cacheFactory;
}
