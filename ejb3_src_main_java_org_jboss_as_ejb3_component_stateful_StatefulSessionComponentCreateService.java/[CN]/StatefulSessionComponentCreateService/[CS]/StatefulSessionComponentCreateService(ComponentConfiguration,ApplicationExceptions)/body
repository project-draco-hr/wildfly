{
  super(componentConfiguration,ejbJarConfiguration);
  final StatefulComponentDescription componentDescription=(StatefulComponentDescription)componentConfiguration.getComponentDescription();
  final ClassLoader classLoader=componentConfiguration.getModuleClassLoader();
  final InterceptorFactory tcclInterceptorFactory=new ImmediateInterceptorFactory(new ContextClassLoaderInterceptor(classLoader));
  final InterceptorFactory namespaceContextInterceptorFactory=componentConfiguration.getNamespaceContextInterceptorFactory();
  this.afterBeginMethod=componentDescription.getAfterBegin();
  this.afterBegin=(this.afterBeginMethod != null) ? Interceptors.getChainedInterceptorFactory(tcclInterceptorFactory,namespaceContextInterceptorFactory,CurrentInvocationContextInterceptor.FACTORY,invokeMethodOnTarget(this.afterBeginMethod)) : null;
  this.afterCompletionMethod=componentDescription.getAfterCompletion();
  this.afterCompletion=(this.afterCompletionMethod != null) ? Interceptors.getChainedInterceptorFactory(tcclInterceptorFactory,namespaceContextInterceptorFactory,CurrentInvocationContextInterceptor.FACTORY,invokeMethodOnTarget(this.afterCompletionMethod)) : null;
  this.beforeCompletionMethod=componentDescription.getBeforeCompletion();
  this.beforeCompletion=(this.beforeCompletionMethod != null) ? Interceptors.getChainedInterceptorFactory(tcclInterceptorFactory,namespaceContextInterceptorFactory,CurrentInvocationContextInterceptor.FACTORY,invokeMethodOnTarget(this.beforeCompletionMethod)) : null;
  this.prePassivate=Interceptors.getChainedInterceptorFactory(componentConfiguration.getPrePassivateInterceptors());
  this.postActivate=Interceptors.getChainedInterceptorFactory(componentConfiguration.getPostActivateInterceptors());
  this.statefulTimeout=componentDescription.getStatefulTimeout();
  this.ejb2XRemoveMethod=Interceptors.getChainedInterceptorFactory(StatefulSessionSynchronizationInterceptor.factory(componentDescription.getTransactionManagementType()),new ImmediateInterceptorFactory(new StatefulRemoveInterceptor(false)),Interceptors.getTerminalInterceptorFactory());
  this.cache=componentDescription.getCache();
  MarshallingConfiguration marshallingConfiguration=new MarshallingConfiguration();
  marshallingConfiguration.setSerializedCreator(new SunReflectiveCreator());
  marshallingConfiguration.setExternalizerCreator(new ReflectiveCreator());
  marshallingConfiguration.setClassResolver(new ClassLoaderAwareClassResolver(ModularClassResolver.getInstance(componentConfiguration.getModuleLoader()),componentConfiguration.getModuleClassLoader()));
  marshallingConfiguration.setSerializabilityChecker(new StatefulSessionBeanSerializabilityChecker(componentConfiguration.getComponentClass()));
  marshallingConfiguration.setClassTable(new StatefulSessionBeanClassTable());
  marshallingConfiguration.setObjectTable(new EJBClientContextIdentifierObjectTable());
  this.marshallingConfigurations=Collections.singletonMap(CURRENT_MARSHALLING_VERSION,marshallingConfiguration);
  this.serializableInterceptorContextKeys=componentConfiguration.getInterceptorContextKeys();
}
