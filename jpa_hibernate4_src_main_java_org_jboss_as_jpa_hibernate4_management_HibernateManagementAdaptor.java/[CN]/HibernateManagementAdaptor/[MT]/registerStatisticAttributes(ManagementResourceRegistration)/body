{
  jpaHibernateRegistration.registerMetric(OPERATION_ENTITY_DELETE_COUNT,new AbstractMetricsHandler(){
    @Override void handle(    final ModelNode response,    final String name,    ManagementLookup stats,    OperationContext context){
      response.set(stats.getStatistics().getEntityDeleteCount());
    }
  }
);
  jpaHibernateRegistration.registerMetric(OPERATION_ENTITY_INSERT_COUNT,new AbstractMetricsHandler(){
    @Override void handle(    final ModelNode response,    final String name,    ManagementLookup stats,    OperationContext context){
      response.set(stats.getStatistics().getEntityInsertCount());
    }
  }
);
  jpaHibernateRegistration.registerMetric(OPERATION_ENTITY_LOAD_COUNT,new AbstractMetricsHandler(){
    @Override void handle(    final ModelNode response,    final String name,    ManagementLookup stats,    OperationContext context){
      response.set(stats.getStatistics().getEntityLoadCount());
    }
  }
);
  jpaHibernateRegistration.registerMetric(OPERATION_ENTITY_FETCH_COUNT,new AbstractMetricsHandler(){
    @Override void handle(    final ModelNode response,    final String name,    ManagementLookup stats,    OperationContext context){
      response.set(stats.getStatistics().getEntityFetchCount());
    }
  }
);
  jpaHibernateRegistration.registerMetric(OPERATION_ENTITY_UPDATE_COUNT,new AbstractMetricsHandler(){
    @Override void handle(    final ModelNode response,    final String name,    ManagementLookup stats,    OperationContext context){
      response.set(stats.getStatistics().getEntityUpdateCount());
    }
  }
);
  jpaHibernateRegistration.registerMetric(OPERATION_QUERY_EXECUTION_COUNT,new AbstractMetricsHandler(){
    @Override void handle(    final ModelNode response,    final String name,    ManagementLookup stats,    OperationContext context){
      response.set(stats.getStatistics().getQueryExecutionCount());
    }
  }
);
  jpaHibernateRegistration.registerMetric(OPERATION_QUERY_EXECUTION_MAX_TIME,new AbstractMetricsHandler(){
    @Override void handle(    final ModelNode response,    final String name,    ManagementLookup stats,    OperationContext context){
      response.set(stats.getStatistics().getQueryExecutionMaxTime());
    }
  }
);
  jpaHibernateRegistration.registerMetric(OPERATION_QUERY_EXECUTION_MAX_TIME_QUERY_STRING,new AbstractMetricsHandler(){
    @Override void handle(    final ModelNode response,    final String name,    ManagementLookup stats,    OperationContext context){
      String sql=stats.getStatistics().getQueryExecutionMaxTimeQueryString();
      if (sql != null) {
        response.set(sql);
      }
 else {
        context.getResult();
      }
    }
  }
);
  jpaHibernateRegistration.registerMetric(OPERATION_QUERY_CACHE_HIT_COUNT,new AbstractMetricsHandler(){
    @Override void handle(    final ModelNode response,    final String name,    ManagementLookup stats,    OperationContext context){
      response.set(stats.getStatistics().getQueryCacheHitCount());
    }
  }
);
  jpaHibernateRegistration.registerMetric(OPERATION_QUERY_CACHE_MISS_COUNT,new AbstractMetricsHandler(){
    @Override void handle(    final ModelNode response,    final String name,    ManagementLookup stats,    OperationContext context){
      response.set(stats.getStatistics().getQueryCacheMissCount());
    }
  }
);
  jpaHibernateRegistration.registerMetric(OPERATION_QUERY_CACHE_PUT_COUNT,new AbstractMetricsHandler(){
    @Override void handle(    final ModelNode response,    final String name,    ManagementLookup stats,    OperationContext context){
      response.set(stats.getStatistics().getQueryCachePutCount());
    }
  }
);
  jpaHibernateRegistration.registerMetric(OPERATION_FLUSH_COUNT,new AbstractMetricsHandler(){
    @Override void handle(    final ModelNode response,    final String name,    ManagementLookup stats,    OperationContext context){
      response.set(stats.getStatistics().getFlushCount());
    }
  }
);
  jpaHibernateRegistration.registerMetric(OPERATION_CONNECT_COUNT,new AbstractMetricsHandler(){
    @Override void handle(    final ModelNode response,    final String name,    ManagementLookup stats,    OperationContext context){
      response.set(stats.getStatistics().getConnectCount());
    }
  }
);
  jpaHibernateRegistration.registerMetric(OPERATION_SECOND_LEVEL_CACHE_HIT_COUNT,new AbstractMetricsHandler(){
    @Override void handle(    final ModelNode response,    final String name,    ManagementLookup stats,    OperationContext context){
      response.set(stats.getStatistics().getSecondLevelCacheHitCount());
    }
  }
);
  jpaHibernateRegistration.registerMetric(OPERATION_SECOND_LEVEL_CACHE_MISS_COUNT,new AbstractMetricsHandler(){
    @Override void handle(    final ModelNode response,    final String name,    ManagementLookup stats,    OperationContext context){
      response.set(stats.getStatistics().getSecondLevelCacheMissCount());
    }
  }
);
  jpaHibernateRegistration.registerMetric(OPERATION_SECOND_LEVEL_CACHE_PUT_COUNT,new AbstractMetricsHandler(){
    @Override void handle(    final ModelNode response,    final String name,    ManagementLookup stats,    OperationContext context){
      response.set(stats.getStatistics().getSecondLevelCachePutCount());
    }
  }
);
  jpaHibernateRegistration.registerMetric(OPERATION_SESSION_CLOSE_COUNT,new AbstractMetricsHandler(){
    @Override void handle(    final ModelNode response,    final String name,    ManagementLookup stats,    OperationContext context){
      response.set(stats.getStatistics().getSessionCloseCount());
    }
  }
);
  jpaHibernateRegistration.registerMetric(OPERATION_SESSION_OPEN_COUNT,new AbstractMetricsHandler(){
    @Override void handle(    final ModelNode response,    final String name,    ManagementLookup stats,    OperationContext context){
      response.set(stats.getStatistics().getSessionOpenCount());
    }
  }
);
  jpaHibernateRegistration.registerMetric(OPERATION_COLLECTION_LOAD_COUNT,new AbstractMetricsHandler(){
    @Override void handle(    final ModelNode response,    final String name,    ManagementLookup stats,    OperationContext context){
      response.set(stats.getStatistics().getCollectionLoadCount());
    }
  }
);
  jpaHibernateRegistration.registerMetric(OPERATION_COLLECTION_FETCH_COUNT,new AbstractMetricsHandler(){
    @Override void handle(    final ModelNode response,    final String name,    ManagementLookup stats,    OperationContext context){
      response.set(stats.getStatistics().getCollectionFetchCount());
    }
  }
);
  jpaHibernateRegistration.registerMetric(OPERATION_COLLECTION_UPDATE_COUNT,new AbstractMetricsHandler(){
    @Override void handle(    final ModelNode response,    final String name,    ManagementLookup stats,    OperationContext context){
      response.set(stats.getStatistics().getCollectionUpdateCount());
    }
  }
);
  jpaHibernateRegistration.registerMetric(OPERATION_COLLECTION_REMOVE_COUNT,new AbstractMetricsHandler(){
    @Override void handle(    final ModelNode response,    final String name,    ManagementLookup stats,    OperationContext context){
      response.set(stats.getStatistics().getCollectionRemoveCount());
    }
  }
);
  jpaHibernateRegistration.registerMetric(OPERATION_COLLECTION_RECREATED_COUNT,new AbstractMetricsHandler(){
    @Override void handle(    final ModelNode response,    final String name,    ManagementLookup stats,    OperationContext context){
      response.set(stats.getStatistics().getCollectionRecreateCount());
    }
  }
);
  jpaHibernateRegistration.registerMetric(OPERATION_SUCCESSFUL_TRANSACTION_COUNT,new AbstractMetricsHandler(){
    @Override void handle(    final ModelNode response,    final String name,    ManagementLookup stats,    OperationContext context){
      response.set(stats.getStatistics().getSuccessfulTransactionCount());
    }
  }
);
  jpaHibernateRegistration.registerMetric(OPERATION_COMPLETED_TRANSACTION_COUNT,new AbstractMetricsHandler(){
    @Override void handle(    final ModelNode response,    final String name,    ManagementLookup stats,    OperationContext context){
      response.set(stats.getStatistics().getTransactionCount());
    }
  }
);
  jpaHibernateRegistration.registerMetric(OPERATION_PREPARED_STATEMENT_COUNT,new AbstractMetricsHandler(){
    @Override void handle(    final ModelNode response,    final String name,    ManagementLookup stats,    OperationContext context){
      response.set(stats.getStatistics().getPrepareStatementCount());
    }
  }
);
  jpaHibernateRegistration.registerMetric(OPERATION_CLOSE_STATEMENT_COUNT,new AbstractMetricsHandler(){
    @Override void handle(    final ModelNode response,    final String name,    ManagementLookup stats,    OperationContext context){
      response.set(stats.getStatistics().getCloseStatementCount());
    }
  }
);
  jpaHibernateRegistration.registerMetric(OPERATION_OPTIMISTIC_FAILURE_COUNT,new AbstractMetricsHandler(){
    @Override void handle(    final ModelNode response,    final String name,    ManagementLookup stats,    OperationContext context){
      response.set(stats.getStatistics().getOptimisticFailureCount());
    }
  }
);
  jpaHibernateRegistration.registerReadWriteAttribute(OPERATION_STATISTICS_ENABLED,new AbstractMetricsHandler(){
    @Override void handle(    final ModelNode response,    final String name,    ManagementLookup stats,    OperationContext context){
      response.set(stats.getStatistics().isStatisticsEnabled());
    }
  }
,new StatisticsEnabledWriteHandler(persistenceUnitRegistry),AttributeAccess.Storage.RUNTIME);
}
