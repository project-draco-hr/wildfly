{
  jpaHibernateRegistration.registerMetric(OPERATION_ENTITY_DELETE_COUNT,new AbstractMetricsHandler(){
    @Override void handle(    final ModelNode response,    final String name,    Statistics stats,    OperationContext context){
      response.set(stats.getEntityDeleteCount());
    }
  }
);
  jpaHibernateRegistration.registerMetric(OPERATION_ENTITY_INSERT_COUNT,new AbstractMetricsHandler(){
    @Override void handle(    final ModelNode response,    final String name,    Statistics stats,    OperationContext context){
      response.set(stats.getEntityInsertCount());
    }
  }
);
  jpaHibernateRegistration.registerMetric(OPERATION_ENTITY_LOAD_COUNT,new AbstractMetricsHandler(){
    @Override void handle(    final ModelNode response,    final String name,    Statistics stats,    OperationContext context){
      response.set(stats.getEntityLoadCount());
    }
  }
);
  jpaHibernateRegistration.registerMetric(OPERATION_ENTITY_FETCH_COUNT,new AbstractMetricsHandler(){
    @Override void handle(    final ModelNode response,    final String name,    Statistics stats,    OperationContext context){
      response.set(stats.getEntityFetchCount());
    }
  }
);
  jpaHibernateRegistration.registerMetric(OPERATION_ENTITY_UPDATE_COUNT,new AbstractMetricsHandler(){
    @Override void handle(    final ModelNode response,    final String name,    Statistics stats,    OperationContext context){
      response.set(stats.getEntityUpdateCount());
    }
  }
);
  jpaHibernateRegistration.registerMetric(OPERATION_QUERY_EXECUTION_COUNT,new AbstractMetricsHandler(){
    @Override void handle(    final ModelNode response,    final String name,    Statistics stats,    OperationContext context){
      response.set(stats.getQueryExecutionCount());
    }
  }
);
  jpaHibernateRegistration.registerMetric(OPERATION_QUERY_EXECUTION_MAX_TIME,new AbstractMetricsHandler(){
    @Override void handle(    final ModelNode response,    final String name,    Statistics stats,    OperationContext context){
      response.set(stats.getQueryExecutionMaxTime());
    }
  }
);
  jpaHibernateRegistration.registerMetric(OPERATION_QUERY_EXECUTION_MAX_TIME_QUERY_STRING,new AbstractMetricsHandler(){
    @Override void handle(    final ModelNode response,    final String name,    Statistics stats,    OperationContext context){
      String sql=stats.getQueryExecutionMaxTimeQueryString();
      if (sql != null) {
        response.set(sql);
      }
 else {
        context.getResult();
      }
    }
  }
);
  jpaHibernateRegistration.registerMetric(OPERATION_QUERY_CACHE_HIT_COUNT,new AbstractMetricsHandler(){
    @Override void handle(    final ModelNode response,    final String name,    Statistics stats,    OperationContext context){
      response.set(stats.getQueryCacheHitCount());
    }
  }
);
  jpaHibernateRegistration.registerMetric(OPERATION_QUERY_CACHE_MISS_COUNT,new AbstractMetricsHandler(){
    @Override void handle(    final ModelNode response,    final String name,    Statistics stats,    OperationContext context){
      response.set(stats.getQueryCacheMissCount());
    }
  }
);
  jpaHibernateRegistration.registerMetric(OPERATION_QUERY_CACHE_PUT_COUNT,new AbstractMetricsHandler(){
    @Override void handle(    final ModelNode response,    final String name,    Statistics stats,    OperationContext context){
      response.set(stats.getQueryCachePutCount());
    }
  }
);
  jpaHibernateRegistration.registerMetric(OPERATION_FLUSH_COUNT,new AbstractMetricsHandler(){
    @Override void handle(    final ModelNode response,    final String name,    Statistics stats,    OperationContext context){
      response.set(stats.getFlushCount());
    }
  }
);
  jpaHibernateRegistration.registerMetric(OPERATION_CONNECT_COUNT,new AbstractMetricsHandler(){
    @Override void handle(    final ModelNode response,    final String name,    Statistics stats,    OperationContext context){
      response.set(stats.getConnectCount());
    }
  }
);
  jpaHibernateRegistration.registerMetric(OPERATION_SECOND_LEVEL_CACHE_HIT_COUNT,new AbstractMetricsHandler(){
    @Override void handle(    final ModelNode response,    final String name,    Statistics stats,    OperationContext context){
      response.set(stats.getSecondLevelCacheHitCount());
    }
  }
);
  jpaHibernateRegistration.registerMetric(OPERATION_SECOND_LEVEL_CACHE_MISS_COUNT,new AbstractMetricsHandler(){
    @Override void handle(    final ModelNode response,    final String name,    Statistics stats,    OperationContext context){
      response.set(stats.getSecondLevelCacheMissCount());
    }
  }
);
  jpaHibernateRegistration.registerMetric(OPERATION_SECOND_LEVEL_CACHE_PUT_COUNT,new AbstractMetricsHandler(){
    @Override void handle(    final ModelNode response,    final String name,    Statistics stats,    OperationContext context){
      response.set(stats.getSecondLevelCachePutCount());
    }
  }
);
  jpaHibernateRegistration.registerMetric(OPERATION_SESSION_CLOSE_COUNT,new AbstractMetricsHandler(){
    @Override void handle(    final ModelNode response,    final String name,    Statistics stats,    OperationContext context){
      response.set(stats.getSessionCloseCount());
    }
  }
);
  jpaHibernateRegistration.registerMetric(OPERATION_SESSION_OPEN_COUNT,new AbstractMetricsHandler(){
    @Override void handle(    final ModelNode response,    final String name,    Statistics stats,    OperationContext context){
      response.set(stats.getSessionOpenCount());
    }
  }
);
  jpaHibernateRegistration.registerMetric(OPERATION_COLLECTION_LOAD_COUNT,new AbstractMetricsHandler(){
    @Override void handle(    final ModelNode response,    final String name,    Statistics stats,    OperationContext context){
      response.set(stats.getCollectionLoadCount());
    }
  }
);
  jpaHibernateRegistration.registerMetric(OPERATION_COLLECTION_FETCH_COUNT,new AbstractMetricsHandler(){
    @Override void handle(    final ModelNode response,    final String name,    Statistics stats,    OperationContext context){
      response.set(stats.getCollectionFetchCount());
    }
  }
);
  jpaHibernateRegistration.registerMetric(OPERATION_COLLECTION_UPDATE_COUNT,new AbstractMetricsHandler(){
    @Override void handle(    final ModelNode response,    final String name,    Statistics stats,    OperationContext context){
      response.set(stats.getCollectionUpdateCount());
    }
  }
);
  jpaHibernateRegistration.registerMetric(OPERATION_COLLECTION_REMOVE_COUNT,new AbstractMetricsHandler(){
    @Override void handle(    final ModelNode response,    final String name,    Statistics stats,    OperationContext context){
      response.set(stats.getCollectionRemoveCount());
    }
  }
);
  jpaHibernateRegistration.registerMetric(OPERATION_COLLECTION_RECREATED_COUNT,new AbstractMetricsHandler(){
    @Override void handle(    final ModelNode response,    final String name,    Statistics stats,    OperationContext context){
      response.set(stats.getCollectionRecreateCount());
    }
  }
);
  jpaHibernateRegistration.registerMetric(OPERATION_SUCCESSFUL_TRANSACTION_COUNT,new AbstractMetricsHandler(){
    @Override void handle(    final ModelNode response,    final String name,    Statistics stats,    OperationContext context){
      response.set(stats.getSuccessfulTransactionCount());
    }
  }
);
  jpaHibernateRegistration.registerMetric(OPERATION_COMPLETED_TRANSACTION_COUNT,new AbstractMetricsHandler(){
    @Override void handle(    final ModelNode response,    final String name,    Statistics stats,    OperationContext context){
      response.set(stats.getTransactionCount());
    }
  }
);
  jpaHibernateRegistration.registerMetric(OPERATION_PREPARED_STATEMENT_COUNT,new AbstractMetricsHandler(){
    @Override void handle(    final ModelNode response,    final String name,    Statistics stats,    OperationContext context){
      response.set(stats.getPrepareStatementCount());
    }
  }
);
  jpaHibernateRegistration.registerMetric(OPERATION_CLOSE_STATEMENT_COUNT,new AbstractMetricsHandler(){
    @Override void handle(    final ModelNode response,    final String name,    Statistics stats,    OperationContext context){
      response.set(stats.getCloseStatementCount());
    }
  }
);
  jpaHibernateRegistration.registerMetric(OPERATION_OPTIMISTIC_FAILURE_COUNT,new AbstractMetricsHandler(){
    @Override void handle(    final ModelNode response,    final String name,    Statistics stats,    OperationContext context){
      response.set(stats.getOptimisticFailureCount());
    }
  }
);
  jpaHibernateRegistration.registerReadWriteAttribute(OPERATION_STATISTICS_ENABLED,new AbstractMetricsHandler(){
    @Override void handle(    final ModelNode response,    final String name,    Statistics stats,    OperationContext context){
      response.set(stats.isStatisticsEnabled());
    }
  }
,new StatisticsEnabledWriteHandler(persistenceUnitRegistry),AttributeAccess.Storage.RUNTIME);
}
