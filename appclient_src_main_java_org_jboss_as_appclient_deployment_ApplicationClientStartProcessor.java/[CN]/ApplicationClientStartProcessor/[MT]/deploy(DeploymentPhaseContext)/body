{
  final DeploymentUnit deploymentUnit=phaseContext.getDeploymentUnit();
  final EEModuleDescription moduleDescription=deploymentUnit.getAttachment(org.jboss.as.ee.component.Attachments.EE_MODULE_DESCRIPTION);
  final ApplicationClientMetaData appClientData=deploymentUnit.getAttachment(AppClientAttachments.APPLICATION_CLIENT_META_DATA);
  final DeploymentReflectionIndex deploymentReflectionIndex=deploymentUnit.getAttachment(Attachments.REFLECTION_INDEX);
  final DeploymentClassIndex classIndex=deploymentUnit.getAttachment(Attachments.CLASS_INDEX);
  final CallbackHandler callbackHandler;
  if (appClientData != null && appClientData.getCallbackHandler() != null && !appClientData.getCallbackHandler().isEmpty()) {
    try {
      final Class<?> callbackClass=classIndex.classIndex(appClientData.getCallbackHandler()).getModuleClass();
      callbackHandler=new RealmCallbackWrapper((CallbackHandler)callbackClass.newInstance());
    }
 catch (    ClassNotFoundException e) {
      throw AppClientMessages.MESSAGES.couldNotLoadCallbackClass(appClientData.getCallbackHandler());
    }
catch (    Exception e) {
      throw AppClientMessages.MESSAGES.couldNotCreateCallbackHandler(appClientData.getCallbackHandler());
    }
  }
 else {
    callbackHandler=new DefaultApplicationClientCallbackHandler();
  }
  final Module module=deploymentUnit.getAttachment(Attachments.MODULE);
  Boolean activate=deploymentUnit.getAttachment(AppClientAttachments.START_APP_CLIENT);
  if (activate == null || !activate) {
    return;
  }
  final Class<?> mainClass=deploymentUnit.getAttachment(AppClientAttachments.MAIN_CLASS);
  if (mainClass == null) {
    throw MESSAGES.cannotStartAppClient(deploymentUnit.getName());
  }
  final ApplicationClientComponentDescription component=deploymentUnit.getAttachment(AppClientAttachments.APPLICATION_CLIENT_COMPONENT);
  ClassReflectionIndex<?> index=deploymentReflectionIndex.getClassIndex(mainClass);
  Method method=index.getMethod(void.class,"main",String[].class);
  if (method == null) {
    throw MESSAGES.cannotStartAppClient(deploymentUnit.getName(),mainClass);
  }
  final ApplicationClientStartService startService;
  final List<SetupAction> setupActions=deploymentUnit.getAttachmentList(org.jboss.as.ee.component.Attachments.OTHER_EE_SETUP_ACTIONS);
  if (connectionPropertiesUrl != null) {
    EJBClientConfiguration configuration;
    try {
      final File file=new File(connectionPropertiesUrl);
      final URL url;
      if (file.exists()) {
        url=file.toURI().toURL();
      }
 else {
        url=new URL(connectionPropertiesUrl);
      }
      Properties properties=new Properties();
      InputStream stream=null;
      try {
        stream=url.openStream();
        properties.load(stream);
      }
  finally {
        if (stream != null) {
          try {
            stream.close();
          }
 catch (          IOException e) {
          }
        }
      }
      final ClassLoader oldTccl=WildFlySecurityManager.getCurrentContextClassLoaderPrivileged();
      try {
        WildFlySecurityManager.setCurrentContextClassLoaderPrivileged(module.getClassLoader());
        configuration=new PropertiesBasedEJBClientConfiguration(properties);
        if (!properties.contains("username") && !properties.contains("callback.handler.class")) {
          configuration=new ForwardingEjbClientConfiguration(configuration){
            @Override public CallbackHandler getCallbackHandler(){
              return callbackHandler;
            }
          }
;
        }
        startService=new ApplicationClientStartService(method,parameters,moduleDescription.getNamespaceContextSelector(),module.getClassLoader(),setupActions,configuration);
      }
  finally {
        WildFlySecurityManager.setCurrentContextClassLoaderPrivileged(oldTccl);
      }
    }
 catch (    Exception e) {
      throw AppClientMessages.MESSAGES.exceptionLoadingEjbClientPropertiesURL(connectionPropertiesUrl,e);
    }
  }
 else {
    startService=new ApplicationClientStartService(method,parameters,moduleDescription.getNamespaceContextSelector(),module.getClassLoader(),setupActions,hostUrl,callbackHandler);
  }
  phaseContext.getServiceTarget().addService(deploymentUnit.getServiceName().append(ApplicationClientStartService.SERVICE_NAME),startService).addDependency(ApplicationClientDeploymentService.SERVICE_NAME,ApplicationClientDeploymentService.class,startService.getApplicationClientDeploymentServiceInjectedValue()).addDependency(component.getCreateServiceName(),Component.class,startService.getApplicationClientComponent()).install();
}
