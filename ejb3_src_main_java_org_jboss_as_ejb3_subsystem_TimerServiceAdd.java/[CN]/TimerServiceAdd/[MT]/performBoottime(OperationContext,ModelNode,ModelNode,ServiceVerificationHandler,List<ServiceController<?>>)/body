{
  final String defaultDataStore=TimerServiceResourceDefinition.DEFAULT_DATA_STORE.resolveModelAttribute(context,model).asString();
  final String threadPoolName=TimerServiceResourceDefinition.THREAD_POOL_NAME.resolveModelAttribute(context,model).asString();
  final ServiceName threadPoolServiceName=EJB3SubsystemModel.BASE_THREAD_POOL_SERVICE_NAME.append(threadPoolName);
  context.addStep(new AbstractDeploymentChainStep(){
    protected void execute(    DeploymentProcessorTarget processorTarget){
      ROOT_LOGGER.debug("Configuring timers");
      processorTarget.addDeploymentProcessor(EJB3Extension.SUBSYSTEM_NAME,Phase.PARSE,Phase.PARSE_TIMEOUT_ANNOTATION,new TimerServiceAnnotationProcessor());
      processorTarget.addDeploymentProcessor(EJB3Extension.SUBSYSTEM_NAME,Phase.PARSE,Phase.PARSE_AROUNDTIMEOUT_ANNOTATION,new AroundTimeoutAnnotationParsingProcessor());
      processorTarget.addDeploymentProcessor(EJB3Extension.SUBSYSTEM_NAME,Phase.POST_MODULE,Phase.POST_MODULE_EJB_TIMER_METADATA_MERGE,new TimerMethodMergingProcessor());
      processorTarget.addDeploymentProcessor(EJB3Extension.SUBSYSTEM_NAME,Phase.POST_MODULE,Phase.POST_MODULE_EJB_TIMER_SERVICE,new TimerServiceDeploymentProcessor(threadPoolServiceName,defaultDataStore));
    }
  }
,OperationContext.Stage.RUNTIME);
  newControllers.add(context.getServiceTarget().addService(TimerServiceDeploymentProcessor.TIMER_SERVICE_NAME,new TimerValueService()).install());
}
