{
  super();
  if (repositoryResolver == null) {
    throw new IllegalArgumentException("repositoryResolver is null");
  }
  String uniqueInput=null;
  String runtimeInput=null;
  byte[] hashInput=null;
  String start=null;
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    final String value=reader.getAttributeValue(i);
    if (reader.getAttributeNamespace(i) != null) {
      throw unexpectedAttribute(reader,i);
    }
 else {
      final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case NAME:
{
          uniqueInput=value;
          break;
        }
case RUNTIME_NAME:
{
        runtimeInput=value;
        break;
      }
case SHA1:
{
      try {
        hashInput=hexStringToByteArray(value);
      }
 catch (      Exception e) {
        throw new XMLStreamException("Value " + value + " for attribute "+ attribute.getLocalName()+ " does not represent a properly hex-encoded SHA1 hash",reader.getLocation(),e);
      }
      break;
    }
case START:
{
    start=value;
    break;
  }
default :
throw unexpectedAttribute(reader,i);
}
}
}
if (uniqueInput == null) {
throw missingRequired(reader,Collections.singleton(Attribute.NAME));
}
if (runtimeInput == null) {
throw missingRequired(reader,Collections.singleton(Attribute.RUNTIME_NAME));
}
if (hashInput == null) {
throw missingRequired(reader,Collections.singleton(Attribute.SHA1));
}
this.uniqueName=uniqueInput;
this.runtimeName=runtimeInput;
this.sha1Hash=hashInput;
this.start=start == null ? true : Boolean.valueOf(start);
requireNoContent(reader);
}
