{
  String type=require(reader,Attribute.TYPE);
  PathAddress address=stackAddress.append(ProtocolResourceDefinition.pathElement(type));
  ModelNode operation=Util.createOperation(ProtocolResourceDefinition.ADD.getName(),stackAddress);
  operations.put(address,operation);
  for (int i=0; i < reader.getAttributeCount(); i++) {
    String value=reader.getAttributeValue(i);
    Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case TYPE:
{
        ProtocolResourceDefinition.TYPE.parseAndSetParameter(type,operation,reader);
        break;
      }
case SOCKET_BINDING:
{
      ProtocolResourceDefinition.SOCKET_BINDING.parseAndSetParameter(value,operation,reader);
      break;
    }
default :
{
    throw ParseUtils.unexpectedAttribute(reader,i);
  }
}
}
while (reader.hasNext() && (reader.nextTag() != XMLStreamConstants.END_ELEMENT)) {
Element element=Element.forName(reader.getLocalName());
switch (element) {
case PROPERTY:
{
  this.parseProperty(reader,address,operations);
  break;
}
default :
{
throw ParseUtils.unexpectedElement(reader);
}
}
}
}
