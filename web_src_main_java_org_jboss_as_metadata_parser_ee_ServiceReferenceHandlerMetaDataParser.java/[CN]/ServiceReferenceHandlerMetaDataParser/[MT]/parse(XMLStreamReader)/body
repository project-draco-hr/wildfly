{
  ServiceReferenceHandlerMetaData handler=new ServiceReferenceHandlerMetaData();
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    final String value=reader.getAttributeValue(i);
    if (reader.getAttributeNamespace(i) != null) {
      continue;
    }
    final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case ID:
{
        handler.setId(value);
        break;
      }
default :
    throw unexpectedAttribute(reader,i);
}
}
DescriptionGroupMetaData descriptionGroup=new DescriptionGroupMetaData();
while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
if (DescriptionGroupMetaDataParser.parse(reader,descriptionGroup)) {
  if (handler.getDescriptionGroup() == null) {
    handler.setDescriptionGroup(descriptionGroup);
  }
  continue;
}
final Element element=Element.forName(reader.getLocalName());
switch (element) {
case HANDLER_NAME:
  handler.setHandlerName(reader.getElementText());
break;
case HANDLER_CLASS:
handler.setHandlerClass(reader.getElementText());
break;
case INIT_PARAM:
List<ParamValueMetaData> initParams=handler.getInitParam();
if (initParams == null) {
initParams=new ArrayList<ParamValueMetaData>();
handler.setInitParam(initParams);
}
initParams.add(ParamValueMetaDataParser.parse(reader));
break;
case SOAP_HEADER:
List<QName> soapHeaders=handler.getSoapHeader();
if (soapHeaders == null) {
soapHeaders=new ArrayList<QName>();
handler.setSoapHeader(soapHeaders);
}
soapHeaders.add(parseQName(reader.getElementText()));
break;
case SOAP_ROLE:
List<String> soapRoles=handler.getSoapRole();
if (soapRoles == null) {
soapRoles=new ArrayList<String>();
handler.setSoapRole(soapRoles);
}
soapRoles.add(reader.getElementText());
break;
case PORT_NAME:
List<String> portNames=handler.getPortName();
if (portNames == null) {
portNames=new ArrayList<String>();
handler.setPortName(portNames);
}
portNames.add(reader.getElementText());
break;
default :
throw unexpectedElement(reader);
}
}
return handler;
}
