{
  final DeploymentUnit deploymentUnitContext=phaseContext.getDeploymentUnit();
  Deployment deployment=OSGiDeploymentAttachment.getAttachment(deploymentUnitContext);
  String location=InstallBundleInitiatorService.getLocation(serviceRegistry,deploymentUnitContext.getName());
  VirtualFile virtualFile=phaseContext.getDeploymentUnit().getAttachment(Attachments.DEPLOYMENT_ROOT).getRoot();
  BundleInfo info=BundleInfoAttachment.getBundleInfoAttachment(deploymentUnitContext);
  if (deployment == null && info != null) {
    deployment=DeploymentFactory.createDeployment(info);
    deployment.addAttachment(BundleInfo.class,info);
    OSGiDeploymentAttachment.attachDeployment(deploymentUnitContext,deployment);
  }
  OSGiMetaData metadata=OSGiMetaDataAttachment.getOSGiMetaDataAttachment(deploymentUnitContext);
  if (deployment == null && metadata != null) {
    String symbolicName=metadata.getBundleSymbolicName();
    Version version=metadata.getBundleVersion();
    deployment=DeploymentFactory.createDeployment(AbstractVFS.adapt(virtualFile),location,symbolicName,version);
    deployment.addAttachment(OSGiMetaData.class,metadata);
    OSGiDeploymentAttachment.attachDeployment(deploymentUnitContext,deployment);
  }
  XModule resModule=XModuleAttachment.getXModuleAttachment(deploymentUnitContext);
  if (deployment == null && resModule != null) {
    String symbolicName=resModule.getName();
    Version version=resModule.getVersion();
    deployment=DeploymentFactory.createDeployment(AbstractVFS.adapt(virtualFile),location,symbolicName,version);
    deployment.addAttachment(XModule.class,resModule);
    OSGiDeploymentAttachment.attachDeployment(deploymentUnitContext,deployment);
  }
  if (deployment != null) {
    MountHandle mount=phaseContext.getDeploymentUnit().getAttachment(Attachments.DEPLOYMENT_ROOT_MOUNT_HANDLE);
    deployment.addAttachment(MountHandle.class,mount);
    deployment.setAutoStart(true);
    OSGiDeploymentService.addService(phaseContext);
  }
}
