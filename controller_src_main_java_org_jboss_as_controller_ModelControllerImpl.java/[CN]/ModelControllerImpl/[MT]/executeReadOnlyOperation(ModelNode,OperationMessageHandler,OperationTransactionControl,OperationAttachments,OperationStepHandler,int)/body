{
  final SecurityManager sm=System.getSecurityManager();
  if (sm != null) {
    sm.checkPermission(ModelController.ACCESS_PERMISSION);
  }
  final AbstractOperationContext delegateContext=activeOperations.get(operationId);
  if (delegateContext == null) {
    throw ControllerLogger.ROOT_LOGGER.noContextToDelegateTo(operationId);
  }
  final ModelNode response=new ModelNode();
  final OperationTransactionControl originalResultTxControl=control == null ? null : new OperationTransactionControl(){
    @Override public void operationPrepared(    OperationTransaction transaction,    ModelNode result){
      control.operationPrepared(transaction,response);
    }
  }
;
  final ReadOnlyContext context=new ReadOnlyContext(processType,runningModeControl.getRunningMode(),originalResultTxControl,processState,false,delegateContext,this,operationId);
  context.addStep(response,operation,prepareStep,OperationContext.Stage.MODEL);
  CurrentOperationIdHolder.setCurrentOperationID(operationId);
  try {
    context.executeOperation();
  }
  finally {
    CurrentOperationIdHolder.setCurrentOperationID(null);
  }
  if (!response.hasDefined(RESPONSE_HEADERS) || !response.get(RESPONSE_HEADERS).hasDefined(PROCESS_STATE)) {
    ControlledProcessState.State state=processState.getState();
switch (state) {
case RELOAD_REQUIRED:
case RESTART_REQUIRED:
      response.get(RESPONSE_HEADERS,PROCESS_STATE).set(state.toString());
    break;
default :
  break;
}
}
return response;
}
