{
  final ModelNode result=new ModelNode().setEmptyList();
  boolean sawExtensionAdd=false;
  List<ParsedBootOp> postExtensionOps=null;
  ParallelExtensionAddHandler parallelExtensionAddHandler=executorService == null ? null : new ParallelExtensionAddHandler(executorService);
  ParallelBootOperationStepHandler parallelSubsystemHandler=(executorService != null && controllerType == OperationContext.Type.SERVER) ? new ParallelBootOperationStepHandler(executorService,rootRegistration,processState) : null;
  boolean registeredParallelSubsystemHandler=false;
  int subsystemIndex=0;
  for (  ModelNode bootOp : bootList) {
    final ParsedBootOp parsedOp=new ParsedBootOp(bootOp,result.add());
    if (postExtensionOps != null) {
      if (parsedOp.isExtensionAdd()) {
        final ExtensionAddHandler stepHandler=(ExtensionAddHandler)rootRegistration.getOperationHandler(parsedOp.address,parsedOp.operationName);
        if (parallelExtensionAddHandler != null) {
          parallelExtensionAddHandler.addParsedOp(parsedOp,stepHandler);
        }
 else {
          context.addStep(parsedOp.response,parsedOp.operation,stepHandler,OperationContext.Stage.MODEL);
        }
      }
 else {
        if (parallelSubsystemHandler == null || !parallelSubsystemHandler.addSubsystemOperation(parsedOp)) {
          if (registeredParallelSubsystemHandler && (parsedOp.isInterfaceOperation() || parsedOp.isSocketOperation())) {
            postExtensionOps.add(subsystemIndex++,parsedOp);
          }
 else {
            postExtensionOps.add(parsedOp);
          }
        }
 else         if (!registeredParallelSubsystemHandler) {
          ModelNode op=Util.getEmptyOperation("parallel-subsystem-boot",new ModelNode().setEmptyList());
          postExtensionOps.add(new ParsedBootOp(op,parallelSubsystemHandler,result.add()));
          subsystemIndex=postExtensionOps.size() - 1;
          registeredParallelSubsystemHandler=true;
        }
      }
    }
 else {
      final OperationStepHandler stepHandler=rootRegistration.getOperationHandler(parsedOp.address,parsedOp.operationName);
      if (!sawExtensionAdd && stepHandler == null) {
        ROOT_LOGGER.noHandler(parsedOp.operationName,parsedOp.address);
        context.setRollbackOnly();
        break;
      }
 else       if (stepHandler instanceof ExtensionAddHandler) {
        if (parallelExtensionAddHandler != null) {
          parallelExtensionAddHandler.addParsedOp(parsedOp,(ExtensionAddHandler)stepHandler);
          if (!sawExtensionAdd) {
            ModelNode op=Util.getEmptyOperation("parallel-extension-add",new ModelNode().setEmptyList());
            context.addStep(result.add(),op,parallelExtensionAddHandler,OperationContext.Stage.MODEL);
          }
        }
 else {
          context.addStep(parsedOp.response,parsedOp.operation,stepHandler,OperationContext.Stage.MODEL);
        }
        sawExtensionAdd=true;
      }
 else       if (!sawExtensionAdd) {
        context.addStep(result.add(),bootOp,stepHandler,OperationContext.Stage.MODEL);
      }
 else {
        postExtensionOps=new ArrayList<ParsedBootOp>();
        if (parallelSubsystemHandler == null || !parallelSubsystemHandler.addSubsystemOperation(parsedOp)) {
          postExtensionOps.add(parsedOp);
        }
 else {
          ModelNode op=Util.getEmptyOperation("parallel-subsystem-boot",new ModelNode().setEmptyList());
          postExtensionOps.add(new ParsedBootOp(op,parallelSubsystemHandler,result.add()));
          registeredParallelSubsystemHandler=true;
        }
      }
    }
  }
  return postExtensionOps;
}
