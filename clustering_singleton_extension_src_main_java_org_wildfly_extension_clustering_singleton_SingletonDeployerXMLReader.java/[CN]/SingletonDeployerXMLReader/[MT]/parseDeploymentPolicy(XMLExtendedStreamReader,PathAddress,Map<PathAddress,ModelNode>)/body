{
  String name=XMLAttribute.NAME.require(reader);
  PathAddress address=subsystemAddress.append(DeploymentPolicyResourceDefinition.pathElement(name));
  ModelNode operation=Util.createAddOperation(address);
  operations.put(address,operation);
  for (int i=0; i < reader.getAttributeCount(); ++i) {
    XMLAttribute attribute=XMLAttribute.forName(reader,i);
switch (attribute) {
case NAME:
{
        break;
      }
case CACHE_CONTAINER:
{
      readAttribute(reader,i,operation,DeploymentPolicyResourceDefinition.Attribute.CACHE_CONTAINER);
      break;
    }
case CACHE:
{
    readAttribute(reader,i,operation,DeploymentPolicyResourceDefinition.Attribute.CACHE);
    break;
  }
case QUORUM:
{
  readAttribute(reader,i,operation,DeploymentPolicyResourceDefinition.Attribute.QUORUM);
  break;
}
default :
{
throw ParseUtils.unexpectedAttribute(reader,i);
}
}
}
while (reader.hasNext() && reader.nextTag() != XMLStreamConstants.END_ELEMENT) {
XMLElement element=XMLElement.forName(reader);
switch (element) {
case RANDOM_ELECTION_POLICY:
{
this.parseRandomElectionPolicy(reader,address,operations);
break;
}
case SIMPLE_ELECTION_POLICY:
{
this.parseSimpleElectionPolicy(reader,address,operations);
break;
}
default :
{
throw ParseUtils.unexpectedElement(reader);
}
}
}
}
