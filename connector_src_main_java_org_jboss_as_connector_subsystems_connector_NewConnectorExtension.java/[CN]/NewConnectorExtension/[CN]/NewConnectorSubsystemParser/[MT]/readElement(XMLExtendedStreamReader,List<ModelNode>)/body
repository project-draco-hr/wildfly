{
  final ModelNode address=new ModelNode();
  address.add(ModelDescriptionConstants.SUBSYSTEM,CONNECTOR);
  address.protect();
  final ModelNode subsystem=new ModelNode();
  subsystem.get(OP).set(ADD);
  subsystem.get(OP_ADDR).set(address);
  list.add(subsystem);
  final EnumSet<Element> visited=EnumSet.noneOf(Element.class);
  while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
switch (Namespace.forUri(reader.getNamespaceURI())) {
case CONNECTOR_1_0:
{
        final Element element=Element.forName(reader.getLocalName());
        if (!visited.add(element)) {
          throw unexpectedElement(reader);
        }
        final EnumSet<Element> requiredElement=EnumSet.of(Element.DEFAULT_WORKMANAGER);
switch (element) {
case ARCHIVE_VALIDATION:
{
            parseArchiveValidation(reader,subsystem);
            break;
          }
case BEAN_VALIDATION:
{
          parseBeanValidation(reader,subsystem);
          break;
        }
case DEFAULT_WORKMANAGER:
{
        parseDefaultWorkManager(reader,subsystem);
        requiredElement.remove(Element.DEFAULT_WORKMANAGER);
        break;
      }
default :
    throw unexpectedElement(reader);
}
if (!requiredElement.isEmpty()) {
  missingRequiredElement(reader,requiredElement);
}
break;
}
default :
throw unexpectedElement(reader);
}
}
}
