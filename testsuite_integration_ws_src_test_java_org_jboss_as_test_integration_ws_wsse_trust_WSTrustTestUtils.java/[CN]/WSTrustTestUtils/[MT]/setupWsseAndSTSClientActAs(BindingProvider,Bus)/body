{
  Map<String,Object> ctx=proxy.getRequestContext();
  ctx.put(SecurityConstants.CALLBACK_HANDLER,new ClientCallbackHandler());
  ctx.put(SecurityConstants.ENCRYPT_PROPERTIES,Thread.currentThread().getContextClassLoader().getResource("META-INF/clientKeystore.properties"));
  ctx.put(SecurityConstants.ENCRYPT_USERNAME,"myactaskey");
  ctx.put(SecurityConstants.SIGNATURE_PROPERTIES,Thread.currentThread().getContextClassLoader().getResource("META-INF/clientKeystore.properties"));
  ctx.put(SecurityConstants.SIGNATURE_USERNAME,"myclientkey");
  UsernameTokenCallbackHandler ch=new UsernameTokenCallbackHandler();
  String str=ch.getUsernameTokenString("alice","clarinet");
  ctx.put(SecurityConstants.STS_TOKEN_ACT_AS,str);
  STSClient stsClient=new STSClient(bus);
  Map<String,Object> props=stsClient.getProperties();
  props.put(SecurityConstants.USERNAME,"bob");
  props.put(SecurityConstants.CALLBACK_HANDLER,new ClientCallbackHandler());
  props.put(SecurityConstants.ENCRYPT_PROPERTIES,Thread.currentThread().getContextClassLoader().getResource("META-INF/clientKeystore.properties"));
  props.put(SecurityConstants.ENCRYPT_USERNAME,"mystskey");
  props.put(SecurityConstants.STS_TOKEN_USERNAME,"myclientkey");
  props.put(SecurityConstants.STS_TOKEN_PROPERTIES,Thread.currentThread().getContextClassLoader().getResource("META-INF/clientKeystore.properties"));
  props.put(SecurityConstants.STS_TOKEN_USE_CERT_FOR_KEYINFO,"true");
  ctx.put(SecurityConstants.STS_CLIENT,stsClient);
}
