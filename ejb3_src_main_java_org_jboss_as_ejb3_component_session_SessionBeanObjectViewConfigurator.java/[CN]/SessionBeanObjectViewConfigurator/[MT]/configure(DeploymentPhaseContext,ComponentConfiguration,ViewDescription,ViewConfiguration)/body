{
  final DeploymentReflectionIndex index=context.getDeploymentUnit().getAttachment(Attachments.REFLECTION_INDEX);
  for (  final Method method : configuration.getProxyFactory().getCachedMethods()) {
    if (method.getName().equals("getPrimaryKey") && method.getParameterTypes().length == 0) {
      configuration.addClientInterceptor(method,ViewDescription.CLIENT_DISPATCHER_INTERCEPTOR_FACTORY,InterceptorOrder.Client.CLIENT_DISPATCHER);
      configuration.addViewInterceptor(method,PRIMARY_KEY_INTERCEPTOR,InterceptorOrder.View.COMPONENT_DISPATCHER);
    }
 else     if (method.getName().equals("remove") && method.getParameterTypes().length == 0) {
      handleRemoveMethod(componentConfiguration,configuration,index,method);
    }
 else     if (method.getName().equals("getEJBLocalHome") && method.getParameterTypes().length == 0) {
      configuration.addClientInterceptor(method,ViewDescription.CLIENT_DISPATCHER_INTERCEPTOR_FACTORY,InterceptorOrder.Client.CLIENT_DISPATCHER);
      final GetHomeInterceptorFactory factory=new GetHomeInterceptorFactory();
      configuration.addViewInterceptor(method,factory,InterceptorOrder.View.COMPONENT_DISPATCHER);
      final SessionBeanComponentDescription componentDescription=(SessionBeanComponentDescription)componentConfiguration.getComponentDescription();
      componentConfiguration.getStartDependencies().add(new DependencyConfigurator<ComponentStartService>(){
        @Override public void configureDependency(        final ServiceBuilder<?> serviceBuilder,        final ComponentStartService service) throws DeploymentUnitProcessingException {
          EjbHomeViewDescription ejbLocalHomeView=componentDescription.getEjbLocalHomeView();
          if (ejbLocalHomeView == null) {
            throw EjbLogger.ROOT_LOGGER.beanLocalHomeInterfaceIsNull(componentDescription.getComponentName());
          }
          serviceBuilder.addDependency(ejbLocalHomeView.getServiceName(),ComponentView.class,factory.getViewToCreate());
        }
      }
);
    }
 else     if (method.getName().equals("getEJBHome") && method.getParameterTypes().length == 0) {
      configuration.addClientInterceptor(method,ViewDescription.CLIENT_DISPATCHER_INTERCEPTOR_FACTORY,InterceptorOrder.Client.CLIENT_DISPATCHER);
      final GetHomeInterceptorFactory factory=new GetHomeInterceptorFactory();
      configuration.addViewInterceptor(method,factory,InterceptorOrder.View.COMPONENT_DISPATCHER);
      final SessionBeanComponentDescription componentDescription=(SessionBeanComponentDescription)componentConfiguration.getComponentDescription();
      componentConfiguration.getStartDependencies().add(new DependencyConfigurator<ComponentStartService>(){
        @Override public void configureDependency(        final ServiceBuilder<?> serviceBuilder,        final ComponentStartService service) throws DeploymentUnitProcessingException {
          EjbHomeViewDescription ejbHomeView=componentDescription.getEjbHomeView();
          if (ejbHomeView == null) {
            throw EjbLogger.ROOT_LOGGER.beanHomeInterfaceIsNull(componentDescription.getComponentName());
          }
          serviceBuilder.addDependency(ejbHomeView.getServiceName(),ComponentView.class,factory.getViewToCreate());
        }
      }
);
    }
 else     if (method.getName().equals("getHandle") && method.getParameterTypes().length == 0) {
    }
 else     if (method.getName().equals("isIdentical") && method.getParameterTypes().length == 1 && (method.getParameterTypes()[0].equals(EJBObject.class) || method.getParameterTypes()[0].equals(EJBLocalObject.class))) {
      handleIsIdenticalMethod(componentConfiguration,configuration,index,method);
    }
 else {
      final Method componentMethod=ClassReflectionIndexUtil.findMethod(index,componentConfiguration.getComponentClass(),MethodIdentifier.getIdentifierForMethod(method));
      if (componentMethod != null) {
        if (!Modifier.isPublic(componentMethod.getModifiers())) {
          throw EjbLogger.ROOT_LOGGER.ejbBusinessMethodMustBePublic(componentMethod);
        }
        configuration.addViewInterceptor(method,new ImmediateInterceptorFactory(new ComponentDispatcherInterceptor(componentMethod)),InterceptorOrder.View.COMPONENT_DISPATCHER);
        configuration.addClientInterceptor(method,ViewDescription.CLIENT_DISPATCHER_INTERCEPTOR_FACTORY,InterceptorOrder.Client.CLIENT_DISPATCHER);
      }
 else       if (method.getDeclaringClass() != Object.class && method.getDeclaringClass() != WriteReplaceInterface.class) {
        throw EjbLogger.ROOT_LOGGER.couldNotFindViewMethodOnEjb(method,description.getViewClassName(),componentConfiguration.getComponentName());
      }
    }
  }
  configuration.addClientPostConstructInterceptor(Interceptors.getTerminalInterceptorFactory(),InterceptorOrder.ClientPostConstruct.TERMINAL_INTERCEPTOR);
  configuration.addClientPreDestroyInterceptor(Interceptors.getTerminalInterceptorFactory(),InterceptorOrder.ClientPreDestroy.TERMINAL_INTERCEPTOR);
}
