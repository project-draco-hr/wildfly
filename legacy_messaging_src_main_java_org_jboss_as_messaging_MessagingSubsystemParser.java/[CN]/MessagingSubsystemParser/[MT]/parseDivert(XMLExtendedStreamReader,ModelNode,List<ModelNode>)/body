{
  requireSingleAttribute(reader,CommonAttributes.NAME);
  String name=reader.getAttributeValue(0);
  ModelNode divertAdd=org.jboss.as.controller.operations.common.Util.getEmptyOperation(ADD,address.clone().add(CommonAttributes.DIVERT,name));
  EnumSet<Element> required=EnumSet.of(Element.ADDRESS,Element.FORWARDING_ADDRESS);
  while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
    final Element element=Element.forName(reader.getLocalName());
    required.remove(element);
switch (element) {
case ROUTING_NAME:
{
        handleElementText(reader,element,divertAdd);
        break;
      }
case ADDRESS:
{
      handleElementText(reader,element,DivertDefinition.ADDRESS.getName(),divertAdd);
      break;
    }
case FORWARDING_ADDRESS:
{
    handleElementText(reader,element,"divert",divertAdd);
    break;
  }
case FILTER:
{
  String string=readStringAttributeElement(reader,CommonAttributes.STRING);
  FILTER.parseAndSetParameter(string,divertAdd,reader);
  break;
}
case TRANSFORMER_CLASS_NAME:
{
handleElementText(reader,element,divertAdd);
break;
}
case EXCLUSIVE:
{
handleElementText(reader,element,divertAdd);
break;
}
default :
{
throw ParseUtils.unexpectedElement(reader);
}
}
}
if (!required.isEmpty()) {
throw missingRequired(reader,required);
}
list.add(divertAdd);
}
