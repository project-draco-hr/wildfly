{
  final String value=reader.getElementText();
  if (value != null && value.length() > 0) {
    ModelNode toSet=node.get(element.getLocalName());
    ModelNode modelValue=allowExpression ? parsePossibleExpression(value.trim()) : new ModelNode().set(value.trim());
    if (!allowExpression || modelValue.getType() != ModelType.EXPRESSION) {
      toSet.set(modelValue);
    }
 else {
      try {
switch (expectedType) {
case BOOLEAN:
          toSet.set(modelValue.asBoolean());
        break;
case BIG_DECIMAL:
      toSet.set(modelValue.asBigDecimal());
    break;
case BIG_INTEGER:
  toSet.set(modelValue.asBigInteger());
break;
case BYTES:
toSet.set(modelValue.asBytes());
break;
case DOUBLE:
toSet.set(modelValue.asDouble());
break;
case INT:
toSet.set(modelValue.asInt());
break;
case LONG:
toSet.set(modelValue.asLong());
break;
case STRING:
toSet.set(modelValue.asString());
break;
default :
throw new XMLStreamException(MessagingLogger.ROOT_LOGGER.illegalValue(value,element.getLocalName()),reader.getLocation());
}
}
 catch (IllegalArgumentException iae) {
throw new XMLStreamException(MessagingLogger.ROOT_LOGGER.illegalValue(value,element.getLocalName(),expectedType),reader.getLocation());
}
}
}
 else if (!allowNull) {
throw new XMLStreamException(MessagingLogger.ROOT_LOGGER.illegalValue(value,element.getLocalName()),reader.getLocation());
}
}
