{
  final Class<?> objClass=method.getDeclaringClass();
  final Object argument;
  final Class<?> paramType=method.getParameterTypes()[0];
  if (paramType == String.class) {
    argument=propValue;
  }
 else   if (paramType == boolean.class || paramType == Boolean.class) {
    argument=Boolean.valueOf(propValue);
  }
 else   if (paramType == byte.class || paramType == Byte.class) {
    argument=Byte.valueOf(propValue);
  }
 else   if (paramType == short.class || paramType == Short.class) {
    argument=Short.valueOf(propValue);
  }
 else   if (paramType == int.class || paramType == Integer.class) {
    argument=Integer.valueOf(propValue);
  }
 else   if (paramType == long.class || paramType == Long.class) {
    argument=Long.valueOf(propValue);
  }
 else   if (paramType == float.class || paramType == Float.class) {
    argument=Float.valueOf(propValue);
  }
 else   if (paramType == double.class || paramType == Double.class) {
    argument=Double.valueOf(propValue);
  }
 else   if (paramType == char.class || paramType == Character.class) {
    argument=propValue.length() > 0 ? propValue.charAt(0) : 0;
  }
 else   if (paramType == BigDecimal.class) {
    argument=new BigDecimal(propValue);
  }
 else   if (paramType == File.class) {
    argument=new File(propValue);
  }
 else   if (paramType == Level.class) {
    argument=Level.parse(propValue);
  }
 else   if (paramType == TimeZone.class) {
    argument=TimeZone.getTimeZone(propValue);
  }
 else   if (paramType == Charset.class) {
    argument=Charset.forName(propValue);
  }
 else   if (paramType.isEnum()) {
    argument=Enum.valueOf(paramType.asSubclass(Enum.class),propValue);
  }
 else {
    throw MESSAGES.unknownParameterType(paramType,propertyName,objClass);
  }
  return argument;
}
