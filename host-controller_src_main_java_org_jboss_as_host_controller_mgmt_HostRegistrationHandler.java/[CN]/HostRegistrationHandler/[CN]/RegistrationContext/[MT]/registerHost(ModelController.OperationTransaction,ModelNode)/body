{
synchronized (this) {
    final ProxyController exiting=null;
    if (exiting != null) {
      failed(createError(SlaveRegistrationException.ErrorCode.HOST_ALREADY_EXISTS,hostName));
      return;
    }
    try {
      sendResponse(responseChannel,DomainControllerProtocol.PARAM_OK,result);
    }
 catch (    IOException e) {
      ProtocolLogger.ROOT_LOGGER.debugf(e,"failed to process message");
      failed(null);
      return;
    }
  }
  try {
    completedLatch.await();
  }
 catch (  InterruptedException e) {
    failed(null);
    return;
  }
synchronized (this) {
    if (failed) {
      return;
    }
    final PathAddress addr=PathAddress.pathAddress(PathElement.pathElement(ModelDescriptionConstants.HOST,hostName));
    final RemoteProxyController proxy=RemoteProxyController.create(handler,addr,ProxyOperationAddressTranslator.HOST);
    try {
      domainController.registerRemoteHost(proxy);
    }
 catch (    SlaveRegistrationException e) {
      failed(createError(e.getErrorCode(),hostName));
      return;
    }
catch (    Exception e) {
      failed(createError(SlaveRegistrationException.ErrorCode.NONE,e.getClass().getName() + ":" + e.getMessage()));
      return;
    }
    if (!failed) {
      transaction.commit();
    }
 else {
      transaction.rollback();
    }
  }
}
