{
  if (!model.isDefined()) {
    return null;
  }
  boolean disabled=DISABLED.resolveModelAttribute(context,model).asBoolean();
  boolean development=DEVELOPMENT.resolveModelAttribute(context,model).asBoolean();
  boolean keepGenerated=KEEP_GENERATED.resolveModelAttribute(context,model).asBoolean();
  boolean trimSpaces=TRIM_SPACES.resolveModelAttribute(context,model).asBoolean();
  boolean tagPooling=TAG_POOLING.resolveModelAttribute(context,model).asBoolean();
  boolean mappedFile=MAPPED_FILE.resolveModelAttribute(context,model).asBoolean();
  int checkInterval=CHECK_INTERVAL.resolveModelAttribute(context,model).asInt();
  int modificationTestInterval=MODIFICATION_TEST_INTERVAL.resolveModelAttribute(context,model).asInt();
  boolean recompileOnFile=RECOMPILE_ON_FAIL.resolveModelAttribute(context,model).asBoolean();
  boolean snap=SMAP.resolveModelAttribute(context,model).asBoolean();
  boolean dumpSnap=DUMP_SMAP.resolveModelAttribute(context,model).asBoolean();
  boolean generateStringsAsCharArrays=GENERATE_STRINGS_AS_CHAR_ARRAYS.resolveModelAttribute(context,model).asBoolean();
  boolean errorOnUseBeanInvalidClassAttribute=ERROR_ON_USE_BEAN_INVALID_CLASS_ATTRIBUTE.resolveModelAttribute(context,model).asBoolean();
  final ModelNode scratchDirValue=SCRATCH_DIR.resolveModelAttribute(context,model);
  String scratchDir=scratchDirValue.isDefined() ? scratchDirValue.asString() : null;
  String sourceVm=SOURCE_VM.resolveModelAttribute(context,model).asString();
  String targetVm=TARGET_VM.resolveModelAttribute(context,model).asString();
  String javaEncoding=JAVA_ENCODING.resolveModelAttribute(context,model).asString();
  boolean xPoweredBy=X_POWERED_BY.resolveModelAttribute(context,model).asBoolean();
  boolean displaySourceFragment=DISPLAY_SOURCE_FRAGMENT.resolveModelAttribute(context,model).asBoolean();
  boolean optimizeScriptlets=OPTIMIZE_SCRIPTLETS.resolveModelAttribute(context,model).asBoolean();
  return new JSPConfig(development,disabled,keepGenerated,trimSpaces,tagPooling,mappedFile,checkInterval,modificationTestInterval,recompileOnFile,snap,dumpSnap,generateStringsAsCharArrays,errorOnUseBeanInvalidClassAttribute,scratchDir,sourceVm,targetVm,javaEncoding,xPoweredBy,displaySourceFragment,optimizeScriptlets);
}
