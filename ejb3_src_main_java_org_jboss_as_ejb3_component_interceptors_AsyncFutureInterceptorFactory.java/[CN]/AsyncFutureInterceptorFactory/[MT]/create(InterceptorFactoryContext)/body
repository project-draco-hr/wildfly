{
  final SessionBeanComponent component=(SessionBeanComponent)context.getContextData().get(Component.class);
  if (component.isSecurityDomainsConfigured()) {
    return new Interceptor(){
      @Override public Object processInvocation(      final InterceptorContext context) throws Exception {
        if (!context.isBlockingCaller()) {
          return context.proceed();
        }
        final InterceptorContext asyncInterceptorContext=context.clone();
        asyncInterceptorContext.putPrivateData(InvocationType.class,InvocationType.ASYNC);
        final CancellationFlag flag=new CancellationFlag();
        final SecurityDomain securityDomain=context.getPrivateData(SecurityDomain.class);
        final SecurityIdentity currentIdentity=securityDomain.getCurrentSecurityIdentity();
        final Connection remoteConnection=getConnection();
        final AsyncInvocationTask task=new AsyncInvocationTask(flag){
          @Override protected Object runInvocation() throws Exception {
            return currentIdentity.runAs(new Callable<Object>(){
              public Object call() throws Exception {
                setConnection(remoteConnection);
                try {
                  return asyncInterceptorContext.proceed();
                }
  finally {
                  clearConnection();
                }
              }
            }
);
          }
        }
;
        asyncInterceptorContext.putPrivateData(CancellationFlag.class,flag);
        asyncInterceptorContext.setBlockingCaller(false);
        return execute(component,task);
      }
    }
;
  }
 else {
    return new Interceptor(){
      @Override public Object processInvocation(      final InterceptorContext context) throws Exception {
        if (!context.isBlockingCaller()) {
          return context.proceed();
        }
        final InterceptorContext asyncInterceptorContext=context.clone();
        asyncInterceptorContext.putPrivateData(InvocationType.class,InvocationType.ASYNC);
        final CancellationFlag flag=new CancellationFlag();
        final SecurityContext securityContext;
        if (WildFlySecurityManager.isChecking()) {
          securityContext=AccessController.doPrivileged(new PrivilegedAction<SecurityContext>(){
            @Override public SecurityContext run(){
              return SecurityContextAssociation.getSecurityContext();
            }
          }
);
        }
 else {
          securityContext=SecurityContextAssociation.getSecurityContext();
        }
        final SecurityContext clonedSecurityContext;
        if (securityContext instanceof JBossSecurityContext) {
          clonedSecurityContext=(SecurityContext)((JBossSecurityContext)securityContext).clone();
        }
 else {
          clonedSecurityContext=securityContext;
        }
        final Connection remoteConnection=getConnection();
        final AsyncInvocationTask task=new AsyncInvocationTask(flag){
          @Override protected Object runInvocation() throws Exception {
            setSecurityContextOnAssociation(clonedSecurityContext);
            setConnection(remoteConnection);
            try {
              return asyncInterceptorContext.proceed();
            }
  finally {
              try {
                clearSecurityContextOnAssociation();
              }
  finally {
                clearConnection();
              }
            }
          }
        }
;
        asyncInterceptorContext.putPrivateData(CancellationFlag.class,flag);
        asyncInterceptorContext.setBlockingCaller(false);
        return execute(component,task);
      }
    }
;
  }
}
