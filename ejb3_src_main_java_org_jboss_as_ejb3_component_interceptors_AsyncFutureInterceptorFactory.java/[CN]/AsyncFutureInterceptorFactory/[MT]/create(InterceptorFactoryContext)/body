{
  final SessionBeanComponent component=(SessionBeanComponent)context.getContextData().get(Component.class);
  return new Interceptor(){
    @Override public Object processInvocation(    final InterceptorContext context) throws Exception {
      final InterceptorContext asyncInterceptorContext=context.clone();
      asyncInterceptorContext.putPrivateData(InvocationType.class,InvocationType.ASYNC);
      final CancellationFlag flag=new CancellationFlag();
      final SecurityContext securityContext=SecurityContextAssociation.getSecurityContext();
      final AsyncInvocationTask task=new AsyncInvocationTask(flag){
        @Override protected Object runInvocation() throws Exception {
          setSecurityContextOnAssociation(securityContext);
          try {
            return asyncInterceptorContext.proceed();
          }
  finally {
            clearSecurityContextOnAssociation();
          }
        }
      }
;
      asyncInterceptorContext.putPrivateData(CancellationFlag.class,flag);
      final ClassLoader oldClassLoader=WildFlySecurityManager.setCurrentContextClassLoaderPrivileged((ClassLoader)null);
      try {
        component.getAsynchronousExecutor().execute(task);
      }
  finally {
        WildFlySecurityManager.setCurrentContextClassLoaderPrivileged(oldClassLoader);
      }
      return task;
    }
  }
;
}
