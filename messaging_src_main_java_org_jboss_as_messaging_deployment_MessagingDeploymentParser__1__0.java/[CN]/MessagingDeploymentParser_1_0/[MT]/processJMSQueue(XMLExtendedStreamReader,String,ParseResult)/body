{
  requireSingleAttribute(reader,CommonAttributes.NAME);
  final String name=PropertiesValueResolver.replaceProperties(reader.getAttributeValue(0));
  if (name == null) {
    ParseUtils.missingRequired(reader,Collections.singleton("name"));
  }
  final ModelNode queue=new ModelNode();
  while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
    final Element element=Element.forName(reader.getLocalName());
switch (element) {
case ENTRY:
{
        final String entry=PropertiesValueResolver.replaceProperties(readStringAttributeElement(reader,CommonAttributes.NAME));
        ENTRIES.parseAndAddParameterElement(entry,queue,reader);
        break;
      }
case SELECTOR:
{
      if (queue.has(SELECTOR.getName())) {
        throw ParseUtils.duplicateNamedElement(reader,Element.SELECTOR.getLocalName());
      }
      requireSingleAttribute(reader,CommonAttributes.STRING);
      final String selector=PropertiesValueResolver.replaceProperties(readStringAttributeElement(reader,CommonAttributes.STRING));
      SELECTOR.parseAndSetParameter(selector,queue,reader);
      break;
    }
case DURABLE:
{
    if (queue.has(DURABLE.getName())) {
      throw ParseUtils.duplicateNamedElement(reader,Element.DURABLE.getLocalName());
    }
    DURABLE.parseAndSetParameter(PropertiesValueResolver.replaceProperties(reader.getElementText()),queue,reader);
    break;
  }
default :
{
  throw ParseUtils.unexpectedElement(reader);
}
}
}
result.getQueues().add(new JmsDestination(queue,hqServer,name));
}
