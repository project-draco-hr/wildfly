{
  final String beanClassName=managedBeanConfiguration.getType();
  final Class<Object> beanClass;
  try {
    beanClass=(Class<Object>)classLoader.loadClass(beanClassName);
  }
 catch (  ClassNotFoundException e) {
    throw new DeploymentUnitProcessingException("Failed to load managed bean class: " + beanClassName,null);
  }
  final ManagedBean managedBeanAnnotation=beanClass.getAnnotation(ManagedBean.class);
  if (managedBeanAnnotation == null)   throw new DeploymentUnitProcessingException("Can not find the @MangedBean annotation for class " + beanClass,null);
  final String name=managedBeanAnnotation.value() != null ? managedBeanAnnotation.value() : beanClass.getName();
  final String postConstructMethodName=managedBeanConfiguration.getPostConstructMethod();
  Method postConstructMethod=null;
  try {
    if (postConstructMethodName != null) {
      postConstructMethod=beanClass.getMethod(postConstructMethodName);
    }
  }
 catch (  NoSuchMethodException e) {
    throw new DeploymentUnitProcessingException("Failed to get PostConstruct method '" + postConstructMethodName + "' for managed bean type: "+ beanClass.getName(),e,null);
  }
  final String preDestroyMethodName=managedBeanConfiguration.getPreDestroyMethod();
  Method preDestroyMethod=null;
  try {
    if (preDestroyMethodName != null) {
      preDestroyMethod=beanClass.getMethod(preDestroyMethodName);
    }
  }
 catch (  NoSuchMethodException e) {
    throw new DeploymentUnitProcessingException("Failed to get PreDestroy method '" + preDestroyMethodName + "' for managed bean type: "+ beanClass.getName(),e,null);
  }
  final List<ResourceInjection<?>> resourceInjections=new ArrayList<ResourceInjection<?>>();
  final ManagedBeanService<Object> managedBeanService=new ManagedBeanService<Object>(beanClass,postConstructMethod,preDestroyMethod,resourceInjections);
  final Class<?> managedBeanClass;
  try {
    managedBeanClass=classLoader.loadClass(managedBeanConfiguration.getType());
  }
 catch (  ClassNotFoundException e) {
    throw new RuntimeException("Failed to load managed bean class",e);
  }
  final ServiceName managedBeanServiceName=ManagedBeanService.SERVICE_NAME.append(deploymentName,name);
  final BatchServiceBuilder<?> serviceBuilder=batchBuilder.addService(managedBeanServiceName,managedBeanService);
  for (  ResourceInjectionConfiguration resourceInjectionConfiguration : managedBeanConfiguration.getResourceInjectionConfigurations()) {
    final ResourceInjection<Object> resourceInjection=processResourceInjection(resourceInjectionConfiguration,managedBeanClass,batchBuilder,serviceBuilder,deploymentName,classLoader);
    resourceInjections.add(resourceInjection);
  }
  final Reference managedBeanFactoryReference=ManagedBeanObjectFactory.createReference(beanClass,managedBeanServiceName);
  final ResourceBinder<Reference> managedBeanFactoryBinder=new ResourceBinder<Reference>("global/" + deploymentName + "/"+ name,Values.immediateValue(managedBeanFactoryReference));
  batchBuilder.addService(managedBeanServiceName.append("factorybinder"),managedBeanFactoryBinder).addDependency(ContextNames.JAVA,Context.class,managedBeanFactoryBinder.getContextInjector()).addDependency(managedBeanServiceName);
}
