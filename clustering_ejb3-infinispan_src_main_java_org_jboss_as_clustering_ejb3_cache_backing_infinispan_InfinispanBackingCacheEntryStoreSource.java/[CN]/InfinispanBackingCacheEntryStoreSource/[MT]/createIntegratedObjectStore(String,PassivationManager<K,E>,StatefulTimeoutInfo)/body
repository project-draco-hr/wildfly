{
  Cache<?,?> groupCache=this.groupCache.getValue();
  Configuration groupCacheConfiguration=groupCache.getCacheConfiguration();
  EmbeddedCacheManager container=groupCache.getCacheManager();
  ConfigurationBuilder builder=new ConfigurationBuilder().read(groupCacheConfiguration);
  if (this.maxSize > 0) {
    builder.eviction().strategy(EvictionStrategy.LRU).maxEntries(this.maxSize);
  }
  builder.loaders().read(new ConfigurationBuilder().build().loaders()).passivation(groupCacheConfiguration.loaders().passivation()).preload(groupCacheConfiguration.loaders().preload()).shared(groupCacheConfiguration.loaders().shared());
  for (  AbstractLoaderConfiguration loader : groupCacheConfiguration.loaders().cacheLoaders()) {
    this.addCacheLoader(builder.loaders(),loader,beanName).async().read(loader.async()).singletonStore().read(loader.singletonStore());
  }
  groupCache.getCacheManager().defineConfiguration(beanName,builder.build());
  Cache<MarshalledValue<K,MarshallingContext>,MarshalledValue<E,MarshallingContext>> cache=container.<MarshalledValue<K,MarshallingContext>,MarshalledValue<E,MarshallingContext>>getCache(beanName).getAdvancedCache().with(this.getClass().getClassLoader());
  MarshallingContext context=new MarshallingContext(this.factory,passivationManager.getMarshallingConfiguration());
  MarshalledValueFactory<MarshallingContext> keyFactory=new HashableMarshalledValueFactory(context);
  MarshalledValueFactory<MarshallingContext> valueFactory=new SimpleMarshalledValueFactory(context);
  LockKeyFactory<K,MarshallingContext> lockKeyFactory=new LockKeyFactory<K,MarshallingContext>(){
    @Override public Serializable createLockKey(    MarshalledValue<K,MarshallingContext> key){
      return new AbstractMap.SimpleImmutableEntry<MarshalledValue<K,MarshallingContext>,String>(key,beanName);
    }
  }
;
  return new InfinispanBackingCacheEntryStore<K,V,E,MarshallingContext>(cache,this.invoker,this.passivateEventsOnReplicate ? passivationManager : null,timeout,this,true,keyFactory,valueFactory,context,this.lockManager.getValue(),lockKeyFactory);
}
