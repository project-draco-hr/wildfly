{
  ServiceName groupCacheServiceName=CacheService.getServiceName(this.cacheContainerName,this.beanCacheName);
  builder.addDependency(groupCacheServiceName,Cache.class,this.groupCache);
  builder.addDependency(DependencyType.OPTIONAL,ServiceName.JBOSS.append("clustering","registry",this.cacheContainerName,this.clientMappingsCacheName),Registry.class,this.registry);
  builder.addDependency(DependencyType.OPTIONAL,ServiceName.JBOSS.append("clustering","nodes",this.cacheContainerName,this.clientMappingsCacheName),NodeFactory.class,this.nodeFactory);
  builder.addDependency(KeyAffinityServiceFactoryService.getServiceName(this.cacheContainerName),KeyAffinityServiceFactory.class,this.affinityFactory);
  InjectedValue<RegistryEntryProvider> registryEntryProvider=new InjectedValue<>();
  target.addService(ServiceName.JBOSS.append("clustering","registry",this.cacheContainerName,this.clientMappingsCacheName,"entry"),new ValueService<>(registryEntryProvider)).addDependency(EJBRemotingConnectorClientMappingsEntryProviderService.SERVICE_NAME,RegistryEntryProvider.class,registryEntryProvider).setInitialMode(ServiceController.Mode.ON_DEMAND).install();
  InjectedValue<EmbeddedCacheManager> container=new InjectedValue<>();
  target.addService(ClusteredBackingCacheEntryStoreSourceService.getCacheContainerClusterNameServiceName(this.cacheContainerName),new ClusterNameService(container)).addDependency(EmbeddedCacheManagerService.getServiceName(this.cacheContainerName),EmbeddedCacheManager.class,container).setInitialMode(ServiceController.Mode.ON_DEMAND).install();
}
