{
  final ContextNames.BindInfo bindInfo=ContextNames.bindInfoFor(jndiName);
  final ServiceName dataSourceServiceName=AbstractDataSourceService.getServiceName(bindInfo);
  final ServiceBuilder<?> dataSourceServiceBuilder=Services.addServerExecutorDependency(serviceTarget.addService(dataSourceServiceName,dataSourceService),dataSourceService.getExecutorServiceInjector(),false).addDependency(ConnectorServices.IRONJACAMAR_MDR,MetadataRepository.class,dataSourceService.getMdrInjector()).addDependency(ConnectorServices.RA_REPOSITORY_SERVICE,ResourceAdapterRepository.class,dataSourceService.getRaRepositoryInjector()).addDependency(SimpleSecurityManagerService.SERVICE_NAME,ServerSecurityManager.class,dataSourceService.getServerSecurityManager()).addDependency(ConnectorServices.BOOTSTRAP_CONTEXT_SERVICE.append(DEFAULT_NAME)).addDependency(ConnectorServices.TRANSACTION_INTEGRATION_SERVICE,TransactionIntegration.class,dataSourceService.getTransactionIntegrationInjector()).addDependency(ConnectorServices.MANAGEMENT_REPOSITORY_SERVICE,ManagementRepository.class,dataSourceService.getManagementRepositoryInjector()).addDependency(ConnectorServices.CCM_SERVICE,CachedConnectionManager.class,dataSourceService.getCcmInjector()).addDependency(ConnectorServices.JDBC_DRIVER_REGISTRY_SERVICE,DriverRegistry.class,dataSourceService.getDriverRegistryInjector()).addDependency(NamingService.SERVICE_NAME);
  if (securityEnabled) {
    dataSourceServiceBuilder.addDependency(SubjectFactoryService.SERVICE_NAME,SubjectFactory.class,dataSourceService.getSubjectFactoryInjector());
  }
  if (registration.isAllowsOverride()) {
    ManagementResourceRegistration overrideRegistration=registration.getOverrideModel(managementName);
    if (overrideRegistration == null || overrideRegistration.isAllowsOverride()) {
      overrideRegistration=registration.registerOverrideModel(managementName,DataSourcesSubsystemProviders.OVERRIDE_DS_DESC);
    }
    DataSourceStatisticsService statsService=new DataSourceStatisticsService(registration,false);
    serviceTarget.addService(dataSourceServiceName.append(Constants.STATISTICS),statsService).addDependency(dataSourceServiceName).addDependency(CommonDeploymentService.getServiceName(bindInfo),CommonDeployment.class,statsService.getCommonDeploymentInjector()).setInitialMode(ServiceController.Mode.PASSIVE).install();
    DataSourceStatisticsService.registerStatisticsResources(resource);
  }
  final ServiceName driverServiceName=ServiceName.JBOSS.append("jdbc-driver",driverName.replaceAll("\\.","_"));
  if (driverServiceName != null) {
    dataSourceServiceBuilder.addDependency(driverServiceName,Driver.class,dataSourceService.getDriverInjector());
  }
  final DataSourceReferenceFactoryService referenceFactoryService=new DataSourceReferenceFactoryService();
  final ServiceName referenceFactoryServiceName=DataSourceReferenceFactoryService.SERVICE_NAME_BASE.append(jndiName);
  final ServiceBuilder<?> referenceBuilder=serviceTarget.addService(referenceFactoryServiceName,referenceFactoryService).addDependency(dataSourceServiceName,javax.sql.DataSource.class,referenceFactoryService.getDataSourceInjector());
  final BinderService binderService=new BinderService(bindInfo.getBindName());
  final ServiceBuilder<?> binderBuilder=serviceTarget.addService(bindInfo.getBinderServiceName(),binderService).addDependency(referenceFactoryServiceName,ManagedReferenceFactory.class,binderService.getManagedObjectInjector()).addDependency(bindInfo.getParentContextServiceName(),ServiceBasedNamingStore.class,binderService.getNamingStoreInjector()).addListener(new AbstractServiceListener<Object>(){
    public void transition(    final ServiceController<?> controller,    final ServiceController.Transition transition){
switch (transition) {
case STARTING_to_UP:
{
          SUBSYSTEM_DATASOURCES_LOGGER.boundDataSource(jndiName);
          break;
        }
case START_REQUESTED_to_DOWN:
{
        SUBSYSTEM_DATASOURCES_LOGGER.unboundDataSource(jndiName);
        break;
      }
case REMOVING_to_REMOVED:
{
      SUBSYSTEM_DATASOURCES_LOGGER.debugf("Removed JDBC Data-source [%s]",jndiName);
      break;
    }
}
}
}
);
dataSourceServiceBuilder.setInitialMode(ServiceController.Mode.ACTIVE).install();
referenceBuilder.setInitialMode(ServiceController.Mode.ACTIVE).install();
binderBuilder.setInitialMode(ServiceController.Mode.ACTIVE).install();
}
