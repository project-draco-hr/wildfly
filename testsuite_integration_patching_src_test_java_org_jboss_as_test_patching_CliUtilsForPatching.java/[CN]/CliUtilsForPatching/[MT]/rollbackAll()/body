{
  CLIWrapper cli=null;
  boolean success=true;
  final String infoCommand="patch info --distribution=%s";
  final String rollbackCommand="patch rollback --patch-id=%s --distribution=%s --reset-configuration=true";
  try {
    cli=new CLIWrapper(false);
    boolean doRollback=true;
    while (doRollback) {
      doRollback=false;
      String command=String.format(infoCommand,PatchingTestUtil.AS_DISTRIBUTION);
      logger.info("----- sending command to CLI: " + command + " -----");
      cli.sendLine(command);
      String response=cli.readOutput();
      ModelNode responseNode=ModelNode.fromJSONString(response);
      ModelNode result=responseNode.get("result");
      if (result.has("patches")) {
        final List<ModelNode> patchesList=result.get("patches").asList();
        if (!patchesList.isEmpty()) {
          doRollback=true;
          for (          ModelNode n : patchesList) {
            command=String.format(rollbackCommand,n.asString(),PatchingTestUtil.AS_DISTRIBUTION);
            logger.info("----- sending command to CLI: " + command + " -----");
            success=success && cli.sendLine(command,true);
          }
        }
      }
      if (result.has("cumulative-patch-id")) {
        final String cumulativePatchId=result.get("cumulative-patch-id").asString();
        if (!cumulativePatchId.equalsIgnoreCase(BASE)) {
          doRollback=true;
          command=String.format(rollbackCommand,cumulativePatchId,PatchingTestUtil.AS_DISTRIBUTION);
          logger.info("----- sending command to CLI: " + command + " -----");
          success=success && cli.sendLine(command,true);
        }
      }
    }
    return success;
  }
  finally {
    if (cli != null) {
      cli.quit();
    }
  }
}
