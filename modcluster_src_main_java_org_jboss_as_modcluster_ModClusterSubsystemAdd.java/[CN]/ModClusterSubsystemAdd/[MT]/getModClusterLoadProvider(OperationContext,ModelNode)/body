{
  LoadBalanceFactorProvider load=null;
  if (model.hasDefined(CommonAttributes.SIMPLE_LOAD_PROVIDER_FACTOR)) {
    int value=ModClusterConfigResourceDefinition.SIMPLE_LOAD_PROVIDER.resolveModelAttribute(context,model).asInt(1);
    SimpleLoadBalanceFactorProvider myload=new SimpleLoadBalanceFactorProvider();
    myload.setLoadBalanceFactor(value);
    load=myload;
  }
  Set<LoadMetric> metrics=new HashSet<LoadMetric>();
  if (model.get(ModClusterExtension.DYNAMIC_LOAD_PROVIDER_PATH.getKeyValuePair()).isDefined()) {
    final ModelNode node=model.get(ModClusterExtension.DYNAMIC_LOAD_PROVIDER_PATH.getKeyValuePair());
    int decayFactor=DynamicLoadProviderDefinition.DECAY.resolveModelAttribute(context,model).asInt();
    int history=DynamicLoadProviderDefinition.HISTORY.resolveModelAttribute(context,model).asInt();
    if (node.hasDefined(CommonAttributes.LOAD_METRIC)) {
      addLoadMetrics(metrics,node.get(CommonAttributes.LOAD_METRIC),context);
    }
    if (node.hasDefined(CommonAttributes.CUSTOM_LOAD_METRIC)) {
      addLoadMetrics(metrics,node.get(CommonAttributes.CUSTOM_LOAD_METRIC),context);
    }
    if (!metrics.isEmpty()) {
      DynamicLoadBalanceFactorProvider loader=new DynamicLoadBalanceFactorProvider(metrics);
      loader.setDecayFactor(decayFactor);
      loader.setHistory(history);
      load=loader;
    }
  }
  if (load == null) {
    ROOT_LOGGER.useDefaultLoadBalancer();
    SimpleLoadBalanceFactorProvider myload=new SimpleLoadBalanceFactorProvider();
    myload.setLoadBalanceFactor(1);
    load=myload;
  }
  return load;
}
