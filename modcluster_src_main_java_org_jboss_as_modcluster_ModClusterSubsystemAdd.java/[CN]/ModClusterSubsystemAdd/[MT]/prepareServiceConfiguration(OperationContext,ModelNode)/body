{
  config=new ModClusterConfig();
  config.setAdvertise(ADVERTISE.resolveModelAttribute(context,modelconf).asBoolean());
  if (modelconf.get(SSL_CONFIGURATION_PATH.getKeyValuePair()).isDefined()) {
    config.setSsl(true);
    final ModelNode ssl=modelconf.get(SSL_CONFIGURATION_PATH.getKeyValuePair());
    ModelNode keyAlias=KEY_ALIAS.resolveModelAttribute(context,ssl);
    ModelNode password=PASSWORD.resolveModelAttribute(context,ssl);
    if (keyAlias.isDefined()) {
      config.setSslKeyAlias(keyAlias.asString());
    }
    if (password.isDefined()) {
      config.setSslTrustStorePassword(password.asString());
      config.setSslKeyStorePassword(password.asString());
    }
    if (ssl.has(CommonAttributes.CERTIFICATE_KEY_FILE)) {
      config.setSslKeyStore(CERTIFICATE_KEY_FILE.resolveModelAttribute(context,ssl).asString());
    }
    if (ssl.has(CommonAttributes.CIPHER_SUITE)) {
      config.setSslCiphers(CIPHER_SUITE.resolveModelAttribute(context,ssl).asString());
    }
    if (ssl.has(CommonAttributes.PROTOCOL)) {
      config.setSslProtocol(PROTOCOL.resolveModelAttribute(context,ssl).asString());
    }
    if (ssl.has(CommonAttributes.CA_CERTIFICATE_FILE)) {
      config.setSslTrustStore(CA_CERTIFICATE_FILE.resolveModelAttribute(context,ssl).asString());
    }
    if (ssl.has(CommonAttributes.CA_REVOCATION_URL)) {
      config.setSslCrlFile(CA_REVOCATION_URL.resolveModelAttribute(context,ssl).asString());
    }
  }
  if (modelconf.hasDefined(CommonAttributes.PROXY_LIST)) {
    config.setProxyList(PROXY_LIST.resolveModelAttribute(context,modelconf).asString());
  }
  config.setProxyURL(PROXY_URL.resolveModelAttribute(context,modelconf).asString());
  config.setAdvertiseSecurityKey(ADVERTISE_SECURITY_KEY.resolveModelAttribute(context,modelconf).asString());
  config.setExcludedContexts(EXCLUDED_CONTEXTS.resolveModelAttribute(context,modelconf).asString().trim());
  config.setAutoEnableContexts(AUTO_ENABLE_CONTEXTS.resolveModelAttribute(context,modelconf).asBoolean());
  config.setStopContextTimeout(STOP_CONTEXT_TIMEOUT.resolveModelAttribute(context,modelconf).asInt());
  config.setStopContextTimeoutUnit(TimeUnit.valueOf(STOP_CONTEXT_TIMEOUT.getMeasurementUnit().getName()));
  config.setSocketTimeout(SOCKET_TIMEOUT.resolveModelAttribute(context,modelconf).asInt() * 1000);
  config.setStickySession(STICKY_SESSION.resolveModelAttribute(context,modelconf).asBoolean());
  config.setStickySessionRemove(STICKY_SESSION_REMOVE.resolveModelAttribute(context,modelconf).asBoolean());
  config.setStickySessionForce(STICKY_SESSION_FORCE.resolveModelAttribute(context,modelconf).asBoolean());
  config.setWorkerTimeout(WORKER_TIMEOUT.resolveModelAttribute(context,modelconf).asInt());
  config.setMaxAttempts(MAX_ATTEMPTS.resolveModelAttribute(context,modelconf).asInt());
  config.setFlushPackets(FLUSH_PACKETS.resolveModelAttribute(context,modelconf).asBoolean());
  config.setFlushWait(FLUSH_WAIT.resolveModelAttribute(context,modelconf).asInt());
  config.setPing(PING.resolveModelAttribute(context,modelconf).asInt());
  config.setSmax(SMAX.resolveModelAttribute(context,modelconf).asInt());
  config.setTtl(TTL.resolveModelAttribute(context,modelconf).asInt());
  config.setNodeTimeout(NODE_TIMEOUT.resolveModelAttribute(context,modelconf).asInt());
  if (modelconf.hasDefined(CommonAttributes.BALANCER)) {
    config.setBalancer(BALANCER.resolveModelAttribute(context,modelconf).asString());
  }
  if (modelconf.hasDefined(CommonAttributes.LOAD_BALANCING_GROUP)) {
    config.setLoadBalancingGroup(LOAD_BALANCING_GROUP.resolveModelAttribute(context,modelconf).asString());
  }
  if (modelconf.hasDefined(CommonAttributes.SIMPLE_LOAD_PROVIDER_FACTOR)) {
    int value=ModClusterConfigResourceDefinition.SIMPLE_LOAD_PROVIDER.resolveModelAttribute(context,modelconf).asInt(1);
    SimpleLoadBalanceFactorProvider myload=new SimpleLoadBalanceFactorProvider();
    myload.setLoadBalanceFactor(value);
    load=myload;
  }
  Set<LoadMetric> metrics=new HashSet<LoadMetric>();
  if (modelconf.get(ModClusterExtension.DYNAMIC_LOAD_PROVIDER.getKeyValuePair()).isDefined()) {
    final ModelNode node=modelconf.get(ModClusterExtension.DYNAMIC_LOAD_PROVIDER.getKeyValuePair());
    int decayFactor=DynamicLoadProviderDefinition.DECAY.resolveModelAttribute(context,modelconf).asInt();
    int history=DynamicLoadProviderDefinition.HISTORY.resolveModelAttribute(context,modelconf).asInt();
    if (node.hasDefined(CommonAttributes.LOAD_METRIC)) {
      addLoadMetrics(metrics,node.get(CommonAttributes.LOAD_METRIC),context);
    }
    if (node.hasDefined(CommonAttributes.CUSTOM_LOAD_METRIC)) {
      addLoadMetrics(metrics,node.get(CommonAttributes.CUSTOM_LOAD_METRIC),context);
    }
    if (!metrics.isEmpty()) {
      DynamicLoadBalanceFactorProvider loader=new DynamicLoadBalanceFactorProvider(metrics);
      loader.setDecayFactor(decayFactor);
      loader.setHistory(history);
      load=loader;
    }
  }
}
