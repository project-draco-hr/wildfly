{
  final String cpAsVersion="EAP with cp patch";
  String oneOffPatchForOldVersionWithoutCPID=randomString();
  String oneOffPatchForNewVersionWithCPID=randomString();
  String cpPatchID=randomString();
  File oneOffPatchForOldVersionWithoutCPZip=createOneOffPatchAddingMiscFile(oneOffPatchForOldVersionWithoutCPID,AS_VERSION);
  File oneOffPatchForNewVersionWithCPZip=createOneOffPatchAddingAModule(oneOffPatchForNewVersionWithCPID,cpAsVersion);
  File cpZip=createCumulativePatch(cpPatchID,AS_VERSION,cpAsVersion);
  controller.start(CONTAINER);
  Assert.assertTrue("Patch should be accepted",CliUtilsForPatching.applyPatch(cpZip.getAbsolutePath()));
  Assert.assertTrue("server should be in restart-required mode",CliUtilsForPatching.doesServerRequireRestart());
  controller.stop(CONTAINER);
  controller.start(CONTAINER);
  Assert.assertTrue("The patch " + cpPatchID + " should be listed as installed",CliUtilsForPatching.getCumulativePatchId().equalsIgnoreCase(cpPatchID));
  Assert.assertFalse("Patch shouldn't be accepted",CliUtilsForPatching.applyPatch(oneOffPatchForOldVersionWithoutCPZip.getAbsolutePath()));
  Assert.assertTrue("Patch should be accepted",CliUtilsForPatching.applyPatch(oneOffPatchForNewVersionWithCPZip.getAbsolutePath()));
  Assert.assertTrue("server should be in restart-required mode",CliUtilsForPatching.doesServerRequireRestart());
  controller.stop(CONTAINER);
  controller.start(CONTAINER);
  Assert.assertTrue("The patch " + cpPatchID + " should be listed as installed",CliUtilsForPatching.getCumulativePatchId().equalsIgnoreCase(cpPatchID));
  Assert.assertTrue("The patch " + oneOffPatchForNewVersionWithCPID + " should be listed as installed",CliUtilsForPatching.getInstalledPatches().contains(oneOffPatchForNewVersionWithCPID));
  Assert.assertFalse("Rollback shouldn't be accepted",CliUtilsForPatching.rollbackCumulativePatch(true));
  Assert.assertTrue("Rollback should be accepted",CliUtilsForPatching.rollbackPatch(oneOffPatchForNewVersionWithCPID));
  Assert.assertTrue("server should be in restart-required mode",CliUtilsForPatching.doesServerRequireRestart());
  controller.stop(CONTAINER);
  controller.start(CONTAINER);
  Assert.assertFalse("The patch " + oneOffPatchForNewVersionWithCPID + " shouldn't be listed as installed",CliUtilsForPatching.getInstalledPatches().contains(oneOffPatchForNewVersionWithCPID));
  Assert.assertTrue("The patch " + cpPatchID + " should be listed as installed",CliUtilsForPatching.getCumulativePatchId().equalsIgnoreCase(cpPatchID));
  Assert.assertTrue("Rollback should be accepted",CliUtilsForPatching.rollbackCumulativePatch(true));
  Assert.assertTrue("server should be in restart-required mode",CliUtilsForPatching.doesServerRequireRestart());
  controller.stop(CONTAINER);
  controller.start(CONTAINER);
  Assert.assertFalse("The patch " + cpPatchID + " shouldn't be listed as installed",CliUtilsForPatching.getCumulativePatchId().equalsIgnoreCase(cpPatchID));
  Assert.assertTrue("Patch should be accepted",CliUtilsForPatching.applyPatch(oneOffPatchForOldVersionWithoutCPZip.getAbsolutePath()));
  Assert.assertTrue("server should be in restart-required mode",CliUtilsForPatching.doesServerRequireRestart());
  controller.stop(CONTAINER);
  controller.start(CONTAINER);
  Assert.assertTrue("The patch " + oneOffPatchForOldVersionWithoutCPZip + " should be listed as installed",CliUtilsForPatching.getInstalledPatches().contains(oneOffPatchForNewVersionWithCPID));
  controller.stop(CONTAINER);
}
