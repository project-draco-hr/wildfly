{
  final String oneOffPatchID1=randomString();
  final String oneOffPatchID2=randomString();
  final String cpPatchID=randomString();
  final String cpPatchID2=randomString();
  final String eapWithCP="EAP with cp patch";
  File oneOffZip1=createOneOffPatchAddingMiscFile(oneOffPatchID1,AS_VERSION);
  File cpZip=createCumulativePatch(cpPatchID,AS_VERSION,eapWithCP);
  File oneOffZip2=createOneOffPatchAddingAModule(oneOffPatchID2,eapWithCP);
  controller.start(CONTAINER);
  Assert.assertTrue("Patch should be accepted",CliUtilsForPatching.applyPatch(oneOffZip1.getAbsolutePath()));
  Assert.assertTrue("server should be in restart-required mode",CliUtilsForPatching.doesServerRequireRestart());
  controller.stop(CONTAINER);
  controller.start(CONTAINER);
  Assert.assertTrue("The patch " + oneOffPatchID1 + " should be listed as installed",CliUtilsForPatching.getInstalledPatches().contains(oneOffPatchID1));
  Assert.assertTrue("Patch should be accepted",CliUtilsForPatching.applyPatch(cpZip.getAbsolutePath()));
  Assert.assertTrue("server should be in restart-required mode",CliUtilsForPatching.doesServerRequireRestart());
  controller.stop(CONTAINER);
  controller.start(CONTAINER);
  Assert.assertTrue("The patch " + cpPatchID + " should be listed as installed",CliUtilsForPatching.getCumulativePatchId().equalsIgnoreCase(cpPatchID));
  Assert.assertFalse("The patch " + oneOffPatchID1 + " should NOT be listed as installed",CliUtilsForPatching.getInstalledPatches().contains(oneOffPatchID1));
  Assert.assertTrue("Patch should be accepted",CliUtilsForPatching.applyPatch(oneOffZip2.getAbsolutePath()));
  Assert.assertTrue("server should be in restart-required mode",CliUtilsForPatching.doesServerRequireRestart());
  controller.stop(CONTAINER);
  controller.start(CONTAINER);
  Assert.assertTrue("The patch " + oneOffPatchID2 + " should be listed as installed",CliUtilsForPatching.getInstalledPatches().contains(oneOffPatchID2));
  File cpZip2=createSecondCumulativePatch(cpPatchID2,eapWithCP,cpPatchID,"EAP with second CP");
  Assert.assertTrue("Patch should be accepted",CliUtilsForPatching.applyPatch(cpZip2.getAbsolutePath()));
  Assert.assertTrue("server should be in restart-required mode",CliUtilsForPatching.doesServerRequireRestart());
  controller.stop(CONTAINER);
  controller.start(CONTAINER);
  Assert.assertTrue("The patch " + cpPatchID2 + " should be listed as installed",CliUtilsForPatching.getCumulativePatchId().equalsIgnoreCase(cpPatchID2));
  Assert.assertFalse("The patch " + oneOffPatchID2 + " should NOT be listed as installed",CliUtilsForPatching.getInstalledPatches().contains(oneOffPatchID2));
  Assert.assertTrue("Rollback should be accepted",CliUtilsForPatching.rollbackCumulativePatch(true));
  Assert.assertTrue("server should be in restart-required mode",CliUtilsForPatching.doesServerRequireRestart());
  controller.stop(CONTAINER);
  controller.start(CONTAINER);
  Assert.assertFalse("The patch " + cpPatchID2 + " should NOT be listed as installed",CliUtilsForPatching.getCumulativePatchId().equalsIgnoreCase(cpPatchID2));
  Assert.assertTrue("The cumulative patch id should be " + cpPatchID,CliUtilsForPatching.getCumulativePatchId().equalsIgnoreCase(cpPatchID));
  Assert.assertTrue("The patch " + oneOffPatchID2 + " should be listed as installed",CliUtilsForPatching.getInstalledPatches().contains(oneOffPatchID2));
  Assert.assertTrue("Rollback should be accepted",CliUtilsForPatching.rollbackPatch(oneOffPatchID2));
  Assert.assertTrue("server should be in restart-required mode",CliUtilsForPatching.doesServerRequireRestart());
  controller.stop(CONTAINER);
  controller.start(CONTAINER);
  Assert.assertFalse("The patch " + oneOffPatchID2 + " should NOT be listed as installed",CliUtilsForPatching.getInstalledPatches().contains(oneOffPatchID2));
  Assert.assertTrue("Rollback should be accepted",CliUtilsForPatching.rollbackCumulativePatch(true));
  Assert.assertTrue("server should be in restart-required mode",CliUtilsForPatching.doesServerRequireRestart());
  controller.stop(CONTAINER);
  controller.start(CONTAINER);
  Assert.assertFalse("The patch " + cpPatchID + " should NOT be listed as installed",CliUtilsForPatching.getCumulativePatchId().equalsIgnoreCase(cpPatchID));
  Assert.assertTrue("The cumulative patch id should be " + Constants.BASE,CliUtilsForPatching.getCumulativePatchId().equalsIgnoreCase(Constants.BASE));
  Assert.assertTrue("The patch " + oneOffPatchID1 + " should be listed as installed",CliUtilsForPatching.getInstalledPatches().contains(oneOffPatchID1));
  Assert.assertTrue("Rollback should be accepted",CliUtilsForPatching.rollbackPatch(oneOffPatchID1));
  Assert.assertTrue("server should be in restart-required mode",CliUtilsForPatching.doesServerRequireRestart());
  controller.stop(CONTAINER);
  controller.start(CONTAINER);
  Assert.assertFalse("The patch " + oneOffPatchID1 + " should NOT be listed as installed",CliUtilsForPatching.getInstalledPatches().contains(oneOffPatchID1));
  controller.stop(CONTAINER);
}
