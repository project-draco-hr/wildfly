{
  final String cpAsVersion="EAP with cp patch";
  String cpPatchID=randomString();
  File cpZip=createCumulativePatch(cpPatchID,AS_VERSION,cpAsVersion);
  controller.start(CONTAINER);
  Assert.assertTrue("Patch should be accepted",CliUtilsForPatching.applyPatch(cpZip.getAbsolutePath()));
  Assert.assertTrue("server should be in restart-required mode",CliUtilsForPatching.doesServerRequireRestart());
  controller.stop(CONTAINER);
  controller.start(CONTAINER);
  Assert.assertTrue("The patch " + cpPatchID + " should be listed as installed",CliUtilsForPatching.getCumulativePatchId().equalsIgnoreCase(cpPatchID));
  controller.stop(CONTAINER);
  final String standaloneXmlPath=AS_DISTRIBUTION + FILE_SEPARATOR + "standalone"+ FILE_SEPARATOR+ "configuration"+ FILE_SEPARATOR+ "standalone.xml";
  final String standaloneConfOrigContent=readFile(standaloneXmlPath);
  final String domainXmlPath=AS_DISTRIBUTION + FILE_SEPARATOR + "domain"+ FILE_SEPARATOR+ "configuration"+ FILE_SEPARATOR+ "domain.xml";
  final String domainConfOrigContent=readFile(domainXmlPath);
  final String appClientXmlPath=AS_DISTRIBUTION + FILE_SEPARATOR + "appclient"+ FILE_SEPARATOR+ "configuration"+ FILE_SEPARATOR+ "appclient.xml";
  final String appClientConfOrigContent=readFile(appClientXmlPath);
  changeDatasource(standaloneXmlPath);
  changeDatasource(domainXmlPath);
  changeDatasource(appClientXmlPath);
  controller.start(CONTAINER);
  Assert.assertTrue("Rollback should be accepted",CliUtilsForPatching.rollbackCumulativePatch(true));
  controller.stop(CONTAINER);
  controller.start(CONTAINER);
  Assert.assertEquals("File should be restored",standaloneConfOrigContent,readFile(standaloneXmlPath));
  Assert.assertEquals("File should be restored",domainConfOrigContent,readFile(domainXmlPath));
  Assert.assertEquals("File should be restored",appClientConfOrigContent,readFile(appClientXmlPath));
  Assert.assertTrue("Patch should be accepted",CliUtilsForPatching.applyPatch(cpZip.getAbsolutePath()));
  Assert.assertTrue("server should be in restart-required mode",CliUtilsForPatching.doesServerRequireRestart());
  controller.stop(CONTAINER);
  controller.start(CONTAINER);
  Assert.assertTrue("The patch " + cpPatchID + " should be listed as installed",CliUtilsForPatching.getCumulativePatchId().equalsIgnoreCase(cpPatchID));
  controller.stop(CONTAINER);
  changeDatasource(standaloneXmlPath);
  changeDatasource(domainXmlPath);
  changeDatasource(appClientXmlPath);
  controller.start(CONTAINER);
  Assert.assertTrue("Rollback should be accepted",CliUtilsForPatching.rollbackCumulativePatch(false));
  controller.stop(CONTAINER);
  controller.start(CONTAINER);
  try {
    Assert.assertNotEquals("File shouldn't be restored",standaloneConfOrigContent,readFile(standaloneXmlPath));
    Assert.assertNotEquals("File shouldn't be restored",domainConfOrigContent,readFile(domainXmlPath));
    Assert.assertNotEquals("File shouldn't be restored",appClientConfOrigContent,readFile(appClientXmlPath));
    assertPatchElements(PatchingTestUtil.BASE_MODULE_DIRECTORY,null,false);
  }
  finally {
    controller.stop(CONTAINER);
  }
}
