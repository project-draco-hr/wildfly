{
  performRecoveryEnvBoottime(context,operation,model,verificationHandler,controllers);
  performCoreEnvironmentBootTime(context,operation,model,verificationHandler,controllers);
  performCoordinatorEnvBoottime(context,operation,model,verificationHandler,controllers);
  performObjectStoreBoottime(context,operation,model,verificationHandler,controllers);
  context.addStep(new AbstractDeploymentChainStep(){
    protected void execute(    DeploymentProcessorTarget processorTarget){
      processorTarget.addDeploymentProcessor(Phase.INSTALL,Phase.INSTALL_TRANSACTION_BINDINGS,new TransactionJndiBindingProcessor());
    }
  }
,OperationContext.Stage.RUNTIME);
  final ServiceTarget target=context.getServiceTarget();
  final XATerminatorService xaTerminatorService=new XATerminatorService();
  controllers.add(target.addService(TxnServices.JBOSS_TXN_XA_TERMINATOR,xaTerminatorService).setInitialMode(Mode.ACTIVE).install());
  final BinderService tmBinderService=new BinderService("TransactionManager");
  final ServiceBuilder<ManagedReferenceFactory> tmBuilder=context.getServiceTarget().addService(ContextNames.JBOSS_CONTEXT_SERVICE_NAME.append("TransactionManager"),tmBinderService);
  tmBuilder.addDependency(ContextNames.JBOSS_CONTEXT_SERVICE_NAME,ServiceBasedNamingStore.class,tmBinderService.getNamingStoreInjector());
  tmBuilder.addDependency(TransactionManagerService.SERVICE_NAME,javax.transaction.TransactionManager.class,new Injector<javax.transaction.TransactionManager>(){
    @Override public void inject(    final javax.transaction.TransactionManager value) throws InjectionException {
      tmBinderService.getManagedObjectInjector().inject(new ValueManagedReferenceFactory(new ImmediateValue<Object>(value)));
    }
    @Override public void uninject(){
      tmBinderService.getNamingStoreInjector().uninject();
    }
  }
);
  tmBuilder.addListener(verificationHandler);
  controllers.add(tmBuilder.install());
  final BinderService tsrBinderService=new BinderService("TransactionSynchronizationRegistry");
  final ServiceBuilder<ManagedReferenceFactory> tsrBuilder=context.getServiceTarget().addService(ContextNames.JBOSS_CONTEXT_SERVICE_NAME.append("TransactionSynchronizationRegistry"),tsrBinderService);
  tsrBuilder.addDependency(ContextNames.JBOSS_CONTEXT_SERVICE_NAME,ServiceBasedNamingStore.class,tsrBinderService.getNamingStoreInjector());
  tsrBuilder.addDependency(TransactionSynchronizationRegistryService.SERVICE_NAME,TransactionSynchronizationRegistry.class,new Injector<TransactionSynchronizationRegistry>(){
    @Override public void inject(    final TransactionSynchronizationRegistry value) throws InjectionException {
      tsrBinderService.getManagedObjectInjector().inject(new ValueManagedReferenceFactory(new ImmediateValue<Object>(value)));
    }
    @Override public void uninject(){
      tsrBinderService.getNamingStoreInjector().uninject();
    }
  }
);
  tsrBuilder.addListener(verificationHandler);
  controllers.add(tsrBuilder.install());
  final BinderService utBinderService=new BinderService("UserTransaction");
  final ServiceBuilder<ManagedReferenceFactory> utBuilder=context.getServiceTarget().addService(ContextNames.JBOSS_CONTEXT_SERVICE_NAME.append("UserTransaction"),utBinderService);
  utBuilder.addDependency(ContextNames.JBOSS_CONTEXT_SERVICE_NAME,ServiceBasedNamingStore.class,utBinderService.getNamingStoreInjector());
  utBuilder.addDependency(UserTransactionService.SERVICE_NAME,javax.transaction.UserTransaction.class,new Injector<javax.transaction.UserTransaction>(){
    @Override public void inject(    final javax.transaction.UserTransaction value) throws InjectionException {
      utBinderService.getManagedObjectInjector().inject(new ValueManagedReferenceFactory(new ImmediateValue<Object>(value)));
    }
    @Override public void uninject(){
      utBinderService.getNamingStoreInjector().uninject();
    }
  }
);
  utBuilder.addListener(verificationHandler);
  controllers.add(utBuilder.install());
}
