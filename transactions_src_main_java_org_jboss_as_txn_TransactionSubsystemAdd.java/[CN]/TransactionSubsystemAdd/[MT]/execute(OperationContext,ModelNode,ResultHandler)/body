{
  final ModelNode compensatingOperation=Util.getResourceRemoveOperation(operation.require(OP_ADDR));
  final String bindingName=operation.get(CORE_ENVIRONMENT).require(BINDING).asString();
  final String recoveryBindingName=operation.get(RECOVERY_ENVIRONMENT).require(BINDING).asString();
  final String recoveryStatusBindingName=operation.get(RECOVERY_ENVIRONMENT).require(STATUS_BINDING).asString();
  final String nodeIdentifier=operation.get(CORE_ENVIRONMENT).has(NODE_IDENTIFIER) ? operation.get(CORE_ENVIRONMENT,NODE_IDENTIFIER).asString() : "1";
  final boolean coordinatorEnableStatistics=operation.get(COORDINATOR_ENVIRONMENT,ENABLE_STATISTICS).asBoolean(false);
  final String objectStorePathRef="jboss.server.data.dir";
  final String objectStorePath="tx-object-store";
  final int maxPorts=10;
  final int coordinatorDefaultTimeout=300;
  final ModelNode subModel=context.getSubModel();
  subModel.get(CORE_ENVIRONMENT,BINDING).set(operation.get(CORE_ENVIRONMENT).require(BINDING));
  subModel.get(CORE_ENVIRONMENT,NODE_IDENTIFIER).set(operation.get(CORE_ENVIRONMENT,NODE_IDENTIFIER));
  subModel.get(RECOVERY_ENVIRONMENT,BINDING).set(operation.get(RECOVERY_ENVIRONMENT).require(BINDING));
  subModel.get(RECOVERY_ENVIRONMENT,STATUS_BINDING).set(operation.get(RECOVERY_ENVIRONMENT,STATUS_BINDING));
  subModel.get(COORDINATOR_ENVIRONMENT,ENABLE_STATISTICS).set(operation.get(COORDINATOR_ENVIRONMENT,ENABLE_STATISTICS));
  if (context.getRuntimeContext() != null) {
    final ServiceTarget target=context.getRuntimeContext().getServiceTarget();
    final XATerminatorService xaTerminatorService=new XATerminatorService();
    target.addService(TxnServices.JBOSS_TXN_XA_TERMINATOR,xaTerminatorService).setInitialMode(Mode.ACTIVE).install();
    final ArjunaTransactionManagerService transactionManagerService=new ArjunaTransactionManagerService(nodeIdentifier,maxPorts,coordinatorEnableStatistics,coordinatorDefaultTimeout);
    target.addService(TxnServices.JBOSS_TXN_ARJUNA_TRANSACTION_MANAGER,transactionManagerService).addDependency(DependencyType.OPTIONAL,ServiceName.JBOSS.append("iiop","orb"),ORB.class,transactionManagerService.getOrbInjector()).addDependency(TxnServices.JBOSS_TXN_XA_TERMINATOR,JBossXATerminator.class,transactionManagerService.getXaTerminatorInjector()).addDependency(SocketBinding.JBOSS_BINDING_NAME.append(recoveryBindingName),SocketBinding.class,transactionManagerService.getRecoveryBindingInjector()).addDependency(SocketBinding.JBOSS_BINDING_NAME.append(recoveryStatusBindingName),SocketBinding.class,transactionManagerService.getStatusBindingInjector()).addDependency(SocketBinding.JBOSS_BINDING_NAME.append(bindingName),SocketBinding.class,transactionManagerService.getSocketProcessBindingInjector()).addDependency(AbstractPathService.pathNameOf(INTERNAL_OBJECTSTORE_PATH),String.class,transactionManagerService.getPathInjector()).setInitialMode(Mode.ACTIVE).install();
    TransactionManagerService.addService(target);
    UserTransactionService.addService(target);
    RelativePathService.addService(INTERNAL_OBJECTSTORE_PATH,objectStorePath,objectStorePathRef,target);
    resultHandler.handleResultComplete();
  }
 else {
    resultHandler.handleResultComplete();
  }
  return new BasicOperationResult(compensatingOperation);
}
