{
  if (context instanceof BootOperationContext) {
    ((BootOperationContext)context).addDeploymentProcessor(Phase.INSTALL,Phase.INSTALL_TRANSACTION_BINDINGS,new TransactionJndiBindingProcessor());
  }
  final ModelNode compensatingOperation=Util.getResourceRemoveOperation(operation.require(OP_ADDR));
  final ModelNode processId=operation.get(CORE_ENVIRONMENT).require(PROCESS_ID);
  final String recoveryBindingName=operation.get(RECOVERY_ENVIRONMENT).require(BINDING).asString();
  final String recoveryStatusBindingName=operation.get(RECOVERY_ENVIRONMENT).require(STATUS_BINDING).asString();
  final String nodeIdentifier=operation.get(CORE_ENVIRONMENT).has(NODE_IDENTIFIER) ? operation.get(CORE_ENVIRONMENT,NODE_IDENTIFIER).asString() : "1";
  final boolean coordinatorEnableStatistics=operation.get(COORDINATOR_ENVIRONMENT,ENABLE_STATISTICS).asBoolean(false);
  final ModelNode objectStore=operation.get(OBJECT_STORE);
  final String objectStorePathRef=objectStore.hasDefined(RELATIVE_TO) ? objectStore.get(RELATIVE_TO).asString() : "jboss.server.data.dir";
  final String objectStorePath=objectStore.hasDefined(PATH) ? objectStore.get(PATH).asString() : "tx-object-store";
  final int maxPorts=10;
  final int coordinatorDefaultTimeout=operation.get(COORDINATOR_ENVIRONMENT,DEFAULT_TIMEOUT).asInt(300);
  final ModelNode subModel=context.getSubModel();
  subModel.get(CORE_ENVIRONMENT,PROCESS_ID).set(operation.get(CORE_ENVIRONMENT).require(PROCESS_ID));
  subModel.get(CORE_ENVIRONMENT,NODE_IDENTIFIER).set(operation.get(CORE_ENVIRONMENT,NODE_IDENTIFIER));
  subModel.get(RECOVERY_ENVIRONMENT,BINDING).set(operation.get(RECOVERY_ENVIRONMENT).require(BINDING));
  subModel.get(RECOVERY_ENVIRONMENT,STATUS_BINDING).set(operation.get(RECOVERY_ENVIRONMENT,STATUS_BINDING));
  subModel.get(COORDINATOR_ENVIRONMENT,ENABLE_STATISTICS).set(operation.get(COORDINATOR_ENVIRONMENT,ENABLE_STATISTICS));
  subModel.get(COORDINATOR_ENVIRONMENT,DEFAULT_TIMEOUT).set(operation.get(COORDINATOR_ENVIRONMENT,DEFAULT_TIMEOUT));
  subModel.get(OBJECT_STORE,RELATIVE_TO).set(operation.get(OBJECT_STORE,RELATIVE_TO));
  subModel.get(OBJECT_STORE,PATH).set(operation.get(OBJECT_STORE,PATH));
  if (context.getRuntimeContext() != null) {
    context.getRuntimeContext().setRuntimeTask(new RuntimeTask(){
      @Override public void execute(      RuntimeTaskContext context) throws OperationFailedException {
        final ServiceTarget target=context.getServiceTarget();
        String socketBindingName=null;
        final CoreEnvironmentBean coreEnvironmentBean=arjPropertyManager.getCoreEnvironmentBean();
        if (processId.hasDefined(ProcessIdType.UUID.getName())) {
          UuidProcessId id=new UuidProcessId();
          coreEnvironmentBean.setProcessImplementation(id);
        }
 else         if (processId.hasDefined(ProcessIdType.SOCKET.getName())) {
          socketBindingName=operation.get(RECOVERY_ENVIRONMENT).require(BINDING).asString();
        }
 else {
          UuidProcessId id=new UuidProcessId();
          coreEnvironmentBean.setProcessImplementation(id);
        }
        final XATerminatorService xaTerminatorService=new XATerminatorService();
        target.addService(TxnServices.JBOSS_TXN_XA_TERMINATOR,xaTerminatorService).setInitialMode(Mode.ACTIVE).install();
        final ArjunaObjectStoreEnvironmentService objStoreEnvironmentService=new ArjunaObjectStoreEnvironmentService();
        target.addService(TxnServices.JBOSS_TXN_ARJUNA_OBJECTSTORE_ENVIRONMENT,objStoreEnvironmentService).addDependency(AbstractPathService.pathNameOf(INTERNAL_OBJECTSTORE_PATH),String.class,objStoreEnvironmentService.getPathInjector()).setInitialMode(Mode.ACTIVE).install();
        final ArjunaRecoveryManagerService recoveryManagerService=new ArjunaRecoveryManagerService();
        target.addService(TxnServices.JBOSS_TXN_ARJUNA_RECOVERY_MANAGER,recoveryManagerService).addDependency(DependencyType.OPTIONAL,ServiceName.JBOSS.append("iiop","orb"),ORB.class,recoveryManagerService.getOrbInjector()).addDependency(SocketBinding.JBOSS_BINDING_NAME.append(recoveryBindingName),SocketBinding.class,recoveryManagerService.getRecoveryBindingInjector()).addDependency(SocketBinding.JBOSS_BINDING_NAME.append(recoveryStatusBindingName),SocketBinding.class,recoveryManagerService.getStatusBindingInjector()).addDependency(TxnServices.JBOSS_TXN_ARJUNA_OBJECTSTORE_ENVIRONMENT).addDependency(TxnServices.JBOSS_TXN_ARJUNA_TRANSACTION_MANAGER).setInitialMode(Mode.ACTIVE).install();
        final ArjunaTransactionManagerService transactionManagerService=new ArjunaTransactionManagerService(nodeIdentifier,maxPorts,coordinatorEnableStatistics,coordinatorDefaultTimeout);
        ServiceBuilder<?> atmsBuilder=target.addService(TxnServices.JBOSS_TXN_ARJUNA_TRANSACTION_MANAGER,transactionManagerService);
        if (socketBindingName != null) {
          ServiceName bindingName=SocketBinding.JBOSS_BINDING_NAME.append(socketBindingName);
          atmsBuilder.addDependency(bindingName,SocketBinding.class,transactionManagerService.getSocketProcessBindingInjector());
        }
        atmsBuilder.addDependency(DependencyType.OPTIONAL,ServiceName.JBOSS.append("iiop","orb"),ORB.class,transactionManagerService.getOrbInjector()).addDependency(TxnServices.JBOSS_TXN_XA_TERMINATOR,JBossXATerminator.class,transactionManagerService.getXaTerminatorInjector()).addDependency(TxnServices.JBOSS_TXN_ARJUNA_OBJECTSTORE_ENVIRONMENT).addDependency(TxnServices.JBOSS_TXN_ARJUNA_RECOVERY_MANAGER).setInitialMode(Mode.ACTIVE).install();
        TransactionManagerService.addService(target);
        UserTransactionService.addService(target);
        target.addService(TxnServices.JBOSS_TXN_USER_TRANSACTION_REGISTRY,new UserTransactionRegistryService()).setInitialMode(Mode.ACTIVE).install();
        TransactionSynchronizationRegistryService.addService(target);
        RelativePathService.addService(INTERNAL_OBJECTSTORE_PATH,objectStorePath,objectStorePathRef,target);
        try {
          Class.forName("com.arjuna.ats.internal.jta.transaction.arjunacore.TransactionImple",true,getClass().getClassLoader());
        }
 catch (        ClassNotFoundException e) {
          log.warn("Could not load com.arjuna.ats.internal.jta.transaction.arjunacore.TransactionImple",e);
        }
        resultHandler.handleResultComplete();
      }
    }
);
  }
 else {
    resultHandler.handleResultComplete();
  }
  return new BasicOperationResult(compensatingOperation);
}
