{
  super.processModelNode(context,containerName,cache,builder,dependencies);
  final Mode mode=Mode.valueOf(ClusteredCacheAdd.MODE.resolveModelAttribute(context,cache).asString());
  final long remoteTimeout=CommonAttributes.REMOTE_TIMEOUT.resolveModelAttribute(context,cache).asLong();
  final int queueSize=CommonAttributes.QUEUE_SIZE.resolveModelAttribute(context,cache).asInt();
  final long queueFlushInterval=CommonAttributes.QUEUE_FLUSH_INTERVAL.resolveModelAttribute(context,cache).asLong();
  final boolean asyncMarshalling=CommonAttributes.ASYNC_MARSHALLING.resolveModelAttribute(context,cache).asBoolean();
  CacheMode cacheMode=mode.apply(this.mode);
  builder.clustering().cacheMode(cacheMode);
  if (cacheMode.isSynchronous()) {
    builder.clustering().sync().replTimeout(remoteTimeout);
  }
 else {
    builder.clustering().async().useReplQueue(queueSize > 0);
    builder.clustering().async().replQueueMaxElements(queueSize);
    builder.clustering().async().replQueueInterval(queueFlushInterval);
    if (asyncMarshalling)     builder.clustering().async().asyncMarshalling();
 else     builder.clustering().async().syncMarshalling();
  }
}
