{
  super.processModelNode(context,containerName,cache,builder,dependencies);
  final long remoteTimeout=CommonAttributes.REMOTE_TIMEOUT.resolveModelAttribute(context,cache).asLong();
  final int queueSize=CommonAttributes.QUEUE_SIZE.resolveModelAttribute(context,cache).asInt();
  final long queueFlushInterval=CommonAttributes.QUEUE_FLUSH_INTERVAL.resolveModelAttribute(context,cache).asLong();
  final boolean asyncMarshalling=CommonAttributes.ASYNC_MARSHALLING.resolveModelAttribute(context,cache).asBoolean();
  if (CacheMode.valueOf(cache.get(ModelKeys.MODE).asString()).isSynchronous()) {
    builder.clustering().sync().replTimeout(remoteTimeout);
  }
 else {
    builder.clustering().async().replQueueMaxElements(queueSize);
    builder.clustering().async().replQueueInterval(queueFlushInterval);
    if (asyncMarshalling)     builder.clustering().async().asyncMarshalling();
 else     builder.clustering().async().syncMarshalling();
  }
}
