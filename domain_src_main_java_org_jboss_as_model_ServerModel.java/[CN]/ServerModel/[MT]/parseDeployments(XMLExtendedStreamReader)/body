{
  final RefResolver<String,DeploymentRepositoryElement> repoResolver=new RefResolver<String,DeploymentRepositoryElement>(){
    private static final long serialVersionUID=1L;
    /** 
 * Always returns <code>null</code> since full domain does not support deployment-repository 
 */
    @Override public DeploymentRepositoryElement resolveRef(    String ref){
      return repositories.get(ref);
    }
  }
;
  while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
switch (Namespace.forUri(reader.getNamespaceURI())) {
case DOMAIN_1_0:
{
        final Element element=Element.forName(reader.getLocalName());
switch (element) {
case DEPLOYMENT:
{
            final ServerGroupDeploymentElement deployment=new ServerGroupDeploymentElement(reader,repoResolver);
            if (deployments.containsKey(deployment.getUniqueName())) {
              throw new XMLStreamException("Deployment " + deployment.getUniqueName() + " with sha1 hash "+ bytesToHexString(deployment.getSha1Hash())+ " already declared",reader.getLocation());
            }
            deployments.put(deployment.getUniqueName(),deployment);
            break;
          }
default :
        throw unexpectedElement(reader);
    }
    break;
  }
default :
throw unexpectedElement(reader);
}
}
}
