{
  File logFile=new File(tempDir,"test-fh.log");
  if (logFile.exists())   assertTrue(logFile.delete());
  addFileHandler("test-logger","TRACE",logFile,true);
  Level[] levels=new Logger.Level[]{Level.ERROR,Level.WARN,Level.INFO,Level.DEBUG,Level.TRACE};
  Map<Level,Integer> levelOrd=new HashMap<Level,Integer>();
  levelOrd.put(Level.FATAL,0);
  levelOrd.put(Level.ERROR,1);
  levelOrd.put(Level.WARN,2);
  levelOrd.put(Level.INFO,3);
  levelOrd.put(Level.DEBUG,4);
  levelOrd.put(Level.TRACE,5);
  for (  Level level : levels) {
    ModelNode op=createOpNode("subsystem=logging/root-logger=ROOT","change-root-log-level");
    op.get("level").set(level.name());
    ModelNode ret=executeOperation(op);
    String response=HttpRequest.get(url.toString() + "/LoggingServlet?msg=RootLoggerTestCaseTST%20" + level.name(),10,TimeUnit.SECONDS);
    assertTrue(response.contains("RootLoggerTestCaseTST"));
  }
  removeFileHandler("test-logger",true);
  boolean[][] logFound=new boolean[levelOrd.size()][levelOrd.size()];
  List<String> logLines=FileUtils.readLines(logFile);
  for (  String line : logLines) {
    if (!line.contains("RootLoggerTestCaseTST"))     continue;
    String[] lWords=line.split(" +");
    try {
      Level lineLogLevel=Level.valueOf(lWords[1]);
      Level rootLogLevel=Level.valueOf(lWords[5]);
      int ll=levelOrd.get(lineLogLevel);
      int rl=levelOrd.get(rootLogLevel);
      assertTrue(ll <= rl);
      logFound[ll][rl]=true;
    }
 catch (    Exception e) {
      throw new Exception("Unexpected log:" + line);
    }
  }
  for (  Level level : levels) {
    int rl=levelOrd.get(level);
    for (int ll=0; ll <= rl; ll++)     assertTrue(logFound[ll][rl]);
  }
}
