{
  if (node.hasDefined(CommonAttributes.ACCEPT.getName())) {
    return AcceptAllFilter.getInstance();
  }
 else   if (node.hasDefined(CommonAttributes.ALL.getName())) {
    final List<Filter> filters=new ArrayList<Filter>();
    for (    ModelNode n : node.get(CommonAttributes.ALL.getName()).asList()) {
      filters.add(parseFilter(context,n));
    }
    return new AllFilter(filters);
  }
 else   if (node.hasDefined(CommonAttributes.ANY.getName())) {
    final List<Filter> filters=new ArrayList<Filter>();
    for (    ModelNode n : node.get(CommonAttributes.ANY.getName()).asList()) {
      filters.add(parseFilter(context,n));
    }
    return new AnyFilter(filters);
  }
 else   if (node.hasDefined(CommonAttributes.CHANGE_LEVEL.getName())) {
    return new LevelChangingFilter(parseLevel(CommonAttributes.CHANGE_LEVEL.resolveModelAttribute(context,node)));
  }
 else   if (node.hasDefined(CommonAttributes.DENY.getName())) {
    return DenyAllFilter.getInstance();
  }
 else   if (node.hasDefined(CommonAttributes.LEVEL.getName())) {
    return new LevelFilter(parseLevel(CommonAttributes.LEVEL.resolveModelAttribute(context,node)));
  }
 else   if (node.hasDefined(CommonAttributes.LEVEL_RANGE.getName())) {
    final Level min=parseLevel(CommonAttributes.MIN_LEVEL.resolveModelAttribute(context,node));
    final Level max=parseLevel(CommonAttributes.MAX_LEVEL.resolveModelAttribute(context,node));
    final boolean minInclusive=CommonAttributes.MIN_INCLUSIVE.resolveModelAttribute(context,node).asBoolean();
    final boolean maxInclusive=CommonAttributes.MAX_INCLUSIVE.resolveModelAttribute(context,node).asBoolean();
    return new LevelRangeFilter(min,minInclusive,max,maxInclusive);
  }
 else   if (node.hasDefined(CommonAttributes.MATCH.getName())) {
    return new RegexFilter(CommonAttributes.PATTERN.resolveModelAttribute(context,node).asString());
  }
 else   if (node.hasDefined(CommonAttributes.NOT.getName())) {
    return new InvertFilter(parseFilter(context,CommonAttributes.NOT.resolveModelAttribute(context,node)));
  }
 else   if (node.hasDefined(CommonAttributes.REPLACE.getName())) {
    final String pattern=CommonAttributes.PATTERN.resolveModelAttribute(context,node).asString();
    final String replacement=CommonAttributes.REPLACEMENT.resolveModelAttribute(context,node).asString();
    final boolean replaceAll=CommonAttributes.REPLACE_ALL.resolveModelAttribute(context,node).asBoolean();
    return new SubstituteFilter(pattern,replacement,replaceAll);
  }
  final String name=node.hasDefined(CommonAttributes.FILTER.getName()) ? node.get(CommonAttributes.FILTER.getName()).asString() : node.asString();
  throw new OperationFailedException(new ModelNode().set(MESSAGES.invalidFilter(name)));
}
