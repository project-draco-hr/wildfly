{
  PathAddress address=PathAddress.pathAddress(operation.get(OP_ADDR));
  final String jndiName=address.getLastElement().getValue();
  final String tableName=CMResourceResourceDefinition.CM_TABLE_NAME.resolveModelAttribute(context,model).asString();
  final int batchSize=CMResourceResourceDefinition.CM_TABLE_BATCH_SIZE.resolveModelAttribute(context,model).asInt();
  final boolean immediateCleanup=CMResourceResourceDefinition.CM_TABLE_IMMEDIATE_CLEANUP.resolveModelAttribute(context,model).asBoolean();
  ROOT_LOGGER.debugf("adding commit-markable-resource: jndi-name=%s, table-name=%s, batch-size=%d, immediate-cleanup=%b",jndiName,tableName,batchSize,immediateCleanup);
  JTAEnvironmentBean jTAEnvironmentBean=BeanPopulator.getDefaultInstance(JTAEnvironmentBean.class);
  List<String> connectableResourceJNDINames=jTAEnvironmentBean.getCommitMarkableResourceJNDINames();
  Map<String,String> connectableResourceTableNameMap=jTAEnvironmentBean.getCommitMarkableResourceTableNameMap();
  Map<String,Boolean> performImmediateCleanupOfConnectableResourceBranchesMap=jTAEnvironmentBean.getPerformImmediateCleanupOfCommitMarkableResourceBranchesMap();
  Map<String,Integer> connectableResourceRecordDeleteBatchSizeMap=jTAEnvironmentBean.getCommitMarkableResourceRecordDeleteBatchSizeMap();
  connectableResourceJNDINames.add(jndiName);
  connectableResourceTableNameMap.put(jndiName,tableName);
  performImmediateCleanupOfConnectableResourceBranchesMap.put(jndiName,immediateCleanup);
  connectableResourceRecordDeleteBatchSizeMap.put(jndiName,batchSize);
  jTAEnvironmentBean.setCommitMarkableResourceJNDINames(connectableResourceJNDINames);
  jTAEnvironmentBean.setCommitMarkableResourceTableNameMap(connectableResourceTableNameMap);
  jTAEnvironmentBean.setPerformImmediateCleanupOfCommitMarkableResourceBranchesMap(performImmediateCleanupOfConnectableResourceBranchesMap);
  jTAEnvironmentBean.setCommitMarkableResourceRecordDeleteBatchSizeMap(connectableResourceRecordDeleteBatchSizeMap);
}
