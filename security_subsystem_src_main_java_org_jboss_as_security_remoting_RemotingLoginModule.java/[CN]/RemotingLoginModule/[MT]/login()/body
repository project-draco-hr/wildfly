{
  if (super.login() == true) {
    log.debug("super.login()==true");
    return true;
  }
  Object credential=getCredential();
  if (credential instanceof RemotingConnectionCredential) {
    Connection con=((RemotingConnectionCredential)credential).getConnection();
    Principal up=null;
    UserInfo userInfo=con.getUserInfo();
    if (userInfo instanceof SubjectUserInfo) {
      for (      Principal current : ((SubjectUserInfo)userInfo).getPrincipals()) {
        if (current instanceof RealmUser) {
          up=current;
          break;
        }
      }
    }
    if (up == null) {
      for (      Principal current : con.getPrincipals()) {
        if (current instanceof UserPrincipal) {
          up=current;
          break;
        }
      }
    }
    if (up != null) {
      identity=up;
      if (getUseFirstPass()) {
        String userName=identity.getName();
        log.debugf("Storing username '%s'",userName);
        sharedState.put("javax.security.auth.login.name",identity);
        if (useNewClientCert) {
          SSLSession session=con.getSslSession();
          if (session != null) {
            try {
              credential=session.getPeerCertificates()[0];
              log.debug("Using new certificate as credential.");
            }
 catch (            SSLPeerUnverifiedException e) {
              log.debugf("No peer certificate available for '%s'",userName);
            }
          }
        }
 else         if (useClientCert) {
          SSLSession session=con.getSslSession();
          if (session != null) {
            try {
              credential=session.getPeerCertificateChain()[0];
              log.debug("Using certificate as credential.");
            }
 catch (            SSLPeerUnverifiedException e) {
              log.debugf("No peer certificate available for '%s'",userName);
            }
          }
        }
        sharedState.put("javax.security.auth.login.password",credential);
      }
      loginOk=true;
      return true;
    }
  }
  return false;
}
