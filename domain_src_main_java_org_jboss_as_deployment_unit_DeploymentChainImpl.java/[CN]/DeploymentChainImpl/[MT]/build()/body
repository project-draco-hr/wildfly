{
  return new Builder(){
    private final Set<OrderedProcessor> orderedProcessors=new TreeSet<OrderedProcessor>();
    private boolean created;
    @Override public Builder addProcessor(    DeploymentUnitProcessor processor,    long processingOrder){
      checkCreated();
      final Set<OrderedProcessor> processors=this.orderedProcessors;
      processors.add(new OrderedProcessor(processor,processingOrder));
      return this;
    }
    @Override public DeploymentChainImpl create(){
      checkCreated();
      created=true;
      final Set<OrderedProcessor> orderedProcessors=this.orderedProcessors;
      final DeploymentUnitProcessor[] processors=new DeploymentUnitProcessor[orderedProcessors.size()];
      int i=0;
      for (      final OrderedProcessor orderedProcessor : orderedProcessors) {
        processors[i++]=orderedProcessor.processor;
      }
      return new DeploymentChainImpl(processors);
    }
    private void checkCreated(){
      if (created)       throw new IllegalStateException("DeploymentChainImpl has already been created");
    }
  }
;
}
