{
  ModelNode request=new ModelNode();
  ModelNode address=request.get(Util.ADDRESS);
  if (callback == null) {
    callback=new DefaultCallbackHandler();
  }
 else {
    callback.reset();
  }
  try {
    ParserUtil.parseOperationRequest(typePath,callback);
  }
 catch (  CommandFormatException e) {
    ctx.printLine("Failed to validate input: " + e.getLocalizedMessage());
    return false;
  }
  OperationRequestAddress typeAddress=callback.getAddress();
  if (!typeAddress.endsOnType()) {
    ctx.printLine("Node path '" + typePath + "' doesn't appear to end on a type.");
    return false;
  }
  final String typeName=typeAddress.toParentNode().getType();
  for (  OperationRequestAddress.Node node : typeAddress) {
    address.add(node.getType(),node.getName());
  }
  request.get(Util.OPERATION).set(Util.READ_CHILDREN_TYPES);
  ModelNode result;
  try {
    result=ctx.getModelControllerClient().execute(request);
  }
 catch (  IOException e) {
    ctx.printLine("Failed to validate input: " + e.getLocalizedMessage());
    return false;
  }
  if (!result.hasDefined(Util.RESULT)) {
    ctx.printLine("Failed to validate input: operation response doesn't contain result info.");
    return false;
  }
  boolean pathValid=false;
  for (  ModelNode typeNode : result.get(Util.RESULT).asList()) {
    if (typeNode.asString().equals(typeName)) {
      pathValid=true;
      break;
    }
  }
  if (!pathValid) {
    ctx.printLine("Type '" + typeName + "' not found amoung child types of '"+ ctx.getPrefixFormatter().format(typeAddress)+ "'");
    return false;
  }
  address.add(typeName,"?");
  request.get(Util.OPERATION).set(Util.READ_RESOURCE_DESCRIPTION);
  try {
    result=ctx.getModelControllerClient().execute(request);
  }
 catch (  IOException e) {
    ctx.printLine(e.getLocalizedMessage());
    return false;
  }
  if (!result.hasDefined(Util.RESULT)) {
    ctx.printLine("Failed to validate input: operation response doesn't contain result info.");
    return false;
  }
  result=result.get(Util.RESULT);
  if (!result.hasDefined("attributes")) {
    ctx.printLine("Failed to validate input: description of attributes is missing for " + typePath);
    return false;
  }
  if (propertyName != null) {
    for (    Property prop : result.get(Util.ATTRIBUTES).asPropertyList()) {
      if (prop.getName().equals(propertyName)) {
        ModelNode value=prop.getValue();
        if (value.has(Util.ACCESS_TYPE) && Util.READ_ONLY.equals(value.get(Util.ACCESS_TYPE).asString())) {
          return true;
        }
        ctx.printLine("Property " + propertyName + " is not read-only.");
        return false;
      }
    }
  }
 else {
    return true;
  }
  ctx.printLine("Property '" + propertyName + "' wasn't found among the properties of "+ typePath);
  return false;
}
