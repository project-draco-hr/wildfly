{
  JDBCCMPFieldBridge2[] tableFields=(JDBCCMPFieldBridge2[])entity.getTableFields();
  JDBCCMPFieldBridge2[] pkFields=(JDBCCMPFieldBridge2[])entity.getPrimaryKeyFields();
  Connection con=null;
  PreparedStatement ps=null;
  try {
    if (log.isDebugEnabled()) {
      log.debug("executing : " + updateSql);
    }
    con=dataSource.getConnection();
    ps=con.prepareStatement(updateSql);
    int batchCount=0;
    while (view.dirty != null) {
      Row row=view.dirty;
      int paramInd=1;
      for (int fInd=0; fInd < tableFields.length; ++fInd) {
        JDBCCMPFieldBridge2 field=tableFields[fInd];
        if (!field.isPrimaryKeyMember()) {
          Object fieldValue=row.fields[field.getRowIndex()];
          paramInd=field.setArgumentParameters(ps,paramInd,fieldValue);
        }
      }
      for (int fInd=0; fInd < pkFields.length; ++fInd) {
        JDBCCMPFieldBridge2 pkField=pkFields[fInd];
        Object fieldValue=row.fields[pkField.getRowIndex()];
        paramInd=pkField.setArgumentParameters(ps,paramInd,fieldValue);
      }
      JDBCCMPFieldBridge2 versionField=entity.getVersionField();
      if (versionField != null) {
        int versionIndex=versionField.getVersionIndex();
        Object curVersion=row.fields[versionIndex];
        paramInd=versionField.setArgumentParameters(ps,paramInd,curVersion);
        Object newVersion=row.fields[versionField.getRowIndex()];
        row.fields[versionIndex]=newVersion;
      }
      updateStrategy.executeUpdate(ps);
      ++batchCount;
      row.flushStatus();
    }
    updateStrategy.executeBatch(ps);
    if (log.isTraceEnabled()) {
      log.trace("updated rows: " + batchCount);
    }
  }
 catch (  SQLException e) {
    throw CmpMessages.MESSAGES.failedToUpdateTable(tableName,e);
  }
 finally {
    JDBCUtil.safeClose(ps);
    JDBCUtil.safeClose(con);
  }
}
