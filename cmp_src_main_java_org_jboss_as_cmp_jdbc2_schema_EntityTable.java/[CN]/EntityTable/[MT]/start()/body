{
  final JDBCAbstractCMRFieldBridge[] cmrFields=entity.getCMRFields();
  relationsTotal=(cmrFields != null ? cmrFields.length : 0);
  JDBCCMPFieldBridge2[] pkFields=(JDBCCMPFieldBridge2[])entity.getPrimaryKeyFields();
  JDBCCMPFieldBridge2[] tableFields=(JDBCCMPFieldBridge2[])entity.getTableFields();
  deleteSql="delete from " + tableName + " where ";
  deleteSql+=pkFields[0].getColumnName() + "=?";
  for (int i=1; i < pkFields.length; ++i) {
    deleteSql+=" and " + pkFields[i].getColumnName() + "=?";
  }
  log.debug("delete sql: " + deleteSql);
  insertSql="insert into " + tableName + "(";
  insertSql+=tableFields[0].getColumnName();
  for (int i=1; i < tableFields.length; ++i) {
    insertSql+=", " + tableFields[i].getColumnName();
  }
  insertSql+=") values (?";
  for (int i=1; i < tableFields.length; ++i) {
    insertSql+=", ?";
  }
  insertSql+=")";
  log.debug("insert sql: " + insertSql);
  updateSql="update " + tableName + " set ";
  int setFields=0;
  for (int i=0; i < tableFields.length; ++i) {
    JDBCCMPFieldBridge2 field=tableFields[i];
    if (!field.isPrimaryKeyMember()) {
      if (setFields++ > 0) {
        updateSql+=", ";
      }
      updateSql+=field.getColumnName() + "=?";
    }
  }
  updateSql+=" where ";
  updateSql+=pkFields[0].getColumnName() + "=?";
  for (int i=1; i < pkFields.length; ++i) {
    updateSql+=" and " + pkFields[i].getColumnName() + "=?";
  }
  if (entity.getVersionField() != null) {
    updateSql+=" and " + entity.getVersionField().getColumnName() + "=?";
  }
  log.debug("update sql: " + updateSql);
  String selectColumns=tableFields[0].getColumnName();
  for (int i=1; i < tableFields.length; ++i) {
    JDBCCMPFieldBridge2 field=tableFields[i];
    selectColumns+=", " + field.getColumnName();
  }
  String whereColumns=pkFields[0].getColumnName() + "=?";
  for (int i=1; i < pkFields.length; ++i) {
    whereColumns+=" and " + pkFields[i].getColumnName() + "=?";
  }
  if (entity.getMetaData().hasRowLocking()) {
    JDBCEntityPersistenceStore manager=entity.getManager();
    JDBCTypeFactory typeFactory=manager.getJDBCTypeFactory();
    JDBCTypeMappingMetaData typeMapping=typeFactory.getTypeMapping();
    JDBCFunctionMappingMetaData rowLockingTemplate=typeMapping.getRowLockingTemplate();
    if (rowLockingTemplate == null) {
      throw new RuntimeException("Row locking template is not defined for mapping: " + typeMapping.getName());
    }
    selectSql=rowLockingTemplate.getFunctionSql(new Object[]{selectColumns,tableName,whereColumns,null},new StringBuffer()).toString();
  }
 else {
    selectSql="select ";
    selectSql+=selectColumns;
    selectSql+=" from " + tableName + " where ";
    selectSql+=whereColumns;
  }
  log.debug("select sql: " + selectSql);
  if (dontFlushCreated) {
    duplicatePkSql="select ";
    duplicatePkSql+=pkFields[0].getColumnName();
    for (int i=1; i < pkFields.length; ++i) {
      duplicatePkSql+=", " + pkFields[i].getColumnName();
    }
    duplicatePkSql+=" from " + tableName + " where ";
    duplicatePkSql+=pkFields[0].getColumnName() + "=?";
    for (int i=1; i < pkFields.length; ++i) {
      duplicatePkSql+=" and " + pkFields[i].getColumnName() + "=?";
    }
    log.debug("duplicate pk sql: " + duplicatePkSql);
  }
}
