{
  KernelServices kernelServices=createKernelServices();
  ModelNode op=createAddOperation(kernelServices,"Test1",false,getByteContent(1,2,3,4,5));
  ModelTestUtils.checkOutcome(kernelServices.executeOperation(op));
  op=createAddOperation(kernelServices,"Test2",false,getByteContent(6,7,8,9,10));
  ModelTestUtils.checkOutcome(kernelServices.executeOperation(op));
  ModelNode deployments=getDeploymentParentResource(kernelServices);
  Assert.assertEquals(2,deployments.keys().size());
  Assert.assertEquals(false,deployments.get("Test1",ENABLED).asBoolean());
  Assert.assertEquals("Test1",deployments.get("Test1",NAME).asString());
  Assert.assertEquals(true,deployments.get("Test1",PERSISTENT).asBoolean());
  Assert.assertEquals("Test1",deployments.get("Test1",RUNTIME_NAME).asString());
  Assert.assertFalse(deployments.get("Test1",SUBDEPLOYMENT).isDefined());
  getContentHashOnly(deployments.get("Test1"));
  Assert.assertEquals(false,deployments.get("Test2",ENABLED).asBoolean());
  Assert.assertEquals("Test2",deployments.get("Test2",NAME).asString());
  Assert.assertEquals(true,deployments.get("Test2",PERSISTENT).asBoolean());
  Assert.assertEquals("Test2",deployments.get("Test2",RUNTIME_NAME).asString());
  Assert.assertFalse(deployments.get("Test2",SUBDEPLOYMENT).isDefined());
  getContentHashOnly(deployments.get("Test2"));
  op=Util.createOperation(DeploymentReplaceHandler.OPERATION_NAME,PathAddress.EMPTY_ADDRESS);
  op.get(NAME).set("Test2");
  op.get(TO_REPLACE).set("Test1");
  ModelTestUtils.checkOutcome(kernelServices.executeOperation(op));
  deployments=getDeploymentParentResource(kernelServices);
  Assert.assertEquals(2,deployments.keys().size());
  Assert.assertEquals(false,deployments.get("Test1",ENABLED).asBoolean());
  Assert.assertEquals("Test1",deployments.get("Test1",NAME).asString());
  Assert.assertEquals(true,deployments.get("Test1",PERSISTENT).asBoolean());
  Assert.assertEquals("Test1",deployments.get("Test1",RUNTIME_NAME).asString());
  Assert.assertFalse(deployments.get("Test1",SUBDEPLOYMENT).isDefined());
  getContentHashOnly(deployments.get("Test1"));
  Assert.assertEquals(true,deployments.get("Test2",ENABLED).asBoolean());
  Assert.assertEquals("Test2",deployments.get("Test2",NAME).asString());
  Assert.assertEquals(true,deployments.get("Test2",PERSISTENT).asBoolean());
  Assert.assertEquals("Test2",deployments.get("Test2",RUNTIME_NAME).asString());
  Assert.assertFalse(deployments.get("Test2",SUBDEPLOYMENT).isDefined());
  getContentHashOnly(deployments.get("Test2"));
  op=Util.createOperation(DeploymentReplaceHandler.OPERATION_NAME,PathAddress.EMPTY_ADDRESS);
  op.get(NAME).set("Test2");
  op.get(TO_REPLACE).set("Test1");
  kernelServices.executeForFailure(op);
  op.get(NAME).set("Test1");
  op.get(TO_REPLACE).set("Test2");
  ModelTestUtils.checkOutcome(kernelServices.executeOperation(op));
  deployments=getDeploymentParentResource(kernelServices);
  Assert.assertEquals(2,deployments.keys().size());
  Assert.assertEquals(true,deployments.get("Test1",ENABLED).asBoolean());
  Assert.assertEquals("Test1",deployments.get("Test1",NAME).asString());
  Assert.assertEquals(true,deployments.get("Test1",PERSISTENT).asBoolean());
  Assert.assertEquals("Test1",deployments.get("Test1",RUNTIME_NAME).asString());
  Assert.assertFalse(deployments.get("Test1",SUBDEPLOYMENT).isDefined());
  getContentHashOnly(deployments.get("Test1"));
  Assert.assertEquals(false,deployments.get("Test2",ENABLED).asBoolean());
  Assert.assertEquals("Test2",deployments.get("Test2",NAME).asString());
  Assert.assertEquals(true,deployments.get("Test2",PERSISTENT).asBoolean());
  Assert.assertEquals("Test2",deployments.get("Test2",RUNTIME_NAME).asString());
  Assert.assertFalse(deployments.get("Test2",SUBDEPLOYMENT).isDefined());
  ModelNode hash1=getContentHashOnly(deployments.get("Test2"));
  removeDeployment(kernelServices,"Test2");
  op=Util.createOperation(DeploymentReplaceHandler.OPERATION_NAME,PathAddress.EMPTY_ADDRESS);
  op.get(NAME).set("Test2");
  op.get(TO_REPLACE).set("Test1");
  kernelServices.executeForFailure(op);
  op.get(CONTENT).add(getByteContent(1,2,3,4,5));
  kernelServices.executeForFailure(op);
  op.get(CONTENT).clear();
  op.get(CONTENT).add(getFileUrl("file1",1,2,3,4,5));
  kernelServices.executeForFailure(op);
  op.get(CONTENT).clear();
  op.get(CONTENT).add(getInputStreamIndexContent());
  kernelServices.executeForFailure(op,new ByteArrayInputStream(new byte[]{1,2,3,4,5}));
  ModelNode hashContent=new ModelNode();
  hashContent.get(HASH).set(hash1);
  op.get(CONTENT).clear();
  op.get(CONTENT).add(hashContent);
  ModelTestUtils.checkOutcome(kernelServices.executeOperation(op));
  deployments=getDeploymentParentResource(kernelServices);
  Assert.assertEquals(2,deployments.keys().size());
  Assert.assertEquals(false,deployments.get("Test1",ENABLED).asBoolean());
  Assert.assertEquals("Test1",deployments.get("Test1",NAME).asString());
  Assert.assertEquals(true,deployments.get("Test1",PERSISTENT).asBoolean());
  Assert.assertEquals("Test1",deployments.get("Test1",RUNTIME_NAME).asString());
  Assert.assertFalse(deployments.get("Test1",SUBDEPLOYMENT).isDefined());
  getContentHashOnly(deployments.get("Test1"));
  Assert.assertEquals(true,deployments.get("Test2",ENABLED).asBoolean());
  Assert.assertEquals("Test2",deployments.get("Test2",NAME).asString());
  Assert.assertEquals(true,deployments.get("Test2",PERSISTENT).asBoolean());
  Assert.assertEquals("Test1",deployments.get("Test2",RUNTIME_NAME).asString());
  Assert.assertFalse(deployments.get("Test2",SUBDEPLOYMENT).isDefined());
  getContentHashOnly(deployments.get("Test2"));
  removeDeployment(kernelServices,"Test1");
  File file1=writeToFile("test-file2",5,6,7,8,9);
  op=Util.createOperation(DeploymentReplaceHandler.OPERATION_NAME,PathAddress.EMPTY_ADDRESS);
  op.get(NAME).set("Test1");
  op.get(TO_REPLACE).set("Test2");
  ModelNode managedContent=new ModelNode();
  managedContent.get(PATH).set(file1.getAbsolutePath());
  op.get(CONTENT).add(managedContent);
  kernelServices.executeForFailure(op);
  managedContent.get(ARCHIVE).set(true);
  op.get(CONTENT).clear();
  op.get(CONTENT).add(managedContent);
  ModelTestUtils.checkOutcome(kernelServices.executeOperation(op));
  deployments=getDeploymentParentResource(kernelServices);
  Assert.assertEquals(2,deployments.keys().size());
  Assert.assertEquals(true,deployments.get("Test1",ENABLED).asBoolean());
  Assert.assertEquals("Test1",deployments.get("Test1",NAME).asString());
  Assert.assertEquals(true,deployments.get("Test1",PERSISTENT).asBoolean());
  Assert.assertEquals("Test1",deployments.get("Test1",RUNTIME_NAME).asString());
  Assert.assertFalse(deployments.get("Test1",SUBDEPLOYMENT).isDefined());
  ModelNode content1=getContentOnly(deployments.get("Test1"));
  checkUnmanagedContents(file1,content1,true,true);
  Assert.assertEquals(false,deployments.get("Test2",ENABLED).asBoolean());
  Assert.assertEquals("Test2",deployments.get("Test2",NAME).asString());
  Assert.assertEquals(true,deployments.get("Test2",PERSISTENT).asBoolean());
  Assert.assertEquals("Test1",deployments.get("Test2",RUNTIME_NAME).asString());
  Assert.assertFalse(deployments.get("Test2",SUBDEPLOYMENT).isDefined());
  getContentHashOnly(deployments.get("Test2"));
  removeDeployment(kernelServices,"Test2");
  File file2=writeToFile("test-file1",5,6,7,8,9);
  op=Util.createOperation(DeploymentReplaceHandler.OPERATION_NAME,PathAddress.EMPTY_ADDRESS);
  op.get(NAME).set("Test2");
  op.get(TO_REPLACE).set("Test1");
  managedContent=new ModelNode();
  managedContent.get(RELATIVE_TO).set(file2.getParentFile().getAbsolutePath());
  op.get(CONTENT).clear();
  op.get(CONTENT).add(managedContent);
  kernelServices.executeForFailure(op);
  managedContent.get(ARCHIVE).set(true);
  op.get(CONTENT).clear();
  op.get(CONTENT).add(managedContent);
  kernelServices.executeForFailure(op);
  managedContent.remove(ARCHIVE);
  managedContent.get(PATH).set(file2.getName());
  op.get(CONTENT).clear();
  op.get(CONTENT).add(managedContent);
  kernelServices.executeForFailure(op);
  managedContent.get(ARCHIVE).set(false);
  op.get(CONTENT).clear();
  op.get(CONTENT).add(managedContent);
  ModelTestUtils.checkOutcome(kernelServices.executeOperation(op));
}
