{
  for (  File child : directory.listFiles()) {
    String fileName=child.getName();
    if (fileName.endsWith(DEPLOYED)) {
      String origName=fileName.substring(0,fileName.length() - DEPLOYED.length());
      foundDeployed.put(origName,child);
    }
 else     if (child.isDirectory()) {
      int idx=fileName.lastIndexOf('.');
      if (idx > -1 && ARCHIVES.contains(fileName.substring(idx))) {
        log.warnf("%s is an exploded deployment and exploded deployments are not currently handled by %s",child.getName(),getClass().getSimpleName());
      }
 else {
        builder=scanDirectory(child,builder,foundDeployed,newlyAdded);
      }
    }
 else {
      DeploymentPlanBuilder currentBuilder=builder;
      boolean uploaded=false;
      if (deployed.contains(fileName)) {
        try {
          builder=builder.replace(child);
          uploaded=true;
        }
 catch (        IOException e) {
          log.errorf(e,"Failed replacing %s with content at %s",fileName,child.getAbsolutePath());
        }
      }
 else {
        try {
          builder=builder.add(child).andDeploy();
          uploaded=true;
        }
 catch (        IOException e) {
          log.errorf(e,"Failed adding deployment content at %s",child.getAbsolutePath());
        }
catch (        DuplicateDeploymentNameException e) {
          log.warnf(e,"Deployment content with name %s is already installed " + "but was unknown to this filesystem deployment scanner. " + "Replacing the existing content with new content %s. Mixing "+ "mechanisms to deploy content with the same name is not "+ "recommended.",fileName,child.getAbsolutePath());
          try {
            builder=builder.replace(child);
            uploaded=true;
          }
 catch (          IOException e1) {
            log.errorf(e1,"Failed replacing %s with content at %s",fileName,child.getAbsolutePath());
          }
        }
      }
      if (uploaded) {
        if (replaceWithDeployedMarker(child)) {
          newlyAdded.add(fileName);
        }
 else {
          builder=currentBuilder;
        }
      }
    }
  }
  return builder;
}
