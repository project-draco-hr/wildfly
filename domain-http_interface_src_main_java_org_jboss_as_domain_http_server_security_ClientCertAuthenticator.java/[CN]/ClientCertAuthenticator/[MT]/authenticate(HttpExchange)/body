{
  Subject subject=(Subject)exchange.getAttribute(Subject.class.getName(),AttributeScope.CONNECTION);
  if (subject != null) {
    Set<HttpPrincipal> httpPrincipals=subject.getPrincipals(HttpPrincipal.class);
    if (httpPrincipals.size() > 0) {
      return new Success(httpPrincipals.iterator().next());
    }
  }
  Result response=null;
  if (exchange instanceof HttpsExchange) {
    HttpsExchange httpsExch=(HttpsExchange)exchange;
    SSLSession session=httpsExch.getSSLSession();
    if (session != null) {
      try {
        Principal p=session.getPeerPrincipal();
        response=new Success(new HttpPrincipal(p.getName(),realm));
      }
 catch (      SSLPeerUnverifiedException e) {
      }
    }
  }
  if (response != null) {
    if (response instanceof Success) {
      HttpPrincipal principal=((Success)response).getPrincipal();
      try {
        SubjectUserInfo userInfo=authenticationProvider.getCallbackHandler().createSubjectUserInfo(principal);
        exchange.setAttribute(Subject.class.getName(),userInfo.getSubject(),AttributeScope.CONNECTION);
      }
 catch (      IOException e) {
        ROOT_LOGGER.debug("Unable to create SubjectUserInfo",e);
        response=new Authenticator.Failure(INTERNAL_SERVER_ERROR);
      }
    }
  }
 else {
    response=new Failure(FORBIDDEN);
  }
  return response;
}
