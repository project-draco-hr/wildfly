{
  KernelServices mainServices=builder.build();
  assertTrue(mainServices.isSuccessfulBoot());
  KernelServices legacyServices=mainServices.getLegacyServices(VERSION_1_1_0);
  assertNotNull(legacyServices);
  assertTrue(legacyServices.isSuccessfulBoot());
  PathAddress subsystemAddress=PathAddress.pathAddress(pathElement(SUBSYSTEM,MessagingExtension.SUBSYSTEM_NAME));
  List<ModelNode> modelNodes=builder.parseXmlResource("subsystem_1_4_expressions.xml");
  modelNodes.remove(0);
  checkFailedTransformedBootOperations(mainServices,VERSION_1_1_0,modelNodes,new FailedOperationTransformationConfig().addFailedAttribute(subsystemAddress.append(HORNETQ_SERVER_PATH),createChainedConfig(HornetQServerResourceDefinition.ATTRIBUTES_WITH_EXPRESSION_ALLOWED_IN_1_2_0,concat(new AttributeDefinition[]{CommonAttributes.BACKUP_GROUP_NAME,CommonAttributes.REPLICATION_CLUSTERNAME,CommonAttributes.REMOTING_INCOMING_INTERCEPTORS,CommonAttributes.REMOTING_OUTGOING_INTERCEPTORS},CHECK_FOR_LIVE_SERVER))).addFailedAttribute(subsystemAddress.append(HORNETQ_SERVER_PATH,pathElement(ModelDescriptionConstants.PATH)),new RejectExpressionsConfig(ModelDescriptionConstants.PATH)).addFailedAttribute(subsystemAddress.append(HORNETQ_SERVER_PATH,pathElement(CommonAttributes.IN_VM_ACCEPTOR)),new RejectExpressionsConfigWithAddOnlyParam(concat(new AttributeDefinition[]{InVMTransportDefinition.SERVER_ID},PARAM))).addFailedAttribute(subsystemAddress.append(HORNETQ_SERVER_PATH,pathElement(CommonAttributes.IN_VM_ACCEPTOR)).append(TransportParamDefinition.PATH),new RejectExpressionsConfig(TransportParamDefinition.VALUE)).addFailedAttribute(subsystemAddress.append(HORNETQ_SERVER_PATH,pathElement(CommonAttributes.IN_VM_CONNECTOR)),new RejectExpressionsConfigWithAddOnlyParam(concat(new AttributeDefinition[]{InVMTransportDefinition.SERVER_ID},PARAM))).addFailedAttribute(subsystemAddress.append(HORNETQ_SERVER_PATH,pathElement(CommonAttributes.IN_VM_CONNECTOR),TransportParamDefinition.PATH),new RejectExpressionsConfig(TransportParamDefinition.VALUE)).addFailedAttribute(subsystemAddress.append(HORNETQ_SERVER_PATH,pathElement(CommonAttributes.REMOTE_ACCEPTOR)),new RejectExpressionsConfigWithAddOnlyParam(PARAM)).addFailedAttribute(subsystemAddress.append(HORNETQ_SERVER_PATH,pathElement(CommonAttributes.REMOTE_ACCEPTOR),TransportParamDefinition.PATH),new RejectExpressionsConfig(TransportParamDefinition.VALUE)).addFailedAttribute(subsystemAddress.append(HORNETQ_SERVER_PATH,pathElement(CommonAttributes.REMOTE_CONNECTOR)),new RejectExpressionsConfigWithAddOnlyParam(PARAM)).addFailedAttribute(subsystemAddress.append(HORNETQ_SERVER_PATH,pathElement(CommonAttributes.REMOTE_CONNECTOR),TransportParamDefinition.PATH),new RejectExpressionsConfig(TransportParamDefinition.VALUE)).addFailedAttribute(subsystemAddress.append(HORNETQ_SERVER_PATH,ServletConnectorDefinition.PATH),FailedOperationTransformationConfig.REJECTED_RESOURCE).addFailedAttribute(subsystemAddress.append(HORNETQ_SERVER_PATH,pathElement(CommonAttributes.ACCEPTOR)),new RejectExpressionsConfigWithAddOnlyParam(PARAM)).addFailedAttribute(subsystemAddress.append(HORNETQ_SERVER_PATH,pathElement(CommonAttributes.ACCEPTOR),TransportParamDefinition.PATH),new RejectExpressionsConfig(TransportParamDefinition.VALUE)).addFailedAttribute(subsystemAddress.append(HORNETQ_SERVER_PATH,pathElement(CommonAttributes.CONNECTOR)),new RejectExpressionsConfigWithAddOnlyParam(PARAM)).addFailedAttribute(subsystemAddress.append(HORNETQ_SERVER_PATH,pathElement(CommonAttributes.CONNECTOR),TransportParamDefinition.PATH),new RejectExpressionsConfig(TransportParamDefinition.VALUE)).addFailedAttribute(subsystemAddress.append(HORNETQ_SERVER_PATH,BroadcastGroupDefinition.PATH),new RejectExpressionsConfig(BroadcastGroupDefinition.BROADCAST_PERIOD){
    @Override public boolean expectFailed(    ModelNode operation){
      if ("groupT".equals(operation.get(OP_ADDR).get(2).get(CommonAttributes.BROADCAST_GROUP).asString())) {
        return true;
      }
      return super.expectFailed(operation);
    }
  }
).addFailedAttribute(subsystemAddress.append(HORNETQ_SERVER_PATH).append(DiscoveryGroupDefinition.PATH),new RejectExpressionsConfig(DiscoveryGroupDefinition.REFRESH_TIMEOUT,DiscoveryGroupDefinition.INITIAL_WAIT_TIMEOUT){
    @Override public boolean expectFailed(    ModelNode operation){
      if ("groupU".equals(operation.get(OP_ADDR).get(2).get(CommonAttributes.DISCOVERY_GROUP).asString())) {
        return true;
      }
      return super.expectFailed(operation);
    }
  }
).addFailedAttribute(subsystemAddress.append(HORNETQ_SERVER_PATH,DivertDefinition.PATH),new RejectExpressionsConfig(DivertDefinition.ROUTING_NAME,DivertDefinition.ADDRESS,DivertDefinition.FORWARDING_ADDRESS,CommonAttributes.FILTER,DivertDefinition.EXCLUSIVE)).addFailedAttribute(subsystemAddress.append(HORNETQ_SERVER_PATH,QueueDefinition.PATH),new RejectExpressionsConfig(QueueDefinition.ADDRESS,CommonAttributes.FILTER,CommonAttributes.DURABLE)).addFailedAttribute(subsystemAddress.append(HORNETQ_SERVER_PATH,ClusterConnectionDefinition.PATH),createChainedConfig(ClusterConnectionDefinition.ATTRIBUTES_WITH_EXPRESSION_ALLOWED_IN_1_2_0,new AttributeDefinition[]{CommonAttributes.CALL_FAILOVER_TIMEOUT,ClusterConnectionDefinition.NOTIFICATION_ATTEMPTS,ClusterConnectionDefinition.NOTIFICATION_INTERVAL})).addFailedAttribute(subsystemAddress.append(HORNETQ_SERVER_PATH,BridgeDefinition.PATH),createChainedConfig(BridgeDefinition.ATTRIBUTES_WITH_EXPRESSION_ALLOWED_IN_1_2_0,new AttributeDefinition[]{BridgeDefinition.RECONNECT_ATTEMPTS_ON_SAME_NODE})).addFailedAttribute(subsystemAddress.append(HORNETQ_SERVER_PATH,GroupingHandlerDefinition.PATH),new RejectExpressionsConfig(GroupingHandlerDefinition.TYPE,GroupingHandlerDefinition.GROUPING_HANDLER_ADDRESS,GroupingHandlerDefinition.TIMEOUT)).addFailedAttribute(subsystemAddress.append(HORNETQ_SERVER_PATH,AddressSettingDefinition.PATH),createChainedConfig(AddressSettingDefinition.ATTRIBUTES_WITH_EXPRESSION_ALLOWED_IN_1_2_0,new AttributeDefinition[]{AddressSettingDefinition.EXPIRY_DELAY})).addFailedAttribute(subsystemAddress.append(HORNETQ_SERVER_PATH,ConnectorServiceDefinition.PATH,ConnectorServiceParamDefinition.PATH),new RejectExpressionsConfig(ConnectorServiceParamDefinition.VALUE)).addFailedAttribute(subsystemAddress.append(HORNETQ_SERVER_PATH,ConnectionFactoryDefinition.PATH),createChainedConfig(ConnectionFactoryDefinition.ATTRIBUTES_WITH_EXPRESSION_ALLOWED_IN_1_2_0,new AttributeDefinition[]{CALL_FAILOVER_TIMEOUT}).setReadOnly(FACTORY_TYPE)).addFailedAttribute(subsystemAddress.append(HORNETQ_SERVER_PATH,PooledConnectionFactoryDefinition.PATH),createChainedConfig(PooledConnectionFactoryDefinition.ATTRIBUTES_WITH_EXPRESSION_ALLOWED_IN_1_2_0,concat(PooledConnectionFactoryDefinition.ATTRIBUTES_ADDED_IN_1_2_0,CALL_FAILOVER_TIMEOUT)).setReadOnly(ConnectionFactoryAttributes.Pooled.TRANSACTION)).addFailedAttribute(subsystemAddress.append(HORNETQ_SERVER_PATH,JMSQueueDefinition.PATH),new RejectExpressionsConfig(CommonAttributes.DESTINATION_ENTRIES,CommonAttributes.SELECTOR,CommonAttributes.DURABLE)).addFailedAttribute(subsystemAddress.append(HORNETQ_SERVER_PATH,JMSTopicDefinition.PATH),new RejectExpressionsConfig(CommonAttributes.DESTINATION_ENTRIES)).addFailedAttribute(subsystemAddress.append(JMSBridgeDefinition.PATH),FailedOperationTransformationConfig.REJECTED_RESOURCE));
}
