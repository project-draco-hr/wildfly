{
  validator.validate(operation);
  String name=operation.require(NAME).asString();
  String toReplace=operation.require(TO_REPLACE).asString();
  if (name.equals(toReplace)) {
    throw operationFailed(String.format("Cannot use %s with the same value for parameters %s and %s. " + "Use %s to redeploy the same content or %s to replace content with a new version with the same name.",OPERATION_NAME,NAME,TO_REPLACE,ServerGroupDeploymentRedeployHandler.OPERATION_NAME,DeploymentFullReplaceHandler.OPERATION_NAME));
  }
  ModelNode deployment;
  try {
    deployment=context.getSubModel(PathAddress.pathAddress(PathElement.pathElement(DEPLOYMENT,name)));
  }
 catch (  IllegalArgumentException iae) {
    throw operationFailed(String.format("No deployment with name %s found",name));
  }
  for (  ModelNode content : deployment.require(CONTENT).asList()) {
    if ((content.hasDefined(HASH))) {
      byte[] hash=content.require(HASH).asBytes();
      fileRepository.getDeploymentFiles(hash);
    }
  }
  ModelNode deployments=context.getSubModel().get(DEPLOYMENT);
  ModelNode replaceNode=deployments.hasDefined(toReplace) ? deployments.get(toReplace) : null;
  if (replaceNode == null) {
    throw operationFailed(String.format("No deployment with name %s found",toReplace));
  }
  ModelNode deployNode=deployments.hasDefined(name) ? deployments.get(name) : null;
  if (deployNode == null) {
    deployNode=new ModelNode();
    deployNode=deployment.clone();
    deployNode.remove("content");
    deployments.get(name).set(deployNode);
  }
 else   if (deployNode.get(ENABLED).asBoolean()) {
    throw operationFailed(String.format("Deployment %s is already started",toReplace));
  }
  deployNode.get(ENABLED).set(true);
  replaceNode.get(ENABLED).set(false);
  ModelNode compensatingOp=operation.clone();
  compensatingOp.get(NAME).set(toReplace);
  compensatingOp.get(TO_REPLACE).set(name);
  resultHandler.handleResultComplete();
  return new BasicOperationResult();
}
