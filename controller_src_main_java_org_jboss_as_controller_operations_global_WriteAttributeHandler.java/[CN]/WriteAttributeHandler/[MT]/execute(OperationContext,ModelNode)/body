{
  nameValidator.validate(operation);
  final String attributeName=operation.require(NAME.getName()).asString();
  final ImmutableManagementResourceRegistration registry=context.getResourceRegistration();
  if (registry == null) {
    throw new OperationFailedException(ControllerMessages.MESSAGES.noSuchResourceType(PathAddress.pathAddress(operation.get(OP_ADDR))));
  }
  final AttributeAccess attributeAccess=registry.getAttributeAccess(PathAddress.EMPTY_ADDRESS,attributeName);
  if (attributeAccess == null) {
    throw new OperationFailedException(new ModelNode().set(MESSAGES.unknownAttribute(attributeName)));
  }
 else   if (attributeAccess.getAccessType() != AttributeAccess.AccessType.READ_WRITE) {
    throw new OperationFailedException(new ModelNode().set(MESSAGES.attributeNotWritable(attributeName)));
  }
 else {
    ModelNode currentValue;
    if (attributeAccess.getStorageType() == AttributeAccess.Storage.CONFIGURATION) {
      ModelNode model=context.readResourceForUpdate(PathAddress.EMPTY_ADDRESS).getModel();
      currentValue=model.has(attributeName) ? model.get(attributeName) : new ModelNode();
    }
 else {
      currentValue=new ModelNode();
    }
    AuthorizationResult authorizationResult=context.authorize(operation,attributeName,currentValue);
    if (authorizationResult.getDecision() == AuthorizationResult.Decision.DENY) {
      throw ControllerMessages.MESSAGES.unauthorized(operation.require(OP).asString(),PathAddress.pathAddress(operation.get(OP_ADDR)),authorizationResult.getExplanation());
    }
    OperationStepHandler handler=attributeAccess.getWriteHandler();
    ClassLoader oldTccl=WildFlySecurityManager.setCurrentContextClassLoaderPrivileged(handler.getClass());
    try {
      handler.execute(context,operation);
    }
  finally {
      WildFlySecurityManager.setCurrentContextClassLoaderPrivileged(oldTccl);
    }
  }
}
