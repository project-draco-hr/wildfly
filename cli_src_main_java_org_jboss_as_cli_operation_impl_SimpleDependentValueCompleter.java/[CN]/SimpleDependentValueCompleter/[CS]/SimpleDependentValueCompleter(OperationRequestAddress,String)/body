{
  super(new CandidatesProvider(){
    ModelNode allAttrs;
    @Override public Collection<String> getAllCandidates(    CommandContext ctx){
      final String propName=ctx.getParsedCommandLine().getPropertyValue(idProperty);
      if (propName == null) {
        return Collections.emptyList();
      }
      if (allAttrs == null) {
        final ModelNode req=new ModelNode();
        final ModelNode addrNode=req.get(Util.ADDRESS);
        for (        OperationRequestAddress.Node node : address) {
          addrNode.add(node.getType(),node.getName());
        }
        req.get(Util.OPERATION).set(Util.READ_RESOURCE_DESCRIPTION);
        final ModelNode response;
        try {
          response=ctx.getModelControllerClient().execute(req);
        }
 catch (        Exception e) {
          return Collections.emptyList();
        }
        final ModelNode result=response.get(Util.RESULT);
        if (!result.isDefined()) {
          return Collections.emptyList();
        }
        allAttrs=result.get(Util.ATTRIBUTES);
      }
      if (!allAttrs.isDefined()) {
        return Collections.emptyList();
      }
      final ModelNode propDescr=allAttrs.get(propName);
      if (!propDescr.isDefined()) {
        return Collections.emptyList();
      }
      final ModelNode typeNode=propDescr.get(Util.TYPE);
      if (typeNode.isDefined() && typeNode.asType().equals(ModelType.BOOLEAN)) {
        return BOOLEAN;
      }
 else       if (propDescr.has(Util.ALLOWED)) {
        final ModelNode allowedNode=propDescr.get(Util.ALLOWED);
        if (allowedNode.isDefined()) {
          final List<ModelNode> nodeList=allowedNode.asList();
          final List<String> values=new ArrayList<String>(nodeList.size());
          for (          ModelNode node : nodeList) {
            values.add(node.asString());
          }
          return values;
        }
      }
      return Collections.emptyList();
    }
  }
);
}
