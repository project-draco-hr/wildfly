{
  KernelServicesBuilder builder=createKernelServicesBuilder(new AdditionalInitialization()).setSubsystemXml(getSubsystemXml());
  KernelServices services=builder.build();
  ModelNode model=services.readWholeModel();
  ModelNode config=model.get(SUBSYSTEM,getMainSubsystemName()).get(MOD_CLUSTER_CONFIG,CONFIGURATION);
  ModelNode ssl=config.get(SSL,CONFIGURATION);
  Assert.assertEquals("/home/rhusar/client-keystore.jks",ssl.get("ca-certificate-file").resolve().asString());
  Assert.assertEquals("/home/rhusar/revocations",ssl.get("ca-revocation-url").resolve().asString());
  Assert.assertEquals("/home/rhusar/client-keystore.jks",ssl.get("certificate-key-file").resolve().asString());
  Assert.assertEquals("SSL_DHE_DSS_WITH_3DES_EDE_CBC_SHA,SSL_RSA_WITH_RC4_128_MD5,SSL_RSA_WITH_RC4_128_SHA,SSL_RSA_WITH_3DES_EDE_CBC_SHA",ssl.get("cipher-suite").resolve().asString());
  Assert.assertEquals("mykeyalias",ssl.get("key-alias").resolve().asString());
  Assert.assertEquals("mypassword",ssl.get("password").resolve().asString());
  Assert.assertEquals("TLS",ssl.get("protocol").resolve().asString());
  ServiceController<?> service=services.getContainer().getService(ContainerEventHandlerService.CONFIG_SERVICE_NAME);
  MCMPHandlerConfiguration sslConfig=(MCMPHandlerConfiguration)service.getValue();
  Assert.assertTrue(sslConfig.isSsl());
  Assert.assertEquals("mykeyalias",sslConfig.getSslKeyAlias());
  Assert.assertEquals("mypassword",sslConfig.getSslTrustStorePassword());
  Assert.assertEquals("mypassword",sslConfig.getSslKeyStorePassword());
  Assert.assertEquals("/home/rhusar/client-keystore.jks",sslConfig.getSslKeyStore());
  Assert.assertEquals("SSL_DHE_DSS_WITH_3DES_EDE_CBC_SHA,SSL_RSA_WITH_RC4_128_MD5,SSL_RSA_WITH_RC4_128_SHA,SSL_RSA_WITH_3DES_EDE_CBC_SHA",sslConfig.getSslCiphers());
  Assert.assertEquals("TLS",sslConfig.getSslProtocol());
  Assert.assertEquals("/home/rhusar/client-keystore.jks",sslConfig.getSslTrustStore());
  Assert.assertEquals("/home/rhusar/revocations",sslConfig.getSslCrlFile());
}
