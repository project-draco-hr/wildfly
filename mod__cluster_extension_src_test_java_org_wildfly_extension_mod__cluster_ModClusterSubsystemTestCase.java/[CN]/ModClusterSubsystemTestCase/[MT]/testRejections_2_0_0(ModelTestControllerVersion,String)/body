{
  String subsystemXml=readResource("subsystem_2_0-reject.xml");
  ModelVersion modelVersion=ModelVersion.create(2,0,0);
  KernelServicesBuilder builder=createKernelServicesBuilder(createAdditionalInitialization());
  builder.createLegacyKernelServicesBuilder(null,controllerVersion,modelVersion).addMavenResourceURL("org.wildfly:wildfly-mod_cluster-extension:" + controllerVersion.getMavenGavVersion()).addMavenResourceURL("org.jboss.mod_cluster:mod_cluster-core:" + modClusterJarVersion).setExtensionClassName("org.wildfly.extension.mod_cluster.ModClusterExtension");
  KernelServices mainServices=builder.build();
  KernelServices legacyServices=mainServices.getLegacyServices(modelVersion);
  Assert.assertNotNull(legacyServices);
  Assert.assertTrue(mainServices.isSuccessfulBoot());
  Assert.assertTrue(legacyServices.isSuccessfulBoot());
  PathAddress addr=PathAddress.pathAddress(PathElement.pathElement(SUBSYSTEM,ModClusterExtension.SUBSYSTEM_NAME)).append(PathElement.pathElement(MOD_CLUSTER_CONFIG,CONFIGURATION));
  ModelTestUtils.checkFailedTransformedBootOperations(mainServices,modelVersion,parse(subsystemXml),new FailedOperationTransformationConfig().addFailedAttribute(addr,ChainedConfig.createBuilder(CommonAttributes.STATUS_INTERVAL).addConfig(new StatusIntervalConfig(CommonAttributes.STATUS_INTERVAL)).build()));
}
