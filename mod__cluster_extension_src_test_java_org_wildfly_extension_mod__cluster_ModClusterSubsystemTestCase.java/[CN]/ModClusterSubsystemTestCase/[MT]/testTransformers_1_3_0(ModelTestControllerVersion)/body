{
  String subsystemXml=readResource("subsystem_1_1.xml");
  ModelVersion modelVersion=ModelVersion.create(1,3,0);
  KernelServicesBuilder builder=createKernelServicesBuilder(createAdditionalInitialization()).setSubsystemXml(subsystemXml);
  builder.createLegacyKernelServicesBuilder(null,controllerVersion,modelVersion).addMavenResourceURL("org.jboss.as:jboss-as-modcluster:" + controllerVersion.getMavenGavVersion()).configureReverseControllerCheck(null,new Undo71TransformModelFixer()).setExtensionClassName("org.jboss.as.modcluster.ModClusterExtension");
  KernelServices mainServices=builder.build();
  KernelServices legacyServices=mainServices.getLegacyServices(modelVersion);
  Assert.assertNotNull(legacyServices);
  Assert.assertTrue(mainServices.isSuccessfulBoot());
  Assert.assertTrue(legacyServices.isSuccessfulBoot());
  ModelNode legacySubsystem=checkSubsystemModelTransformation(mainServices,modelVersion);
  ModelNode mainSessionCapacity=mainServices.readWholeModel().get(SUBSYSTEM,ModClusterExtension.SUBSYSTEM_NAME,MOD_CLUSTER_CONFIG,CONFIGURATION,CommonAttributes.DYNAMIC_LOAD_PROVIDER,CONFIGURATION,CommonAttributes.LOAD_METRIC,"sessions",CommonAttributes.CAPACITY);
  ModelNode legacySessionCapacity=legacySubsystem.get(SUBSYSTEM,ModClusterExtension.SUBSYSTEM_NAME,MOD_CLUSTER_CONFIG,CONFIGURATION,CommonAttributes.DYNAMIC_LOAD_PROVIDER,CONFIGURATION,CommonAttributes.LOAD_METRIC,"sessions",CommonAttributes.CAPACITY);
  Assert.assertEquals(legacySessionCapacity.getType(),mainSessionCapacity.getType());
  Assert.assertTrue(mainSessionCapacity.asString().equals(legacySessionCapacity.asString()));
  Assert.assertEquals(mainSessionCapacity.asInt(),legacySessionCapacity.asInt());
}
