{
  OperationStepHandler step=new AbstractDeploymentChainStep(){
    @Override protected void execute(    DeploymentProcessorTarget target){
      for (      SingletonDeploymentSchema schema : SingletonDeploymentSchema.values()) {
        target.addDeploymentProcessor(SingletonExtension.SUBSYSTEM_NAME,Phase.STRUCTURE,Phase.STRUCTURE_REGISTER_JBOSS_ALL_SINGLETON_DEPLOYMENT,new JBossAllXmlParserRegisteringProcessor<>(schema.getRoot(),SingletonDeploymentDependencyProcessor.CONFIGURATION_KEY,new SingletonDeploymentXMLReader(schema)));
      }
      target.addDeploymentProcessor(SingletonExtension.SUBSYSTEM_NAME,Phase.PARSE,Phase.PARSE_SINGLETON_DEPLOYMENT,new SingletonDeploymentParsingProcessor());
      target.addDeploymentProcessor(SingletonExtension.SUBSYSTEM_NAME,Phase.DEPENDENCIES,Phase.DEPENDENCIES_SINGLETON_DEPLOYMENT,new SingletonDeploymentDependencyProcessor());
      target.addDeploymentProcessor(SingletonExtension.SUBSYSTEM_NAME,Phase.CONFIGURE_MODULE,Phase.CONFIGURE_SINGLETON_DEPLOYMENT,new SingletonDeploymentProcessor());
    }
  }
;
  context.addStep(step,OperationContext.Stage.RUNTIME);
  String defaultPolicy=DEFAULT.resolveModelAttribute(context,model).asString();
  ServiceName serviceName=DEFAULT_POLICY.getServiceName(context.getCurrentAddress());
  ServiceName targetServiceName=SingletonServiceNameFactory.SINGLETON_POLICY.getServiceName(context,defaultPolicy);
  new AliasServiceBuilder<>(serviceName,targetServiceName,SingletonPolicy.class).build(context.getServiceTarget()).install();
}
