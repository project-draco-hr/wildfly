{
  final DeploymentUnit deploymentUnit=context.getDeploymentUnit();
  final DeploymentReflectionIndex reflectionIndex=deploymentUnit.getAttachment(Attachments.REFLECTION_INDEX);
  final EJBComponentDescription ejbComponentDescription=EJBComponentDescription.class.cast(description);
  final EjbJaccConfig ejbJaccConfig=new EjbJaccConfig();
  context.getDeploymentUnit().addToAttachmentList(EjbDeploymentAttachmentKeys.JACC_PERMISSIONS,ejbJaccConfig);
  for (  final ViewConfiguration viewConfiguration : configuration.getViews()) {
    final List<Method> viewMethods=viewConfiguration.getProxyFactory().getCachedMethods();
    for (    final Method viewMethod : viewMethods) {
      if (!Modifier.isPublic(viewMethod.getModifiers()) || viewMethod.getDeclaringClass() == WriteReplaceInterface.class) {
        continue;
      }
      final EJBViewConfiguration ejbViewConfiguration=EJBViewConfiguration.class.cast(viewConfiguration);
      ApplicableMethodInformation<EJBMethodSecurityAttribute> permissions=ejbComponentDescription.getDescriptorMethodPermissions();
      boolean createdPerms=this.createPermissions(ejbJaccConfig,ejbComponentDescription,ejbViewConfiguration,viewMethod,reflectionIndex,permissions);
      if (!createdPerms) {
        permissions=ejbComponentDescription.getAnnotationMethodPermissions();
        createPermissions(ejbJaccConfig,ejbComponentDescription,ejbViewConfiguration,viewMethod,reflectionIndex,permissions);
      }
    }
  }
  Set<String> securityRoles=new HashSet<String>();
  SecurityRolesMetaData secRolesMetaData=ejbComponentDescription.getSecurityRoles();
  if (secRolesMetaData != null) {
    for (    SecurityRoleMetaData secRoleMetaData : secRolesMetaData) {
      securityRoles.add(secRoleMetaData.getRoleName());
    }
  }
  List<Map.Entry<String,Permission>> processedRoles=ejbJaccConfig.getRoles();
  for (  Map.Entry<String,Permission> entry : processedRoles) {
    securityRoles.add(entry.getKey());
  }
  securityRoles.add(ANY_AUTHENTICATED_USER_ROLE);
  Map<String,Collection<String>> securityRoleRefs=ejbComponentDescription.getSecurityRoleLinks();
  for (  Map.Entry<String,Collection<String>> entry : securityRoleRefs.entrySet()) {
    String roleName=entry.getKey();
    for (    String roleLink : entry.getValue()) {
      EJBRoleRefPermission p=new EJBRoleRefPermission(ejbComponentDescription.getEJBName(),roleName);
      ejbJaccConfig.addRole(roleLink,p);
    }
    securityRoles.remove(roleName);
  }
  Set<String> declaredRoles=ejbComponentDescription.getDeclaredRoles();
  for (  String role : declaredRoles) {
    if (!securityRoleRefs.containsKey(role)) {
      EJBRoleRefPermission p=new EJBRoleRefPermission(ejbComponentDescription.getEJBName(),role);
      ejbJaccConfig.addRole(role,p);
    }
    securityRoles.remove(role);
  }
  for (  String role : securityRoles) {
    EJBRoleRefPermission p=new EJBRoleRefPermission(ejbComponentDescription.getEJBName(),role);
    ejbJaccConfig.addRole(role,p);
  }
  if (ejbComponentDescription instanceof SessionBeanComponentDescription) {
    SessionBeanComponentDescription session=SessionBeanComponentDescription.class.cast(ejbComponentDescription);
    if (session.isStateful()) {
      EJBMethodPermission p=new EJBMethodPermission(ejbComponentDescription.getEJBName(),"getEJBObject","Home",null);
      ejbJaccConfig.addPermit(p);
    }
  }
}
