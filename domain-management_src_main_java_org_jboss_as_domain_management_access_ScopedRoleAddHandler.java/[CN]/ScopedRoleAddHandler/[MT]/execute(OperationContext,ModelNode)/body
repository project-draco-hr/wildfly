{
  PathAddress address=PathAddress.pathAddress(operation.get(OP_ADDR));
  final PathElement lastElement=address.getLastElement();
  final String roleName=lastElement.getValue();
  Set<String> standardRoles=authorizerConfiguration.getStandardRoles();
  for (  String current : standardRoles) {
    if (roleName.equalsIgnoreCase(current)) {
      throw DomainManagementLogger.ROOT_LOGGER.scopedRoleStandardName(roleName,current);
    }
  }
  Resource readResource=context.readResourceFromRoot(AUTHZ_ADDRESS,false);
  Set<String> hostScopedRoles=readResource.getChildrenNames(HOST_SCOPED_ROLE);
  for (  String current : hostScopedRoles) {
    if (roleName.equalsIgnoreCase(current)) {
      throw DomainManagementLogger.ROOT_LOGGER.duplicateScopedRole(HOST_SCOPED_ROLE,roleName);
    }
  }
  Set<String> serverGroupScopedRoles=readResource.getChildrenNames(SERVER_GROUP_SCOPED_ROLE);
  for (  String current : serverGroupScopedRoles) {
    if (roleName.equalsIgnoreCase(current)) {
      throw DomainManagementLogger.ROOT_LOGGER.duplicateScopedRole(SERVER_GROUP_SCOPED_ROLE,roleName);
    }
  }
  super.execute(context,operation);
}
