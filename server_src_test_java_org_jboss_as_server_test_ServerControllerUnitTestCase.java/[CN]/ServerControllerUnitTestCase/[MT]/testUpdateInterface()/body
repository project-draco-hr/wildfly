{
  final ModelControllerClient client=controller.createClient(Executors.newCachedThreadPool());
  final ModelNode address=new ModelNode();
  address.add("interface","other");
{
    final ModelNode operation=new ModelNode();
    operation.get(ModelDescriptionConstants.OP).set("add");
    operation.get(ModelDescriptionConstants.OP_ADDR).set(address);
    operation.get("any-address").set(true);
    executeForResult(client,operation);
    final ModelNode resource=readResource(client,operation.get(ModelDescriptionConstants.OP_ADDR));
    Assert.assertTrue(resource.get("any-address").asBoolean());
  }
{
    final ModelNode composite=new ModelNode();
    composite.get(ModelDescriptionConstants.OP).set("composite");
    composite.get(ModelDescriptionConstants.OP_ADDR).setEmptyList();
    final ModelNode one=composite.get(ModelDescriptionConstants.STEPS).add();
    one.get(ModelDescriptionConstants.OP).set("write-attribute");
    one.get(ModelDescriptionConstants.OP_ADDR).set(address);
    one.get(ModelDescriptionConstants.NAME).set("any-address");
    one.get(ModelDescriptionConstants.VALUE);
    final ModelNode two=composite.get(ModelDescriptionConstants.STEPS).add();
    two.get(ModelDescriptionConstants.OP).set("write-attribute");
    two.get(ModelDescriptionConstants.OP_ADDR).set(address);
    two.get(ModelDescriptionConstants.NAME).set("inet-address");
    two.get(ModelDescriptionConstants.VALUE).set("127.0.0.1");
    executeForResult(client,composite);
    final ModelNode resource=readResource(client,address);
    Assert.assertFalse(resource.hasDefined("any-address"));
    Assert.assertEquals("127.0.0.1",resource.get("inet-address").asString());
  }
}
