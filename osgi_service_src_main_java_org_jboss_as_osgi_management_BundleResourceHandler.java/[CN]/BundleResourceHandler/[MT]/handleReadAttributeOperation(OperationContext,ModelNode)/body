{
  String name=operation.require(ModelDescriptionConstants.NAME).asString();
  if (ModelConstants.ID.equals(name)) {
    Bundle bundle=getTargetBundle(context,operation);
    context.getResult().set(bundle.getBundleId());
  }
 else   if (ModelConstants.STARTLEVEL.equals(name)) {
    Bundle bundle=getTargetBundle(context,operation);
    BundleStartLevel bundleStartLevel=bundle.adapt(BundleStartLevel.class);
    int startlevel=bundleStartLevel.getStartLevel();
    context.getResult().set(startlevel);
  }
 else   if (ModelConstants.STATE.equals(name)) {
    Bundle bundle=getTargetBundle(context,operation);
    context.getResult().set(getBundleState(bundle));
  }
 else   if (ModelConstants.SYMBOLIC_NAME.equals(name)) {
    Bundle bundle=getTargetBundle(context,operation);
    context.getResult().set(bundle.getSymbolicName());
  }
 else   if (ModelConstants.LOCATION.equals(name)) {
    Bundle bundle=getTargetBundle(context,operation);
    context.getResult().set(bundle.getLocation());
  }
 else   if (ModelConstants.TYPE.equals(name)) {
    Bundle bundle=getTargetBundle(context,operation);
    if (bundle.getHeaders().get(Constants.FRAGMENT_HOST) != null) {
      context.getResult().set(ModelConstants.FRAGMENT);
    }
 else {
      context.getResult().set(ModelConstants.BUNDLE);
    }
  }
 else   if (ModelConstants.VERSION.equals(name)) {
    Bundle bundle=getTargetBundle(context,operation);
    context.getResult().set(bundle.getVersion().toString());
  }
  context.completeStep(OperationContext.RollbackHandler.NOOP_ROLLBACK_HANDLER);
}
