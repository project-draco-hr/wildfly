{
  final String hostName=HOST_NAME.resolveModelAttribute(context,model).asString();
  final ModelNode coordinatorURLAttribute=ENVIRONMENT_URL.resolveModelAttribute(context,model);
  String coordinatorURL=coordinatorURLAttribute.isDefined() ? coordinatorURLAttribute.asString() : null;
  if (coordinatorURL != null) {
    String[] attrs=coordinatorURL.split("/");
    boolean isIPv6Address=false;
    for (int i=0; i < attrs.length; i++) {
      if (attrs[i].startsWith("::1")) {
        attrs[i]="[" + attrs[i].substring(0,3) + "]"+ attrs[i].substring(3);
        isIPv6Address=true;
        break;
      }
    }
    if (isIPv6Address) {
      StringBuffer sb=new StringBuffer(attrs[0]);
      for (int i=1; i < attrs.length; i++) {
        sb.append('/').append(attrs[i]);
      }
      coordinatorURL=sb.toString();
    }
  }
  if (coordinatorURL != null) {
    XtsAsLogger.ROOT_LOGGER.debugf("nodeIdentifier=%s%n",coordinatorURL);
  }
  final boolean isDefaultContextPropagation=model.hasDefined(CommonAttributes.DEFAULT_CONTEXT_PROPAGATION) ? model.get(CommonAttributes.DEFAULT_CONTEXT_PROPAGATION).asBoolean() : false;
  context.addStep(new AbstractDeploymentChainStep(){
    protected void execute(    DeploymentProcessorTarget processorTarget){
      processorTarget.addDeploymentProcessor(XTSExtension.SUBSYSTEM_NAME,Phase.PARSE,Phase.PARSE_XTS_COMPONENT_INTERCEPTORS,new XTSInterceptorDeploymentProcessor());
      processorTarget.addDeploymentProcessor(XTSExtension.SUBSYSTEM_NAME,Phase.PARSE,Phase.PARSE_XTS_SOAP_HANDLERS,new XTSHandlerDeploymentProcessor());
      processorTarget.addDeploymentProcessor(XTSExtension.SUBSYSTEM_NAME,Phase.DEPENDENCIES,Phase.DEPENDENCIES_XTS,new XTSDependenciesDeploymentProcessor());
    }
  }
,OperationContext.Stage.RUNTIME);
  final ServiceTarget target=context.getServiceTarget();
  final ClassLoader loader=XTSService.class.getClassLoader();
  ServiceBuilder<Context> endpointBuilder;
  ArrayList<ServiceController<Context>> controllers=new ArrayList<ServiceController<Context>>();
  for (  ContextInfo contextInfo : contextDefinitions) {
    String contextName=contextInfo.contextPath;
    Map<String,String> map=new HashMap<String,String>();
    for (    EndpointInfo endpointInfo : contextInfo.endpointInfo) {
      map.put(endpointInfo.URLPattern,endpointInfo.SEIClassname);
    }
    endpointBuilder=EndpointPublishService.createServiceBuilder(target,contextName,loader,hostName,map);
    controllers.add(endpointBuilder.setInitialMode(Mode.ACTIVE).install());
  }
  XTSHandlersService.install(target,isDefaultContextPropagation);
  final XTSManagerService xtsService=new XTSManagerService(coordinatorURL);
  ServiceBuilder<?> xtsServiceBuilder=target.addService(XTSServices.JBOSS_XTS_MAIN,xtsService);
  xtsServiceBuilder.addDependency(TxnServices.JBOSS_TXN_ARJUNA_TRANSACTION_MANAGER);
  xtsServiceBuilder.addDependency(WSServices.CONFIG_SERVICE,ServerConfig.class,xtsService.getWSServerConfig());
  xtsServiceBuilder.addDependency(WSServices.XTS_CLIENT_INTEGRATION_SERVICE);
  for (  ServiceController<Context> controller : controllers) {
    xtsServiceBuilder.addDependency(controller.getName());
  }
  xtsServiceBuilder.setInitialMode(Mode.ACTIVE).install();
  final TxBridgeInboundRecoveryService txBridgeInboundRecoveryService=new TxBridgeInboundRecoveryService();
  ServiceBuilder<?> txBridgeInboundRecoveryServiceBuilder=target.addService(XTSServices.JBOSS_XTS_TXBRIDGE_INBOUND_RECOVERY,txBridgeInboundRecoveryService);
  txBridgeInboundRecoveryServiceBuilder.addDependency(XTSServices.JBOSS_XTS_MAIN);
  txBridgeInboundRecoveryServiceBuilder.setInitialMode(Mode.ACTIVE).install();
  final TxBridgeOutboundRecoveryService txBridgeOutboundRecoveryService=new TxBridgeOutboundRecoveryService();
  ServiceBuilder<?> txBridgeOutboundRecoveryServiceBuilder=target.addService(XTSServices.JBOSS_XTS_TXBRIDGE_OUTBOUND_RECOVERY,txBridgeOutboundRecoveryService);
  txBridgeOutboundRecoveryServiceBuilder.addDependency(XTSServices.JBOSS_XTS_MAIN);
  txBridgeOutboundRecoveryServiceBuilder.setInitialMode(Mode.ACTIVE).install();
}
