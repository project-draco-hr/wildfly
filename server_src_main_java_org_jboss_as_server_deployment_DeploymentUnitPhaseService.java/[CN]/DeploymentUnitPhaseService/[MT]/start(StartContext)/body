{
  final DeployerChains chains=deployerChainsInjector.getValue();
  final DeploymentUnit deploymentUnit=deploymentUnitInjector.getValue();
  final List<DeploymentUnitProcessor> list=chains.getChain(phase);
  final ListIterator<DeploymentUnitProcessor> iterator=list.listIterator();
  final ServiceContainer container=context.getController().getServiceContainer();
  final TrackingServiceTarget serviceTarget=new TrackingServiceTarget(container.subTarget());
  final DeploymentPhaseContext processorContext=new DeploymentPhaseContextImpl(serviceTarget,new DelegatingServiceRegistry(container),deploymentUnit,phase);
  for (  AttachedDependency attachedDependency : injectedAttachedDepenendencies) {
    final Attachable target;
    if (attachedDependency.isDeploymentUnit()) {
      target=deploymentUnit;
    }
 else {
      target=processorContext;
    }
    if (attachedDependency.getAttachmentKey() instanceof ListAttachmentKey) {
      target.addToAttachmentList((AttachmentKey)attachedDependency.getAttachmentKey(),attachedDependency.getValue().getValue());
    }
 else {
      target.putAttachment((AttachmentKey)attachedDependency.getAttachmentKey(),attachedDependency.getValue().getValue());
    }
  }
  while (iterator.hasNext()) {
    final DeploymentUnitProcessor processor=iterator.next();
    try {
      processor.deploy(processorContext);
    }
 catch (    Throwable e) {
      context.asynchronous();
      final StartException cause=new StartException(String.format("Failed to process phase %s of %s",phase,deploymentUnit),e);
      while (iterator.hasPrevious()) {
        final DeploymentUnitProcessor prev=iterator.previous();
        safeUndeploy(deploymentUnit,phase,prev);
      }
      final MultipleRemoveListener<Throwable> listener=MultipleRemoveListener.create(new MultipleRemoveListener.Callback<Throwable>(){
        public void handleDone(        final Throwable parameter){
          context.failed(cause);
        }
      }
,cause);
      for (      ServiceName serviceName : serviceTarget.getSet()) {
        final ServiceController<?> controller=container.getService(serviceName);
        if (controller != null) {
          controller.setMode(ServiceController.Mode.REMOVE);
          controller.addListener(listener);
        }
      }
      listener.done();
      return;
    }
  }
  final Phase nextPhase=phase.next();
  if (nextPhase != null) {
    final String name=deploymentUnit.getName();
    final DeploymentUnit parent=deploymentUnit.getParent();
    final ServiceName serviceName=parent == null ? Services.deploymentUnitName(name,nextPhase) : Services.deploymentUnitName(parent.getName(),name,nextPhase);
    final DeploymentUnitPhaseService<?> phaseService=DeploymentUnitPhaseService.create(nextPhase);
    final ServiceBuilder<?> phaseServiceBuilder=serviceTarget.addService(serviceName,phaseService);
    phaseServiceBuilder.addDependency(deploymentUnit.getServiceName(),DeploymentUnit.class,phaseService.getDeploymentUnitInjector());
    phaseServiceBuilder.addDependency(Services.JBOSS_DEPLOYMENT_CHAINS,DeployerChains.class,phaseService.getDeployerChainsInjector());
    phaseServiceBuilder.addDependency(context.getController().getName());
    final List<ServiceName> nextPhaseDeps=processorContext.getAttachment(Attachments.NEXT_PHASE_DEPS);
    if (nextPhaseDeps != null) {
      phaseServiceBuilder.addDependencies(nextPhaseDeps);
    }
    final List<AttachableDependency> nextPhaseAttachableDeps=processorContext.getAttachment(Attachments.NEXT_PHASE_ATTACHABLE_DEPS);
    if (nextPhaseAttachableDeps != null) {
      for (      AttachableDependency attachableDep : nextPhaseAttachableDeps) {
        AttachedDependency result=new AttachedDependency(attachableDep.getAttachmentKey(),attachableDep.isDeploymentUnit());
        phaseServiceBuilder.addDependency(attachableDep.getServiceName(),result.getValue());
        phaseService.injectedAttachedDepenendencies.add(result);
      }
    }
    if (deploymentUnit.getParent() != null) {
      phaseServiceBuilder.addDependencies(deploymentUnit.getParent().getServiceName().append(nextPhase.name()));
    }
    AttachmentList<DeploymentUnit> subdeployments=deploymentUnit.getAttachment(Attachments.SUB_DEPLOYMENTS);
    if (subdeployments != null) {
      for (      DeploymentUnit du : subdeployments) {
        phaseServiceBuilder.addDependencies(du.getServiceName().append(phase.name()));
      }
    }
    phaseServiceBuilder.install();
  }
  serviceNames=new HashSet<ServiceName>(serviceTarget.getSet());
}
