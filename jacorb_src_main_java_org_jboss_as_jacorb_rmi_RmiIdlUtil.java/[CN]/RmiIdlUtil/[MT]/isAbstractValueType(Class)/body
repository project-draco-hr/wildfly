{
  if (!type.isInterface())   return false;
  if (org.omg.CORBA.Object.class.isAssignableFrom(type))   return false;
  boolean cannotBeRemote=false;
  boolean cannotBeAbstractInterface=false;
  if (java.rmi.Remote.class.isAssignableFrom(type)) {
    cannotBeAbstractInterface=true;
  }
 else {
    cannotBeRemote=true;
  }
  Iterator methodIterator=Arrays.asList(type.getMethods()).iterator();
  while (methodIterator.hasNext()) {
    Method m=(Method)methodIterator.next();
    if (!throwsRemoteException(m)) {
      cannotBeAbstractInterface=true;
      cannotBeRemote=true;
      break;
    }
    Iterator it=Arrays.asList(m.getExceptionTypes()).iterator();
    while (it.hasNext()) {
      Class exception=(Class)it.next();
      if (!isRMIIDLExceptionType(exception)) {
        cannotBeRemote=true;
        break;
      }
    }
  }
  if (!cannotBeRemote) {
    Iterator fieldIterator=Arrays.asList(type.getFields()).iterator();
    while (fieldIterator.hasNext()) {
      Field f=(Field)fieldIterator.next();
      if (f.getType().isPrimitive())       continue;
      if (f.getType().equals(java.lang.String.class))       continue;
      cannotBeRemote=true;
      break;
    }
  }
  return cannotBeRemote && cannotBeAbstractInterface;
}
