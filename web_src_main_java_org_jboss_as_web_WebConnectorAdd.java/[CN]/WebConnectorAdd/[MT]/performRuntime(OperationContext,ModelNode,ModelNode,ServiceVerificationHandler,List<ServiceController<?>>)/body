{
  final PathAddress address=PathAddress.pathAddress(operation.get(OP_ADDR));
  final String name=address.getLastElement().getValue();
  final String bindingRef=WebConnectorDefinition.SOCKET_BINDING.resolveModelAttribute(context,operation).asString();
  ModelNode fullOperationTree=Resource.Tools.readModel(context.readResource(PathAddress.EMPTY_ADDRESS));
  final boolean enabled=WebConnectorDefinition.ENABLED.resolveModelAttribute(context,operation).asBoolean();
  final String protocol=WebConnectorDefinition.PROTOCOL.resolveModelAttribute(context,operation).asString();
  final String scheme=WebConnectorDefinition.SCHEME.resolveModelAttribute(context,operation).asString();
  final WebConnectorService service=new WebConnectorService(protocol,scheme);
  service.setSecure(WebConnectorDefinition.SECURE.resolveModelAttribute(context,operation).asBoolean());
  service.setEnableLookups(WebConnectorDefinition.ENABLE_LOOKUPS.resolveModelAttribute(context,operation).asBoolean());
  if (operation.hasDefined(PROXY_NAME)) {
    service.setProxyName(WebConnectorDefinition.PROXY_NAME.resolveModelAttribute(context,operation).asString());
  }
  if (operation.hasDefined(PROXY_PORT)) {
    service.setProxyPort(WebConnectorDefinition.PROXY_PORT.resolveModelAttribute(context,operation).asInt());
  }
  if (operation.hasDefined(REDIRECT_PORT)) {
    service.setRedirectPort(WebConnectorDefinition.REDIRECT_PORT.resolveModelAttribute(context,operation).asInt());
  }
  if (operation.hasDefined(MAX_POST_SIZE)) {
    service.setMaxPostSize(WebConnectorDefinition.MAX_POST_SIZE.resolveModelAttribute(context,operation).asInt());
  }
  if (operation.hasDefined(MAX_SAVE_POST_SIZE)) {
    service.setMaxSavePostSize(WebConnectorDefinition.MAX_SAVE_POST_SIZE.resolveModelAttribute(context,operation).asInt());
  }
  if (operation.hasDefined(MAX_CONNECTIONS)) {
    service.setMaxConnections(WebConnectorDefinition.MAX_CONNECTIONS.resolveModelAttribute(context,operation).asInt());
  }
  if (operation.hasDefined(VIRTUAL_SERVER)) {
    service.setVirtualServers(operation.get(VIRTUAL_SERVER).clone());
  }
  if (fullOperationTree.get(SSL_PATH.getKey(),SSL_PATH.getValue()).isDefined()) {
    service.setSsl(resolveExpressions(context,fullOperationTree.get(SSL_PATH.getKey(),SSL_PATH.getValue())));
  }
  final ServiceBuilder<Connector> serviceBuilder=context.getServiceTarget().addService(WebSubsystemServices.JBOSS_WEB_CONNECTOR.append(name),service).addDependency(WebSubsystemServices.JBOSS_WEB,WebServer.class,service.getServer()).addDependency(SocketBinding.JBOSS_BINDING_NAME.append(bindingRef),SocketBinding.class,service.getBinding());
  if (operation.hasDefined(EXECUTOR)) {
    String executorRef=operation.get(EXECUTOR).asString();
    serviceBuilder.addDependency(ThreadsServices.executorName(executorRef),Executor.class,service.getExecutor());
  }
  serviceBuilder.setInitialMode(enabled ? Mode.ACTIVE : Mode.NEVER);
  if (enabled) {
    serviceBuilder.addListener(verificationHandler);
  }
  final ServiceController<Connector> serviceController=serviceBuilder.install();
  if (newControllers != null) {
    newControllers.add(serviceController);
  }
}
