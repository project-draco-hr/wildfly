{
  ModelNode opAddr=operation.require(OP_ADDR);
  final PathAddress address=PathAddress.pathAddress(opAddr);
  final String name=address.getLastElement().getValue();
  final String bindingRef=operation.require(SOCKET_BINDING).asString();
  final ModelNode compensatingOperation=Util.getResourceRemoveOperation(opAddr);
  final ModelNode subModel=context.getSubModel();
  subModel.get(PROTOCOL).set(operation.get(PROTOCOL));
  subModel.get(SOCKET_BINDING).set(operation.get(SOCKET_BINDING));
  if (operation.hasDefined(SCHEME))   subModel.get(SCHEME).set(operation.get(SCHEME));
  if (operation.hasDefined(SECURE))   subModel.get(SECURE).set(operation.get(SECURE).asBoolean());
  if (operation.hasDefined(ENABLED))   subModel.get(ENABLED).set(operation.get(ENABLED).asBoolean());
  if (operation.hasDefined(ENABLE_LOOKUPS))   subModel.get(ENABLE_LOOKUPS).set(operation.get(ENABLE_LOOKUPS).asBoolean());
  if (operation.hasDefined(EXECUTOR))   subModel.get(EXECUTOR).set(operation.get(EXECUTOR).asString());
  if (operation.hasDefined(PROXY_NAME))   subModel.get(PROXY_NAME).set(operation.get(PROXY_NAME).asString());
  if (operation.hasDefined(PROXY_PORT))   subModel.get(PROXY_PORT).set(operation.get(PROXY_PORT).asInt());
  if (operation.hasDefined(REDIRECT_PORT))   subModel.get(REDIRECT_PORT).set(operation.get(REDIRECT_PORT).asInt());
  if (operation.hasDefined(MAX_POST_SIZE))   subModel.get(MAX_POST_SIZE).set(operation.get(MAX_POST_SIZE).asInt());
  if (operation.hasDefined(MAX_SAVE_POST_SIZE))   subModel.get(MAX_SAVE_POST_SIZE).set(operation.get(MAX_SAVE_POST_SIZE).asInt());
  if (context instanceof RuntimeOperationContext) {
    RuntimeOperationContext.class.cast(context).executeRuntimeTask(new RuntimeTask(){
      public void execute(      RuntimeTaskContext context,      final ResultHandler resultHandler) throws OperationFailedException {
        final boolean enabled=operation.hasDefined(ENABLED) ? operation.get(ENABLED).asBoolean() : true;
        final WebConnectorService service=new WebConnectorService(operation.require(PROTOCOL).asString(),operation.get(SCHEME).asString());
        if (operation.hasDefined(SECURE))         service.setSecure(operation.get(SECURE).asBoolean());
        if (operation.hasDefined(ENABLE_LOOKUPS))         service.setEnableLookups(operation.get(ENABLE_LOOKUPS).asBoolean());
        if (operation.hasDefined(PROXY_NAME))         service.setProxyName(operation.get(PROXY_NAME).asString());
        if (operation.hasDefined(PROXY_PORT))         service.setProxyPort(operation.get(PROXY_PORT).asInt());
        if (operation.hasDefined(REDIRECT_PORT))         service.setRedirectPort(operation.get(REDIRECT_PORT).asInt());
        if (operation.hasDefined(MAX_POST_SIZE))         service.setMaxPostSize(operation.get(MAX_POST_SIZE).asInt());
        if (operation.hasDefined(MAX_SAVE_POST_SIZE))         service.setMaxSavePostSize(operation.get(MAX_SAVE_POST_SIZE).asInt());
        final ServiceBuilder<Connector> serviceBuilder=context.getServiceTarget().addService(WebSubsystemServices.JBOSS_WEB_CONNECTOR.append(name),service).addDependency(WebSubsystemServices.JBOSS_WEB,WebServer.class,service.getServer()).addDependency(SocketBinding.JBOSS_BINDING_NAME.append(bindingRef),SocketBinding.class,service.getBinding()).setInitialMode(enabled ? Mode.ACTIVE : Mode.NEVER);
        if (enabled) {
          serviceBuilder.addListener(new ResultHandler.ServiceStartListener(resultHandler));
          serviceBuilder.install();
        }
 else {
          serviceBuilder.install();
          resultHandler.handleResultComplete();
        }
      }
    }
,resultHandler);
  }
 else {
    resultHandler.handleResultComplete();
  }
  return new BasicOperationResult(compensatingOperation);
}
