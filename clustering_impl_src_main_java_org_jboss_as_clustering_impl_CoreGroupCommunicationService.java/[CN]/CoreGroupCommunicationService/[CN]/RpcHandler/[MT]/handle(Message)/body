{
  Object body=null;
  Object retval=null;
  Object handler=null;
  boolean trace=ClusteringImplLogger.ROOT_LOGGER.isTraceEnabled();
  String service=null;
  byte[] request_bytes=null;
  if (trace) {
    ClusteringImplLogger.ROOT_LOGGER.tracef("Partition %s received msg",CoreGroupCommunicationService.this.getGroupName());
  }
  if (req == null || req.getRawBuffer() == null) {
    ClusteringImplLogger.ROOT_LOGGER.nullPartitionMessage(CoreGroupCommunicationService.this.getGroupName());
    return null;
  }
  try {
    Object wrapper=CoreGroupCommunicationService.this.objectFromByteBufferInternal(null,req.getRawBuffer(),req.getOffset(),req.getLength());
    if (wrapper == null || !(wrapper instanceof Object[])) {
      ClusteringImplLogger.ROOT_LOGGER.invalidPartitionMessageWrapper(CoreGroupCommunicationService.this.getGroupName());
      return null;
    }
    Object[] temp=(Object[])wrapper;
    service=(String)temp[0];
    request_bytes=(byte[])temp[1];
    handler=CoreGroupCommunicationService.this.rpcHandlers.get(service);
    if (handler == null) {
      if (trace) {
        ClusteringImplLogger.ROOT_LOGGER.tracef("Partition %s no rpc handler registered under service %s",CoreGroupCommunicationService.this.getGroupName(),service);
      }
      return new NoHandlerForRPC();
    }
  }
 catch (  Exception e) {
    ClusteringImplLogger.ROOT_LOGGER.partitionFailedDeserializing(e,CoreGroupCommunicationService.this.getGroupName(),req);
    return null;
  }
  ClassResolver resolver=CoreGroupCommunicationService.this.resolvers.get(service);
  if (resolver == null) {
    resolver=new SimpleClassResolver(CoreGroupCommunicationService.class.getClassLoader());
  }
  try {
    body=CoreGroupCommunicationService.this.objectFromByteBufferInternal(resolver,request_bytes,0,request_bytes.length);
  }
 catch (  Exception e) {
    ClusteringImplLogger.ROOT_LOGGER.partitionFailedExtractingMessageBody(e,CoreGroupCommunicationService.this.getGroupName());
    return null;
  }
  if (body == null || !(body instanceof MethodCall)) {
    ClusteringImplLogger.ROOT_LOGGER.invalidPartitionMessage(CoreGroupCommunicationService.this.getGroupName());
    return null;
  }
  MethodCall method_call=(MethodCall)body;
  String methodName=method_call.getName();
  if (trace) {
    ClusteringImplLogger.ROOT_LOGGER.tracef("full methodName: %s",methodName);
  }
  int idx=methodName.lastIndexOf('.');
  String handlerName=methodName.substring(0,idx);
  String newMethodName=methodName.substring(idx + 1);
  if (trace) {
    ClusteringImplLogger.ROOT_LOGGER.tracef("handlerName: %s methodName: %s",handlerName,newMethodName);
    ClusteringImplLogger.ROOT_LOGGER.tracef("Handle: %s",methodName);
  }
  method_call.setName(newMethodName);
  try {
    retval=method_call.invoke(handler);
    if (resolver != null) {
      byte[] retbytes=CoreGroupCommunicationService.this.objectToByteBufferResponseInternal(retval);
      retval=new HAServiceResponse(handlerName,retbytes);
    }
    if (trace) {
      ClusteringImplLogger.ROOT_LOGGER.tracef("rpc call return value: %s",retval);
    }
  }
 catch (  Throwable t) {
    if (trace) {
      ClusteringImplLogger.ROOT_LOGGER.tracef(t,"Partition %s rpc call threw exception",CoreGroupCommunicationService.this.getGroupName());
    }
    retval=t;
  }
  return retval;
}
