{
  if (!this.schema.since(JGroupsSchema.VERSION_3_0))   return;
  final KernelServices services=this.buildKernelServices();
  ModelNode originalSubsystemModel=services.readWholeModel().get(JGroupsSubsystemResourceDefinition.PATH.getKeyValuePair());
  ModelNode originalChannelModel=originalSubsystemModel.get(ChannelResourceDefinition.pathElement("ee").getKeyValuePair());
  ModelNode originalForkModel=originalChannelModel.get(ForkResourceDefinition.pathElement("web").getKeyValuePair());
  Assert.assertTrue(originalForkModel.isDefined());
  originalForkModel.protect();
  Assert.assertTrue(0 < originalForkModel.get(ProtocolResourceDefinition.WILDCARD_PATH.getKey()).keys().size());
  ModelNode originalStackModel=originalSubsystemModel.get(StackResourceDefinition.pathElement("maximal").getKeyValuePair());
  Assert.assertTrue(originalStackModel.isDefined());
  originalStackModel.protect();
  final PathAddress subsystemAddress=PathAddress.pathAddress(JGroupsSubsystemResourceDefinition.PATH);
  final PathAddress forkAddress=subsystemAddress.append(ChannelResourceDefinition.pathElement("ee")).append(ForkResourceDefinition.pathElement("web"));
  final PathAddress stackAddress=subsystemAddress.append(StackResourceDefinition.pathElement("maximal"));
  ModelNode add=Operations.createAddOperation(forkAddress.append(ProtocolResourceDefinition.pathElement("MERGE2")),0);
  ModelTestUtils.checkOutcome(services.executeOperation(add));
  ModelNode subsystemModel=services.readWholeModel().get(JGroupsSubsystemResourceDefinition.PATH.getKeyValuePair());
  ModelNode channelModel=subsystemModel.get(ChannelResourceDefinition.pathElement("ee").getKeyValuePair());
  ModelNode forkModel=channelModel.get(ForkResourceDefinition.pathElement("web").getKeyValuePair());
  Assert.assertEquals(originalForkModel.keys().size() + 1,forkModel.get(ProtocolResourceDefinition.WILDCARD_PATH.getKey()).keys().size());
  Assert.assertEquals("MERGE2",forkModel.get(ProtocolResourceDefinition.WILDCARD_PATH.getKey()).keys().iterator().next());
  ModelNode remove=Util.createRemoveOperation(stackAddress.append(ProtocolResourceDefinition.pathElement("FD")));
  ModelTestUtils.checkOutcome(services.executeOperation(remove));
  add=Operations.createAddOperation(stackAddress.append(ProtocolResourceDefinition.pathElement("FD")),3);
  ModelTestUtils.checkOutcome(services.executeOperation(add));
  subsystemModel=services.readWholeModel().get(JGroupsSubsystemResourceDefinition.PATH.getKeyValuePair());
  ModelNode stackModel=subsystemModel.get(StackResourceDefinition.pathElement("maximal").getKeyValuePair());
  Assert.assertEquals(originalStackModel,stackModel);
}
