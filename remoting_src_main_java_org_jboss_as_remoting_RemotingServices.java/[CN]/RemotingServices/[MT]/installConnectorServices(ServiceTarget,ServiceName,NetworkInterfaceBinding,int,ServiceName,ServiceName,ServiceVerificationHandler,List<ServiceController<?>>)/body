{
  RealmAuthenticationProviderService raps=new RealmAuthenticationProviderService();
  ServiceBuilder<?> builder=serviceTarget.addService(AUTHENTICATION_PROVIDER,raps);
  if (securityRealmName != null) {
    builder.addDependency(securityRealmName,SecurityRealm.class,raps.getSecurityRealmInjectedValue());
  }
  if (serverCallbackService != null) {
    builder.addDependency(serverCallbackService,CallbackHandler.class,raps.getServerCallbackValue());
  }
  builder.setInitialMode(ON_DEMAND).install();
  RealmOptionMapService roms=new RealmOptionMapService();
  serviceTarget.addService(OPTION_MAP,roms).addDependency(AUTHENTICATION_PROVIDER,RealmAuthenticationProvider.class,roms.getRealmAuthenticationProviderInjectedValue()).setInitialMode(ON_DEMAND).install();
  if (networkInterfaceBindingName != null) {
    final InjectedNetworkBindingStreamServerService streamServerService=new InjectedNetworkBindingStreamServerService(port);
    builder=serviceTarget.addService(RemotingServices.serverServiceName(MANAGEMENT_CHANNEL,port),streamServerService).addDependency(AUTHENTICATION_PROVIDER,ServerAuthenticationProvider.class,streamServerService.getAuthenticationProviderInjector()).addDependency(OPTION_MAP,OptionMap.class,streamServerService.getOptionMapInjectedValue()).addDependency(RemotingServices.ENDPOINT,Endpoint.class,streamServerService.getEndpointInjector()).addDependency(networkInterfaceBindingName,NetworkInterfaceBinding.class,streamServerService.getInterfaceBindingInjector()).setInitialMode(ACTIVE);
    addController(newControllers,verificationHandler,builder);
  }
 else {
    final NetworkBindingStreamServerService streamServerService=new NetworkBindingStreamServerService(networkInterfaceBinding,port);
    builder=serviceTarget.addService(RemotingServices.serverServiceName(MANAGEMENT_CHANNEL,port),streamServerService).addDependency(AUTHENTICATION_PROVIDER,ServerAuthenticationProvider.class,streamServerService.getAuthenticationProviderInjector()).addDependency(OPTION_MAP,OptionMap.class,streamServerService.getOptionMapInjectedValue()).addDependency(RemotingServices.ENDPOINT,Endpoint.class,streamServerService.getEndpointInjector()).setInitialMode(ACTIVE);
    addController(newControllers,verificationHandler,builder);
  }
}
