{
  StartLevel startLevel=injectedStartLevel.getValue();
  int bundleStartLevel=startLevel.getBundleStartLevel(bundle);
  if (bundleStartLevel > startLevel.getStartLevel()) {
    LOGGER.debugf("Start level [%d] not valid for: %s",bundleStartLevel,bundle);
    return;
  }
  LOGGER.infoActivateDeferredModulePhase(bundle);
  ServiceTracker<Object> serviceTracker=new ServiceTracker<Object>("DeferredActivation"){
    private final AtomicInteger count=new AtomicInteger();
    @Override public void serviceListenerAdded(    ServiceController<? extends Object> controller){
      LOGGER.debugf("Added: [%d] %s ",count.incrementAndGet(),controller.getName());
    }
    @Override protected void serviceStarted(    ServiceController<?> controller){
      LOGGER.debugf("Started: [%d] %s ",count.decrementAndGet(),controller.getName());
    }
    @Override protected void serviceStartFailed(    ServiceController<?> controller){
      LOGGER.debugf("Failed: [%d] %s ",count.decrementAndGet(),controller.getName());
    }
    @Override protected void complete(){
      LOGGER.debugf("Complete: [%d]",count.get());
    }
  }
;
  phaseService.addListener(Inheritance.ALL,serviceTracker);
  if (!bundle.isResolved()) {
    XEnvironment env=injectedEnvironment.getValue();
    XResolver resolver=injectedResolver.getValue();
    XResolveContext context=resolver.createResolveContext(env,Collections.singleton(bundle.getBundleRevision()),null);
    try {
      resolver.resolveAndApply(context);
    }
 catch (    ResolutionException ex) {
      phaseService.removeListener(serviceTracker);
      throw FrameworkMessages.MESSAGES.cannotResolveBundle(ex,bundle);
    }
  }
  depUnit.getAttachment(Attachments.DEFERRED_ACTIVATION_COUNT).incrementAndGet();
  phaseService.setMode(Mode.ACTIVE);
  try {
    serviceTracker.awaitCompletion();
  }
 catch (  InterruptedException ex) {
  }
  if (serviceTracker.hasFailedServices()) {
    StartException startex=null;
    for (    ServiceController<?> aux : serviceTracker.getFailedServices()) {
      if (aux.getStartException() != null) {
        startex=aux.getStartException();
        break;
      }
    }
    BundleException failure;
    if (startex != null && startex.getCause() instanceof BundleException) {
      failure=(BundleException)startex.getCause();
    }
 else {
      failure=MESSAGES.cannotActivateDeferredModulePhase(startex,bundle);
    }
    LOGGER.warnDeactivateDeferredModulePhase(bundle);
    phaseService.setMode(Mode.NEVER);
    try {
      FutureServiceValue<Phase> future=new FutureServiceValue<Phase>(phaseService,State.DOWN);
      future.get(30,TimeUnit.SECONDS);
    }
 catch (    ExecutionException ex) {
      LOGGER.errorf(failure,failure.getMessage());
      throw MESSAGES.cannotDeactivateDeferredModulePhase(ex,bundle);
    }
catch (    TimeoutException ex) {
      LOGGER.errorf(failure,failure.getMessage());
      throw MESSAGES.cannotDeactivateDeferredModulePhase(ex,bundle);
    }
    throw failure;
  }
}
