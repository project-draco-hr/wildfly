{
  BundleStartLevel bundleStartLevel=bundle.adapt(BundleStartLevel.class);
  int startlevel=bundleStartLevel.getStartLevel();
  if (startlevel > bundleStartLevel.getStartLevel()) {
    LOGGER.debugf("Start level [%d] not valid for: %s",startlevel,bundle);
    return;
  }
  LOGGER.infoActivateDeferredModulePhase(bundle);
  if (!bundle.isResolved()) {
    XEnvironment env=injectedEnvironment.getValue();
    XResolver resolver=injectedResolver.getValue();
    XResolveContext context=resolver.createResolveContext(env,Collections.singleton(bundle.getBundleRevision()),null);
    try {
      resolver.resolveAndApply(context);
    }
 catch (    ResolutionException ex) {
      throw new BundleException(FrameworkMessages.MESSAGES.cannotResolveBundle(bundle),BundleException.RESOLVE_ERROR,ex);
    }
  }
  depUnit.getAttachment(Attachments.DEFERRED_ACTIVATION_COUNT).incrementAndGet();
  phaseService.setMode(Mode.ACTIVE);
  final StabilityMonitor monitor=new StabilityMonitor();
  monitor.addController(phaseService);
  final Set<ServiceController<?>> failed=new HashSet<ServiceController<?>>();
  try {
    monitor.awaitStability(failed,null);
  }
 catch (  final InterruptedException ex) {
  }
 finally {
    monitor.removeController(phaseService);
  }
  if (failed.size() > 0) {
    StartException startex=null;
    for (    ServiceController<?> aux : failed) {
      if (aux.getStartException() != null) {
        startex=aux.getStartException();
        break;
      }
    }
    BundleException failure;
    if (startex != null && startex.getCause() instanceof BundleException) {
      failure=(BundleException)startex.getCause();
    }
 else {
      failure=MESSAGES.cannotActivateDeferredModulePhase(startex,bundle);
    }
    LOGGER.warnDeactivateDeferredModulePhase(bundle);
    phaseService.setMode(Mode.NEVER);
    try {
      FutureServiceValue<Phase> future=new FutureServiceValue<Phase>(phaseService,State.DOWN);
      future.get(30,TimeUnit.SECONDS);
    }
 catch (    ExecutionException ex) {
      LOGGER.errorf(failure,failure.getMessage());
      throw MESSAGES.cannotDeactivateDeferredModulePhase(ex,bundle);
    }
catch (    TimeoutException ex) {
      LOGGER.errorf(failure,failure.getMessage());
      throw MESSAGES.cannotDeactivateDeferredModulePhase(ex,bundle);
    }
    throw failure;
  }
}
