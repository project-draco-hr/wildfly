{
  final ServiceTarget serviceTarget=phaseContext.getServiceTarget();
  final Module module=deploymentUnit.getAttachment(org.jboss.as.server.deployment.Attachments.MODULE);
  final ClassLoader classLoader=module.getClassLoader();
  final DeploymentReflectionIndex deploymentReflectionIndex=deploymentUnit.getAttachment(org.jboss.as.server.deployment.Attachments.REFLECTION_INDEX);
  final ComponentFactory componentFactory=componentConfiguration.getComponentFactory();
  final String beanName=componentConfiguration.getName();
  final Class<?> beanClass;
  try {
    beanClass=classLoader.loadClass(componentConfiguration.getBeanClass());
  }
 catch (  ClassNotFoundException e) {
    throw new DeploymentUnitProcessingException("Failed to load component class",e);
  }
  final ResourceInjectionResolver resolver=componentFactory.getResourceInjectionResolver();
  final List<ResourceInjection> injections=new ArrayList<ResourceInjection>(componentConfiguration.getResourceInjectionConfigs().size());
  final Set<ResourceInjectionResolver.ResolverDependency<?>> resourceDependencies=new HashSet<ResourceInjectionResolver.ResolverDependency<?>>();
  processInjections(deploymentUnit,serviceTarget,componentConfiguration,beanName,beanClass,resolver,injections,resourceDependencies);
  final List<ComponentLifecycle> postConstructLifecycles=processPostConstructs(componentConfiguration,classLoader);
  final List<ComponentLifecycle> preDestroyLifecycles=processPreDestroys(componentConfiguration,classLoader);
  final Map<Method,InterceptorFactory> methodInterceptorFactories=processInterceptors(deploymentUnit,serviceTarget,componentConfiguration,classLoader,beanName,beanClass,resolver,resourceDependencies,deploymentReflectionIndex);
  final ComponentFactory.ConstructedComponent constructedComponent=componentFactory.createComponent(deploymentUnit,beanName,beanClass,classLoader,injections,postConstructLifecycles,preDestroyLifecycles,methodInterceptorFactories);
  final ServiceName beanEnvContextServiceName=constructedComponent.getEnvContextServiceName().append(beanName);
  final ContextService actualBeanContext=new ContextService(beanName);
  serviceTarget.addService(beanEnvContextServiceName,actualBeanContext).addDependency(constructedComponent.getEnvContextServiceName(),Context.class,actualBeanContext.getParentContextInjector()).install();
  final ServiceName bindContextServiceName=constructedComponent.getBindContextServiceName();
  final Reference componentFactoryReference=ServiceReferenceObjectFactory.createReference(constructedComponent.getComponentServiceName(),ComponentObjectFactory.class);
  final ResourceBinder<Reference> factoryBinder=new ResourceBinder<Reference>(constructedComponent.getBindName(),Values.immediateValue(componentFactoryReference));
  final ServiceName referenceBinderName=bindContextServiceName.append(constructedComponent.getBindName());
  serviceTarget.addService(referenceBinderName,factoryBinder).addDependency(bindContextServiceName,Context.class,factoryBinder.getContextInjector()).setInitialMode(ServiceController.Mode.ON_DEMAND).install();
  final ComponentService componentService=new ComponentService(constructedComponent.getComponent());
  final ServiceBuilder<?> serviceBuilder=serviceTarget.addService(constructedComponent.getComponentServiceName(),componentService).addDependency(referenceBinderName).addDependency(constructedComponent.getCompContextServiceName(),Context.class,componentService.getCompContextInjector()).addDependency(constructedComponent.getModuleContextServiceName(),Context.class,componentService.getModuleContextInjector()).addDependency(constructedComponent.getAppContextServiceName(),Context.class,componentService.getAppContextInjector()).setInitialMode(ServiceController.Mode.ACTIVE);
  for (  ResourceInjectionResolver.ResolverDependency<?> resolverDependency : resourceDependencies) {
    addDependency(serviceBuilder,resolverDependency);
  }
  serviceBuilder.install();
}
