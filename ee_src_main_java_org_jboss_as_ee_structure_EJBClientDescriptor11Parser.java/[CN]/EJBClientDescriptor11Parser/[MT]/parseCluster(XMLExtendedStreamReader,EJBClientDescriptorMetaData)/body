{
  final Set<Attribute> required=EnumSet.of(Attribute.NAME);
  final int count=reader.getAttributeCount();
  String clusterName=null;
  String clusterNodeSelector=null;
  long connectTimeout=5000;
  long maxAllowedConnectedNodes=10;
  String userName=null;
  String securityRealm=null;
  for (int i=0; i < count; i++) {
    final Attribute attribute=Attribute.of(reader.getAttributeName(i));
    required.remove(attribute);
switch (attribute) {
case NAME:
      clusterName=reader.getAttributeValue(i).trim();
    break;
case CONNECT_TIMEOUT:
  connectTimeout=reader.getLongAttributeValue(i);
break;
case CLUSTER_NODE_SELECTOR:
clusterNodeSelector=reader.getAttributeValue(i).trim();
break;
case MAX_ALLOWED_CONNECTED_NODES:
maxAllowedConnectedNodes=reader.getLongAttributeValue(i);
break;
case USERNAME:
userName=reader.getAttributeValue(i).trim();
break;
case SECURITY_REALM:
securityRealm=reader.getAttributeValue(i).trim();
break;
default :
unexpectedContent(reader);
}
}
if (!required.isEmpty()) {
missingAttributes(reader.getLocation(),required);
}
final EJBClientDescriptorMetaData.ClusterConfig clusterConfig=ejbClientDescriptorMetaData.newClusterConfig(clusterName);
clusterConfig.setConnectTimeout(connectTimeout);
clusterConfig.setNodeSelector(clusterNodeSelector);
clusterConfig.setMaxAllowedConnectedNodes(maxAllowedConnectedNodes);
clusterConfig.setSecurityRealm(securityRealm);
clusterConfig.setUserName(userName);
while (reader.hasNext()) {
switch (reader.nextTag()) {
case END_ELEMENT:
{
return;
}
case START_ELEMENT:
{
final Element element=Element.of(reader.getName());
switch (element) {
case CONNECTION_CREATION_OPTIONS:
final Properties connectionCreationOptions=this.parseConnectionCreationOptions(reader);
clusterConfig.setConnectionOptions(connectionCreationOptions);
break;
case CHANNEL_CREATION_OPTIONS:
final Properties channelCreationOptions=this.parseChannelCreationOptions(reader);
clusterConfig.setChannelCreationOptions(channelCreationOptions);
break;
case NODE:
this.parseClusterNode(reader,clusterConfig);
break;
default :
this.unexpectedElement(reader);
}
break;
}
default :
{
unexpectedContent(reader);
}
}
}
unexpectedEndOfDocument(reader.getLocation());
}
