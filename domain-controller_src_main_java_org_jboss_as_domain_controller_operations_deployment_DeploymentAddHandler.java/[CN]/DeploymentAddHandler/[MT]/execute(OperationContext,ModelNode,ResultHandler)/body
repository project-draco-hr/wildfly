{
  validator.validate(operation);
  ModelNode opAddr=operation.get(OP_ADDR);
  PathAddress address=PathAddress.pathAddress(opAddr);
  String name=address.getLastElement().getValue();
  String runtimeName=operation.hasDefined(RUNTIME_NAME) ? operation.get(RUNTIME_NAME).asString() : name;
  byte[] hash=null;
  final ModelNode content=operation.require(CONTENT).clone();
  final ModelNode contentItemNode=content.require(0);
  if (contentItemNode.hasDefined(HASH)) {
    managedContentValidator.validate(contentItemNode);
    hash=contentItemNode.require(HASH).asBytes();
    if (!contentRepository.hasContent(hash))     throw createFailureException("No deployment content with hash %s is available in the deployment content repository.",HashUtil.bytesToHexString(hash));
  }
 else   if (hasValidContentAdditionParameterDefined(contentItemNode)) {
    if (!isMaster) {
      throw createFailureException("A slave domain controller cannot accept deployment content uploads");
    }
    InputStream in=getInputStream(context,contentItemNode);
    try {
      try {
        hash=contentRepository.addContent(in);
      }
 catch (      IOException e) {
        throw createFailureException(e.toString());
      }
    }
  finally {
      StreamUtils.safeClose(in);
    }
    contentItemNode.get(HASH).set(hash);
  }
 else {
    unmanagedContentValidator.validate(contentItemNode);
  }
  ModelNode subModel=context.getSubModel();
  subModel.get(NAME).set(name);
  subModel.get(RUNTIME_NAME).set(runtimeName);
  subModel.get(CONTENT).set(content);
  resultHandler.handleResultComplete();
  return new BasicOperationResult(Util.getResourceRemoveOperation(operation.get(OP_ADDR)));
}
