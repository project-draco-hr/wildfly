{
  validator.validate(operation);
  ModelNode opAddr=operation.get(OP_ADDR);
  PathAddress address=PathAddress.pathAddress(opAddr);
  String name=address.getLastElement().getValue();
  String runtimeName=operation.hasDefined(RUNTIME_NAME) ? operation.get(RUNTIME_NAME).asString() : name;
  byte[] hash;
  if (tooManyDeploymentParametersDefined(operation)) {
    throw createFailureException("Only allowed one of the following parameters is allowed %s.",VALID_DEPLOYMENT_PARAMETERS);
  }
 else   if (operation.hasDefined(HASH)) {
    hash=operation.get(HASH).asBytes();
  }
 else   if (hasValidDeploymentParameterDefined(operation)) {
    if (!isMaster) {
      throw createFailureException("A slave domain controller cannot accept deployment content uploads");
    }
    try {
      hash=DeploymentUploadUtil.storeDeploymentContent(context,operation,contentRepository);
    }
 catch (    IOException e) {
      throw createFailureException(e.toString());
    }
  }
 else {
    throw createFailureException("None of the following parameters were defined %s.",VALID_DEPLOYMENT_PARAMETERS);
  }
  if (!isMaster || contentRepository.hasContent(hash)) {
    ModelNode subModel=context.getSubModel();
    subModel.get(NAME).set(name);
    subModel.get(RUNTIME_NAME).set(runtimeName);
    subModel.get(HASH).set(hash);
  }
 else {
    throw createFailureException("No deployment content with hash %s is available in the deployment content repository.",HashUtil.bytesToHexString(hash));
  }
  resultHandler.handleResultComplete();
  return new BasicOperationResult(Util.getResourceRemoveOperation(operation.get(OP_ADDR)));
}
