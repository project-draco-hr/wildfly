{
  ClassLoader old=WildFlySecurityManager.getCurrentContextClassLoaderPrivileged();
  try {
    if (sslContext != null) {
      ThreadLocalSSLSocketFactory.setSSLSocketFactory(sslContext.getSocketFactory());
      WildFlySecurityManager.setCurrentContextClassLoaderPrivileged(ThreadLocalSSLSocketFactory.class);
      properties.put("java.naming.ldap.factory.socket",ThreadLocalSSLSocketFactory.class.getName());
    }
    if (SECURITY_LOGGER.isTraceEnabled()) {
      Hashtable<String,String> logProperties;
      if (properties.containsKey(Context.SECURITY_CREDENTIALS)) {
        logProperties=new Hashtable<String,String>(properties);
        logProperties.put(Context.SECURITY_CREDENTIALS,"***");
      }
 else {
        logProperties=properties;
      }
      SECURITY_LOGGER.tracef("Connecting to LDAP with properties (%s)",logProperties.toString());
    }
    return new InitialDirContext(properties);
  }
  finally {
    if (sslContext != null) {
      ThreadLocalSSLSocketFactory.removeSSLSocketFactory();
    }
    WildFlySecurityManager.setCurrentContextClassLoaderPrivileged(old);
  }
}
