{
  final ServerElement serverElement=hostModel.getServer(serverName);
  if (serverElement == null) {
    throw new IllegalArgumentException("Host model does not contain a server named '" + serverName + "'");
  }
  final String serverGroupName=serverElement.getServerGroup();
  final ServerGroupElement serverGroup=domainModel.getServerGroup(serverGroupName);
  if (serverGroup == null) {
    throw new IllegalArgumentException("Domain model does not contain a server group named '" + serverGroupName + "'");
  }
  final String profileName=serverGroup.getProfileName();
  final ProfileElement leafProfile=domainModel.getProfile(profileName);
  if (profileName == null) {
    throw new IllegalArgumentException("Domain model does not contain a profile named '" + profileName + "'");
  }
  list.add(new ServerNameUpdate(serverName));
  final Set<String> extensionNames=new LinkedHashSet<String>();
  for (  String name : domainModel.getExtensions()) {
    extensionNames.add(name);
  }
  for (  String name : hostModel.getExtensions()) {
    extensionNames.add(name);
  }
  for (  String name : extensionNames) {
    list.add(new ServerExtensionAdd(name));
  }
  final Set<String> unspecifiedPaths=new HashSet<String>();
  final Map<String,ServerPathAdd> paths=new HashMap<String,ServerPathAdd>();
  for (  final PathElement path : domainModel.getPaths()) {
    if (!path.isSpecified()) {
      unspecifiedPaths.add(path.getName());
    }
 else {
      paths.put(path.getName(),new ServerPathAdd(path));
    }
  }
  for (  final PathElement path : hostModel.getPaths()) {
    unspecifiedPaths.remove(path.getName());
    paths.put(path.getName(),new ServerPathAdd(path));
  }
  for (  final PathElement path : serverElement.getPaths()) {
    unspecifiedPaths.remove(path.getName());
    paths.put(path.getName(),new ServerPathAdd(path));
  }
  if (unspecifiedPaths.size() > 0) {
    throw new IllegalStateException("unspecified paths " + unspecifiedPaths);
  }
  Set<String> unspecifiedInterfaces=new HashSet<String>();
  Map<String,InterfaceElement> interfaces=new HashMap<String,InterfaceElement>();
  for (  InterfaceElement ie : domainModel.getInterfaces()) {
    if (ie.isFullySpecified()) {
      interfaces.put(ie.getName(),ie);
    }
 else {
      unspecifiedInterfaces.add(ie.getName());
    }
  }
  for (  InterfaceElement ie : hostModel.getInterfaces()) {
    interfaces.put(ie.getName(),ie);
    unspecifiedInterfaces.remove(ie.getName());
  }
  for (  InterfaceElement ie : serverElement.getInterfaces()) {
    interfaces.put(ie.getName(),ie);
    unspecifiedInterfaces.remove(ie.getName());
  }
  for (  InterfaceElement interfaceElement : interfaces.values()) {
    list.add(new ServerModelInterfaceAdd(new InterfaceAdd(interfaceElement)));
  }
  String bindingRef=serverElement.getSocketBindingGroupName();
  int portOffset=serverElement.getSocketBindingPortOffset();
  if (bindingRef == null) {
    bindingRef=serverGroup.getSocketBindingGroupName();
    portOffset=serverGroup.getSocketBindingPortOffset();
  }
  list.add(new ServerPortOffsetUpdate(portOffset));
  SocketBindingGroupElement domainBindings=domainModel.getSocketBindingGroup(bindingRef);
  if (domainBindings == null) {
    domainBindings=new SocketBindingGroupElement("domainBindings");
  }
  list.add(new ServerSocketBindingGroupUpdate(new SocketBindingGroupUpdate(domainBindings.getName(),domainBindings.getDefaultInterface(),Collections.<String>emptySet())));
  processSocketBindings(domainBindings,list);
  for (  final String socketInclude : domainBindings.getIncludedSocketBindingGroups()) {
    final SocketBindingGroupElement include=domainModel.getSocketBindingGroup(socketInclude);
    if (include == null) {
      throw new IllegalStateException("failed to resolve binding-group " + socketInclude);
    }
    processSocketBindings(include,list);
  }
  list.add(new ServerProfileUpdate(serverGroup.getProfileName()));
  Set<String> processedSubsystems=new HashSet<String>();
  Set<String> processedProfiles=new HashSet<String>();
  processProfile(domainModel,leafProfile,list,processedProfiles,processedSubsystems);
  for (  ServerGroupDeploymentElement element : serverGroup.getDeployments()) {
    final ServerModelDeploymentAdd add=new ServerModelDeploymentAdd(element.getUniqueName(),element.getRuntimeName(),element.getSha1Hash());
    list.add(add);
    if (element.isStart()) {
      list.add(new ServerModelDeploymentStartUpdate(element.getUniqueName(),element.getRuntimeName(),element.getSha1Hash()));
    }
  }
}
