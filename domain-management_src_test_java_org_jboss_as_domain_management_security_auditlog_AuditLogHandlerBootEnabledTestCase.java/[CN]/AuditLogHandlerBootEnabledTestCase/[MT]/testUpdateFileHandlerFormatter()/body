{
  File file=new File(logDir,"test-file.log");
  String fullRecord=readFullFileRecord(file);
  Assert.assertTrue(Pattern.matches("\\d\\d\\d\\d-\\d\\d-\\d\\d \\d\\d:\\d\\d:\\d\\d - \\{[\\s\\S]*",fullRecord));
  file.delete();
  ModelNode op=Util.getWriteAttributeOperation(createFileHandlerAddress("test-file"),FileAuditLogHandlerResourceDefinition.FORMATTER.getName(),new ModelNode("non-existant"));
  executeForFailure(op);
  fullRecord=readFullFileRecord(file);
  Assert.assertTrue(Pattern.matches("\\d\\d\\d\\d-\\d\\d-\\d\\d \\d\\d:\\d\\d:\\d\\d - \\{[\\s\\S]*",fullRecord));
  ModelNode record=ModelNode.fromJSONString(fullRecord.substring(fullRecord.indexOf('{')));
  ModelNode loggedOp=checkBootRecordHeader(record,1,"core",false,false,false).get(0);
  checkOpsEqual(op,loggedOp);
  op=Util.createAddOperation(createJsonFormatterAddress("compact-formatter"));
  op.get(JsonAuditLogFormatterResourceDefinition.COMPACT.getName()).set(true);
  op.get(JsonAuditLogFormatterResourceDefinition.DATE_FORMAT.getName()).set("yyyy/MM/dd HH-mm-ss");
  op.get(JsonAuditLogFormatterResourceDefinition.DATE_SEPARATOR.getName()).set(" xxx ");
  executeForResult(op);
  op=Util.createAddOperation(createJsonFormatterAddress("escaped-formatter"));
  op.get(JsonAuditLogFormatterResourceDefinition.INCLUDE_DATE.getName()).set(false);
  op.get(JsonAuditLogFormatterResourceDefinition.ESCAPE_NEW_LINE.getName()).set(true);
  executeForResult(op);
  file.delete();
  op=Util.getWriteAttributeOperation(createFileHandlerAddress("test-file"),FileAuditLogHandlerResourceDefinition.FORMATTER.getName(),new ModelNode("compact-formatter"));
  executeForResult(op);
  fullRecord=readFullFileRecord(file);
  Assert.assertTrue(Pattern.matches("\\d\\d\\d\\d/\\d\\d/\\d\\d \\d\\d-\\d\\d-\\d\\d xxx \\{.*",fullRecord));
  record=ModelNode.fromJSONString(fullRecord.substring(fullRecord.indexOf('{')));
  loggedOp=checkBootRecordHeader(record,1,"core",false,false,true).get(0);
  checkOpsEqual(op,loggedOp);
  file.delete();
  op=Util.getWriteAttributeOperation(createFileHandlerAddress("test-file"),FileAuditLogHandlerResourceDefinition.FORMATTER.getName(),new ModelNode("escaped-formatter"));
  executeForResult(op);
  fullRecord=readFullFileRecord(file);
  Assert.assertTrue(Pattern.matches("\\{.*",fullRecord));
  Assert.assertTrue(fullRecord.indexOf("#012") > 0);
  record=ModelNode.fromJSONString(fullRecord.substring(fullRecord.indexOf('{')).replace("#012",""));
  loggedOp=checkBootRecordHeader(record,1,"core",false,false,true).get(0);
  checkOpsEqual(op,loggedOp);
  file.delete();
  op=Util.createRemoveOperation(createJsonFormatterAddress("escaped-formatter"));
  executeForFailure(op);
  op=Util.createRemoveOperation(createJsonFormatterAddress("compact-formatter"));
  executeForResult(op);
  file.delete();
  op=Util.getWriteAttributeOperation(createJsonFormatterAddress("escaped-formatter"),JsonAuditLogFormatterResourceDefinition.ESCAPE_NEW_LINE.getName(),new ModelNode(false));
  executeForResult(op);
  fullRecord=readFullFileRecord(file);
  Assert.assertTrue(Pattern.matches("\\{[\\s\\S]*",fullRecord));
  Assert.assertTrue(fullRecord.indexOf("#012") == -1);
  record=ModelNode.fromJSONString(fullRecord.substring(fullRecord.indexOf('{')));
  loggedOp=checkBootRecordHeader(record,1,"core",false,false,true).get(0);
  checkOpsEqual(op,loggedOp);
  file.delete();
  op=Util.getWriteAttributeOperation(createJsonFormatterAddress("escaped-formatter"),JsonAuditLogFormatterResourceDefinition.COMPACT.getName(),new ModelNode(true));
  executeForResult(op);
  fullRecord=readFullFileRecord(file);
  Assert.assertTrue(Pattern.matches("\\{.*",fullRecord));
  Assert.assertTrue(fullRecord.indexOf("#012") == -1);
  record=ModelNode.fromJSONString(fullRecord.substring(fullRecord.indexOf('{')));
  loggedOp=checkBootRecordHeader(record,1,"core",false,false,true).get(0);
  checkOpsEqual(op,loggedOp);
  op=Util.getWriteAttributeOperation(createJsonFormatterAddress("escaped-formatter"),JsonAuditLogFormatterResourceDefinition.INCLUDE_DATE.getName(),new ModelNode(true));
  executeForResult(op);
  op=Util.getWriteAttributeOperation(createJsonFormatterAddress("escaped-formatter"),JsonAuditLogFormatterResourceDefinition.DATE_FORMAT.getName(),new ModelNode("yyyy/MM/dd HH-mm-ss"));
  executeForResult(op);
  file.delete();
  op=Util.getWriteAttributeOperation(createJsonFormatterAddress("escaped-formatter"),JsonAuditLogFormatterResourceDefinition.DATE_SEPARATOR.getName(),new ModelNode(" xxx "));
  executeForResult(op);
  fullRecord=readFullFileRecord(file);
  Assert.assertTrue(Pattern.matches("\\d\\d\\d\\d/\\d\\d/\\d\\d \\d\\d-\\d\\d-\\d\\d xxx \\{.*",fullRecord));
  record=ModelNode.fromJSONString(fullRecord.substring(fullRecord.indexOf('{')));
  loggedOp=checkBootRecordHeader(record,1,"core",false,false,true).get(0);
  checkOpsEqual(op,loggedOp);
}
