{
  super(componentConfiguration,ejbJarConfiguration);
  final SessionBeanComponentDescription sessionBeanComponentDescription=(SessionBeanComponentDescription)componentConfiguration.getComponentDescription();
  this.beanLevelLockType=sessionBeanComponentDescription.getBeanLevelLockType();
  Map<MethodIdentifier,LockType> methodLocks=sessionBeanComponentDescription.getMethodApplicableLockTypes();
  if (methodLocks == null) {
    this.methodApplicableLockTypes=Collections.emptyMap();
  }
 else {
    final Map<EJBBusinessMethod,LockType> locks=new HashMap();
    for (    Map.Entry<MethodIdentifier,LockType> entry : methodLocks.entrySet()) {
      final MethodIdentifier ejbMethodDescription=entry.getKey();
      final EJBBusinessMethod ejbMethod=this.getEJBBusinessMethod(ejbMethodDescription);
      locks.put(ejbMethod,entry.getValue());
    }
    this.methodApplicableLockTypes=Collections.unmodifiableMap(locks);
  }
  this.beanLevelAccessTimeout=sessionBeanComponentDescription.getBeanLevelAccessTimeout();
  final Map<MethodIdentifier,AccessTimeout> methodAccessTimeouts=sessionBeanComponentDescription.getMethodApplicableAccessTimeouts();
  if (methodAccessTimeouts == null) {
    this.methodApplicableAccessTimeouts=Collections.emptyMap();
  }
 else {
    final Map<EJBBusinessMethod,AccessTimeout> accessTimeouts=new HashMap();
    for (    Map.Entry<MethodIdentifier,AccessTimeout> entry : methodAccessTimeouts.entrySet()) {
      final MethodIdentifier ejbMethodDescription=entry.getKey();
      final EJBBusinessMethod ejbMethod=this.getEJBBusinessMethod(ejbMethodDescription);
      accessTimeouts.put(ejbMethod,entry.getValue());
    }
    this.methodApplicableAccessTimeouts=Collections.unmodifiableMap(accessTimeouts);
  }
}
