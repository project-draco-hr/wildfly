{
  final Map<InjectionTarget,ResourceInjectionConfiguration> mergedInjections=new HashMap<InjectionTarget,ResourceInjectionConfiguration>();
  if (classDescription != null && !metadataComplete) {
    mergedInjections.putAll(classDescription.getInjectionConfigurations());
  }
  mergedInjections.putAll(moduleDescription.getResourceInjections(clazz.getName()));
  mergedInjections.putAll(description.getResourceInjections(clazz.getName()));
  for (  final ResourceInjectionConfiguration injectionConfiguration : mergedInjections.values()) {
    if (!moduleDescription.isAppClient() && injectionConfiguration.getTarget().isStatic(context.getDeploymentUnit())) {
      SERVER_DEPLOYMENT_LOGGER.ignoringStaticInjectionTarget(injectionConfiguration.getTarget());
      continue;
    }
    final Object valueContextKey=new Object();
    final InjectedValue<ManagedReferenceFactory> managedReferenceFactoryValue=new InjectedValue<ManagedReferenceFactory>();
    configuration.getStartDependencies().add(new InjectedConfigurator(injectionConfiguration,configuration,context,managedReferenceFactoryValue));
    injectors.addFirst(injectionConfiguration.getTarget().createInjectionInterceptorFactory(instanceKey,valueContextKey,managedReferenceFactoryValue,context.getDeploymentUnit(),injectionConfiguration.isOptional()));
    uninjectors.addLast(new ManagedReferenceReleaseInterceptorFactory(valueContextKey));
  }
}
