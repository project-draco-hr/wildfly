{
  final DeploymentUnit deploymentUnit=context.getDeploymentUnit();
  final DeploymentReflectionIndex deploymentReflectionIndex=deploymentUnit.getAttachment(REFLECTION_INDEX);
  final Object instanceKey=BasicComponentInstance.INSTANCE_KEY;
  final Module module=deploymentUnit.getAttachment(org.jboss.as.server.deployment.Attachments.MODULE);
  final EEApplicationClasses applicationClasses=deploymentUnit.getAttachment(Attachments.EE_APPLICATION_CLASSES_DESCRIPTION);
  final EEModuleDescription moduleDescription=deploymentUnit.getAttachment(Attachments.EE_MODULE_DESCRIPTION);
  final ProxyMetadataSource proxyReflectionIndex=deploymentUnit.getAttachment(org.jboss.as.server.deployment.Attachments.PROXY_REFLECTION_INDEX);
  final DeploymentClassIndex classIndex=deploymentUnit.getAttachment(org.jboss.as.server.deployment.Attachments.CLASS_INDEX);
  final boolean metadataComplete=MetadataCompleteMarker.isMetadataComplete(deploymentUnit);
  final Deque<InterceptorFactory> instantiators=new ArrayDeque<InterceptorFactory>();
  final Deque<InterceptorFactory> injectors=new ArrayDeque<InterceptorFactory>();
  final Deque<InterceptorFactory> uninjectors=new ArrayDeque<InterceptorFactory>();
  final Deque<InterceptorFactory> destructors=new ArrayDeque<InterceptorFactory>();
  final ClassReflectionIndex<?> componentClassIndex=deploymentReflectionIndex.getClassIndex(configuration.getComponentClass());
  final List<InterceptorFactory> componentUserAroundInvoke=new ArrayList<InterceptorFactory>();
  final List<InterceptorFactory> componentUserAroundTimeout;
  final Map<String,List<InterceptorFactory>> userAroundInvokesByInterceptorClass=new HashMap<String,List<InterceptorFactory>>();
  final Map<String,List<InterceptorFactory>> userAroundTimeoutsByInterceptorClass;
  final Map<String,List<InterceptorFactory>> userPrePassivatesByInterceptorClass;
  final Map<String,List<InterceptorFactory>> userPostActivatesByInterceptorClass;
  final Map<String,List<InterceptorFactory>> userPostConstructByInterceptorClass=new HashMap<String,List<InterceptorFactory>>();
  final Map<String,List<InterceptorFactory>> userPreDestroyByInterceptorClass=new HashMap<String,List<InterceptorFactory>>();
  final Set<MethodIdentifier> timeoutMethods=description.getTimerMethods();
  if (description.isTimerServiceRequired()) {
    componentUserAroundTimeout=new ArrayList<InterceptorFactory>();
    userAroundTimeoutsByInterceptorClass=new HashMap<String,List<InterceptorFactory>>();
  }
 else {
    componentUserAroundTimeout=null;
    userAroundTimeoutsByInterceptorClass=null;
  }
  if (description.isPassivationApplicable()) {
    userPrePassivatesByInterceptorClass=new HashMap<String,List<InterceptorFactory>>();
    userPostActivatesByInterceptorClass=new HashMap<String,List<InterceptorFactory>>();
  }
 else {
    userPrePassivatesByInterceptorClass=null;
    userPostActivatesByInterceptorClass=null;
  }
  final ManagedReferenceFactory instanceFactory=configuration.getInstanceFactory();
  if (instanceFactory != null) {
    instantiators.addFirst(new ManagedReferenceInterceptorFactory(instanceFactory,instanceKey));
  }
 else {
    final Constructor<Object> constructor=(Constructor<Object>)componentClassIndex.getConstructor(EMPTY_CLASS_ARRAY);
    if (constructor == null) {
      throw MESSAGES.defaultConstructorNotFound(configuration.getComponentClass());
    }
    ValueManagedReferenceFactory factory=new ValueManagedReferenceFactory(new ConstructedValue<Object>(constructor,Collections.<Value<?>>emptyList()));
    instantiators.addFirst(new ManagedReferenceInterceptorFactory(factory,instanceKey));
  }
  destructors.addLast(new ManagedReferenceReleaseInterceptorFactory(instanceKey));
  new ClassDescriptionTraversal(configuration.getComponentClass(),applicationClasses){
    @Override public void handle(    Class<?> clazz,    EEModuleClassDescription classDescription) throws DeploymentUnitProcessingException {
      mergeInjectionsForClass(clazz,configuration.getComponentClass(),classDescription,moduleDescription,deploymentReflectionIndex,description,configuration,context,injectors,instanceKey,uninjectors,metadataComplete);
    }
  }
.run();
  final List<InterceptorDescription> interceptorWithLifecycleCallbacks=new ArrayList<InterceptorDescription>();
  if (!description.isExcludeDefaultInterceptors()) {
    interceptorWithLifecycleCallbacks.addAll(description.getDefaultInterceptors());
  }
  interceptorWithLifecycleCallbacks.addAll(description.getClassInterceptors());
  for (  final InterceptorDescription interceptorDescription : description.getAllInterceptors()) {
    final String interceptorClassName=interceptorDescription.getInterceptorClassName();
    final ClassIndex interceptorClass;
    try {
      interceptorClass=classIndex.classIndex(interceptorClassName);
    }
 catch (    ClassNotFoundException e) {
      throw MESSAGES.cannotLoadInterceptor(e,interceptorClassName);
    }
    final InterceptorEnvironment interceptorEnvironment=moduleDescription.getInterceptorEnvironment().get(interceptorClassName);
    if (interceptorEnvironment != null) {
      description.getBindingConfigurations().addAll(interceptorEnvironment.getBindingConfigurations());
      for (      final ResourceInjectionConfiguration injection : interceptorEnvironment.getResourceInjections()) {
        description.addResourceInjection(injection);
      }
    }
    final Object contextKey=interceptorClass.getModuleClass();
    configuration.getInterceptorContextKeys().add(contextKey);
    final ClassReflectionIndex<?> interceptorIndex=deploymentReflectionIndex.getClassIndex(interceptorClass.getModuleClass());
    final Constructor<?> constructor=interceptorIndex.getConstructor(EMPTY_CLASS_ARRAY);
    if (constructor == null) {
      throw MESSAGES.defaultConstructorNotFoundOnComponent(interceptorClassName,configuration.getComponentClass());
    }
    instantiators.addFirst(new ManagedReferenceInterceptorFactory(new ValueManagedReferenceFactory(new ConstructedValue(constructor,Collections.<Value<?>>emptyList())),contextKey));
    destructors.addLast(new ManagedReferenceReleaseInterceptorFactory(contextKey));
    final boolean interceptorHasLifecycleCallbacks=interceptorWithLifecycleCallbacks.contains(interceptorDescription);
    new ClassDescriptionTraversal(interceptorClass.getModuleClass(),applicationClasses){
      @Override public void handle(      final Class<?> clazz,      EEModuleClassDescription classDescription) throws DeploymentUnitProcessingException {
        mergeInjectionsForClass(clazz,interceptorClass.getModuleClass(),classDescription,moduleDescription,deploymentReflectionIndex,description,configuration,context,injectors,contextKey,uninjectors,metadataComplete);
        final InterceptorClassDescription interceptorConfig;
        if (classDescription != null && !metadataComplete) {
          interceptorConfig=InterceptorClassDescription.merge(classDescription.getInterceptorClassDescription(),moduleDescription.getInterceptorClassOverride(clazz.getName()));
        }
 else {
          interceptorConfig=InterceptorClassDescription.merge(null,moduleDescription.getInterceptorClassOverride(clazz.getName()));
        }
        if (interceptorHasLifecycleCallbacks) {
          final MethodIdentifier postConstructMethodIdentifier=interceptorConfig.getPostConstruct();
          handleInterceptorClass(clazz,postConstructMethodIdentifier,userPostConstructByInterceptorClass,true,true);
          final MethodIdentifier preDestroyMethodIdentifier=interceptorConfig.getPreDestroy();
          handleInterceptorClass(clazz,preDestroyMethodIdentifier,userPreDestroyByInterceptorClass,true,true);
        }
        final MethodIdentifier aroundInvokeMethodIdentifier=interceptorConfig.getAroundInvoke();
        handleInterceptorClass(clazz,aroundInvokeMethodIdentifier,userAroundInvokesByInterceptorClass,false,false);
        if (description.isTimerServiceRequired()) {
          final MethodIdentifier aroundTimeoutMethodIdentifier=interceptorConfig.getAroundTimeout();
          handleInterceptorClass(clazz,aroundTimeoutMethodIdentifier,userAroundTimeoutsByInterceptorClass,false,false);
        }
        if (description.isPassivationApplicable()) {
          handleInterceptorClass(clazz,interceptorConfig.getPrePassivate(),userPrePassivatesByInterceptorClass,false,false);
          handleInterceptorClass(clazz,interceptorConfig.getPostActivate(),userPostActivatesByInterceptorClass,false,false);
        }
      }
      private void handleInterceptorClass(      final Class<?> clazz,      final MethodIdentifier methodIdentifier,      final Map<String,List<InterceptorFactory>> classMap,      final boolean changeMethod,      final boolean lifecycleMethod) throws DeploymentUnitProcessingException {
        if (methodIdentifier != null) {
          final Method method=ClassReflectionIndexUtil.findRequiredMethod(deploymentReflectionIndex,clazz,methodIdentifier);
          if (isNotOverriden(clazz,method,interceptorClass.getModuleClass(),deploymentReflectionIndex)) {
            final InterceptorFactory interceptorFactory=new ManagedReferenceLifecycleMethodInterceptorFactory(contextKey,method,changeMethod,lifecycleMethod);
            List<InterceptorFactory> factories=classMap.get(interceptorClassName);
            if (factories == null) {
              classMap.put(interceptorClassName,factories=new ArrayList<InterceptorFactory>());
            }
            factories.add(interceptorFactory);
          }
        }
      }
    }
.run();
  }
  final List<InterceptorFactory> userPostConstruct=new ArrayList<InterceptorFactory>();
  final List<InterceptorFactory> userPreDestroy=new ArrayList<InterceptorFactory>();
  final List<InterceptorFactory> userPrePassivate=new ArrayList<InterceptorFactory>();
  final List<InterceptorFactory> userPostActivate=new ArrayList<InterceptorFactory>();
  for (  final InterceptorDescription interceptorClass : interceptorWithLifecycleCallbacks) {
    if (userPostConstructByInterceptorClass.containsKey(interceptorClass.getInterceptorClassName())) {
      userPostConstruct.addAll(userPostConstructByInterceptorClass.get(interceptorClass.getInterceptorClassName()));
    }
    if (userPreDestroyByInterceptorClass.containsKey(interceptorClass.getInterceptorClassName())) {
      userPreDestroy.addAll(userPreDestroyByInterceptorClass.get(interceptorClass.getInterceptorClassName()));
    }
    if (description.isPassivationApplicable()) {
      if (userPrePassivatesByInterceptorClass.containsKey(interceptorClass.getInterceptorClassName())) {
        userPrePassivate.addAll(userPrePassivatesByInterceptorClass.get(interceptorClass.getInterceptorClassName()));
      }
      if (userPostActivatesByInterceptorClass.containsKey(interceptorClass.getInterceptorClassName())) {
        userPostActivate.addAll(userPostActivatesByInterceptorClass.get(interceptorClass.getInterceptorClassName()));
      }
    }
  }
  new ClassDescriptionTraversal(configuration.getComponentClass(),applicationClasses){
    @Override public void handle(    final Class<?> clazz,    EEModuleClassDescription classDescription) throws DeploymentUnitProcessingException {
      final InterceptorClassDescription interceptorConfig=InterceptorClassDescription.merge(mergeInterceptorConfig(clazz,classDescription,description,metadataComplete),moduleDescription.getInterceptorClassOverride(clazz.getName()));
      handleClassMethod(clazz,interceptorConfig.getPostConstruct(),userPostConstruct,true,true);
      handleClassMethod(clazz,interceptorConfig.getPreDestroy(),userPreDestroy,true,true);
      handleClassMethod(clazz,interceptorConfig.getAroundInvoke(),componentUserAroundInvoke,false,false);
      if (description.isTimerServiceRequired()) {
        handleClassMethod(clazz,interceptorConfig.getAroundTimeout(),componentUserAroundTimeout,false,false);
      }
      if (description.isPassivationApplicable()) {
        handleClassMethod(clazz,interceptorConfig.getPrePassivate(),userPrePassivate,false,false);
        handleClassMethod(clazz,interceptorConfig.getPostActivate(),userPostActivate,false,false);
      }
    }
    private void handleClassMethod(    final Class<?> clazz,    final MethodIdentifier methodIdentifier,    final List<InterceptorFactory> interceptors,    boolean changeMethod,    boolean lifecycleMethod) throws DeploymentUnitProcessingException {
      if (methodIdentifier != null) {
        final Method method=ClassReflectionIndexUtil.findRequiredMethod(deploymentReflectionIndex,clazz,methodIdentifier);
        if (isNotOverriden(clazz,method,componentClassIndex.getIndexedClass(),deploymentReflectionIndex)) {
          InterceptorFactory interceptorFactory=new ManagedReferenceLifecycleMethodInterceptorFactory(instanceKey,method,changeMethod,lifecycleMethod);
          interceptors.add(interceptorFactory);
        }
      }
    }
  }
.run();
  final InterceptorFactory tcclInterceptor=new ImmediateInterceptorFactory(new TCCLInterceptor(module.getClassLoader()));
  if (!injectors.isEmpty()) {
    configuration.addPostConstructInterceptor(weaved(injectors),InterceptorOrder.ComponentPostConstruct.RESOURCE_INJECTION_INTERCEPTORS);
  }
  if (!instantiators.isEmpty()) {
    configuration.addPostConstructInterceptor(weaved(instantiators),InterceptorOrder.ComponentPostConstruct.INSTANTIATION_INTERCEPTORS);
  }
  if (!userPostConstruct.isEmpty()) {
    configuration.addPostConstructInterceptor(weaved(userPostConstruct),InterceptorOrder.ComponentPostConstruct.USER_INTERCEPTORS);
  }
  configuration.addPostConstructInterceptor(Interceptors.getTerminalInterceptorFactory(),InterceptorOrder.ComponentPostConstruct.TERMINAL_INTERCEPTOR);
  configuration.addPostConstructInterceptor(tcclInterceptor,InterceptorOrder.ComponentPostConstruct.TCCL_INTERCEPTOR);
  if (!uninjectors.isEmpty()) {
    configuration.addPreDestroyInterceptor(weaved(uninjectors),InterceptorOrder.ComponentPreDestroy.UNINJECTION_INTERCEPTORS);
  }
  if (!destructors.isEmpty()) {
    configuration.addPreDestroyInterceptor(weaved(destructors),InterceptorOrder.ComponentPreDestroy.DESTRUCTION_INTERCEPTORS);
  }
  if (!userPreDestroy.isEmpty()) {
    configuration.addPreDestroyInterceptor(weaved(userPreDestroy),InterceptorOrder.ComponentPreDestroy.USER_INTERCEPTORS);
  }
  configuration.addPreDestroyInterceptor(Interceptors.getTerminalInterceptorFactory(),InterceptorOrder.ComponentPreDestroy.TERMINAL_INTERCEPTOR);
  configuration.addPreDestroyInterceptor(tcclInterceptor,InterceptorOrder.ComponentPreDestroy.TCCL_INTERCEPTOR);
  if (description.isPassivationApplicable()) {
    if (!userPrePassivate.isEmpty()) {
      configuration.addPrePassivateInterceptor(weaved(userPrePassivate),InterceptorOrder.ComponentPassivation.USER_INTERCEPTORS);
    }
    configuration.addPrePassivateInterceptor(Interceptors.getTerminalInterceptorFactory(),InterceptorOrder.ComponentPassivation.TERMINAL_INTERCEPTOR);
    configuration.addPrePassivateInterceptor(tcclInterceptor,InterceptorOrder.ComponentPassivation.TCCL_INTERCEPTOR);
    if (!userPostActivate.isEmpty()) {
      configuration.addPostActivateInterceptor(weaved(userPostActivate),InterceptorOrder.ComponentPassivation.USER_INTERCEPTORS);
    }
    configuration.addPostActivateInterceptor(Interceptors.getTerminalInterceptorFactory(),InterceptorOrder.ComponentPassivation.TERMINAL_INTERCEPTOR);
    configuration.addPostActivateInterceptor(tcclInterceptor,InterceptorOrder.ComponentPassivation.TCCL_INTERCEPTOR);
  }
  final List<InterceptorDescription> classInterceptors=description.getClassInterceptors();
  final Map<MethodIdentifier,List<InterceptorDescription>> methodInterceptors=description.getMethodInterceptors();
  if (description.isIntercepted()) {
    for (    final Method method : configuration.getDefinedComponentMethods()) {
      configuration.addComponentInterceptor(method,Interceptors.getInitialInterceptorFactory(),InterceptorOrder.Component.INITIAL_INTERCEPTOR);
      configuration.addComponentInterceptor(method,new ManagedReferenceMethodInterceptorFactory(instanceKey,method),InterceptorOrder.Component.TERMINAL_INTERCEPTOR);
      final MethodIdentifier identifier=MethodIdentifier.getIdentifier(method.getReturnType(),method.getName(),method.getParameterTypes());
      final List<InterceptorFactory> userAroundInvokes=new ArrayList<InterceptorFactory>();
      final List<InterceptorFactory> userAroundTimeouts=new ArrayList<InterceptorFactory>();
      final List<InterceptorFactory> userComponentAroundInvokes=new ArrayList<InterceptorFactory>();
      final List<InterceptorFactory> userComponentAroundTimeouts=new ArrayList<InterceptorFactory>();
      final boolean requiresTimerChain=description.isTimerServiceRequired() && timeoutMethods.contains(identifier);
      if (!description.isExcludeDefaultInterceptors() && !description.isExcludeDefaultInterceptors(identifier)) {
        for (        InterceptorDescription interceptorDescription : description.getDefaultInterceptors()) {
          String interceptorClassName=interceptorDescription.getInterceptorClassName();
          List<InterceptorFactory> aroundInvokes=userAroundInvokesByInterceptorClass.get(interceptorClassName);
          if (aroundInvokes != null) {
            userAroundInvokes.addAll(aroundInvokes);
          }
          if (requiresTimerChain) {
            List<InterceptorFactory> aroundTimeouts=userAroundTimeoutsByInterceptorClass.get(interceptorClassName);
            if (aroundTimeouts != null) {
              userAroundTimeouts.addAll(aroundTimeouts);
            }
          }
        }
      }
      if (!description.isExcludeClassInterceptors(identifier)) {
        for (        InterceptorDescription interceptorDescription : classInterceptors) {
          String interceptorClassName=interceptorDescription.getInterceptorClassName();
          List<InterceptorFactory> aroundInvokes=userAroundInvokesByInterceptorClass.get(interceptorClassName);
          if (aroundInvokes != null) {
            userAroundInvokes.addAll(aroundInvokes);
          }
          if (requiresTimerChain) {
            List<InterceptorFactory> aroundTimeouts=userAroundTimeoutsByInterceptorClass.get(interceptorClassName);
            if (aroundTimeouts != null) {
              userAroundTimeouts.addAll(aroundTimeouts);
            }
          }
        }
      }
      List<InterceptorDescription> methodLevelInterceptors=methodInterceptors.get(identifier);
      if (methodLevelInterceptors != null) {
        for (        InterceptorDescription methodLevelInterceptor : methodLevelInterceptors) {
          String interceptorClassName=methodLevelInterceptor.getInterceptorClassName();
          List<InterceptorFactory> aroundInvokes=userAroundInvokesByInterceptorClass.get(interceptorClassName);
          if (aroundInvokes != null) {
            userAroundInvokes.addAll(aroundInvokes);
          }
          if (requiresTimerChain) {
            List<InterceptorFactory> aroundTimeouts=userAroundTimeoutsByInterceptorClass.get(interceptorClassName);
            if (aroundTimeouts != null) {
              userAroundTimeouts.addAll(aroundTimeouts);
            }
          }
        }
      }
      userComponentAroundInvokes.addAll(componentUserAroundInvoke);
      if (componentUserAroundTimeout != null && requiresTimerChain) {
        userComponentAroundTimeouts.addAll(componentUserAroundTimeout);
      }
      configuration.addComponentInterceptor(method,new UserInterceptorFactory(weaved(userAroundInvokes),weaved(userAroundTimeouts)),InterceptorOrder.Component.USER_INTERCEPTORS);
      configuration.addComponentInterceptor(method,new UserInterceptorFactory(weaved(userComponentAroundInvokes),weaved(userComponentAroundTimeouts)),InterceptorOrder.Component.USER_COMPONENT_INTERCEPTORS);
    }
  }
  for (  ViewDescription view : description.getViews()) {
    Class<?> viewClass;
    try {
      viewClass=module.getClassLoader().loadClass(view.getViewClassName());
    }
 catch (    ClassNotFoundException e) {
      throw MESSAGES.cannotLoadViewClass(e,view.getViewClassName(),configuration);
    }
    final ViewConfiguration viewConfiguration;
    final ProxyConfiguration proxyConfiguration=new ProxyConfiguration();
    if (viewClass.getName().startsWith("java.")) {
      proxyConfiguration.setProxyName("org.jboss.proxy.java.lang." + viewClass.getSimpleName() + "$$$view"+ PROXY_ID.incrementAndGet());
    }
 else {
      proxyConfiguration.setProxyName(viewClass.getName() + "$$$view" + PROXY_ID.incrementAndGet());
    }
    proxyConfiguration.setClassLoader(module.getClassLoader());
    proxyConfiguration.setProtectionDomain(viewClass.getProtectionDomain());
    proxyConfiguration.setMetadataSource(proxyReflectionIndex);
    if (view.isSerializable()) {
      proxyConfiguration.addAdditionalInterface(Serializable.class);
      if (view.isUseWriteReplace()) {
        proxyConfiguration.addAdditionalInterface(WriteReplaceInterface.class);
      }
    }
    if (viewClass.isInterface()) {
      proxyConfiguration.setSuperClass(Object.class);
      proxyConfiguration.addAdditionalInterface(viewClass);
      viewConfiguration=view.createViewConfiguration(viewClass,configuration,new ProxyFactory(proxyConfiguration));
    }
 else {
      proxyConfiguration.setSuperClass(viewClass);
      viewConfiguration=view.createViewConfiguration(viewClass,configuration,new ProxyFactory(proxyConfiguration));
    }
    for (    final ViewConfigurator configurator : view.getConfigurators()) {
      configurator.configure(context,configuration,view,viewConfiguration);
    }
    configuration.getViews().add(viewConfiguration);
  }
  configuration.getStartDependencies().add(new DependencyConfigurator<ComponentStartService>(){
    @Override public void configureDependency(    final ServiceBuilder<?> serviceBuilder,    ComponentStartService service) throws DeploymentUnitProcessingException {
      for (      final Map.Entry<ServiceName,ServiceBuilder.DependencyType> entry : description.getDependencies().entrySet()) {
        serviceBuilder.addDependency(entry.getValue(),entry.getKey());
      }
    }
  }
);
}
