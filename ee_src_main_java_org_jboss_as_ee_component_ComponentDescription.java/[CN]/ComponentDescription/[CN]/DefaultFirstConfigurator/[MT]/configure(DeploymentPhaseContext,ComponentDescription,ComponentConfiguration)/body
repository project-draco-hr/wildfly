{
  final DeploymentUnit deploymentUnit=context.getDeploymentUnit();
  final DeploymentReflectionIndex deploymentReflectionIndex=deploymentUnit.getAttachment(REFLECTION_INDEX);
  final Object instanceKey=BasicComponentInstance.INSTANCE_KEY;
  final Module module=deploymentUnit.getAttachment(org.jboss.as.server.deployment.Attachments.MODULE);
  final EEApplicationClasses applicationClasses=deploymentUnit.getAttachment(Attachments.EE_APPLICATION_CLASSES_DESCRIPTION);
  final EEModuleDescription moduleDescription=deploymentUnit.getAttachment(Attachments.EE_MODULE_DESCRIPTION);
  final ProxyMetadataSource proxyReflectionIndex=deploymentUnit.getAttachment(org.jboss.as.server.deployment.Attachments.PROXY_REFLECTION_INDEX);
  final DeploymentClassIndex classIndex=deploymentUnit.getAttachment(org.jboss.as.server.deployment.Attachments.CLASS_INDEX);
  final Deque<InterceptorFactory> instantiators=new ArrayDeque<InterceptorFactory>();
  final Deque<InterceptorFactory> injectors=new ArrayDeque<InterceptorFactory>();
  final Deque<InterceptorFactory> uninjectors=new ArrayDeque<InterceptorFactory>();
  final Deque<InterceptorFactory> destructors=new ArrayDeque<InterceptorFactory>();
  final ClassReflectionIndex<?> componentClassIndex=deploymentReflectionIndex.getClassIndex(configuration.getComponentClass());
  final List<InterceptorFactory> componentUserAroundInvoke=new ArrayList<InterceptorFactory>();
  final List<InterceptorFactory> componentUserAroundTimeout;
  final Map<String,List<InterceptorFactory>> userAroundInvokesByInterceptorClass=new HashMap<String,List<InterceptorFactory>>();
  final Map<String,List<InterceptorFactory>> userAroundTimeoutsByInterceptorClass;
  final Map<String,List<InterceptorFactory>> userPostConstructByInterceptorClass=new HashMap<String,List<InterceptorFactory>>();
  final Map<String,List<InterceptorFactory>> userPreDestroyByInterceptorClass=new HashMap<String,List<InterceptorFactory>>();
  if (description.isTimerServiceApplicable()) {
    componentUserAroundTimeout=new ArrayList<InterceptorFactory>();
    userAroundTimeoutsByInterceptorClass=new HashMap<String,List<InterceptorFactory>>();
  }
 else {
    componentUserAroundTimeout=null;
    userAroundTimeoutsByInterceptorClass=null;
  }
  final ManagedReferenceFactory instanceFactory=configuration.getInstanceFactory();
  if (instanceFactory != null) {
    instantiators.addFirst(new ManagedReferenceInterceptorFactory(instanceFactory,instanceKey));
  }
 else {
    final Constructor<Object> constructor=(Constructor<Object>)componentClassIndex.getConstructor(EMPTY_CLASS_ARRAY);
    if (constructor == null) {
      throw new DeploymentUnitProcessingException("Could not find default constructor for " + configuration.getComponentClass());
    }
    ValueManagedReferenceFactory factory=new ValueManagedReferenceFactory(new ConstructedValue<Object>(constructor,Collections.<Value<?>>emptyList()));
    instantiators.addFirst(new ManagedReferenceInterceptorFactory(factory,instanceKey));
  }
  destructors.addLast(new ManagedReferenceReleaseInterceptorFactory(instanceKey));
  new ClassDescriptionTraversal(configuration.getComponentClass(),applicationClasses){
    @Override public void handle(    Class<?> clazz,    EEModuleClassConfiguration classConfiguration,    EEModuleClassDescription classDescription) throws DeploymentUnitProcessingException {
      if (classConfiguration == null) {
        return;
      }
      for (      final ResourceInjectionConfiguration injectionConfiguration : classConfiguration.getInjectionConfigurations()) {
        final Object valueContextKey=new Object();
        final InjectedValue<ManagedReferenceFactory> managedReferenceFactoryValue=new InjectedValue<ManagedReferenceFactory>();
        configuration.getStartDependencies().add(new InjectedConfigurator(injectionConfiguration,configuration,context,managedReferenceFactoryValue));
        injectors.addFirst(injectionConfiguration.getTarget().createInjectionInterceptorFactory(instanceKey,valueContextKey,managedReferenceFactoryValue,deploymentUnit));
        uninjectors.addLast(new ManagedReferenceReleaseInterceptorFactory(valueContextKey));
      }
    }
  }
.run();
  final List<InterceptorDescription> interceptorWithLifecycleCallbacks=new ArrayList<InterceptorDescription>();
  if (!description.isExcludeDefaultInterceptors()) {
    interceptorWithLifecycleCallbacks.addAll(description.getDefaultInterceptors());
  }
  interceptorWithLifecycleCallbacks.addAll(description.getClassInterceptors());
  for (  final InterceptorDescription interceptorDescription : description.getAllInterceptors()) {
    final String interceptorClassName=interceptorDescription.getInterceptorClassName();
    final ClassIndex interceptorClass;
    try {
      interceptorClass=classIndex.classIndex(interceptorClassName);
    }
 catch (    ClassNotFoundException e) {
      throw new RuntimeException("Could not load interceptor class " + interceptorClassName,e);
    }
    final Object contextKey=interceptorClass.getModuleClass();
    final ClassReflectionIndex<?> interceptorIndex=deploymentReflectionIndex.getClassIndex(interceptorClass.getModuleClass());
    final Constructor<?> constructor=interceptorIndex.getConstructor(EMPTY_CLASS_ARRAY);
    if (constructor == null) {
      throw new DeploymentUnitProcessingException("No default constructor for interceptor class " + interceptorClassName + " on component "+ configuration.getComponentClass());
    }
    instantiators.addFirst(new ManagedReferenceInterceptorFactory(new ValueManagedReferenceFactory(new ConstructedValue(constructor,Collections.<Value<?>>emptyList())),contextKey));
    destructors.addLast(new ManagedReferenceReleaseInterceptorFactory(contextKey));
    final boolean interceptorHasLifecycleCallbacks=interceptorWithLifecycleCallbacks.contains(interceptorDescription);
    new ClassDescriptionTraversal(interceptorClass.getModuleClass(),applicationClasses){
      @Override public void handle(      final Class<?> clazz,      EEModuleClassConfiguration interceptorClassConfiguration,      EEModuleClassDescription classDescription) throws DeploymentUnitProcessingException {
        final ClassReflectionIndex<?> interceptorClassIndex=deploymentReflectionIndex.getClassIndex(clazz);
        if (interceptorClassConfiguration != null) {
          for (          final ResourceInjectionConfiguration injectionConfiguration : interceptorClassConfiguration.getInjectionConfigurations()) {
            final Object valueContextKey=new Object();
            final InjectedValue<ManagedReferenceFactory> managedReferenceFactoryValue=new InjectedValue<ManagedReferenceFactory>();
            configuration.getStartDependencies().add(new InjectedConfigurator(injectionConfiguration,configuration,context,managedReferenceFactoryValue));
            injectors.addFirst(injectionConfiguration.getTarget().createInjectionInterceptorFactory(contextKey,valueContextKey,managedReferenceFactoryValue,deploymentUnit));
            uninjectors.addLast(new ManagedReferenceReleaseInterceptorFactory(valueContextKey));
          }
        }
        final InterceptorClassDescription interceptorConfig;
        if (classDescription != null) {
          interceptorConfig=InterceptorClassDescription.merge(classDescription.getInterceptorClassDescription(),moduleDescription.getInterceptorClassOverride(clazz.getName()));
        }
 else {
          interceptorConfig=InterceptorClassDescription.merge(null,moduleDescription.getInterceptorClassOverride(clazz.getName()));
        }
        if (interceptorHasLifecycleCallbacks) {
          final MethodIdentifier postConstructMethodIdentifier=interceptorConfig.getPostConstruct();
          if (postConstructMethodIdentifier != null) {
            final Method method=ClassReflectionIndexUtil.findRequiredMethod(deploymentReflectionIndex,interceptorClassIndex,postConstructMethodIdentifier);
            if (isNotOverriden(clazz,method,interceptorIndex,deploymentReflectionIndex)) {
              InterceptorFactory interceptorFactory=new ManagedReferenceLifecycleMethodInterceptorFactory(contextKey,method,true,true);
              List<InterceptorFactory> userPostConstruct=userPostConstructByInterceptorClass.get(interceptorClassName);
              if (userPostConstruct == null) {
                userPostConstructByInterceptorClass.put(interceptorClassName,userPostConstruct=new ArrayList<InterceptorFactory>());
              }
              userPostConstruct.add(interceptorFactory);
            }
          }
          final MethodIdentifier preDestroyMethodIdentifier=interceptorConfig.getPreDestroy();
          if (preDestroyMethodIdentifier != null) {
            final Method method=ClassReflectionIndexUtil.findRequiredMethod(deploymentReflectionIndex,interceptorClassIndex,preDestroyMethodIdentifier);
            if (isNotOverriden(clazz,method,interceptorIndex,deploymentReflectionIndex)) {
              InterceptorFactory interceptorFactory=new ManagedReferenceLifecycleMethodInterceptorFactory(contextKey,method,true,true);
              List<InterceptorFactory> userPreDestroy=userPreDestroyByInterceptorClass.get(interceptorClassName);
              if (userPreDestroy == null) {
                userPreDestroyByInterceptorClass.put(interceptorClassName,userPreDestroy=new ArrayList<InterceptorFactory>());
              }
              userPreDestroy.add(interceptorFactory);
            }
          }
        }
        final MethodIdentifier aroundInvokeMethodIdentifier=interceptorConfig.getAroundInvoke();
        if (aroundInvokeMethodIdentifier != null) {
          final Method method=ClassReflectionIndexUtil.findRequiredMethod(deploymentReflectionIndex,interceptorClassIndex,aroundInvokeMethodIdentifier);
          if (isNotOverriden(clazz,method,interceptorIndex,deploymentReflectionIndex)) {
            List<InterceptorFactory> interceptors;
            if ((interceptors=userAroundInvokesByInterceptorClass.get(interceptorClassName)) == null) {
              userAroundInvokesByInterceptorClass.put(interceptorClassName,interceptors=new ArrayList<InterceptorFactory>());
            }
            interceptors.add(new ManagedReferenceLifecycleMethodInterceptorFactory(contextKey,method,false));
          }
        }
        if (description.isTimerServiceApplicable()) {
          final MethodIdentifier aroundTimeoutMethodIdentifier=interceptorConfig.getAroundTimeout();
          if (aroundTimeoutMethodIdentifier != null) {
            final Method method=ClassReflectionIndexUtil.findRequiredMethod(deploymentReflectionIndex,interceptorClassIndex,aroundTimeoutMethodIdentifier);
            if (isNotOverriden(clazz,method,interceptorIndex,deploymentReflectionIndex)) {
              List<InterceptorFactory> interceptors;
              if ((interceptors=userAroundTimeoutsByInterceptorClass.get(interceptorClassName)) == null) {
                userAroundTimeoutsByInterceptorClass.put(interceptorClassName,interceptors=new ArrayList<InterceptorFactory>());
              }
              interceptors.add(new ManagedReferenceLifecycleMethodInterceptorFactory(contextKey,method,false));
            }
          }
        }
      }
    }
.run();
  }
  final Deque<InterceptorFactory> userPostConstruct=new ArrayDeque<InterceptorFactory>();
  final Deque<InterceptorFactory> userPreDestroy=new ArrayDeque<InterceptorFactory>();
  for (  final InterceptorDescription interceptorClass : interceptorWithLifecycleCallbacks) {
    if (userPostConstructByInterceptorClass.containsKey(interceptorClass.getInterceptorClassName())) {
      userPostConstruct.addAll(userPostConstructByInterceptorClass.get(interceptorClass.getInterceptorClassName()));
    }
    if (userPreDestroyByInterceptorClass.containsKey(interceptorClass.getInterceptorClassName())) {
      userPreDestroy.addAll(userPreDestroyByInterceptorClass.get(interceptorClass.getInterceptorClassName()));
    }
  }
  new ClassDescriptionTraversal(configuration.getComponentClass(),applicationClasses){
    @Override public void handle(    final Class<?> clazz,    EEModuleClassConfiguration classConfiguration,    EEModuleClassDescription classDescription) throws DeploymentUnitProcessingException {
      final ClassReflectionIndex classReflectionIndex=deploymentReflectionIndex.getClassIndex(clazz);
      final InterceptorClassDescription interceptorConfig=mergeInterceptorConfig(clazz,classDescription,description);
      final MethodIdentifier componentPostConstructMethodIdentifier=interceptorConfig.getPostConstruct();
      if (componentPostConstructMethodIdentifier != null) {
        final Method method=ClassReflectionIndexUtil.findRequiredMethod(deploymentReflectionIndex,classReflectionIndex,componentPostConstructMethodIdentifier);
        if (isNotOverriden(clazz,method,componentClassIndex,deploymentReflectionIndex)) {
          InterceptorFactory interceptorFactory=new ManagedReferenceLifecycleMethodInterceptorFactory(instanceKey,method,true,true);
          userPostConstruct.addLast(interceptorFactory);
        }
      }
      final MethodIdentifier componentPreDestroyMethodIdentifier=interceptorConfig.getPreDestroy();
      if (componentPreDestroyMethodIdentifier != null) {
        final Method method=ClassReflectionIndexUtil.findRequiredMethod(deploymentReflectionIndex,classReflectionIndex,componentPreDestroyMethodIdentifier);
        if (isNotOverriden(clazz,method,componentClassIndex,deploymentReflectionIndex)) {
          InterceptorFactory interceptorFactory=new ManagedReferenceLifecycleMethodInterceptorFactory(instanceKey,method,true,true);
          userPreDestroy.addLast(interceptorFactory);
        }
      }
      final MethodIdentifier componentAroundInvokeMethodIdentifier=interceptorConfig.getAroundInvoke();
      if (componentAroundInvokeMethodIdentifier != null) {
        final Method method=ClassReflectionIndexUtil.findRequiredMethod(deploymentReflectionIndex,classReflectionIndex,componentAroundInvokeMethodIdentifier);
        if (isNotOverriden(clazz,method,componentClassIndex,deploymentReflectionIndex)) {
          componentUserAroundInvoke.add(new ManagedReferenceLifecycleMethodInterceptorFactory(instanceKey,method,false));
        }
      }
      if (description.isTimerServiceApplicable()) {
        final MethodIdentifier componentAroundTimeoutMethodIdentifier=interceptorConfig.getAroundTimeout();
        if (componentAroundTimeoutMethodIdentifier != null) {
          final Method method=ClassReflectionIndexUtil.findRequiredMethod(deploymentReflectionIndex,classReflectionIndex,componentAroundTimeoutMethodIdentifier);
          if (isNotOverriden(clazz,method,componentClassIndex,deploymentReflectionIndex)) {
            componentUserAroundTimeout.add(new ManagedReferenceLifecycleMethodInterceptorFactory(instanceKey,method,false));
          }
        }
      }
    }
  }
.run();
  final InterceptorFactory tcclInterceptor=new ImmediateInterceptorFactory(new TCCLInterceptor(module.getClassLoader()));
  if (!injectors.isEmpty()) {
    configuration.addPostConstructInterceptor(weaved(injectors),InterceptorOrder.ComponentPostConstruct.RESOURCE_INJECTION_INTERCEPTORS);
  }
  if (!instantiators.isEmpty()) {
    configuration.addPostConstructInterceptor(weaved(instantiators),InterceptorOrder.ComponentPostConstruct.INSTANTIATION_INTERCEPTORS);
  }
  if (!userPostConstruct.isEmpty()) {
    configuration.addPostConstructInterceptor(weaved(userPostConstruct),InterceptorOrder.ComponentPostConstruct.USER_INTERCEPTORS);
  }
  configuration.addPostConstructInterceptor(Interceptors.getTerminalInterceptorFactory(),InterceptorOrder.ComponentPostConstruct.TERMINAL_INTERCEPTOR);
  configuration.addPostConstructInterceptor(tcclInterceptor,InterceptorOrder.ComponentPostConstruct.TCCL_INTERCEPTOR);
  if (!uninjectors.isEmpty()) {
    configuration.addPreDestroyInterceptor(weaved(uninjectors),InterceptorOrder.ComponentPreDestroy.UNINJECTION_INTERCEPTORS);
  }
  if (!destructors.isEmpty()) {
    configuration.addPreDestroyInterceptor(weaved(destructors),InterceptorOrder.ComponentPreDestroy.DESTRUCTION_INTERCEPTORS);
  }
  if (!userPreDestroy.isEmpty()) {
    configuration.addPreDestroyInterceptor(weaved(userPreDestroy),InterceptorOrder.ComponentPreDestroy.USER_INTERCEPTORS);
  }
  configuration.addPreDestroyInterceptor(Interceptors.getTerminalInterceptorFactory(),InterceptorOrder.ComponentPreDestroy.TERMINAL_INTERCEPTOR);
  configuration.addPreDestroyInterceptor(tcclInterceptor,InterceptorOrder.ComponentPreDestroy.TCCL_INTERCEPTOR);
  final List<InterceptorDescription> classInterceptors=description.getClassInterceptors();
  final Map<MethodIdentifier,List<InterceptorDescription>> methodInterceptors=description.getMethodInterceptors();
  if (description.isIntercepted()) {
    for (    final Method method : configuration.getDefinedComponentMethods()) {
      configuration.addComponentInterceptor(method,Interceptors.getInitialInterceptorFactory(),InterceptorOrder.Component.INITIAL_INTERCEPTOR);
      configuration.addComponentInterceptor(method,new ManagedReferenceMethodInterceptorFactory(instanceKey,method),InterceptorOrder.Component.TERMINAL_INTERCEPTOR);
      if (description.isTimerServiceApplicable()) {
        configuration.addTimeoutInterceptor(method,new ManagedReferenceMethodInterceptorFactory(instanceKey,method),InterceptorOrder.Component.TERMINAL_INTERCEPTOR);
      }
      configuration.addComponentInterceptor(method,tcclInterceptor,InterceptorOrder.Component.TCCL_INTERCEPTOR);
      if (description.isTimerServiceApplicable()) {
        configuration.addTimeoutInterceptor(method,tcclInterceptor,InterceptorOrder.Component.TCCL_INTERCEPTOR);
      }
      final MethodIdentifier identifier=MethodIdentifier.getIdentifier(method.getReturnType(),method.getName(),method.getParameterTypes());
      final List<InterceptorFactory> userAroundInvokes=new ArrayList<InterceptorFactory>();
      final List<InterceptorFactory> userAroundTimeouts=new ArrayList<InterceptorFactory>();
      if (!description.isExcludeDefaultInterceptors() && !description.isExcludeDefaultInterceptors(identifier)) {
        for (        InterceptorDescription interceptorDescription : description.getDefaultInterceptors()) {
          String interceptorClassName=interceptorDescription.getInterceptorClassName();
          List<InterceptorFactory> aroundInvokes=userAroundInvokesByInterceptorClass.get(interceptorClassName);
          if (aroundInvokes != null) {
            userAroundInvokes.addAll(aroundInvokes);
          }
          if (description.isTimerServiceApplicable()) {
            List<InterceptorFactory> aroundTimeouts=userAroundTimeoutsByInterceptorClass.get(interceptorClassName);
            if (aroundTimeouts != null) {
              userAroundTimeouts.addAll(aroundTimeouts);
            }
          }
        }
      }
      if (!description.isExcludeClassInterceptors(identifier)) {
        for (        InterceptorDescription interceptorDescription : classInterceptors) {
          String interceptorClassName=interceptorDescription.getInterceptorClassName();
          List<InterceptorFactory> aroundInvokes=userAroundInvokesByInterceptorClass.get(interceptorClassName);
          if (aroundInvokes != null) {
            userAroundInvokes.addAll(aroundInvokes);
          }
          if (description.isTimerServiceApplicable()) {
            List<InterceptorFactory> aroundTimeouts=userAroundTimeoutsByInterceptorClass.get(interceptorClassName);
            if (aroundTimeouts != null) {
              userAroundTimeouts.addAll(aroundTimeouts);
            }
          }
        }
      }
      List<InterceptorDescription> methodLevelInterceptors=methodInterceptors.get(identifier);
      if (methodLevelInterceptors != null) {
        for (        InterceptorDescription methodLevelInterceptor : methodLevelInterceptors) {
          String interceptorClassName=methodLevelInterceptor.getInterceptorClassName();
          List<InterceptorFactory> aroundInvokes=userAroundInvokesByInterceptorClass.get(interceptorClassName);
          if (aroundInvokes != null) {
            userAroundInvokes.addAll(aroundInvokes);
          }
          if (description.isTimerServiceApplicable()) {
            List<InterceptorFactory> aroundTimeouts=userAroundTimeoutsByInterceptorClass.get(interceptorClassName);
            if (aroundTimeouts != null) {
              userAroundTimeouts.addAll(aroundTimeouts);
            }
          }
        }
      }
      userAroundInvokes.addAll(componentUserAroundInvoke);
      configuration.addComponentInterceptor(method,weaved(userAroundInvokes),InterceptorOrder.Component.USER_INTERCEPTORS);
      if (description.isTimerServiceApplicable()) {
        userAroundTimeouts.addAll(componentUserAroundTimeout);
        configuration.addTimeoutInterceptor(method,weaved(userAroundTimeouts),InterceptorOrder.Component.USER_INTERCEPTORS);
      }
    }
  }
  for (  ViewDescription view : description.getViews()) {
    Class<?> viewClass;
    try {
      viewClass=module.getClassLoader().loadClass(view.getViewClassName());
    }
 catch (    ClassNotFoundException e) {
      throw new DeploymentUnitProcessingException("Could not load view class " + view.getViewClassName() + " for component "+ configuration,e);
    }
    final ViewConfiguration viewConfiguration;
    final ProxyConfiguration proxyConfiguration=new ProxyConfiguration();
    proxyConfiguration.setProxyName(viewClass.getName() + "$$$view" + PROXY_ID.incrementAndGet());
    proxyConfiguration.setClassLoader(module.getClassLoader());
    proxyConfiguration.setProtectionDomain(viewClass.getProtectionDomain());
    proxyConfiguration.setMetadataSource(proxyReflectionIndex);
    if (view.isSerializable()) {
      proxyConfiguration.addAdditionalInterface(Serializable.class);
      if (view.isUseWriteReplace()) {
        proxyConfiguration.addAdditionalInterface(WriteReplaceInterface.class);
      }
    }
    if (viewClass.isInterface()) {
      proxyConfiguration.setSuperClass(Object.class);
      proxyConfiguration.addAdditionalInterface(viewClass);
      viewConfiguration=view.createViewConfiguration(viewClass,configuration,new ProxyFactory(proxyConfiguration));
    }
 else {
      proxyConfiguration.setSuperClass(viewClass);
      viewConfiguration=view.createViewConfiguration(viewClass,configuration,new ProxyFactory(proxyConfiguration));
    }
    for (    final ViewConfigurator configurator : view.getConfigurators()) {
      configurator.configure(context,configuration,view,viewConfiguration);
    }
    configuration.getViews().add(viewConfiguration);
  }
  configuration.getStartDependencies().add(new DependencyConfigurator<ComponentStartService>(){
    @Override public void configureDependency(    final ServiceBuilder<?> serviceBuilder,    ComponentStartService service) throws DeploymentUnitProcessingException {
      for (      final Map.Entry<ServiceName,ServiceBuilder.DependencyType> entry : description.getDependencies().entrySet()) {
        serviceBuilder.addDependency(entry.getValue(),entry.getKey());
      }
    }
  }
);
}
