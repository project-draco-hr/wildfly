{
  final DeploymentUnit deploymentUnit=context.getDeploymentUnit();
  final DeploymentReflectionIndex deploymentReflectionIndex=deploymentUnit.getAttachment(REFLECTION_INDEX);
  final Object instanceKey=BasicComponentInstance.INSTANCE_KEY;
  final Module module=deploymentUnit.getAttachment(org.jboss.as.server.deployment.Attachments.MODULE);
  final EEModuleClassConfiguration componentClassConfiguration=configuration.getModuleClassConfiguration();
  final EEModuleConfiguration moduleConfiguration=componentClassConfiguration.getModuleConfiguration();
  final Deque<InterceptorFactory> instantiators=new ArrayDeque<InterceptorFactory>();
  final Deque<InterceptorFactory> injectors=new ArrayDeque<InterceptorFactory>();
  final Deque<InterceptorFactory> uninjectors=new ArrayDeque<InterceptorFactory>();
  final Deque<InterceptorFactory> destructors=new ArrayDeque<InterceptorFactory>();
  final ClassReflectionIndex<?> componentClassIndex=deploymentReflectionIndex.getClassIndex(componentClassConfiguration.getModuleClass());
  final List<InterceptorFactory> componentUserAroundInvoke=new ArrayList<InterceptorFactory>();
  final Map<String,List<InterceptorFactory>> userAroundInvokesByInterceptorClass=new HashMap<String,List<InterceptorFactory>>();
  final Map<String,List<InterceptorFactory>> userPostConstructByInterceptorClass=new HashMap<String,List<InterceptorFactory>>();
  final Map<String,List<InterceptorFactory>> userPreDestroyByInterceptorClass=new HashMap<String,List<InterceptorFactory>>();
  final ManagedReferenceFactory instanceFactory=configuration.getInstanceFactory();
  if (instanceFactory != null) {
    instantiators.addFirst(new ManagedReferenceInterceptorFactory(instanceFactory,instanceKey));
  }
 else {
    final Constructor<Object> constructor=(Constructor<Object>)componentClassIndex.getConstructor(EMPTY_CLASS_ARRAY);
    if (constructor == null) {
      throw new DeploymentUnitProcessingException("Could not find default constructor for " + componentClassConfiguration.getModuleClass());
    }
    ValueManagedReferenceFactory factory=new ValueManagedReferenceFactory(new ConstructedValue<Object>(constructor,Collections.<Value<?>>emptyList()));
    instantiators.addFirst(new ManagedReferenceInterceptorFactory(factory,instanceKey));
  }
  destructors.addLast(new ManagedReferenceReleaseInterceptorFactory(instanceKey));
  new ClassDescriptionTraversal(componentClassConfiguration,moduleConfiguration){
    @Override public void handle(    EEModuleClassConfiguration classConfiguration,    EEModuleClassDescription classDescription) throws DeploymentUnitProcessingException {
      for (      final ResourceInjectionConfiguration injectionConfiguration : classConfiguration.getInjectionConfigurations()) {
        final Object valueContextKey=new Object();
        final InjectedValue<ManagedReferenceFactory> managedReferenceFactoryValue=new InjectedValue<ManagedReferenceFactory>();
        configuration.getStartDependencies().add(new InjectedConfigurator(injectionConfiguration,configuration,context,managedReferenceFactoryValue));
        injectors.addFirst(injectionConfiguration.getTarget().createInjectionInterceptorFactory(instanceKey,valueContextKey,managedReferenceFactoryValue,deploymentUnit));
        uninjectors.addLast(new ManagedReferenceReleaseInterceptorFactory(valueContextKey));
      }
    }
  }
.run();
  final LinkedHashSet<InterceptorDescription> interceptorWithLifecycleCallbacks=new LinkedHashSet<InterceptorDescription>();
  if (!description.isExcludeDefaultInterceptors()) {
    interceptorWithLifecycleCallbacks.addAll(description.getDefaultInterceptors());
  }
  interceptorWithLifecycleCallbacks.addAll(description.getClassInterceptors());
  for (  final InterceptorDescription interceptorDescription : description.getAllInterceptors()) {
    final String interceptorClassName=interceptorDescription.getInterceptorClassName();
    final EEModuleClassConfiguration interceptorConfiguration=moduleConfiguration.getClassConfiguration(interceptorClassName);
    final Object contextKey=interceptorConfiguration.getModuleClass();
    if (interceptorConfiguration.getInstantiator() == null) {
      throw new DeploymentUnitProcessingException("No default constructor for interceptor class " + interceptorClassName + " on component "+ componentClassConfiguration.getModuleClass());
    }
    instantiators.addFirst(new ManagedReferenceInterceptorFactory(interceptorConfiguration.getInstantiator(),contextKey));
    destructors.addLast(new ManagedReferenceReleaseInterceptorFactory(contextKey));
    final boolean interceptorHasLifecycleCallbacks=interceptorWithLifecycleCallbacks.contains(interceptorDescription);
    final ClassReflectionIndex<?> interceptorIndex=deploymentReflectionIndex.getClassIndex(interceptorConfiguration.getModuleClass());
    new ClassDescriptionTraversal(interceptorConfiguration,moduleConfiguration){
      @Override public void handle(      EEModuleClassConfiguration interceptorClassConfiguration,      EEModuleClassDescription classDescription) throws DeploymentUnitProcessingException {
        final ClassReflectionIndex<?> interceptorClassIndex=deploymentReflectionIndex.getClassIndex(interceptorClassConfiguration.getModuleClass());
        for (        final ResourceInjectionConfiguration injectionConfiguration : interceptorClassConfiguration.getInjectionConfigurations()) {
          final Object valueContextKey=new Object();
          final InjectedValue<ManagedReferenceFactory> managedReferenceFactoryValue=new InjectedValue<ManagedReferenceFactory>();
          configuration.getStartDependencies().add(new InjectedConfigurator(injectionConfiguration,configuration,context,managedReferenceFactoryValue));
          injectors.addFirst(injectionConfiguration.getTarget().createInjectionInterceptorFactory(contextKey,valueContextKey,managedReferenceFactoryValue,deploymentUnit));
          uninjectors.addLast(new ManagedReferenceReleaseInterceptorFactory(valueContextKey));
        }
        if (interceptorHasLifecycleCallbacks) {
          final MethodIdentifier postConstructMethodIdentifier=classDescription.getPostConstructMethod();
          if (postConstructMethodIdentifier != null) {
            final Method method=ClassReflectionIndexUtil.findRequiredMethod(deploymentReflectionIndex,interceptorClassIndex,postConstructMethodIdentifier);
            if (isNotOverriden(interceptorClassConfiguration,method,interceptorIndex,deploymentReflectionIndex)) {
              InterceptorFactory interceptorFactory=new ManagedReferenceLifecycleMethodInterceptorFactory(contextKey,method,true);
              List<InterceptorFactory> userPostConstruct=userPostConstructByInterceptorClass.get(interceptorClassName);
              if (userPostConstruct == null) {
                userPostConstructByInterceptorClass.put(interceptorClassName,userPostConstruct=new ArrayList<InterceptorFactory>());
              }
              userPostConstruct.add(interceptorFactory);
            }
          }
          final MethodIdentifier preDestroyMethodIdentifier=classDescription.getPreDestroyMethod();
          if (preDestroyMethodIdentifier != null) {
            final Method method=ClassReflectionIndexUtil.findRequiredMethod(deploymentReflectionIndex,interceptorClassIndex,preDestroyMethodIdentifier);
            if (isNotOverriden(interceptorClassConfiguration,method,interceptorIndex,deploymentReflectionIndex)) {
              InterceptorFactory interceptorFactory=new ManagedReferenceLifecycleMethodInterceptorFactory(contextKey,method,true);
              List<InterceptorFactory> userPreDestroy=userPreDestroyByInterceptorClass.get(interceptorClassName);
              if (userPreDestroy == null) {
                userPreDestroyByInterceptorClass.put(interceptorClassName,userPreDestroy=new ArrayList<InterceptorFactory>());
              }
              userPreDestroy.add(interceptorFactory);
            }
          }
        }
        final MethodIdentifier aroundInvokeMethodIdentifier=classDescription.getAroundInvokeMethod();
        if (aroundInvokeMethodIdentifier != null) {
          final Method method=ClassReflectionIndexUtil.findRequiredMethod(deploymentReflectionIndex,interceptorClassIndex,aroundInvokeMethodIdentifier);
          if (isNotOverriden(interceptorClassConfiguration,method,interceptorIndex,deploymentReflectionIndex)) {
            List<InterceptorFactory> interceptors;
            if ((interceptors=userAroundInvokesByInterceptorClass.get(interceptorClassName)) == null) {
              userAroundInvokesByInterceptorClass.put(interceptorClassName,interceptors=new ArrayList<InterceptorFactory>());
            }
            interceptors.add(new ManagedReferenceLifecycleMethodInterceptorFactory(contextKey,method,false));
          }
        }
      }
    }
.run();
  }
  final Deque<InterceptorFactory> userPostConstruct=new ArrayDeque<InterceptorFactory>();
  final Deque<InterceptorFactory> userPreDestroy=new ArrayDeque<InterceptorFactory>();
  for (  final InterceptorDescription interceptorClass : interceptorWithLifecycleCallbacks) {
    if (userPostConstructByInterceptorClass.containsKey(interceptorClass.getInterceptorClassName())) {
      userPostConstruct.addAll(userPostConstructByInterceptorClass.get(interceptorClass.getInterceptorClassName()));
    }
    if (userPreDestroyByInterceptorClass.containsKey(interceptorClass.getInterceptorClassName())) {
      userPreDestroy.addAll(userPreDestroyByInterceptorClass.get(interceptorClass.getInterceptorClassName()));
    }
  }
  new ClassDescriptionTraversal(componentClassConfiguration,moduleConfiguration){
    @Override public void handle(    EEModuleClassConfiguration configuration,    EEModuleClassDescription classDescription) throws DeploymentUnitProcessingException {
      final ClassReflectionIndex classReflectionIndex=deploymentReflectionIndex.getClassIndex(configuration.getModuleClass());
      final MethodIdentifier componentPostConstructMethodIdentifier=classDescription.getPostConstructMethod();
      if (componentPostConstructMethodIdentifier != null) {
        final Method method=ClassReflectionIndexUtil.findRequiredMethod(deploymentReflectionIndex,classReflectionIndex,componentPostConstructMethodIdentifier);
        if (isNotOverriden(configuration,method,componentClassIndex,deploymentReflectionIndex)) {
          InterceptorFactory interceptorFactory=new ManagedReferenceLifecycleMethodInterceptorFactory(instanceKey,method,true);
          userPostConstruct.addLast(interceptorFactory);
        }
      }
      final MethodIdentifier componentPreDestroyMethodIdentifier=classDescription.getPreDestroyMethod();
      if (componentPreDestroyMethodIdentifier != null) {
        final Method method=ClassReflectionIndexUtil.findRequiredMethod(deploymentReflectionIndex,classReflectionIndex,componentPreDestroyMethodIdentifier);
        if (isNotOverriden(configuration,method,componentClassIndex,deploymentReflectionIndex)) {
          InterceptorFactory interceptorFactory=new ManagedReferenceLifecycleMethodInterceptorFactory(instanceKey,method,true);
          userPreDestroy.addLast(interceptorFactory);
        }
      }
      final MethodIdentifier componentAroundInvokeMethodIdentifier=classDescription.getAroundInvokeMethod();
      if (componentAroundInvokeMethodIdentifier != null) {
        final Method method=ClassReflectionIndexUtil.findRequiredMethod(deploymentReflectionIndex,classReflectionIndex,componentAroundInvokeMethodIdentifier);
        if (isNotOverriden(configuration,method,componentClassIndex,deploymentReflectionIndex)) {
          componentUserAroundInvoke.add(new ManagedReferenceLifecycleMethodInterceptorFactory(instanceKey,method,false));
        }
      }
    }
  }
.run();
  final InterceptorFactory tcclInterceptor=new ImmediateInterceptorFactory(new TCCLInterceptor(module.getClassLoader()));
  for (  InterceptorFactory injector : injectors) {
    configuration.addPostConstructInterceptor(injector,InterceptorOrder.ComponentPostConstruct.RESOURCE_INJECTION_INTERCEPTORS);
  }
  for (  InterceptorFactory instantiator : instantiators) {
    configuration.addPostConstructInterceptor(instantiator,InterceptorOrder.ComponentPostConstruct.INSTANTIATION_INTERCEPTORS);
  }
  for (  InterceptorFactory interceptor : userPostConstruct) {
    configuration.addPostConstructInterceptor(interceptor,InterceptorOrder.ComponentPostConstruct.USER_INTERCEPTORS);
  }
  configuration.addPostConstructInterceptor(Interceptors.getTerminalInterceptorFactory(),InterceptorOrder.ComponentPostConstruct.TERMINAL_INTERCEPTOR);
  configuration.addPostConstructInterceptor(tcclInterceptor,InterceptorOrder.ComponentPostConstruct.TCCL_INTERCEPTOR);
  for (  InterceptorFactory uninjector : uninjectors) {
    configuration.addPreDestroyInterceptor(uninjector,InterceptorOrder.ComponentPreDestroy.UNINJECTION_INTERCEPTORS);
  }
  for (  InterceptorFactory destructor : destructors) {
    configuration.addPreDestroyInterceptor(destructor,InterceptorOrder.ComponentPreDestroy.DESTRUCTION_INTERCEPTORS);
  }
  for (  InterceptorFactory interceptor : userPreDestroy) {
    configuration.addPreDestroyInterceptor(interceptor,InterceptorOrder.ComponentPreDestroy.USER_INTERCEPTORS);
  }
  configuration.addPreDestroyInterceptor(Interceptors.getTerminalInterceptorFactory(),InterceptorOrder.ComponentPreDestroy.TERMINAL_INTERCEPTOR);
  configuration.addPreDestroyInterceptor(tcclInterceptor,InterceptorOrder.ComponentPreDestroy.TCCL_INTERCEPTOR);
  final List<InterceptorDescription> classInterceptors=description.getClassInterceptors();
  final Map<MethodIdentifier,List<InterceptorDescription>> methodInterceptors=description.getMethodInterceptors();
  for (  final Method method : componentClassConfiguration.getClassMethods()) {
    configuration.addComponentInterceptor(method,Interceptors.getInitialInterceptorFactory(),InterceptorOrder.Component.INITIAL_INTERCEPTOR);
    configuration.addComponentInterceptor(method,new ManagedReferenceMethodInterceptorFactory(instanceKey,method),InterceptorOrder.Component.TERMINAL_INTERCEPTOR);
    configuration.addComponentInterceptor(method,tcclInterceptor,InterceptorOrder.Component.TCCL_INTERCEPTOR);
    final MethodIdentifier identifier=MethodIdentifier.getIdentifier(method.getReturnType(),method.getName(),method.getParameterTypes());
    if (!description.isExcludeDefaultInterceptors() && !description.isExcludeDefaultInterceptors(identifier)) {
      for (      InterceptorDescription interceptorDescription : description.getDefaultInterceptors()) {
        String interceptorClassName=interceptorDescription.getInterceptorClassName();
        List<InterceptorFactory> aroundInvokes=userAroundInvokesByInterceptorClass.get(interceptorClassName);
        if (aroundInvokes != null) {
          for (          final InterceptorFactory factory : aroundInvokes) {
            configuration.addComponentInterceptor(method,factory,InterceptorOrder.Component.USER_INTERCEPTORS);
          }
        }
      }
    }
    if (!description.isExcludeClassInterceptors(identifier)) {
      for (      InterceptorDescription interceptorDescription : classInterceptors) {
        String interceptorClassName=interceptorDescription.getInterceptorClassName();
        List<InterceptorFactory> aroundInvokes=userAroundInvokesByInterceptorClass.get(interceptorClassName);
        if (aroundInvokes != null) {
          if (aroundInvokes != null) {
            for (            final InterceptorFactory factory : aroundInvokes) {
              configuration.addComponentInterceptor(method,factory,InterceptorOrder.Component.USER_INTERCEPTORS);
            }
          }
        }
      }
    }
    List<InterceptorDescription> methodLevelInterceptors=methodInterceptors.get(identifier);
    if (methodLevelInterceptors != null) {
      for (      InterceptorDescription methodLevelInterceptor : methodLevelInterceptors) {
        String interceptorClassName=methodLevelInterceptor.getInterceptorClassName();
        List<InterceptorFactory> aroundInvokes=userAroundInvokesByInterceptorClass.get(interceptorClassName);
        if (aroundInvokes != null) {
          if (aroundInvokes != null) {
            for (            final InterceptorFactory factory : aroundInvokes) {
              configuration.addComponentInterceptor(method,factory,InterceptorOrder.Component.USER_INTERCEPTORS);
            }
          }
        }
      }
    }
    if (componentUserAroundInvoke != null) {
      for (      final InterceptorFactory factory : componentUserAroundInvoke) {
        configuration.addComponentInterceptor(method,factory,InterceptorOrder.Component.USER_INTERCEPTORS);
      }
    }
  }
  for (  ViewDescription view : description.getViews()) {
    Class<?> viewClass;
    try {
      viewClass=module.getClassLoader().loadClass(view.getViewClassName());
    }
 catch (    ClassNotFoundException e) {
      throw new DeploymentUnitProcessingException("Could not load view class " + view.getViewClassName() + " for component "+ configuration,e);
    }
    final ViewConfiguration viewConfiguration;
    if (viewClass.isInterface()) {
      viewConfiguration=view.createViewConfiguration(viewClass,configuration,new ProxyFactory(viewClass.getName() + "$$$view" + PROXY_ID.incrementAndGet(),Object.class,viewClass.getClassLoader(),viewClass.getProtectionDomain(),viewClass));
    }
 else {
      viewConfiguration=view.createViewConfiguration(viewClass,configuration,new ProxyFactory(viewClass.getName() + "$$$view" + PROXY_ID.incrementAndGet(),viewClass,viewClass.getClassLoader(),viewClass.getProtectionDomain()));
    }
    for (    final ViewConfigurator configurator : view.getConfigurators()) {
      configurator.configure(context,configuration,view,viewConfiguration);
    }
    configuration.getViews().add(viewConfiguration);
  }
}
