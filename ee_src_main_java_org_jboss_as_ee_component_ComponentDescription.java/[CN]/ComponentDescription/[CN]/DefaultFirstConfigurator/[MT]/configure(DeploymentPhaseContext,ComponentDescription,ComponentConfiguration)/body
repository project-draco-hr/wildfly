{
  final DeploymentUnit deploymentUnit=context.getDeploymentUnit();
  final DeploymentReflectionIndex index=deploymentUnit.getAttachment(REFLECTION_INDEX);
  final Object instanceKey=BasicComponentInstance.INSTANCE_KEY;
  final EEModuleClassDescription componentClassDescription=description.getClassDescription();
  final EEModuleClassConfiguration componentClassConfiguration=configuration.getModuleClassConfiguration();
  final EEModuleConfiguration moduleConfiguration=componentClassConfiguration.getModuleConfiguration();
  final Deque<InterceptorFactory> instantiators=new ArrayDeque<InterceptorFactory>();
  final Deque<InterceptorFactory> injectors=new ArrayDeque<InterceptorFactory>();
  final Deque<InterceptorFactory> uninjectors=new ArrayDeque<InterceptorFactory>();
  final Deque<InterceptorFactory> destructors=new ArrayDeque<InterceptorFactory>();
  final Deque<InterceptorFactory> userPostConstruct=new ArrayDeque<InterceptorFactory>();
  final Deque<InterceptorFactory> userPreDestroy=new ArrayDeque<InterceptorFactory>();
  final ClassReflectionIndex<?> componentClassIndex=index.getClassIndex(componentClassConfiguration.getModuleClass());
  final List<InterceptorFactory> componentUserAroundInvoke=new ArrayList<InterceptorFactory>();
  final Map<String,List<InterceptorFactory>> userAroundInvokesByInterceptorClass=new HashMap<String,List<InterceptorFactory>>();
  instantiators.addFirst(new ManagedReferenceInterceptorFactory(configuration.getInstanceFactory(),instanceKey));
  destructors.addLast(new ManagedReferenceReleaseInterceptorFactory(instanceKey));
  new ClassDescriptionTraversal(componentClassConfiguration,moduleConfiguration){
    @Override public void handle(    EEModuleClassConfiguration classConfiguration,    EEModuleClassDescription classDescription) throws DeploymentUnitProcessingException {
      for (      final ResourceInjectionConfiguration injectionConfiguration : classConfiguration.getInjectionConfigurations()) {
        final Object valueContextKey=new Object();
        final InjectedValue<ManagedReferenceFactory> managedReferenceFactoryValue=new InjectedValue<ManagedReferenceFactory>();
        configuration.getStartDependencies().add(new InjectedConfigurator(injectionConfiguration,configuration,context,managedReferenceFactoryValue));
        injectors.addFirst(injectionConfiguration.getTarget().createInjectionInterceptorFactory(instanceKey,valueContextKey,managedReferenceFactoryValue,deploymentUnit));
        uninjectors.addLast(new ManagedReferenceReleaseInterceptorFactory(valueContextKey));
      }
    }
  }
.run();
  final Map<String,InterceptorDescription> interceptors=description.getAllInterceptors();
  for (  InterceptorDescription interceptorDescription : interceptors.values()) {
    final String interceptorClassName=interceptorDescription.getInterceptorClassName();
    new ClassDescriptionTraversal(moduleConfiguration.getClassConfiguration(interceptorClassName),moduleConfiguration){
      @Override public void handle(      EEModuleClassConfiguration interceptorClassConfiguration,      EEModuleClassDescription classDescription) throws DeploymentUnitProcessingException {
        final ClassReflectionIndex<?> interceptorClassIndex=index.getClassIndex(interceptorClassConfiguration.getModuleClass());
        final Object contextKey=new Object();
        instantiators.addFirst(new ManagedReferenceInterceptorFactory(interceptorClassConfiguration.getInstantiator(),contextKey));
        destructors.addLast(new ManagedReferenceReleaseInterceptorFactory(contextKey));
        for (        final ResourceInjectionConfiguration injectionConfiguration : interceptorClassConfiguration.getInjectionConfigurations()) {
          final Object valueContextKey=new Object();
          final InjectedValue<ManagedReferenceFactory> managedReferenceFactoryValue=new InjectedValue<ManagedReferenceFactory>();
          configuration.getStartDependencies().add(new InjectedConfigurator(injectionConfiguration,configuration,context,managedReferenceFactoryValue));
          injectors.addFirst(injectionConfiguration.getTarget().createInjectionInterceptorFactory(contextKey,valueContextKey,managedReferenceFactoryValue,deploymentUnit));
          uninjectors.addLast(new ManagedReferenceReleaseInterceptorFactory(valueContextKey));
        }
        final MethodIdentifier postConstructMethod=classDescription.getPostConstructMethod();
        if (postConstructMethod != null) {
          Method method=interceptorClassIndex.getMethod(postConstructMethod);
          InterceptorFactory interceptorFactory=new ManagedReferenceLifecycleMethodInterceptorFactory(contextKey,method,true);
          userPostConstruct.addLast(interceptorFactory);
        }
        final MethodIdentifier preDestroyMethod=classDescription.getPreDestroyMethod();
        if (preDestroyMethod != null) {
          Method method=interceptorClassIndex.getMethod(preDestroyMethod);
          InterceptorFactory interceptorFactory=new ManagedReferenceLifecycleMethodInterceptorFactory(contextKey,method,true);
          userPreDestroy.addLast(interceptorFactory);
        }
        final MethodIdentifier aroundInvokeMethod=classDescription.getAroundInvokeMethod();
        if (aroundInvokeMethod != null) {
          Method method=interceptorClassIndex.getMethod(aroundInvokeMethod);
          List<InterceptorFactory> interceptors;
          if ((interceptors=userAroundInvokesByInterceptorClass.get(interceptorClassName)) == null) {
            userAroundInvokesByInterceptorClass.put(interceptorClassName,interceptors=new ArrayList<InterceptorFactory>());
          }
          interceptors.add(new ManagedReferenceLifecycleMethodInterceptorFactory(contextKey,method,false));
        }
      }
    }
.run();
  }
  new ClassDescriptionTraversal(componentClassConfiguration,moduleConfiguration){
    @Override public void handle(    EEModuleClassConfiguration configuration,    EEModuleClassDescription classDescription){
      final MethodIdentifier componentPostConstructMethod=classDescription.getPostConstructMethod();
      if (componentPostConstructMethod != null) {
        Method method=componentClassIndex.getMethod(componentPostConstructMethod);
        InterceptorFactory interceptorFactory=new ManagedReferenceLifecycleMethodInterceptorFactory(instanceKey,method,true);
        userPostConstruct.addLast(interceptorFactory);
      }
      final MethodIdentifier componentPreDestroyMethod=classDescription.getPreDestroyMethod();
      if (componentPreDestroyMethod != null) {
        Method method=componentClassIndex.getMethod(componentPreDestroyMethod);
        InterceptorFactory interceptorFactory=new ManagedReferenceLifecycleMethodInterceptorFactory(instanceKey,method,true);
        userPreDestroy.addLast(interceptorFactory);
      }
      final MethodIdentifier componentAroundInvokeMethod=classDescription.getAroundInvokeMethod();
      if (componentAroundInvokeMethod != null) {
        Method method=componentClassIndex.getMethod(componentAroundInvokeMethod);
        componentUserAroundInvoke.add(new ManagedReferenceLifecycleMethodInterceptorFactory(instanceKey,method,false));
      }
    }
  }
.run();
  final Deque<InterceptorFactory> postConstructInterceptors=configuration.getPostConstructInterceptors();
  final Iterator<InterceptorFactory> injectorIterator=injectors.descendingIterator();
  while (injectorIterator.hasNext()) {
    postConstructInterceptors.addFirst(injectorIterator.next());
  }
  final Iterator<InterceptorFactory> instantiatorIterator=instantiators.descendingIterator();
  while (instantiatorIterator.hasNext()) {
    postConstructInterceptors.addFirst(instantiatorIterator.next());
  }
  postConstructInterceptors.addAll(userPostConstruct);
  postConstructInterceptors.add(Interceptors.getTerminalInterceptorFactory());
  final Deque<InterceptorFactory> preDestroyInterceptors=configuration.getPreDestroyInterceptors();
  final Iterator<InterceptorFactory> uninjectorsIterator=uninjectors.descendingIterator();
  while (uninjectorsIterator.hasNext()) {
    preDestroyInterceptors.addFirst(uninjectorsIterator.next());
  }
  final Iterator<InterceptorFactory> destructorIterator=destructors.descendingIterator();
  while (destructorIterator.hasNext()) {
    preDestroyInterceptors.addFirst(destructorIterator.next());
  }
  preDestroyInterceptors.addAll(userPreDestroy);
  preDestroyInterceptors.add(Interceptors.getTerminalInterceptorFactory());
  final List<InterceptorDescription> classInterceptors=description.getClassInterceptors();
  Class clazz=componentClassConfiguration.getModuleClass();
  while (clazz != null) {
    final ClassReflectionIndex classIndex=index.getClassIndex(clazz);
    for (    final Method method : (Collection<Method>)classIndex.getMethods()) {
      MethodIdentifier identifier=MethodIdentifier.getIdentifier(method.getReturnType(),method.getName(),method.getParameterTypes());
      Deque<InterceptorFactory> interceptorDeque=configuration.getComponentInterceptorDeque(method);
      if (!description.isExcludeClassInterceptors(identifier)) {
        for (        InterceptorDescription interceptorDescription : classInterceptors) {
          String interceptorClassName=interceptorDescription.getInterceptorClassName();
          List<InterceptorFactory> aroundInvokes=userAroundInvokesByInterceptorClass.get(interceptorClassName);
          if (aroundInvokes != null) {
            interceptorDeque.addAll(aroundInvokes);
          }
        }
        if (componentUserAroundInvoke != null) {
          interceptorDeque.addAll(componentUserAroundInvoke);
        }
      }
      if (!description.isExcludeDefaultInterceptors() && !description.isExcludeDefaultInterceptors(identifier)) {
      }
    }
    clazz=clazz.getSuperclass();
  }
  final Map<MethodIdentifier,List<InterceptorDescription>> methodInterceptors=description.getMethodInterceptors();
  for (  MethodIdentifier identifier : methodInterceptors.keySet()) {
    final List<InterceptorDescription> descriptions=methodInterceptors.get(identifier);
    final Method componentMethod=componentClassIndex.getMethod(identifier);
    final Deque<InterceptorFactory> interceptorDeque=configuration.getComponentInterceptorDeque(componentMethod);
    for (    InterceptorDescription interceptorDescription : descriptions) {
      String interceptorClassName=interceptorDescription.getInterceptorClassName();
      List<InterceptorFactory> aroundInvokes=userAroundInvokesByInterceptorClass.get(interceptorClassName);
      if (aroundInvokes != null) {
        interceptorDeque.addAll(aroundInvokes);
      }
    }
  }
  for (  Method method : configuration.getDefinedComponentMethods()) {
    configuration.getComponentInterceptorDeque(method).addFirst(Interceptors.getInitialInterceptorFactory());
    configuration.getComponentInterceptorDeque(method).addLast(new ManagedReferenceMethodInterceptorFactory(instanceKey,method));
  }
  final Module module=deploymentUnit.getAttachment(org.jboss.as.server.deployment.Attachments.MODULE);
  for (  ViewDescription view : description.getViews()) {
    Class<?> viewClass;
    try {
      viewClass=module.getClassLoader().loadClass(view.getViewClassName());
    }
 catch (    ClassNotFoundException e) {
      throw new DeploymentUnitProcessingException("Could not load view class " + view.getViewClassName() + " for component "+ configuration,e);
    }
    final ViewConfiguration viewConfiguration;
    if (viewClass.isInterface()) {
      viewConfiguration=new ViewConfiguration(viewClass,configuration,view.getServiceName(),new ProxyFactory(viewClass.getName() + "$$$view" + PROXY_ID.incrementAndGet(),Object.class,viewClass.getClassLoader(),viewClass));
    }
 else {
      viewConfiguration=new ViewConfiguration(viewClass,configuration,view.getServiceName(),new ProxyFactory(viewClass.getName() + "$$$view" + PROXY_ID.incrementAndGet(),viewClass,viewClass.getClassLoader()));
    }
    for (    final ViewConfigurator configurator : view.getConfigurators()) {
      configurator.configure(context,configuration,view,viewConfiguration);
    }
    configuration.getViews().add(viewConfiguration);
  }
}
