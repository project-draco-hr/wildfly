{
  try {
    if (resourceRoot == null) {
      InputStream versionStream=null;
      URL url=null;
      try {
        Properties props=new Properties();
        versionStream=getClass().getClassLoader().getResourceAsStream(VERSION_PROPERTIES);
        if (versionStream != null) {
          props.load(versionStream);
          url=this.getClass().getClassLoader().getResource(SPRING_INT_JAR_BASE + "-" + props.get(VERSION_KEY)+ ".jar");
        }
 else {
          url=this.getClass().getClassLoader().getResource(SPRING_INT_JAR_BASE + ".jar");
        }
      }
  finally {
        if (versionStream != null) {
          versionStream.close();
        }
      }
      if (url == null) {
        throw JaxrsLogger.JAXRS_LOGGER.noSpringIntegrationJar();
      }
      File file=new File(url.toURI());
      VirtualFile vf=VFS.getChild(file.toURI());
      final Closeable mountHandle=VFS.mountZip(file,vf,TempFileProviderService.provider());
      Service<Closeable> mountHandleService=new Service<Closeable>(){
        public void start(        StartContext startContext) throws StartException {
        }
        public void stop(        StopContext stopContext){
          VFSUtils.safeClose(mountHandle);
        }
        public Closeable getValue() throws IllegalStateException, IllegalArgumentException {
          return mountHandle;
        }
      }
;
      ServiceBuilder<Closeable> builder=serviceTarget.addService(ServiceName.JBOSS.append(SERVICE_NAME),mountHandleService);
      builder.setInitialMode(ServiceController.Mode.ACTIVE).install();
      resourceRoot=vf;
    }
    return resourceRoot;
  }
 catch (  Exception e) {
    throw new DeploymentUnitProcessingException(e);
  }
}
