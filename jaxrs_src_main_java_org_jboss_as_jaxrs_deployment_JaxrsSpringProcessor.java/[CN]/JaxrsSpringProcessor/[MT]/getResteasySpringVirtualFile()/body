{
  try {
    Module module=Module.getBootModuleLoader().loadModule(MODULE);
    URL fileUrl=module.getClassLoader().getResource(JAR_LOCATION);
    if (fileUrl == null) {
      throw JaxrsLogger.JAXRS_LOGGER.noSpringIntegrationJar();
    }
    File dir=new File(fileUrl.toURI());
    File file=null;
    for (    String jar : dir.list()) {
      if (jar.endsWith(".jar")) {
        file=new File(dir,jar);
        break;
      }
    }
    if (file == null) {
      throw JaxrsLogger.JAXRS_LOGGER.noSpringIntegrationJar();
    }
    VirtualFile vf=VFS.getChild(file.toURI());
    final Closeable mountHandle=VFS.mountZip(file,vf,TempFileProviderService.provider());
    Service<Closeable> mountHandleService=new Service<Closeable>(){
      public void start(      StartContext startContext) throws StartException {
      }
      public void stop(      StopContext stopContext){
        VFSUtils.safeClose(mountHandle);
      }
      public Closeable getValue() throws IllegalStateException, IllegalArgumentException {
        return mountHandle;
      }
    }
;
    ServiceBuilder<Closeable> builder=serviceTarget.addService(ServiceName.JBOSS.append(SERVICE_NAME),mountHandleService);
    builder.setInitialMode(ServiceController.Mode.ACTIVE).install();
    resourceRoot=vf;
    return resourceRoot;
  }
 catch (  Exception e) {
    throw new DeploymentUnitProcessingException(e);
  }
}
