{
  String name=context.getCurrentAddressValue();
  if (context.getProcessType().isServer() && !context.isBooting() && name.equals("ejb")) {
    Resource rootResource=context.readResourceFromRoot(PathAddress.EMPTY_ADDRESS);
    PathElement ejbPath=PathElement.pathElement(ModelDescriptionConstants.SUBSYSTEM,"ejb3");
    if (rootResource.hasChild(ejbPath) && rootResource.getChild(ejbPath).hasChild(PathElement.pathElement("service","remote"))) {
      context.addStep(new OperationStepHandler(){
        @Override public void execute(        final OperationContext context,        final ModelNode operation) throws OperationFailedException {
          context.reloadRequired();
          context.completeStep(OperationContext.RollbackHandler.REVERT_RELOAD_REQUIRED_ROLLBACK_HANDLER);
        }
      }
,OperationContext.Stage.RUNTIME);
      return;
    }
  }
  ServiceTarget target=context.getServiceTarget();
  new GlobalConfigurationBuilder(name).configure(context,model).build(target).install();
  String defaultCache=ModelNodes.asString(DEFAULT_CACHE.getDefinition().resolveModelAttribute(context,model));
  new CacheContainerBuilder(name).setDefaultCache(defaultCache).configure(context,model).build(target).install();
  new KeyAffinityServiceFactoryBuilder(name).build(target).install();
  String jndiName=ModelNodes.asString(CacheContainerResourceDefinition.Attribute.JNDI_NAME.getDefinition().resolveModelAttribute(context,model));
  BinderServiceBuilder<?> bindingBuilder=new BinderServiceBuilder<>(InfinispanBindingFactory.createCacheContainerBinding(name),CacheContainerServiceName.CACHE_CONTAINER.getServiceName(name),CacheContainer.class);
  if (jndiName != null) {
    bindingBuilder.alias(ContextNames.bindInfoFor(JndiNameFactory.parse(jndiName).getAbsoluteName()));
  }
  bindingBuilder.build(target).install();
  if ((defaultCache != null) && !defaultCache.equals(CacheServiceNameFactory.DEFAULT_CACHE)) {
    for (    CacheServiceNameFactory nameFactory : CacheServiceName.values()) {
      new AliasServiceBuilder<>(nameFactory.getServiceName(name),nameFactory.getServiceName(name,defaultCache),Object.class).build(target).install();
    }
    new BinderServiceBuilder<>(InfinispanBindingFactory.createCacheBinding(name,CacheServiceNameFactory.DEFAULT_CACHE),CacheServiceName.CACHE.getServiceName(name),Cache.class).build(target).install();
    for (    CacheGroupAliasBuilderProvider provider : ServiceLoader.load(CacheGroupAliasBuilderProvider.class,CacheGroupAliasBuilderProvider.class.getClassLoader())) {
      for (      Builder<?> builder : provider.getBuilders(name,CacheServiceNameFactory.DEFAULT_CACHE,defaultCache)) {
        builder.build(target).install();
      }
    }
  }
}
