{
  ModelNode op;
  server=Server.createTcpServer("-tcpAllowOthers").start();
  Class.forName("org.h2.Driver");
  connection=DriverManager.getConnection("jdbc:h2:mem:test;DB_CLOSE_DELAY=-1","sa",RIGHT_PASSWORD);
  executeUpdate(connection,"CREATE TABLE TestPeople(Name Varchar(50), Surname Varchar(50))");
  executeUpdate(connection,"INSERT INTO TestPeople VALUES ('John','Smith')");
  FileUtils.copyURLToFile(VaultDatasourceTestCase.class.getResource(KEYSTORE_FILENAME),keyStoreFile);
  File datFile1=new File(System.getProperty("java.io.tmpdir"),ENC_DAT_FILE);
  if (datFile1.exists())   datFile1.delete();
  File datFile2=new File(System.getProperty("java.io.tmpdir"),SHARED_DAT_FILE);
  if (datFile2.exists())   datFile2.delete();
  op=new ModelNode();
  op.get(OP).set(READ_ATTRIBUTE_OPERATION);
  op.get(OP_ADDR).add(CORE_SERVICE,VAULT);
  op.get(NAME).set(VAULT_OPTIONS);
  originalVault=(managementClient.getControllerClient().execute(new OperationBuilder(op).build())).get(RESULT);
  op=new ModelNode();
  op.get(OP).set(REMOVE);
  op.get(OP_ADDR).add(CORE_SERVICE,VAULT);
  managementClient.getControllerClient().execute(new OperationBuilder(op).build());
  String keystoreURL=keyStoreFile.getAbsolutePath();
  String keystorePassword="password";
  String encryptionDirectory=System.getProperty("java.io.tmpdir") + File.separator;
  String salt="87654321";
  int iterationCount=20;
  nonInteractiveSession=new VaultSession(keystoreURL,keystorePassword,encryptionDirectory,salt,iterationCount);
  String vaultAlias="vault";
  nonInteractiveSession.startVaultSession(vaultAlias);
  String attributeName="password";
  String vaultPasswordString=nonInteractiveSession.addSecuredAttribute(VAULT_BLOCK,attributeName,RIGHT_PASSWORD.toCharArray());
  String wrongVaultPasswordString=nonInteractiveSession.addSecuredAttribute(VAULT_BLOCK_WRONG,attributeName,WRONG_PASSWORD.toCharArray());
  op=new ModelNode();
  op.get(OP).set(ADD);
  op.get(OP_ADDR).add(CORE_SERVICE,VAULT);
  ModelNode vaultOption=op.get(VAULT_OPTIONS);
  vaultOption.get("KEYSTORE_URL").set(keystoreURL);
  vaultOption.get("KEYSTORE_PASSWORD").set(nonInteractiveSession.getKeystoreMaskedPassword());
  vaultOption.get("KEYSTORE_ALIAS").set(vaultAlias);
  vaultOption.get("SALT").set(salt);
  vaultOption.get("ITERATION_COUNT").set(Integer.toString(iterationCount));
  vaultOption.get("ENC_FILE_DIR").set(encryptionDirectory);
  managementClient.getControllerClient().execute(new OperationBuilder(op).build());
  ModelNode address=new ModelNode();
  address.add(SUBSYSTEM,"datasources");
  address.add("data-source",VAULT_BLOCK);
  address.protect();
  op=new ModelNode();
  op.get(OP).set(ADD);
  op.get(OP_ADDR).set(address);
  op.get("jndi-name").set("java:jboss/datasources/" + VAULT_BLOCK);
  op.get("driver-name").set("h2");
  op.get("connection-url").set("jdbc:h2:tcp://" + Utils.getSecondaryTestAddress(managementClient) + "/mem:test");
  op.get("user-name").set("sa");
  op.get("password").set("${" + vaultPasswordString + "}");
  op.get(OPERATION_HEADERS).get(ALLOW_RESOURCE_SERVICE_RESTART).set(true);
  managementClient.getControllerClient().execute(new OperationBuilder(op).build());
  final ModelNode enableNode=new ModelNode();
  enableNode.get(OP).set(ENABLE);
  enableNode.get(OP_ADDR).add(SUBSYSTEM,"datasources");
  enableNode.get(OP_ADDR).add("data-source",VAULT_BLOCK);
  managementClient.getControllerClient().execute(new OperationBuilder(enableNode).build());
  address=new ModelNode();
  address.add(SUBSYSTEM,"datasources");
  address.add("data-source",VAULT_BLOCK_WRONG);
  address.protect();
  op=new ModelNode();
  op.get(OP).set(ADD);
  op.get(OP_ADDR).set(address);
  op.get("jndi-name").set("java:jboss/datasources/" + VAULT_BLOCK_WRONG);
  op.get("driver-name").set("h2");
  op.get("connection-url").set("jdbc:h2:tcp://" + Utils.getSecondaryTestAddress(managementClient) + "/mem:test");
  op.get("user-name").set("sa");
  op.get("password").set("${" + wrongVaultPasswordString + "}");
  op.get(OPERATION_HEADERS).get(ALLOW_RESOURCE_SERVICE_RESTART).set(true);
  managementClient.getControllerClient().execute(new OperationBuilder(op).build());
  final ModelNode enableNodeWrong=new ModelNode();
  enableNodeWrong.get(OP).set(ENABLE);
  enableNodeWrong.get(OP_ADDR).add(SUBSYSTEM,"datasources");
  enableNodeWrong.get(OP_ADDR).add("data-source",VAULT_BLOCK_WRONG);
  managementClient.getControllerClient().execute(new OperationBuilder(enableNodeWrong).build());
}
