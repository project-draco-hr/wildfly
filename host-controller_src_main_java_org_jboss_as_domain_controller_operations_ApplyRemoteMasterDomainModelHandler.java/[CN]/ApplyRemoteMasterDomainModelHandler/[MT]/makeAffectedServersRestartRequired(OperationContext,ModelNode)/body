{
  final Resource domainRootResource=context.readResourceForUpdate(PathAddress.EMPTY_ADDRESS);
  final ModelNode endRoot=Resource.Tools.readModel(domainRootResource);
  final ModelNode hostModel=endRoot.require(HOST).asPropertyList().iterator().next().getValue();
  final ModelNode existingHostModel=startRoot.require(HOST).asPropertyList().iterator().next().getValue();
  final Set<ServerIdentity> restartServers=new HashSet<ServerIdentity>();
  final Set<ServerIdentity> reloadServers=new HashSet<ServerIdentity>();
  for (  String serverName : hostModel.get(SERVER_CONFIG).keys()) {
    ManagedServerBootConfiguration startConfig=new ManagedServerBootCmdFactory(serverName,startRoot,existingHostModel,hostControllerEnvironment,domainController.getExpressionResolver()).createConfiguration();
    ManagedServerBootConfiguration endConfig=new ManagedServerBootCmdFactory(serverName,endRoot,hostModel,hostControllerEnvironment,domainController.getExpressionResolver()).createConfiguration();
    if (!startConfig.getServerLaunchCommand().equals(endConfig.getServerLaunchCommand())) {
      restartServers.add(createServerIdentity(hostModel,serverName));
      continue;
    }
    ModelNode startOps=createBootOps(context,serverName,startRoot,existingHostModel);
    ModelNode endOps=createBootOps(context,serverName,endRoot,hostModel);
    if (bootOpsChanged(startOps,endOps)) {
      reloadServers.add(createServerIdentity(hostModel,serverName));
    }
  }
  final Map<String,ProxyController> serverProxies=DomainServerUtils.getServerProxies(localHostInfo.getLocalHostName(),domainRootResource,context.getResourceRegistration());
  if (!restartServers.isEmpty()) {
    ROOT_LOGGER.domainModelChangedOnReConnect(restartServers);
    final Set<ServerIdentity> runningServers=DomainServerUtils.getAllRunningServers(hostModel,localHostInfo.getLocalHostName(),serverProxies);
    for (    ServerIdentity serverIdentity : restartServers) {
      if (!runningServers.contains(serverIdentity)) {
        continue;
      }
      addLifecycleStep(context,serverIdentity,ServerProcessStateHandler.REQUIRE_RESTART_OPERATION);
    }
  }
  if (!reloadServers.isEmpty()) {
    ROOT_LOGGER.domainModelChangedOnReConnect(reloadServers);
    final Set<ServerIdentity> runningServers=DomainServerUtils.getAllRunningServers(hostModel,localHostInfo.getLocalHostName(),serverProxies);
    for (    ServerIdentity serverIdentity : reloadServers) {
      if (!runningServers.contains(serverIdentity)) {
        continue;
      }
      addLifecycleStep(context,serverIdentity,ServerProcessStateHandler.REQUIRE_RELOAD_OPERATION);
    }
  }
}
