{
  if (!standalone && !entry.getFlags().contains(OperationEntry.Flag.READ_ONLY)) {
    throw MESSAGES.noOperationCalled(operationName);
  }
  ResourceAccessControl accessControl;
  if (operationName.equals("add")) {
    accessControl=accessControlUtil.getResourceAccess(address,true);
  }
 else {
    ObjectName objectName=ObjectNameAddressUtil.createObjectName(operationName,address);
    accessControl=accessControlUtil.getResourceAccessWithInstanceNotFoundExceptionIfNotAccessible(objectName,address,true);
  }
  if (!accessControl.isExecutableOperation(operationName)) {
    throw MESSAGES.notAuthorizedToExecuteOperation(operationName);
  }
  final ModelNode description=entry.getDescriptionProvider().getModelDescription(null);
  ModelNode op=new ModelNode();
  op.get(OP).set(operationName);
  op.get(OP_ADDR).set(address.toModelNode());
  if (params.length > 0) {
    ModelNode requestProperties=description.require(REQUEST_PROPERTIES);
    Set<String> keys=requestProperties.keys();
    if (keys.size() != params.length) {
      throw MESSAGES.differentLengths("params","description");
    }
    Iterator<String> it=requestProperties.keys().iterator();
    for (int i=0; i < params.length; i++) {
      String attributeName=it.next();
      ModelNode paramDescription=requestProperties.get(attributeName);
      op.get(attributeName).set(converters.toModelNode(paramDescription,params[i]));
    }
  }
  ModelNode result=execute(op);
  String error=getFailureDescription(result);
  if (error != null) {
    if (error.contains(AUTHORIZED_ERROR)) {
      for (      Object param : params) {
        if (isVaultExpression(param)) {
          throw MESSAGES.notAuthorizedToExecuteOperation(operationName);
        }
      }
    }
    throw new ReflectionException(null,error);
  }
  if (!description.hasDefined(REPLY_PROPERTIES)) {
    return null;
  }
  return converters.fromModelNode(description.get(REPLY_PROPERTIES),result.get(RESULT));
}
