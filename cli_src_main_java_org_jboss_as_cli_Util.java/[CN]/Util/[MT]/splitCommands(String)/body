{
  List<String> commands=null;
  int nextOpIndex=0;
  Character expectedClosing=null;
  Deque<Character> expectedClosingStack=null;
  int i=0;
  while (i < line.length()) {
    final char ch=line.charAt(i);
    if (ch == '\\') {
      ++i;
    }
 else     if (expectedClosing != null && expectedClosing == ch) {
      if (expectedClosingStack != null && !expectedClosingStack.isEmpty()) {
        expectedClosing=expectedClosingStack.pop();
      }
 else {
        expectedClosing=null;
      }
    }
 else {
      final Character matchingClosing=wrappingPairs.get(ch);
      if (matchingClosing != null) {
        if (expectedClosing == null) {
          expectedClosing=matchingClosing;
        }
 else {
          if (expectedClosingStack == null) {
            expectedClosingStack=new ArrayDeque<Character>();
          }
          expectedClosingStack.push(expectedClosing);
          expectedClosing=matchingClosing;
        }
      }
 else       if (expectedClosing == null && ch == ',') {
        if (commands == null) {
          commands=new ArrayList<String>();
        }
        commands.add(line.substring(nextOpIndex,i));
        nextOpIndex=i + 1;
      }
    }
    ++i;
  }
  if (commands == null) {
    commands=Collections.singletonList(line);
  }
 else {
    commands.add(line.substring(nextOpIndex,i));
  }
  return commands;
}
