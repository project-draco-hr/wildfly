{
  boolean sawJvm=false;
  boolean sawSystemProperties=false;
  boolean sawSocketBinding=false;
  final Set<String> interfaceNames=new HashSet<String>();
  while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
    requireNamespace(reader,expectedNs);
    final Element element=Element.forName(reader.getLocalName());
switch (element) {
case INTERFACE_SPECS:
{
        parseInterfaces(reader,interfaceNames,serverAddress,expectedNs,list,true);
        break;
      }
case JVM:
{
      if (sawJvm) {
        throw MESSAGES.alreadyDefined(element.getLocalName(),reader.getLocation());
      }
      JvmXml.parseJvm(reader,serverAddress,expectedNs,list,new HashSet<String>(),true);
      sawJvm=true;
      break;
    }
case PATHS:
{
    parsePaths(reader,serverAddress,expectedNs,list,true);
    break;
  }
case SOCKET_BINDING_GROUP:
{
  if (sawSocketBinding) {
    throw MESSAGES.alreadyDefined(element.getLocalName(),reader.getLocation());
  }
  parseSocketBindingGroupRef(reader,serverAddress,list);
  sawSocketBinding=true;
  break;
}
case SYSTEM_PROPERTIES:
{
if (sawSystemProperties) {
  throw MESSAGES.alreadyDefined(element.getLocalName(),reader.getLocation());
}
parseSystemProperties(reader,serverAddress,expectedNs,list,false);
sawSystemProperties=true;
break;
}
default :
throw unexpectedElement(reader);
}
}
}
