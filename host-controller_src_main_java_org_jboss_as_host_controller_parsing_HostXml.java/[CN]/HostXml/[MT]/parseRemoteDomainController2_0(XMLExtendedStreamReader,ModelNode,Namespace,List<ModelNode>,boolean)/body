{
  boolean requireDiscoveryOptions=false;
  boolean hasDiscoveryOptions=false;
switch (expectedNs) {
case DOMAIN_1_1:
case DOMAIN_1_2:
    parseRemoteDomainControllerAttributes_1_0(reader,address,list);
  break;
case DOMAIN_1_3:
case DOMAIN_1_4:
parseRemoteDomainControllerAttributes_1_3(reader,address,list);
break;
default :
requireDiscoveryOptions=parseRemoteDomainControllerAttributes_1_5(reader,address,list,allowDiscoveryOptions);
break;
}
Set<String> types=new HashSet<String>();
Set<String> staticDiscoveryOptionNames=new HashSet<String>();
Set<String> discoveryOptionNames=new HashSet<String>();
while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
requireNamespace(reader,expectedNs);
final Element element=Element.forName(reader.getLocalName());
switch (element) {
case IGNORED_RESOURCE:
{
parseIgnoredResource(reader,address,expectedNs,list,types);
break;
}
case DISCOVERY_OPTIONS:
{
if (!allowDiscoveryOptions) {
throw unexpectedElement(reader);
}
if (hasDiscoveryOptions) {
throw MESSAGES.alreadyDefined(element.getLocalName(),reader.getLocation());
}
parseDiscoveryOptions(reader,address,expectedNs,list,staticDiscoveryOptionNames,discoveryOptionNames);
hasDiscoveryOptions=true;
break;
}
default :
throw unexpectedElement(reader);
}
}
if (requireDiscoveryOptions && !hasDiscoveryOptions) {
throw MESSAGES.discoveryOptionsMustBeDeclared(Element.DISCOVERY_OPTIONS.getLocalName(),Attribute.HOST.getLocalName(),Attribute.PORT.getLocalName(),reader.getLocation());
}
}
