{
  ModelNode op=new ModelNode();
  op.get(OP).set(ADD);
  String type=null;
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    if (!isNoNamespaceAttribute(reader,i)) {
      throw unexpectedAttribute(reader,i);
    }
    final String value=reader.getAttributeValue(i);
    final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case TYPE:
{
        if (!foundTypes.add(value)) {
          throw HostControllerLogger.ROOT_LOGGER.duplicateIgnoredResourceType(Element.IGNORED_RESOURCE.getLocalName(),value,reader.getLocation());
        }
        type=value;
        break;
      }
case WILDCARD:
{
      IgnoredDomainTypeResourceDefinition.WILDCARD.parseAndSetParameter(value,op,reader);
      break;
    }
default :
  throw unexpectedAttribute(reader,i);
}
}
if (type == null) {
throw ParseUtils.missingRequired(reader,Collections.singleton(Attribute.TYPE.getLocalName()));
}
ModelNode addr=op.get(OP_ADDR).set(address);
addr.add(CORE_SERVICE,IGNORED_RESOURCES);
addr.add(IGNORED_RESOURCE_TYPE,type);
while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
requireNamespace(reader,expectedNs);
final Element element=Element.forName(reader.getLocalName());
switch (element) {
case INSTANCE:
{
  String name=ParseUtils.readStringAttributeElement(reader,NAME);
  IgnoredDomainTypeResourceDefinition.NAMES.parseAndAddParameterElement(name,op,reader);
  break;
}
default :
throw unexpectedElement(reader);
}
}
list.add(op);
}
