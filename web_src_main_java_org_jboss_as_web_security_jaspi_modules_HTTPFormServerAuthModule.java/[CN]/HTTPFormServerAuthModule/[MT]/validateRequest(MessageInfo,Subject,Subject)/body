{
  Request request=(Request)messageInfo.getRequestMessage();
  Response response=(Response)messageInfo.getResponseMessage();
  Principal principal;
  context=request.getContext();
  LoginConfig config=context.getLoginConfig();
  Session session=null;
  cache=Boolean.valueOf((String)messageInfo.getMap().get("CACHE"));
  if (!cache) {
    session=request.getSessionInternal(true);
    WebLogger.WEB_SECURITY_LOGGER.debugf("Checking for reauthenticate in session %s",session.getIdInternal());
    String username=(String)session.getNote(Constants.SESS_USERNAME_NOTE);
    String password=(String)session.getNote(Constants.SESS_PASSWORD_NOTE);
    if ((username != null) && (password != null)) {
      WebLogger.WEB_SECURITY_LOGGER.debugf("Reauthenticating username '%s'",username);
      principal=context.getRealm().authenticate(username,password);
      if (principal != null) {
        session.setNote(Constants.FORM_PRINCIPAL_NOTE,principal);
        if (!matchRequest(request)) {
          registerWithCallbackHandler(principal,username,password);
          return AuthStatus.SUCCESS;
        }
      }
      WebLogger.WEB_SECURITY_LOGGER.tracef("Reauthentication failed, proceed normally");
    }
  }
  if (matchRequest(request)) {
    session=request.getSessionInternal(true);
    WebLogger.WEB_SECURITY_LOGGER.tracef("Restore request from session '%s'",session.getIdInternal());
    principal=(Principal)session.getNote(Constants.FORM_PRINCIPAL_NOTE);
    registerWithCallbackHandler(principal,(String)session.getNote(Constants.SESS_USERNAME_NOTE),(String)session.getNote(Constants.SESS_PASSWORD_NOTE));
    if (cache) {
      session.removeNote(Constants.SESS_USERNAME_NOTE);
      session.removeNote(Constants.SESS_PASSWORD_NOTE);
    }
    if (restoreRequest(request,session)) {
      WebLogger.WEB_SECURITY_LOGGER.tracef("Proceed to restored request");
      return (AuthStatus.SUCCESS);
    }
 else {
      WebLogger.WEB_SECURITY_LOGGER.tracef("Restore of original request failed");
      try {
        response.sendError(HttpServletResponse.SC_BAD_REQUEST);
      }
 catch (      IOException e) {
      }
      return AuthStatus.FAILURE;
    }
  }
  MessageBytes uriMB=MessageBytes.newInstance();
  CharChunk uriCC=uriMB.getCharChunk();
  uriCC.setLimit(-1);
  String contextPath=request.getContextPath();
  String requestURI=request.getDecodedRequestURI();
  boolean loginAction=requestURI.startsWith(contextPath) && requestURI.endsWith(Constants.FORM_ACTION);
  if (!loginAction) {
    session=request.getSessionInternal(true);
    WebLogger.WEB_SECURITY_LOGGER.tracef("Save request in session '%s'",session.getIdInternal());
    try {
      saveRequest(request,session);
    }
 catch (    IOException ioe) {
      WebLogger.WEB_SECURITY_LOGGER.tracef("Request body too big to save during authentication");
      try {
        response.sendError(HttpServletResponse.SC_FORBIDDEN,sm.getString("authenticator.requestBodyTooBig"));
      }
 catch (      IOException e) {
        throw new AuthException(e.getLocalizedMessage());
      }
      return (AuthStatus.FAILURE);
    }
    forwardToLoginPage(request,response,config);
    return (AuthStatus.SEND_CONTINUE);
  }
  Realm realm=context.getRealm();
  String characterEncoding=request.getCharacterEncoding();
  if (characterEncoding != null) {
    try {
      request.setCharacterEncoding(characterEncoding);
    }
 catch (    UnsupportedEncodingException e) {
      WebLogger.WEB_SECURITY_LOGGER.unsupportedEncoding(e.getLocalizedMessage());
    }
  }
  String username=request.getParameter(Constants.FORM_USERNAME);
  String password=request.getParameter(Constants.FORM_PASSWORD);
  WebLogger.WEB_SECURITY_LOGGER.tracef("Authenticating username '%s'",username);
  principal=realm.authenticate(username,password);
  if (principal == null) {
    forwardToErrorPage(request,response,config);
    return (AuthStatus.FAILURE);
  }
  WebLogger.WEB_SECURITY_LOGGER.tracef("Authentication of '%s' was successful",username);
  if (session == null)   session=request.getSessionInternal(false);
  if (session == null) {
    WebLogger.WEB_SECURITY_LOGGER.tracef("User took so long to log on the session expired");
    try {
      response.sendError(HttpServletResponse.SC_REQUEST_TIMEOUT,sm.getString("authenticator.sessionExpired"));
    }
 catch (    IOException e) {
    }
    return (AuthStatus.FAILURE);
  }
  session.setNote(Constants.FORM_PRINCIPAL_NOTE,principal);
  session.setNote(Constants.SESS_USERNAME_NOTE,username);
  session.setNote(Constants.SESS_PASSWORD_NOTE,password);
  requestURI=savedRequestURL(session);
  WebLogger.WEB_SECURITY_LOGGER.tracef("Redirecting to original '%s'",requestURI);
  try {
    if (requestURI == null)     response.sendError(HttpServletResponse.SC_BAD_REQUEST,sm.getString("authenticator.formlogin"));
 else     response.sendRedirect(response.encodeRedirectURL(requestURI));
  }
 catch (  IOException ioe) {
  }
  return (AuthStatus.FAILURE);
}
