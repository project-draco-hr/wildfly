{
  URI xpc1_create_url=StatefulServlet.createEmployeeURI(baseURL1);
  URI xpc2_create_url=StatefulServlet.createEmployeeURI(baseURL2);
  URI xpc1_flush_url=StatefulServlet.flushURI(baseURL1);
  URI xpc2_flush_url=StatefulServlet.flushURI(baseURL2);
  URI xpc1_clear_url=StatefulServlet.clearURI(baseURL1);
  URI xpc2_clear_url=StatefulServlet.clearURI(baseURL2);
  URI xpc1_get_url=StatefulServlet.getEmployeeURI(baseURL1);
  URI xpc2_get_url=StatefulServlet.getEmployeeURI(baseURL2);
  URI xpc1_getdestroy_url=StatefulServlet.destroyURI(baseURL2);
  URI xpc1_delete_url=StatefulServlet.deleteEmployeeURI(baseURL1);
  URI xpc2_delete_url=StatefulServlet.deleteEmployeeURI(baseURL2);
  URI xpc1_secondLevelCacheEntries_url=StatefulServlet.getEmployeesIn2LCURI(baseURL1);
  URI xpc2_secondLevelCacheEntries_url=StatefulServlet.getEmployeesIn2LCURI(baseURL2);
  try (CloseableHttpClient client=TestHttpClientUtils.promiscuousCookieHttpClient()){
    assertExecuteUrl(client,StatefulServlet.echoURI(baseURL1,"StartingTestSecondLevelCache"));
    assertExecuteUrl(client,StatefulServlet.echoURI(baseURL2,"StartingTestSecondLevelCache"));
    String employeeName=executeUrlWithAnswer(client,xpc1_create_url,"create entity in node1 in memory db");
    assertEquals(employeeName,"Tom Brady");
    log.info(new Date() + "about to read entity on node1 (from xpc queue)");
    employeeName=executeUrlWithAnswer(client,xpc1_get_url,"on node1, node1 should be able to read entity on node1");
    assertEquals(employeeName,"Tom Brady");
    String employeesInCache=executeUrlWithAnswer(client,xpc1_secondLevelCacheEntries_url,"get number of elements in node1 second level cache (should be zero)");
    assertEquals(employeesInCache,"0");
    assertExecuteUrl(client,xpc1_flush_url);
    assertExecuteUrl(client,xpc1_clear_url);
    employeeName=executeUrlWithAnswer(client,xpc2_create_url,"create entity in node2 in memory db (each node has its own database)");
    assertEquals(employeeName,"Tom Brady");
    assertExecuteUrl(client,xpc2_flush_url);
    assertExecuteUrl(client,xpc2_clear_url);
    employeeName=executeUrlWithAnswer(client,xpc2_get_url,"node2 should be able to read entity from 2lc");
    assertEquals(employeeName,"Tom Brady");
    employeesInCache=executeUrlWithAnswer(client,xpc2_secondLevelCacheEntries_url,"get number of elements in node2 second level cache (should be zero)");
    assertEquals(employeesInCache,"1");
    assertExecuteUrl(client,StatefulServlet.echoURI(baseURL1,"testSecondLevelCacheclearedXPC"));
    assertExecuteUrl(client,StatefulServlet.echoURI(baseURL2,"testSecondLevelCacheclearedXPC"));
    assertExecuteUrl(client,xpc2_delete_url);
    assertExecuteUrl(client,StatefulServlet.echoURI(baseURL1,"testSecondLevelCachedeletedEnityOnNode2"));
    assertExecuteUrl(client,StatefulServlet.echoURI(baseURL1,"2lcOnNode1ShouldHaveZeroElemementsLoaded"));
    employeesInCache=executeUrlWithAnswer(client,xpc1_secondLevelCacheEntries_url,"get number of elements in node1 second level cache (should be zero)");
    assertEquals(employeesInCache,"0");
    employeesInCache=executeUrlWithAnswer(client,xpc2_secondLevelCacheEntries_url,"get number of elements in node2 second level cache (should be zero)");
    assertEquals(employeesInCache,"0");
    assertExecuteUrl(client,xpc1_delete_url);
    String destroyed=executeUrlWithAnswer(client,xpc1_getdestroy_url,"destroy the bean on node1");
    assertEquals(destroyed,"DESTROY");
  }
 }
