{
  ResourceTransformationDescriptionBuilder builder=parent.addChildResource(PATH);
  if (InfinispanModel.VERSION_4_0_0.requiresTransformation(version)) {
    OperationTransformer addTransformer=new OperationTransformer(){
      @Override public ModelNode transformOperation(      ModelNode operation){
        PathAddress cacheAddress=Operations.getPathAddress(operation).getParent();
        ModelNode indexOperation=this.translateParameter(cacheAddress,operation,Attribute.INDEX,CacheResourceDefinition.Attribute.INDEXING);
        ModelNode propertiesOperation=this.translateParameter(cacheAddress,operation,Attribute.PROPERTIES,CacheResourceDefinition.Attribute.INDEXING_PROPERTIES);
        return Operations.createCompositeOperation(indexOperation,propertiesOperation);
      }
      private ModelNode translateParameter(      PathAddress address,      ModelNode operation,      Attribute attribute,      org.jboss.as.clustering.controller.Attribute legacyAttribute){
        String name=attribute.getDefinition().getName();
        return operation.hasDefined(name) ? Operations.createWriteAttributeOperation(address,legacyAttribute,operation.get(name)) : Operations.createUndefineAttributeOperation(address,legacyAttribute);
      }
    }
;
    builder.addRawOperationTransformationOverride(ModelDescriptionConstants.ADD,new SimpleOperationTransformer(addTransformer));
    OperationTransformer removeTransformer=new OperationTransformer(){
      @Override public ModelNode transformOperation(      ModelNode operation){
        PathAddress cacheAddress=Operations.getPathAddress(operation).getParent();
        ModelNode indexOperation=Operations.createUndefineAttributeOperation(cacheAddress,CacheResourceDefinition.Attribute.INDEXING);
        ModelNode propertiesOperation=Operations.createUndefineAttributeOperation(cacheAddress,CacheResourceDefinition.Attribute.INDEXING_PROPERTIES);
        return Operations.createCompositeOperation(indexOperation,propertiesOperation);
      }
    }
;
    builder.addRawOperationTransformationOverride(ModelDescriptionConstants.REMOVE,new SimpleOperationTransformer(removeTransformer));
    OperationTransformer readAttributeTransformer=new OperationTransformer(){
      @Override public ModelNode transformOperation(      ModelNode operation){
        PathAddress cacheAddress=Operations.getPathAddress(operation).getParent();
        String name=Operations.getAttributeName(operation);
        if (Attribute.INDEX.getDefinition().getName().equals(name)) {
          return Operations.createReadAttributeOperation(cacheAddress,CacheResourceDefinition.Attribute.INDEXING);
        }
 else         if (Attribute.PROPERTIES.getDefinition().getName().equals(name)) {
          return Operations.createReadAttributeOperation(cacheAddress,CacheResourceDefinition.Attribute.INDEXING_PROPERTIES);
        }
        return operation;
      }
    }
;
    builder.addRawOperationTransformationOverride(ModelDescriptionConstants.READ_ATTRIBUTE_OPERATION,new SimpleOperationTransformer(readAttributeTransformer));
    OperationTransformer writeAttributeTransformer=new OperationTransformer(){
      @Override public ModelNode transformOperation(      ModelNode operation){
        PathAddress cacheAddress=Operations.getPathAddress(operation).getParent();
        String name=Operations.getAttributeName(operation);
        ModelNode value=Operations.getAttributeValue(operation);
        if (Attribute.INDEX.getDefinition().getName().equals(name)) {
          return Operations.createWriteAttributeOperation(cacheAddress,CacheResourceDefinition.Attribute.INDEXING,value);
        }
 else         if (Attribute.PROPERTIES.getDefinition().getName().equals(name)) {
          return Operations.createWriteAttributeOperation(cacheAddress,CacheResourceDefinition.Attribute.INDEXING_PROPERTIES,value);
        }
        return operation;
      }
    }
;
    builder.addRawOperationTransformationOverride(ModelDescriptionConstants.WRITE_ATTRIBUTE_OPERATION,new SimpleOperationTransformer(writeAttributeTransformer));
    OperationTransformer undefineAttributeTransformer=new OperationTransformer(){
      @Override public ModelNode transformOperation(      ModelNode operation){
        PathAddress cacheAddress=Operations.getPathAddress(operation).getParent();
        String name=Operations.getAttributeName(operation);
        if (Attribute.INDEX.getDefinition().getName().equals(name)) {
          return Operations.createUndefineAttributeOperation(cacheAddress,CacheResourceDefinition.Attribute.INDEXING);
        }
 else         if (Attribute.PROPERTIES.getDefinition().getName().equals(name)) {
          return Operations.createUndefineAttributeOperation(cacheAddress,CacheResourceDefinition.Attribute.INDEXING_PROPERTIES);
        }
        return operation;
      }
    }
;
    builder.addRawOperationTransformationOverride(ModelDescriptionConstants.UNDEFINE_ATTRIBUTE_OPERATION,new SimpleOperationTransformer(undefineAttributeTransformer));
  }
}
