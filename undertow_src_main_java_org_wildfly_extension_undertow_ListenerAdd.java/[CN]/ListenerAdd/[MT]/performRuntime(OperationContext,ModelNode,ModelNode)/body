{
  final PathAddress address=context.getCurrentAddress();
  final PathAddress parent=address.getParent();
  final String name=context.getCurrentAddressValue();
  final String bindingRef=ListenerResourceDefinition.SOCKET_BINDING.resolveModelAttribute(context,model).asString();
  final String workerName=ListenerResourceDefinition.WORKER.resolveModelAttribute(context,model).asString();
  final String bufferPoolName=ListenerResourceDefinition.BUFFER_POOL.resolveModelAttribute(context,model).asString();
  final boolean enabled=ListenerResourceDefinition.ENABLED.resolveModelAttribute(context,model).asBoolean();
  final boolean peerHostLookup=ListenerResourceDefinition.RESOLVE_PEER_ADDRESS.resolveModelAttribute(context,model).asBoolean();
  final boolean secure=ListenerResourceDefinition.SECURE.resolveModelAttribute(context,model).asBoolean();
  OptionMap listenerOptions=OptionList.resolveOptions(context,model,ListenerResourceDefinition.LISTENER_OPTIONS);
  OptionMap socketOptions=OptionList.resolveOptions(context,model,ListenerResourceDefinition.SOCKET_OPTIONS);
  String serverName=parent.getLastElement().getValue();
  final ServiceName listenerServiceName=UndertowService.listenerName(name);
  final ListenerService<? extends ListenerService> service=createService(name,serverName,context,model,listenerOptions,socketOptions);
  if (peerHostLookup) {
    service.addWrapperHandler(new HandlerWrapper(){
      @Override public HttpHandler wrap(      HttpHandler handler){
        return new PeerNameResolvingHandler(handler);
      }
    }
);
  }
  if (secure) {
    service.addWrapperHandler(MarkSecureHandler.WRAPPER);
  }
  List<String> disallowedMethods=ListenerResourceDefinition.DISALLOWED_METHODS.unwrap(context,model);
  if (!disallowedMethods.isEmpty()) {
    final Set<HttpString> methodSet=new HashSet<>();
    for (    String i : disallowedMethods) {
      methodSet.add(new HttpString(i.trim()));
    }
    service.addWrapperHandler(new HandlerWrapper(){
      @Override public HttpHandler wrap(      HttpHandler handler){
        return new DisallowedMethodsHandler(handler,methodSet);
      }
    }
);
  }
  final ServiceName socketBindingServiceName=context.getCapabilityServiceName(ListenerResourceDefinition.SOCKET_CAPABILITY,bindingRef,SocketBinding.class);
  final ServiceName workerServiceName=context.getCapabilityServiceName(ListenerResourceDefinition.IO_WORKER_CAPABILITY,workerName,XnioWorker.class);
  final ServiceName bufferPoolServiceName=context.getCapabilityServiceName(ListenerResourceDefinition.IO_BUFFER_POOL_CAPABILITY,bufferPoolName,Pool.class);
  final ServiceBuilder<? extends ListenerService> serviceBuilder=context.getServiceTarget().addService(listenerServiceName,service);
  serviceBuilder.addDependency(workerServiceName,XnioWorker.class,service.getWorker()).addDependency(socketBindingServiceName,SocketBinding.class,service.getBinding()).addDependency(bufferPoolServiceName,(Injector)service.getBufferPool()).addDependency(UndertowService.SERVER.append(serverName),Server.class,service.getServerService());
  configureAdditionalDependencies(context,serviceBuilder,model,service);
  serviceBuilder.setInitialMode(enabled ? ServiceController.Mode.ACTIVE : ServiceController.Mode.NEVER).install();
}
