{
  final String sessionId=sessionData.getRealId();
  this.trace("storeSessionData(%s)",sessionId);
  Operation<Void> operation=new Operation<Void>(){
    @Override public Void invoke(    Cache<String,Map<Object,Object>> cache){
      Map<Object,Object> map=cache.putIfAbsent(sessionId,null);
      SessionMapEntry.VERSION.put(map,Integer.valueOf(sessionData.getVersion()));
      SessionMapEntry.METADATA.put(map,sessionData.getMetadata());
      SessionMapEntry.TIMESTAMP.put(map,sessionData.getTimestamp());
      try {
        DistributedCacheManager.this.attributeStorage.store(map,sessionData);
      }
 catch (      IOException e) {
        throw MESSAGES.failedToStoreSessionAttributes(e,sessionId);
      }
      return null;
    }
  }
;
  this.invoke(operation);
}
