{
  final Collection<Address> oldMembers=event.getOldMembers();
  final Collection<Address> newMembers=event.getNewMembers();
  final String jvmRoute=this.manager.getJvmRoute();
  Operation<Void> operation=new Operation<Void>(){
    @Override public Void invoke(    Cache<Address,String> cache){
      for (      Address member : oldMembers) {
        if (!newMembers.contains(member)) {
          if (cache.remove(member) != null) {
            ROOT_LOGGER.removedJvmRouteEntry(member);
          }
        }
      }
      if (jvmRoute != null) {
        Address localAddress=event.getLocalAddress();
        if (!oldMembers.contains(localAddress) && newMembers.contains(localAddress)) {
          String oldJvmRoute=cache.put(localAddress,jvmRoute);
          if (oldJvmRoute == null) {
            ROOT_LOGGER.addingJvmRouteEntry();
          }
 else           if (!oldJvmRoute.equals(jvmRoute)) {
            ROOT_LOGGER.updatingJvmRouteEntry(oldJvmRoute,jvmRoute);
          }
        }
      }
      return null;
    }
  }
;
  try {
    this.batch(operation);
  }
 catch (  Throwable e) {
    ROOT_LOGGER.warn(e.getLocalizedMessage(),e);
  }
}
