{
  if (event.isPre())   return;
  List<Address> newAddresses=event.getConsistentHashAtEnd().getMembers();
  if (!newAddresses.get(0).equals(event.getCache().getCacheManager().getAddress()))   return;
  Set<Address> addresses=new HashSet<>(event.getConsistentHashAtStart().getMembers());
  addresses.removeAll(newAddresses);
  final List<Node> nodes=new ArrayList<>(addresses.size());
  for (  Address address : addresses) {
    nodes.add(this.factory.createNode(address));
  }
  Cache<Node,Map.Entry<K,V>> cache=this.cache.getAdvancedCache().withFlags(Flag.FORCE_SYNCHRONOUS);
  Map<K,V> removed=new HashMap<>();
  try (Batch batch=this.batcher.createBatch()){
    for (    Node node : nodes) {
      Map.Entry<K,V> old=cache.remove(node);
      if (old != null) {
        removed.put(old.getKey(),old.getValue());
      }
    }
  }
   if (!removed.isEmpty()) {
    for (    Listener<K,V> listener : this.listeners) {
      listener.removedEntries(removed);
    }
  }
}
