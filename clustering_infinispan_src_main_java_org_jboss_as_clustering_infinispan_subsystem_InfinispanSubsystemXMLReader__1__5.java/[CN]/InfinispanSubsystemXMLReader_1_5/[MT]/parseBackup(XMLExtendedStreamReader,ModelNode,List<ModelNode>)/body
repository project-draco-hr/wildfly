{
  ModelNode operation=Util.createAddOperation();
  String site=null;
  for (int i=0; i < reader.getAttributeCount(); i++) {
    String value=reader.getAttributeValue(i);
    Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case SITE:
{
        site=value;
        break;
      }
case STRATEGY:
{
      BackupSiteResource.STRATEGY.parseAndSetParameter(value,operation,reader);
      break;
    }
case BACKUP_FAILURE_POLICY:
{
    BackupSiteResource.FAILURE_POLICY.parseAndSetParameter(value,operation,reader);
    break;
  }
case TIMEOUT:
{
  BackupSiteResource.REPLICATION_TIMEOUT.parseAndSetParameter(value,operation,reader);
  break;
}
case ENABLED:
{
BackupSiteResource.ENABLED.parseAndSetParameter(value,operation,reader);
break;
}
default :
{
throw ParseUtils.unexpectedAttribute(reader,i);
}
}
}
if (site == null) {
throw ParseUtils.missingRequired(reader,Collections.singleton(Attribute.SITE));
}
PathAddress address=PathAddress.pathAddress(cache.get(OP_ADDR)).append(ModelKeys.BACKUP,site);
operation.get(OP_ADDR).set(address.toModelNode());
while (reader.hasNext() && (reader.nextTag() != XMLStreamConstants.END_ELEMENT)) {
Element element=Element.forName(reader.getLocalName());
switch (element) {
case TAKE_OFFLINE:
{
this.parseTakeOffline(reader,operation);
break;
}
default :
{
throw ParseUtils.unexpectedElement(reader);
}
}
}
operations.add(operation);
}
