{
  final ServerEnvironment serverenv=injectedServerEnvironment.getValue();
  RepositoryStorageFactory factory=new RepositoryStorageFactory(){
    @Override public RepositoryStorage create(    XRepository repository){
      File storageDir=new File(serverenv.getServerDataDir().getPath() + File.separator + "repository");
      return new FileBasedRepositoryStorage(repository,storageDir){
        @Override public XResource addResource(        XResource res) throws RepositoryStorageException {
          if (res.getCapabilities(MODULE_IDENTITY_NAMESPACE).isEmpty()) {
            return super.addResource(res);
          }
 else {
            return res;
          }
        }
      }
;
    }
  }
;
  final BundleContext syscontext=injectedSystemContext.getValue();
  ConfigurationPropertyProvider propProvider=new ConfigurationPropertyProvider(){
    @Override public String getProperty(    String key,    String defaultValue){
      String value=syscontext.getProperty(key);
      return value != null ? value : defaultValue;
    }
  }
;
  AggregatingRepository aggregator=new AggregatingRepository();
  aggregator.addRepository(new ModuleIdentityRepository(serverenv));
  aggregator.addRepository(new MavenRepository(propProvider));
  repository=new AbstractPersistentRepository(factory,aggregator);
  Dictionary<String,Object> props=new Hashtable<String,Object>();
  props.put(Constants.SERVICE_DESCRIPTION,repository.getName());
  registration=syscontext.registerService(SERVICE_NAMES,repository,props);
}
