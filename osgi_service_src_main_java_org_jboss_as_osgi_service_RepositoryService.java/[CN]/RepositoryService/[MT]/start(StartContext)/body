{
  final ConfigurationPropertyProvider propProvider=new ConfigurationPropertyProvider(){
    @Override public String getProperty(    String key,    String defaultValue){
      SubsystemState subsystemState=injectedSubsystemState.getValue();
      String value=subsystemState.getProperties().get(key);
      return value != null ? value : defaultValue;
    }
  }
;
  final ServerEnvironment serverenv=injectedServerEnvironment.getValue();
  RepositoryStorageFactory factory=new RepositoryStorageFactory(){
    @Override public RepositoryStorage create(    XRepository repository){
      File storageDir=getRepositoryStorageDir(propProvider,serverenv);
      return new FileBasedRepositoryStorage(repository,storageDir,propProvider);
    }
  }
;
  AggregatingRepository aggregator=new AggregatingRepository();
  aggregator.addRepository(new ModuleIdentityRepository(serverenv));
  aggregator.addRepository(new MavenDelegateRepository(propProvider));
  repository=new AbstractPersistentRepository(factory,aggregator);
}
