{
  final InputStream initialInput=System.in;
  final PrintStream initialError=System.err;
  StdioContext.install();
  final StdioContext context=StdioContext.create(new NullInputStream(),new LoggingOutputStream(Logger.getLogger("stdout"),Level.INFO),new LoggingOutputStream(Logger.getLogger("stderr"),Level.ERROR));
  StdioContext.setStdioContextSelector(new SimpleStdioContextSelector(context));
  final MarshallerFactory factory=Marshalling.getMarshallerFactory("river");
  try {
    final MarshallingConfiguration configuration=new MarshallingConfiguration();
    configuration.setVersion(2);
    configuration.setClassTable(ModularClassTable.getInstance());
    final Unmarshaller unmarshaller=factory.createUnmarshaller(configuration);
    unmarshaller.start(Marshalling.createByteInput(initialInput));
    final Runnable task=unmarshaller.readObject(Runnable.class);
    unmarshaller.finish();
    unmarshaller.close();
    initialInput.close();
    task.run();
  }
 catch (  Exception e) {
    e.printStackTrace(initialError);
    System.exit(1);
    throw new IllegalStateException();
  }
  for (; ; )   try {
    while (initialInput.read() != -1) {
    }
    break;
  }
 catch (  IOException e) {
  }
}
