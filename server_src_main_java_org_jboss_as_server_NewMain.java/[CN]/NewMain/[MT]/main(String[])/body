{
  SecurityActions.setSystemProperty("log4j.defaultInitOverride","true");
  new BridgeRepositorySelector().start();
  StdioContext.install();
  final StdioContext context=StdioContext.create(new NullInputStream(),new LoggingOutputStream(Logger.getLogger("stdout"),Level.INFO),new LoggingOutputStream(Logger.getLogger("stderr"),Level.ERROR));
  StdioContext.setStdioContextSelector(new SimpleStdioContextSelector(context));
  try {
    ServerEnvironment serverEnvironment=determineEnvironment(args,new Properties(SecurityActions.getSystemProperties()),SecurityActions.getSystemEnvironment());
    if (serverEnvironment == null) {
      abort(null);
    }
 else {
      final NewBootstrap bootstrap=NewBootstrap.Factory.newInstance();
      final NewBootstrap.Configuration configuration=new NewBootstrap.Configuration();
      configuration.setServerEnvironment(serverEnvironment);
      configuration.setModuleLoader(Module.getSystemModuleLoader());
      configuration.setPortOffset(0);
      QName rootElement=new QName(Namespace.CURRENT.getUriString(),"server");
      StandaloneXml parser=new StandaloneXml(Module.getSystemModuleLoader());
      NewConfigurationPersister persister=new TempHackConfigurationPersister(new File(serverEnvironment.getServerConfigurationDir(),"standalone.xml"),rootElement,parser,parser);
      configuration.setConfigurationPersister(persister);
      bootstrap.start(configuration,Collections.<ServiceActivator>emptyList()).get();
      return;
    }
  }
 catch (  Throwable t) {
    abort(t);
  }
}
