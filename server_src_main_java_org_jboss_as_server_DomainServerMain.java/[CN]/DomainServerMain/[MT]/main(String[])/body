{
  final InputStream initialInput=System.in;
  final PrintStream initialError=System.err;
  try {
    Class.forName(ConsoleHandler.class.getName(),true,ConsoleHandler.class.getClassLoader());
  }
 catch (  Throwable ignored) {
  }
  StdioContext.install();
  final StdioContext context=StdioContext.create(new NullInputStream(),new LoggingOutputStream(org.jboss.logmanager.Logger.getLogger("stdout"),Level.INFO),new LoggingOutputStream(org.jboss.logmanager.Logger.getLogger("stderr"),Level.ERROR));
  StdioContext.setStdioContextSelector(new SimpleStdioContextSelector(context));
  final byte[] authKey=new byte[16];
  try {
    org.jboss.as.process.protocol.StreamUtils.readFully(initialInput,authKey);
  }
 catch (  IOException e) {
    e.printStackTrace();
    System.exit(1);
    throw new IllegalStateException();
  }
  final MarshallerFactory factory=Marshalling.getMarshallerFactory("river",DomainServerMain.class.getClassLoader());
  final Unmarshaller unmarshaller;
  final ByteInput byteInput;
  final AsyncFuture<ServiceContainer> containerFuture;
  try {
    Module.registerURLStreamHandlerFactoryModule(Module.getBootModuleLoader().loadModule(ModuleIdentifier.create("org.jboss.vfs")));
    final MarshallingConfiguration configuration=new MarshallingConfiguration();
    configuration.setVersion(2);
    configuration.setClassResolver(new SimpleClassResolver(DomainServerMain.class.getClassLoader()));
    unmarshaller=factory.createUnmarshaller(configuration);
    byteInput=Marshalling.createByteInput(initialInput);
    unmarshaller.start(byteInput);
    final ServerTask task=unmarshaller.readObject(ServerTask.class);
    unmarshaller.finish();
    containerFuture=task.run(Arrays.<ServiceActivator>asList(new ServiceActivator(){
      @Override public void activate(      final ServiceActivatorContext serviceActivatorContext){
      }
    }
));
  }
 catch (  Exception e) {
    e.printStackTrace(initialError);
    System.exit(1);
    throw new IllegalStateException();
  }
 finally {
  }
  for (; ; )   try {
    String hostName=StreamUtils.readUTFZBytes(initialInput);
    int port=StreamUtils.readInt(initialInput);
    boolean managementSubsystemEndpoint=StreamUtils.readBoolean(initialInput);
    byte[] asAuthKey=new byte[16];
    StreamUtils.readFully(initialInput,asAuthKey);
    final ServiceContainer container=containerFuture.get();
    final ServiceController<?> controller=container.getRequiredService(HostControllerServerClient.SERVICE_NAME);
    final HostControllerServerClient client=(HostControllerServerClient)controller.getValue();
    client.reconnect(hostName,port,asAuthKey);
  }
 catch (  InterruptedIOException e) {
    Thread.interrupted();
  }
catch (  EOFException e) {
    break;
  }
catch (  Exception e) {
    e.printStackTrace();
    break;
  }
  System.exit(0);
  throw new IllegalStateException();
}
