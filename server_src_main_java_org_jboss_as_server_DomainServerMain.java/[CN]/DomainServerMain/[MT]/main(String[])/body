{
  System.setProperty("log4j.defaultInitOverride","true");
  new BridgeRepositorySelector().start();
  final InputStream initialInput=System.in;
  final PrintStream initialError=System.err;
  StdioContext.install();
  final StdioContext context=StdioContext.create(new NullInputStream(),new LoggingOutputStream(org.jboss.logmanager.Logger.getLogger("stdout"),Level.INFO),new LoggingOutputStream(org.jboss.logmanager.Logger.getLogger("stderr"),Level.ERROR));
  StdioContext.setStdioContextSelector(new SimpleStdioContextSelector(context));
  final MarshallerFactory factory;
  try {
    factory=Marshalling.getMarshallerFactory("river",Module.getModuleFromDefaultLoader(ModuleIdentifier.fromString("org.jboss.marshalling.river")).getClassLoader());
  }
 catch (  ModuleLoadException e) {
    throw new IllegalStateException("Failed to start server",e);
  }
  try {
    final MarshallingConfiguration configuration=new MarshallingConfiguration();
    configuration.setVersion(2);
    configuration.setClassTable(ModularClassTable.getInstance());
    final Unmarshaller unmarshaller=factory.createUnmarshaller(configuration);
    unmarshaller.start(Marshalling.createByteInput(initialInput));
    final ServerTask task=unmarshaller.readObject(ServerTask.class);
    unmarshaller.finish();
    task.run(Collections.<ServiceActivator>emptyList());
  }
 catch (  Exception e) {
    e.printStackTrace(initialError);
    System.exit(1);
    throw new IllegalStateException();
  }
  for (; ; )   try {
    while (initialInput.read() != -1) {
    }
    break;
  }
 catch (  InterruptedIOException e) {
    Thread.interrupted();
  }
catch (  Exception e) {
    break;
  }
  System.exit(0);
  throw new IllegalStateException();
}
