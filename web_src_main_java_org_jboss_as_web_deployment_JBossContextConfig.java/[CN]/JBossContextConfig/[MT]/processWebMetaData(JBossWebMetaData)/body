{
  if (context instanceof StandardContext) {
    ((StandardContext)context).setReplaceWelcomeFiles(true);
  }
  context.setVersion(metaData.getVersion());
  if (metaData.is30())   context.setPublicId("/javax/servlet/resources/web-app_3_0.dtd");
 else   if (metaData.is25())   context.setPublicId("/javax/servlet/resources/web-app_2_5.dtd");
 else   if (metaData.is24())   context.setPublicId("/javax/servlet/resources/web-app_2_4.dtd");
 else   if (metaData.is23())   context.setPublicId(org.apache.catalina.startup.Constants.WebDtdPublicId_23);
 else   context.setPublicId(org.apache.catalina.startup.Constants.WebDtdPublicId_22);
  DescriptionGroupMetaData dg=metaData.getDescriptionGroup();
  if (dg != null) {
    String displayName=dg.getDisplayName();
    if (displayName != null) {
      context.setDisplayName(displayName);
    }
  }
  Module module=this.deploymentUnitContext.getAttachment(Attachments.MODULE);
  if (module != null && metaData.getDistributable() != null) {
    try {
      ClassResolver resolver=ModularClassResolver.getInstance(module.getModuleLoader());
      context.setManager(new DistributableSessionManager<OutgoingDistributableSessionData>(this.factory.getValue(),metaData,new ClassLoaderAwareClassResolver(resolver,module.getClassLoader())));
      context.setDistributable(true);
    }
 catch (    Exception e) {
      WebLogger.WEB_LOGGER.clusteringNotSupported();
    }
  }
  List<ParamValueMetaData> contextParams=metaData.getContextParams();
  if (contextParams != null) {
    for (    ParamValueMetaData param : contextParams) {
      context.addParameter(param.getParamName(),param.getParamValue());
    }
  }
  List<ErrorPageMetaData> errorPages=metaData.getErrorPages();
  if (errorPages != null) {
    for (    ErrorPageMetaData value : errorPages) {
      org.apache.catalina.deploy.ErrorPage errorPage=new org.apache.catalina.deploy.ErrorPage();
      errorPage.setErrorCode(value.getErrorCode());
      errorPage.setExceptionType(value.getExceptionType());
      errorPage.setLocation(value.getLocation());
      context.addErrorPage(errorPage);
    }
  }
  FiltersMetaData filters=metaData.getFilters();
  if (filters != null) {
    for (    FilterMetaData value : filters) {
      org.apache.catalina.deploy.FilterDef filterDef=new org.apache.catalina.deploy.FilterDef();
      filterDef.setFilterName(value.getName());
      filterDef.setFilterClass(value.getFilterClass());
      if (value.getInitParam() != null)       for (      ParamValueMetaData param : value.getInitParam()) {
        filterDef.addInitParameter(param.getParamName(),param.getParamValue());
      }
      filterDef.setAsyncSupported(value.isAsyncSupported());
      context.addFilterDef(filterDef);
    }
  }
  List<FilterMappingMetaData> filtersMappings=metaData.getFilterMappings();
  if (filtersMappings != null) {
    for (    FilterMappingMetaData value : filtersMappings) {
      org.apache.catalina.deploy.FilterMap filterMap=new org.apache.catalina.deploy.FilterMap();
      filterMap.setFilterName(value.getFilterName());
      List<String> servletNames=value.getServletNames();
      if (servletNames != null) {
        for (        String name : servletNames)         filterMap.addServletName(name);
      }
      List<String> urlPatterns=value.getUrlPatterns();
      if (urlPatterns != null) {
        for (        String pattern : urlPatterns)         filterMap.addURLPattern(pattern);
      }
      List<DispatcherType> dispatchers=value.getDispatchers();
      if (dispatchers != null) {
        for (        DispatcherType type : dispatchers)         filterMap.setDispatcher(type.name());
      }
      context.addFilterMap(filterMap);
    }
  }
  List<ListenerMetaData> listeners=metaData.getListeners();
  if (listeners != null) {
    for (    ListenerMetaData value : listeners) {
      context.addApplicationListener(value.getListenerClass());
    }
  }
  LoginConfigMetaData loginConfig=metaData.getLoginConfig();
  if (loginConfig != null) {
    org.apache.catalina.deploy.LoginConfig loginConfig2=new org.apache.catalina.deploy.LoginConfig();
    loginConfig2.setAuthMethod(loginConfig.getAuthMethod());
    loginConfig2.setRealmName(loginConfig.getRealmName());
    if (loginConfig.getFormLoginConfig() != null) {
      loginConfig2.setLoginPage(loginConfig.getFormLoginConfig().getLoginPage());
      loginConfig2.setErrorPage(loginConfig.getFormLoginConfig().getErrorPage());
    }
    context.setLoginConfig(loginConfig2);
  }
  List<MimeMappingMetaData> mimes=metaData.getMimeMappings();
  if (mimes != null) {
    for (    MimeMappingMetaData value : mimes) {
      context.addMimeMapping(value.getExtension(),value.getMimeType());
    }
  }
  List<SecurityConstraintMetaData> scs=metaData.getSecurityConstraints();
  if (scs != null) {
    for (    SecurityConstraintMetaData value : scs) {
      org.apache.catalina.deploy.SecurityConstraint constraint=new org.apache.catalina.deploy.SecurityConstraint();
      TransportGuaranteeType tg=value.getTransportGuarantee();
      constraint.setUserConstraint(tg.name());
      AuthConstraintMetaData acmd=value.getAuthConstraint();
      constraint.setAuthConstraint(acmd != null);
      if (acmd != null) {
        if (acmd.getRoleNames() != null)         for (        String role : acmd.getRoleNames()) {
          constraint.addAuthRole(role);
        }
      }
      WebResourceCollectionsMetaData wrcs=value.getResourceCollections();
      if (wrcs != null) {
        for (        WebResourceCollectionMetaData wrc : wrcs) {
          org.apache.catalina.deploy.SecurityCollection collection2=new org.apache.catalina.deploy.SecurityCollection();
          collection2.setName(wrc.getName());
          List<String> methods=wrc.getHttpMethods();
          if (methods != null) {
            for (            String method : wrc.getHttpMethods()) {
              collection2.addMethod(method);
            }
          }
          List<String> methodOmissions=wrc.getHttpMethodOmissions();
          if (methodOmissions != null) {
            for (            String method : wrc.getHttpMethodOmissions()) {
              collection2.addMethodOmission(method);
            }
          }
          List<String> patterns=wrc.getUrlPatterns();
          if (patterns != null) {
            for (            String pattern : patterns) {
              collection2.addPattern(pattern);
            }
          }
          constraint.addCollection(collection2);
        }
      }
      context.addConstraint(constraint);
    }
  }
  SecurityRolesMetaData roles=metaData.getSecurityRoles();
  if (roles != null) {
    for (    SecurityRoleMetaData value : roles) {
      context.addSecurityRole(value.getRoleName());
    }
  }
  JBossServletsMetaData servlets=metaData.getServlets();
  if (servlets != null) {
    for (    JBossServletMetaData value : servlets) {
      org.apache.catalina.Wrapper wrapper=context.createWrapper();
      wrapper.setName(value.getName());
      wrapper.setServletClass(value.getServletClass());
      if (value.getJspFile() != null) {
        wrapper.setJspFile(value.getJspFile());
      }
      wrapper.setLoadOnStartup(value.getLoadOnStartupInt());
      if (value.getRunAs() != null) {
        wrapper.setRunAs(value.getRunAs().getRoleName());
      }
      List<ParamValueMetaData> params=value.getInitParam();
      if (params != null) {
        for (        ParamValueMetaData param : params) {
          wrapper.addInitParameter(param.getParamName(),param.getParamValue());
        }
      }
      SecurityRoleRefsMetaData refs=value.getSecurityRoleRefs();
      if (refs != null) {
        for (        SecurityRoleRefMetaData ref : refs) {
          wrapper.addSecurityReference(ref.getRoleName(),ref.getRoleLink());
        }
      }
      wrapper.setAsyncSupported(value.isAsyncSupported());
      wrapper.setEnabled(value.isEnabled());
      if (value.getMultipartConfig() != null) {
        MultipartConfigMetaData multipartConfigMetaData=value.getMultipartConfig();
        Multipart multipartConfig=new Multipart();
        multipartConfig.setLocation(multipartConfigMetaData.getLocation());
        multipartConfig.setMaxRequestSize(multipartConfigMetaData.getMaxRequestSize());
        multipartConfig.setMaxFileSize(multipartConfigMetaData.getMaxFileSize());
        multipartConfig.setFileSizeThreshold(multipartConfigMetaData.getFileSizeThreshold());
        wrapper.setMultipartConfig(multipartConfig);
      }
      context.addChild(wrapper);
    }
  }
  List<ServletMappingMetaData> smappings=metaData.getServletMappings();
  if (smappings != null) {
    for (    ServletMappingMetaData value : smappings) {
      List<String> urlPatterns=value.getUrlPatterns();
      if (urlPatterns != null) {
        for (        String pattern : urlPatterns)         context.addServletMapping(pattern,value.getServletName());
      }
    }
  }
  JspConfigMetaData config=metaData.getJspConfig();
  if (config != null) {
    List<JspPropertyGroupMetaData> groups=config.getPropertyGroups();
    if (groups != null) {
      for (      JspPropertyGroupMetaData group : groups) {
        org.apache.catalina.deploy.JspPropertyGroup jspPropertyGroup=new org.apache.catalina.deploy.JspPropertyGroup();
        for (        String pattern : group.getUrlPatterns()) {
          jspPropertyGroup.addUrlPattern(pattern);
        }
        jspPropertyGroup.setElIgnored(group.getElIgnored());
        jspPropertyGroup.setPageEncoding(group.getPageEncoding());
        jspPropertyGroup.setScriptingInvalid(group.getScriptingInvalid());
        jspPropertyGroup.setIsXml(group.getIsXml());
        if (group.getIncludePreludes() != null) {
          for (          String includePrelude : group.getIncludePreludes()) {
            jspPropertyGroup.addIncludePrelude(includePrelude);
          }
        }
        if (group.getIncludeCodas() != null) {
          for (          String includeCoda : group.getIncludeCodas()) {
            jspPropertyGroup.addIncludeCoda(includeCoda);
          }
        }
        jspPropertyGroup.setDeferredSyntaxAllowedAsLiteral(group.getDeferredSyntaxAllowedAsLiteral());
        jspPropertyGroup.setTrimDirectiveWhitespaces(group.getTrimDirectiveWhitespaces());
        jspPropertyGroup.setDefaultContentType(group.getDefaultContentType());
        jspPropertyGroup.setBuffer(group.getBuffer());
        jspPropertyGroup.setErrorOnUndeclaredNamespace(group.getErrorOnUndeclaredNamespace());
        context.addJspPropertyGroup(jspPropertyGroup);
      }
    }
    List<TaglibMetaData> taglibs=config.getTaglibs();
    if (taglibs != null) {
      for (      TaglibMetaData taglib : taglibs) {
        context.addTaglib(taglib.getTaglibUri(),taglib.getTaglibLocation());
      }
    }
  }
  LocaleEncodingsMetaData locales=metaData.getLocalEncodings();
  if (locales != null) {
    for (    LocaleEncodingMetaData value : locales.getMappings()) {
      context.addLocaleEncodingMappingParameter(value.getLocale(),value.getEncoding());
    }
  }
  WelcomeFileListMetaData welcomeFiles=metaData.getWelcomeFileList();
  if (welcomeFiles != null) {
    for (    String value : welcomeFiles.getWelcomeFiles())     context.addWelcomeFile(value);
  }
  SessionConfigMetaData scmd=metaData.getSessionConfig();
  if (scmd != null) {
    context.setSessionTimeout(scmd.getSessionTimeout());
    if (scmd.getSessionTrackingModes() != null) {
      for (      SessionTrackingModeType stmt : scmd.getSessionTrackingModes()) {
        context.addSessionTrackingMode(stmt.toString());
      }
    }
    if (scmd.getCookieConfig() != null) {
      CookieConfigMetaData value=scmd.getCookieConfig();
      org.apache.catalina.deploy.SessionCookie cookieConfig=new org.apache.catalina.deploy.SessionCookie();
      cookieConfig.setName(value.getName());
      cookieConfig.setDomain(value.getDomain());
      cookieConfig.setPath(value.getPath());
      cookieConfig.setComment(value.getComment());
      cookieConfig.setHttpOnly(value.getHttpOnly());
      cookieConfig.setSecure(value.getSecure());
      cookieConfig.setMaxAge(value.getMaxAge());
      context.setSessionCookie(cookieConfig);
    }
  }
}
