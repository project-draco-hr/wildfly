{
  ClassLoader old=WildFlySecurityManager.setCurrentContextClassLoaderPrivileged(getClass());
  try {
    final TimerImpl timer=timerService.getTimer(timerId);
    try {
      if (cancelled) {
        EJB3_TIMER_LOGGER.debugf("Timer task was cancelled for %s",timer);
        return;
      }
      Date now=new Date();
      EJB3_TIMER_LOGGER.debugf("Timer task invoked at: %s for timer %s",now,timer);
      if (timer.isInRetry()) {
        EJB3_TIMER_LOGGER.skipInvokeTimeoutDuringRetry(timer,now);
        timer.setNextTimeout(calculateNextTimeout(timer));
        timerService.persistTimer(timer,false);
        scheduleTimeoutIfRequired(timer);
        return;
      }
      if (timer.getState() == TimerState.IN_TIMEOUT || timer.getState() == TimerState.RETRY_TIMEOUT) {
        EJB3_TIMER_LOGGER.skipOverlappingInvokeTimeout(timer,now);
        timer.setNextTimeout(this.calculateNextTimeout(timer));
        timerService.persistTimer(timer,false);
        scheduleTimeoutIfRequired(timer);
        return;
      }
      if (!timerService.shouldRun(timer)) {
        EJB3_TIMER_LOGGER.debugf("Skipping execution of timer for %s as it is being run on another node or the execution is suppressed by configuration",timer.getTimedObjectId());
        timer.setNextTimeout(calculateNextTimeout(timer));
        scheduleTimeoutIfRequired(timer);
        return;
      }
      timer.lock();
      try {
        if (!timer.isActive()) {
          EJB3_TIMER_LOGGER.debug("Timer is not active, skipping this scheduled execution at: " + now + "for "+ timer);
          return;
        }
        timer.setPreviousRun(new Date());
        Date nextTimeout=this.calculateNextTimeout(timer);
        timer.setNextTimeout(nextTimeout);
        timer.setTimerState(TimerState.IN_TIMEOUT);
        timerService.persistTimer(timer,false);
      }
  finally {
        timer.unlock();
      }
      try {
        this.callTimeout(timer);
      }
 catch (      BeanRemovedException e) {
        EJB3_TIMER_LOGGER.debugf("Removing timer %s as EJB has been removed ",timer);
        timer.cancel();
      }
catch (      Exception e) {
        EJB3_TIMER_LOGGER.errorInvokeTimeout(timer,e);
        try {
          EJB3_TIMER_LOGGER.timerRetried(timer);
          retryTimeout(timer);
        }
 catch (        Exception retryException) {
          EJB3_TIMER_LOGGER.errorDuringRetryTimeout(timer,retryException);
        }
      }
 finally {
        this.postTimeoutProcessing(timer);
      }
    }
 catch (    Exception e) {
      EJB3_TIMER_LOGGER.exceptionRunningTimerTask(timer,timedObjectId,e);
    }
  }
  finally {
    WildFlySecurityManager.setCurrentContextClassLoaderPrivileged(old);
  }
}
