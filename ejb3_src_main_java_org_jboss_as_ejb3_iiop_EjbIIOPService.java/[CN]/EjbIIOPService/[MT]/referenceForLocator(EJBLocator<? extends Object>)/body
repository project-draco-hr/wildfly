{
  final EJBComponent ejbComponent=ejbComponentInjectedValue.getValue();
  try {
    final String earApplicationName=ejbComponent.getEarApplicationName() == null ? "" : ejbComponent.getEarApplicationName();
    if (locator.getBeanName().equals(ejbComponent.getComponentName()) && locator.getAppName().equals(earApplicationName) && locator.getModuleName().equals(ejbComponent.getModuleName())&& locator.getDistinctName().equals(ejbComponent.getDistinctName())) {
      if (locator instanceof EJBHomeLocator) {
        return ejbHome;
      }
 else       if (locator instanceof StatelessEJBLocator) {
        return beanReferenceFactory.createReference(beanRepositoryIds[0]);
      }
 else       if (locator instanceof StatefulEJBLocator) {
        final Marshaller marshaller=factory.createMarshaller(configuration);
        final ByteArrayOutputStream stream=new ByteArrayOutputStream();
        marshaller.start(new OutputStreamByteOutput(stream));
        marshaller.writeObject(((StatefulEJBLocator)locator).getSessionId());
        marshaller.finish();
        return beanReferenceFactory.createReferenceWithId(stream.toByteArray(),beanRepositoryIds[0]);
      }
 else       if (locator instanceof EntityEJBLocator) {
        final Marshaller marshaller=factory.createMarshaller(configuration);
        final ByteArrayOutputStream stream=new ByteArrayOutputStream();
        marshaller.start(new OutputStreamByteOutput(stream));
        marshaller.writeObject(((EntityEJBLocator)locator).getPrimaryKey());
        marshaller.finish();
        return beanReferenceFactory.createReferenceWithId(stream.toByteArray(),beanRepositoryIds[0]);
      }
      throw new RuntimeException("Unkown locator type " + locator);
    }
 else {
      throw new IllegalArgumentException("Provided locator " + locator + " was not for EJB "+ ejbComponent);
    }
  }
 catch (  Exception e) {
    throw new RuntimeException("Could not create CORBA Object for " + locator + " for EJB "+ ejbComponent,e);
  }
}
