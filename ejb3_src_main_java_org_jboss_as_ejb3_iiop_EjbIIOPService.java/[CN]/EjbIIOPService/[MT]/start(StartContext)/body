{
  try {
    final RiverMarshallerFactory factory=new RiverMarshallerFactory();
    final MarshallingConfiguration configuration=new MarshallingConfiguration();
    configuration.setClassResolver(ModularClassResolver.getInstance(serviceModuleLoaderInjectedValue.getValue()));
    this.configuration=configuration;
    this.factory=factory;
    final boolean interfaceRepositorySupported=false;
    final EJBComponent component=ejbComponentInjectedValue.getValue();
    final String earApplicationName=component.getEarApplicationName();
    if (useQualifiedName) {
      if (component.getDistinctName() == null || component.getDistinctName().isEmpty()) {
        name=earApplicationName == null || earApplicationName.isEmpty() ? "" : earApplicationName + "/";
        name=name + component.getModuleName() + "/"+ component.getComponentName();
      }
 else {
        name=earApplicationName == null || earApplicationName.isEmpty() ? "" : earApplicationName + "/";
        name=name + component.getModuleName() + "/"+ component.getDistinctName()+ "/"+ component.getComponentName();
      }
    }
 else {
      name=component.getComponentName();
    }
    name=name.replace(".","_");
    final ORB orb=this.orb.getValue();
    if (interfaceRepositorySupported) {
      iri=new InterfaceRepository(orb,irPoa.getValue(),name);
      iri.mapClass(remoteView.getValue().getViewClass());
      iri.mapClass(homeView.getValue().getViewClass());
      iri.finishBuild();
      logger.info("CORBA interface repository for " + name + ": "+ orb.object_to_string(iri.getReference()));
    }
    IORSecurityConfigMetaData iorSecurityConfigMetaData=null;
    if (this.iiopMetaData != null)     iorSecurityConfigMetaData=this.iiopMetaData.getIorSecurityConfigMetaData();
    List<Policy> policyList=new ArrayList<Policy>();
    if (iorSecurityConfigMetaData != null) {
      final Any secPolicy=orb.create_any();
      secPolicy.insert_Value(iorSecurityConfigMetaData);
      Policy csiv2Policy=orb.create_policy(CSIv2Policy.TYPE,secPolicy);
      policyList.add(csiv2Policy);
      boolean sslRequired=false;
      if (iorSecurityConfigMetaData != null) {
        IORTransportConfigMetaData tc=iorSecurityConfigMetaData.getTransportConfig();
        sslRequired=IORTransportConfigMetaData.INTEGRITY_REQUIRED.equals(tc.getIntegrity()) || IORTransportConfigMetaData.CONFIDENTIALITY_REQUIRED.equals(tc.getConfidentiality()) || IORTransportConfigMetaData.ESTABLISH_TRUST_IN_CLIENT_REQUIRED.equals(tc.getEstablishTrustInClient());
      }
      final Any sslPolicyValue=orb.create_any();
      SSLPolicyValueHelper.insert(sslPolicyValue,(sslRequired) ? SSLPolicyValue.SSL_REQUIRED : SSLPolicyValue.SSL_NOT_REQUIRED);
      Policy sslPolicy=orb.create_policy(SSL_POLICY_TYPE.value,sslPolicyValue);
      policyList.add(sslPolicy);
      logger.debug("container's SSL policy: " + sslPolicy);
    }
    Policy[] policies=policyList.toArray(new Policy[policyList.size()]);
    InterfaceDef homeInterfaceDef=null;
    if (iri != null) {
      Repository ir=iri.getReference();
      homeInterfaceDef=InterfaceDefHelper.narrow(ir.lookup_id(homeRepositoryIds[0]));
    }
    final EjbHomeCorbaServant homeServant=new EjbHomeCorbaServant(homeMethodMap,homeRepositoryIds,homeInterfaceDef,orb,homeView.getValue(),component.getTransactionManager(),module.getClassLoader());
    homeServantRegistry=poaRegistry.getValue().getRegistryWithPersistentPOAPerServant();
    ReferenceFactory homeReferenceFactory=homeServantRegistry.bind(homeServantName(name),homeServant,policies);
    final org.omg.CORBA.Object corbaRef=homeReferenceFactory.createReference(homeRepositoryIds[0]);
    ejbHome=(EJBHome)PortableRemoteObject.narrow(corbaRef,EJBHome.class);
    final HomeHandleImplIIOP homeHandle=new HomeHandleImplIIOP(orb.object_to_string(corbaRef));
    homeServant.setHomeHandle(homeHandle);
    if (component instanceof EntityBeanComponent) {
      beanServantRegistry=poaRegistry.getValue().getRegistryWithPersistentPOAPerServant();
      final EntityBeanComponent entityBeanComponent=(EntityBeanComponent)component;
      final Class pkClass=entityBeanComponent.getPrimaryKeyClass();
      ejbMetaData=new EJBMetaDataImplIIOP(entityBeanComponent.getRemoteClass(),entityBeanComponent.getHomeClass(),pkClass,false,false,homeHandle);
    }
 else {
      beanServantRegistry=poaRegistry.getValue().getRegistryWithTransientPOAPerServant();
      if (component instanceof StatelessSessionComponent) {
        ejbMetaData=new EJBMetaDataImplIIOP(remoteView.getValue().getViewClass(),homeView.getValue().getViewClass(),null,true,true,homeHandle);
      }
 else {
        ejbMetaData=new EJBMetaDataImplIIOP(remoteView.getValue().getViewClass(),homeView.getValue().getViewClass(),null,true,false,homeHandle);
      }
    }
    homeServant.setEjbMetaData(ejbMetaData);
    InterfaceDef beanInterfaceDef=null;
    if (iri != null) {
      final Repository ir=iri.getReference();
      beanInterfaceDef=InterfaceDefHelper.narrow(ir.lookup_id(beanRepositoryIds[0]));
    }
    Current poaCurrent=CurrentHelper.narrow(orb.resolve_initial_references("POACurrent"));
    final EjbObjectCorbaServant beanServant=new EjbObjectCorbaServant(poaCurrent,beanMethodMap,beanRepositoryIds,beanInterfaceDef,orb,remoteView.getValue(),factory,configuration,component.getTransactionManager(),module.getClassLoader());
    beanReferenceFactory=beanServantRegistry.bind(beanServantName(name),beanServant,policies);
    this.bindingName=this.iiopMetaData != null ? this.iiopMetaData.getBindingName() : null;
    if (this.bindingName == null || this.bindingName.isEmpty())     this.bindingName=this.name;
    rebind(corbaNamingContext.getValue(),bindingName,corbaRef);
    logger.debug("Home IOR for " + component.getComponentName() + " bound to "+ this.bindingName+ " in CORBA naming service");
  }
 catch (  Exception e) {
    throw new StartException(e);
  }
}
