{
  super("if",true);
  condition=new ArgumentWithValue(this,0,"--condition");
  condition.addCantAppearAfter(helpArg);
  of=new ArgumentWithValue(this,new DefaultCompleter(new CandidatesProvider(){
    @Override public Collection<String> getAllCandidates(    CommandContext ctx){
      return Collections.singletonList("of");
    }
  }
),1,"--of");
  of.addRequiredPreceding(condition);
  final ArgumentWithValue line=new ArgumentWithValue(this,new CommandLineCompleter(){
    @Override public int complete(    CommandContext ctx,    String buffer,    int cursor,    List<String> candidates){
      final ParsedCommandLine args=ctx.getParsedCommandLine();
      final String lnStr=of.getValue(args);
      if (lnStr == null) {
        return -1;
      }
      final String originalLine=args.getOriginalLine();
      String conditionStr;
      try {
        conditionStr=condition.getValue(args,true);
      }
 catch (      CommandFormatException e) {
        return -1;
      }
      int i=originalLine.indexOf(conditionStr);
      if (i < 0) {
        return -1;
      }
      i=originalLine.indexOf("of ",i + conditionStr.length());
      if (i < 0) {
        return -1;
      }
      final String cmd=originalLine.substring(i + 3);
      int cmdResult=ctx.getDefaultCommandCompleter().complete(ctx,cmd,0,candidates);
      if (cmdResult < 0) {
        return cmdResult;
      }
      int escapeCorrection=0;
      int start=originalLine.length() - 1 - buffer.length();
      while (start - escapeCorrection >= 0) {
        final char ch=originalLine.charAt(start - escapeCorrection);
        if (Character.isWhitespace(ch) || ch == '=') {
          break;
        }
        ++escapeCorrection;
      }
      return buffer.length() + escapeCorrection - (cmd.length() - cmdResult);
    }
  }
,Integer.MAX_VALUE,"--line"){
  }
;
  line.addRequiredPreceding(of);
}
