{
  try {
    KeyManager[] keyManagers=null;
    FileKeystore theKeyStore=keystore.getOptionalValue();
    if (theKeyStore != null && theKeyStore.getKeyStore() != null) {
      KeyManagerFactory keyManagerFactory=KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());
      keyManagerFactory.init(theKeyStore.getKeyStore(),keyPassword == null ? keystorePassword : keyPassword);
      keyManagers=keyManagerFactory.getKeyManagers();
    }
    TrustManager[] trustManagers=null;
    FileKeystore theTrustStore=truststore.getOptionalValue();
    if (theTrustStore != null) {
      trustManagerFactory=TrustManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());
      trustManagerFactory.init(theTrustStore.getKeyStore());
      TrustManager[] tmpTrustManagers=trustManagerFactory.getTrustManagers();
      trustManagers=new TrustManager[tmpTrustManagers.length];
      for (int i=0; i < tmpTrustManagers.length; i++) {
        trustManagers[i]=new DelegatingTrustManager((X509TrustManager)tmpTrustManagers[i],theTrustStore);
      }
    }
    SSLContext sslContext=SSLContext.getInstance(protocol);
    sslContext.init(keyManagers,trustManagers,null);
    this.fullContext=sslContext;
    if (keyManagers != null) {
      sslContext=SSLContext.getInstance(protocol);
      sslContext.init(null,trustManagers,null);
    }
    trustOnlyContext=sslContext;
  }
 catch (  NoSuchAlgorithmException nsae) {
    throw MESSAGES.unableToStart(nsae);
  }
catch (  KeyManagementException kme) {
    throw MESSAGES.unableToStart(kme);
  }
catch (  KeyStoreException kse) {
    throw MESSAGES.unableToStart(kse);
  }
catch (  UnrecoverableKeyException e) {
    throw MESSAGES.unableToStart(e);
  }
}
