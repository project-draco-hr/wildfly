{
  try {
    KeyManager[] keyManagers=null;
    String protocol="TLS";
    if (ssl.has(PROTOCOL)) {
      protocol=ssl.get(PROTOCOL).asString();
    }
    if (ssl.has(KEYSTORE)) {
      ModelNode keystoreNode=ssl.get(KEYSTORE);
      String relativeTo=this.relativeTo.getOptionalValue();
      String path=keystoreNode.require(PATH).asString();
      String file=relativeTo == null ? path : relativeTo + "/" + path;
      char[] password=keystoreNode.require(PASSWORD).asString().toCharArray();
      KeyStore keystore=KeyStore.getInstance("JKS");
      FileInputStream fis=new FileInputStream(file);
      keystore.load(fis,password);
      KeyManagerFactory keyManagerFactory=KeyManagerFactory.getInstance("SunX509");
      keyManagerFactory.init(keystore,password);
      keyManagers=keyManagerFactory.getKeyManagers();
    }
    SSLContext sslContext=SSLContext.getInstance(protocol);
    sslContext.init(keyManagers,null,null);
    this.sslContext=sslContext;
  }
 catch (  NoSuchAlgorithmException nsae) {
    throw new StartException("Unable to start service",nsae);
  }
catch (  KeyManagementException kme) {
    throw new StartException("Unable to start service",kme);
  }
catch (  KeyStoreException kse) {
    throw new StartException("Unable to start service",kse);
  }
catch (  FileNotFoundException fnfe) {
    throw new StartException("Unable to start service",fnfe);
  }
catch (  CertificateException e) {
    throw new StartException("Unable to start service",e);
  }
catch (  IOException e) {
    throw new StartException("Unable to start service",e);
  }
catch (  UnrecoverableKeyException e) {
    throw new StartException("Unable to start service",e);
  }
}
