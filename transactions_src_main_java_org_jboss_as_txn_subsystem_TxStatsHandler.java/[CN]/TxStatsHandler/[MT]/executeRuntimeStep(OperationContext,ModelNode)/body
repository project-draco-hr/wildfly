{
  TxStat stat=TxStat.getStat(operation.require(ModelDescriptionConstants.NAME).asString());
  if (stat == null) {
    context.getFailureDescription().set(TransactionLogger.ROOT_LOGGER.unknownMetric(operation.require(ModelDescriptionConstants.NAME).asString()));
  }
 else {
    ModelNode result=new ModelNode();
switch (stat) {
case NUMBER_OF_TRANSACTIONS:
      result.set(txStats.getNumberOfTransactions());
    break;
case NUMBER_OF_NESTED_TRANSACTIONS:
  result.set(txStats.getNumberOfNestedTransactions());
break;
case NUMBER_OF_HEURISTICS:
result.set(txStats.getNumberOfHeuristics());
break;
case NUMBER_OF_COMMITTED_TRANSACTIONS:
result.set(txStats.getNumberOfCommittedTransactions());
break;
case NUMBER_OF_ABORTED_TRANSACTIONS:
result.set(txStats.getNumberOfAbortedTransactions());
break;
case NUMBER_OF_INFLIGHT_TRANSACTIONS:
result.set(txStats.getNumberOfInflightTransactions());
break;
case NUMBER_OF_TIMED_OUT_TRANSACTIONS:
result.set(txStats.getNumberOfTimedOutTransactions());
break;
case NUMBER_OF_APPLICATION_ROLLBACKS:
result.set(txStats.getNumberOfApplicationRollbacks());
break;
case NUMBER_OF_RESOURCE_ROLLBACKS:
result.set(txStats.getNumberOfResourceRollbacks());
break;
case NUMBER_OF_SYSTEM_ROLLBACKS:
result.set(txStats.getNumberOfSystemRollbacks());
break;
case AVERAGE_COMMIT_TIME:
result.set(txStats.getAverageCommitTime());
break;
default :
throw new IllegalStateException(TransactionLogger.ROOT_LOGGER.unknownMetric(stat));
}
context.getResult().set(result);
}
context.stepCompleted();
}
