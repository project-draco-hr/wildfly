{
  rootRegistration.registerOperationHandler("setup",new ModelControllerImplUnitTestCase.SetupHandler(),ModelControllerImplUnitTestCase.DESC_PROVIDER,false);
  rootRegistration.registerOperationHandler("composite",CompositeOperationHandler.INSTANCE,ModelControllerImplUnitTestCase.DESC_PROVIDER,false);
  rootRegistration.registerOperationHandler("good",new ModelControllerImplUnitTestCase.ModelStageGoodHandler(),ModelControllerImplUnitTestCase.DESC_PROVIDER,false);
  rootRegistration.registerOperationHandler("bad",new ModelControllerImplUnitTestCase.ModelStageFailsHandler(),ModelControllerImplUnitTestCase.DESC_PROVIDER,false);
  rootRegistration.registerOperationHandler("evil",new ModelControllerImplUnitTestCase.ModelStageThrowsExceptionHandler(),ModelControllerImplUnitTestCase.DESC_PROVIDER,false);
  rootRegistration.registerOperationHandler("handleFailed",new ModelControllerImplUnitTestCase.RuntimeStageFailsHandler(state),ModelControllerImplUnitTestCase.DESC_PROVIDER,false);
  rootRegistration.registerOperationHandler("runtimeException",new ModelControllerImplUnitTestCase.RuntimeStageThrowsExceptionHandler(state),ModelControllerImplUnitTestCase.DESC_PROVIDER,false);
  rootRegistration.registerOperationHandler("operationFailedException",new ModelControllerImplUnitTestCase.RuntimeStageThrowsOFEHandler(),ModelControllerImplUnitTestCase.DESC_PROVIDER,true);
  rootRegistration.registerOperationHandler("good-service",new ModelControllerImplUnitTestCase.GoodServiceHandler(),ModelControllerImplUnitTestCase.DESC_PROVIDER,false);
  rootRegistration.registerOperationHandler("bad-service",new ModelControllerImplUnitTestCase.BadServiceHandler(),ModelControllerImplUnitTestCase.DESC_PROVIDER,true);
  rootRegistration.registerOperationHandler("remove-bad-service",new ModelControllerImplUnitTestCase.RemoveBadServiceHandler(),ModelControllerImplUnitTestCase.DESC_PROVIDER,true);
  rootRegistration.registerOperationHandler("missing-service",new ModelControllerImplUnitTestCase.MissingServiceHandler(),ModelControllerImplUnitTestCase.DESC_PROVIDER,false);
  rootRegistration.registerOperationHandler("reload-required",new ModelControllerImplUnitTestCase.ReloadRequiredHandler(),ModelControllerImplUnitTestCase.DESC_PROVIDER,false);
  rootRegistration.registerOperationHandler("restart-required",new ModelControllerImplUnitTestCase.RestartRequiredHandler(),ModelControllerImplUnitTestCase.DESC_PROVIDER,false);
  rootRegistration.registerOperationHandler("dependent-service",new ModelControllerImplUnitTestCase.DependentServiceHandler(),ModelControllerImplUnitTestCase.DESC_PROVIDER,false);
  rootRegistration.registerOperationHandler("remove-dependent-service",new ModelControllerImplUnitTestCase.RemoveDependentServiceHandler(),ModelControllerImplUnitTestCase.DESC_PROVIDER,false);
  rootRegistration.registerOperationHandler("read-wildcards",new ModelControllerImplUnitTestCase.WildcardReadHandler(),ModelControllerImplUnitTestCase.DESC_PROVIDER,true);
  GlobalOperationHandlers.registerGlobalOperations(rootRegistration,processType);
  SimpleResourceDefinition childResource=new SimpleResourceDefinition(PathElement.pathElement("child"),new NonResolvingResourceDescriptionResolver());
  rootRegistration.registerSubModel(childResource);
}
