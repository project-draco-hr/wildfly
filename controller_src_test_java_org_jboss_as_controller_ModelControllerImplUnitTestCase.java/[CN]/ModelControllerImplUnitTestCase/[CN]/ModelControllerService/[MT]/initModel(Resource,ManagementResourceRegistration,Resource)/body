{
  rootRegistration.registerOperationHandler(getOD("setup"),new ModelControllerImplUnitTestCase.SetupHandler(),true);
  rootRegistration.registerOperationHandler(getOD("composite"),CompositeOperationHandler.INSTANCE,true);
  rootRegistration.registerOperationHandler(getOD("good"),new ModelControllerImplUnitTestCase.ModelStageGoodHandler(),true);
  rootRegistration.registerOperationHandler(getOD("bad"),new ModelControllerImplUnitTestCase.ModelStageFailsHandler(),true);
  rootRegistration.registerOperationHandler(getOD("evil"),new ModelControllerImplUnitTestCase.ModelStageThrowsExceptionHandler(),true);
  rootRegistration.registerOperationHandler(getOD("handleFailed"),new ModelControllerImplUnitTestCase.RuntimeStageFailsHandler(state),true);
  rootRegistration.registerOperationHandler(getOD("runtimeException"),new ModelControllerImplUnitTestCase.RuntimeStageThrowsExceptionHandler(state),true);
  rootRegistration.registerOperationHandler(getOD("operationFailedException"),new ModelControllerImplUnitTestCase.RuntimeStageThrowsOFEHandler(),true);
  rootRegistration.registerOperationHandler(getOD("good-service"),new ModelControllerImplUnitTestCase.GoodServiceHandler(),true);
  rootRegistration.registerOperationHandler(getOD("bad-service"),new ModelControllerImplUnitTestCase.BadServiceHandler(),true);
  rootRegistration.registerOperationHandler(getOD("remove-bad-service"),new ModelControllerImplUnitTestCase.RemoveBadServiceHandler(),true);
  rootRegistration.registerOperationHandler(getOD("missing-service"),new ModelControllerImplUnitTestCase.MissingServiceHandler(),true);
  rootRegistration.registerOperationHandler(getOD("reload-required"),new ModelControllerImplUnitTestCase.ReloadRequiredHandler(),true);
  rootRegistration.registerOperationHandler(getOD("restart-required"),new ModelControllerImplUnitTestCase.RestartRequiredHandler(),true);
  rootRegistration.registerOperationHandler(getOD("dependent-service"),new ModelControllerImplUnitTestCase.DependentServiceHandler(),true);
  rootRegistration.registerOperationHandler(getOD("remove-dependent-service"),new ModelControllerImplUnitTestCase.RemoveDependentServiceHandler(),true);
  rootRegistration.registerOperationHandler(getOD("read-wildcards"),new ModelControllerImplUnitTestCase.WildcardReadHandler(),true);
  GlobalOperationHandlers.registerGlobalOperations(rootRegistration,processType);
  SimpleResourceDefinition childResource=new SimpleResourceDefinition(PathElement.pathElement("child"),new NonResolvingResourceDescriptionResolver());
  rootRegistration.registerSubModel(childResource);
}
