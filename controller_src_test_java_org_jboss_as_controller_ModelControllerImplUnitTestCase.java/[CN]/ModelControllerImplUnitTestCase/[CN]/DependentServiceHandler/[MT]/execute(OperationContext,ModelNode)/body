{
  String name=operation.require("name").asString();
  ModelNode attr=context.readResourceForUpdate(PathAddress.EMPTY_ADDRESS).getModel().get(name);
  final int current=attr.asInt();
  attr.set(operation.require("value"));
  context.addStep(new OperationStepHandler(){
    @Override public void execute(    final OperationContext context,    ModelNode operation){
      context.getResult().set(current);
      ServiceVerificationHandler verificationHandler=new ServiceVerificationHandler();
      final ServiceName dependedSvcName=ServiceName.JBOSS.append("depended-service");
      context.getServiceTarget().addService(dependedSvcName,Service.NULL).addListener(verificationHandler).install();
      final ServiceName dependentSvcName=ServiceName.JBOSS.append("dependent-service");
      context.getServiceTarget().addService(dependentSvcName,Service.NULL).addDependencies(dependedSvcName).addListener(verificationHandler).install();
      context.addStep(verificationHandler,OperationContext.Stage.VERIFY);
      if (useNonRecursive) {
        context.completeStep(new OperationContext.RollbackHandler(){
          @Override public void handleRollback(          OperationContext context,          ModelNode operation){
            context.removeService(dependedSvcName);
            context.removeService(dependentSvcName);
          }
        }
);
      }
 else       if (context.completeStep() == OperationContext.ResultAction.ROLLBACK) {
        context.removeService(dependedSvcName);
        context.removeService(dependentSvcName);
      }
    }
  }
,OperationContext.Stage.RUNTIME);
  if (useNonRecursive) {
    context.completeStep(OperationContext.RollbackHandler.NOOP_ROLLBACK_HANDLER);
  }
 else {
    context.completeStep();
  }
}
