{
  container.start(CONTAINER);
  if (file.exists()) {
    file.delete();
  }
  Assert.assertTrue(makeOneLog());
  List<ModelNode> logs=readFile(file,1);
  ModelNode log=logs.get(0);
  Assert.assertEquals("core",log.get("type").asString());
  Assert.assertEquals("false",log.get("r/o").asString());
  Assert.assertEquals("false",log.get("booting").asString());
  Assert.assertTrue(log.get("version").isDefined());
  Assert.assertEquals("IAmAdmin",log.get("user").asString());
  Assert.assertFalse(log.get("domainUUID").isDefined());
  Assert.assertEquals("NATIVE",log.get("access").asString());
  Assert.assertTrue(log.get("remote-address").isDefined());
  Assert.assertEquals("true",log.get("success").asString());
  List<ModelNode> operations=log.get("ops").asList();
  Assert.assertEquals(1,operations.size());
  if (syslogFile.exists()) {
    syslogFile.delete();
    server.getConfig().removeAllEventHandlers();
    server.getConfig().addEventHandler(new BlockedFileSyslogServerEventHandler(queue,syslogFile.getAbsolutePath(),false));
  }
  Assert.assertTrue(makeOneLog());
  queue.poll(15 * ADJUSTED_SECOND,TimeUnit.MILLISECONDS);
  List<ModelNode> syslogLogs=readFile(syslogFile,1);
  ModelNode syslogLog=syslogLogs.get(0);
  Assert.assertEquals("core",syslogLog.get("type").asString());
  Assert.assertEquals("false",syslogLog.get("r/o").asString());
  Assert.assertEquals("false",syslogLog.get("booting").asString());
  Assert.assertTrue(log.get("version").isDefined());
  Assert.assertEquals("IAmAdmin",syslogLog.get("user").asString());
  Assert.assertFalse(syslogLog.get("domainUUID").isDefined());
  Assert.assertEquals("NATIVE",syslogLog.get("access").asString());
  Assert.assertTrue(syslogLog.get("remote-address").isDefined());
  Assert.assertEquals("true",syslogLog.get("success").asString());
  List<ModelNode> syslogOperations=syslogLog.get("ops").asList();
  Assert.assertEquals(1,syslogOperations.size());
}
