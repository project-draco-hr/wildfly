{
  final ModelNode model=new ModelNode();
  final Namespace namespace=Namespace.forUri(reader.getNamespaceURI());
  String name=null;
  final EnumSet<Attribute> required=EnumSet.of(Attribute.NAME);
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    requireNoNamespaceAttribute(reader,i);
    final String value=reader.getAttributeValue(i);
    final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
    required.remove(attribute);
switch (attribute) {
case NAME:
{
        name=value;
        break;
      }
case ENABLED:
    ENABLED.parseAndSetParameter(value,model,reader);
  break;
default :
throw unexpectedAttribute(reader,i);
}
}
if (!required.isEmpty()) {
throw missingRequired(reader,required);
}
if (!names.add(name)) {
throw duplicateNamedElement(reader,name);
}
model.get(OP).set(ADD);
model.get(OP_ADDR).set(address.toModelNode()).add(SYSLOG_HANDLER,name);
final EnumSet<Element> requiredElem=EnumSet.noneOf(Element.class);
final EnumSet<Element> encountered=EnumSet.noneOf(Element.class);
while (reader.nextTag() != END_ELEMENT) {
final Element element=Element.forName(reader.getLocalName());
if (!encountered.add(element)) {
throw unexpectedElement(reader);
}
requiredElem.remove(element);
switch (element) {
case APP_NAME:
{
APP_NAME.parseAndSetParameter(readStringAttributeElement(reader,"value"),model,reader);
break;
}
case FACILITY:
{
FACILITY.parseAndSetParameter(readStringAttributeElement(reader,"value"),model,reader);
break;
}
case HOSTNAME:
{
HOSTNAME.parseAndSetParameter(readStringAttributeElement(reader,"value"),model,reader);
break;
}
case LEVEL:
{
LEVEL.parseAndSetParameter(readStringAttributeElement(reader,"name"),model,reader);
break;
}
case FORMATTER:
{
if (reader.nextTag() != START_ELEMENT) {
throw new XMLStreamException(MESSAGES.missingRequiredNestedFilterElement(),reader.getLocation());
}
switch (Element.forName(reader.getLocalName())) {
case SYSLOG_FORMATTER:
{
requireSingleAttribute(reader,Attribute.SYSLOG_TYPE.getLocalName());
model.get(SYSLOG_FORMATTER.getName()).set(readStringAttributeElement(reader,Attribute.SYSLOG_TYPE.getLocalName()));
requireNoContent(reader);
break;
}
default :
{
throw unexpectedElement(reader);
}
}
break;
}
case PORT:
{
PORT.parseAndSetParameter(readStringAttributeElement(reader,"value"),model,reader);
break;
}
case SERVER_ADDRESS:
{
SERVER_ADDRESS.parseAndSetParameter(readStringAttributeElement(reader,"value"),model,reader);
break;
}
default :
{
throw unexpectedElement(reader);
}
}
}
list.add(model);
}
