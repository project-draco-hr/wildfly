{
  final ModelNode node=new ModelNode();
  String name=null;
  final EnumSet<Attribute> required=EnumSet.of(Attribute.NAME,Attribute.CLASS,Attribute.MODULE);
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    requireNoNamespaceAttribute(reader,i);
    final String value=reader.getAttributeValue(i);
    final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
    required.remove(attribute);
switch (attribute) {
case NAME:
{
        NAME.parseAndSetParameter(value,node,reader);
        name=value;
        break;
      }
case CLASS:
{
      CLASS.parseAndSetParameter(value,node,reader);
      break;
    }
case MODULE:
{
    MODULE.parseAndSetParameter(value,node,reader);
    break;
  }
default :
throw unexpectedAttribute(reader,i);
}
}
if (!required.isEmpty()) {
throw missingRequired(reader,required);
}
if (!names.add(name)) {
throw duplicateNamedElement(reader,name);
}
node.get(OP).set(ADD);
node.get(OP_ADDR).set(address).add(CUSTOM_HANDLER,name);
final EnumSet<Element> encountered=EnumSet.noneOf(Element.class);
while (reader.nextTag() != END_ELEMENT) {
final Element element=Element.forName(reader.getLocalName());
if (!encountered.add(element)) {
throw unexpectedElement(reader);
}
switch (element) {
case LEVEL:
{
LEVEL.parseAndSetParameter(readStringAttributeElement(reader,"name"),node,reader);
break;
}
case ENCODING:
{
ENCODING.parseAndSetParameter(readStringAttributeElement(reader,"value"),node,reader);
break;
}
case FILTER:
{
parseFilter(node,reader);
break;
}
case FORMATTER:
{
FORMATTER.parseAndSetParameter(parseFormatterElement(reader),node,reader);
break;
}
case PROPERTIES:
{
parsePropertyElement(node,reader);
break;
}
default :
{
throw unexpectedElement(reader);
}
}
}
list.add(node);
}
