{
  if (reader.getAttributeCount() > 0) {
    throw unexpectedAttribute(reader,0);
  }
  final ModelNode node=new ModelNode();
  node.get(OP).set(RootLoggerAdd.OPERATION_NAME);
  node.get(OP_ADDR).set(address).add(ROOT_LOGGER,ROOT_LOGGER_NAME);
  final EnumSet<Element> encountered=EnumSet.noneOf(Element.class);
  while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
    final Location location=reader.getLocation();
switch (Namespace.forUri(reader.getNamespaceURI())) {
case LOGGING_1_0:
case LOGGING_1_1:
{
        final Element element=Element.forName(reader.getLocalName());
        if (encountered.contains(element)) {
          throw duplicateNamedElement(reader,reader.getLocalName());
        }
        encountered.add(element);
switch (element) {
case FILTER:
{
            parseFilter(node,reader);
            break;
          }
case LEVEL:
{
          LEVEL.parseAndSetParameter(readStringAttributeElement(reader,"name"),node,location);
          break;
        }
case HANDLERS:
{
        parseHandlersElement(node.get(HANDLERS.getName()),reader);
        break;
      }
default :
    throw unexpectedElement(reader);
}
break;
}
default :
{
throw unexpectedElement(reader);
}
}
}
list.add(node);
}
