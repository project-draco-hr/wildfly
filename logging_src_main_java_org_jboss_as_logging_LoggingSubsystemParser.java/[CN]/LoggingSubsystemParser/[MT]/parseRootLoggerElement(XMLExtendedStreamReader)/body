{
  if (reader.getAttributeCount() > 0) {
    throw unexpectedAttribute(reader,0);
  }
  final RootLoggerElement loggerElement=new RootLoggerElement();
  final EnumSet<Element> encountered=EnumSet.noneOf(Element.class);
  while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
switch (Namespace.forUri(reader.getNamespaceURI())) {
case LOGGING_1_0:
{
        final Element element=Element.forName(reader.getLocalName());
        if (encountered.contains(element)) {
          throw duplicateNamedElement(reader,reader.getLocalName());
        }
        encountered.add(element);
switch (element) {
case LEVEL:
{
            loggerElement.setLevel(parseLevelElement(reader));
            break;
          }
case FILTER:
{
          loggerElement.setFilter(parseFilterElement(reader));
          break;
        }
case HANDLERS:
{
        loggerElement.setHandlers(parseHandlersElement(reader));
        break;
      }
default :
    throw unexpectedElement(reader);
}
break;
}
default :
{
throw unexpectedElement(reader);
}
}
}
return loggerElement;
}
