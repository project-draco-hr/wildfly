{
  String minLevel=null;
  String maxLevel=null;
  boolean minInclusive=true;
  boolean maxInclusive=true;
  final EnumSet<Attribute> required=EnumSet.of(Attribute.MIN_LEVEL,Attribute.MAX_LEVEL);
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    final String value=reader.getAttributeValue(i);
    if (reader.getAttributeNamespace(i) != null) {
      throw unexpectedAttribute(reader,i);
    }
 else {
      final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case MIN_LEVEL:
{
          minLevel=value;
          break;
        }
case MAX_LEVEL:
{
        maxLevel=value;
        break;
      }
case MIN_INCLUSIVE:
{
      minInclusive=Boolean.parseBoolean(value);
      break;
    }
case MAX_INCLUSIVE:
{
    maxInclusive=Boolean.parseBoolean(value);
    break;
  }
default :
throw unexpectedAttribute(reader,i);
}
required.remove(attribute);
}
}
if (!required.isEmpty()) {
throw missingRequired(reader,required);
}
if (reader.nextTag() != END_ELEMENT) {
throw unexpectedElement(reader);
}
return new LevelRangeFilterType(minLevel,minInclusive,maxLevel,maxInclusive);
}
