{
  if (reader.getAttributeCount() > 0) {
    throw unexpectedAttribute(reader,0);
  }
  final LoggingSubsystemElement subsystemElement=new LoggingSubsystemElement(reader.getName());
  final EnumSet<Element> encountered=EnumSet.noneOf(Element.class);
  while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
switch (Namespace.forUri(reader.getNamespaceURI())) {
case LOGGING_1_0:
{
        final Element element=Element.forName(reader.getLocalName());
        if (encountered.contains(element)) {
          throw duplicateNamedElement(reader,reader.getLocalName());
        }
        encountered.add(element);
switch (element) {
case LOGGER:
{
            LoggerElement loggerElement=parseLoggerElement(reader);
            subsystemElement.addLogger(loggerElement.getName(),loggerElement);
            break;
          }
case ROOT_LOGGER:
{
          RootLoggerElement loggerElement=parseRootLoggerElement(reader);
          subsystemElement.addLogger("",loggerElement);
          break;
        }
case CONSOLE_HANDLER:
{
        ConsoleHandlerElement handlerElement=parseConsoleHandlerElement(reader);
        subsystemElement.addHandler(handlerElement.getName(),handlerElement);
        break;
      }
case FILE_HANDLER:
{
      FileHandlerElement handlerElement=parseFileHandlerElement(reader);
      subsystemElement.addHandler(handlerElement.getName(),handlerElement);
      break;
    }
case PERIODIC_ROTATING_FILE_HANDLER:
{
    PeriodicRotatingFileHandlerElement handlerElement=parsePeriodicRotatingFileHandlerElement(reader);
    subsystemElement.addHandler(handlerElement.getName(),handlerElement);
    break;
  }
case SIZE_ROTATING_FILE_HANDLER:
{
  SizeRotatingFileHandlerElement handlerElement=parseSizeRotatingHandlerElement(reader);
  subsystemElement.addHandler(handlerElement.getName(),handlerElement);
  break;
}
case ASYNC_HANDLER:
{
AsyncHandlerElement handlerElement=parseAsyncHandlerElement(reader);
subsystemElement.addHandler(handlerElement.getName(),handlerElement);
break;
}
default :
{
final ParseResult<AbstractHandlerElement<?>> result=new ParseResult<AbstractHandlerElement<?>>();
reader.handleAny(result);
AbstractHandlerElement<?> handlerElement=result.getResult();
subsystemElement.addHandler(handlerElement.getName(),handlerElement);
break;
}
}
break;
}
default :
{
throw unexpectedElement(reader);
}
}
}
return subsystemElement;
}
