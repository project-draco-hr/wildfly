{
  String name=null;
  boolean autoflush=true;
  final EnumSet<Attribute> required=EnumSet.of(Attribute.NAME);
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    requireNoNamespaceAttribute(reader,i);
    final String value=reader.getAttributeValue(i);
    final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
    required.remove(attribute);
switch (attribute) {
case NAME:
{
        name=value;
        break;
      }
case AUTOFLUSH:
{
      autoflush=Boolean.parseBoolean(value);
      break;
    }
default :
  throw unexpectedAttribute(reader,i);
}
}
if (!required.isEmpty()) {
throw missingRequired(reader,required);
}
if (!names.add(name)) {
throw duplicateNamedElement(reader,name);
}
String levelName=null;
String encoding=null;
String formatterSpec=null;
String target=null;
final EnumSet<Element> encountered=EnumSet.noneOf(Element.class);
while (reader.nextTag() != END_ELEMENT) {
final Element element=Element.forName(reader.getLocalName());
if (!encountered.add(element)) {
throw unexpectedElement(reader);
}
switch (element) {
case LEVEL:
{
  levelName=readStringAttributeElement(reader,"name");
  break;
}
case ENCODING:
{
encoding=readStringAttributeElement(reader,"value");
break;
}
case FORMATTER:
{
formatterSpec=parseFormatterElement(reader);
break;
}
case TARGET:
{
target=readStringAttributeElement(reader,"name");
if (!(target.equals("System.out") || target.equals("System.err"))) {
throw new XMLStreamException("Invalid value for target name",reader.getLocation());
}
break;
}
default :
{
throw unexpectedElement(reader);
}
}
}
final ModelNode node=new ModelNode();
node.get(OP).set(ADD);
node.get(OP_ADDR).set(address).add(CONSOLE_HANDLER,name);
node.get(AUTOFLUSH).set(autoflush);
if (levelName != null) node.get(LEVEL).set(levelName);
if (formatterSpec != null) node.get(FORMATTER).set(formatterSpec);
if (encoding != null) node.get(ENCODING).set(encoding);
list.add(node);
}
