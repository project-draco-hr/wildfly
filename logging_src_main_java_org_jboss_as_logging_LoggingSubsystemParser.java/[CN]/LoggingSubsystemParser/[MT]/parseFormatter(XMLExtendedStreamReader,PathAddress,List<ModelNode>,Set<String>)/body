{
  String name=null;
  final EnumSet<Attribute> required=EnumSet.of(Attribute.NAME);
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    requireNoNamespaceAttribute(reader,i);
    final String value=reader.getAttributeValue(i);
    final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
    required.remove(attribute);
switch (attribute) {
case NAME:
{
        name=value;
        break;
      }
default :
    throw unexpectedAttribute(reader,i);
}
}
if (!required.isEmpty()) {
throw missingRequired(reader,required);
}
if (!names.add(name)) {
throw duplicateNamedElement(reader,name);
}
final EnumSet<Element> encountered=EnumSet.noneOf(Element.class);
while (reader.nextTag() != END_ELEMENT) {
final Element element=Element.forName(reader.getLocalName());
if (!encountered.add(element)) {
  throw unexpectedElement(reader);
}
switch (element) {
case PATTERN_FORMATTER:
{
    final ModelNode operation=Util.createAddOperation();
    addOperationAddress(operation,address,PatternFormatterResourceDefinition.PATTERN_FORMATTER.getName(),name);
    parsePatternFormatterElement(reader,operation);
    operations.add(operation);
    break;
  }
default :
{
  throw unexpectedElement(reader);
}
}
}
}
