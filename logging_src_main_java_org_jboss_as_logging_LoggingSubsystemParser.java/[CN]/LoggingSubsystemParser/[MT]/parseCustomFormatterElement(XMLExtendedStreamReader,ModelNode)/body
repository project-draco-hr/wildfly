{
  final EnumSet<Attribute> required=EnumSet.of(Attribute.CLASS,Attribute.MODULE);
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    requireNoNamespaceAttribute(reader,i);
    final String value=reader.getAttributeValue(i);
    final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
    required.remove(attribute);
switch (attribute) {
case CLASS:
{
        CommonAttributes.CLASS.parseAndSetParameter(value,operation,reader);
        break;
      }
case MODULE:
{
      CommonAttributes.MODULE.parseAndSetParameter(value,operation,reader);
      break;
    }
default :
  throw unexpectedAttribute(reader,i);
}
}
if (!required.isEmpty()) {
throw missingRequired(reader,required);
}
final EnumSet<Element> encountered=EnumSet.noneOf(Element.class);
while (reader.nextTag() != END_ELEMENT) {
final Element element=Element.forName(reader.getLocalName());
if (!encountered.add(element)) {
throw unexpectedElement(reader);
}
switch (element) {
case PROPERTIES:
{
  parsePropertyElement(operation,reader);
  break;
}
default :
{
throw unexpectedElement(reader);
}
}
}
}
