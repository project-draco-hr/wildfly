{
  if (reader.getAttributeCount() > 0) {
    throw unexpectedAttribute(reader,0);
  }
  final ModelNode operation=Util.createAddOperation(address.append(ROOT_LOGGER_PATH_NAME,ROOT_LOGGER_ATTRIBUTE_NAME));
  final EnumSet<Element> encountered=EnumSet.noneOf(Element.class);
  while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
    final Element element=Element.forName(reader.getLocalName());
    if (encountered.contains(element)) {
      throw duplicateNamedElement(reader,reader.getLocalName());
    }
    encountered.add(element);
switch (element) {
case FILTER_SPEC:
case FILTER:
{
        parseFilter(operation,reader,element);
        break;
      }
case LEVEL:
{
      LEVEL.parseAndSetParameter(readNameAttribute(reader),operation,reader);
      break;
    }
case HANDLERS:
{
    parseHandlersElement(operation.get(HANDLERS.getName()),reader);
    break;
  }
default :
throw unexpectedElement(reader);
}
}
operations.add(operation);
}
