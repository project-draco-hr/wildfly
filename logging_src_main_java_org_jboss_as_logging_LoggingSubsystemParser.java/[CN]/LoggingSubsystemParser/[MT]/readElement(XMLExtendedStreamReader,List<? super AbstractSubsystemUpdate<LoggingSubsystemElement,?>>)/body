{
  if (reader.getAttributeCount() > 0) {
    throw unexpectedAttribute(reader,0);
  }
  final EnumSet<Element> encountered=EnumSet.noneOf(Element.class);
  while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
switch (Namespace.forUri(reader.getNamespaceURI())) {
case LOGGING_1_0:
{
        final Element element=Element.forName(reader.getLocalName());
        if (encountered.contains(element)) {
          throw duplicateNamedElement(reader,reader.getLocalName());
        }
        encountered.add(element);
switch (element) {
case LOGGER:
{
            parseLoggerElement(reader,updates);
            break;
          }
case ROOT_LOGGER:
{
          parseRootLoggerElement(reader,updates);
          break;
        }
case CONSOLE_HANDLER:
{
        parseConsoleHandlerElement(reader,updates);
        break;
      }
case FILE_HANDLER:
{
      parseFileHandlerElement(reader,updates);
      break;
    }
case PERIODIC_ROTATING_FILE_HANDLER:
{
    parsePeriodicRotatingFileHandlerElement(reader,updates);
    break;
  }
case SIZE_ROTATING_FILE_HANDLER:
{
  parseSizeRotatingHandlerElement(reader,updates);
  break;
}
case ASYNC_HANDLER:
{
parseAsyncHandlerElement(reader,updates);
break;
}
default :
{
reader.handleAny(updates);
break;
}
}
break;
}
default :
{
throw unexpectedElement(reader);
}
}
}
}
