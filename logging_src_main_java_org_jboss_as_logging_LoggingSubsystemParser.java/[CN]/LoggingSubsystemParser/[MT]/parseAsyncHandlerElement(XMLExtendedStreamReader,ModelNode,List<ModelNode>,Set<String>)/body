{
  String name=null;
  boolean autoflush=true;
  final EnumSet<Attribute> required=EnumSet.of(Attribute.NAME);
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    requireNoNamespaceAttribute(reader,i);
    final String value=reader.getAttributeValue(i);
    final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
    required.remove(attribute);
switch (attribute) {
case NAME:
{
        name=value;
        break;
      }
default :
    throw unexpectedAttribute(reader,i);
}
}
if (!required.isEmpty()) {
throw missingRequired(reader,required);
}
if (!names.add(name)) {
throw duplicateNamedElement(reader,name);
}
final ModelNode node=new ModelNode();
node.get(OP).set(ADD);
node.get(OP_ADDR).set(address).add(ASYNC_HANDLER,name);
OverflowAction overflowAction=OverflowAction.BLOCK;
final EnumSet<Element> encountered=EnumSet.noneOf(Element.class);
while (reader.nextTag() != END_ELEMENT) {
final Element element=Element.forName(reader.getLocalName());
if (!encountered.add(element)) {
  throw unexpectedElement(reader);
}
final Location location=reader.getLocation();
switch (element) {
case LEVEL:
{
    LEVEL.parseAndSetParameter(readStringAttributeElement(reader,"name"),node,location);
    break;
  }
case SUBHANDLERS:
{
  parseHandlersElement(node.get(SUBHANDLERS),reader);
  break;
}
case QUEUE_LENGTH:
{
QUEUE_LENGTH.parseAndSetParameter(readStringAttributeElement(reader,"value"),node,location);
break;
}
case OVERFLOW_ACTION:
{
OVERFLOW_ACTION.parseAndSetParameter(readStringAttributeElement(reader,"value").toUpperCase(Locale.US),node,location);
break;
}
default :
{
throw unexpectedElement(reader);
}
}
}
list.add(node);
}
