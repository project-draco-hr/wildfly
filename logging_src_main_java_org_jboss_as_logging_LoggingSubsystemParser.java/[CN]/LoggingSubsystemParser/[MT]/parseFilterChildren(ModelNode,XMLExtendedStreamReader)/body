{
  if (reader.getAttributeCount() > 0) {
    throw unexpectedAttribute(reader,0);
  }
  while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
switch (Namespace.forUri(reader.getNamespaceURI())) {
case LOGGING_1_0:
case LOGGING_1_1:
case LOGGING_1_2:
{
        final Element element=Element.forName(reader.getLocalName());
switch (element) {
case ACCEPT:
{
            ACCEPT.parseAndSetParameter(Boolean.TRUE.toString(),node,reader);
            requireNoContent(reader);
            break;
          }
case ALL:
{
          parseFilterChildren(node.get(ALL.getName()),reader);
          break;
        }
case ANY:
{
        parseFilterChildren(node.get(ANY.getName()),reader);
        break;
      }
case CHANGE_LEVEL:
{
      CHANGE_LEVEL.parseAndSetParameter(readStringAttributeElement(reader,"new-level"),node,reader);
      break;
    }
case DENY:
{
    DENY.parseAndSetParameter(Boolean.TRUE.toString(),node,reader);
    requireNoContent(reader);
    break;
  }
case LEVEL:
{
  LEVEL.parseAndSetParameter(readStringAttributeElement(reader,"name"),node,reader);
  break;
}
case LEVEL_RANGE:
{
final ModelNode levelRange=node.get(LEVEL_RANGE.getName());
parseRequiredAttribute(MIN_LEVEL,reader,levelRange);
parseRequiredAttribute(MAX_LEVEL,reader,levelRange);
parseAttribute(MIN_INCLUSIVE,reader,levelRange);
parseAttribute(MAX_INCLUSIVE,reader,levelRange);
requireNoContent(reader);
break;
}
case MATCH:
{
MATCH.parseAndSetParameter(readStringAttributeElement(reader,"pattern"),node,reader);
break;
}
case NOT:
{
parseFilterChildren(node.get(NOT.getName()),reader);
break;
}
case REPLACE:
{
final ModelNode replace=node.get(REPLACE.getName());
parseRequiredAttribute(PATTERN,reader,replace);
parseRequiredAttribute(REPLACEMENT,reader,replace);
parseAttribute(REPLACE_ALL,reader,replace);
requireNoContent(reader);
break;
}
default :
throw unexpectedElement(reader);
}
break;
}
default :
{
throw unexpectedElement(reader);
}
}
}
}
