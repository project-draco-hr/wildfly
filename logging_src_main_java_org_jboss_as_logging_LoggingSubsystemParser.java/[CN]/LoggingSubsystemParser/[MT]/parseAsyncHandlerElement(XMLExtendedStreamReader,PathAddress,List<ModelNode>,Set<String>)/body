{
  final ModelNode operation=Util.createAddOperation();
  final Namespace namespace=Namespace.forUri(reader.getNamespaceURI());
  String name=null;
  final EnumSet<Attribute> required=EnumSet.of(Attribute.NAME);
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    requireNoNamespaceAttribute(reader,i);
    final String value=reader.getAttributeValue(i);
    final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
    required.remove(attribute);
switch (attribute) {
case NAME:
{
        name=value;
        break;
      }
case ENABLED:
    if (namespace == Namespace.LOGGING_1_0 || namespace == Namespace.LOGGING_1_1) {
      throw unexpectedAttribute(reader,i);
    }
  ENABLED.parseAndSetParameter(value,operation,reader);
break;
default :
throw unexpectedAttribute(reader,i);
}
}
if (!required.isEmpty()) {
throw missingRequired(reader,required);
}
if (!names.add(name)) {
throw duplicateNamedElement(reader,name);
}
addOperationAddress(operation,address,ASYNC_HANDLER,name);
final EnumSet<Element> encountered=EnumSet.noneOf(Element.class);
while (reader.nextTag() != END_ELEMENT) {
final Element element=Element.forName(reader.getLocalName());
if (!encountered.add(element)) {
throw unexpectedElement(reader);
}
switch (element) {
case LEVEL:
{
LEVEL.parseAndSetParameter(readNameAttribute(reader),operation,reader);
break;
}
case SUBHANDLERS:
{
parseHandlersElement(operation.get(SUBHANDLERS.getName()),reader);
break;
}
case FILTER_SPEC:
case FILTER:
{
parseFilter(operation,reader,element);
break;
}
case FORMATTER:
{
FORMATTER.parseAndSetParameter(parseFormatterElement(reader),operation,reader);
break;
}
case QUEUE_LENGTH:
{
QUEUE_LENGTH.parseAndSetParameter(readValueAttribute(reader),operation,reader);
break;
}
case OVERFLOW_ACTION:
{
OVERFLOW_ACTION.parseAndSetParameter(readValueAttribute(reader).toUpperCase(Locale.US),operation,reader);
break;
}
default :
{
throw unexpectedElement(reader);
}
}
}
operations.add(operation);
}
