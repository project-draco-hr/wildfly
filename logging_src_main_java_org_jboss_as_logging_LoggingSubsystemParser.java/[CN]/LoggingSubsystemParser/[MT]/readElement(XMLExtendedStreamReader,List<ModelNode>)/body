{
  if (reader.getAttributeCount() > 0) {
    throw unexpectedAttribute(reader,0);
  }
  final PathAddress address=PathAddress.pathAddress(PathElement.pathElement(SUBSYSTEM,LoggingExtension.SUBSYSTEM_NAME));
  final ModelNode subsystemAddOp=Util.createAddOperation(address);
  operations.add(subsystemAddOp);
  final List<ModelNode> loggerOperations=new ArrayList<ModelNode>();
  final List<ModelNode> asyncHandlerOperations=new ArrayList<ModelNode>();
  final List<ModelNode> handlerOperations=new ArrayList<ModelNode>();
  final List<ModelNode> formatterOperations=new ArrayList<ModelNode>();
  final Set<String> loggerNames=new HashSet<String>();
  final Set<String> handlerNames=new HashSet<String>();
  final Set<String> formatterNames=new HashSet<String>();
  boolean rootDefined=false;
  while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
    final Namespace namespace=Namespace.forUri(reader.getNamespaceURI());
switch (namespace) {
case LOGGING_1_0:
case LOGGING_1_1:
case LOGGING_1_2:
case LOGGING_1_3:
case LOGGING_2_0:
case LOGGING_3_0:
{
        final Element element=Element.forName(reader.getLocalName());
switch (element) {
case ADD_LOGGING_API_DEPENDENCIES:
{
            if (namespace == Namespace.LOGGING_1_0 || namespace == Namespace.LOGGING_1_1 || namespace == Namespace.LOGGING_1_2 || namespace == Namespace.LOGGING_1_3)             throw unexpectedElement(reader);
            final String value=ParseUtils.readStringAttributeElement(reader,Attribute.VALUE.getLocalName());
            LoggingRootResource.ADD_LOGGING_API_DEPENDENCIES.parseAndSetParameter(value,subsystemAddOp,reader);
            break;
          }
case USE_DEPLOYMENT_LOGGING_CONFIG:
{
          if (namespace == Namespace.LOGGING_1_0 || namespace == Namespace.LOGGING_1_1 || namespace == Namespace.LOGGING_1_2 || namespace == Namespace.LOGGING_1_3)           throw unexpectedElement(reader);
          final String value=ParseUtils.readStringAttributeElement(reader,Attribute.VALUE.getLocalName());
          LoggingRootResource.USE_DEPLOYMENT_LOGGING_CONFIG.parseAndSetParameter(value,subsystemAddOp,reader);
          break;
        }
case LOGGER:
{
        parseLoggerElement(reader,address,loggerOperations,loggerNames);
        break;
      }
case ROOT_LOGGER:
{
      if (rootDefined) {
        throw unexpectedElement(reader);
      }
      rootDefined=true;
      parseRootLoggerElement(reader,address,loggerOperations);
      break;
    }
case CONSOLE_HANDLER:
{
    parseConsoleHandlerElement(reader,address,handlerOperations,handlerNames);
    break;
  }
case FILE_HANDLER:
{
  parseFileHandlerElement(reader,address,handlerOperations,handlerNames);
  break;
}
case CUSTOM_HANDLER:
{
if (namespace == Namespace.LOGGING_1_0) throw unexpectedElement(reader);
parseCustomHandlerElement(reader,address,handlerOperations,handlerNames);
break;
}
case PERIODIC_ROTATING_FILE_HANDLER:
{
parsePeriodicRotatingFileHandlerElement(reader,address,handlerOperations,handlerNames);
break;
}
case SIZE_ROTATING_FILE_HANDLER:
{
parseSizeRotatingHandlerElement(reader,address,handlerOperations,handlerNames);
break;
}
case ASYNC_HANDLER:
{
parseAsyncHandlerElement(reader,address,asyncHandlerOperations,handlerNames);
break;
}
case SYSLOG_HANDLER:
{
if (namespace == Namespace.LOGGING_1_0 || namespace == Namespace.LOGGING_1_1) throw unexpectedElement(reader);
parseSyslogHandler(reader,address,handlerOperations,handlerNames);
break;
}
case LOGGING_PROFILES:
if (namespace == Namespace.LOGGING_1_0 || namespace == Namespace.LOGGING_1_1) throw unexpectedElement(reader);
parseLoggingProfilesElement(reader,address,operations);
break;
case FORMATTER:
if (namespace == Namespace.LOGGING_1_0 || namespace == Namespace.LOGGING_1_1 || namespace == Namespace.LOGGING_1_2 || namespace == Namespace.LOGGING_1_3) throw unexpectedElement(reader);
parseFormatter(reader,address,formatterOperations,formatterNames);
break;
default :
{
reader.handleAny(operations);
break;
}
}
break;
}
default :
{
throw unexpectedElement(reader);
}
}
}
operations.addAll(formatterOperations);
operations.addAll(handlerOperations);
operations.addAll(asyncHandlerOperations);
operations.addAll(loggerOperations);
}
