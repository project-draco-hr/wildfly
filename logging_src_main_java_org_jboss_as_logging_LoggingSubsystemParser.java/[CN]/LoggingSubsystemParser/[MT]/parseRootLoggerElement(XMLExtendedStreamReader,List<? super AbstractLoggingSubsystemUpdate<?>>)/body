{
  if (reader.getAttributeCount() > 0) {
    throw unexpectedAttribute(reader,0);
  }
  String level=null;
  List<String> handlers=null;
  final EnumSet<Element> encountered=EnumSet.noneOf(Element.class);
  while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
switch (Namespace.forUri(reader.getNamespaceURI())) {
case LOGGING_1_0:
{
        final Element element=Element.forName(reader.getLocalName());
        if (encountered.contains(element)) {
          throw duplicateNamedElement(reader,reader.getLocalName());
        }
        encountered.add(element);
switch (element) {
case LEVEL:
{
            level=parseLevelElement(reader);
            break;
          }
case HANDLERS:
{
          handlers=parseHandlersElement(reader);
          break;
        }
default :
      throw unexpectedElement(reader);
  }
  break;
}
default :
{
throw unexpectedElement(reader);
}
}
}
final RootLoggerAdd add=new RootLoggerAdd();
add.setLevelName(level);
list.add(add);
if (handlers != null) {
for (String handlerName : handlers) {
list.add(new LoggerHandlerAdd("",handlerName));
}
}
}
