{
  String name=null;
  String encoding=null;
  String fileName=null;
  int maxBackupIndex=-1;
  long rotateSize=-1L;
  Boolean append=null;
  Boolean autoflush=null;
  final EnumSet<Attribute> required=EnumSet.of(Attribute.FILE_NAME,Attribute.SUFFIX,Attribute.NAME);
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    final String value=reader.getAttributeValue(i);
    if (reader.getAttributeNamespace(i) != null) {
      throw unexpectedAttribute(reader,i);
    }
 else {
      final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
      required.remove(attribute);
switch (attribute) {
case NAME:
{
          name=value;
          break;
        }
case ENCODING:
{
        encoding=value;
        break;
      }
case AUTOFLUSH:
{
      autoflush=Boolean.valueOf(value);
      break;
    }
case FILE_NAME:
{
    fileName=value;
    break;
  }
case APPEND:
{
  append=Boolean.valueOf(value);
  break;
}
case MAX_BACKUP_INDEX:
{
try {
  maxBackupIndex=Integer.parseInt(value);
}
 catch (NumberFormatException e) {
  throw invalidAttributeValue(reader,i);
}
if (maxBackupIndex < 1) {
  throw invalidAttributeValue(reader,i);
}
break;
}
case ROTATE_SIZE:
{
try {
rotateSize=parseSize(value);
}
 catch (IllegalArgumentException e) {
throw invalidAttributeValue(reader,i);
}
break;
}
default :
throw unexpectedAttribute(reader,i);
}
}
}
if (!required.isEmpty()) {
throw missingRequired(reader,required);
}
final SizeRotatingFileHandlerElement handlerElement=new SizeRotatingFileHandlerElement(name);
handlerElement.setFileName(fileName);
if (maxBackupIndex > 0) handlerElement.setMaxBackupIndex(maxBackupIndex);
if (rotateSize > 0) handlerElement.setRotateSize(rotateSize);
if (encoding != null) handlerElement.setEncoding(encoding);
if (autoflush != null) handlerElement.setAutoflush(autoflush);
if (append != null) handlerElement.setAppend(append.booleanValue());
readHandlerChildren(handlerElement,reader);
return handlerElement;
}
