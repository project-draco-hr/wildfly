{
  String name=null;
  boolean autoflush=true;
  final EnumSet<Attribute> required=EnumSet.of(Attribute.NAME);
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    final String value=reader.getAttributeValue(i);
    if (reader.getAttributeNamespace(i) != null) {
      throw unexpectedAttribute(reader,i);
    }
 else {
      final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
      required.remove(attribute);
switch (attribute) {
case NAME:
{
          name=value;
          break;
        }
case AUTOFLUSH:
{
        autoflush=Boolean.parseBoolean(value);
        break;
      }
default :
    throw unexpectedAttribute(reader,i);
}
}
}
if (!required.isEmpty()) {
throw missingRequired(reader,required);
}
String levelName=null;
String encoding=null;
FileSpec fileSpec=null;
boolean append=true;
long rotateSize=0L;
int maxBackupIndex=1;
AbstractFormatterSpec formatterSpec=null;
final EnumSet<Element> requiredElem=EnumSet.of(Element.FILE);
final EnumSet<Element> encountered=EnumSet.noneOf(Element.class);
while (reader.nextTag() != END_ELEMENT) {
final Element element=Element.forName(reader.getLocalName());
if (!encountered.add(element)) {
throw unexpectedElement(reader);
}
requiredElem.remove(element);
switch (element) {
case LEVEL:
{
  levelName=readStringAttributeElement(reader,"name");
  break;
}
case ENCODING:
{
encoding=readStringAttributeElement(reader,"value");
break;
}
case FORMATTER:
{
formatterSpec=parseFormatterElement(reader);
break;
}
case FILE:
{
fileSpec=parseFileElement(reader);
break;
}
case APPEND:
{
append=Boolean.parseBoolean(readStringAttributeElement(reader,"value"));
break;
}
case ROTATE_SIZE:
{
rotateSize=parseSize(readStringAttributeElement(reader,"value"));
break;
}
case MAX_BACKUP_INDEX:
{
try {
maxBackupIndex=Integer.parseInt(readStringAttributeElement(reader,"value"));
}
 catch (NumberFormatException e) {
throw new XMLStreamException(e.getMessage(),reader.getLocation(),e);
}
break;
}
default :
{
throw unexpectedElement(reader);
}
}
}
if (!requiredElem.isEmpty()) {
throw missingRequired(reader,required);
}
if (names.contains(name)) {
throw duplicateNamedElement(reader,name);
}
final SizeRotatingFileHandlerAdd add=new SizeRotatingFileHandlerAdd(name);
add.setAutoflush(Boolean.valueOf(autoflush));
add.setLevelName(levelName);
add.setEncoding(encoding);
add.setFormatter(formatterSpec);
add.setPath(fileSpec.fileName);
add.setRelativeTo(fileSpec.relativeTo);
add.setAppend(append);
if (rotateSize > 0L) {
add.setRotateSize(rotateSize);
}
if (maxBackupIndex > 0) {
add.setMaxBackupIndex(maxBackupIndex);
}
list.add(add);
}
