{
  String name=null;
  final EnumSet<Attribute> required=EnumSet.of(Attribute.NAME);
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    requireNoNamespaceAttribute(reader,i);
    final String value=reader.getAttributeValue(i);
    final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
    required.remove(attribute);
switch (attribute) {
case NAME:
{
        name=value;
        break;
      }
default :
    throw unexpectedAttribute(reader,i);
}
}
if (!required.isEmpty()) {
throw missingRequired(reader,required);
}
if (!profileNames.add(name)) {
throw duplicateNamedElement(reader,name);
}
final PathAddress profileAddress=address.append(LOGGING_PROFILE,name);
operations.add(Util.createAddOperation(profileAddress));
final List<ModelNode> loggerOperations=new ArrayList<ModelNode>();
final List<ModelNode> asyncHandlerOperations=new ArrayList<ModelNode>();
final List<ModelNode> handlerOperations=new ArrayList<ModelNode>();
final List<ModelNode> formatterOperations=new ArrayList<ModelNode>();
final Set<String> loggerNames=new HashSet<String>();
final Set<String> handlerNames=new HashSet<String>();
final Set<String> formatterNames=new HashSet<String>();
final Namespace namespace=Namespace.forUri(reader.getNamespaceURI());
boolean gotRoot=false;
while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
final Element element=Element.forName(reader.getLocalName());
switch (element) {
case LOGGER:
{
    parseLoggerElement(reader,profileAddress,loggerOperations,loggerNames);
    break;
  }
case ROOT_LOGGER:
{
  if (gotRoot) {
    throw unexpectedElement(reader);
  }
  gotRoot=true;
  parseRootLoggerElement(reader,profileAddress,loggerOperations);
  break;
}
case CONSOLE_HANDLER:
{
parseConsoleHandlerElement(reader,profileAddress,handlerOperations,handlerNames);
break;
}
case FILE_HANDLER:
{
parseFileHandlerElement(reader,profileAddress,handlerOperations,handlerNames);
break;
}
case CUSTOM_HANDLER:
{
parseCustomHandlerElement(reader,profileAddress,handlerOperations,handlerNames);
break;
}
case PERIODIC_ROTATING_FILE_HANDLER:
{
parsePeriodicRotatingFileHandlerElement(reader,profileAddress,handlerOperations,handlerNames);
break;
}
case SIZE_ROTATING_FILE_HANDLER:
{
parseSizeRotatingHandlerElement(reader,profileAddress,handlerOperations,handlerNames);
break;
}
case ASYNC_HANDLER:
{
parseAsyncHandlerElement(reader,profileAddress,asyncHandlerOperations,handlerNames);
break;
}
case SYSLOG_HANDLER:
{
parseSyslogHandler(reader,profileAddress,handlerOperations,handlerNames);
break;
}
case FORMATTER:
if (namespace == Namespace.LOGGING_1_0 || namespace == Namespace.LOGGING_1_1 || namespace == Namespace.LOGGING_1_2 || namespace == Namespace.LOGGING_1_3) throw unexpectedElement(reader);
parseFormatter(reader,profileAddress,formatterOperations,formatterNames);
break;
default :
{
reader.handleAny(operations);
break;
}
}
}
operations.addAll(formatterOperations);
operations.addAll(handlerOperations);
operations.addAll(asyncHandlerOperations);
operations.addAll(loggerOperations);
}
