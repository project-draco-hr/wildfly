{
  List<SimpleAttributeDefinition> attributes=getAttributes();
  return new AbstractWriteAttributeHandler(attributes.toArray(new AttributeDefinition[attributes.size()])){
    @Override protected boolean applyUpdateToRuntime(    OperationContext context,    ModelNode operation,    String attributeName,    ModelNode resolvedValue,    ModelNode currentValue,    HandbackHolder handbackHolder) throws OperationFailedException {
      PathAddress pathAddress=PathAddress.pathAddress(operation.get(ModelDescriptionConstants.OP_ADDR));
      updateConfiguration(context,pathAddress,false);
      return false;
    }
    @Override protected void revertUpdateToRuntime(    OperationContext context,    ModelNode operation,    String attributeName,    ModelNode valueToRestore,    ModelNode valueToRevert,    Object handback) throws OperationFailedException {
      ModelNode restored=context.readResource(PathAddress.EMPTY_ADDRESS).getModel().clone();
      restored.get(attributeName).set(valueToRestore);
      PathAddress pathAddress=PathAddress.pathAddress(operation.get(ModelDescriptionConstants.OP_ADDR));
      updateConfiguration(context,pathAddress,true);
    }
    private void updateConfiguration(    OperationContext context,    PathAddress pathAddress,    boolean rollback) throws OperationFailedException {
      String federationAlias=pathAddress.subAddress(0,pathAddress.size() - 1).getLastElement().getValue();
      ServiceRegistry serviceRegistry=context.getServiceRegistry(false);
      ServiceController<KeyStoreProviderService> serviceController=(ServiceController<KeyStoreProviderService>)serviceRegistry.getService(KeyStoreProviderService.createServiceName(federationAlias));
      if (serviceController != null) {
        KeyStoreProviderService service=serviceController.getValue();
        ModelNode keyStoreProviderNode;
        if (!rollback) {
          keyStoreProviderNode=context.readResource(PathAddress.EMPTY_ADDRESS,false).getModel();
        }
 else {
          Resource rc=context.getOriginalRootResource().navigate(pathAddress);
          keyStoreProviderNode=rc.getModel();
        }
        ModelNode relativeToNode=KeyStoreProviderResourceDefinition.RELATIVE_TO.resolveModelAttribute(context,keyStoreProviderNode);
        String relativeTo=null;
        if (relativeToNode.isDefined()) {
          relativeTo=relativeToNode.asString();
        }
        String file=KeyStoreProviderResourceDefinition.FILE.resolveModelAttribute(context,keyStoreProviderNode).asString();
        service.setKeyProviderType(KeyStoreProviderAddHandler.toKeyProviderType(context,keyStoreProviderNode),file,relativeTo);
      }
    }
  }
;
}
