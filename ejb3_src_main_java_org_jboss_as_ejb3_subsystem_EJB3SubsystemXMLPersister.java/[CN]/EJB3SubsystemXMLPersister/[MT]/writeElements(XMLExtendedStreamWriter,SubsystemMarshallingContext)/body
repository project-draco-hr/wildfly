{
  ModelNode model=context.getModelNode();
  if (model.hasDefined(EJB3SubsystemModel.DEFAULT_SLSB_INSTANCE_POOL) || model.hasDefined(EJB3SubsystemModel.DEFAULT_STATEFUL_BEAN_ACCESS_TIMEOUT) || model.hasDefined(EJB3SubsystemModel.DEFAULT_SINGLETON_BEAN_ACCESS_TIMEOUT)) {
    writer.writeStartElement(EJB3SubsystemXMLElement.SESSION_BEAN.getLocalName());
  }
  if (model.hasDefined(EJB3SubsystemModel.DEFAULT_SLSB_INSTANCE_POOL)) {
    writer.writeStartElement(EJB3SubsystemXMLElement.STATELESS.getLocalName());
    this.writeDefaultSLSBPool(writer,model);
    writer.writeEndElement();
  }
  if (model.hasDefined(EJB3SubsystemModel.DEFAULT_STATEFUL_BEAN_ACCESS_TIMEOUT) || model.hasDefined(EJB3SubsystemModel.DEFAULT_SFSB_CACHE) || model.hasDefined(EJB3SubsystemModel.DEFAULT_SFSB_PASSIVATION_DISABLED_CACHE)) {
    writer.writeStartElement(EJB3SubsystemXMLElement.STATEFUL.getLocalName());
    this.writeStatefulBean(writer,model);
    writer.writeEndElement();
  }
  if (model.hasDefined(EJB3SubsystemModel.DEFAULT_SINGLETON_BEAN_ACCESS_TIMEOUT)) {
    writer.writeStartElement(EJB3SubsystemXMLElement.SINGLETON.getLocalName());
    this.writeSingletonBean(writer,model);
    writer.writeEndElement();
  }
  if (model.hasDefined(EJB3SubsystemModel.DEFAULT_SLSB_INSTANCE_POOL) || model.hasDefined(EJB3SubsystemModel.DEFAULT_STATEFUL_BEAN_ACCESS_TIMEOUT) || model.hasDefined(EJB3SubsystemModel.DEFAULT_SINGLETON_BEAN_ACCESS_TIMEOUT)) {
    writer.writeEndElement();
  }
  if (model.hasDefined(EJB3SubsystemModel.DEFAULT_MDB_INSTANCE_POOL) || model.hasDefined(EJB3SubsystemModel.DEFAULT_RESOURCE_ADAPTER_NAME)) {
    writer.writeStartElement(EJB3SubsystemXMLElement.MDB.getLocalName());
    this.writeMDB(writer,model);
    writer.writeEndElement();
  }
  if (model.hasDefined(EJB3SubsystemModel.DEFAULT_ENTITY_BEAN_INSTANCE_POOL) || model.hasDefined(EJB3SubsystemModel.DEFAULT_ENTITY_BEAN_OPTIMISTIC_LOCKING)) {
    writer.writeStartElement(EJB3SubsystemXMLElement.ENTITY_BEAN.getLocalName());
    this.writeEntityBean(writer,model);
    writer.writeEndElement();
  }
  if (model.hasDefined(EJB3SubsystemModel.STRICT_MAX_BEAN_INSTANCE_POOL)) {
    writer.writeStartElement(EJB3SubsystemXMLElement.POOLS.getLocalName());
    writer.writeStartElement(EJB3SubsystemXMLElement.BEAN_INSTANCE_POOLS.getLocalName());
    this.writeBeanInstancePools(writer,model);
    writer.writeEndElement();
    writer.writeEndElement();
  }
  if (model.hasDefined(EJB3SubsystemModel.CACHE)) {
    writer.writeStartElement(EJB3SubsystemXMLElement.CACHES.getLocalName());
    this.writeCaches(writer,model);
    writer.writeEndElement();
  }
  if (model.hasDefined(EJB3SubsystemModel.PASSIVATION_STORE) || model.hasDefined(EJB3SubsystemModel.CLUSTER_PASSIVATION_STORE) || model.hasDefined(EJB3SubsystemModel.FILE_PASSIVATION_STORE)) {
    writer.writeStartElement(EJB3SubsystemXMLElement.PASSIVATION_STORES.getLocalName());
    this.writePassivationStores(writer,model);
    this.writeFilePassivationStores(writer,model);
    this.writeClusterPassivationStores(writer,model);
    writer.writeEndElement();
  }
  if (model.hasDefined(SERVICE) && model.get(SERVICE).hasDefined(ASYNC)) {
    writer.writeStartElement(EJB3SubsystemXMLElement.ASYNC.getLocalName());
    writeAsync(writer,model.get(SERVICE,ASYNC));
    writer.writeEndElement();
  }
  if (model.hasDefined(SERVICE) && model.get(SERVICE).hasDefined(TIMER_SERVICE)) {
    writer.writeStartElement(EJB3SubsystemXMLElement.TIMER_SERVICE.getLocalName());
    final ModelNode timerServiceModel=model.get(SERVICE,TIMER_SERVICE);
    this.writeTimerService(writer,timerServiceModel);
    writer.writeEndElement();
  }
  if (model.hasDefined(SERVICE) && model.get(SERVICE).hasDefined(REMOTE)) {
    writer.writeStartElement(EJB3SubsystemXMLElement.REMOTE.getLocalName());
    writeRemote(writer,model.get(SERVICE,REMOTE));
    writer.writeEndElement();
  }
  if (model.hasDefined(THREAD_POOL)) {
    writer.writeStartElement(EJB3SubsystemXMLElement.THREAD_POOLS.getLocalName());
    final ModelNode threadsModel=model.get(THREAD_POOL);
    this.writeThreadPools(writer,threadsModel);
    writer.writeEndElement();
  }
  if (model.hasDefined(SERVICE) && model.get(SERVICE).hasDefined(IIOP)) {
    writer.writeStartElement(EJB3SubsystemXMLElement.IIOP.getLocalName());
    writeIIOP(writer,model.get(SERVICE,IIOP));
    writer.writeEndElement();
  }
  if (model.hasDefined(IN_VM_REMOTE_INTERFACE_INVOCATION_PASS_BY_VALUE)) {
    writer.writeStartElement(EJB3SubsystemXMLElement.IN_VM_REMOTE_INTERFACE_INVOCATION.getLocalName());
    writer.writeAttribute(EJB3SubsystemXMLAttribute.PASS_BY_VALUE.getLocalName(),model.get(EJB3SubsystemModel.IN_VM_REMOTE_INTERFACE_INVOCATION_PASS_BY_VALUE).asString());
    writer.writeEndElement();
  }
  if (model.hasDefined(DEFAULT_DISTINCT_NAME)) {
    writer.writeStartElement(EJB3SubsystemXMLElement.DEFAULT_DISTINCT_NAME.getLocalName());
    writer.writeAttribute(EJB3SubsystemXMLAttribute.VALUE.getLocalName(),model.get(EJB3SubsystemModel.DEFAULT_DISTINCT_NAME).asString());
    writer.writeEndElement();
  }
  if (model.hasDefined(DEFAULT_SECURITY_DOMAIN)) {
    writer.writeStartElement(EJB3SubsystemXMLElement.DEFAULT_SECURITY_DOMAIN.getLocalName());
    writer.writeAttribute(EJB3SubsystemXMLAttribute.VALUE.getLocalName(),model.get(DEFAULT_SECURITY_DOMAIN).asString());
    writer.writeEndElement();
  }
  if (model.hasDefined(DEFAULT_MISSING_METHOD_PERMISSIONS_DENY_ACCESS)) {
    writer.writeStartElement(EJB3SubsystemXMLElement.DEFAULT_MISSING_METHOD_PERMISSIONS_DENY_ACCESS.getLocalName());
    writer.writeAttribute(EJB3SubsystemXMLAttribute.VALUE.getLocalName(),model.get(DEFAULT_MISSING_METHOD_PERMISSIONS_DENY_ACCESS).asString());
    writer.writeEndElement();
  }
  if (model.hasDefined(DISABLE_DEFAULT_EJB_PERMISSIONS)) {
    writer.writeStartElement(EJB3SubsystemXMLElement.DISABLE_DEFAULT_EJB_PERMISSIONS.getLocalName());
    writer.writeAttribute(EJB3SubsystemXMLAttribute.VALUE.getLocalName(),model.get(DISABLE_DEFAULT_EJB_PERMISSIONS).asString());
    writer.writeEndElement();
  }
  if (model.hasDefined(ENABLE_STATISTICS)) {
    writer.writeStartElement(EJB3SubsystemXMLElement.STATISTICS.getLocalName());
    writer.writeAttribute(EJB3SubsystemXMLAttribute.ENABLED.getLocalName(),model.get(EJB3SubsystemModel.ENABLE_STATISTICS).asString());
    writer.writeEndElement();
  }
}
