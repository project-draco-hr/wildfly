{
  ModelVersion version=ModelVersion.create(1,0,0);
  TransformersSubRegistration subsystemTransformer=subsystem.registerModelTransformers(version,ResourceTransformer.DEFAULT);
  TransformersSubRegistration capability=subsystemTransformer.registerSubResource(PathElement.pathElement(ModelConstants.CAPABILITY),new ResourceTransformer(){
    @Override public void transformResource(    ResourceTransformationContext context,    PathAddress address,    Resource resource) throws OperationFailedException {
      ModelNode model=resource.getModel();
      removeUndefinedStartLevel(model);
      ResourceTransformationContext childContext=context.addTransformedResource(PathAddress.EMPTY_ADDRESS,resource);
      childContext.processChildren(resource);
    }
  }
);
  capability.registerOperationTransformer(ModelDescriptionConstants.ADD,new OperationTransformer(){
    @Override public TransformedOperation transformOperation(    TransformationContext context,    PathAddress address,    ModelNode operation) throws OperationFailedException {
      ModelNode op=operation.clone();
      removeUndefinedStartLevel(op);
      return new TransformedOperation(op,OperationResultTransformer.ORIGINAL_RESULT);
    }
  }
);
}
