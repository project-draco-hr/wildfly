{
  boolean registerRuntimeOnly=context.isRuntimeOnlyRegistrationValid();
  final SubsystemRegistration subsystem=context.registerSubsystem(SUBSYSTEM_NAME,1,0);
  final ManagementResourceRegistration registration=subsystem.registerSubsystemModel(OSGiSubsystemProviders.SUBSYSTEM);
  registration.registerOperationHandler(ModelDescriptionConstants.ADD,OSGiSubsystemAdd.INSTANCE,OSGiSubsystemAdd.DESCRIPTION,false);
  registration.registerReadWriteAttribute(ModelConstants.ACTIVATION,null,ActivationAttributeHandler.INSTANCE,EnumSet.of(AttributeAccess.Flag.STORAGE_CONFIGURATION,AttributeAccess.Flag.RESTART_JVM));
  registration.registerReadWriteAttribute(ModelConstants.STARTLEVEL,StartLevelHandler.READ_HANDLER,StartLevelHandler.WRITE_HANDLER,Storage.RUNTIME);
  if (registerRuntimeOnly) {
    registration.registerOperationHandler(ModelConstants.ACTIVATE,ActivateOperationHandler.INSTANCE,ActivateOperationHandler.INSTANCE,EnumSet.of(OperationEntry.Flag.RESTART_NONE));
  }
  registration.registerOperationHandler(ModelDescriptionConstants.DESCRIBE,OSGiSubsystemDescribeHandler.INSTANCE,OSGiSubsystemAdd.DESCRIPTION,false,OperationEntry.EntryType.PRIVATE);
  registration.registerOperationHandler(ModelDescriptionConstants.REMOVE,ReloadRequiredRemoveStepHandler.INSTANCE,OSGiSubsystemProviders.SUBSYSTEM_REMOVE,false);
  ManagementResourceRegistration configuration=registration.registerSubModel(PathElement.pathElement(ModelConstants.CONFIGURATION),OSGiSubsystemProviders.CONFIGURATION_DESCRIPTION);
  configuration.registerOperationHandler(ModelDescriptionConstants.ADD,OSGiConfigurationAdd.INSTANCE,OSGiConfigurationAdd.DESCRIPTION,false);
  configuration.registerOperationHandler(ModelDescriptionConstants.REMOVE,OSGiConfigurationRemove.INSTANCE,OSGiConfigurationRemove.DESCRIPTION,false);
  ManagementResourceRegistration properties=registration.registerSubModel(PathElement.pathElement(ModelConstants.PROPERTY),OSGiSubsystemProviders.PROPERTY_DESCRIPTION);
  properties.registerOperationHandler(ModelDescriptionConstants.ADD,OSGiFrameworkPropertyAdd.INSTANCE,OSGiFrameworkPropertyAdd.DESCRIPTION,false);
  properties.registerOperationHandler(ModelDescriptionConstants.REMOVE,OSGiFrameworkPropertyRemove.INSTANCE,OSGiFrameworkPropertyRemove.DESCRIPTION,false);
  properties.registerReadWriteAttribute(ModelConstants.VALUE,null,OSGiFrameworkPropertyWrite.INSTANCE,Storage.CONFIGURATION);
  ManagementResourceRegistration capabilities=registration.registerSubModel(PathElement.pathElement(ModelConstants.CAPABILITY),OSGiSubsystemProviders.CAPABILITY_DESCRIPTION);
  capabilities.registerOperationHandler(ModelDescriptionConstants.ADD,OSGiCapabilityAdd.INSTANCE,OSGiCapabilityAdd.DESCRIPTION,false);
  capabilities.registerOperationHandler(ModelDescriptionConstants.REMOVE,OSGiCapabilityRemove.INSTANCE,OSGiCapabilityRemove.DESCRIPTION,false);
  if (registerRuntimeOnly) {
    ManagementResourceRegistration bundles=registration.registerSubModel(PathElement.pathElement(ModelConstants.BUNDLE),OSGiSubsystemProviders.BUNDLE_DESCRIPTION);
    BundleRuntimeHandler.INSTANCE.register(bundles);
  }
  subsystem.registerXMLElementWriter(OSGiSubsystemWriter.INSTANCE);
}
