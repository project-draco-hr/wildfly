{
  final SubsystemRegistration subsystem=context.registerSubsystem(SUBSYSTEM_NAME);
  final ManagementResourceRegistration registration=subsystem.registerSubsystemModel(OSGiSubsystemProviders.SUBSYSTEM);
  registration.registerOperationHandler(ADD,OSGiSubsystemAdd.INSTANCE,OSGiSubsystemAdd.INSTANCE,false);
  registration.registerOperationHandler(DESCRIBE,OSGiSubsystemDescribeHandler.INSTANCE,OSGiSubsystemDescribeHandler.INSTANCE,false,OperationEntry.EntryType.PRIVATE);
  ManagementResourceRegistration casConfigs=registration.registerSubModel(PathElement.pathElement(CONFIGURATION),OSGiSubsystemProviders.OSGI_CONFIGURATION_RESOURCE);
  casConfigs.registerOperationHandler(ModelDescriptionConstants.ADD,OSGiCasConfigAdd.INSTANCE,OSGiCasConfigAdd.INSTANCE,false);
  casConfigs.registerOperationHandler(ModelDescriptionConstants.REMOVE,OSGiCasConfigRemove.INSTANCE,OSGiCasConfigRemove.INSTANCE,false);
  ManagementResourceRegistration properties=registration.registerSubModel(PathElement.pathElement(PROPERTY),OSGiSubsystemProviders.OSGI_PROPERTY_RESOURCE);
  properties.registerOperationHandler(ModelDescriptionConstants.ADD,OSGiPropertyAdd.INSTANCE,OSGiPropertyAdd.INSTANCE,false);
  properties.registerOperationHandler(ModelDescriptionConstants.REMOVE,OSGiPropertyRemove.INSTANCE,OSGiPropertyRemove.INSTANCE,false);
  ManagementResourceRegistration modules=registration.registerSubModel(PathElement.pathElement(MODULE),OSGiSubsystemProviders.OSGI_MODULE_RESOURCE);
  modules.registerOperationHandler(ModelDescriptionConstants.ADD,OSGiModuleAdd.INSTANCE,OSGiModuleAdd.INSTANCE,false);
  modules.registerOperationHandler(ModelDescriptionConstants.REMOVE,OSGiModuleRemove.INSTANCE,OSGiModuleRemove.INSTANCE,false);
  subsystem.registerXMLElementWriter(parser);
}
