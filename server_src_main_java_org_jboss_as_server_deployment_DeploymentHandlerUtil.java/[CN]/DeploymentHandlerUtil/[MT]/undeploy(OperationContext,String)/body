{
  if (context.getType() == OperationContext.Type.SERVER) {
    final Resource deployment=context.readResourceForUpdate(PathAddress.EMPTY_ADDRESS);
    final ImmutableManagementResourceRegistration registration=context.getResourceRegistration();
    DeploymentModelUtils.cleanup(deployment);
    context.addStep(new OperationStepHandler(){
      public void execute(      OperationContext context,      ModelNode operation){
        final ServiceName deploymentUnitServiceName=Services.deploymentUnitName(deploymentUnitName);
        context.removeService(deploymentUnitServiceName);
        context.removeService(deploymentUnitServiceName.append("contents"));
        if (context.completeStep() == OperationContext.ResultAction.ROLLBACK) {
          final ModelNode model=context.readModel(PathAddress.EMPTY_ADDRESS);
          final String name=model.require(NAME).asString();
          final String runtimeName=model.require(RUNTIME_NAME).asString();
          final DeploymentHandlerUtil.ContentItem[] contents=getContents(model.require(CONTENT));
          final ServiceVerificationHandler verificationHandler=new ServiceVerificationHandler();
          doDeploy(context,runtimeName,name,verificationHandler,deployment,registration,contents);
          if (context.hasFailureDescription()) {
            log.infof("Undeploy of deployment \"%s\" was rolled back with failure message %s",deploymentUnitName,context.getFailureDescription().asString());
          }
 else {
            log.infof("Undeploy of deployment \"%s\" was rolled back with no failure message",deploymentUnitName);
          }
        }
 else {
          log.infof("Undeployed \"%s\"",deploymentUnitName);
        }
      }
    }
,OperationContext.Stage.RUNTIME);
  }
}
