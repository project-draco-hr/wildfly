{
  final ServiceName deploymentUnitServiceName=Services.deploymentUnitName(deploymentUnitName);
  final ServiceRegistry serviceRegistry=context.getServiceRegistry();
  final ServiceController<?> controller=serviceRegistry.getService(deploymentUnitServiceName);
  if (controller != null) {
    controller.setMode(ServiceController.Mode.ACTIVE);
  }
 else {
    final ServiceTarget serviceTarget=context.getServiceTarget();
    final ServiceController<?> previous;
    final ServiceName contentsServiceName=deploymentUnitServiceName.append("contents");
    if (contents[0].hash != null)     previous=ContentServitor.addService(serviceTarget,contentsServiceName,contents[0].hash);
 else {
      final String path=contents[0].path;
      final ServiceName pathServiceName=AbstractPathService.pathNameOf(path);
      final String relativeTo=contents[0].relativeTo;
      if (relativeTo != null) {
        previous=RelativePathService.addService(pathServiceName,path,relativeTo,serviceTarget);
      }
 else {
        previous=AbsolutePathService.addService(pathServiceName,path,serviceTarget);
      }
      final ServiceController<VirtualFile> contentServiceController=PathContentServitor.addService(serviceTarget,contentsServiceName,pathServiceName);
      contentServiceController.addListener(new AbstractServiceListener<VirtualFile>(){
        @Override public void serviceRemoved(        ServiceController<? extends VirtualFile> serviceController){
          contentServiceController.removeListener(this);
          previous.setMode(REMOVE);
        }
      }
);
    }
    final RootDeploymentUnitService service=new RootDeploymentUnitService(deploymentUnitName,runtimeName,null);
    final ServiceController<DeploymentUnit> deploymentUnitController=serviceTarget.addService(deploymentUnitServiceName,service).addDependency(Services.JBOSS_DEPLOYMENT_CHAINS,DeployerChains.class,service.getDeployerChainsInjector()).addDependency(ServerDeploymentRepository.SERVICE_NAME,ServerDeploymentRepository.class,service.getServerDeploymentRepositoryInjector()).addDependency(contentsServiceName,VirtualFile.class,service.contentsInjector).setInitialMode(ServiceController.Mode.ACTIVE).install();
    previous.addListener(new AbstractServiceListener<Object>(){
      @Override public void serviceRemoved(      ServiceController<? extends Object> controller){
        controller.removeListener(this);
        deploymentUnitController.setMode(REMOVE);
      }
    }
);
  }
  resultHandler.handleResultComplete();
}
