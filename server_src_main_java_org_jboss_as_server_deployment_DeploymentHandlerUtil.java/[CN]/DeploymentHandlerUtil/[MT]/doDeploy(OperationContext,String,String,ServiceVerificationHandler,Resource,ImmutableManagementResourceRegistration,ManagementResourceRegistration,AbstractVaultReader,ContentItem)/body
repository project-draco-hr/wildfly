{
  final ServiceName deploymentUnitServiceName=Services.deploymentUnitName(deploymentUnitName);
  final List<ServiceController<?>> controllers=new ArrayList<ServiceController<?>>();
  final ServiceTarget serviceTarget=context.getServiceTarget();
  final ServiceController<?> contentService;
  final ServiceName contentsServiceName=deploymentUnitServiceName.append("contents");
  if (contents[0].hash != null)   contentService=ContentServitor.addService(serviceTarget,contentsServiceName,contents[0].hash,verificationHandler);
 else {
    final String path=contents[0].path;
    final String relativeTo=contents[0].relativeTo;
    contentService=PathContentServitor.addService(serviceTarget,contentsServiceName,path,relativeTo,verificationHandler);
  }
  controllers.add(contentService);
  final RootDeploymentUnitService service=new RootDeploymentUnitService(deploymentUnitName,managementName,null,registration,mutableRegistration,deploymentResource,verificationHandler,vaultReader);
  final ServiceController<DeploymentUnit> deploymentUnitController=serviceTarget.addService(deploymentUnitServiceName,service).addDependency(Services.JBOSS_DEPLOYMENT_CHAINS,DeployerChains.class,service.getDeployerChainsInjector()).addDependency(DeploymentMountProvider.SERVICE_NAME,DeploymentMountProvider.class,service.getServerDeploymentRepositoryInjector()).addDependency(contentsServiceName,VirtualFile.class,service.contentsInjector).addListener(ServiceListener.Inheritance.ALL,verificationHandler).setInitialMode(ServiceController.Mode.ACTIVE).install();
  controllers.add(deploymentUnitController);
  contentService.addListener(new AbstractServiceListener<Object>(){
    @Override public void transition(    final ServiceController<? extends Object> controller,    final ServiceController.Transition transition){
      if (transition == ServiceController.Transition.REMOVING_to_REMOVED) {
        deploymentUnitController.setMode(REMOVE);
      }
    }
  }
);
  return controllers;
}
