{
  if (context instanceof RuntimeOperationContext) {
    RuntimeOperationContext updateContext=(RuntimeOperationContext)context;
    String deploymentUnitName=deploymentModel.require(NAME).asString();
    final ServiceName deploymentUnitServiceName=Services.deploymentUnitName(deploymentUnitName);
    final ServiceRegistry serviceRegistry=updateContext.getServiceRegistry();
    final ServiceController<?> controller=serviceRegistry.getService(deploymentUnitServiceName);
    if (controller != null) {
      controller.setMode(ServiceController.Mode.ACTIVE);
    }
 else {
      final ServiceTarget serviceTarget=updateContext.getServiceTarget();
      final String runtimeName=deploymentModel.require(RUNTIME_NAME).asString();
      final byte[] hash=deploymentModel.require(HASH).asBytes();
      final RootDeploymentUnitService service=new RootDeploymentUnitService(deploymentUnitName,runtimeName,hash,null,new AbstractDeploymentUnitService.DeploymentCompletionCallback(){
        public void handleComplete(){
          resultHandler.handleResultComplete(compensatingOp);
        }
        public void handleFailure(        Map<ServiceName,StartException> startExceptions,        Set<ServiceName> failedDependencies){
          final StringBuilder failure=new StringBuilder("Deployment failed.  ");
          if (!startExceptions.isEmpty()) {
            failure.append("Service failures: ").append(startExceptions.values());
          }
          if (!failedDependencies.isEmpty()) {
            failure.append("Failed Dependencies: ").append(failedDependencies);
          }
          resultHandler.handleFailed(new ModelNode().set(failure.toString()));
        }
      }
);
      serviceTarget.addService(deploymentUnitServiceName,service).addDependency(Services.JBOSS_DEPLOYMENT_CHAINS,DeployerChains.class,service.getDeployerChainsInjector()).addDependency(ServerDeploymentRepository.SERVICE_NAME,ServerDeploymentRepository.class,service.getServerDeploymentRepositoryInjector()).setInitialMode(ServiceController.Mode.ACTIVE).install();
    }
  }
 else {
    resultHandler.handleResultComplete(compensatingOp);
  }
}
