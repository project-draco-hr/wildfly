{
  final String attributeName=operation.require(ModelDescriptionConstants.NAME).asString();
  final AttributeTransformationDescription description=attributeTransformations.get(attributeName);
  if (description == null) {
    context.invokeNext(operation);
    return;
  }
  final TransformationContext ctx=context.getContext();
  final ModelNode attributeValue=operation.get(ModelDescriptionConstants.VALUE);
  if (description.shouldDiscard(address,attributeValue,operation,context)) {
    context.recordTransformedOperation(OperationTransformer.DISCARD.transformOperation(ctx,address,operation));
    return;
  }
  context.setImmutableResource(true);
  try {
    final RejectedAttributesLogContext rejectedAttributes=new RejectedAttributesLogContext(context,address,TransformationRule.cloneAndProtect(operation));
    description.rejectAttributes(rejectedAttributes,attributeValue);
    final OperationRejectionPolicy policy;
    if (rejectedAttributes.hasRejections()) {
      rejectedAttributes.errorOrWarn();
      policy=new OperationRejectionPolicy(){
        @Override public boolean rejectOperation(        ModelNode preparedResult){
          return true;
        }
        @Override public String getFailureDescription(){
          try {
            return rejectedAttributes.errorOrWarn();
          }
 catch (          OperationFailedException e) {
            return null;
          }
        }
      }
;
    }
 else {
      policy=OperationTransformer.DEFAULT_REJECTION_POLICY;
    }
    description.convertValue(address,attributeValue,TransformationRule.cloneAndProtect(operation),context);
    String newName=description.getNewName();
    if (newName != null) {
      operation.get(NAME).set(newName);
    }
    context.invokeNext(new OperationTransformer.TransformedOperation(operation,policy,OperationResultTransformer.ORIGINAL_RESULT));
  }
  finally {
    context.setImmutableResource(false);
  }
}
