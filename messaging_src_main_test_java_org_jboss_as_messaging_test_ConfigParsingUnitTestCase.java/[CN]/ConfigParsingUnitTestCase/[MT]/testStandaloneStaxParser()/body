{
  final ParseResult<ServerModel> parseResult=new ParseResult<ServerModel>();
  MessagingSubsystemParser.enableThreadLocal(true);
  try {
    final XMLMapper mapper=createXMLMapper();
    URL configURL=getClass().getResource("/standalone-with-messaging.xml");
    Assert.assertNotNull("standalone-with-messaging.xml url is not null",configURL);
    System.out.println("configURL = " + configURL);
    BufferedReader reader=new BufferedReader(new InputStreamReader(configURL.openStream()));
    mapper.parseDocument(parseResult,XMLInputFactory.newInstance().createXMLStreamReader(reader));
    MessagingSubsystemElement mse=MessagingSubsystemParser.getLastSubsystemElement();
    ConfigurationElementWriter config=mse.getConfiguration();
    Configuration jmsConfig=config.getConfiguration();
    Assert.assertEquals("bindings-directory","${jboss.server.data.dir}/hornetq/bindings",jmsConfig.getBindingsDirectory());
    Assert.assertEquals("journal-type",JournalType.NIO,jmsConfig.getJournalType());
    Assert.assertEquals("journal-min-files",10,jmsConfig.getJournalMinFiles());
    Assert.assertEquals("journal-file-size",1048576,jmsConfig.getJournalFileSize());
    Assert.assertEquals("paging-directory","${jboss.server.data.dir}/hornetq/paging",jmsConfig.getPagingDirectory());
    Map<String,Set<Role>> securityRoleMap=jmsConfig.getSecurityRoles();
    Assert.assertEquals("1 security roles",1,securityRoleMap.size());
    Set<Role> securityRoles=securityRoleMap.values().iterator().next();
    Role expectedRole=new Role("guest",true,true,false,false,true,true,false);
    Set<Role> expectedRoles=new HashSet<Role>();
    expectedRoles.add(expectedRole);
    Assert.assertEquals("guest role",expectedRoles,securityRoles);
    Map<String,TransportConfiguration> connectors=jmsConfig.getConnectorConfigurations();
    Assert.assertEquals("3 connectors",3,connectors.size());
    Map<String,Object> c0params=new HashMap<String,Object>();
    c0params.put("host","${jboss.bind.address:localhost}");
    c0params.put("port","${hornetq.remoting.netty.port:5445}");
    c0params.put("socket-ref","hq:netty");
    TransportConfiguration c0=new TransportConfiguration("org.hornetq.core.remoting.impl.netty.NettyConnectorFactory",c0params,"netty");
    Map<String,Object> c1params=new HashMap<String,Object>();
    c1params.put("host","${jboss.bind.address:localhost}");
    c1params.put("port","${hornetq.remoting.netty.batch.port:5455}");
    c1params.put("batch-delay","50");
    c1params.put("socket-ref","hq:netty-throughput");
    TransportConfiguration c1=new TransportConfiguration("org.hornetq.core.remoting.impl.netty.NettyConnectorFactory",c1params,"netty-throughput");
    Map<String,Object> c2params=new HashMap<String,Object>();
    c2params.put("server-id","${hornetq.server-id:0}");
    TransportConfiguration c2=new TransportConfiguration("org.hornetq.core.remoting.impl.invm.InVMConnectorFactory",c2params,"in-vm");
    Map<String,TransportConfiguration> expectedConnectors=new HashMap<String,TransportConfiguration>();
    expectedConnectors.put(c0.getName(),c0);
    expectedConnectors.put(c1.getName(),c1);
    expectedConnectors.put(c2.getName(),c2);
    for (    String connKey : expectedConnectors.keySet()) {
      TransportConfiguration tcex=expectedConnectors.get(connKey);
      TransportConfiguration tc=connectors.get(connKey);
      Assert.assertEquals(connKey,tcex,tc);
    }
    Set<TransportConfiguration> acceptors=jmsConfig.getAcceptorConfigurations();
    Assert.assertEquals("3 acceptors",3,acceptors.size());
    Map<String,Object> a0params=new HashMap<String,Object>();
    a0params.put("host","${jboss.bind.address:localhost}");
    a0params.put("port","${hornetq.remoting.netty.port:5445}");
    a0params.put("socket-ref","hq:netty");
    TransportConfiguration a0=new TransportConfiguration("org.hornetq.core.remoting.impl.netty.NettyAcceptorFactory",a0params,"netty");
    Map<String,Object> a1params=new HashMap<String,Object>();
    a1params.put("host","${jboss.bind.address:localhost}");
    a1params.put("port","${hornetq.remoting.netty.batch.port:5455}");
    a1params.put("batch-delay","50");
    a1params.put("direct-deliver","false");
    a1params.put("socket-ref","hq:netty-throughput");
    TransportConfiguration a1=new TransportConfiguration("org.hornetq.core.remoting.impl.netty.NettyAcceptorFactory",a1params,"netty-throughput");
    Map<String,Object> a2params=new HashMap<String,Object>();
    a2params.put("server-id","0");
    TransportConfiguration a2=new TransportConfiguration("org.hornetq.core.remoting.impl.invm.InVMAcceptorFactory",a2params,"in-vm");
    Map<String,TransportConfiguration> expectedAcceptors=new HashMap<String,TransportConfiguration>();
    expectedAcceptors.put(a0.getName(),a0);
    expectedAcceptors.put(a1.getName(),a1);
    expectedAcceptors.put(a2.getName(),a2);
    for (    TransportConfiguration tc : acceptors) {
      TransportConfiguration tcex=expectedAcceptors.get(tc.getName());
      Assert.assertEquals(tc.getName(),tcex,tc);
    }
  }
 catch (  Exception e) {
    throw new RuntimeException("standalone-with-messaging.xml",e);
  }
 finally {
    MessagingSubsystemParser.clearLastSubsystemElement();
  }
}
