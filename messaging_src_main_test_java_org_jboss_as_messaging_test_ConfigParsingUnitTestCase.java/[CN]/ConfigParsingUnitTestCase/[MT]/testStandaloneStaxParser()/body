{
  try {
    final XMLMapper mapper=createXMLMapper();
    URL configURL=getClass().getResource("/standalone-with-messaging.xml");
    Assert.assertNotNull("standalone-with-messaging.xml url is not null",configURL);
    System.out.println("configURL = " + configURL);
    BufferedReader reader=new BufferedReader(new InputStreamReader(configURL.openStream()));
    List<AbstractServerModelUpdate<?>> updates=new ArrayList<AbstractServerModelUpdate<?>>();
    mapper.parseDocument(updates,XMLInputFactory.newInstance().createXMLStreamReader(reader));
    final ServerModel model=new ServerModel();
    for (    final AbstractServerModelUpdate<?> update : updates) {
      model.update(update);
    }
    MessagingSubsystemElement subsystem=(MessagingSubsystemElement)model.getProfile().getSubsystem(namespace);
    Assert.assertNotNull(subsystem);
    Assert.assertFalse(subsystem.isPersistenceEnabled());
    Assert.assertEquals("bindings-directory","hornetq/bindings",subsystem.getBindingsDirectory().getPath());
    Assert.assertEquals("journal-type",JournalType.NIO,subsystem.getJournalType());
    Assert.assertEquals("journal-min-files",2,subsystem.getJournalMinFiles());
    Assert.assertEquals("journal-file-size",102400,subsystem.getJournalFileSize());
    Assert.assertEquals("paging-directory","hornetq/paging",subsystem.getPagingDirectory().getPath());
    Map<String,Set<Role>> securityRoleMap=new HashMap<String,Set<Role>>();
    for (    SecuritySettingsElement sec : subsystem.getSecuritySettings()) {
      securityRoleMap.put(sec.getMatch(),sec.getRoles());
    }
    Assert.assertEquals("1 security roles",1,securityRoleMap.size());
    Set<Role> securityRoles=securityRoleMap.values().iterator().next();
    Role expectedRole=new Role("guest",true,true,false,false,true,true,false);
    Set<Role> expectedRoles=new HashSet<Role>();
    expectedRoles.add(expectedRole);
    Assert.assertEquals("guest role",expectedRoles,securityRoles);
    final Map<String,AbstractTransportElement<?>> connectors=new HashMap<String,AbstractTransportElement<?>>();
    for (    AbstractTransportElement<?> connector : subsystem.getConnectors()) {
      Assert.assertNotNull(connector.getName());
      connectors.put(connector.getName(),connector);
    }
    Assert.assertEquals("4 connectors",4,connectors.size());
    Assert.assertEquals("netty",connectors.get("netty").getSocketBindingRef());
    Assert.assertEquals("netty-throughput",connectors.get("netty-throughput").getSocketBindingRef());
    Assert.assertNull(connectors.get("in-vm").getSocketBindingRef());
    Assert.assertEquals("generic",connectors.get("generic").getSocketBindingRef());
    Assert.assertEquals("org.jboss.test.ConnectorFactory",connectors.get("generic").getFactoryClassName());
    final Map<String,AbstractTransportElement<?>> acceptors=new HashMap<String,AbstractTransportElement<?>>();
    for (    final AbstractTransportElement<?> acceptor : subsystem.getAcceptors()) {
      Assert.assertNotNull(acceptor.getName());
      acceptors.put(acceptor.getName(),acceptor);
    }
    Assert.assertEquals("4 acceptors",4,acceptors.size());
    Assert.assertEquals("netty",acceptors.get("netty").getSocketBindingRef());
    Assert.assertEquals("netty-throughput",acceptors.get("netty-throughput").getSocketBindingRef());
    Assert.assertNull(acceptors.get("in-vm").getSocketBindingRef());
    Assert.assertEquals("generic",acceptors.get("generic").getSocketBindingRef());
    Assert.assertEquals("org.jboss.test.AcceptorFactory",acceptors.get("generic").getFactoryClassName());
  }
 catch (  Exception e) {
    throw new RuntimeException("standalone-with-messaging.xml",e);
  }
 finally {
  }
}
