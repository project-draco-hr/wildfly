{
  final TransformersSubRegistration transformers=subsystem.registerModelTransformers(VERSION_1_1_0,new AbstractSubsystemTransformer(SUBSYSTEM_NAME){
    private void removeAttributes(    ModelNode model,    AttributeDefinition... removedAttributes){
      for (      AttributeDefinition attr : removedAttributes) {
        model.remove(attr.getName());
      }
    }
    @Override public ModelNode transformModel(    final TransformationContext context,    final ModelNode model){
      ModelNode oldModel=model.clone();
      if (oldModel.hasDefined(HORNETQ_SERVER)) {
        for (        Property server : oldModel.get(HORNETQ_SERVER).asPropertyList()) {
          ModelNode oldServer=oldModel.get(HORNETQ_SERVER,server.getName());
          if (!oldServer.hasDefined(CLUSTERED.getName())) {
            oldServer.get(CLUSTERED.getName()).set(false);
          }
          removeAttributes(oldServer,HornetQServerResourceDefinition.NEW_ATTRIBUTES_ADDED_AFTER_1_1_0);
          if (server.getValue().hasDefined(CLUSTER_CONNECTION)) {
            for (            Property clusterConnection : server.getValue().get(CLUSTER_CONNECTION).asPropertyList()) {
              removeAttributes(oldServer.get(CLUSTER_CONNECTION,clusterConnection.getName()),ClusterConnectionDefinition.NEW_ATTRIBUTES_ADDED_AFTER_1_1_0);
            }
          }
          if (server.getValue().hasDefined(BROADCAST_GROUP)) {
            for (            Property broadcastGroup : server.getValue().get(BROADCAST_GROUP).asPropertyList()) {
              removeAttributes(oldServer.get(BROADCAST_GROUP,broadcastGroup.getName()),BroadcastGroupDefinition.NEW_ATTRIBUTES_ADDED_AFTER_1_1_0);
            }
          }
          if (server.getValue().hasDefined(DISCOVERY_GROUP)) {
            for (            Property discoveryGroup : server.getValue().get(DISCOVERY_GROUP).asPropertyList()) {
              removeAttributes(oldServer.get(DISCOVERY_GROUP,discoveryGroup.getName()),DiscoveryGroupDefinition.NEW_ATTRIBUTES_ADDED_AFTER_1_1_0);
            }
          }
          if (server.getValue().hasDefined(POOLED_CONNECTION_FACTORY)) {
            for (            Property pooledConnectionFactory : server.getValue().get(POOLED_CONNECTION_FACTORY).asPropertyList()) {
              removeAttributes(oldServer.get(POOLED_CONNECTION_FACTORY,pooledConnectionFactory.getName()),PooledConnectionFactoryDefinition.NEW_ATTRIBUTES_ADDED_AFTER_1_1_0);
            }
          }
          if (server.getValue().hasDefined(CONNECTION_FACTORY)) {
            for (            Property connectionFactory : server.getValue().get(CONNECTION_FACTORY).asPropertyList()) {
              removeAttributes(oldServer.get(CONNECTION_FACTORY,connectionFactory.getName()),ConnectionFactoryDefinition.NEW_ATTRIBUTES_ADDED_AFTER_1_1_0);
              if (!connectionFactory.getValue().hasDefined(HA.getName())) {
                oldServer.get(CONNECTION_FACTORY,connectionFactory.getName()).get(HA.getName()).set(HA.getDefaultValue());
              }
              if (connectionFactory.getValue().hasDefined(FACTORY_TYPE.getName()) && (connectionFactory.getValue().get(FACTORY_TYPE.getName()).equals(FACTORY_TYPE.getDefaultValue()))) {
                oldServer.get(CONNECTION_FACTORY,connectionFactory.getName()).get(FACTORY_TYPE.getName()).set(new ModelNode());
              }
            }
          }
          if (server.getValue().hasDefined(CORE_ADDRESS)) {
            oldServer.remove(CORE_ADDRESS);
          }
          if (server.getValue().hasDefined(RUNTIME_QUEUE)) {
            oldServer.remove(RUNTIME_QUEUE);
          }
        }
      }
      return oldModel;
    }
  }
);
  RejectExpressionValuesTransformer rejectServerExpressionTransformer=new RejectExpressionValuesTransformer(HornetQServerResourceDefinition.ATTRIBUTES_WITH_EXPRESSION_AFTER_1_1_0);
  DiscardUndefinedAttributesTransformer discardUndefinedServerAttributes=new DiscardUndefinedAttributesTransformer(HornetQServerResourceDefinition.NEW_ATTRIBUTES_ADDED_AFTER_1_1_0);
  TransformersSubRegistration server=transformers.registerSubResource(PathElement.pathElement(HORNETQ_SERVER));
  server.registerOperationTransformer(ADD,new ChainedOperationTransformer(new OperationTransformers.InsertDefaultValuesOperationTransformer(ID_CACHE_SIZE,CLUSTERED),rejectServerExpressionTransformer,discardUndefinedServerAttributes));
  server.registerOperationTransformer(WRITE_ATTRIBUTE_OPERATION,new ChainedOperationTransformer(rejectServerExpressionTransformer.getWriteAttributeTransformer(),discardUndefinedServerAttributes.getWriteAttributeTransformer()));
  server.registerOperationTransformer(UNDEFINE_ATTRIBUTE_OPERATION,new ChainedOperationTransformer(discardUndefinedServerAttributes.getUndefineAttributeTransformer()));
  rejectExpressions(server,AddressSettingDefinition.PATH,AddressSettingDefinition.REJECTED_EXPRESSION_ATTRIBUTES);
  DiscardUndefinedAttributesTransformer discardBroadcastUndefinedAttributes=new DiscardUndefinedAttributesTransformer(BroadcastGroupDefinition.NEW_ATTRIBUTES_ADDED_AFTER_1_1_0);
  RejectExpressionValuesTransformer rejectBroadcastGroupExpressions=new RejectExpressionValuesTransformer(BroadcastGroupDefinition.ATTRIBUTES_WITH_EXPRESSION_AFTER_1_1_0);
  TransformersSubRegistration broadcastGroup=server.registerSubResource(BroadcastGroupDefinition.PATH);
  broadcastGroup.registerOperationTransformer(ADD,new ChainedOperationTransformer(rejectBroadcastGroupExpressions,discardBroadcastUndefinedAttributes));
  broadcastGroup.registerOperationTransformer(WRITE_ATTRIBUTE_OPERATION,new ChainedOperationTransformer(rejectBroadcastGroupExpressions.getWriteAttributeTransformer(),discardBroadcastUndefinedAttributes.getWriteAttributeTransformer()));
  broadcastGroup.registerOperationTransformer(UNDEFINE_ATTRIBUTE_OPERATION,new ChainedOperationTransformer(discardBroadcastUndefinedAttributes.getUndefineAttributeTransformer()));
  DiscardUndefinedAttributesTransformer discardDiscoveryGroupUndefinedAttributes=new DiscardUndefinedAttributesTransformer(DiscoveryGroupDefinition.NEW_ATTRIBUTES_ADDED_AFTER_1_1_0);
  RejectExpressionValuesTransformer rejectDiscoveryGroupExpressions=new RejectExpressionValuesTransformer(DiscoveryGroupDefinition.ATTRIBUTES_WITH_EXPRESSION_AFTER_1_1_0);
  TransformersSubRegistration discoveryGroup=server.registerSubResource(DiscoveryGroupDefinition.PATH);
  discoveryGroup.registerOperationTransformer(ADD,new ChainedOperationTransformer(rejectDiscoveryGroupExpressions,discardDiscoveryGroupUndefinedAttributes));
  discoveryGroup.registerOperationTransformer(WRITE_ATTRIBUTE_OPERATION,new ChainedOperationTransformer(rejectDiscoveryGroupExpressions.getWriteAttributeTransformer(),discardDiscoveryGroupUndefinedAttributes.getWriteAttributeTransformer()));
  discoveryGroup.registerOperationTransformer(UNDEFINE_ATTRIBUTE_OPERATION,new ChainedOperationTransformer(discardDiscoveryGroupUndefinedAttributes.getUndefineAttributeTransformer()));
  rejectExpressions(server,DivertDefinition.PATH,DivertDefinition.ATTRIBUTES_WITH_EXPRESSION_AFTER_1_1_0);
  rejectExpressions(server,BridgeDefinition.PATH,BridgeDefinition.ATTRIBUTES_WITH_EXPRESSION_AFTER_1_1_0);
  rejectExpressions(server,QueueDefinition.PATH,QueueDefinition.ATTRIBUTES_WITH_EXPRESSION_AFTER_1_1_0);
  for (  String path : new String[]{CommonAttributes.ACCEPTOR,CommonAttributes.CONNECTOR}) {
    TransformersSubRegistration transport=rejectExpressions(server,PathElement.pathElement(path),CommonAttributes.FACTORY_CLASS);
    rejectExpressions(transport,TransportParamDefinition.PATH,TransportParamDefinition.ATTRIBUTES_WITH_EXPRESSION_AFTER_1_1_0);
  }
  for (  String path : new String[]{CommonAttributes.IN_VM_ACCEPTOR,CommonAttributes.IN_VM_CONNECTOR}) {
    TransformersSubRegistration transport=rejectExpressions(server,PathElement.pathElement(path),InVMTransportDefinition.ATTRIBUTES_WITH_EXPRESSION_AFTER_1_1_0);
    rejectExpressions(transport,TransportParamDefinition.PATH,TransportParamDefinition.ATTRIBUTES_WITH_EXPRESSION_AFTER_1_1_0);
  }
  for (  String path : new String[]{CommonAttributes.REMOTE_ACCEPTOR,CommonAttributes.REMOTE_CONNECTOR}) {
    TransformersSubRegistration transport=server.registerSubResource(PathElement.pathElement(path));
    rejectExpressions(transport,TransportParamDefinition.PATH,TransportParamDefinition.ATTRIBUTES_WITH_EXPRESSION_AFTER_1_1_0);
  }
  for (  final String path : MessagingPathHandlers.PATHS.keySet()) {
    rejectExpressions(server,PathElement.pathElement(PATH,path),PATH);
  }
  RejectExpressionValuesTransformer rejectClusterConnectionExpressions=new RejectExpressionValuesTransformer(ClusterConnectionDefinition.ATTRIBUTES_WITH_EXPRESSION_AFTER_1_1_0);
  DiscardUndefinedAttributesTransformer discardClusterConnectionUndefinedAttributes=new DiscardUndefinedAttributesTransformer(ClusterConnectionDefinition.NEW_ATTRIBUTES_ADDED_AFTER_1_1_0);
  TransformersSubRegistration clusterConnection=server.registerSubResource(ClusterConnectionDefinition.PATH,rejectClusterConnectionExpressions,rejectClusterConnectionExpressions);
  clusterConnection.registerOperationTransformer(ADD,new ChainedOperationTransformer(rejectClusterConnectionExpressions,discardClusterConnectionUndefinedAttributes));
  clusterConnection.registerOperationTransformer(WRITE_ATTRIBUTE_OPERATION,new ChainedOperationTransformer(rejectClusterConnectionExpressions.getWriteAttributeTransformer(),discardClusterConnectionUndefinedAttributes.getWriteAttributeTransformer()));
  clusterConnection.registerOperationTransformer(UNDEFINE_ATTRIBUTE_OPERATION,new ChainedOperationTransformer(discardClusterConnectionUndefinedAttributes.getUndefineAttributeTransformer()));
  TransformersSubRegistration connectorService=rejectExpressions(server,ConnectorServiceDefinition.PATH,CommonAttributes.FACTORY_CLASS);
  rejectExpressions(connectorService,ConnectorServiceParamDefinition.PATH,VALUE);
  RejectExpressionValuesTransformer rejectConnectionFactoryExpressions=new RejectExpressionValuesTransformer(ConnectionFactoryDefinition.ATTRIBUTES_WITH_EXPRESSION_AFTER_1_1_0);
  DiscardUndefinedAttributesTransformer discardConnectionFactoryUndefinedAttributes=new DiscardUndefinedAttributesTransformer(ConnectionFactoryDefinition.NEW_ATTRIBUTES_ADDED_AFTER_1_1_0);
  TransformersSubRegistration connectionFactory=server.registerSubResource(ConnectionFactoryDefinition.PATH,rejectConnectionFactoryExpressions,rejectConnectionFactoryExpressions);
  connectionFactory.registerOperationTransformer(ADD,new ChainedOperationTransformer(rejectConnectionFactoryExpressions,discardConnectionFactoryUndefinedAttributes));
  connectionFactory.registerOperationTransformer(WRITE_ATTRIBUTE_OPERATION,new ChainedOperationTransformer(rejectConnectionFactoryExpressions.getWriteAttributeTransformer(),discardConnectionFactoryUndefinedAttributes.getWriteAttributeTransformer()));
  connectionFactory.registerOperationTransformer(UNDEFINE_ATTRIBUTE_OPERATION,new ChainedOperationTransformer(discardConnectionFactoryUndefinedAttributes.getUndefineAttributeTransformer()));
  RejectExpressionValuesTransformer rejectPooledConnectionFactoryExpressions=new RejectExpressionValuesTransformer(PooledConnectionFactoryDefinition.ATTRIBUTES_WITH_EXPRESSION_AFTER_1_1_0);
  DiscardUndefinedAttributesTransformer discardUndefinedPooledConnectionFactoryAttributes=new DiscardUndefinedAttributesTransformer(PooledConnectionFactoryDefinition.NEW_ATTRIBUTES_ADDED_AFTER_1_1_0);
  TransformersSubRegistration pooledConnectionFactory=server.registerSubResource(PooledConnectionFactoryDefinition.PATH);
  pooledConnectionFactory.registerOperationTransformer(ADD,new ChainedOperationTransformer(new OperationTransformers.InsertDefaultValuesOperationTransformer(ConnectionFactoryAttributes.Pooled.RECONNECT_ATTEMPTS),rejectConnectionFactoryExpressions,discardUndefinedPooledConnectionFactoryAttributes));
  pooledConnectionFactory.registerOperationTransformer(WRITE_ATTRIBUTE_OPERATION,new ChainedOperationTransformer(rejectPooledConnectionFactoryExpressions.getWriteAttributeTransformer(),discardUndefinedPooledConnectionFactoryAttributes.getWriteAttributeTransformer()));
  pooledConnectionFactory.registerOperationTransformer(UNDEFINE_ATTRIBUTE_OPERATION,new ChainedOperationTransformer(discardUndefinedPooledConnectionFactoryAttributes.getUndefineAttributeTransformer()));
  rejectExpressions(server,GroupingHandlerDefinition.PATH,GroupingHandlerDefinition.ATTRIBUTES_WITH_EXPRESSION_AFTER_1_1_0);
  rejectExpressions(server,JMSQueueDefinition.PATH,JMSQueueDefinition.ATTRIBUTES_WITH_EXPRESSION_AFTER_1_1_0);
  rejectExpressions(server,JMSTopicDefinition.PATH,JMSTopicDefinition.ATTRIBUTES_WITH_EXPRESSION_AFTER_1_1_0);
}
