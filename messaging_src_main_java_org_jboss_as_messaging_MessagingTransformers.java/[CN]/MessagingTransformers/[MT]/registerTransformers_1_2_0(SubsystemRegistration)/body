{
  final ResourceTransformationDescriptionBuilder subsystemRoot=TransformationDescriptionBuilder.Factory.createSubsystemInstance();
  ResourceTransformationDescriptionBuilder hornetqServer=subsystemRoot.addChildResource(pathElement(HORNETQ_SERVER));
  hornetqServer.getAttributeBuilder().setDiscard(new DiscardAttributeChecker(){
    @Override public boolean isDiscardExpressions(){
      return false;
    }
    @Override public boolean isDiscardUndefined(){
      return true;
    }
    @Override public boolean isOperationParameterDiscardable(    PathAddress address,    String attributeName,    ModelNode attributeValue,    ModelNode operation,    TransformationContext context){
      Set<String> clusterConnectionNames=context.readResource(address).getChildrenNames(ClusterConnectionDefinition.PATH.getKey());
      boolean clustered=!clusterConnectionNames.isEmpty();
      boolean wantsClustered=attributeValue.asBoolean(clustered);
      if (clustered && !wantsClustered) {
        String msg=MessagingLogger.ROOT_LOGGER.canNotChangeClusteredAttribute(address);
        context.getLogger().logAttributeWarning(address,operation,msg,CLUSTERED.getName());
      }
      return true;
    }
    @Override public boolean isResourceAttributeDiscardable(    PathAddress address,    String attributeName,    ModelNode attributeValue,    TransformationContext context){
      return true;
    }
  }
,CommonAttributes.CLUSTERED).end();
  rejectDefinedAttributeWithDefaultValue(hornetqServer,MAX_SAVED_REPLICATED_JOURNAL_SIZE,OVERRIDE_IN_VM_SECURITY);
  renameAttribute(hornetqServer,STATISTICS_ENABLED,MESSAGE_COUNTER_ENABLED);
  hornetqServer.rejectChildResource(HTTPAcceptorDefinition.PATH);
  hornetqServer.rejectChildResource(pathElement(CommonAttributes.HTTP_CONNECTOR));
  ResourceTransformationDescriptionBuilder addressSetting=hornetqServer.addChildResource(AddressSettingDefinition.PATH);
  rejectDefinedAttributeWithDefaultValue(addressSetting,EXPIRY_DELAY,MAX_REDELIVERY_DELAY,REDELIVERY_MULTIPLIER);
  ResourceTransformationDescriptionBuilder bridge=hornetqServer.addChildResource(BridgeDefinition.PATH);
  rejectDefinedAttributeWithDefaultValue(bridge,RECONNECT_ATTEMPTS_ON_SAME_NODE,BridgeDefinition.INITIAL_CONNECT_ATTEMPTS);
  discardAttribute(bridge,FAILOVER_ON_SERVER_SHUTDOWN);
  ResourceTransformationDescriptionBuilder clusterConnection=hornetqServer.addChildResource(ClusterConnectionDefinition.PATH);
  rejectDefinedAttributeWithDefaultValue(clusterConnection,ClusterConnectionDefinition.INITIAL_CONNECT_ATTEMPTS);
  ResourceTransformationDescriptionBuilder groupingHandler=hornetqServer.addChildResource(GroupingHandlerDefinition.PATH);
  rejectDefinedAttributeWithDefaultValue(groupingHandler,GROUP_TIMEOUT,REAPER_PERIOD);
  TransformationDescription.Tools.register(subsystemRoot.build(),subsystem,VERSION_1_2_0);
}
