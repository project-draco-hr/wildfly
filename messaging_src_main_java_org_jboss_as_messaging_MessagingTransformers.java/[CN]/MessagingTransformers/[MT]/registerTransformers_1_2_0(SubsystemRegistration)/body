{
  final ResourceTransformationDescriptionBuilder subsystemRoot=TransformationDescriptionBuilder.Factory.createSubsystemInstance();
  ResourceTransformationDescriptionBuilder hornetqServer=subsystemRoot.addChildResource(PathElement.pathElement(HORNETQ_SERVER));
  hornetqServer.getAttributeBuilder().setDiscard(new DiscardAttributeChecker(){
    @Override public boolean isDiscardExpressions(){
      return false;
    }
    @Override public boolean isDiscardUndefined(){
      return true;
    }
    @Override public boolean isOperationParameterDiscardable(    PathAddress address,    String attributeName,    ModelNode attributeValue,    ModelNode operation,    TransformationContext context){
      Set<String> clusterConnectionNames=context.readResource(PathAddress.EMPTY_ADDRESS).getChildrenNames(ClusterConnectionDefinition.PATH.getKey());
      boolean clustered=!clusterConnectionNames.isEmpty();
      boolean wantsClustered=attributeValue.asBoolean(clustered);
      if (clustered && !wantsClustered) {
        PathAddress serverAddress=PathAddress.pathAddress(operation.get(OP_ADDR));
        String msg=MessagingMessages.MESSAGES.canNotChangeClusteredAttribute(serverAddress);
        context.getLogger().logAttributeWarning(serverAddress,operation,msg,CLUSTERED.getName());
      }
      return true;
    }
    @Override public boolean isResourceAttributeDiscardable(    PathAddress address,    String attributeName,    ModelNode attributeValue,    TransformationContext context){
      return true;
    }
  }
,CommonAttributes.CLUSTERED).end();
  TransformationDescription.Tools.register(subsystemRoot.build(),subsystem,VERSION_1_2_0);
}
