{
  XResolver resolver=injectedResolver.getValue();
  XPersistentRepository repository=injectedRepository.getValue();
  XResourceProvisioner provisioner=new AbstractResourceProvisioner(resolver,repository,XResource.TYPE_BUNDLE){
    @Override @SuppressWarnings("unchecked") public <T>List<T> installResources(    List<XResource> resources,    Class<T> type) throws ProvisionException {
      List<T> result=new ArrayList<T>();
      for (      XResource res : resources) {
        String name=res.getIdentityCapability().getName();
        String location="provisioned-resource/" + name;
        InputStream input=((RepositoryContent)res).getContent();
        try {
          Bundle bundle=syscontext.installBundle(location,input);
          result.add((T)bundle);
        }
 catch (        BundleException ex) {
          throw new ProvisionException(ex);
        }
      }
      return Collections.unmodifiableList(result);
    }
  }
;
  Dictionary<String,String> props=new Hashtable<String,String>();
  props.put("type",XResource.TYPE_BUNDLE);
  syscontext.registerService(XResourceProvisioner.class,provisioner,props);
}
