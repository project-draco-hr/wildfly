{
  ServiceController<?> controller=startContext.getController();
  LOGGER.tracef("Starting: %s in mode %s",controller.getName(),controller.getMode());
  serviceContainer=startContext.getController().getServiceContainer();
  final BundleContext syscontext=injectedBundleContext.getValue();
  BundleManager bundleManager=injectedBundleManager.getValue();
  resource.getInjectedBundleManager().inject(bundleManager);
  String bindingNames=syscontext.getProperty(FrameworkBootstrapService.MAPPED_OSGI_SOCKET_BINDINGS);
  if (bindingNames != null) {
    final Set<ServiceName> socketBindingNames=new HashSet<ServiceName>();
    for (    String suffix : bindingNames.split(",")) {
      socketBindingNames.add(JBOSS_BINDING_NAME.append(suffix));
    }
    ServiceTarget serviceTarget=startContext.getChildTarget();
    ServiceName serviceName=IntegrationService.SYSTEM_SERVICES_PLUGIN.append("BINDINGS");
    ServiceBuilder<Void> builder=serviceTarget.addService(serviceName,new AbstractService<Void>(){
      @Override public void start(      StartContext context) throws StartException {
        for (        ServiceName serviceName : socketBindingNames) {
          SocketBinding binding=(SocketBinding)serviceContainer.getRequiredService(serviceName).getValue();
          Dictionary<String,String> props=new Hashtable<String,String>();
          props.put("socketBinding",serviceName.getSimpleName());
          InetSocketAddress value=binding.getSocketAddress();
          syscontext.registerService(InetSocketAddress.class.getName(),value,props);
        }
      }
    }
);
    ServiceName[] serviceNameArray=socketBindingNames.toArray(new ServiceName[socketBindingNames.size()]);
    builder.addDependencies(serviceNameArray);
    builder.install();
  }
  controllerThreadExecutor=Executors.newSingleThreadExecutor(new ThreadFactory(){
    @Override public Thread newThread(    Runnable run){
      Thread thread=new Thread(run);
      thread.setName("OSGi ModelControllerClient Thread");
      thread.setDaemon(true);
      return thread;
    }
  }
);
  ModelController modelController=injectedModelController.getValue();
  ModelControllerClient client=modelController.createClient(controllerThreadExecutor);
  syscontext.registerService(ModelControllerClient.class.getName(),client,null);
  final ServerEnvironment serverenv=injectedServerEnvironment.getValue();
  final File storageDir=new File(serverenv.getServerDataDir().getPath() + File.separator + "repository");
  RepositoryStorageFactory factory=new RepositoryStorageFactory(){
    @Override public RepositoryStorage create(    XRepository repository){
      return new FileBasedRepositoryStorage(repository,storageDir){
        @Override public XResource addResource(        XResource res) throws RepositoryStorageException {
          if (res.getCapabilities(MODULE_IDENTITY_NAMESPACE).isEmpty()) {
            return super.addResource(res);
          }
 else {
            return res;
          }
        }
      }
;
    }
  }
;
  XRepositoryBuilder builder=XRepositoryBuilder.create(syscontext);
  builder.addRepository(new ModuleIdentityRepository(serverenv));
  builder.addRepositoryStorage(factory);
  builder.addDefaultRepositories();
  syscontext.registerService(ServiceContainer.class.getName(),serviceContainer,null);
  for (  SubsystemExtension extension : extensions) {
    extension.startSystemServices(startContext,syscontext);
  }
}
