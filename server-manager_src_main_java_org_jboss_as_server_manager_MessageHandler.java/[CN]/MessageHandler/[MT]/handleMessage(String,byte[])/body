{
  try {
    Command cmd=ServerManagerProtocolCommand.readCommand(message);
    log.info("Received message from server " + sourceProcessName + ": "+ cmd.getCommand());
    if (DomainControllerProcess.DOMAIN_CONTROLLER_PROCESS_NAME.equals(sourceProcessName) && cmd.getCommand().equals(ServerManagerProtocolCommand.SERVER_STARTED)) {
      serverManager.localDomainControllerReady();
    }
switch (cmd.getCommand()) {
case SERVER_AVAILABLE:
      serverManager.availableServer(sourceProcessName);
    break;
case SERVER_STARTED:
  serverManager.startedServer(sourceProcessName);
break;
case SERVER_START_FAILED:
serverManager.failedStartServer(sourceProcessName);
break;
case SERVER_STOPPED:
serverManager.stoppedServer(sourceProcessName);
break;
case SERVER_RECONNECT_STATUS:
ServerState state;
try {
state=ServerManagerProtocolUtils.unmarshallCommandData(ServerState.class,cmd);
}
 catch (Exception e) {
log.error("Could not unmarshal server state for SERVER_RECONNECT_STATUS message",e);
return;
}
serverManager.reconnectedServer(sourceProcessName,state);
break;
default :
if (log.isTraceEnabled()) log.warn("Received unknown command for " + sourceProcessName + ":"+ Arrays.asList(message));
 else log.warn("Received unknown command for " + sourceProcessName);
break;
}
}
 catch (IOException e) {
throw new RuntimeException(e);
}
}
