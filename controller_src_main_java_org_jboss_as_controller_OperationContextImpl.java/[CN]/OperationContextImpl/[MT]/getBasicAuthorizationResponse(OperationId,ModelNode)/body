{
  Caller caller=getCaller();
  ImmutableManagementResourceRegistration mrr=modelController.getRootRegistration().getSubModel(opId.address);
  if (mrr == null) {
    return null;
  }
  Action action=getAuthorizationAction(mrr,opId.name,operation);
  if (action == null) {
    return null;
  }
  Resource resource=getAuthorizationResource(opId.address);
  ProcessType processType=getProcessType();
  TargetResource targetResource;
  if (processType.isManagedDomain()) {
    HostServerGroupTracker.HostServerGroupEffect hostServerGroupEffect;
    if (processType.isServer()) {
      ModelNode rootModel=model.getModel();
      String serverGroup=rootModel.get(SERVER_GROUP).asString();
      String host=rootModel.get(HOST).asString();
      hostServerGroupEffect=HostServerGroupTracker.HostServerGroupEffect.forServer(opId.address,serverGroup,host);
    }
 else {
      hostServerGroupEffect=hostServerGroupTracker.getHostServerGroupEffects(opId.address,operation,model);
    }
    targetResource=TargetResource.forDomain(opId.address,mrr,resource,hostServerGroupEffect,hostServerGroupEffect);
  }
 else {
    targetResource=TargetResource.forStandalone(opId.address,mrr,resource);
  }
  AuthorizationResponseImpl result=new AuthorizationResponseImpl(action,targetResource);
  AuthorizationResult simple=modelController.getAuthorizer().authorize(caller,callEnvironment,action,targetResource);
  if (simple.getDecision() == AuthorizationResult.Decision.PERMIT) {
    for (    Action.ActionEffect actionEffect : action.getActionEffects()) {
      result.addResourceResult(actionEffect,simple);
    }
  }
  authorizations.put(opId,result);
  return result;
}
