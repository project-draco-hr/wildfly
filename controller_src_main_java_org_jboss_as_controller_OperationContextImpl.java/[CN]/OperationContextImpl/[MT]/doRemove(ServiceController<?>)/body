{
  final Step removalStep=activeStep;
  removalStep.hasRemovals=true;
  controller.addListener(new AbstractServiceListener<Object>(){
    public void listenerAdded(    final ServiceController<?> controller){
synchronized (realRemovingControllers) {
        realRemovingControllers.put(controller.getName(),controller);
        controller.setMode(ServiceController.Mode.REMOVE);
      }
    }
    public void transition(    final ServiceController<?> controller,    final ServiceController.Transition transition){
switch (transition) {
case REMOVING_to_REMOVED:
case REMOVING_to_DOWN:
{
synchronized (realRemovingControllers) {
            ServiceName name=controller.getName();
            if (realRemovingControllers.get(name) == controller) {
              realRemovingControllers.remove(name);
              removalSteps.put(name,removalStep);
              realRemovingControllers.notifyAll();
            }
          }
          break;
        }
    }
  }
}
);
}
