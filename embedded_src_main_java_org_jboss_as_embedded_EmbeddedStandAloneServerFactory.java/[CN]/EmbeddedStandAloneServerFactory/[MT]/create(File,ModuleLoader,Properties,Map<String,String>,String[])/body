{
  if (jbossHomeDir == null)   throw EmbeddedLogger.ROOT_LOGGER.nullVar("jbossHomeDir");
  if (moduleLoader == null)   throw EmbeddedLogger.ROOT_LOGGER.nullVar("moduleLoader");
  if (systemProps == null)   throw EmbeddedLogger.ROOT_LOGGER.nullVar("systemProps");
  if (systemEnv == null)   throw EmbeddedLogger.ROOT_LOGGER.nullVar("systemEnv");
  if (cmdargs == null)   throw EmbeddedLogger.ROOT_LOGGER.nullVar("cmdargs");
  setupCleanDirectories(jbossHomeDir,systemProps);
  StandaloneServer standaloneServer=new StandaloneServer(){
    private ServiceContainer serviceContainer;
    private ServerDeploymentManager serverDeploymentManager;
    private Context context;
    private ModelControllerClient modelControllerClient;
    @Override public void deploy(    File file) throws IOException, ExecutionException, InterruptedException {
      final InputStream is=VFSUtils.createJarFileInputStream(VFS.getChild(file.toURI()));
      try {
        execute(serverDeploymentManager.newDeploymentPlan().add(file.getName(),is).andDeploy().build());
      }
  finally {
        if (is != null)         try {
          is.close();
        }
 catch (        IOException ignore) {
        }
      }
    }
    private ServerDeploymentPlanResult execute(    DeploymentPlan deploymentPlan) throws ExecutionException, InterruptedException {
      return serverDeploymentManager.execute(deploymentPlan).get();
    }
    @Override public Context getContext(){
      if (context == null) {
        throw ServerLogger.ROOT_LOGGER.namingContextHasNotBeenSet();
      }
      return context;
    }
    @Override public ModelControllerClient getModelControllerClient(){
      return modelControllerClient;
    }
    @Override public void start() throws ServerStartException {
      try {
        ServerEnvironment serverEnvironment=Main.determineEnvironment(cmdargs,systemProps,systemEnv,ServerEnvironment.LaunchType.EMBEDDED);
        Bootstrap bootstrap=Bootstrap.Factory.newInstance();
        Bootstrap.Configuration configuration=new Bootstrap.Configuration(serverEnvironment);
        configuration.setModuleLoader(moduleLoader);
        Future<ServiceContainer> future=bootstrap.startup(configuration,Collections.<ServiceActivator>emptyList());
        serviceContainer=future.get();
        @SuppressWarnings("unchecked") final Value<ModelController> controllerService=(Value<ModelController>)serviceContainer.getRequiredService(Services.JBOSS_SERVER_CONTROLLER);
        final ModelController controller=controllerService.getValue();
        serverDeploymentManager=new ModelControllerServerDeploymentManager(controller);
        modelControllerClient=controller.createClient(Executors.newCachedThreadPool());
        context=new InitialContext();
      }
 catch (      RuntimeException rte) {
        throw rte;
      }
catch (      Exception ex) {
        throw EmbeddedLogger.ROOT_LOGGER.cannotStartEmbeddedServer(ex);
      }
    }
    @Override public void stop(){
      if (context != null) {
        try {
          context.close();
          context=null;
        }
 catch (        NamingException e) {
          e.printStackTrace();
        }
      }
      serverDeploymentManager=null;
      if (serviceContainer != null) {
        try {
          serviceContainer.shutdown();
          serviceContainer.awaitTermination();
        }
 catch (        RuntimeException rte) {
          throw rte;
        }
catch (        Exception ex) {
          ex.printStackTrace();
        }
      }
    }
    @Override public void undeploy(    File file) throws ExecutionException, InterruptedException {
      execute(serverDeploymentManager.newDeploymentPlan().undeploy(file.getName()).andRemoveUndeployed().build());
    }
    @Override public ServiceController<?> getService(    ServiceName serviceName){
      return serviceContainer != null ? serviceContainer.getService(serviceName) : null;
    }
  }
;
  return standaloneServer;
}
