{
  final ModelNode opAddr=operation.require(OP_ADDR);
  final ModelNode model=context.getSubModel();
  final ModelNode compensatingOperation=new ModelNode();
  compensatingOperation.get(OP).set(OPERATION_NAME);
  compensatingOperation.get(OP_ADDR).set(opAddr);
  compensatingOperation.get(CommonAttributes.LEVEL).set(model.get(CommonAttributes.LEVEL));
  final PathAddress address=PathAddress.pathAddress(operation.require(OP_ADDR));
  final String name=address.getLastElement().getValue();
  final String level=operation.get(CommonAttributes.LEVEL).asString();
  model.get(CommonAttributes.LEVEL).set(level);
  if (context.getRuntimeContext() != null) {
    context.getRuntimeContext().setRuntimeTask(new RuntimeTask(){
      public void execute(      RuntimeTaskContext context) throws OperationFailedException {
        final ServiceRegistry serviceRegistry=context.getServiceRegistry();
        final ServiceController<Logger> controller=(ServiceController<Logger>)serviceRegistry.getService(LogServices.loggerName(name));
        if (controller != null) {
          controller.getValue().setLevel(Level.parse(level));
        }
        resultHandler.handleResultComplete();
      }
    }
);
  }
 else {
    resultHandler.handleResultComplete();
  }
  return new BasicOperationResult(compensatingOperation);
}
