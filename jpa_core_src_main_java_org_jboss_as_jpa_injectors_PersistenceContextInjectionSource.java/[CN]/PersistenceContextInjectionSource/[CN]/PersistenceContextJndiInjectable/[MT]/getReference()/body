{
  PersistenceUnitServiceImpl service=(PersistenceUnitServiceImpl)deploymentUnit.getServiceRegistry().getRequiredService(puServiceName).getValue();
  EntityManagerFactory emf=service.getEntityManagerFactory();
  EntityManager entityManager;
  boolean standardEntityManager=ENTITY_MANAGER_CLASS.equals(injectionTypeName);
  if (type.equals(PersistenceContextType.TRANSACTION)) {
    entityManager=new TransactionScopedEntityManager(unitName,properties,emf);
    if (JPA_LOGGER.isDebugEnabled())     JPA_LOGGER.debugf("created new TransactionScopedEntityManager for unit name=%s",unitName);
  }
 else {
    EntityManager entityManager1=SFSBCallStack.findPersistenceContext(unitName,sfsbxpcMap);
    if (entityManager1 == null) {
      entityManager1=emf.createEntityManager(properties);
      entityManager=new ExtendedEntityManager(unitName,entityManager1,SFSBXPCMap.getApplicationDeploymentBagKeyName(deploymentUnit));
      if (JPA_LOGGER.isDebugEnabled())       JPA_LOGGER.debugf("created new ExtendedEntityManager for unit name=%s",unitName);
    }
 else {
      entityManager=entityManager1;
      if (JPA_LOGGER.isDebugEnabled())       JPA_LOGGER.debugf("inherited existing ExtendedEntityManager from SFSB invocation stack, unit name=%s",unitName);
    }
    SFSBXPCMap.registerPersistenceContext(entityManager);
    SFSBCallStack.extendedPersistenceContextCreated(unitName,entityManager);
  }
  if (!standardEntityManager) {
    Class extensionClass;
    try {
      extensionClass=pu.getClassLoader().loadClass(injectionTypeName);
    }
 catch (    ClassNotFoundException e) {
      throw MESSAGES.cannotLoadFromJpa(e,injectionTypeName);
    }
    Object targetValueToInject=entityManager.unwrap(extensionClass);
    Class[] targetInterfaces=targetValueToInject.getClass().getInterfaces();
    Class[] proxyInterfaces=new Class[targetInterfaces.length + 1];
    boolean alreadyHasInterfaceClass=false;
    for (int interfaceIndex=0; interfaceIndex < targetInterfaces.length; interfaceIndex++) {
      Class interfaceClass=targetInterfaces[interfaceIndex];
      if (interfaceClass.equals(extensionClass)) {
        proxyInterfaces=targetInterfaces;
        alreadyHasInterfaceClass=true;
        break;
      }
      proxyInterfaces[1 + interfaceIndex]=interfaceClass;
    }
    if (!alreadyHasInterfaceClass) {
      proxyInterfaces[0]=extensionClass;
    }
    EntityManagerUnwrappedTargetInvocationHandler entityManagerUnwrappedTargetInvocationHandler=new EntityManagerUnwrappedTargetInvocationHandler(entityManager,extensionClass);
    Object proxyForUnwrappedObject=Proxy.newProxyInstance(extensionClass.getClassLoader(),proxyInterfaces,entityManagerUnwrappedTargetInvocationHandler);
    if (JPA_LOGGER.isDebugEnabled())     JPA_LOGGER.debugf("injecting entity manager into a '%s' (unit name=%s)",extensionClass.getName(),unitName);
    return new ValueManagedReference(new ImmediateValue<Object>(proxyForUnwrappedObject));
  }
  return new ValueManagedReference(new ImmediateValue<Object>(entityManager));
}
