{
  params.name=operation.require(NAME).asString();
  params.threadFactory=has(operation,THREAD_FACTORY) ? operation.get(THREAD_FACTORY).asString() : null;
  params.properties=has(operation,PROPERTIES) ? operation.get(PROPERTIES) : null;
  if (params.properties != null) {
    if (params.properties.getType() != ModelType.LIST) {
      throw new IllegalArgumentException(PROPERTIES + " must be a list of properties");
    }
    for (    ModelNode property : params.properties.asList()) {
      if (property.getType() != ModelType.PROPERTY) {
        throw new IllegalArgumentException(PROPERTIES + " must be a list of properties");
      }
    }
  }
  params.maxThreads=getScaledCount(operation,MAX_THREADS_COUNT,MAX_THREADS_PER_CPU);
  final long duration=has(operation,KEEPALIVE_TIME_DURATION) ? operation.get(KEEPALIVE_TIME_DURATION).asLong() : -1;
  final TimeUnit unit=has(operation,KEEPALIVE_TIME_UNIT) ? Enum.valueOf(TimeUnit.class,operation.get(KEEPALIVE_TIME_UNIT).asString()) : null;
  if (duration == -1 && unit != null) {
    throw new IllegalArgumentException("Need " + KEEPALIVE_TIME_DURATION + " when "+ KEEPALIVE_TIME_UNIT+ " is set");
  }
  if (duration != -1 && unit == null) {
    throw new IllegalArgumentException("Need " + KEEPALIVE_TIME_UNIT + " when "+ KEEPALIVE_TIME_DURATION+ " is set");
  }
  params.keepAliveTime=unit != null ? new TimeSpec(unit,duration) : null;
  return params;
}
