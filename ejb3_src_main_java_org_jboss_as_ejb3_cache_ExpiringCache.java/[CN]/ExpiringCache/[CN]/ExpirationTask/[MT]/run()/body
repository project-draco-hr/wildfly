{
  while (running) {
    final List<Entry> queue=new ArrayList<Entry>();
    final long time=System.currentTimeMillis();
synchronized (cache) {
      Iterator<Map.Entry<SessionID,Entry>> iterator=cache.entrySet().iterator();
      while (iterator.hasNext()) {
        final Map.Entry<SessionID,Entry> entry=iterator.next();
        if (entry.getValue().isExpired(time)) {
          queue.add(entry.getValue());
          iterator.remove();
        }
      }
    }
    for (    Entry value : queue) {
      try {
        ROOT_LOGGER.debugf("Removing stateful bean %s - %s as it has been inactive for %d milliseconds",beanName,value.getKey(),millisecondTimeout);
        factory.destroyInstance(value.getValue());
      }
 catch (      Exception e) {
        ROOT_LOGGER.errorRemovingStatefulBean(value.getKey(),e);
      }
    }
    try {
      sleep(SLEEP_TIME);
    }
 catch (    InterruptedException e) {
      running=false;
      return;
    }
  }
}
