{
  auditLogFile=new File(System.getProperty("jboss.home"));
  auditLogFile=new File(auditLogFile,"standalone");
  auditLogFile=new File(auditLogFile,"data");
  auditLogFile=new File(auditLogFile,"audit-log.log");
  if (auditLogFile.exists()) {
    auditLogFile.delete();
  }
  jmxLogFile=new File(System.getProperty("jboss.home"));
  jmxLogFile=new File(jmxLogFile,"standalone");
  jmxLogFile=new File(jmxLogFile,"data");
  jmxLogFile=new File(jmxLogFile,"jmx-log.log");
  if (jmxLogFile.exists()) {
    jmxLogFile.delete();
  }
  container.start(CONTAINER);
  final ModelControllerClient client=TestSuiteEnvironment.getModelControllerClient();
  managementClient=new ManagementClient(client,TestSuiteEnvironment.getServerAddress(),TestSuiteEnvironment.getServerPort(),"http-remoting");
  ModelNode op;
  ModelNode result;
  auditLogConfigAddress=PathAddress.pathAddress(CoreManagementResourceDefinition.PATH_ELEMENT,AccessAuditResourceDefinition.PATH_ELEMENT,AuditLogLoggerResourceDefinition.PATH_ELEMENT);
  op=Util.getWriteAttributeOperation(auditLogConfigAddress,AuditLogLoggerResourceDefinition.LOG_BOOT.getName(),new ModelNode(true));
  result=client.execute(op);
  Assert.assertEquals(result.get("failure-description").asString(),SUCCESS,result.get(OUTCOME).asString());
  op=Util.getWriteAttributeOperation(auditLogConfigAddress,AuditLogLoggerResourceDefinition.ENABLED.getName(),new ModelNode(true));
  result=client.execute(op);
  Assert.assertEquals(result.get("failure-description").asString(),SUCCESS,result.get(OUTCOME).asString());
  jmxFormatterConfigAddress=PathAddress.pathAddress(PathElement.pathElement(CORE_SERVICE,MANAGEMENT),PathElement.pathElement(ACCESS,AUDIT),PathElement.pathElement(FILE_HANDLER,HANDLER_NAME));
  op=Util.createAddOperation(jmxFormatterConfigAddress);
  op.get(FORMATTER).set(JSON_FORMATTER);
  op.get(PATH).set("jmx-log.log");
  op.get(RELATIVE_TO).set("jboss.server.data.dir");
  result=client.execute(op);
  Assert.assertEquals(result.get("failure-description").asString(),SUCCESS,result.get(OUTCOME).asString());
  jmxLogConfigAddress=PathAddress.pathAddress(PathElement.pathElement(SUBSYSTEM,JMX),PathElement.pathElement(CONFIGURATION,AUDIT_LOG));
  op=Util.createAddOperation(jmxLogConfigAddress);
  result=client.execute(op);
  Assert.assertEquals(result.get("failure-description").asString(),SUCCESS,result.get(OUTCOME).asString());
  op=Util.createAddOperation(PathAddress.pathAddress(jmxLogConfigAddress,PathElement.pathElement(HANDLER,HANDLER_NAME)));
  result=client.execute(op);
  Assert.assertEquals(result.get("failure-description").asString(),SUCCESS,result.get(OUTCOME).asString());
  op=Util.getWriteAttributeOperation(jmxLogConfigAddress,AuditLogLoggerResourceDefinition.LOG_BOOT.getName(),new ModelNode(true));
  result=client.execute(op);
  Assert.assertEquals(result.get("failure-description").asString(),SUCCESS,result.get(OUTCOME).asString());
  op=Util.getWriteAttributeOperation(jmxLogConfigAddress,AuditLogLoggerResourceDefinition.ENABLED.getName(),new ModelNode(true));
  result=client.execute(op);
  Assert.assertEquals(result.get("failure-description").asString(),SUCCESS,result.get(OUTCOME).asString());
  container.stop(CONTAINER);
  Thread.sleep(1000);
  while (managementClient.isServerInRunningState()) {
    Thread.sleep(50);
  }
}
