{
  EnumSet<OperationEntry.Flag> runtimeOnlyFlags=EnumSet.of(OperationEntry.Flag.RUNTIME_ONLY);
  final ResourceDescriptionResolver rootResolver=getResourceDescriptionResolver();
  final DescriptionProvider listProxiesDescription=new DefaultOperationDescriptionProvider(CommonAttributes.LIST_PROXIES,rootResolver);
  registration.registerOperationHandler(CommonAttributes.LIST_PROXIES,ModClusterListProxies.INSTANCE,listProxiesDescription,false,runtimeOnlyFlags);
  final DescriptionProvider readProxiesInfoDescription=new DefaultOperationDescriptionProvider(CommonAttributes.READ_PROXIES_INFO,rootResolver);
  registration.registerOperationHandler(CommonAttributes.READ_PROXIES_INFO,ModClusterGetProxyInfo.INSTANCE,readProxiesInfoDescription,false,runtimeOnlyFlags);
  final DescriptionProvider readProxiesInfoConfiguration=new DefaultOperationDescriptionProvider(CommonAttributes.READ_PROXIES_CONFIGURATION,rootResolver);
  registration.registerOperationHandler(CommonAttributes.READ_PROXIES_CONFIGURATION,ModClusterGetProxyConfiguration.INSTANCE,readProxiesInfoConfiguration,false,runtimeOnlyFlags);
  final DescriptionProvider addProxy=new DefaultOperationDescriptionProvider(CommonAttributes.ADD_PROXY,rootResolver,HOST,PORT);
  registration.registerOperationHandler(CommonAttributes.ADD_PROXY,ModClusterAddProxy.INSTANCE,addProxy,false,runtimeOnlyFlags);
  final DescriptionProvider removeProxy=new DefaultOperationDescriptionProvider(CommonAttributes.REMOVE_PROXY,rootResolver,HOST,PORT);
  registration.registerOperationHandler(CommonAttributes.REMOVE_PROXY,ModClusterRemoveProxy.INSTANCE,removeProxy,false,runtimeOnlyFlags);
  final DescriptionProvider refresh=new DefaultOperationDescriptionProvider(CommonAttributes.REFRESH,rootResolver);
  registration.registerOperationHandler(CommonAttributes.REFRESH,ModClusterRefresh.INSTANCE,refresh,false,runtimeOnlyFlags);
  final DescriptionProvider reset=new DefaultOperationDescriptionProvider(CommonAttributes.RESET,rootResolver);
  registration.registerOperationHandler(CommonAttributes.RESET,ModClusterReset.INSTANCE,reset,false,runtimeOnlyFlags);
  final DescriptionProvider enable=new DefaultOperationDescriptionProvider(CommonAttributes.ENABLE,rootResolver);
  registration.registerOperationHandler(CommonAttributes.ENABLE,ModClusterEnable.INSTANCE,enable,false,runtimeOnlyFlags);
  final DescriptionProvider disable=new DefaultOperationDescriptionProvider(CommonAttributes.DISABLE,rootResolver);
  registration.registerOperationHandler(CommonAttributes.DISABLE,ModClusterDisable.INSTANCE,disable,false,runtimeOnlyFlags);
  final DescriptionProvider stop=new DefaultOperationDescriptionProvider(CommonAttributes.STOP,rootResolver);
  registration.registerOperationHandler(CommonAttributes.STOP,ModClusterStop.INSTANCE,stop,false,runtimeOnlyFlags);
  final DescriptionProvider enableContext=new DefaultOperationDescriptionProvider(CommonAttributes.ENABLE_CONTEXT,rootResolver,VIRTUAL_HOST,CONTEXT);
  registration.registerOperationHandler(CommonAttributes.ENABLE_CONTEXT,ModClusterEnableContext.INSTANCE,enableContext,false,runtimeOnlyFlags);
  final DescriptionProvider disableContext=new DefaultOperationDescriptionProvider(CommonAttributes.DISABLE_CONTEXT,rootResolver,VIRTUAL_HOST,CONTEXT);
  registration.registerOperationHandler(CommonAttributes.DISABLE_CONTEXT,ModClusterDisableContext.INSTANCE,disableContext,false,runtimeOnlyFlags);
  final DescriptionProvider stopContext=new DefaultOperationDescriptionProvider(CommonAttributes.STOP_CONTEXT,rootResolver,VIRTUAL_HOST,CONTEXT,WAIT_TIME);
  registration.registerOperationHandler(CommonAttributes.STOP_CONTEXT,ModClusterStopContext.INSTANCE,stopContext,false,runtimeOnlyFlags);
}
