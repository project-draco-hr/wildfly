{
  final ParsedCommandLine args=ctx.getParsedCommandLine();
  final ModelNode op=new ModelNode();
  if (ctx.isDomainMode()) {
    if (useCurrentServerConfig.isPresent(args)) {
      throw new CommandFormatException(useCurrentServerConfig.getFullName() + " is not allowed in the domain mode.");
    }
    final String hostName=host.getValue(args);
    if (hostName == null) {
      throw new CommandFormatException("Missing required argument " + host.getFullName());
    }
    op.get(Util.ADDRESS).add(Util.HOST,hostName);
    setBooleanArgument(args,op,restartServers,"restart-servers");
    setBooleanArgument(args,op,this.useCurrentDomainConfig,"use-current-domain-config");
    setBooleanArgument(args,op,this.useCurrentHostConfig,"use-current-host-config");
  }
 else {
    if (host.isPresent(args)) {
      throw new CommandFormatException(host.getFullName() + " is not allowed in the standalone mode.");
    }
    if (useCurrentDomainConfig.isPresent(args)) {
      throw new CommandFormatException(useCurrentDomainConfig.getFullName() + " is not allowed in the standalone mode.");
    }
    if (useCurrentHostConfig.isPresent(args)) {
      throw new CommandFormatException(useCurrentHostConfig.getFullName() + " is not allowed in the standalone mode.");
    }
    if (restartServers.isPresent(args)) {
      throw new CommandFormatException(restartServers.getFullName() + " is not allowed in the standalone mode.");
    }
    op.get(Util.ADDRESS).setEmptyList();
    setBooleanArgument(args,op,this.useCurrentServerConfig,"use-current-server-config");
  }
  op.get(Util.OPERATION).set("reload");
  setBooleanArgument(args,op,adminOnly,"admin-only");
  return op;
}
