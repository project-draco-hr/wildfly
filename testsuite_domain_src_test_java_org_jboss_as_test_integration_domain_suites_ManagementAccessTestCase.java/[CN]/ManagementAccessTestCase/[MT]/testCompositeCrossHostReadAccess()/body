{
  ModelNode masterRequest=getEmptyOperation(COMPOSITE,null);
  ModelNode steps=masterRequest.get(STEPS);
  steps.add(getReadAttributeOperation(MASTER_ROOT_ADDRESS,NAME));
  steps.add(getReadAttributeOperation(MASTER_INTERFACE_ADDRESS,INET_ADDRESS));
  steps.add(getReadAttributeOperation(SLAVE_ROOT_ADDRESS,NAME));
  steps.add(getReadAttributeOperation(SLAVE_INTERFACE_ADDRESS,INET_ADDRESS));
  steps.add(getReadAttributeOperation(MAIN_RUNNING_SERVER_ADDRESS,NAME));
  steps.add(getReadAttributeOperation(OTHER_RUNNING_SERVER_ADDRESS,NAME));
  masterRequest.protect();
  System.out.println(masterRequest);
  ModelNode response=masterClient.execute(masterRequest);
  System.out.println(response);
  ModelNode returnVal=validateResponse(response);
  ModelNode name=validateResponse(returnVal.get("step-1"));
  Assert.assertEquals("master",name.asString());
  ModelNode inetAddress=validateResponse(returnVal.get("step-2"));
  Assert.assertEquals(ModelType.EXPRESSION,inetAddress.getType());
  name=validateResponse(returnVal.get("step-3"));
  Assert.assertEquals("slave",name.asString());
  inetAddress=validateResponse(returnVal.get("step-4"));
  Assert.assertEquals(ModelType.EXPRESSION,inetAddress.getType());
  name=validateResponse(returnVal.get("step-5"));
  Assert.assertEquals("main-one",name.asString());
  name=validateResponse(returnVal.get("step-6"));
  Assert.assertEquals("other-two",name.asString());
  response=slaveClient.execute(masterRequest);
  validateFailedResponse(response);
}
