{
  final SaslElement saslElement=new SaslElement();
  final int count=reader.getAttributeCount();
  if (count > 0) {
    throw ParseUtils.unexpectedAttribute(reader,0);
  }
  final EnumSet<Element> visited=EnumSet.noneOf(Element.class);
  while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
switch (Namespace.forUri(reader.getNamespaceURI())) {
case REMOTING_1_0:
{
        final Element element=Element.forName(reader.getLocalName());
        if (visited.contains(element)) {
          throw ParseUtils.unexpectedElement(reader);
        }
        visited.add(element);
switch (element) {
case INCLUDE_MECHANISMS:
{
            saslElement.setIncludeMechanisms(ParseUtils.readArrayAttributeElement(reader,"value",String.class));
            break;
          }
case POLICY:
{
          saslElement.setPolicy(parsePolicyElement(reader));
          break;
        }
case PROPERTIES:
{
        Map<String,String> map=new HashMap<String,String>();
        parseProperties(reader,map);
        saslElement.setProperties(map);
        break;
      }
case QOP:
{
      saslElement.setQop(ParseUtils.readArrayAttributeElement(reader,"value",SaslQop.class));
      break;
    }
case REUSE_SESSION:
{
    saslElement.setReuseSession(Boolean.valueOf(ParseUtils.readBooleanAttributeElement(reader,"value")));
    break;
  }
case SERVER_AUTH:
{
  saslElement.setServerAuth(Boolean.valueOf(ParseUtils.readBooleanAttributeElement(reader,"value")));
  break;
}
case STRENGTH:
{
saslElement.setStrength(ParseUtils.readArrayAttributeElement(reader,"value",SaslStrength.class));
break;
}
default :
{
throw ParseUtils.unexpectedElement(reader);
}
}
break;
}
default :
{
throw ParseUtils.unexpectedElement(reader);
}
}
}
return saslElement;
}
