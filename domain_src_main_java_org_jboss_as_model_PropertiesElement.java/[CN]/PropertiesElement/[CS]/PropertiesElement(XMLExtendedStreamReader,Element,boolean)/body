{
  super();
  this.propertyType=propertyType;
  this.allowNullValue=allowNullValue;
  requireNoAttributes(reader);
  while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
switch (Namespace.forUri(reader.getNamespaceURI())) {
case DOMAIN_1_0:
{
        final Element element=Element.forName(reader.getLocalName());
        if (element == propertyType) {
          String name=null;
          String value=null;
          int count=reader.getAttributeCount();
          for (int i=0; i < count; i++) {
            final String attrValue=reader.getAttributeValue(i);
            if (reader.getAttributeNamespace(i) != null) {
              throw unexpectedAttribute(reader,i);
            }
 else {
              final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case NAME:
{
                  name=attrValue;
                  if (properties.containsKey(name)) {
                    throw new XMLStreamException("Property " + name + " already exists",reader.getLocation());
                  }
                  break;
                }
case VALUE:
{
                value=attrValue;
                break;
              }
default :
            throw unexpectedAttribute(reader,i);
        }
      }
    }
    if (name == null) {
      throw missingRequired(reader,Collections.singleton(Attribute.NAME));
    }
    if (value == null && !allowNullValue) {
      throw new XMLStreamException("Value for property " + name + " is null",reader.getLocation());
    }
    properties.put(name,value);
    requireNoContent(reader);
  }
 else {
    throw unexpectedElement(reader);
  }
  break;
}
default :
throw unexpectedElement(reader);
}
}
if (properties.size() == 0) {
throw missingRequiredElement(reader,Collections.singleton(propertyType));
}
}
