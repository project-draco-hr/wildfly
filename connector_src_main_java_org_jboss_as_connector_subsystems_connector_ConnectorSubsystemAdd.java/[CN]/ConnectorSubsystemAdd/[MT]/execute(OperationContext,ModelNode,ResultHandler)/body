{
  String shortRunningThreadPool=operation.get(DEFAULT_WORKMANAGER_SHORT_RUNNING_THREAD_POOL).asString();
  String longRunningThreadPool=operation.get(DEFAULT_WORKMANAGER_LONG_RUNNING_THREAD_POOL).asString();
  boolean beanValidationEnabled=ParamsUtils.parseBooleanParameter(operation,BEAN_VALIDATION_ENABLED,false);
  boolean archiveValidationEnabled=ParamsUtils.parseBooleanParameter(operation,ARCHIVE_VALIDATION_ENABLED,false);
  boolean failOnError=ParamsUtils.parseBooleanParameter(operation,ARCHIVE_VALIDATION_FAIL_ON_ERROR,true);
  boolean failOnWarn=ParamsUtils.parseBooleanParameter(operation,ARCHIVE_VALIDATION_FAIL_ON_WARN,false);
  if (context instanceof BootOperationContext) {
    BootOperationContext updateContext=(BootOperationContext)context;
    ServiceTarget serviceTarget=updateContext.getServiceTarget();
    WorkManager wm=new WorkManagerImpl();
    final WorkManagerService wmService=new WorkManagerService(wm);
    serviceTarget.addService(ConnectorServices.WORKMANAGER_SERVICE,wmService).addDependency(ThreadsServices.EXECUTOR.append(shortRunningThreadPool),Executor.class,wmService.getExecutorShortInjector()).addDependency(ThreadsServices.EXECUTOR.append(longRunningThreadPool),Executor.class,wmService.getExecutorLongInjector()).addDependency(TxnServices.JBOSS_TXN_XA_TERMINATOR,JBossXATerminator.class,wmService.getXaTerminatorInjector()).setInitialMode(Mode.ACTIVE).install();
    CloneableBootstrapContext ctx=new BaseCloneableBootstrapContext();
    final DefaultBootStrapContextService defaultBootCtxService=new DefaultBootStrapContextService(ctx);
    serviceTarget.addService(ConnectorServices.DEFAULT_BOOTSTRAP_CONTEXT_SERVICE,defaultBootCtxService).addDependency(ConnectorServices.WORKMANAGER_SERVICE,WorkManager.class,defaultBootCtxService.getWorkManagerValueInjector()).addDependency(TxnServices.JBOSS_TXN_XA_TERMINATOR,JBossXATerminator.class,defaultBootCtxService.getXaTerminatorInjector()).addDependency(TxnServices.JBOSS_TXN_ARJUNA_TRANSACTION_MANAGER,com.arjuna.ats.jbossatx.jta.TransactionManagerService.class,defaultBootCtxService.getTxManagerInjector()).setInitialMode(Mode.ACTIVE).install();
    final ConnectorSubsystemConfiguration config=new ConnectorSubsystemConfiguration();
    config.setArchiveValidation(archiveValidationEnabled);
    config.setArchiveValidationFailOnError(failOnError);
    config.setArchiveValidationFailOnWarn(failOnWarn);
    config.setBeanValidation(false);
    final ConnectorConfigService connectorConfigService=new ConnectorConfigService(config);
    serviceTarget.addService(ConnectorServices.CONNECTOR_CONFIG_SERVICE,connectorConfigService).addDependency(ConnectorServices.DEFAULT_BOOTSTRAP_CONTEXT_SERVICE,CloneableBootstrapContext.class,connectorConfigService.getDefaultBootstrapContextInjector()).setInitialMode(Mode.ACTIVE).install();
    new RaDeploymentActivator().activate(updateContext);
  }
  final ModelNode model=context.getSubModel();
  if (shortRunningThreadPool != null) {
    model.get(DEFAULT_WORKMANAGER_SHORT_RUNNING_THREAD_POOL).set(shortRunningThreadPool);
  }
  if (longRunningThreadPool != null) {
    model.get(DEFAULT_WORKMANAGER_LONG_RUNNING_THREAD_POOL).set(longRunningThreadPool);
  }
  if (ParamsUtils.has(operation,BEAN_VALIDATION_ENABLED)) {
    model.get(BEAN_VALIDATION_ENABLED).set(beanValidationEnabled);
  }
  if (ParamsUtils.has(operation,ARCHIVE_VALIDATION_ENABLED)) {
    model.get(ARCHIVE_VALIDATION_ENABLED).set(archiveValidationEnabled);
  }
  if (ParamsUtils.has(operation,ARCHIVE_VALIDATION_FAIL_ON_ERROR)) {
    model.get(ARCHIVE_VALIDATION_FAIL_ON_ERROR).set(failOnError);
  }
  if (ParamsUtils.has(operation,ARCHIVE_VALIDATION_FAIL_ON_WARN)) {
    model.get(ARCHIVE_VALIDATION_FAIL_ON_WARN).set(failOnWarn);
  }
  final ModelNode compensating=new ModelNode();
  compensating.get(OP_ADDR).set(operation.require(ADDRESS));
  compensating.get(OP).set("remove");
  resultHandler.handleResultComplete(compensating);
  return Cancellable.NULL;
}
