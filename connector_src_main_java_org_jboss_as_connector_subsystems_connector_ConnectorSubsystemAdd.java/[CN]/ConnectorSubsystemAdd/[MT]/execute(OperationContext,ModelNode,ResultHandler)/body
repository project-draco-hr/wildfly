{
  final String shortRunningThreadPool=operation.get(DEFAULT_WORKMANAGER_SHORT_RUNNING_THREAD_POOL).asString();
  final String longRunningThreadPool=operation.get(DEFAULT_WORKMANAGER_LONG_RUNNING_THREAD_POOL).asString();
  final boolean beanValidationEnabled=ParamsUtils.parseBooleanParameter(operation,BEAN_VALIDATION_ENABLED,false);
  final boolean archiveValidationEnabled=ParamsUtils.parseBooleanParameter(operation,ARCHIVE_VALIDATION_ENABLED,false);
  final boolean failOnError=ParamsUtils.parseBooleanParameter(operation,ARCHIVE_VALIDATION_FAIL_ON_ERROR,true);
  final boolean failOnWarn=ParamsUtils.parseBooleanParameter(operation,ARCHIVE_VALIDATION_FAIL_ON_WARN,false);
  final boolean ccmDebug=ParamsUtils.parseBooleanParameter(operation,CACHED_CONNECTION_MANAGER_DEBUG,false);
  final boolean ccmError=ParamsUtils.parseBooleanParameter(operation,CACHED_CONNECTION_MANAGER_ERROR,false);
  final ModelNode model=context.getSubModel();
  if (shortRunningThreadPool != null) {
    model.get(DEFAULT_WORKMANAGER_SHORT_RUNNING_THREAD_POOL).set(shortRunningThreadPool);
  }
  if (longRunningThreadPool != null) {
    model.get(DEFAULT_WORKMANAGER_LONG_RUNNING_THREAD_POOL).set(longRunningThreadPool);
  }
  if (ParamsUtils.has(operation,BEAN_VALIDATION_ENABLED)) {
    model.get(BEAN_VALIDATION_ENABLED).set(beanValidationEnabled);
  }
  if (ParamsUtils.has(operation,ARCHIVE_VALIDATION_ENABLED)) {
    model.get(ARCHIVE_VALIDATION_ENABLED).set(archiveValidationEnabled);
  }
  if (ParamsUtils.has(operation,ARCHIVE_VALIDATION_FAIL_ON_ERROR)) {
    model.get(ARCHIVE_VALIDATION_FAIL_ON_ERROR).set(failOnError);
  }
  if (ParamsUtils.has(operation,ARCHIVE_VALIDATION_FAIL_ON_WARN)) {
    model.get(ARCHIVE_VALIDATION_FAIL_ON_WARN).set(failOnWarn);
  }
  if (ParamsUtils.has(operation,CACHED_CONNECTION_MANAGER_DEBUG)) {
    model.get(CACHED_CONNECTION_MANAGER_DEBUG).set(ccmDebug);
  }
  if (ParamsUtils.has(operation,CACHED_CONNECTION_MANAGER_ERROR)) {
    model.get(CACHED_CONNECTION_MANAGER_ERROR).set(ccmError);
  }
  if (context instanceof BootOperationContext) {
    final BootOperationContext bootContext=BootOperationContext.class.cast(context);
    context.getRuntimeContext().setRuntimeTask(new RuntimeTask(){
      @Override public void execute(      RuntimeTaskContext context) throws OperationFailedException {
        ServiceTarget serviceTarget=context.getServiceTarget();
        TransactionIntegrationService tiService=new TransactionIntegrationService();
        serviceTarget.addService(ConnectorServices.TRANSACTION_INTEGRATION_SERVICE,tiService).addDependency(TxnServices.JBOSS_TXN_TRANSACTION_MANAGER,TransactionManager.class,tiService.getTmInjector()).addDependency(TxnServices.JBOSS_TXN_SYNCHRONIZATION_REGISTRY,TransactionSynchronizationRegistry.class,tiService.getTsrInjector()).addDependency(TxnServices.JBOSS_TXN_USER_TRANSACTION_REGISTRY,org.jboss.tm.usertx.UserTransactionRegistry.class,tiService.getUtrInjector()).addDependency(TxnServices.JBOSS_TXN_XA_TERMINATOR,JBossXATerminator.class,tiService.getTerminatorInjector()).addDependency(TxnServices.JBOSS_TXN_ARJUNA_RECOVERY_MANAGER,XAResourceRecoveryRegistry.class,tiService.getRrInjector()).addDependency(TxnServices.JBOSS_TXN_TRANSACTION_MANAGER,TransactionLocalDelegate.class,tiService.getTldInjector()).setInitialMode(Mode.ACTIVE).install();
        CcmService ccmService=new CcmService(ccmDebug,ccmError);
        serviceTarget.addService(ConnectorServices.CCM_SERVICE,ccmService).addDependency(ConnectorServices.TRANSACTION_INTEGRATION_SERVICE,TransactionIntegration.class,ccmService.getTransactionIntegrationInjector()).install();
        WorkManager wm=new WorkManagerImpl();
        final WorkManagerService wmService=new WorkManagerService(wm);
        serviceTarget.addService(ConnectorServices.WORKMANAGER_SERVICE,wmService).addDependency(ThreadsServices.EXECUTOR.append(shortRunningThreadPool),Executor.class,wmService.getExecutorShortInjector()).addDependency(ThreadsServices.EXECUTOR.append(longRunningThreadPool),Executor.class,wmService.getExecutorLongInjector()).addDependency(TxnServices.JBOSS_TXN_XA_TERMINATOR,JBossXATerminator.class,wmService.getXaTerminatorInjector()).setInitialMode(Mode.ACTIVE).install();
        CloneableBootstrapContext ctx=new BaseCloneableBootstrapContext();
        final DefaultBootStrapContextService defaultBootCtxService=new DefaultBootStrapContextService(ctx);
        serviceTarget.addService(ConnectorServices.DEFAULT_BOOTSTRAP_CONTEXT_SERVICE,defaultBootCtxService).addDependency(ConnectorServices.WORKMANAGER_SERVICE,WorkManager.class,defaultBootCtxService.getWorkManagerValueInjector()).addDependency(TxnServices.JBOSS_TXN_XA_TERMINATOR,JBossXATerminator.class,defaultBootCtxService.getXaTerminatorInjector()).addDependency(TxnServices.JBOSS_TXN_ARJUNA_TRANSACTION_MANAGER,com.arjuna.ats.jbossatx.jta.TransactionManagerService.class,defaultBootCtxService.getTxManagerInjector()).setInitialMode(Mode.ACTIVE).install();
        final ConnectorSubsystemConfiguration config=new ConnectorSubsystemConfiguration();
        config.setArchiveValidation(archiveValidationEnabled);
        config.setArchiveValidationFailOnError(failOnError);
        config.setArchiveValidationFailOnWarn(failOnWarn);
        config.setBeanValidation(false);
        final ConnectorConfigService connectorConfigService=new ConnectorConfigService(config);
        serviceTarget.addService(ConnectorServices.CONNECTOR_CONFIG_SERVICE,connectorConfigService).addDependency(ConnectorServices.DEFAULT_BOOTSTRAP_CONTEXT_SERVICE,CloneableBootstrapContext.class,connectorConfigService.getDefaultBootstrapContextInjector()).setInitialMode(Mode.ACTIVE).install();
        final DriverRegistryService driverRegistryService=new DriverRegistryService();
        serviceTarget.addService(ConnectorServices.JDBC_DRIVER_REGISTRY_SERVICE,driverRegistryService).install();
        new RaDeploymentActivator().activate(bootContext,serviceTarget);
        resultHandler.handleResultComplete();
      }
    }
);
  }
 else {
    resultHandler.handleResultComplete();
  }
  final ModelNode compensating=new ModelNode();
  compensating.get(OP_ADDR).set(operation.require(ADDRESS));
  compensating.get(OP).set("remove");
  return new BasicOperationResult(compensating);
}
