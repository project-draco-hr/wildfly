{
  try {
    ManagedContainerConfiguration config=getContainerConfiguration();
    final String jbossHomeDir=config.getJbossHome();
    final String additionalJavaOpts=System.getProperty("jboss.options");
    final String modulePath;
    if (config.getModulePath() != null && !config.getModulePath().isEmpty()) {
      modulePath=config.getModulePath();
    }
 else {
      modulePath=jbossHomeDir + "/modules";
    }
    File modulesJar=new File(jbossHomeDir + "/jboss-modules.jar");
    if (modulesJar.exists() == false)     throw new IllegalStateException("Cannot find: " + modulesJar);
    List<String> cmd=new ArrayList<String>();
    cmd.add("java");
    if (additionalJavaOpts != null) {
      for (      String opt : additionalJavaOpts.split("\\s+")) {
        cmd.add(opt);
      }
    }
    cmd.add("-Djboss.home.dir=" + jbossHomeDir);
    cmd.add("-Dorg.jboss.boot.log.file=" + jbossHomeDir + "/standalone/log/boot.log");
    cmd.add("-Dlogging.configuration=file:" + jbossHomeDir + "/standalone/configuration/logging.properties");
    cmd.add("-Djboss.modules.dir=" + modulePath);
    cmd.add("-jar");
    cmd.add(modulesJar.getAbsolutePath());
    cmd.add("-mp");
    cmd.add(modulePath);
    cmd.add("-logmodule");
    cmd.add("org.jboss.logmanager");
    cmd.add("-jaxpmodule");
    cmd.add("javax.xml.jaxp-provider");
    cmd.add("org.jboss.as.standalone");
    cmd.add("-server-config");
    cmd.add(config.getServerConfig());
    cmd.add("-Djava.net.preferIPv4Stack=true");
    log.info("Starting container with: " + cmd.toString());
    ProcessBuilder processBuilder=new ProcessBuilder(cmd);
    processBuilder.redirectErrorStream(true);
    process=processBuilder.start();
    new Thread(new ConsoleConsumer()).start();
    final Process proc=process;
    shutdownThread=new Thread(new Runnable(){
      @Override public void run(){
        if (proc != null) {
          proc.destroy();
          try {
            proc.waitFor();
          }
 catch (          InterruptedException e) {
            throw new RuntimeException(e);
          }
        }
      }
    }
);
    Runtime.getRuntime().addShutdownHook(shutdownThread);
    long startupTimeout=getContainerConfiguration().getStartupTimeoutInSeconds();
    long timeout=startupTimeout * 1000;
    boolean serverAvailable=false;
    while (timeout > 0 && serverAvailable == false) {
      serverAvailable=isServerStarted();
      if (!serverAvailable) {
        Thread.sleep(100);
        timeout-=100;
      }
    }
    if (!serverAvailable) {
      destroyProcess();
      throw new TimeoutException(String.format("Managed server was not started within [%d] ms",getContainerConfiguration().getStartupTimeout()));
    }
    mbeanServerInst.set(getMBeanServerConnection(5000));
  }
 catch (  Exception e) {
    throw new LifecycleException("Could not start container",e);
  }
}
