{
  KernelServices kernelServices=createKernelServicesBuilder(TestModelType.STANDALONE).build();
  Assert.assertNull(System.getProperty("test.one"));
  Assert.assertNull(System.getProperty("test.two"));
  Assert.assertNull(System.getProperty("test.referencing"));
  ModelNode op=new ModelNode();
  op.get(OP).set(ADD);
  op.get(OP_ADDR).add("system-property","test.one");
  op.get(VALUE).set("ONE");
  kernelServices.executeForResult(op);
  op=new ModelNode();
  op.get(OP).set(ADD);
  op.get(OP_ADDR).add("system-property","test.two");
  op.get(VALUE).set("TWO");
  kernelServices.executeForResult(op);
  op=new ModelNode();
  op.get(OP).set(ADD);
  op.get(OP_ADDR).add("system-property","test.referencing");
  op.get(VALUE).setExpression("${test.one} ${test.two}");
  kernelServices.executeForResult(op);
  Assert.assertEquals("ONE",System.getProperty("test.one"));
  Assert.assertEquals("TWO",System.getProperty("test.two"));
  Assert.assertEquals("ONE TWO",System.getProperty("test.referencing"));
  op=new ModelNode();
  op.get(OP).set(WRITE_ATTRIBUTE_OPERATION);
  op.get(OP_ADDR).add("system-property","test.referencing");
  op.get(NAME).set(VALUE);
  op.get(VALUE).setExpression("${test.one}---${test.two}");
  kernelServices.executeForResult(op);
  Assert.assertEquals("ONE---TWO",System.getProperty("test.referencing"));
}
