{
  KernelServicesBuilder builder=createKernelServicesBuilder(AdditionalInitialization.MANAGEMENT);
  builder.createLegacyKernelServicesBuilder(null,controllerVersion,modelVersion).addMavenResourceURL("org.jboss.as:jboss-as-connector:" + controllerVersion.getMavenGavVersion()).addMavenResourceURL("org.jboss.ironjacamar:ironjacamar-spec-api:1.1.4.Final").addMavenResourceURL("org.jboss.ironjacamar:ironjacamar-common-api:1.1.4.Final").setExtensionClassName("org.jboss.as.connector.subsystems.resourceadapters.ResourceAdaptersExtension").addOperationValidationResolve("add",PathAddress.pathAddress(PathElement.pathElement(SUBSYSTEM,getMainSubsystemName()),PathElement.pathElement("resource-adapter","*"),PathElement.pathElement("connection-definitions","*"))).excludeFromParent(SingleClassFilter.createFilter(ConnectorLogger.class)).skipReverseControllerCheck();
  KernelServices mainServices=builder.build();
  org.junit.Assert.assertTrue(mainServices.isSuccessfulBoot());
  KernelServices legacyServices=mainServices.getLegacyServices(modelVersion);
  org.junit.Assert.assertTrue(legacyServices.isSuccessfulBoot());
  org.junit.Assert.assertNotNull(legacyServices);
  List<ModelNode> ops=builder.parseXmlResource(subsystemXml);
  PathAddress subsystemAddress=PathAddress.pathAddress(ResourceAdaptersExtension.SUBSYSTEM_PATH);
  ModelTestUtils.checkFailedTransformedBootOperations(mainServices,modelVersion,ops,new FailedOperationTransformationConfig().addFailedAttribute(subsystemAddress.append(PathElement.pathElement(RESOURCEADAPTER_NAME),ConnectionDefinitionResourceDefinition.PATH),FailedOperationTransformationConfig.REJECTED_RESOURCE));
}
