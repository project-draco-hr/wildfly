{
  final DeploymentUnit deploymentUnit=phaseContext.getDeploymentUnit();
  final Module module=deploymentUnit.getAttachment(Attachments.MODULE);
  if (!JaxrsDeploymentMarker.isJaxrsDeployment(deploymentUnit)) {
    return;
  }
  if (!DeploymentTypeMarker.isType(DeploymentType.WAR,deploymentUnit)) {
    return;
  }
  final DeploymentUnit parent=deploymentUnit.getParent() == null ? deploymentUnit : deploymentUnit.getParent();
  final WarMetaData warMetaData=deploymentUnit.getAttachment(WarMetaData.ATTACHMENT_KEY);
  final JBossWebMetaData webdata=warMetaData.getMergedJBossWebMetaData();
  final ResteasyDeploymentData resteasy=deploymentUnit.getAttachment(JaxrsAttachments.RESTEASY_DEPLOYMENT_DATA);
  if (resteasy == null)   return;
  final Map<ModuleIdentifier,ResteasyDeploymentData> attachmentMap=parent.getAttachment(JaxrsAttachments.ADDITIONAL_RESTEASY_DEPLOYMENT_DATA);
  final List<ResteasyDeploymentData> additionalData=new ArrayList<ResteasyDeploymentData>();
  final ModuleSpecification moduleSpec=deploymentUnit.getAttachment(Attachments.MODULE_SPECIFICATION);
  if (moduleSpec != null && attachmentMap != null) {
    for (    ModuleDependency dep : moduleSpec.getAllDependencies()) {
      if (attachmentMap.containsKey(dep.getIdentifier())) {
        additionalData.add(attachmentMap.get(dep.getIdentifier()));
      }
    }
    resteasy.merge(additionalData);
  }
  if (!resteasy.getScannedResourceClasses().isEmpty()) {
    StringBuffer buf=null;
    for (    String resource : resteasy.getScannedResourceClasses()) {
      if (buf == null) {
        buf=new StringBuffer();
        buf.append(resource);
      }
 else {
        buf.append(",").append(resource);
      }
    }
    String resources=buf.toString();
    log.debug("Adding JAX-RS resource classes: " + resources);
    setContextParameter(webdata,ResteasyContextParameters.RESTEASY_SCANNED_RESOURCES,resources);
  }
  if (!resteasy.getScannedProviderClasses().isEmpty()) {
    StringBuffer buf=null;
    for (    String provider : resteasy.getScannedProviderClasses()) {
      if (buf == null) {
        buf=new StringBuffer();
        buf.append(provider);
      }
 else {
        buf.append(",").append(provider);
      }
    }
    String providers=buf.toString();
    log.debug("Adding JAX-RS provider classes: " + providers);
    setContextParameter(webdata,ResteasyContextParameters.RESTEASY_SCANNED_PROVIDERS,providers);
  }
  if (!resteasy.getScannedJndiComponentResources().isEmpty()) {
    StringBuffer buf=null;
    for (    String resource : resteasy.getScannedJndiComponentResources()) {
      if (buf == null) {
        buf=new StringBuffer();
        buf.append(resource);
      }
 else {
        buf.append(",").append(resource);
      }
    }
    String providers=buf.toString();
    log.debug("Adding JAX-RS jndi component resource classes: " + providers);
    setContextParameter(webdata,ResteasyContextParameters.RESTEASY_SCANNED_JNDI_RESOURCES,providers);
  }
  if (!resteasy.isUnwrappedExceptionsParameterSet()) {
    setContextParameter(webdata,ResteasyContextParameters.RESTEASY_UNWRAPPED_EXCEPTIONS,"javax.ejb.EJBException");
  }
  if (resteasy.hasBootClasses() || resteasy.isDispatcherCreated())   return;
  if (resteasy.getScannedApplicationClass() == null && resteasy.getScannedJndiComponentResources().isEmpty() && resteasy.getScannedProviderClasses().isEmpty() && resteasy.getScannedResourceClasses().isEmpty())   return;
  boolean useScannedClass=false;
  String servletName;
  if (resteasy.getScannedApplicationClass() == null) {
    JBossServletMetaData servlet=new JBossServletMetaData();
    servlet.setName(JAX_RS_SERVLET_NAME);
    servlet.setServletClass(HttpServlet30Dispatcher.class.getName());
    addServlet(webdata,servlet);
    servletName=JAX_RS_SERVLET_NAME;
  }
 else {
    ParamValueMetaData param=findInitParam(webdata,SERVLET_INIT_PARAM);
    if (param != null) {
      servletName=param.getParamValue();
      setContextParameter(webdata,"javax.ws.rs.Application",servletName);
    }
 else {
      ParamValueMetaData contextParam=findContextParam(webdata,"javax.ws.rs.Application");
      if (contextParam == null) {
        setContextParameter(webdata,"javax.ws.rs.Application",resteasy.getScannedApplicationClass().getName());
        useScannedClass=true;
        servletName=resteasy.getScannedApplicationClass().getName();
      }
 else {
        servletName=contextParam.getParamValue();
      }
    }
  }
  boolean mappingSet=false;
  if (useScannedClass) {
    if (!servletMappingsExist(webdata,servletName)) {
      List<String> patterns=new ArrayList<String>();
      if (resteasy.getScannedApplicationClass().isAnnotationPresent(ApplicationPath.class)) {
        ApplicationPath path=resteasy.getScannedApplicationClass().getAnnotation(ApplicationPath.class);
        String pathValue=path.value().trim();
        if (!pathValue.startsWith("/")) {
          pathValue="/" + pathValue;
        }
        String prefix=pathValue;
        if (pathValue.endsWith("/")) {
          pathValue+="*";
        }
 else {
          pathValue+="/*";
        }
        patterns.add(pathValue);
        setContextParameter(webdata,"resteasy.servlet.mapping.prefix",prefix);
        mappingSet=true;
      }
 else {
        log.warn("No Servlet mappings found for JAX-RS application: " + servletName + " either annotate it with @ApplicationPath or add a servlet-mapping in web.xml");
        return;
      }
      ServletMappingMetaData mapping=new ServletMappingMetaData();
      mapping.setServletName(servletName);
      mapping.setUrlPatterns(patterns);
      if (webdata.getServletMappings() == null) {
        webdata.setServletMappings(new ArrayList<ServletMappingMetaData>());
      }
      webdata.getServletMappings().add(mapping);
    }
    JBossServletMetaData servlet=new JBossServletMetaData();
    servlet.setName(servletName);
    servlet.setServletClass(HttpServlet30Dispatcher.class.getName());
    addServlet(webdata,servlet);
  }
  if (!mappingSet) {
    final List<ServletMappingMetaData> mappings=webdata.getServletMappings();
    if (mappings != null) {
      for (      final ServletMappingMetaData mapping : mappings) {
        if (mapping.getServletName().equals(servletName)) {
          if (mapping.getUrlPatterns() != null) {
            for (            String pattern : mapping.getUrlPatterns()) {
              if (mappingSet) {
                log.errorf("More than one mapping found for JAX-RS servlet: %s the second mapping %s will not work",servletName,pattern);
              }
 else {
                mappingSet=true;
                String realPattern=pattern;
                if (realPattern.endsWith("*")) {
                  realPattern=realPattern.substring(0,realPattern.length() - 1);
                }
                setContextParameter(webdata,"resteasy.servlet.mapping.prefix",realPattern);
              }
            }
          }
        }
      }
    }
  }
}
