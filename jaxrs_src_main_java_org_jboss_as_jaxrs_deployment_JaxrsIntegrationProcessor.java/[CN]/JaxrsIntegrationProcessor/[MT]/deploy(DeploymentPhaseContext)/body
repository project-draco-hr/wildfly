{
  final DeploymentUnit deploymentUnit=phaseContext.getDeploymentUnit();
  if (!JaxrsDeploymentMarker.isJaxrsDeployment(deploymentUnit)) {
    return;
  }
  if (!DeploymentTypeMarker.isType(DeploymentType.WAR,deploymentUnit)) {
    return;
  }
  final DeploymentUnit parent=deploymentUnit.getParent() == null ? deploymentUnit : deploymentUnit.getParent();
  final WarMetaData warMetaData=deploymentUnit.getAttachment(WarMetaData.ATTACHMENT_KEY);
  final JBossWebMetaData webdata=warMetaData.getMergedJBossWebMetaData();
  final ResteasyDeploymentData resteasy=deploymentUnit.getAttachment(JaxrsAttachments.RESTEASY_DEPLOYMENT_DATA);
  if (resteasy == null)   return;
  deploymentUnit.getDeploymentSubsystemModel(JaxrsExtension.SUBSYSTEM_NAME);
  final List<ParamValueMetaData> params=webdata.getContextParams();
  boolean entityExpandEnabled=false;
  if (params != null) {
    Iterator<ParamValueMetaData> it=params.iterator();
    while (it.hasNext()) {
      final ParamValueMetaData param=it.next();
      if (param.getParamName().equals(RESTEASY_SCAN)) {
        it.remove();
      }
 else       if (param.getParamName().equals(RESTEASY_SCAN_RESOURCES)) {
        it.remove();
      }
 else       if (param.getParamName().equals(RESTEASY_SCAN_PROVIDERS)) {
        it.remove();
      }
 else       if (param.getParamName().equals(ResteasyContextParameters.RESTEASY_EXPAND_ENTITY_REFERENCES)) {
        entityExpandEnabled=true;
      }
    }
  }
  if (!entityExpandEnabled) {
    setContextParameter(webdata,ResteasyContextParameters.RESTEASY_EXPAND_ENTITY_REFERENCES,"false");
  }
  final Map<ModuleIdentifier,ResteasyDeploymentData> attachmentMap=parent.getAttachment(JaxrsAttachments.ADDITIONAL_RESTEASY_DEPLOYMENT_DATA);
  final List<ResteasyDeploymentData> additionalData=new ArrayList<ResteasyDeploymentData>();
  final ModuleSpecification moduleSpec=deploymentUnit.getAttachment(Attachments.MODULE_SPECIFICATION);
  if (moduleSpec != null && attachmentMap != null) {
    final Set<ModuleIdentifier> identifiers=new HashSet<ModuleIdentifier>();
    for (    ModuleDependency dep : moduleSpec.getAllDependencies()) {
      if (!identifiers.contains(dep.getIdentifier())) {
        identifiers.add(dep.getIdentifier());
        if (attachmentMap.containsKey(dep.getIdentifier())) {
          additionalData.add(attachmentMap.get(dep.getIdentifier()));
        }
      }
    }
    resteasy.merge(additionalData);
  }
  if (!resteasy.getScannedResourceClasses().isEmpty()) {
    StringBuffer buf=null;
    for (    String resource : resteasy.getScannedResourceClasses()) {
      if (buf == null) {
        buf=new StringBuffer();
        buf.append(resource);
      }
 else {
        buf.append(",").append(resource);
      }
    }
    String resources=buf.toString();
    JAXRS_LOGGER.debugf("Adding JAX-RS resource classes: %s",resources);
    setContextParameter(webdata,ResteasyContextParameters.RESTEASY_SCANNED_RESOURCES,resources);
  }
  if (!resteasy.getScannedProviderClasses().isEmpty()) {
    StringBuffer buf=null;
    for (    String provider : resteasy.getScannedProviderClasses()) {
      if (buf == null) {
        buf=new StringBuffer();
        buf.append(provider);
      }
 else {
        buf.append(",").append(provider);
      }
    }
    String providers=buf.toString();
    JAXRS_LOGGER.debugf("Adding JAX-RS provider classes: %s",providers);
    setContextParameter(webdata,ResteasyContextParameters.RESTEASY_SCANNED_PROVIDERS,providers);
  }
  if (!resteasy.getScannedJndiComponentResources().isEmpty()) {
    StringBuffer buf=null;
    for (    String resource : resteasy.getScannedJndiComponentResources()) {
      if (buf == null) {
        buf=new StringBuffer();
        buf.append(resource);
      }
 else {
        buf.append(",").append(resource);
      }
    }
    String providers=buf.toString();
    JAXRS_LOGGER.debugf("Adding JAX-RS jndi component resource classes: %s",providers);
    setContextParameter(webdata,ResteasyContextParameters.RESTEASY_SCANNED_JNDI_RESOURCES,providers);
  }
  if (!resteasy.isUnwrappedExceptionsParameterSet()) {
    setContextParameter(webdata,ResteasyContextParameters.RESTEASY_UNWRAPPED_EXCEPTIONS,"javax.ejb.EJBException");
  }
  if (resteasy.hasBootClasses() || resteasy.isDispatcherCreated())   return;
  Set<Class<? extends Application>> applicationClassSet=new HashSet<>();
  for (  Class<? extends Application> clazz : resteasy.getScannedApplicationClasses()) {
    if (clazz.isAnnotationPresent(ApplicationPath.class) || servletMappingsExist(webdata,clazz.getName())) {
      applicationClassSet.add(clazz);
    }
  }
  if (applicationClassSet.size() == 0) {
    JBossServletMetaData servlet=new JBossServletMetaData();
    servlet.setName(JAX_RS_SERVLET_NAME);
    servlet.setServletClass(HttpServlet30Dispatcher.class.getName());
    servlet.setAsyncSupported(true);
    addServlet(webdata,servlet);
    setServletMappingPrefix(webdata,JAX_RS_SERVLET_NAME,servlet);
    return;
  }
  for (  Class<? extends Application> applicationClass : applicationClassSet) {
    String servletName=null;
    servletName=applicationClass.getName();
    JBossServletMetaData servlet=new JBossServletMetaData();
    servlet.setLoadOnStartup("" + 0);
    servlet.setName(servletName);
    servlet.setServletClass(HttpServlet30Dispatcher.class.getName());
    servlet.setAsyncSupported(true);
    setServletInitParam(servlet,SERVLET_INIT_PARAM,applicationClass.getName());
    addServlet(webdata,servlet);
    if (!servletMappingsExist(webdata,servletName)) {
      try {
        List<String> patterns=new ArrayList<String>();
        String pathValue=URLDecoder.decode(applicationClass.getAnnotation(ApplicationPath.class).value().trim(),"UTF-8");
        if (!pathValue.startsWith("/")) {
          pathValue="/" + pathValue;
        }
        String prefix=pathValue;
        if (pathValue.endsWith("/")) {
          pathValue+="*";
        }
 else {
          pathValue+="/*";
        }
        patterns.add(pathValue);
        setServletInitParam(servlet,"resteasy.servlet.mapping.prefix",prefix);
        ServletMappingMetaData mapping=new ServletMappingMetaData();
        mapping.setServletName(servletName);
        mapping.setUrlPatterns(patterns);
        if (webdata.getServletMappings() == null) {
          webdata.setServletMappings(new ArrayList<ServletMappingMetaData>());
        }
        webdata.getServletMappings().add(mapping);
      }
 catch (      UnsupportedEncodingException e) {
        throw new RuntimeException(e);
      }
    }
 else {
      setServletMappingPrefix(webdata,servletName,servlet);
    }
  }
}
