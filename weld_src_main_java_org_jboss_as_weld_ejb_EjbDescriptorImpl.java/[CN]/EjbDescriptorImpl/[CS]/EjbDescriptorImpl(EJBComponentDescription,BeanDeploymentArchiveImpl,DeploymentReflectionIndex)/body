{
  final SessionBeanComponentDescription description=componentDescription instanceof SessionBeanComponentDescription ? (SessionBeanComponentDescription)componentDescription : null;
  final Set<BusinessInterfaceDescriptor<?>> localInterfaces=new HashSet<BusinessInterfaceDescriptor<?>>();
  final Set<BusinessInterfaceDescriptor<?>> remoteInterfaces=new HashSet<BusinessInterfaceDescriptor<?>>();
  final ResourceLoader loader=beanDeploymentArchive.getServices().get(ResourceLoader.class);
  ejbClass=(Class<T>)loader.classForName(componentDescription.getEJBClassName());
  if (componentDescription.getViews() != null) {
    for (    ViewDescription view : componentDescription.getViews()) {
      if (description == null || getMethodIntf(view) == MethodIntf.LOCAL) {
        final String viewClassName=view.getViewClassName();
        localInterfaces.add(new BusinessInterfaceDescriptorImpl<Object>(beanDeploymentArchive,viewClassName));
      }
 else       if (getMethodIntf(view) == MethodIntf.REMOTE) {
        remoteInterfaces.add(new BusinessInterfaceDescriptorImpl<Object>(beanDeploymentArchive,view.getViewClassName()));
      }
    }
  }
  if (componentDescription instanceof StatefulComponentDescription) {
    Set<Method> removeMethods=new HashSet<Method>();
    final Collection<StatefulComponentDescription.StatefulRemoveMethod> methods=((StatefulComponentDescription)componentDescription).getRemoveMethods();
    for (    final StatefulComponentDescription.StatefulRemoveMethod method : methods) {
      Class<?> c=ejbClass;
      while (c != null && c != Object.class) {
        ClassReflectionIndex index=reflectionIndex.getClassIndex(c);
        Method m=index.getMethod(method.getMethodIdentifier());
        if (m != null) {
          removeMethods.add(m);
        }
        c=c.getSuperclass();
      }
    }
    this.removeMethods=Collections.unmodifiableSet(removeMethods);
  }
 else {
    removeMethods=Collections.emptySet();
  }
  this.ejbName=componentDescription.getEJBName();
  this.localInterfaces=localInterfaces;
  this.remoteInterfaces=remoteInterfaces;
  this.baseName=componentDescription.getServiceName();
  this.stateless=componentDescription.isStateless();
  this.messageDriven=componentDescription.isMessageDriven();
  this.stateful=componentDescription.isStateful();
  this.singleton=componentDescription.isSingleton();
  this.passivationCapable=componentDescription.isPassivationApplicable();
  final Map<Class<?>,ServiceName> viewServices=new HashMap<Class<?>,ServiceName>();
  final Map<String,Class<?>> views=new HashMap<String,Class<?>>();
  Map<Class<?>,ServiceName> viewServicesMap=new HashMap<Class<?>,ServiceName>();
  for (  ViewDescription view : componentDescription.getViews()) {
    viewServicesMap.put(loader.classForName(view.getViewClassName()),view.getServiceName());
  }
  for (  BusinessInterfaceDescriptor<?> view : remoteInterfaces) {
    views.put(view.getInterface().getName(),view.getInterface());
  }
  for (  BusinessInterfaceDescriptor<?> view : localInterfaces) {
    views.put(view.getInterface().getName(),view.getInterface());
  }
  for (  Map.Entry<Class<?>,ServiceName> entry : viewServicesMap.entrySet()) {
    final Class<?> viewClass=entry.getKey();
    if (viewClass != null) {
      final Set<Class<?>> seen=new HashSet<Class<?>>();
      final Set<Class<?>> toProcess=new HashSet<Class<?>>();
      toProcess.add(viewClass);
      while (!toProcess.isEmpty()) {
        Iterator<Class<?>> it=toProcess.iterator();
        final Class<?> clazz=it.next();
        it.remove();
        seen.add(clazz);
        viewServices.put(clazz,entry.getValue());
        final Class<?> superclass=clazz.getSuperclass();
        if (superclass != Object.class && superclass != null && !seen.contains(superclass)) {
          toProcess.add(superclass);
        }
        for (        Class<?> iface : clazz.getInterfaces()) {
          if (!seen.contains(iface)) {
            toProcess.add(iface);
          }
        }
      }
    }
  }
  this.viewServices=viewServices;
}
