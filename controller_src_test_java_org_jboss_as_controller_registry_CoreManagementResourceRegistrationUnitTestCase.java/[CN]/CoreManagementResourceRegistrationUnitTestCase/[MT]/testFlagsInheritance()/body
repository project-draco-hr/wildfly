{
  rootRegistration.registerOperationHandler(getOpDef("one",OperationEntry.Flag.READ_ONLY),TestHandler.INSTANCE,true);
  rootRegistration.registerOperationHandler(getOpDef("two",OperationEntry.Flag.READ_ONLY),TestHandler.INSTANCE,true);
  rootRegistration.registerOperationHandler(getOpDef("three",OperationEntry.Flag.READ_ONLY),TestHandler.INSTANCE,true);
  rootRegistration.registerOperationHandler(getOpDef("four",OperationEntry.Flag.READ_ONLY),TestHandler.INSTANCE,false);
  ManagementResourceRegistration child=rootRegistration.registerSubModel(new SimpleResourceDefinition(childElement,new NonResolvingResourceDescriptionResolver()));
  child.registerOperationHandler(getOpDef("one"),TestHandler.INSTANCE,true);
  child.registerOperationHandler(getOpDef("two",OperationEntry.Flag.MASTER_HOST_CONTROLLER_ONLY),TestHandler.INSTANCE,true);
  ManagementResourceRegistration grandchild=child.registerSubModel(new SimpleResourceDefinition(grandchildElement,new NonResolvingResourceDescriptionResolver()));
  Set<OperationEntry.Flag> oneFlags=child.getOperationFlags(PathAddress.EMPTY_ADDRESS,"one");
  assertNotNull(oneFlags);
  assertEquals(0,oneFlags.size());
  Set<OperationEntry.Flag> twoFlags=child.getOperationFlags(PathAddress.EMPTY_ADDRESS,"two");
  assertNotNull(twoFlags);
  assertEquals(1,twoFlags.size());
  assertTrue(twoFlags.contains(OperationEntry.Flag.MASTER_HOST_CONTROLLER_ONLY));
  Set<OperationEntry.Flag> threeFlags=child.getOperationFlags(PathAddress.EMPTY_ADDRESS,"three");
  assertNotNull(threeFlags);
  assertEquals(1,threeFlags.size());
  assertTrue(threeFlags.contains(OperationEntry.Flag.READ_ONLY));
  oneFlags=rootRegistration.getOperationFlags(childAddress,"one");
  assertNotNull(oneFlags);
  assertEquals(0,oneFlags.size());
  twoFlags=rootRegistration.getOperationFlags(childAddress,"two");
  assertNotNull(twoFlags);
  assertEquals(1,twoFlags.size());
  assertTrue(twoFlags.contains(OperationEntry.Flag.MASTER_HOST_CONTROLLER_ONLY));
  threeFlags=child.getOperationFlags(PathAddress.EMPTY_ADDRESS,"three");
  assertNotNull(threeFlags);
  assertEquals(1,threeFlags.size());
  assertTrue(threeFlags.contains(OperationEntry.Flag.READ_ONLY));
  Set<OperationEntry.Flag> fourFlags=child.getOperationFlags(PathAddress.EMPTY_ADDRESS,"four");
  assertNull(fourFlags);
  fourFlags=rootRegistration.getOperationFlags(childAddress,"four");
  assertNull(fourFlags);
  fourFlags=rootRegistration.getOperationFlags(PathAddress.EMPTY_ADDRESS,"four");
  assertNotNull(fourFlags);
  assertEquals(1,fourFlags.size());
  assertTrue(fourFlags.contains(OperationEntry.Flag.READ_ONLY));
  oneFlags=rootRegistration.getOperationFlags(grandchildAddress,"one");
  assertNotNull(oneFlags);
  assertEquals(0,oneFlags.size());
  oneFlags=rootRegistration.getOperationFlags(fullGrandchildAddress,"one");
  assertNotNull(oneFlags);
  assertEquals(0,oneFlags.size());
  oneFlags=grandchild.getOperationFlags(PathAddress.EMPTY_ADDRESS,"one");
  assertNotNull(oneFlags);
  assertEquals(0,oneFlags.size());
  twoFlags=rootRegistration.getOperationFlags(grandchildAddress,"two");
  assertNotNull(twoFlags);
  assertEquals(1,twoFlags.size());
  assertTrue(twoFlags.contains(OperationEntry.Flag.MASTER_HOST_CONTROLLER_ONLY));
  twoFlags=rootRegistration.getOperationFlags(fullGrandchildAddress,"two");
  assertNotNull(twoFlags);
  assertEquals(1,twoFlags.size());
  assertTrue(twoFlags.contains(OperationEntry.Flag.MASTER_HOST_CONTROLLER_ONLY));
  twoFlags=grandchild.getOperationFlags(PathAddress.EMPTY_ADDRESS,"two");
  assertNotNull(twoFlags);
  assertEquals(1,twoFlags.size());
  assertTrue(twoFlags.contains(OperationEntry.Flag.MASTER_HOST_CONTROLLER_ONLY));
  threeFlags=rootRegistration.getOperationFlags(grandchildAddress,"three");
  assertNotNull(threeFlags);
  assertEquals(1,threeFlags.size());
  assertTrue(threeFlags.contains(OperationEntry.Flag.READ_ONLY));
  threeFlags=rootRegistration.getOperationFlags(fullGrandchildAddress,"three");
  assertNotNull(threeFlags);
  assertEquals(1,threeFlags.size());
  assertTrue(threeFlags.contains(OperationEntry.Flag.READ_ONLY));
  threeFlags=grandchild.getOperationFlags(PathAddress.EMPTY_ADDRESS,"three");
  assertNotNull(threeFlags);
  assertEquals(1,threeFlags.size());
  assertTrue(threeFlags.contains(OperationEntry.Flag.READ_ONLY));
}
