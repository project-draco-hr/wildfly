{
  final AttributeTransformationDescriptionBuilderRegistry registry=resultingRegistry(resourceRegistry);
  final AttributeTransformationRule first=new AttributeTransformationRule(registry.buildAttributes());
  return new OperationTransformer(){
    @Override public TransformedOperation transformOperation(    final TransformationContext ctx,    final PathAddress address,    final ModelNode operation) throws OperationFailedException {
      if (discardPolicy.discard(operation,address,ctx)) {
        return OperationTransformer.DISCARD.transformOperation(ctx,address,operation);
      }
      final Iterator<TransformationRule> iterator=Collections.<TransformationRule>emptyList().iterator();
      final ModelNode originalModel=operation.clone();
      originalModel.protect();
      final TransformationRule.OperationContext context=new TransformationRule.OperationContext(ctx,originalModel){
        @Override void invokeNext(        OperationTransformer.TransformedOperation transformedOperation) throws OperationFailedException {
          recordTransformedOperation(transformedOperation);
          if (iterator.hasNext()) {
            final TransformationRule next=iterator.next();
            next.transformOperation(transformedOperation.getTransformedOperation(),address,this);
          }
 else {
            final TransformationContext ctx=getContext();
            transformer.transformOperation(ctx,address,transformedOperation.getTransformedOperation());
          }
        }
      }
;
      operation.get(ModelDescriptionConstants.OP_ADDR).set(address.toModelNode());
      first.transformOperation(operation,address,context);
      return context.createOp();
    }
  }
;
}
