{
  if (componentConfiguration.getComponentDescription() instanceof EJBComponentDescription == false) {
    throw EjbLogger.ROOT_LOGGER.invalidEjbComponent(componentConfiguration.getComponentName(),componentConfiguration.getComponentClass());
  }
  final DeploymentUnit deploymentUnit=context.getDeploymentUnit();
  final EJBComponentDescription ejbComponentDescription=(EJBComponentDescription)componentConfiguration.getComponentDescription();
  final boolean isSecurityDomainKnown=ejbComponentDescription.isSecurityDomainKnown();
  if ((!deploymentUnit.hasAttachment(SecurityAttachments.SECURITY_ENABLED)) && (!isSecurityDomainKnown)) {
    return;
  }
  final DeploymentReflectionIndex deploymentReflectionIndex=deploymentUnit.getAttachment(org.jboss.as.server.deployment.Attachments.REFLECTION_INDEX);
  if (ejbComponentDescription.getSecurityDomain() == null || ejbComponentDescription.getSecurityDomain().isEmpty()) {
    if (ROOT_LOGGER.isDebugEnabled()) {
      ROOT_LOGGER.debug("Security is *not* enabled on EJB: " + ejbComponentDescription.getEJBName() + ", since no explicit security domain is configured for the bean, nor is there any default security domain configured in the EJB3 subsystem");
    }
    return;
  }
  final String viewClassName=viewDescription.getViewClassName();
  final EJBViewDescription ejbViewDescription=(EJBViewDescription)viewDescription;
  String contextID=deploymentUnit.getName();
  if (deploymentUnit.getParent() != null) {
    contextID=deploymentUnit.getParent().getName() + "!" + contextID;
  }
  final EJBViewMethodSecurityAttributesService.Builder viewMethodSecurityAttributesServiceBuilder;
  final ServiceName viewMethodSecurityAttributesServiceName;
  if (ejbComponentDescription instanceof SessionBeanComponentDescription && MethodIntf.SERVICE_ENDPOINT == ejbViewDescription.getMethodIntf() && ((SessionBeanComponentDescription)ejbComponentDescription).hasNoInterfaceView()) {
    viewMethodSecurityAttributesServiceBuilder=null;
    viewMethodSecurityAttributesServiceName=null;
  }
 else {
    viewMethodSecurityAttributesServiceBuilder=new EJBViewMethodSecurityAttributesService.Builder();
    viewMethodSecurityAttributesServiceName=EJBViewMethodSecurityAttributesService.getServiceName(ejbComponentDescription.getApplicationName(),ejbComponentDescription.getModuleName(),ejbComponentDescription.getEJBName(),viewClassName);
  }
  boolean beanHasMethodLevelSecurityMetadata=false;
  final List<Method> viewMethods=viewConfiguration.getProxyFactory().getCachedMethods();
  final List<Method> methodsWithoutExplicitSecurityConfiguration=new ArrayList<Method>();
  for (  final Method viewMethod : viewMethods) {
    if (!Modifier.isPublic(viewMethod.getModifiers())) {
      continue;
    }
    if (viewMethod.getDeclaringClass() == WriteReplaceInterface.class) {
      continue;
    }
    final ApplicableMethodInformation<EJBMethodSecurityAttribute> permissions=ejbComponentDescription.getDescriptorMethodPermissions();
    boolean methodHasSecurityMetadata=handlePermissions(contextID,componentConfiguration,viewConfiguration,deploymentReflectionIndex,viewClassName,ejbViewDescription,viewMethod,permissions,false,viewMethodSecurityAttributesServiceBuilder,isSecurityDomainKnown);
    if (!methodHasSecurityMetadata) {
      methodHasSecurityMetadata=handlePermissions(contextID,componentConfiguration,viewConfiguration,deploymentReflectionIndex,viewClassName,ejbViewDescription,viewMethod,ejbComponentDescription.getAnnotationMethodPermissions(),true,viewMethodSecurityAttributesServiceBuilder,isSecurityDomainKnown);
    }
    if (methodHasSecurityMetadata) {
      beanHasMethodLevelSecurityMetadata=true;
    }
 else {
      methodsWithoutExplicitSecurityConfiguration.add(viewMethod);
    }
  }
  final boolean securityRequired=beanHasMethodLevelSecurityMetadata || ejbComponentDescription.hasBeanLevelSecurityMetadata();
  if (isSecurityDomainKnown) {
    viewConfiguration.addViewInterceptor(new ElytronInterceptorFactory(contextID),InterceptorOrder.View.SECURITY_CONTEXT);
  }
 else {
    viewConfiguration.addViewInterceptor(new SecurityContextInterceptorFactory(securityRequired,true,contextID),InterceptorOrder.View.SECURITY_CONTEXT);
  }
  if (securityRequired) {
    final Boolean denyAccessToMethodsMissingPermissions=((EJBComponentDescription)componentConfiguration.getComponentDescription()).isMissingMethodPermissionsDeniedAccess();
    if (denyAccessToMethodsMissingPermissions != Boolean.FALSE) {
      for (      final Method viewMethod : methodsWithoutExplicitSecurityConfiguration) {
        if (viewMethodSecurityAttributesServiceBuilder != null) {
          viewMethodSecurityAttributesServiceBuilder.addMethodSecurityMetadata(viewMethod,EJBMethodSecurityAttribute.denyAll());
        }
        if (isSecurityDomainKnown) {
          viewConfiguration.addViewInterceptor(viewMethod,new ImmediateInterceptorFactory(RolesAllowedInterceptor.DENY_ALL),InterceptorOrder.View.EJB_SECURITY_AUTHORIZATION_INTERCEPTOR);
        }
 else {
          final Interceptor authorizationInterceptor=new AuthorizationInterceptor(EJBMethodSecurityAttribute.denyAll(),viewClassName,viewMethod,contextID);
          viewConfiguration.addViewInterceptor(viewMethod,new ImmediateInterceptorFactory(authorizationInterceptor),InterceptorOrder.View.EJB_SECURITY_AUTHORIZATION_INTERCEPTOR);
        }
      }
    }
  }
  if (viewMethodSecurityAttributesServiceBuilder != null) {
    final EJBViewMethodSecurityAttributesService viewMethodSecurityAttributesService=viewMethodSecurityAttributesServiceBuilder.build();
    context.getServiceTarget().addService(viewMethodSecurityAttributesServiceName,viewMethodSecurityAttributesService).install();
  }
}
