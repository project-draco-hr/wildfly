{
  if (componentConfiguration.getComponentDescription() instanceof EJBComponentDescription == false) {
    throw new IllegalArgumentException("Component named " + componentConfiguration.getComponentName() + " with component class "+ componentConfiguration.getComponentClass()+ " is not a EJB component");
  }
  final EJBComponentDescription ejbComponentDescription=(EJBComponentDescription)componentConfiguration.getComponentDescription();
  if (!ejbComponentDescription.isSecurityEnabled()) {
    logger.debug("Security is *not* enabled on EJB: " + ejbComponentDescription.getEJBName() + ", no security interceptors will apply");
    return;
  }
  final String viewClassName=viewDescription.getViewClassName();
  viewConfiguration.addViewInterceptor(new SecurityContextInterceptorFactory(),InterceptorOrder.View.SECURITY_CONTEXT);
  final List<Method> viewMethods=viewConfiguration.getProxyFactory().getCachedMethods();
  for (  final Method viewMethod : viewMethods) {
    if (!Modifier.isPublic(viewMethod.getModifiers())) {
      continue;
    }
    if (viewMethod.getDeclaringClass() == WriteReplaceInterface.class) {
      continue;
    }
    final EJBMethodSecurityMetaData ejbMethodSecurityMetaData=new EJBMethodSecurityMetaData(componentConfiguration,viewClassName,viewMethod);
    final Interceptor authorizationInterceptor=new AuthorizationInterceptor(ejbMethodSecurityMetaData,viewClassName,viewMethod);
    viewConfiguration.addViewInterceptor(viewMethod,new ImmediateInterceptorFactory(authorizationInterceptor),InterceptorOrder.View.EJB_SECURITY_AUTHORIZATION_INTERCEPTOR);
  }
}
