{
  if (componentConfiguration.getComponentDescription() instanceof EJBComponentDescription == false) {
    throw MESSAGES.invalidEjbComponent(componentConfiguration.getComponentName(),componentConfiguration.getComponentClass());
  }
  final DeploymentReflectionIndex deploymentReflectionIndex=context.getDeploymentUnit().getAttachment(org.jboss.as.server.deployment.Attachments.REFLECTION_INDEX);
  final EJBComponentDescription ejbComponentDescription=(EJBComponentDescription)componentConfiguration.getComponentDescription();
  if (ejbComponentDescription.getSecurityDomain() == null) {
    ROOT_LOGGER.debug("Security is *not* enabled on EJB: " + ejbComponentDescription.getEJBName() + ", since no explicit security domain is configured for the bean, nor is there any default security domain configured in the EJB3 subsystem");
    return;
  }
  final String viewClassName=viewDescription.getViewClassName();
  final EJBViewDescription ejbViewDescription=(EJBViewDescription)viewDescription;
  DeploymentUnit deploymentUnit=context.getDeploymentUnit();
  String contextID=deploymentUnit.getName();
  if (deploymentUnit.getParent() != null) {
    contextID=deploymentUnit.getParent().getName() + "!" + contextID;
  }
  final EJBViewMethodSecurityAttributesService.Builder viewMethodSecurityAttributesServiceBuilder=new EJBViewMethodSecurityAttributesService.Builder(viewClassName);
  final ServiceName viewMethodSecurityAttributesServiceName=EJBViewMethodSecurityAttributesService.getServiceName(ejbComponentDescription.getApplicationName(),ejbComponentDescription.getModuleName(),ejbComponentDescription.getEJBName(),viewClassName);
  boolean beanHasMethodLevelSecurityMetadata=false;
  final List<Method> viewMethods=viewConfiguration.getProxyFactory().getCachedMethods();
  final List<Method> methodsWithoutExplicitSecurityConfiguration=new ArrayList<Method>();
  for (  final Method viewMethod : viewMethods) {
    if (!Modifier.isPublic(viewMethod.getModifiers())) {
      continue;
    }
    if (viewMethod.getDeclaringClass() == WriteReplaceInterface.class) {
      continue;
    }
    final ApplicableMethodInformation<EJBMethodSecurityAttribute> permissions=ejbComponentDescription.getDescriptorMethodPermissions();
    boolean methodHasSecurityMetadata=handlePermissions(contextID,componentConfiguration,viewConfiguration,deploymentReflectionIndex,viewClassName,ejbViewDescription,viewMethod,permissions,false,viewMethodSecurityAttributesServiceBuilder);
    if (!methodHasSecurityMetadata) {
      methodHasSecurityMetadata=handlePermissions(contextID,componentConfiguration,viewConfiguration,deploymentReflectionIndex,viewClassName,ejbViewDescription,viewMethod,ejbComponentDescription.getAnnotationMethodPermissions(),true,viewMethodSecurityAttributesServiceBuilder);
    }
    if (methodHasSecurityMetadata) {
      beanHasMethodLevelSecurityMetadata=true;
    }
 else {
      methodsWithoutExplicitSecurityConfiguration.add(viewMethod);
    }
  }
  final boolean securityRequired=beanHasMethodLevelSecurityMetadata || this.hasSecurityMetaData(ejbComponentDescription);
  viewConfiguration.addViewInterceptor(new SecurityContextInterceptorFactory(securityRequired),InterceptorOrder.View.SECURITY_CONTEXT);
  if (securityRequired) {
    final Boolean denyAccessToMethodsMissingPermissions=((EJBComponentDescription)componentConfiguration.getComponentDescription()).isMissingMethodPermissionsDeniedAccess();
    if (denyAccessToMethodsMissingPermissions == null || denyAccessToMethodsMissingPermissions == true) {
      for (      final Method viewMethod : methodsWithoutExplicitSecurityConfiguration) {
        viewMethodSecurityAttributesServiceBuilder.addMethodSecurityMetadata(viewMethod,EJBMethodSecurityAttribute.denyAll());
        final Interceptor authorizationInterceptor=new AuthorizationInterceptor(EJBMethodSecurityAttribute.denyAll(),viewClassName,viewMethod,contextID);
        viewConfiguration.addViewInterceptor(viewMethod,new ImmediateInterceptorFactory(authorizationInterceptor),InterceptorOrder.View.EJB_SECURITY_AUTHORIZATION_INTERCEPTOR);
      }
    }
    final EJBViewMethodSecurityAttributesService viewMethodSecurityAttributesService=viewMethodSecurityAttributesServiceBuilder.build();
    context.getServiceTarget().addService(viewMethodSecurityAttributesServiceName,viewMethodSecurityAttributesService).install();
  }
 else {
    ROOT_LOGGER.debug("Security is *not* enabled on EJB: " + ejbComponentDescription.getEJBName() + ", no security interceptors will apply");
    final EJBViewMethodSecurityAttributesService viewMethodSecurityAttributesService=viewMethodSecurityAttributesServiceBuilder.build();
    context.getServiceTarget().addService(viewMethodSecurityAttributesServiceName,viewMethodSecurityAttributesService).install();
    return;
  }
}
