{
  Authenticator.setDefault(getAuthenticator());
  BufferedOutputStream os=null;
  BufferedInputStream is=null;
  try {
    HttpURLConnection connection=(HttpURLConnection)new URL(UPLOAD_URL).openConnection();
    connection.setDoInput(true);
    connection.setDoOutput(true);
    connection.setRequestMethod(POST_REQUEST_METHOD);
    connection.setRequestProperty("Content-Type","multipart/form-data; boundary=" + BOUNDARY_PARAM);
    final JavaArchive archive=ShrinkWrapUtils.createJavaArchive("servermodule/test-http-deployment.sar",Simple.class.getPackage());
    os=new BufferedOutputStream(connection.getOutputStream());
    is=new BufferedInputStream(archive.as(ZipExporter.class).exportAsInputStream());
    writeUploadRequest(is,os);
    assertEquals("text/html",connection.getHeaderField("Content-Type"));
    ModelNode node=readResult(connection.getInputStream());
    assertNotNull(node);
    System.out.println(node);
    assertEquals(SUCCESS,node.require(OUTCOME).asString());
    byte[] hash=node.require(RESULT).asBytes();
    connection=(HttpURLConnection)new URL(BASIC_URL).openConnection();
    connection.setDoInput(true);
    connection.setDoOutput(true);
    connection.setRequestMethod(POST_REQUEST_METHOD);
    connection.setRequestProperty("Content-Type","application/json");
    os=new BufferedOutputStream(connection.getOutputStream());
    writeAddRequest(os,hash);
    node=readResult(connection.getInputStream());
    assertNotNull(node);
    System.out.println(node);
    assertEquals(SUCCESS,node.require(OUTCOME).asString());
  }
  finally {
    closeQuietly(is);
    closeQuietly(os);
  }
}
