{
  super(slsbComponentCreateService);
  StatelessObjectFactory<StatelessSessionComponentInstance> factory=new StatelessObjectFactory<StatelessSessionComponentInstance>(){
    @Override public StatelessSessionComponentInstance create(){
      return (StatelessSessionComponentInstance)createInstance();
    }
    @Override public void destroy(    StatelessSessionComponentInstance obj){
      obj.destroy();
    }
  }
;
  final PoolConfig poolConfig=slsbComponentCreateService.getPoolConfig();
  if (poolConfig == null) {
    ROOT_LOGGER.debug("Pooling is disabled for Stateless EJB " + slsbComponentCreateService.getComponentName());
    this.pool=null;
  }
 else {
    ROOT_LOGGER.debug("Using pool config " + poolConfig + " to create pool for Stateless EJB "+ slsbComponentCreateService.getComponentName());
    this.pool=poolConfig.createPool(factory);
  }
  this.timeoutMethod=slsbComponentCreateService.getTimeoutMethod();
  final String deploymentName;
  if (slsbComponentCreateService.getDistinctName() == null || slsbComponentCreateService.getDistinctName().length() == 0) {
    deploymentName=slsbComponentCreateService.getApplicationName() + "." + slsbComponentCreateService.getModuleName();
  }
 else {
    deploymentName=slsbComponentCreateService.getApplicationName() + "." + slsbComponentCreateService.getModuleName()+ "."+ slsbComponentCreateService.getDistinctName();
  }
  this.timedObjectInvoker=new PooledTimedObjectInvokerImpl(this,deploymentName);
}
