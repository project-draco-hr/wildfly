{
  validator.validate(operation);
  final String name=operation.require(NAME).asString();
  final PathAddress address=PathAddress.EMPTY_ADDRESS.append(PathElement.pathElement(DEPLOYMENT,name));
  final Resource root=context.readResource(PathAddress.EMPTY_ADDRESS);
  boolean exists=root.hasChild(PathElement.pathElement(DEPLOYMENT,name));
  if (!exists) {
    ServerMessages.MESSAGES.noSuchDeployment(name);
  }
  final ModelNode replaceNode=context.readResourceForUpdate(address).getModel();
  final String replacedRuntimeName=replaceNode.require(RUNTIME_NAME).asString();
  final String runtimeName=operation.hasDefined(RUNTIME_NAME) ? operation.get(RUNTIME_NAME).asString() : replacedRuntimeName;
  final ModelNode content=operation.require(CONTENT).clone();
  final DeploymentHandlerUtil.ContentItem contentItem;
  final ModelNode contentItemNode=content.require(0);
  if (contentItemNode.hasDefined(HASH)) {
    managedContentValidator.validate(contentItemNode);
    byte[] hash=contentItemNode.require(HASH).asBytes();
    contentItem=addFromHash(hash);
  }
 else   if (hasValidContentAdditionParameterDefined(contentItemNode)) {
    contentItem=addFromContentAdditionParameter(context,contentItemNode);
  }
 else {
    contentItem=addUnmanaged(contentItemNode);
  }
  boolean start=replaceNode.get(ENABLED).asBoolean();
  byte[] originalHash=replaceNode.get(CONTENT).get(0).hasDefined(HASH) ? replaceNode.get(CONTENT).get(0).get(HASH).asBytes() : null;
  final ModelNode deployNode=context.readResourceForUpdate(address).getModel();
  deployNode.get(NAME).set(name);
  deployNode.get(RUNTIME_NAME).set(runtimeName);
  deployNode.get(CONTENT).set(content);
  deployNode.get(ENABLED).set(start);
  removeContentAdditions(deployNode.require(CONTENT));
  if (start) {
    DeploymentHandlerUtil.replace(context,replaceNode,runtimeName,name,replacedRuntimeName,contentItem);
  }
  if (context.completeStep() == ResultAction.KEEP) {
    if (originalHash != null) {
      if (replaceNode.get(CONTENT).get(0).hasDefined(HASH)) {
        byte[] newHash=replaceNode.get(CONTENT).get(0).get(HASH).asBytes();
        if (!Arrays.equals(originalHash,newHash)) {
          contentRepository.removeContent(originalHash);
        }
      }
    }
  }
 else {
    if (replaceNode.get(CONTENT).get(0).hasDefined(HASH)) {
      byte[] newHash=replaceNode.get(CONTENT).get(0).get(HASH).asBytes();
      contentRepository.removeContent(newHash);
    }
  }
}
