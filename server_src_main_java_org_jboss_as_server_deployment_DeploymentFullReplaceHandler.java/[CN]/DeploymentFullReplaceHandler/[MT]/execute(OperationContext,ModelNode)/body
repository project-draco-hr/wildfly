{
  ModelNode correctedOperation=operation.clone();
  for (  AttributeDefinition def : DeploymentAttributes.FULL_REPLACE_DEPLOYMENT_ATTRIBUTES.values()) {
    def.validateAndSet(operation,correctedOperation);
  }
  final String name=DeploymentAttributes.NAME.resolveModelAttribute(context,correctedOperation).asString();
  final PathElement deploymentPath=PathElement.pathElement(DEPLOYMENT,name);
  final String runtimeName=correctedOperation.hasDefined(RUNTIME_NAME.getName()) ? correctedOperation.get(RUNTIME_NAME.getName()).asString() : name;
  ModelNode content=correctedOperation.require(CONTENT).clone();
  final ModelNode deploymentModel=context.readResourceForUpdate(PathAddress.pathAddress(deploymentPath)).getModel();
  final String replacedRuntimeName=RUNTIME_NAME.resolveModelAttribute(context,deploymentModel).asString();
  ModelNode replacedContent=deploymentModel.get(CONTENT).get(0);
  final byte[] replacedHash=replacedContent.hasDefined(CONTENT_HASH.getName()) ? CONTENT_HASH.resolveModelAttribute(context,replacedContent).asBytes() : null;
  final byte[] newHash;
  final DeploymentHandlerUtil.ContentItem contentItem;
  ModelNode contentItemNode=content.require(0);
  if (contentItemNode.hasDefined(CONTENT_HASH.getName())) {
    newHash=CONTENT_HASH.resolveModelAttribute(context,contentItemNode).asBytes();
    contentItem=addFromHash(newHash);
  }
 else   if (hasValidContentAdditionParameterDefined(contentItemNode)) {
    contentItem=addFromContentAdditionParameter(context,contentItemNode);
    newHash=contentItem.getHash();
    contentItemNode=new ModelNode();
    contentItemNode.get(CONTENT_HASH.getName()).set(newHash);
    content.clear();
    content.add(contentItemNode);
  }
 else {
    contentItem=addUnmanaged(context,contentItemNode);
    newHash=null;
  }
  deploymentModel.get(RUNTIME_NAME.getName()).set(runtimeName);
  deploymentModel.get(CONTENT).set(content);
  if (!operation.hasDefined(PERSISTENT.getName())) {
    operation.get(PERSISTENT.getName()).set(true);
  }
  PERSISTENT.validateAndSet(operation,deploymentModel);
  if (operation.hasDefined(ENABLED.getName())) {
    ENABLED.validateAndSet(operation,deploymentModel);
  }
  if (ENABLED.resolveModelAttribute(context,deploymentModel).asBoolean()) {
    DeploymentHandlerUtil.replace(context,deploymentModel,runtimeName,name,replacedRuntimeName,vaultReader,contentItem);
  }
  context.completeStep(new OperationContext.ResultHandler(){
    @Override public void handleResult(    ResultAction resultAction,    OperationContext context,    ModelNode operation){
      if (resultAction == ResultAction.KEEP) {
        if (replacedHash != null && (newHash == null || !Arrays.equals(replacedHash,newHash))) {
          contentRepository.removeContent(replacedHash,name);
        }
        if (newHash != null) {
          contentRepository.addContentReference(newHash,name);
        }
      }
 else       if (newHash != null && (replacedHash == null || !Arrays.equals(replacedHash,newHash))) {
        contentRepository.removeContent(newHash,name);
      }
    }
  }
);
}
