{
  this.config=config;
  logger.info("Starting server with config: " + config.getServerName());
  serviceContainer=ServiceContainer.Factory.create();
  final BatchBuilder batchBuilder=serviceContainer.batchBuilder();
  final DeploymentServiceListener listener=new DeploymentServiceListener(new DeploymentServiceListener.Callback(){
    @Override public void run(    Map<ServiceName,StartException> serviceFailures,    long elapsedTime,    int numberServices){
      if (serviceFailures.isEmpty()) {
        logger.infof("JBoss AS started [%d services in %dms]",numberServices,elapsedTime);
        sendMessage("STARTED");
      }
 else {
        sendMessage("START FAILED");
        final StringBuilder buff=new StringBuilder(String.format("JBoss AS server start failed.  Attempted to start %d services in %dms",numberServices,elapsedTime));
        buff.append("\nThe following services failed to start:\n");
        for (        Map.Entry<ServiceName,StartException> entry : serviceFailures.entrySet()) {
          buff.append(String.format("\t%s => %s\n",entry.getKey(),entry.getValue().getMessage()));
        }
        logger.error(buff.toString());
      }
    }
  }
);
  batchBuilder.addListener(listener);
  try {
    listener.startBatch();
    final ServiceActivatorContext serviceActivatorContext=new ServiceActivatorContextImpl(batchBuilder);
    config.activate(serviceActivatorContext);
    batchBuilder.install();
    listener.finishBatch();
    listener.finishDeployment();
  }
 catch (  Throwable t) {
    sendMessage("START FAILED");
    throw new ServerStartException("Failed to start server",t);
  }
}
