{
  GlobalConfigurationBuilder builder=new GlobalConfigurationBuilder();
  ModuleLoader moduleLoader=this.dependencies.getModuleLoader();
  builder.serialization().classResolver(ModularClassResolver.getInstance(moduleLoader));
  try {
    ClassLoader loader=(this.moduleId != null) ? moduleLoader.loadModule(this.moduleId).getClassLoader() : EmbeddedCacheManagerConfiguration.class.getClassLoader();
    builder.classLoader(loader);
    int id=Ids.MAX_ID;
    for (    SimpleExternalizer<?> externalizer : ServiceLoader.load(SimpleExternalizer.class,loader)) {
      InfinispanLogger.ROOT_LOGGER.debugf("Cache container %s will use an externalizer for %s",this.name,externalizer.getTargetClass().getName());
      builder.serialization().addAdvancedExternalizer(id++,externalizer);
    }
  }
 catch (  ModuleLoadException e) {
    throw new StartException(e);
  }
  builder.shutdown().hookBehavior(ShutdownHookBehavior.DONT_REGISTER);
  TransportConfiguration transport=this.dependencies.getTransportConfiguration();
  TransportConfigurationBuilder transportBuilder=builder.transport();
  if (transport != null) {
    transportBuilder.transport(new ChannelTransport(transport.getChannel()));
    transportBuilder.distributedSyncTimeout(transport.getLockTimeout());
    ProtocolStackConfiguration stack=transport.getChannelFactory().getProtocolStackConfiguration();
    org.wildfly.clustering.jgroups.spi.TransportConfiguration.Topology topology=stack.getTransport().getTopology();
    if (topology != null) {
      String site=topology.getSite();
      if (site != null) {
        transportBuilder.siteId(site);
      }
      String rack=topology.getRack();
      if (rack != null) {
        transportBuilder.rackId(rack);
      }
      String machine=topology.getMachine();
      if (machine != null) {
        transportBuilder.machineId(machine);
      }
    }
    transportBuilder.clusterName(this.name);
    Executor executor=transport.getExecutor();
    if (executor != null) {
      transportBuilder.asyncTransportExecutor().factory(new ManagedExecutorFactory(executor));
    }
    RelayConfiguration relay=stack.getRelay();
    if (relay != null) {
      builder.site().localSite(relay.getSiteName());
    }
  }
  Executor listenerExecutor=this.dependencies.getListenerExecutor();
  if (listenerExecutor != null) {
    builder.listenerThreadPool().threadPoolFactory(new ManagedExecutorFactory(listenerExecutor));
  }
  ScheduledExecutorService evictionExecutor=this.dependencies.getEvictionExecutor();
  if (evictionExecutor != null) {
    builder.evictionThreadPool().threadPoolFactory(new ManagedScheduledExecutorFactory(evictionExecutor));
  }
  ScheduledExecutorService replicationQueueExecutor=this.dependencies.getReplicationQueueExecutor();
  if (replicationQueueExecutor != null) {
    builder.replicationQueueThreadPool().threadPoolFactory(new ManagedExecutorFactory(replicationQueueExecutor));
  }
  GlobalJmxStatisticsConfigurationBuilder jmxBuilder=builder.globalJmxStatistics().cacheManagerName(this.name);
  MBeanServer server=this.dependencies.getMBeanServer();
  if (server != null) {
    jmxBuilder.enabled(this.statistics).mBeanServerLookup(new MBeanServerProvider(server)).jmxDomain(CacheContainerServiceName.CACHE_CONTAINER.getServiceName(CacheServiceNameFactory.DEFAULT_CACHE).getParent().getCanonicalName()).allowDuplicateDomains(true);
  }
 else {
    jmxBuilder.disable();
  }
  this.config=builder.build();
}
