{
  final Resource resource=context.createResource(PathAddress.EMPTY_ADDRESS);
  final ModelNode subModel=resource.getModel();
  for (  final AttributeDefinition attribute : ROLE_ATTRIBUTES) {
    attribute.validateAndSet(operation,subModel);
  }
  if (context.getType() == OperationContext.Type.SERVER) {
    context.addStep(new OperationStepHandler(){
      @Override public void execute(      final OperationContext context,      final ModelNode operation) throws OperationFailedException {
        final PathAddress address=PathAddress.pathAddress(operation.require(ModelDescriptionConstants.OP_ADDR));
        final HornetQServer server=getServer(context,operation);
        if (server != null) {
          final String match=address.getElement(address.size() - 2).getValue();
          final String role=address.getLastElement().getValue();
          final Set<Role> roles=server.getSecurityRepository().getMatch(match);
          roles.add(transform(context,role,subModel));
          server.getSecurityRepository().addMatch(match,roles);
        }
        context.completeStep();
      }
    }
,OperationContext.Stage.RUNTIME);
  }
  context.completeStep();
}
