{
  Map<String,String> moduleOptions=new HashMap<String,String>();
  moduleOptions.put("java.naming.factory.initial",INITIAL_CONTEXT_FACTORY);
  moduleOptions.put("java.naming.provider.url","ldap://" + Utils.getSecondaryTestAddress(managementClient) + ":"+ LDAP_PORT);
  moduleOptions.put("java.naming.security.authentication",SECURITY_AUTHENTICATION);
  moduleOptions.put("java.naming.security.principal",SECURITY_PRINCIPAL);
  moduleOptions.put("java.naming.security.credentials",SECURITY_CREDENTIALS);
  moduleOptions.put("principalDNPrefix","uid=");
  moduleOptions.put("principalDNSuffix",",ou=People,dc=jboss,dc=org");
  moduleOptions.put("rolesCtxDN","ou=Roles,dc=jboss,dc=org");
  moduleOptions.put("roleAttributeIsDN","false");
  moduleOptions.put("roleAttributeID","cn");
  moduleOptions.put("uidAttributeID","member");
  moduleOptions.put("matchOnUserDN","true");
  final SecurityDomain sdLdap=new SecurityDomain.Builder().name(SECURITY_DOMAIN_LDAP).loginModules(new SecurityModule.Builder().name("Ldap").flag(Constants.SUFFICIENT).options(moduleOptions).build()).build();
  moduleOptions.put("java.naming.provider.url","ldaps://" + Utils.getSecondaryTestAddress(managementClient) + ":"+ LDAPS_PORT);
  final SecurityDomain sdLdaps=new SecurityDomain.Builder().name(SECURITY_DOMAIN_LDAPS).loginModules(new SecurityModule.Builder().name("Ldap").flag(Constants.SUFFICIENT).options(moduleOptions).build()).build();
  return new SecurityDomain[]{sdLdap,sdLdaps};
}
