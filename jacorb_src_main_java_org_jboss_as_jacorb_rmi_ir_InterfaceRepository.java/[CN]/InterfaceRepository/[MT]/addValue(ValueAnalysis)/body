{
  ValueDefImpl vDef;
  Class cls=va.getCls();
  vDef=(ValueDefImpl)valueMap.get(cls);
  if (vDef != null)   return vDef;
  ModuleDefImpl m=ensurePackageExists(cls.getPackage().getName());
  String[] supported_interfaces=addInterfaces(va);
  String[] abstract_base_valuetypes=addAbstractBaseValuetypes(va);
  ValueDefImpl superValue=null;
  ValueAnalysis superAnalysis=va.getSuperAnalysis();
  if (superAnalysis != null)   superValue=addValue(superAnalysis);
  String base=cls.getName();
  base=base.substring(base.lastIndexOf('.') + 1);
  base=Util.javaToIDLName(base);
  TypeCode baseTypeCode;
  if (superValue == null)   baseTypeCode=orb.get_primitive_tc(TCKind.tk_null);
 else   baseTypeCode=superValue.type();
  vDef=new ValueDefImpl(va.getRepositoryId(),base,"1.0",m,va.isAbstractValue(),va.isCustom(),supported_interfaces,abstract_base_valuetypes,baseTypeCode,impl);
  addTypeCode(cls,vDef.type());
  m.add(base,vDef);
  valueMap.put(cls,vDef);
  addConstants(vDef,va);
  ValueMemberAnalysis[] vmas=va.getMembers();
  for (int i=0; i < vmas.length; ++i) {
    ValueMemberDefImpl vmDef;
    String vmid=va.getMemberRepositoryId(vmas[i].getJavaName());
    String vmName=vmas[i].getIDLName();
    Class vmCls=vmas[i].getCls();
    TypeCode typeCode=getTypeCode(vmCls);
    boolean vmPublic=vmas[i].isPublic();
    vmDef=new ValueMemberDefImpl(vmid,vmName,"1.0",typeCode,vmPublic,vDef,impl);
    vDef.add(vmName,vmDef);
  }
  addAttributes(vDef,va);
  return vDef;
}
