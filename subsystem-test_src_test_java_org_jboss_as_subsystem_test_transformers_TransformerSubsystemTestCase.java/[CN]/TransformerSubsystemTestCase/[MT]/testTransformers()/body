{
  ModelVersion oldVersion=ModelVersion.create(1,0,0);
  KernelServicesBuilder builder=createKernelServicesBuilder(null).setSubsystemXml(getSubsystemXml());
  builder.createLegacyKernelServicesBuilder(null,oldVersion).setExtensionClassName(VersionedExtension1.class.getName()).addSimpleResourceURL("target/legacy-archive.jar").skipReverseControllerCheck();
  KernelServices mainServices=builder.build();
  KernelServices legacyServices=mainServices.getLegacyServices(oldVersion);
  Assert.assertNotNull(legacyServices);
  ModelNode mainModel=mainServices.readWholeModel();
  ModelNode mainSubsystem=mainModel.get(SUBSYSTEM,"test-subsystem");
  Assert.assertEquals(3,mainSubsystem.keys().size());
  Assert.assertEquals("This is only a test",mainSubsystem.get("test-attribute").asString());
  Assert.assertTrue(mainSubsystem.hasDefined("new-element"));
  Assert.assertTrue(mainSubsystem.get("new-element").hasDefined("test"));
  Assert.assertTrue(mainSubsystem.hasDefined("renamed"));
  Assert.assertTrue(mainSubsystem.get("renamed").hasDefined("element"));
  ModelNode legacyModel=legacyServices.readWholeModel();
  ModelNode legacySubsystem=legacyModel.get(SUBSYSTEM,"test-subsystem");
  Assert.assertEquals(2,legacySubsystem.keys().size());
  Assert.assertEquals("This is only a test",legacySubsystem.get("test-attribute").asString());
  Assert.assertTrue(legacySubsystem.hasDefined("element"));
  Assert.assertTrue(legacySubsystem.get("element").hasDefined("renamed"));
  generateLegacySubsystemResourceRegistrationDmr(mainServices,oldVersion);
  checkSubsystemModelTransformation(mainServices,oldVersion);
}
