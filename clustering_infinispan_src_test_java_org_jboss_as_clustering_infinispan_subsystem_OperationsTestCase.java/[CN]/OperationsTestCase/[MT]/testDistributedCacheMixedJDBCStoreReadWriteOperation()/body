{
  ModelNode stringKeyedTable=new ModelNode().setEmptyObject();
  stringKeyedTable.get(ModelKeys.PREFIX).set("ispn_bucket");
  stringKeyedTable.get(ModelKeys.BATCH_SIZE).set(100);
  stringKeyedTable.get(ModelKeys.FETCH_SIZE).set(100);
  ModelNode idColumn=stringKeyedTable.get(ModelKeys.ID_COLUMN).setEmptyObject();
  idColumn.get(ModelKeys.NAME).set("id");
  idColumn.get(ModelKeys.TYPE).set("VARCHAR");
  ModelNode dataColumn=stringKeyedTable.get(ModelKeys.DATA_COLUMN).setEmptyObject();
  dataColumn.get(ModelKeys.NAME).set("datum");
  dataColumn.get(ModelKeys.TYPE).set("BINARY");
  ModelNode timestampColumn=stringKeyedTable.get(ModelKeys.TIMESTAMP_COLUMN).setEmptyObject();
  timestampColumn.get(ModelKeys.NAME).set("version");
  timestampColumn.get(ModelKeys.TYPE).set("BIGINT");
  String subsystemXml=getSubsystemXml();
  KernelServices servicesA=createKernelServicesBuilder(null).setSubsystemXml(subsystemXml).build();
  ModelNode result=servicesA.executeOperation(readDistCacheMixedJDBCStoreDatastoreOp);
  Assert.assertEquals(SUCCESS,result.get(OUTCOME).asString());
  Assert.assertEquals("java:jboss/jdbc/store",result.get(RESULT).asString());
  result=servicesA.executeOperation(writeDistCacheFileStoreDatastoreOp);
  Assert.assertEquals(SUCCESS,result.get(OUTCOME).asString());
  result=servicesA.executeOperation(readDistCacheMixedJDBCStoreDatastoreOp);
  Assert.assertEquals(SUCCESS,result.get(OUTCOME).asString());
  Assert.assertEquals("new-datasource",result.get(RESULT).asString());
  result=servicesA.executeOperation(readDistCacheMixedJDBCStoreStringKeyedTableOp);
  Assert.assertEquals(SUCCESS,result.get(OUTCOME).asString());
  Assert.assertEquals(stringKeyedTable.asString(),result.get(RESULT).asString());
}
