{
  boolean registerRuntimeOnly=context.isRuntimeOnlyRegistrationValid();
  final SubsystemRegistration subsystem=context.registerSubsystem(SUBSYSTEM_NAME,MANAGEMENT_API_MAJOR_VERSION,MANAGEMENT_API_MINOR_VERSION,MANAGEMENT_API_MICRO_VERSION);
  final ManagementResourceRegistration registration=subsystem.registerSubsystemModel(ConfigAdminProviders.SUBSYSTEM);
  registration.registerOperationHandler(ModelDescriptionConstants.ADD,ConfigAdminAdd.INSTANCE,ConfigAdminAdd.DESCRIPTION,false);
  registration.registerOperationHandler(ModelDescriptionConstants.DESCRIBE,ConfigAdminDescribeHandler.INSTANCE,ConfigAdminAdd.DESCRIPTION,false,OperationEntry.EntryType.PRIVATE);
  registration.registerOperationHandler(ModelDescriptionConstants.REMOVE,ReloadRequiredRemoveStepHandler.INSTANCE,ConfigAdminProviders.SUBSYSTEM_REMOVE,false);
  ManagementResourceRegistration configuration=registration.registerSubModel(PathElement.pathElement(ModelConstants.CONFIGURATION),ConfigAdminProviders.CONFIGURATION_DESCRIPTION);
  configuration.registerOperationHandler(ModelDescriptionConstants.ADD,ConfigurationAdd.INSTANCE,ConfigurationAdd.DESCRIPTION,false);
  configuration.registerOperationHandler(ModelDescriptionConstants.REMOVE,ConfigurationRemove.INSTANCE,ConfigurationRemove.DESCRIPTION,false);
  configuration.registerReadOnlyAttribute(ModelConstants.ENTRIES,null,AttributeAccess.Storage.CONFIGURATION);
  subsystem.registerXMLElementWriter(ConfigAdminWriter.INSTANCE);
}
