{
  final ModelVersion version=ModelVersion.create(1,0,0);
  final TransformersSubRegistration subsystemTransformers=subsystemRegistration.registerModelTransformers(version,ResourceTransformer.DEFAULT);
  RejectExpressionValuesTransformer rejectTransformer=new RejectExpressionValuesTransformer(ConfigurationResource.ENTRIES);
  final TransformersSubRegistration configurationTransformers=subsystemTransformers.registerSubResource(PathElement.pathElement(ModelConstants.CONFIGURATION),(ResourceTransformer)rejectTransformer);
  configurationTransformers.registerOperationTransformer(ADD,rejectTransformer);
  configurationTransformers.registerOperationTransformer(WRITE_ATTRIBUTE_OPERATION,rejectTransformer.getWriteAttributeTransformer());
  configurationTransformers.registerOperationTransformer(ModelConstants.UPDATE,new OperationTransformer(){
    @Override public TransformedOperation transformOperation(    TransformationContext context,    PathAddress address,    ModelNode operation) throws OperationFailedException {
      ModelNode remove=operation.clone();
      remove.get(OP).set(REMOVE);
      remove.remove(ModelConstants.ENTRIES);
      ModelNode add=operation.clone();
      add.get(OP).set(ADD);
      ModelNode composite=new ModelNode();
      composite.get(OP).set(COMPOSITE);
      composite.get(OP_ADDR).setEmptyList();
      composite.get(STEPS).add(remove);
      composite.get(STEPS).add(add);
      return new TransformedOperation(composite,OperationResultTransformer.ORIGINAL_RESULT);
    }
  }
);
}
