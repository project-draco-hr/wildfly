{
  final ModelVersion version=ModelVersion.create(1,0,0);
  ResourceTransformationDescriptionBuilder builder=TransformationDescriptionBuilder.Factory.createSubsystemInstance();
  builder.addChildResource(PathElement.pathElement(ModelConstants.CONFIGURATION)).getAttributeBuilder().addRejectCheck(RejectAttributeChecker.SIMPLE_EXPRESSIONS,ConfigurationResource.ENTRIES).end().addOperationTransformationOverride(ModelConstants.UPDATE).setCustomOperationTransformer(new OperationTransformer(){
    @Override public TransformedOperation transformOperation(    TransformationContext context,    PathAddress address,    ModelNode operation) throws OperationFailedException {
      ModelNode remove=operation.clone();
      remove.get(OP).set(REMOVE);
      remove.remove(ModelConstants.ENTRIES);
      ModelNode add=operation.clone();
      add.get(OP).set(ADD);
      ModelNode composite=new ModelNode();
      composite.get(OP).set(COMPOSITE);
      composite.get(OP_ADDR).setEmptyList();
      composite.get(STEPS).add(remove);
      composite.get(STEPS).add(add);
      return new TransformedOperation(composite,OperationResultTransformer.ORIGINAL_RESULT);
    }
  }
);
  TransformationDescription.Tools.register(builder.build(),subsystemRegistration,version);
}
