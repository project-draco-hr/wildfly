{
  final ModelNode driverAddress=parentAddress.clone();
  final ModelNode operation=new ModelNode();
  operation.get(OP).set(ADD);
  String driverName=null;
  for (  org.jboss.jca.common.api.metadata.ds.Driver.Attribute attribute : Driver.Attribute.values()) {
switch (attribute) {
case NAME:
{
        driverName=rawAttributeText(reader,DRIVER_NAME.getXmlName());
        DRIVER_NAME.parseAndSetParameter(driverName,operation,reader);
        break;
      }
case MAJOR_VERSION:
{
      String value=rawAttributeText(reader,DRIVER_MAJOR_VERSION.getXmlName());
      DRIVER_MAJOR_VERSION.parseAndSetParameter(value,operation,reader);
      break;
    }
case MINOR_VERSION:
{
    String value=rawAttributeText(reader,DRIVER_MINOR_VERSION.getXmlName());
    DRIVER_MINOR_VERSION.parseAndSetParameter(value,operation,reader);
    break;
  }
case MODULE:
{
  String value=rawAttributeText(reader,DRIVER_MODULE_NAME.getXmlName());
  DRIVER_MODULE_NAME.parseAndSetParameter(value,operation,reader);
  break;
}
default :
break;
}
}
driverAddress.add(JDBC_DRIVER_NAME,driverName);
driverAddress.protect();
operation.get(OP_ADDR).set(driverAddress);
boolean driverClassMatched=false;
boolean xaDatasourceClassMatched=false;
boolean datasourceClassMatched=false;
while (reader.hasNext()) {
switch (reader.nextTag()) {
case END_ELEMENT:
{
if (DataSources.Tag.forName(reader.getLocalName()) == DataSources.Tag.DRIVER) {
list.add(operation);
return;
}
 else {
if (Driver.Tag.forName(reader.getLocalName()) == Driver.Tag.UNKNOWN) {
  throw new ParserException(bundle.unexpectedEndTag(reader.getLocalName()));
}
}
break;
}
case START_ELEMENT:
{
switch (Driver.Tag.forName(reader.getLocalName())) {
case DATASOURCE_CLASS:
{
if (datasourceClassMatched) {
  throw new ParserException(bundle.unexpectedElement(DRIVER_DATASOURCE_CLASS_NAME.getXmlName()));
}
String value=rawElementText(reader);
DRIVER_DATASOURCE_CLASS_NAME.parseAndSetParameter(value,operation,reader);
datasourceClassMatched=true;
break;
}
case XA_DATASOURCE_CLASS:
{
if (xaDatasourceClassMatched) {
throw new ParserException(bundle.unexpectedElement(DRIVER_XA_DATASOURCE_CLASS_NAME.getXmlName()));
}
String value=rawElementText(reader);
DRIVER_XA_DATASOURCE_CLASS_NAME.parseAndSetParameter(value,operation,reader);
xaDatasourceClassMatched=true;
break;
}
case DRIVER_CLASS:
{
if (driverClassMatched) {
throw new ParserException(bundle.unexpectedElement(DRIVER_CLASS_NAME.getXmlName()));
}
String value=rawElementText(reader);
DRIVER_CLASS_NAME.parseAndSetParameter(value,operation,reader);
driverClassMatched=true;
break;
}
default :
throw new ParserException(bundle.unexpectedElement(reader.getLocalName()));
}
break;
}
}
}
throw new ParserException(bundle.unexpectedEndOfDocument());
}
