{
  while (reader.hasNext()) {
switch (reader.nextTag()) {
case END_ELEMENT:
{
        if (DataSource.Tag.forName(reader.getLocalName()) == DataSource.Tag.TIMEOUT) {
          return;
        }
 else {
          if (TimeOut.Tag.forName(reader.getLocalName()) == TimeOut.Tag.UNKNOWN) {
            throw new ParserException(bundle.unexpectedEndTag(reader.getLocalName()));
          }
        }
        break;
      }
case START_ELEMENT:
{
switch (TimeOut.Tag.forName(reader.getLocalName())) {
case ALLOCATION_RETRY:
{
          operation.get(ALLOCATION_RETRY).set(elementAsInteger(reader));
          break;
        }
case ALLOCATION_RETRY_WAIT_MILLIS:
{
        operation.get(ALLOCATION_RETRY_WAIT_MILLIS).set(elementAsLong(reader));
        break;
      }
case BLOCKING_TIMEOUT_MILLIS:
{
      operation.get(BLOCKING_TIMEOUT_WAIT_MILLIS).set(elementAsLong(reader));
      break;
    }
case IDLE_TIMEOUT_MINUTES:
{
    operation.get(IDLETIMEOUTMINUTES).set(elementAsLong(reader));
    break;
  }
case QUERY_TIMEOUT:
{
  operation.get(QUERYTIMEOUT).set(elementAsLong(reader));
  break;
}
case SET_TX_QUERY_TIMEOUT:
{
operation.get(SETTXQUERYTIMEOUT).set(elementAsBoolean(reader));
break;
}
case USE_TRY_LOCK:
{
operation.get(USETRYLOCK).set(elementAsLong(reader));
break;
}
case XA_RESOURCE_TIMEOUT:
{
operation.get(XA_RESOURCE_TIMEOUT).set(elementAsInteger(reader));
break;
}
default :
throw new ParserException(bundle.unexpectedElement(reader.getLocalName()));
}
break;
}
}
}
throw new ParserException(bundle.unexpectedEndOfDocument());
}
