{
  final ModelNode driverAddress=parentAddress.clone();
  final ModelNode operation=new ModelNode();
  operation.get(OP).set(ADD);
  String driverName=null;
  for (  org.jboss.jca.common.api.metadata.ds.Driver.Attribute attribute : Driver.Attribute.values()) {
switch (attribute) {
case NAME:
{
        driverName=attributeAsString(reader,attribute.getLocalName());
        if (driverName != null && driverName.trim().length() != 0)         operation.get(DRIVER_NAME).set(driverName);
        break;
      }
case MAJOR_VERSION:
{
      final Integer value=attributeAsInt(reader,attribute.getLocalName());
      if (value != null)       operation.get(DRIVER_MAJOR_VERSION).set(value);
      break;
    }
case MINOR_VERSION:
{
    final Integer value=attributeAsInt(reader,attribute.getLocalName());
    if (value != null)     operation.get(DRIVER_MINOR_VERSION).set(value);
    break;
  }
case MODULE:
{
  final String value=attributeAsString(reader,attribute.getLocalName());
  if (value != null && value.trim().length() != 0)   operation.get(DRIVER_MODULE_NAME).set(value);
  break;
}
default :
break;
}
}
driverAddress.add(JDBC_DRIVER,driverName);
driverAddress.protect();
operation.get(OP_ADDR).set(driverAddress);
while (reader.hasNext()) {
switch (reader.nextTag()) {
case END_ELEMENT:
{
if (DataSources.Tag.forName(reader.getLocalName()) == DataSources.Tag.DRIVER) {
list.add(operation);
return;
}
 else {
if (Driver.Tag.forName(reader.getLocalName()) == Driver.Tag.UNKNOWN) {
  throw new ParserException(bundle.unexpectedEndTag(reader.getLocalName()));
}
}
break;
}
case START_ELEMENT:
{
switch (Driver.Tag.forName(reader.getLocalName())) {
case DATASOURCE_CLASS:
{
operation.get(DRIVER_DATASOURCE_CLASS_NAME).set(elementAsString(reader));
break;
}
case XA_DATASOURCE_CLASS:
{
operation.get(DRIVER_XA_DATASOURCE_CLASS_NAME).set(elementAsString(reader));
break;
}
case DRIVER_CLASS:
{
operation.get(DRIVER_CLASS_NAME).set(elementAsString(reader));
break;
}
default :
throw new ParserException(bundle.unexpectedElement(reader.getLocalName()));
}
break;
}
}
}
throw new ParserException(bundle.unexpectedEndOfDocument());
}
