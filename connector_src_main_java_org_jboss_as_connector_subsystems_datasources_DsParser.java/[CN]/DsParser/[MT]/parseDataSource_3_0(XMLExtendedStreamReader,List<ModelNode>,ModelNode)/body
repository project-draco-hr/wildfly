{
  String poolName=null;
  final ModelNode operation=new ModelNode();
  operation.get(OP).set(ADD);
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    if (!isNoNamespaceAttribute(reader,i)) {
      throw unexpectedAttribute(reader,i);
    }
    final DataSource.Attribute attribute=DataSource.Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case ENABLED:
{
        final String value=rawAttributeText(reader,ENABLED.getXmlName());
        if (value != null) {
          ENABLED.parseAndSetParameter(value,operation,reader);
        }
        break;
      }
case JNDI_NAME:
{
      final String jndiName=rawAttributeText(reader,JNDI_NAME.getXmlName());
      JNDI_NAME.parseAndSetParameter(jndiName,operation,reader);
      break;
    }
case POOL_NAME:
{
    poolName=rawAttributeText(reader,POOLNAME_NAME);
    break;
  }
case USE_JAVA_CONTEXT:
{
  final String value=rawAttributeText(reader,USE_JAVA_CONTEXT.getXmlName());
  if (value != null) {
    USE_JAVA_CONTEXT.parseAndSetParameter(value,operation,reader);
  }
  break;
}
case SPY:
{
final String value=rawAttributeText(reader,SPY.getXmlName());
if (value != null) {
  SPY.parseAndSetParameter(value,operation,reader);
}
break;
}
case USE_CCM:
{
final String value=rawAttributeText(reader,USE_CCM.getXmlName());
if (value != null) {
USE_CCM.parseAndSetParameter(value,operation,reader);
}
break;
}
case JTA:
{
final String value=rawAttributeText(reader,JTA.getXmlName());
if (value != null) {
JTA.parseAndSetParameter(value,operation,reader);
}
break;
}
case CONNECTABLE:
{
final String value=rawAttributeText(reader,CONNECTABLE.getXmlName());
if (value != null) {
CONNECTABLE.parseAndSetParameter(value,operation,reader);
}
break;
}
default :
if (Constants.STATISTICS_ENABLED.getName().equals(reader.getAttributeLocalName(i))) {
final String value=rawAttributeText(reader,Constants.STATISTICS_ENABLED.getXmlName());
if (value != null) {
Constants.STATISTICS_ENABLED.parseAndSetParameter(value,operation,reader);
}
break;
}
 else {
throw ParseUtils.unexpectedAttribute(reader,i);
}
}
}
final ModelNode dsAddress=parentAddress.clone();
dsAddress.add(DATA_SOURCE,poolName);
dsAddress.protect();
operation.get(OP_ADDR).set(dsAddress);
List<ModelNode> configPropertiesOperations=new ArrayList<ModelNode>(0);
while (reader.hasNext()) {
switch (reader.nextTag()) {
case END_ELEMENT:
{
if (DataSources.Tag.forName(reader.getLocalName()) == DataSources.Tag.DATASOURCE) {
list.add(operation);
list.addAll(configPropertiesOperations);
return;
}
 else {
if (DataSource.Tag.forName(reader.getLocalName()) == DataSource.Tag.UNKNOWN) {
throw new ParserException(bundle.unexpectedEndTag(reader.getLocalName()));
}
}
break;
}
case START_ELEMENT:
{
switch (DataSource.Tag.forName(reader.getLocalName())) {
case CONNECTION_PROPERTY:
{
String name=rawAttributeText(reader,"name");
String value=rawElementText(reader);
final ModelNode configOperation=new ModelNode();
configOperation.get(OP).set(ADD);
final ModelNode configAddress=dsAddress.clone();
configAddress.add(CONNECTION_PROPERTIES.getName(),name);
configAddress.protect();
configOperation.get(OP_ADDR).set(configAddress);
CONNECTION_PROPERTY_VALUE.parseAndSetParameter(value,configOperation,reader);
configPropertiesOperations.add(configOperation);
break;
}
case CONNECTION_URL:
{
String value=rawElementText(reader);
CONNECTION_URL.parseAndSetParameter(value,operation,reader);
break;
}
case DRIVER_CLASS:
{
String value=rawElementText(reader);
DRIVER_CLASS.parseAndSetParameter(value,operation,reader);
break;
}
case DATASOURCE_CLASS:
{
String value=rawElementText(reader);
DATASOURCE_CLASS.parseAndSetParameter(value,operation,reader);
break;
}
case DRIVER:
{
String value=rawElementText(reader);
DATASOURCE_DRIVER.parseAndSetParameter(value,operation,reader);
break;
}
case POOL:
{
parsePool(reader,operation);
break;
}
case NEW_CONNECTION_SQL:
{
String value=rawElementText(reader);
NEW_CONNECTION_SQL.parseAndSetParameter(value,operation,reader);
break;
}
case URL_DELIMITER:
{
String value=rawElementText(reader);
URL_DELIMITER.parseAndSetParameter(value,operation,reader);
break;
}
case URL_SELECTOR_STRATEGY_CLASS_NAME:
{
String value=rawElementText(reader);
URL_SELECTOR_STRATEGY_CLASS_NAME.parseAndSetParameter(value,operation,reader);
break;
}
case TRANSACTION_ISOLATION:
{
String value=rawElementText(reader);
TRANSACTION_ISOLATION.parseAndSetParameter(value,operation,reader);
break;
}
case SECURITY:
{
parseDsSecurity(reader,operation);
break;
}
case STATEMENT:
{
parseStatementSettings(reader,operation);
break;
}
case TIMEOUT:
{
parseTimeOutSettings(reader,operation);
break;
}
case VALIDATION:
{
parseValidationSetting(reader,operation);
break;
}
default :
throw new ParserException(bundle.unexpectedElement(reader.getLocalName()));
}
break;
}
}
}
throw new ParserException(bundle.unexpectedEndOfDocument());
}
