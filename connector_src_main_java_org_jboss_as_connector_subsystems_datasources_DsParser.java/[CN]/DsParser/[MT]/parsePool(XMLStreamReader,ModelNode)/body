{
  while (reader.hasNext()) {
switch (reader.nextTag()) {
case END_ELEMENT:
{
        if (DataSource.Tag.forName(reader.getLocalName()) == DataSource.Tag.POOL) {
          return;
        }
 else {
          if (CommonPool.Tag.forName(reader.getLocalName()) == CommonPool.Tag.UNKNOWN) {
            throw new ParserException(bundle.unexpectedEndTag(reader.getLocalName()));
          }
        }
        break;
      }
case START_ELEMENT:
{
switch (CommonPool.Tag.forName(reader.getLocalName())) {
case MAX_POOL_SIZE:
{
          operation.get(MAX_POOL_SIZE).set(elementAsInteger(reader));
          break;
        }
case MIN_POOL_SIZE:
{
        operation.get(MIN_POOL_SIZE).set(elementAsInteger(reader));
        break;
      }
case PREFILL:
{
      operation.get(DATASOURCE_DRIVER).set(elementAsBoolean(reader));
      break;
    }
case USE_STRICT_MIN:
{
    operation.get(POOL_USE_STRICT_MIN).set(elementAsBoolean(reader));
    break;
  }
case FLUSH_STRATEGY:
{
  operation.get(FLUSH_STRATEGY).set(elementAsString(reader));
  break;
}
default :
throw new ParserException(bundle.unexpectedElement(reader.getLocalName()));
}
break;
}
}
}
throw new ParserException(bundle.unexpectedEndOfDocument());
}
