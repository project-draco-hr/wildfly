{
  String jndiName=null;
  final ModelNode operation=new ModelNode();
  operation.get(OP).set(ADD);
  for (  DataSource.Attribute attribute : DataSource.Attribute.values()) {
switch (attribute) {
case ENABLED:
{
        final Boolean value=attributeAsBoolean(reader,attribute.getLocalName());
        if (value != null)         operation.get(ENABLED).set(value);
        break;
      }
case JNDI_NAME:
{
      jndiName=attributeAsString(reader,attribute.getLocalName());
      if (jndiName != null && jndiName.trim().length() != 0)       operation.get(JNDINAME).set(jndiName);
      break;
    }
case POOL_NAME:
{
    final String value=attributeAsString(reader,attribute.getLocalName());
    if (value != null && value.trim().length() != 0)     operation.get(POOLNAME).set(value);
    break;
  }
case USE_JAVA_CONTEXT:
{
  final Boolean value=attributeAsBoolean(reader,attribute.getLocalName());
  if (value != null)   operation.get(USE_JAVA_CONTEXT).set(value);
  break;
}
case SPY:
{
final Boolean value=attributeAsBoolean(reader,attribute.getLocalName());
if (value != null) operation.get(SPY).set(value);
break;
}
case USE_CCM:
{
final Boolean value=attributeAsBoolean(reader,attribute.getLocalName());
if (value != null) operation.get(USE_CCM).set(value);
break;
}
case JTA:
{
final Boolean value=attributeAsBoolean(reader,attribute.getLocalName());
if (value != null) operation.get(JTA).set(value);
break;
}
default :
break;
}
}
final ModelNode dsAddress=parentAddress.clone();
dsAddress.add(DATA_SOURCE,jndiName);
dsAddress.protect();
operation.get(OP_ADDR).set(dsAddress);
while (reader.hasNext()) {
switch (reader.nextTag()) {
case END_ELEMENT:
{
if (DataSources.Tag.forName(reader.getLocalName()) == DataSources.Tag.DATASOURCE) {
list.add(operation);
return;
}
 else {
if (DataSource.Tag.forName(reader.getLocalName()) == DataSource.Tag.UNKNOWN) {
throw new ParserException(bundle.unexpectedEndTag(reader.getLocalName()));
}
}
break;
}
case START_ELEMENT:
{
switch (DataSource.Tag.forName(reader.getLocalName())) {
case CONNECTION_PROPERTY:
{
operation.get(Constants.CONNECTION_PROPERTIES,attributeAsString(reader,"name")).set(elementAsString(reader));
break;
}
case CONNECTION_URL:
{
operation.get(Constants.CONNECTION_URL).set(elementAsString(reader));
break;
}
case DRIVER_CLASS:
{
operation.get(Constants.DRIVER_CLASS_NAME).set(elementAsString(reader));
break;
}
case DATASOURCE_CLASS:
{
operation.get(Constants.DATASOURCE_CLASS).set(elementAsString(reader));
break;
}
case DRIVER:
{
operation.get(DATASOURCE_DRIVER).set(elementAsString(reader));
break;
}
case POOL:
{
parsePool(reader,operation);
break;
}
case NEW_CONNECTION_SQL:
{
operation.get(NEW_CONNECTION_SQL).set(elementAsString(reader));
break;
}
case URL_DELIMITER:
{
operation.get(URL_DELIMITER).set(elementAsString(reader));
break;
}
case URL_SELECTOR_STRATEGY_CLASS_NAME:
{
operation.get(URL_SELECTOR_STRATEGY_CLASS_NAME).set(elementAsString(reader));
break;
}
case TRANSACTION_ISOLATION:
{
operation.get(TRANSACTION_ISOLOATION).set(elementAsString(reader));
break;
}
case SECURITY:
{
parseDsSecurity(reader,operation);
break;
}
case STATEMENT:
{
parseStatementSettings(reader,operation);
break;
}
case TIMEOUT:
{
parseTimeOutSettings(reader,operation);
break;
}
case VALIDATION:
{
parseValidationSetting(reader,operation);
break;
}
default :
throw new ParserException(bundle.unexpectedElement(reader.getLocalName()));
}
break;
}
}
}
throw new ParserException(bundle.unexpectedEndOfDocument());
}
