{
  while (reader.hasNext()) {
switch (reader.nextTag()) {
case END_ELEMENT:
{
        if (DataSource.Tag.forName(reader.getLocalName()) == DataSource.Tag.TIMEOUT) {
          return;
        }
 else {
          if (TimeOut.Tag.forName(reader.getLocalName()) == TimeOut.Tag.UNKNOWN) {
            throw new ParserException(bundle.unexpectedEndTag(reader.getLocalName()));
          }
        }
        break;
      }
case START_ELEMENT:
{
switch (TimeOut.Tag.forName(reader.getLocalName())) {
case ALLOCATION_RETRY:
{
          final Location location=reader.getLocation();
          String value=rawElementText(reader);
          ALLOCATION_RETRY.parseAndSetParameter(value,operation,location);
          break;
        }
case ALLOCATION_RETRY_WAIT_MILLIS:
{
        final Location location=reader.getLocation();
        String value=rawElementText(reader);
        ALLOCATION_RETRY_WAIT_MILLIS.parseAndSetParameter(value,operation,location);
        break;
      }
case BLOCKING_TIMEOUT_MILLIS:
{
      final Location location=reader.getLocation();
      String value=rawElementText(reader);
      BLOCKING_TIMEOUT_WAIT_MILLIS.parseAndSetParameter(value,operation,location);
      break;
    }
case IDLE_TIMEOUT_MINUTES:
{
    final Location location=reader.getLocation();
    String value=rawElementText(reader);
    IDLETIMEOUTMINUTES.parseAndSetParameter(value,operation,location);
    break;
  }
case QUERY_TIMEOUT:
{
  final Location location=reader.getLocation();
  String value=rawElementText(reader);
  QUERYTIMEOUT.parseAndSetParameter(value,operation,location);
  break;
}
case SET_TX_QUERY_TIMEOUT:
{
final Location location=reader.getLocation();
String value=rawElementText(reader);
SETTXQUERYTIMEOUT.parseAndSetParameter(value,operation,location);
break;
}
case USE_TRY_LOCK:
{
final Location location=reader.getLocation();
String value=rawElementText(reader);
USETRYLOCK.parseAndSetParameter(value,operation,location);
break;
}
case XA_RESOURCE_TIMEOUT:
{
final Location location=reader.getLocation();
String value=rawElementText(reader);
XA_RESOURCE_TIMEOUT.parseAndSetParameter(value,operation,location);
break;
}
default :
throw new ParserException(bundle.unexpectedElement(reader.getLocalName()));
}
break;
}
}
}
throw new ParserException(bundle.unexpectedEndOfDocument());
}
