{
  containerOneStarted=true;
  containerTwoStarted=true;
  deploy(CLIENT_ARQ_DEPLOYMENT);
  clientAppDeployed=true;
  deploy(NODE_NAME_ARQ_DEPLOYMENT_CONTAINER_1);
  nodeNameAppDeployedOnContainerOne=true;
  deploy(NODE_NAME_ARQ_DEPLOYMENT_CONTAINER_2);
  nodeNameAppDeployedOnContainerTwo=true;
  final ContextSelector<EJBClientContext> previousSelector=EJBClientContextSelector.setup("cluster/ejb3/stateful/failover/local-ejb-sfsb-failover-jboss-ejb-client.properties");
  try {
    final ViewChangeListener listener=directory.lookupStateless(ViewChangeListenerBean.class,ViewChangeListener.class);
    this.establishView(listener,NODE_1,NODE_2);
    final ClientSFSBRemote clientSFSB=clientDirectory.lookupStateful(ClientSFSB.class,ClientSFSBRemote.class);
    final String sfsbNodeName=clientSFSB.invokeAndFetchNodeNameFromClusteredSFSBRemoteBean();
    Assert.assertEquals("Clustered SFSB created on unexpected node",ClusteringTestConstants.NODE_2,sfsbNodeName);
    this.deployer.undeploy(NODE_NAME_ARQ_DEPLOYMENT_CONTAINER_2);
    nodeNameAppDeployedOnContainerTwo=false;
    this.establishView(listener,NODE_1);
    final String sfsbNodeNameAfterUndeployment=clientSFSB.invokeAndFetchNodeNameFromClusteredSFSBRemoteBean();
    Assert.assertEquals("Clustered SFSB did not failover to remote node even after the local app was undeployed",ClusteringTestConstants.NODE_1,sfsbNodeNameAfterUndeployment);
  }
  finally {
    if (previousSelector != null) {
      EJBClientContext.setSelector(previousSelector);
    }
  }
}
