{
  final ModelNode compensatingOperation=new ModelNode();
  compensatingOperation.get(OP).set(REMOVE);
  compensatingOperation.get(OP_ADDR).set(operation.require(OP_ADDR));
  if (context instanceof NewRuntimeOperationContext) {
    final NewRuntimeOperationContext updateContext=(NewRuntimeOperationContext)context;
    final ServiceTarget serviceTarget=updateContext.getServiceTarget();
    final HornetQService hqService=new HornetQService();
    final Configuration configuration=transformConfig(operation);
    final ServiceBuilder<HornetQServer> serviceBuilder=serviceTarget.addService(MessagingSubsystemElement.JBOSS_MESSAGING,hqService).addDependency(DependencyType.OPTIONAL,ServiceName.JBOSS.append("mbean","server"),MBeanServer.class,hqService.getMBeanServer());
    serviceBuilder.addDependency(createDirectoryService(DEFAULT_BINDINGS_DIR,operation.get(BINDINGS_DIRECTORY),serviceTarget),String.class,hqService.getPathInjector(DEFAULT_BINDINGS_DIR));
    serviceBuilder.addDependency(createDirectoryService(DEFAULT_JOURNAL_DIR,operation.get(JOURNAL_DIRECTORY),serviceTarget),String.class,hqService.getPathInjector(DEFAULT_JOURNAL_DIR));
    serviceBuilder.addDependency(createDirectoryService(DEFAULT_LARGE_MESSSAGE_DIR,operation.get(LARGE_MESSAGES_DIRECTORY),serviceTarget),String.class,hqService.getPathInjector(DEFAULT_LARGE_MESSSAGE_DIR));
    serviceBuilder.addDependency(createDirectoryService(DEFAULT_PAGING_DIR,operation.get(PAGING_DIRECTORY),serviceTarget),String.class,hqService.getPathInjector(DEFAULT_PAGING_DIR));
    final Set<String> socketBindings=new HashSet<String>();
    processAcceptors(configuration,operation,socketBindings);
    processConnectors(configuration,operation,socketBindings);
    for (    final String socketBinding : socketBindings) {
      final ServiceName socketName=SocketBinding.JBOSS_BINDING_NAME.append(socketBinding);
      serviceBuilder.addDependency(socketName,SocketBinding.class,hqService.getSocketBindingInjector(socketBinding));
    }
    hqService.setConfiguration(configuration);
    serviceBuilder.install();
    JMSService.addService(serviceTarget);
  }
  final ModelNode subModel=context.getSubModel();
  subModel.setEmptyObject();
  for (  final String attribute : NewMessagingSubsystemProviders.MESSAGING_ROOT_ATTRIBUTES) {
    if (operation.get(attribute).isDefined()) {
      subModel.get(attribute).set(operation.get(attribute));
    }
  }
  resultHandler.handleResultComplete(compensatingOperation);
  return Cancellable.NULL;
}
