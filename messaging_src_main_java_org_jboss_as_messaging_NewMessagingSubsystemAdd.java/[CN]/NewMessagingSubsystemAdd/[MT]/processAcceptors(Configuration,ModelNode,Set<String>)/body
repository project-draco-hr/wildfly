{
  if (params.has(ACCEPTOR)) {
    final Map<String,TransportConfiguration> acceptors=new HashMap<String,TransportConfiguration>();
    for (    final Property property : params.get(ACCEPTOR).asPropertyList()) {
      final String acceptorName=property.getName();
      final ModelNode config=property.getValue();
      final Map<String,Object> parameters=new HashMap<String,Object>();
      for (      final Property parameter : config.get(PARAM).asPropertyList()) {
        parameters.put(parameter.getName(),parameter.getValue().asString());
      }
      final TransportConfigType type=TransportConfigType.valueOf(config.get(TYPE).asString());
      final String clazz;
switch (type) {
case Remote:
{
          clazz=NettyAcceptorFactory.class.getName();
          final String binding=config.get(SOCKET_BINDING).asString();
          parameters.put(SOCKET_BINDING,binding);
          bindings.add(binding);
          break;
        }
case InVM:
{
        clazz=InVMAcceptorFactory.class.getName();
        parameters.put(SERVER_ID,config.get(SERVER_ID).asInt());
        break;
      }
case Generic:
{
      clazz=config.get(FACTORY_CLASS).asString();
      break;
    }
default :
{
    clazz=null;
    break;
  }
}
acceptors.put(acceptorName,new TransportConfiguration(clazz,parameters,acceptorName));
}
configuration.setAcceptorConfigurations(new HashSet<TransportConfiguration>(acceptors.values()));
}
}
