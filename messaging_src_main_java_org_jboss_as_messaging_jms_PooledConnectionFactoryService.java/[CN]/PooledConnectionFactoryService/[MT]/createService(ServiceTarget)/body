{
  InputStream is=null;
  InputStream isIj=null;
  try {
    StringBuilder connectorClassname=new StringBuilder();
    StringBuilder connectorParams=new StringBuilder();
    for (    String connector : connectors) {
      TransportConfiguration tc=hornetQService.getValue().getConfiguration().getConnectorConfigurations().get(connector);
      if (tc == null) {
        throw new IllegalStateException("connector " + connector + " not defined");
      }
      if (connectorClassname.length() > 0) {
        connectorClassname.append(",");
        connectorParams.append(",");
      }
      connectorClassname.append(tc.getFactoryClassName());
      Map<String,Object> params=tc.getParams();
      boolean multiple=false;
      for (      Map.Entry<String,Object> entry : params.entrySet()) {
        if (multiple) {
          connectorParams.append(";");
        }
        connectorParams.append(entry.getKey()).append("=").append(entry.getValue());
        multiple=true;
      }
    }
    StringBuffer raxml=new StringBuffer(RAXML_START);
    if (connectorClassname.length() > 0) {
      String connectorClassnameConfig=CONFIG_PROPERTY_TEMPLATE;
      connectorClassnameConfig=connectorClassnameConfig.replace(NAME,CONNECTOR_CLASSNAME);
      connectorClassnameConfig=connectorClassnameConfig.replace(VALUE,connectorClassname);
      connectorClassnameConfig=connectorClassnameConfig.replace(TYPE,String.class.getName());
      raxml.append(connectorClassnameConfig);
    }
    if (connectorParams.length() > 0) {
      String connectorParamsConfig=CONFIG_PROPERTY_TEMPLATE;
      connectorParamsConfig=connectorParamsConfig.replace(NAME,CONNECTION_PARAMETERS);
      connectorParamsConfig=connectorParamsConfig.replace(VALUE,connectorParams);
      connectorParamsConfig=connectorParamsConfig.replace(TYPE,String.class.getName());
      raxml.append(connectorParamsConfig);
    }
    for (    PooledConnectionFactoryConfigProperties adapterParam : adapterParams) {
      String config=CONFIG_PROPERTY_TEMPLATE;
      config=config.replace(NAME,adapterParam.getName());
      config=config.replace(VALUE,adapterParam.getValue());
      config=config.replace(TYPE,adapterParam.getType());
      raxml.append(config);
    }
    raxml.append(OUTBOUND_CONFIG).append(INBOUND_CONFIG).append(RAXML_END);
    is=new ByteArrayInputStream(raxml.toString().getBytes("UTF-8"));
    RaParser raParser=new RaParser();
    Connector cmd=raParser.parse(is);
    String jacamarXml=JACAMAR_XML;
    jacamarXml=jacamarXml.replace(JNDI_NAME,jndiName);
    jacamarXml=jacamarXml.replace(TX_SUPPORT,txSupport);
    isIj=new ByteArrayInputStream(jacamarXml.getBytes("UTF-8"));
    IronJacamarParser ijParser=new IronJacamarParser();
    IronJacamar ijmd=ijParser.parse(isIj);
    ResourceAdapterActivatorService activator=new ResourceAdapterActivatorService(cmd,ijmd,HornetQResourceAdapter.class.getClassLoader(),name);
    serviceTarget.addService(ConnectorServices.RESOURCE_ADAPTER_ACTIVATOR_SERVICE,activator).addDependency(ConnectorServices.IRONJACAMAR_MDR,MetadataRepository.class,activator.getMdrInjector()).addDependency(ConnectorServices.RA_REPOSISTORY_SERVICE,ResourceAdapterRepository.class,activator.getRaRepositoryInjector()).addDependency(ConnectorServices.MANAGEMENT_REPOSISTORY_SERVICE,ManagementRepository.class,activator.getManagementRepositoryInjector()).addDependency(ConnectorServices.RESOURCE_ADAPTER_REGISTRY_SERVICE,ResourceAdapterDeploymentRegistry.class,activator.getRegistryInjector()).addDependency(ConnectorServices.TRANSACTION_INTEGRATION_SERVICE,TransactionIntegration.class,activator.getTxIntegrationInjector()).addDependency(ConnectorServices.CONNECTOR_CONFIG_SERVICE,JcaSubsystemConfiguration.class,activator.getConfigInjector()).addDependency(SubjectFactoryService.SERVICE_NAME,SubjectFactory.class,activator.getSubjectFactoryInjector()).addDependency(ConnectorServices.CCM_SERVICE,CachedConnectionManager.class,activator.getCcmInjector()).addDependency(NamingService.SERVICE_NAME).addDependency(TxnServices.JBOSS_TXN_TRANSACTION_MANAGER).setInitialMode(ServiceController.Mode.ACTIVE).install();
  }
  finally {
    if (is != null)     is.close();
    if (isIj != null)     isIj.close();
  }
}
