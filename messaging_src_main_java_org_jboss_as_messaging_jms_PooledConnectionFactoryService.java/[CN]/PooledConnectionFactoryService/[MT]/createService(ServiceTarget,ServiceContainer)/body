{
  InputStream is=null;
  InputStream isIj=null;
  List<ConfigProperty> properties=new ArrayList<ConfigProperty>();
  try {
    StringBuilder connectorClassname=new StringBuilder();
    StringBuilder connectorParams=new StringBuilder();
    for (    String connector : connectors) {
      TransportConfiguration tc=hornetQService.getValue().getConfiguration().getConnectorConfigurations().get(connector);
      if (tc == null) {
        throw MESSAGES.connectorNotDefined(connector);
      }
      if (connectorClassname.length() > 0) {
        connectorClassname.append(",");
        connectorParams.append(",");
      }
      connectorClassname.append(tc.getFactoryClassName());
      Map<String,Object> params=tc.getParams();
      boolean multiple=false;
      for (      Map.Entry<String,Object> entry : params.entrySet()) {
        if (multiple) {
          connectorParams.append(";");
        }
        connectorParams.append(entry.getKey()).append("=").append(entry.getValue());
        multiple=true;
      }
    }
    if (connectorClassname.length() > 0) {
      properties.add(simpleProperty15(CONNECTOR_CLASSNAME,STRING_TYPE,connectorClassname.toString()));
    }
    if (connectorParams.length() > 0) {
      properties.add(simpleProperty15(CONNECTION_PARAMETERS,STRING_TYPE,connectorParams.toString()));
    }
    if (discoveryGroupName != null) {
      DiscoveryGroupConfiguration discoveryGroupConfiguration=hornetQService.getValue().getConfiguration().getDiscoveryGroupConfigurations().get(discoveryGroupName);
      properties.add(simpleProperty15(GROUP_ADDRESS,STRING_TYPE,discoveryGroupConfiguration.getGroupAddress()));
      properties.add(simpleProperty15(DISCOVERY_INITIAL_WAIT_TIMEOUT,LONG_TYPE,"" + discoveryGroupConfiguration.getDiscoveryInitialWaitTimeout()));
      properties.add(simpleProperty15(GROUP_PORT,INTEGER_TYPE,"" + discoveryGroupConfiguration.getGroupPort()));
      properties.add(simpleProperty15(REFRESH_TIMEOUT,LONG_TYPE,"" + discoveryGroupConfiguration.getRefreshTimeout()));
    }
    boolean hasReconnect=false;
    final String reconnectName=JMSServices.RECONNECT_ATTEMPTS_METHOD;
    for (    PooledConnectionFactoryConfigProperties adapterParam : adapterParams) {
      hasReconnect|=reconnectName.equals(adapterParam.getName());
      properties.add(simpleProperty15(adapterParam.getName(),adapterParam.getType(),adapterParam.getValue()));
    }
    if (!hasReconnect) {
      properties.add(simpleProperty15(reconnectName,Integer.class.getName(),DEFAULT_MAX_RECONNECTS));
    }
    TransactionManagerLocator.container=container;
    AS7RecoveryRegistry.container=container;
    properties.add(simpleProperty15("TransactionManagerLocatorClass",STRING_TYPE,TransactionManagerLocator.class.getName()));
    properties.add(simpleProperty15("TransactionManagerLocatorMethod",STRING_TYPE,"getTransactionManager"));
    OutboundResourceAdapter outbound=createOutbound();
    InboundResourceAdapter inbound=createInbound();
    ResourceAdapter1516 ra=createResourceAdapter15(properties,outbound,inbound);
    Connector15 cmd=createConnector15(ra);
    CommonConnDef common=createConnDef(jndiName);
    IronJacamar ijmd=createIron(common,txSupport);
    ResourceAdapterActivatorService activator=new ResourceAdapterActivatorService(cmd,ijmd,PooledConnectionFactoryService.class.getClassLoader(),name);
    serviceTarget.addService(ConnectorServices.RESOURCE_ADAPTER_ACTIVATOR_SERVICE.append(name),activator).addDependency(ConnectorServices.IRONJACAMAR_MDR,MetadataRepository.class,activator.getMdrInjector()).addDependency(ConnectorServices.RA_REPOSITORY_SERVICE,ResourceAdapterRepository.class,activator.getRaRepositoryInjector()).addDependency(ConnectorServices.MANAGEMENT_REPOSITORY_SERVICE,ManagementRepository.class,activator.getManagementRepositoryInjector()).addDependency(ConnectorServices.RESOURCE_ADAPTER_REGISTRY_SERVICE,ResourceAdapterDeploymentRegistry.class,activator.getRegistryInjector()).addDependency(ConnectorServices.TRANSACTION_INTEGRATION_SERVICE,TransactionIntegration.class,activator.getTxIntegrationInjector()).addDependency(ConnectorServices.CONNECTOR_CONFIG_SERVICE,JcaSubsystemConfiguration.class,activator.getConfigInjector()).addDependency(SubjectFactoryService.SERVICE_NAME,SubjectFactory.class,activator.getSubjectFactoryInjector()).addDependency(ConnectorServices.CCM_SERVICE,CachedConnectionManager.class,activator.getCcmInjector()).addDependency(NamingService.SERVICE_NAME).addDependency(TxnServices.JBOSS_TXN_TRANSACTION_MANAGER).setInitialMode(ServiceController.Mode.ACTIVE).install();
    serviceTarget.addService(ConnectorServices.RESOURCE_ADAPTER_DEPLOYER_SERVICE_PREFIX.append(name),Service.NULL).install();
  }
  finally {
    if (is != null)     is.close();
    if (isIj != null)     isIj.close();
  }
}
