{
  final ModelControllerClient client=ModelControllerClient.Factory.create(InetAddress.getByName("localhost"),9999);
  List<ModelNode> updates=new ArrayList<ModelNode>();
  ModelNode op1=new ModelNode();
  op1.get(OP).set(ADD);
  op1.get(OP_ADDR).add(SUBSYSTEM,"security");
  op1.get(OP_ADDR).add(SECURITY_DOMAIN,"prepare-login-module");
  ModelNode loginModule2=op1.get(Constants.AUTHENTICATION).add();
  loginModule2.get(CODE).set(UsersRolesLoginModule.class.getName());
  loginModule2.get(FLAG).set("optional");
  updates.add(op1);
  ModelNode op2=new ModelNode();
  op2.get(OP).set(ADD);
  op2.get(OP_ADDR).add(SUBSYSTEM,"security");
  op2.get(OP_ADDR).add(SECURITY_DOMAIN,"users-roles-login-module");
  ModelNode loginModule=op2.get(Constants.AUTHENTICATION).add();
  loginModule.get(CODE).set(UsersRolesLoginModule.class.getName());
  loginModule.get(FLAG).set("required");
  URL usersProp=Utils.getResource("users-roles-login-module.war/users.properties");
  URL rolesProp=Utils.getResource("users-roles-login-module.war/roles.properties");
  ModelNode moduleOptions=loginModule.get("module-options");
  Map<String,String> moduleOptionsMap=classModuleOptionsMap.get(UsersRolesLoginModuleTestCase8.class);
  moduleOptions.get("usersProperties").set(usersProp.getFile());
  moduleOptions.get("rolesProperties").set(rolesProp.getFile());
  for (  Map.Entry<String,String> entry : moduleOptionsMap.entrySet()) {
    moduleOptions.get(entry.getKey()).set(entry.getValue());
  }
  updates.add(op2);
  applyUpdates(updates,client);
}
