{
  final DomainClient client=domainMasterLifecycleUtil.getDomainClient();
  try {
    executeLifecycleOperation(client,START_SERVERS);
    waitUntilState(client,"master","main-one","STARTED");
    waitUntilState(client,"master","main-two","STARTED");
    waitUntilState(client,"master","other-one","STARTED");
    waitUntilState(client,"slave","main-three","STARTED");
    waitUntilState(client,"slave","main-four","STARTED");
    waitUntilState(client,"slave","other-two","STARTED");
    executeLifecycleOperation(client,STOP_SERVERS);
    waitUntilState(client,"master","main-one","STOPPED");
    waitUntilState(client,"master","main-two","DISABLED");
    waitUntilState(client,"master","other-one","DISABLED");
    waitUntilState(client,"slave","main-three","STOPPED");
    waitUntilState(client,"slave","main-four","DISABLED");
    waitUntilState(client,"slave","other-two","STOPPED");
    executeLifecycleOperation(client,"other-server-group",START_SERVERS);
    waitUntilState(client,"master","other-one","STARTED");
    waitUntilState(client,"slave","other-two","STARTED");
    waitUntilState(client,"master","main-one","STOPPED");
    waitUntilState(client,"master","main-two","DISABLED");
    waitUntilState(client,"slave","main-three","STOPPED");
    waitUntilState(client,"slave","main-four","DISABLED");
    executeLifecycleOperation(client,"other-server-group",RESTART_SERVERS);
    waitUntilState(client,"master","other-one","STARTED");
    waitUntilState(client,"slave","other-two","STARTED");
    waitUntilState(client,"master","main-one","STOPPED");
    waitUntilState(client,"master","main-two","DISABLED");
    waitUntilState(client,"slave","main-three","STOPPED");
    waitUntilState(client,"slave","main-four","DISABLED");
    executeLifecycleOperation(client,"other-server-group",RESTART_SERVERS);
    waitUntilState(client,"master","other-one","STARTED");
    waitUntilState(client,"slave","other-two","STARTED");
    waitUntilState(client,"master","main-one","STOPPED");
    waitUntilState(client,"master","main-two","DISABLED");
    waitUntilState(client,"slave","main-three","STOPPED");
    waitUntilState(client,"slave","main-four","DISABLED");
    executeLifecycleOperation(client,"other-server-group",STOP_SERVERS);
    waitUntilState(client,"master","main-one","STOPPED");
    waitUntilState(client,"master","main-two","DISABLED");
    waitUntilState(client,"master","other-one","DISABLED");
    waitUntilState(client,"slave","main-three","STOPPED");
    waitUntilState(client,"slave","main-four","DISABLED");
    waitUntilState(client,"slave","other-two","STOPPED");
  }
  finally {
    try {
      resetServerToExpectedState(client,"master","main-one","STARTED");
      resetServerToExpectedState(client,"master","main-two","DISABLED");
      resetServerToExpectedState(client,"master","other-one","DISABLED");
      resetServerToExpectedState(client,"slave","main-three","STARTED");
      resetServerToExpectedState(client,"slave","main-four","DISABLED");
      resetServerToExpectedState(client,"slave","other-two","STARTED");
      waitUntilState(client,"master","main-one","STARTED");
      waitUntilState(client,"slave","main-three","STARTED");
      waitUntilState(client,"slave","other-two","STARTED");
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
}
