{
  final StringBuilder buf=new StringBuilder();
  buf.append("JBoss Admin Command-line Interface\n");
  buf.append("JBOSS_HOME: ").append(WildFlySecurityManager.getEnvPropertyPrivileged("JBOSS_HOME",null)).append('\n');
  buf.append("JBoss AS release: ");
  final ModelControllerClient client=ctx.getModelControllerClient();
  if (client == null) {
    buf.append("<connect to the controller and re-run the version command to see the release info>\n");
  }
 else {
    final ModelNode req=new ModelNode();
    req.get(Util.OPERATION).set(Util.READ_RESOURCE);
    req.get(Util.ADDRESS).setEmptyList();
    try {
      final ModelNode response=client.execute(req);
      if (Util.isSuccess(response)) {
        if (response.hasDefined(Util.RESULT)) {
          final ModelNode result=response.get(Util.RESULT);
          byte flag=0;
          if (result.hasDefined(Util.RELEASE_VERSION)) {
            buf.append(result.get(Util.RELEASE_VERSION).asString());
            ++flag;
          }
          if (result.hasDefined(Util.RELEASE_CODENAME)) {
            buf.append(" \"").append(result.get(Util.RELEASE_CODENAME).asString()).append('\"');
            ++flag;
          }
          if (flag == 0) {
            buf.append("release info was not provided by the controller");
          }
          if (result.hasDefined(Util.PRODUCT_NAME)) {
            buf.append("\nJBoss AS product: ").append(result.get(Util.PRODUCT_NAME).asString());
            if (result.hasDefined(Util.PRODUCT_VERSION)) {
              buf.append(' ').append(result.get(Util.PRODUCT_VERSION).asString());
            }
          }
        }
 else {
          buf.append("result was not available.");
        }
      }
 else {
        buf.append(Util.getFailureDescription(response));
      }
      buf.append('\n');
    }
 catch (    IOException e) {
      throw new CommandFormatException("Failed to get the AS release info: " + e.getLocalizedMessage());
    }
  }
  buf.append("JAVA_HOME: ").append(WildFlySecurityManager.getEnvPropertyPrivileged("JAVA_HOME",null)).append('\n');
  buf.append("java.version: ").append(WildFlySecurityManager.getPropertyPrivileged("java.version",null)).append('\n');
  buf.append("java.vm.vendor: ").append(WildFlySecurityManager.getPropertyPrivileged("java.vm.vendor",null)).append('\n');
  buf.append("java.vm.version: ").append(WildFlySecurityManager.getPropertyPrivileged("java.vm.version",null)).append('\n');
  buf.append("os.name: ").append(WildFlySecurityManager.getPropertyPrivileged("os.name",null)).append('\n');
  buf.append("os.version: ").append(WildFlySecurityManager.getPropertyPrivileged("os.version",null));
  ctx.printLine(buf.toString());
}
