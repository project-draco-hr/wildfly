{
  final String ejbName=beanMetaData.getEjbName();
  final AssemblyDescriptorMetaData assemblyDescriptor=beanMetaData.getAssemblyDescriptor();
  if (assemblyDescriptor == null) {
    return;
  }
  final ExcludeListMetaData excludeList=assemblyDescriptor.getExcludeListByEjbName(ejbName);
  if (excludeList == null) {
    return;
  }
  final MethodsMetaData methods=excludeList.getMethods();
  if (methods == null || methods.isEmpty()) {
    return;
  }
  final DeploymentUnit deploymentUnit=phaseContext.getDeploymentUnit();
  final EEModuleDescription moduleDescription=deploymentUnit.getAttachment(Attachments.EE_MODULE_DESCRIPTION);
  final Module module=deploymentUnit.getAttachment(org.jboss.as.server.deployment.Attachments.MODULE);
  final DeploymentReflectionIndex deploymentReflectionIndex=deploymentUnit.getAttachment(org.jboss.as.server.deployment.Attachments.REFLECTION_INDEX);
  final EJBComponentDescription ejbComponentDescription=(EJBComponentDescription)moduleDescription.getComponentByName(ejbName);
  final Class<?> ejbClass;
  try {
    ejbClass=module.getClassLoader().loadClass(beanMetaData.getEjbClass());
  }
 catch (  ClassNotFoundException e) {
    throw new DeploymentUnitProcessingException("Could not load EJB class " + beanMetaData.getEjbClass());
  }
  final ClassReflectionIndex classReflectionIndex=deploymentReflectionIndex.getClassIndex(ejbClass);
  for (  final MethodMetaData denyAllMethod : methods) {
    final String methodName=denyAllMethod.getMethodName();
    final MethodIntf methodIntf=this.getMethodIntf(denyAllMethod);
    if (methodName.equals("*")) {
      if (methodIntf == null) {
        ejbComponentDescription.applyDenyAllOnAllMethodsOfAllViews();
      }
 else {
        ejbComponentDescription.applyDenyAllOnAllMethodsOfViewType(methodIntf);
      }
    }
 else {
      final MethodParametersMetaData methodParams=denyAllMethod.getMethodParams();
      if (methodParams == null || methodParams.isEmpty()) {
        final Collection<Method> denyAllApplicableMethods=ClassReflectionIndexUtil.findAllMethodsByName(deploymentReflectionIndex,classReflectionIndex,methodName);
        if (denyAllApplicableMethods.isEmpty()) {
          logger.warn("No method named: " + methodName + " found on EJB: "+ ejbName+ " while processing exclude-list element in ejb-jar.xml");
          continue;
        }
        this.applyDenyAll(ejbComponentDescription,methodIntf,denyAllApplicableMethods);
      }
 else {
        final String[] paramTypes=methodParams.toArray(new String[methodParams.size()]);
        final Collection<Method> denyAllApplicableMethods=ClassReflectionIndexUtil.findMethods(deploymentReflectionIndex,classReflectionIndex,methodName,paramTypes);
        if (denyAllApplicableMethods.isEmpty()) {
          logger.warn("No method named: " + methodName + " with param types: "+ paramTypes+ " found on EJB: "+ ejbName+ " while processing exclude-list element in ejb-jar.xml");
          continue;
        }
        this.applyDenyAll(ejbComponentDescription,methodIntf,denyAllApplicableMethods);
      }
    }
  }
}
