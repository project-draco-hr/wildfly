{
  final ModelNode model=new ModelNode();
  for (  Property property : legacyModel.asPropertyList()) {
    String name=property.getName();
    final ModelNode legacyValue=property.getValue();
    if (legacyValue.isDefined()) {
      final ModelNode value;
switch (name) {
case JacORBSubsystemConstants.ORB_GIOP_MINOR_VERSION:
        name=Constants.ORB_GIOP_VERSION;
      value=new ModelNode(new StringBuilder().append("1.").append(legacyValue).toString());
    break;
case JacORBSubsystemConstants.ORB_INIT_TRANSACTIONS:
  if (legacyValue.asString().equals(JacORBSubsystemConstants.ON)) {
    value=new ModelNode(Constants.FULL);
  }
 else   if (legacyValue.asString().equals(JacORBSubsystemConstants.OFF)) {
    value=new ModelNode(Constants.NONE);
  }
 else {
    value=legacyValue;
  }
break;
case JacORBSubsystemConstants.ORB_INIT_SECURITY:
if (legacyValue.asString().equals(JacORBSubsystemConstants.OFF)) {
value=new ModelNode(Constants.NONE);
}
 else {
value=legacyValue;
}
break;
case JacORBSubsystemConstants.SECURITY_SUPPORT_SSL:
case JacORBSubsystemConstants.SECURITY_ADD_COMP_VIA_INTERCEPTOR:
case JacORBSubsystemConstants.NAMING_EXPORT_CORBALOC:
if (legacyValue.asString().equals(JacORBSubsystemConstants.ON)) {
value=new ModelNode(true);
}
 else {
value=new ModelNode(false);
}
break;
default :
value=legacyValue;
}
if (!value.asString().equals(JacORBSubsystemConstants.OFF)) {
model.get(name).set(value);
}
}
}
return model;
}
