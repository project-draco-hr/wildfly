{
  ServletContext context=mock(ServletContext.class);
  HttpSessionAttributeListener listener1=mock(HttpSessionAttributeListener.class);
  HttpSessionAttributeListener listener2=mock(HttpSessionAttributeListener.class);
  List<ManagedListener> list=Arrays.asList(new ManagedListener(new ListenerInfo(HttpSessionAttributeListener.class,new ImmediateInstanceFactory<>(listener1)),false),new ManagedListener(new ListenerInfo(HttpSessionAttributeListener.class,new ImmediateInstanceFactory<>(listener2)),false));
  ApplicationListeners listeners=new ApplicationListeners(list,context);
  listeners.start();
  when(this.deployment.getApplicationListeners()).thenReturn(listeners);
  Iterable<HttpSessionAttributeListener> result=this.context.getSessionAttributeListeners();
  HttpSession session=mock(HttpSession.class);
  ArgumentCaptor<HttpSessionBindingEvent> capturedAddedEvent1=ArgumentCaptor.forClass(HttpSessionBindingEvent.class);
  ArgumentCaptor<HttpSessionBindingEvent> capturedAddedEvent2=ArgumentCaptor.forClass(HttpSessionBindingEvent.class);
  ArgumentCaptor<HttpSessionBindingEvent> capturedReplacedEvent1=ArgumentCaptor.forClass(HttpSessionBindingEvent.class);
  ArgumentCaptor<HttpSessionBindingEvent> capturedReplacedEvent2=ArgumentCaptor.forClass(HttpSessionBindingEvent.class);
  ArgumentCaptor<HttpSessionBindingEvent> capturedRemovedEvent1=ArgumentCaptor.forClass(HttpSessionBindingEvent.class);
  ArgumentCaptor<HttpSessionBindingEvent> capturedRemovedEvent2=ArgumentCaptor.forClass(HttpSessionBindingEvent.class);
  doNothing().when(listener1).attributeAdded(capturedAddedEvent1.capture());
  doNothing().when(listener2).attributeAdded(capturedAddedEvent2.capture());
  doNothing().when(listener1).attributeReplaced(capturedReplacedEvent1.capture());
  doNothing().when(listener2).attributeReplaced(capturedReplacedEvent2.capture());
  doNothing().when(listener1).attributeRemoved(capturedRemovedEvent1.capture());
  doNothing().when(listener2).attributeRemoved(capturedRemovedEvent2.capture());
  HttpSessionBindingEvent addedEvent=new HttpSessionBindingEvent(session,"added");
  for (  HttpSessionAttributeListener listener : result) {
    listener.attributeAdded(addedEvent);
  }
  HttpSessionBindingEvent replacedEvent=new HttpSessionBindingEvent(session,"replaced");
  for (  HttpSessionAttributeListener listener : result) {
    listener.attributeReplaced(replacedEvent);
  }
  HttpSessionBindingEvent removedEvent=new HttpSessionBindingEvent(session,"removed");
  for (  HttpSessionAttributeListener listener : result) {
    listener.attributeRemoved(removedEvent);
  }
  assertSame(session,capturedAddedEvent1.getValue().getSession());
  assertEquals("added",capturedAddedEvent1.getValue().getName());
  assertSame(session,capturedAddedEvent2.getValue().getSession());
  assertEquals("added",capturedAddedEvent2.getValue().getName());
  assertSame(session,capturedReplacedEvent1.getValue().getSession());
  assertEquals("replaced",capturedReplacedEvent1.getValue().getName());
  assertSame(session,capturedReplacedEvent2.getValue().getSession());
  assertEquals("replaced",capturedReplacedEvent2.getValue().getName());
  assertSame(session,capturedRemovedEvent1.getValue().getSession());
  assertEquals("removed",capturedRemovedEvent1.getValue().getName());
  assertSame(session,capturedRemovedEvent2.getValue().getSession());
  assertEquals("removed",capturedRemovedEvent2.getValue().getName());
}
