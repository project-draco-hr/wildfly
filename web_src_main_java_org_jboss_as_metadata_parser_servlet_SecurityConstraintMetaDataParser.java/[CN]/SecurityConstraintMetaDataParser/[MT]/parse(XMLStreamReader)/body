{
  SecurityConstraintMetaData securityConstraint=new SecurityConstraintMetaData();
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    final String value=reader.getAttributeValue(i);
    if (reader.getAttributeNamespace(i) != null) {
      continue;
    }
    final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case ID:
{
        securityConstraint.setId(value);
        break;
      }
default :
    throw unexpectedAttribute(reader,i);
}
}
while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
final Element element=Element.forName(reader.getLocalName());
switch (element) {
case DISPLAY_NAME:
  securityConstraint.setDisplayName(reader.getElementText());
break;
case WEB_RESOURCE_COLLECTION:
WebResourceCollectionsMetaData resourceCollections=securityConstraint.getResourceCollections();
if (resourceCollections == null) {
resourceCollections=new WebResourceCollectionsMetaData();
securityConstraint.setResourceCollections(resourceCollections);
}
resourceCollections.add(WebResourceCollectionMetaDataParser.parse(reader));
break;
case AUTH_CONSTRAINT:
securityConstraint.setAuthConstraint(AuthConstraintMetaDataParser.parse(reader));
break;
case USER_DATA_CONSTRAINT:
securityConstraint.setUserDataConstraint(UserDataConstraintMetaDataParser.parse(reader));
break;
default :
throw unexpectedElement(reader);
}
}
return securityConstraint;
}
