{
  CachedRow row=(CachedRow)rowsById.get(pk);
  if (row == null) {
    Object[] fieldsCopy=new Object[fields.length];
    System.arraycopy(fields,0,fieldsCopy,0,fields.length);
    row=new CachedRow(pk,fieldsCopy);
    if (relations != null) {
      Object[] relationsCopy=new Object[relations.length];
      System.arraycopy(relations,0,relationsCopy,0,relations.length);
      row.relations=relationsCopy;
    }
    rowsById.put(pk,row);
    if (head == null) {
      head=row;
      tail=row;
    }
 else {
      head.prev=row;
      row.next=head;
      head=row;
    }
  }
 else   if (row.locker == null || row.locker.equals(tx)) {
    promoteRow(row);
    System.arraycopy(fields,0,row.fields,0,fields.length);
    if (relations != null) {
      if (row.relations == null) {
        row.relations=new Object[relations.length];
      }
      System.arraycopy(relations,0,row.relations,0,relations.length);
    }
    row.lastUpdated=System.currentTimeMillis();
    row.locker=null;
  }
  CachedRow victim=tail;
  while (rowsById.size() > maxCapacity && victim != null) {
    CachedRow nextVictim=victim.prev;
    if (victim.locker == null) {
      dereference(victim);
      rowsById.remove(victim.pk);
      listener.eviction(partitionIndex,row.pk,rowsById.size());
    }
    victim=nextVictim;
  }
}
