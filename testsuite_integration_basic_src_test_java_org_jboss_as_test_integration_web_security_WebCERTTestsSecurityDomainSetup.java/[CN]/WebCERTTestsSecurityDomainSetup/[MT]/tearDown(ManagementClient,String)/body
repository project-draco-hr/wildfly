{
  final List<ModelNode> updates=new ArrayList<ModelNode>();
  ModelNode op=new ModelNode();
  op.get(OP).set(REMOVE);
  op.get(OP_ADDR).add(SUBSYSTEM,"security");
  op.get(OP_ADDR).add(Constants.SECURITY_DOMAIN,APP_SECURITY_DOMAIN);
  op.get(OPERATION_HEADERS,ROLLBACK_ON_RUNTIME_FAILURE).set(false);
  op.get(OPERATION_HEADERS,ALLOW_RESOURCE_SERVICE_RESTART).set(true);
  updates.add(op);
  op=new ModelNode();
  op.get(OP).set(REMOVE);
  op.get(OP_ADDR).add(SUBSYSTEM,"security");
  op.get(OP_ADDR).add(Constants.SECURITY_DOMAIN,JSSE_SECURITY_DOMAIN);
  op.get(OPERATION_HEADERS,ROLLBACK_ON_RUNTIME_FAILURE).set(false);
  op.get(OPERATION_HEADERS,ALLOW_RESOURCE_SERVICE_RESTART).set(true);
  updates.add(op);
  op=new ModelNode();
  op.get(OP).set(REMOVE);
  op.get(OP_ADDR).add(SUBSYSTEM,"web");
  op.get(OP_ADDR).add("connector","testConnector");
  op.get(OPERATION_HEADERS,ALLOW_RESOURCE_SERVICE_RESTART).set(true);
  updates.add(op);
  op=new ModelNode();
  op.get(OP).set(REMOVE);
  op.get(OP_ADDR).add("socket-binding-group","standard-sockets");
  op.get(OP_ADDR).add("socket-binding","https-test");
  op.get(OPERATION_HEADERS,ALLOW_RESOURCE_SERVICE_RESTART).set(true);
  updates.add(op);
  applyUpdates(managementClient.getControllerClient(),updates);
}
