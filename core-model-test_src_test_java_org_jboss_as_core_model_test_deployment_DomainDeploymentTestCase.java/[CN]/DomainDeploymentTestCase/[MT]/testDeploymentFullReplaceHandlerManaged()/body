{
  KernelServices kernelServices=createKernelServices();
  ModelNode content=getByteContent(1,2,3,4,5);
  ModelNode op=createAddOperation(kernelServices,"Test1",content);
  ModelTestUtils.checkOutcome(kernelServices.executeOperation(op));
  ModelNode originalHash=checkSingleDeployment(kernelServices,"Test1");
  op=Util.createOperation(DeploymentFullReplaceHandler.OPERATION_NAME,PathAddress.EMPTY_ADDRESS);
  op.get(NAME).set("Test1");
  op.get(CONTENT).add(getByteContent(6,7,8,9,10));
  kernelServices.validateOperation(op);
  ModelTestUtils.checkOutcome(kernelServices.executeOperation(op));
  ModelNode newHash=checkSingleDeployment(kernelServices,"Test1");
  Assert.assertFalse(originalHash.equals(newHash));
  op=op.clone();
  op.get(CONTENT).clear();
  ModelNode hashContent=new ModelNode();
  hashContent.get(HASH).set(newHash);
  op.get(CONTENT).add(hashContent);
  kernelServices.validateOperation(op);
  ModelTestUtils.checkOutcome(kernelServices.executeOperation(op));
  Assert.assertEquals(newHash,checkSingleDeployment(kernelServices,"Test1"));
  op=op.clone();
  op.get(CONTENT).clear();
  op.get(CONTENT).add(getFileUrl("Test1",1,2,3,4,5));
  kernelServices.validateOperation(op);
  ModelTestUtils.checkOutcome(kernelServices.executeOperation(op));
  Assert.assertEquals(originalHash,checkSingleDeployment(kernelServices,"Test1"));
  op=op.clone();
  op.get(CONTENT).clear();
  op.get(CONTENT).add(getInputStreamIndexContent());
  op.get(RUNTIME_NAME).set("number1");
  kernelServices.validateOperation(op);
  ModelTestUtils.checkOutcome(kernelServices.executeOperation(op,new ByteArrayInputStream(new byte[]{6,7,8,9,10})));
  Assert.assertEquals(newHash,checkSingleDeployment(kernelServices,"Test1","number1"));
}
