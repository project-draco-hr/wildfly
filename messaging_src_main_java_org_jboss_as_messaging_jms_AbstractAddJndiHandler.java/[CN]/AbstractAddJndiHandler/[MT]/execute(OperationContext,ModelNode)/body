{
  JNDI_BINDING.validateOperation(operation);
  String jndiName=JNDI_BINDING.resolveModelAttribute(context,operation).asString();
  final ModelNode entries=context.readResourceForUpdate(PathAddress.EMPTY_ADDRESS).getModel().get(CommonAttributes.DESTINATION_ENTRIES.getName());
  for (  ModelNode entry : entries.asList()) {
    if (jndiName.equals(entry.asString())) {
      throw new OperationFailedException(new ModelNode().set(MESSAGES.jndiNameAlreadyRegistered(jndiName)));
    }
  }
  entries.add(jndiName);
  if (context.isNormalServer()) {
    if (rollbackOperationIfServerNotActive(context,operation)) {
      return;
    }
    context.addStep(new OperationStepHandler(){
      @Override public void execute(      OperationContext context,      ModelNode operation) throws OperationFailedException {
        final ServiceName hqServiceName=MessagingServices.getHornetQServiceName(PathAddress.pathAddress(operation.get(ModelDescriptionConstants.OP_ADDR)));
        ServiceController<?> hqService=context.getServiceRegistry(false).getService(hqServiceName);
        if (hqService != null) {
          HornetQServer hqServer=HornetQServer.class.cast(hqService.getValue());
          String resourceName=PathAddress.pathAddress(operation.require(ModelDescriptionConstants.OP_ADDR)).getLastElement().getValue();
          String jndiName=JNDI_BINDING.resolveModelAttribute(context,operation).asString();
          addJndiNameToControl(jndiName,resourceName,hqServer,context,operation);
        }
        if (!context.hasFailureDescription()) {
          context.getResult();
        }
        context.completeStep(new OperationContext.RollbackHandler(){
          @Override public void handleRollback(          OperationContext context,          ModelNode operation){
          }
        }
);
      }
    }
,OperationContext.Stage.RUNTIME);
  }
  context.stepCompleted();
}
