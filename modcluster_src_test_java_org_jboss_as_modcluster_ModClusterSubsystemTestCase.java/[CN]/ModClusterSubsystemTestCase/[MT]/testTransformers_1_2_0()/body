{
  String subsystemXml=readResource("subsystem-no-expressions.xml");
  ModelVersion modelVersion=ModelVersion.create(1,2,0);
  KernelServicesBuilder builder=createKernelServicesBuilder(createAdditionalInitialization()).setSubsystemXml(subsystemXml);
  builder.createLegacyKernelServicesBuilder(null,modelVersion).addMavenResourceURL("org.jboss.as:jboss-as-modcluster:7.1.2.Final");
  KernelServices mainServices=builder.build();
  KernelServices legacyServices=mainServices.getLegacyServices(modelVersion);
  Assert.assertNotNull(legacyServices);
  Assert.assertTrue(mainServices.isSuccessfulBoot());
  Assert.assertTrue(legacyServices.isSuccessfulBoot());
  ModelNode legacySubsystem=checkSubsystemModelTransformation(mainServices,modelVersion,new ModelFixer(){
    @Override public ModelNode fixModel(    ModelNode modelNode){
      ModelNode loadMetrics=modelNode.get(CommonAttributes.MOD_CLUSTER_CONFIG,CommonAttributes.CONFIGURATION,CommonAttributes.DYNAMIC_LOAD_PROVIDER,CommonAttributes.CONFIGURATION,CommonAttributes.LOAD_METRIC);
      for (      String key : loadMetrics.keys()) {
        ModelNode capacity=loadMetrics.get(key,CommonAttributes.CAPACITY);
        if (capacity.getType() == ModelType.DOUBLE && capacity.asString().equals("1.0")) {
          capacity.set(1);
        }
      }
      return modelNode;
    }
  }
);
  ModelNode mainSessionCapacity=mainServices.readWholeModel().get(SUBSYSTEM,ModClusterExtension.SUBSYSTEM_NAME,CommonAttributes.MOD_CLUSTER_CONFIG,CommonAttributes.CONFIGURATION,CommonAttributes.DYNAMIC_LOAD_PROVIDER,CommonAttributes.CONFIGURATION,CommonAttributes.LOAD_METRIC,"sessions",CommonAttributes.CAPACITY);
  ModelNode legacySessionCapacity=legacySubsystem.get(SUBSYSTEM,ModClusterExtension.SUBSYSTEM_NAME,CommonAttributes.MOD_CLUSTER_CONFIG,CommonAttributes.CONFIGURATION,CommonAttributes.DYNAMIC_LOAD_PROVIDER,CommonAttributes.CONFIGURATION,CommonAttributes.LOAD_METRIC,"sessions",CommonAttributes.CAPACITY);
  Assert.assertEquals(ModelType.DOUBLE,mainSessionCapacity.getType());
  Assert.assertEquals(ModelType.INT,legacySessionCapacity.getType());
  Assert.assertFalse(mainSessionCapacity.asString().equals(legacySessionCapacity.asString()));
  Assert.assertEquals(mainSessionCapacity.asInt(),legacySessionCapacity.asInt());
}
