{
  if (PlatformMBeanUtil.JVM_MAJOR_VERSION > 6 && PlatformMBeanConstants.OBJECT_NAME.equals(name)) {
    store.set(ManagementFactory.RUNTIME_MXBEAN_NAME);
  }
 else   if (ModelDescriptionConstants.NAME.equals(name)) {
    store.set(ManagementFactory.getRuntimeMXBean().getName());
  }
 else   if (PlatformMBeanConstants.VM_NAME.equals(name)) {
    store.set(ManagementFactory.getRuntimeMXBean().getVmName());
  }
 else   if (PlatformMBeanConstants.VM_VENDOR.equals(name)) {
    store.set(ManagementFactory.getRuntimeMXBean().getVmVendor());
  }
 else   if (PlatformMBeanConstants.VM_VERSION.equals(name)) {
    store.set(ManagementFactory.getRuntimeMXBean().getVmVersion());
  }
 else   if (PlatformMBeanConstants.SPEC_NAME.equals(name)) {
    store.set(ManagementFactory.getRuntimeMXBean().getSpecName());
  }
 else   if (PlatformMBeanConstants.SPEC_VENDOR.equals(name)) {
    store.set(ManagementFactory.getRuntimeMXBean().getSpecVendor());
  }
 else   if (PlatformMBeanConstants.SPEC_VERSION.equals(name)) {
    store.set(ManagementFactory.getRuntimeMXBean().getSpecVersion());
  }
 else   if (PlatformMBeanConstants.MANAGEMENT_SPEC_VERSION.equals(name)) {
    store.set(ManagementFactory.getRuntimeMXBean().getManagementSpecVersion());
  }
 else   if (PlatformMBeanConstants.CLASS_PATH.equals(name)) {
    store.set(ManagementFactory.getRuntimeMXBean().getClassPath());
  }
 else   if (PlatformMBeanConstants.LIBRARY_PATH.equals(name)) {
    store.set(ManagementFactory.getRuntimeMXBean().getLibraryPath());
  }
 else   if (PlatformMBeanConstants.BOOT_CLASS_PATH_SUPPORTED.equals(name)) {
    store.set(ManagementFactory.getRuntimeMXBean().isBootClassPathSupported());
  }
 else   if (PlatformMBeanConstants.BOOT_CLASS_PATH.equals(name)) {
    store.set(ManagementFactory.getRuntimeMXBean().getBootClassPath());
  }
 else   if (PlatformMBeanConstants.INPUT_ARGUMENTS.equals(name)) {
    store.setEmptyList();
    for (    String arg : ManagementFactory.getRuntimeMXBean().getInputArguments()) {
      store.add(arg);
    }
  }
 else   if (PlatformMBeanConstants.UPTIME.equals(name)) {
    store.set(ManagementFactory.getRuntimeMXBean().getUptime());
  }
 else   if (PlatformMBeanConstants.START_TIME.equals(name)) {
    store.set(ManagementFactory.getRuntimeMXBean().getStartTime());
  }
 else   if (PlatformMBeanConstants.SYSTEM_PROPERTIES.equals(name)) {
    store.setEmptyObject();
    for (    Map.Entry<String,String> prop : ManagementFactory.getRuntimeMXBean().getSystemProperties().entrySet()) {
      final ModelNode propNode=store.get(prop.getKey());
      if (prop.getValue() != null) {
        propNode.set(prop.getValue());
      }
    }
  }
 else   if (PlatformMBeanConstants.RUNTIME_READ_ATTRIBUTES.contains(name) || PlatformMBeanConstants.RUNTIME_METRICS.contains(name)) {
    throw new IllegalStateException(String.format("Read support for attribute %s was not properly implemented",name));
  }
}
