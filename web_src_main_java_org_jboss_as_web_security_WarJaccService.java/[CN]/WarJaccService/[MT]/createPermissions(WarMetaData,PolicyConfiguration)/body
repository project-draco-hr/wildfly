{
  if (context == null) {
    throw new IllegalStateException("Catalina Context is null while creating JACC permissions");
  }
  HashMap<String,PatternInfo> patternMap=qualifyURLPatterns(context);
  log.debugf("Qualified url patterns: " + patternMap);
  SecurityConstraint[] constraints=context.findConstraints();
  for (int i=0; i < constraints.length; i++) {
    SecurityConstraint sc=constraints[i];
    SecurityCollection[] resources=sc.findCollections();
    String transport=sc.getUserConstraint();
    if ((sc.getAuthConstraint() && (sc.findAuthRoles().length == 0 && !sc.getAllRoles())) || !sc.getAuthConstraint()) {
      for (int j=0; j < resources.length; j++) {
        SecurityCollection wrc=resources[j];
        String[] httpMethods=wrc.findMethods();
        String[] urlPatterns=wrc.findPatterns();
        for (int n=0; n < urlPatterns.length; n++) {
          String url=urlPatterns[n];
          PatternInfo info=(PatternInfo)patternMap.get(url);
          if (sc.getAuthConstraint() && (sc.findAuthRoles().length == 0 && !sc.getAllRoles())) {
            info.addExcludedMethods(Arrays.asList(httpMethods));
          }
          if (!sc.getAuthConstraint())           info.isMissingAuthConstraint=true;
        }
      }
    }
 else {
      for (int j=0; j < resources.length; j++) {
        SecurityCollection wrc=resources[j];
        String[] httpMethods=wrc.findMethods();
        String[] urlPatterns=wrc.findPatterns();
        for (int n=0; n < urlPatterns.length; n++) {
          String url=urlPatterns[n];
          PatternInfo info=(PatternInfo)patternMap.get(url);
          HashSet<String> mappedRoles=new HashSet<String>();
          String[] authRoles=sc.findAuthRoles();
          for (int k=0; k < authRoles.length; k++) {
            String role=authRoles[k];
            mappedRoles.add(role);
          }
          if (authRoles.length == 0 && sc.getAllRoles()) {
            if (metaData.getMergedJBossWebMetaData().isJaccAllStoreRole())             mappedRoles.add("*");
 else {
              String[] roles=context.findSecurityRoles();
              for (int l=0; l < roles.length; l++) {
                String role=roles[l];
                mappedRoles.add(role);
              }
            }
          }
          info.addRoles(mappedRoles,Arrays.asList(httpMethods));
          info.addTransport(transport,Arrays.asList(httpMethods));
        }
      }
    }
  }
  for (  PatternInfo info : patternMap.values()) {
    String qurl=info.getQualifiedPattern();
    if (info.isOverriden) {
      log.debugf("Dropping overriden pattern: " + info);
      continue;
    }
    String[] httpMethods=info.getExcludedMethods();
    if (httpMethods != null) {
      WebResourcePermission wrp=new WebResourcePermission(qurl,httpMethods);
      WebUserDataPermission wudp=new WebUserDataPermission(qurl,httpMethods,null);
      pc.addToExcludedPolicy(wrp);
      pc.addToExcludedPolicy(wudp);
      String excludedString="!" + getCommaSeparatedString(httpMethods);
      WebResourcePermission wrp1=new WebResourcePermission(info.pattern,excludedString);
      WebUserDataPermission wudp1=new WebUserDataPermission(info.pattern,excludedString);
      pc.addToUncheckedPolicy(wrp1);
      pc.addToUncheckedPolicy(wudp1);
    }
    Iterator<Map.Entry<String,Set<String>>> roles=info.getRoleMethods();
    while (roles.hasNext()) {
      Map.Entry<String,Set<String>> roleMethods=roles.next();
      String role=(String)roleMethods.getKey();
      WebResourcePermission wrp;
      if ("*".equals(role)) {
        wrp=new WebResourcePermission(qurl,(String)null);
      }
 else {
        Set<String> methods=roleMethods.getValue();
        httpMethods=new String[methods.size()];
        methods.toArray(httpMethods);
        wrp=new WebResourcePermission(qurl,httpMethods);
      }
      pc.addToRole(role,wrp);
      if (httpMethods != null) {
        WebResourcePermission wrpUnchecked=new WebResourcePermission(info.pattern,"!" + getCommaSeparatedString(httpMethods));
        pc.addToUncheckedPolicy(wrpUnchecked);
      }
    }
    String[] missingHttpMethods=info.getMissingMethods();
    if (missingHttpMethods.length > 0) {
      WebResourcePermission wrp=new WebResourcePermission(qurl,missingHttpMethods);
      pc.addToUncheckedPolicy(wrp);
    }
 else     pc.addToUncheckedPolicy(new WebResourcePermission(qurl,(String)null));
    if (info.isMissingAuthConstraint) {
      pc.addToUncheckedPolicy(new WebResourcePermission(qurl,(String)null));
    }
    Iterator<Map.Entry<String,Set<String>>> transportContraints=info.getTransportMethods();
    while (transportContraints.hasNext()) {
      Map.Entry<String,Set<String>> transportMethods=transportContraints.next();
      String transport=transportMethods.getKey();
      Set<String> methods=transportMethods.getValue();
      httpMethods=new String[methods.size()];
      methods.toArray(httpMethods);
      WebUserDataPermission wudp=new WebUserDataPermission(qurl,httpMethods,transport);
      pc.addToUncheckedPolicy(wudp);
      if ("NONE".equals(transport)) {
        WebUserDataPermission wudp1=new WebUserDataPermission(info.pattern,null);
        pc.addToUncheckedPolicy(wudp1);
      }
 else {
        if (httpMethods != null) {
          WebUserDataPermission wudpNonNull=new WebUserDataPermission(info.pattern,"!" + getCommaSeparatedString(httpMethods));
          pc.addToUncheckedPolicy(wudpNonNull);
        }
      }
    }
  }
  String[] unreferencedRoles=context.findSecurityRoles();
  List<String> unRefRoles=new ArrayList<String>();
  for (int i=0; i < unreferencedRoles.length; i++) {
    unRefRoles.add(unreferencedRoles[i]);
  }
  Container[] servlets=context.findChildren();
  for (int i=0; i < servlets.length; i++) {
    Wrapper servlet=(Wrapper)servlets[i];
    String servletName=servlet.getName();
    String[] roleRefs=servlet.findSecurityReferences();
    for (int j=0; j < roleRefs.length; j++) {
      String roleRef=roleRefs[j];
      String roleName=servlet.findSecurityReference(roleRef);
      WebRoleRefPermission wrrp=new WebRoleRefPermission(servletName,roleRef);
      pc.addToRole(roleName,wrrp);
      wrrp=new WebRoleRefPermission(servletName,roleName);
      pc.addToRole(roleRef,wrrp);
      unRefRoles.remove(roleName);
    }
    for (    String unrefRole : unRefRoles) {
      WebRoleRefPermission unrefP=new WebRoleRefPermission(servletName,unrefRole);
      pc.addToRole(unrefRole,unrefP);
    }
  }
  for (int i=0; i < unreferencedRoles.length; i++) {
    String unreferencedRole=unreferencedRoles[i];
    WebRoleRefPermission wrrep=new WebRoleRefPermission("",unreferencedRole);
    pc.addToRole(unreferencedRole,wrrep);
  }
  for (int i=0; i < servlets.length; i++) {
    Wrapper servlet=(Wrapper)servlets[i];
    String servletName=servlet.getName();
    for (int j=0; j < unreferencedRoles.length; j++) {
      String role=unreferencedRoles[j];
      WebRoleRefPermission wrrp=new WebRoleRefPermission(servletName,role);
      pc.addToRole(role,wrrp);
    }
  }
}
