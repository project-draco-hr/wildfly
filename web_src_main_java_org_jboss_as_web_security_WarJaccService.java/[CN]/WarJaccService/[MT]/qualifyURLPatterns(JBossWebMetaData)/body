{
  ArrayList<PatternInfo> prefixList=new ArrayList<PatternInfo>();
  ArrayList<PatternInfo> extensionList=new ArrayList<PatternInfo>();
  ArrayList<PatternInfo> exactList=new ArrayList<PatternInfo>();
  HashMap<String,PatternInfo> patternMap=new HashMap<String,PatternInfo>();
  PatternInfo defaultInfo=null;
  List<SecurityConstraintMetaData> constraints=metaData.getSecurityConstraints();
  if (constraints != null) {
    for (    SecurityConstraintMetaData sc : constraints) {
      WebResourceCollectionsMetaData resources=sc.getResourceCollections();
      for (      WebResourceCollectionMetaData wrc : resources) {
        List<String> urlPatterns=wrc.getUrlPatterns();
        int length=urlPatterns != null ? urlPatterns.size() : 0;
        for (int n=0; n < length; n++) {
          String url=urlPatterns.get(n);
          int type=getPatternType(url);
          PatternInfo info=(PatternInfo)patternMap.get(url);
          if (info == null) {
            info=new PatternInfo(url,type);
            patternMap.put(url,info);
switch (type) {
case PREFIX:
              prefixList.add(info);
            break;
case EXTENSION:
          extensionList.add(info);
        break;
case EXACT:
      exactList.add(info);
    break;
case DEFAULT:
  defaultInfo=info;
break;
}
}
}
}
}
}
for (int i=0; i < prefixList.size(); i++) {
PatternInfo info=(PatternInfo)prefixList.get(i);
for (int j=0; j < prefixList.size(); j++) {
if (i == j) continue;
PatternInfo other=(PatternInfo)prefixList.get(j);
if (info.matches(other)) info.addQualifier(other);
}
for (int j=0; j < exactList.size(); j++) {
PatternInfo other=(PatternInfo)exactList.get(j);
if (info.matches(other)) info.addQualifier(other);
}
}
for (int i=0; i < extensionList.size(); i++) {
PatternInfo info=(PatternInfo)extensionList.get(i);
for (int j=0; j < prefixList.size(); j++) {
PatternInfo other=(PatternInfo)prefixList.get(j);
{
info.addQualifier(other);
}
}
for (int j=0; j < exactList.size(); j++) {
PatternInfo other=(PatternInfo)exactList.get(j);
if (info.isExtensionFor(other)) info.addQualifier(other);
}
}
if (defaultInfo == null) {
defaultInfo=new PatternInfo("/",DEFAULT);
patternMap.put("/",defaultInfo);
}
Iterator<PatternInfo> iter=patternMap.values().iterator();
while (iter.hasNext()) {
PatternInfo info=iter.next();
if (info == defaultInfo) continue;
defaultInfo.addQualifier(info);
}
return patternMap;
}
