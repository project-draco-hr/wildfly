{
  if (InfinispanModel.VERSION_4_0_0.requiresTransformation(version)) {
    builder.discardChildResource(NoStoreResourceDefinition.PATH);
  }
 else {
    NoStoreResourceDefinition.buildTransformation(version,builder);
  }
  if (InfinispanModel.VERSION_3_0_0.requiresTransformation(version)) {
    ResourceTransformer batchingTransformer=new ResourceTransformer(){
      @Override public void transformResource(      ResourceTransformationContext context,      PathAddress address,      Resource resource) throws OperationFailedException {
        PathAddress transactionAddress=address.append(TransactionResourceDefinition.PATH);
        try {
          ModelNode transaction=context.readResourceFromRoot(transactionAddress).getModel();
          if (transaction.hasDefined(TransactionResourceDefinition.Attribute.MODE.getDefinition().getName())) {
            ModelNode mode=transaction.get(TransactionResourceDefinition.Attribute.MODE.getDefinition().getName());
            if ((mode.getType() == ModelType.STRING) && (TransactionMode.valueOf(mode.asString()) == TransactionMode.BATCH)) {
              resource.getModel().get(Attribute.BATCHING.getDefinition().getName()).set(true);
            }
          }
        }
 catch (        NoSuchElementException e) {
        }
        context.addTransformedResource(PathAddress.EMPTY_ADDRESS,resource).processChildren(resource);
      }
    }
;
    builder.setCustomResourceTransformer(batchingTransformer);
  }
  if (InfinispanModel.VERSION_1_5_0.requiresTransformation(version)) {
    builder.getAttributeBuilder().setDiscard(new DiscardAttributeChecker.DiscardAttributeValueChecker(false,false,new ModelNode(true)),Attribute.STATISTICS_ENABLED.getDefinition()).addRejectCheck(RejectAttributeChecker.UNDEFINED,Attribute.STATISTICS_ENABLED.getDefinition()).addRejectCheck(RejectAttributeChecker.SIMPLE_EXPRESSIONS,Attribute.STATISTICS_ENABLED.getDefinition()).addRejectCheck(new RejectAttributeChecker.SimpleRejectAttributeChecker(new ModelNode(false)),Attribute.STATISTICS_ENABLED.getDefinition());
  }
  LockingResourceDefinition.buildTransformation(version,builder);
  EvictionResourceDefinition.buildTransformation(version,builder);
  ExpirationResourceDefinition.buildTransformation(version,builder);
  IndexingResourceDefinition.buildTransformation(version,builder);
  TransactionResourceDefinition.buildTransformation(version,builder);
  FileStoreResourceDefinition.buildTransformation(version,builder);
  BinaryKeyedJDBCStoreResourceDefinition.buildTransformation(version,builder);
  MixedKeyedJDBCStoreResourceDefinition.buildTransformation(version,builder);
  StringKeyedJDBCStoreResourceDefinition.buildTransformation(version,builder);
  RemoteStoreResourceDefinition.buildTransformation(version,builder);
  CustomStoreResourceDefinition.buildTransformation(version,builder);
}
