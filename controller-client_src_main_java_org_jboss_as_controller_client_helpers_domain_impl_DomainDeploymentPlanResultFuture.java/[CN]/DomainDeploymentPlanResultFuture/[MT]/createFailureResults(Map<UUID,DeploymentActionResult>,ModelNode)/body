{
  boolean isDomainFailure=false;
  boolean isHostFailure=false;
  if (planResultNode.hasDefined(ClientConstants.FAILURE_DESCRIPTION)) {
    final ModelNode failureDescription=planResultNode.get(ClientConstants.FAILURE_DESCRIPTION);
    isDomainFailure=failureDescription.hasDefined(DOMAIN_FAILURE_DESCRIPTION);
    isHostFailure=failureDescription.hasDefined(HOST_FAILURE_DESCRIPTION);
  }
  final ModelNode result=planResultNode.get(ClientConstants.RESULT);
  for (  DeploymentAction deploymentAction : plan.getDeploymentActions()) {
    final List<String> steps=actionsById.get(deploymentAction.getId());
    for (    String step : steps) {
      if (result.hasDefined(step)) {
        final ModelNode stepResult=result.get(step);
        final boolean isRolledBack=(stepResult.hasDefined(ROLLED_BACK) && stepResult.get(ROLLED_BACK).asBoolean());
        final UpdateFailedException updateFailedException;
        if (stepResult.hasDefined(ClientConstants.FAILURE_DESCRIPTION)) {
          updateFailedException=new UpdateFailedException(stepResult.get(ClientConstants.FAILURE_DESCRIPTION).toString());
        }
 else         if (planResultNode.hasDefined(ClientConstants.FAILURE_DESCRIPTION)) {
          updateFailedException=new UpdateFailedException(planResultNode.get(ClientConstants.FAILURE_DESCRIPTION).toString());
        }
 else {
          updateFailedException=new UpdateFailedException(ControllerClientLogger.ROOT_LOGGER.noFailureDetails());
        }
        final BasicDomainUpdateResult domainUpdateResult;
        if (isDomainFailure) {
          domainUpdateResult=new BasicDomainUpdateResult(updateFailedException,isRolledBack);
        }
 else         if (isHostFailure) {
          final Map<String,UpdateFailedException> hostExceptions=new HashMap<String,UpdateFailedException>();
          for (          ServerIdentity serverId : servers) {
            hostExceptions.put(serverId.getHostName(),updateFailedException);
          }
          domainUpdateResult=new BasicDomainUpdateResult(hostExceptions,isRolledBack);
        }
 else {
          domainUpdateResult=new BasicDomainUpdateResult();
        }
        final DeploymentActionResultImpl deploymentActionResult=new DeploymentActionResultImpl(deploymentAction,domainUpdateResult);
        final UpdateResultHandlerResponse resultHandlerResponse=UpdateResultHandlerResponse.createFailureResponse(updateFailedException);
        for (        ServerIdentity serverId : servers) {
          final ServerUpdateResultImpl serverUpdateResult=new ServerUpdateResultImpl(deploymentAction.getId(),serverId,resultHandlerResponse);
          deploymentActionResult.storeServerUpdateResult(serverId,serverUpdateResult);
        }
        actionResults.put(deploymentAction.getId(),deploymentActionResult);
      }
    }
  }
}
