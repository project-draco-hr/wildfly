{
  final AnnotationValue nameValue=annotation.value("name");
  if (nameValue == null || nameValue.asString().isEmpty()) {
    throw new IllegalArgumentException("Class level @Resource annotations must provide a name.");
  }
  final String name=nameValue.asString();
  final AnnotationValue mappedNameValue=annotation.value("mappedName");
  if (mappedNameValue == null || mappedNameValue.asString().isEmpty()) {
    throw new IllegalArgumentException("Class level @Resource annotations must provide a mapped name.");
  }
  final String mappedName=mappedNameValue.asString();
  final AnnotationValue typeValue=annotation.value("type");
  if (typeValue == null || typeValue.asClass().name().toString().equals(Object.class.getName())) {
    throw new IllegalArgumentException("Class level @Resource annotations must provide a type.");
  }
  final String type=typeValue.asClass().name().toString();
  return new ResourceInjectionConfiguration(classInfo.name().toString(),ResourceInjectionConfiguration.TargetType.CLASS,type,name,mappedName);
}
