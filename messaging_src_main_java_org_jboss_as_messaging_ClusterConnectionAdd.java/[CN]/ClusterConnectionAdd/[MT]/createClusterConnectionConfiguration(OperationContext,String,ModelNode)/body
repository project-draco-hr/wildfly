{
  final String address=CommonAttributes.CLUSTER_CONNECTION_ADDRESS.resolveModelAttribute(context,model).asString();
  final String connectorName=CommonAttributes.CONNECTOR_REF.resolveModelAttribute(context,model).asString();
  final long retryInterval=CommonAttributes.CLUSTER_CONNECTION_RETRY_INTERVAL.resolveModelAttribute(context,model).asLong();
  final boolean duplicateDetection=CommonAttributes.CLUSTER_CONNECTION_USE_DUPLICATE_DETECTION.resolveModelAttribute(context,model).asBoolean();
  final boolean forwardWhenNoConsumers=CommonAttributes.FORWARD_WHEN_NO_CONSUMERS.resolveModelAttribute(context,model).asBoolean();
  final int maxHops=CommonAttributes.MAX_HOPS.resolveModelAttribute(context,model).asInt();
  final int confirmationWindowSize=CommonAttributes.BRIDGE_CONFIRMATION_WINDOW_SIZE.resolveModelAttribute(context,model).asInt();
  final ModelNode discoveryNode=CommonAttributes.DISCOVERY_GROUP_NAME.resolveModelAttribute(context,model);
  final String discoveryGroupName=discoveryNode.isDefined() ? discoveryNode.asString() : null;
  final List<String> staticConnectors=discoveryGroupName == null ? getStaticConnectors(model) : null;
  final boolean allowDirectOnly=CommonAttributes.ALLOW_DIRECT_CONNECTIONS_ONLY.resolveModelAttribute(context,model).asBoolean();
  final int minLargeMessageSize=MIN_LARGE_MESSAGE_SIZE.resolveModelAttribute(context,model).asInt();
  final long clientFailureCheckPeriod=CHECK_PERIOD.resolveModelAttribute(context,model).asInt();
  final long connectionTTL=CONNECTION_TTL.resolveModelAttribute(context,model).asInt();
  final long callTimeout=CALL_TIMEOUT.resolveModelAttribute(context,model).asLong();
  final int reconnectAttempts=RECONNECT_ATTEMPTS.resolveModelAttribute(context,model).asInt();
  final long maxRetryInterval=MAX_RETRY_INTERVAL.resolveModelAttribute(context,model).asLong();
  final double retryIntervalMultiplier=RETRY_INTERVAL_MULTIPLIER.resolveModelAttribute(context,model).asDouble();
  if (discoveryGroupName != null) {
    return new ClusterConnectionConfiguration(name,address,connectorName,minLargeMessageSize,clientFailureCheckPeriod,connectionTTL,retryInterval,retryIntervalMultiplier,maxRetryInterval,reconnectAttempts,callTimeout,duplicateDetection,forwardWhenNoConsumers,maxHops,confirmationWindowSize,discoveryGroupName);
  }
 else {
    return new ClusterConnectionConfiguration(name,address,connectorName,minLargeMessageSize,clientFailureCheckPeriod,connectionTTL,retryInterval,retryIntervalMultiplier,maxRetryInterval,reconnectAttempts,callTimeout,duplicateDetection,forwardWhenNoConsumers,maxHops,confirmationWindowSize,staticConnectors,allowDirectOnly);
  }
}
