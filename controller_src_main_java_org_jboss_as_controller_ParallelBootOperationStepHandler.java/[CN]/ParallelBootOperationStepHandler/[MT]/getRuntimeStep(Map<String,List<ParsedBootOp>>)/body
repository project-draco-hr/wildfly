{
  return new OperationStepHandler(){
    @Override public void execute(    OperationContext context,    ModelNode operation) throws OperationFailedException {
      long start=System.currentTimeMillis();
      context.getServiceRegistry(true);
      final Map<String,ParallelBootTransactionControl> transactionControls=new LinkedHashMap<String,ParallelBootTransactionControl>();
      final CountDownLatch preparedLatch=new CountDownLatch(runtimeOpsBySubsystem.size());
      final CountDownLatch committedLatch=new CountDownLatch(1);
      final CountDownLatch completeLatch=new CountDownLatch(runtimeOpsBySubsystem.size());
      final Thread controllingThread=Thread.currentThread();
      for (      Map.Entry<String,List<ParsedBootOp>> entry : runtimeOpsBySubsystem.entrySet()) {
        String subsystemName=entry.getKey();
        final ParallelBootTransactionControl txControl=new ParallelBootTransactionControl(subsystemName,preparedLatch,committedLatch,completeLatch);
        transactionControls.put(subsystemName,txControl);
        ParallelBootTask subsystemTask=new ParallelBootTask(subsystemName,entry.getValue(),context,txControl,null,controllingThread);
        executor.execute(subsystemTask);
      }
      try {
        preparedLatch.await();
        checkForSubsystemFailures(context,transactionControls,OperationContext.Stage.RUNTIME);
      }
 catch (      InterruptedException e) {
        context.getFailureDescription().set(new ModelNode().set("Interrupted awaiting subsystem boot operation execution"));
        Thread.currentThread().interrupt();
      }
      if (log.isDebugEnabled()) {
        long elapsed=System.currentTimeMillis() - start;
        log.debugf("Ran subsystem runtime operations in [%d] ms",elapsed);
      }
      OperationContext.ResultAction resultAction=context.completeStep();
      notifySubsystemTransactions(transactionControls,resultAction,committedLatch,OperationContext.Stage.MODEL);
      try {
        completeLatch.await();
      }
 catch (      InterruptedException e) {
        Thread.currentThread().interrupt();
      }
    }
  }
;
}
