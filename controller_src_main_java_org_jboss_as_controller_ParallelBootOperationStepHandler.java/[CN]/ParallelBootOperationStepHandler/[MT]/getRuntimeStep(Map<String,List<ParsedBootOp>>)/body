{
  return new OperationStepHandler(){
    @Override public void execute(    OperationContext context,    ModelNode operation) throws OperationFailedException {
      long start=System.currentTimeMillis();
      context.getServiceRegistry(true);
      final Map<String,ParallelBootTransactionControl> transactionControls=new LinkedHashMap<String,ParallelBootTransactionControl>();
      final CountDownLatch preparedLatch=new CountDownLatch(runtimeOpsBySubsystem.size());
      final CountDownLatch committedLatch=new CountDownLatch(1);
      final CountDownLatch completeLatch=new CountDownLatch(runtimeOpsBySubsystem.size());
      final Thread controllingThread=Thread.currentThread();
      for (      Map.Entry<String,List<ParsedBootOp>> entry : runtimeOpsBySubsystem.entrySet()) {
        String subsystemName=entry.getKey();
        final ParallelBootTransactionControl txControl=new ParallelBootTransactionControl(preparedLatch,committedLatch,completeLatch);
        transactionControls.put(subsystemName,txControl);
        ParallelBootTask subsystemTask=new ParallelBootTask(subsystemName,entry.getValue(),context,txControl,null,controllingThread,controller,operationId);
        executor.execute(subsystemTask);
      }
      try {
        preparedLatch.await();
        checkForSubsystemFailures(context,transactionControls,OperationContext.Stage.RUNTIME);
      }
 catch (      InterruptedException e) {
        context.getFailureDescription().set(new ModelNode().set(MESSAGES.subsystemBootInterrupted()));
        Thread.currentThread().interrupt();
      }
      if (MGMT_OP_LOGGER.isDebugEnabled()) {
        long elapsed=System.currentTimeMillis() - start;
        MGMT_OP_LOGGER.debugf("Ran subsystem runtime operations in [%d] ms",elapsed);
      }
      context.completeStep(new OperationContext.ResultHandler(){
        @Override public void handleResult(        OperationContext.ResultAction resultAction,        OperationContext context,        ModelNode operation){
          notifySubsystemTransactions(transactionControls,resultAction == OperationContext.ResultAction.ROLLBACK,committedLatch,OperationContext.Stage.MODEL);
          try {
            completeLatch.await();
          }
 catch (          InterruptedException e) {
            Thread.currentThread().interrupt();
          }
        }
      }
);
    }
  }
;
}
