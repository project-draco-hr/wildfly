{
  if (context.getType() != OperationContext.Type.SERVER) {
    throw MESSAGES.fullServerBootRequired(getClass());
  }
  long start=System.currentTimeMillis();
  context.getResourceRegistrationForUpdate();
  final Resource rootResource=context.readResourceForUpdate(PathAddress.EMPTY_ADDRESS);
  context.acquireControllerLock();
  final Map<String,List<ParsedBootOp>> runtimeOpsBySubsystem=new LinkedHashMap<String,List<ParsedBootOp>>();
  final Map<String,ParallelBootTransactionControl> transactionControls=new LinkedHashMap<String,ParallelBootTransactionControl>();
  final CountDownLatch preparedLatch=new CountDownLatch(opsBySubsystem.size());
  final CountDownLatch committedLatch=new CountDownLatch(1);
  final CountDownLatch completeLatch=new CountDownLatch(opsBySubsystem.size());
  final Thread controllingThread=Thread.currentThread();
  for (  Map.Entry<String,List<ParsedBootOp>> entry : opsBySubsystem.entrySet()) {
    String subsystemName=entry.getKey();
    List<ParsedBootOp> subsystemRuntimeOps=new ArrayList<ParsedBootOp>();
    runtimeOpsBySubsystem.put(subsystemName,subsystemRuntimeOps);
    final ParallelBootTransactionControl txControl=new ParallelBootTransactionControl(subsystemName,preparedLatch,committedLatch,completeLatch);
    transactionControls.put(entry.getKey(),txControl);
    ParallelBootTask subsystemTask=new ParallelBootTask(subsystemName,entry.getValue(),context,txControl,subsystemRuntimeOps,controllingThread);
    executor.execute(subsystemTask);
  }
  try {
    preparedLatch.await();
    checkForSubsystemFailures(context,transactionControls,OperationContext.Stage.MODEL);
    List<ParsedBootOp> loggingOps=runtimeOpsBySubsystem.remove("logging");
    if (loggingOps != null) {
      for (      ParsedBootOp loggingOp : loggingOps) {
        context.addStep(loggingOp.response,loggingOp.operation,loggingOp.handler,OperationContext.Stage.RUNTIME);
      }
    }
    final Map<String,Resource> subsystemResources=new LinkedHashMap<String,Resource>();
    for (    String subsystemName : opsBySubsystem.keySet()) {
      final Resource resource=rootResource.removeChild(PathElement.pathElement(ModelDescriptionConstants.SUBSYSTEM,subsystemName));
      if (resource != null) {
        subsystemResources.put(subsystemName,resource);
      }
    }
    for (    Map.Entry<String,Resource> entry : subsystemResources.entrySet()) {
      rootResource.registerChild(PathElement.pathElement(ModelDescriptionConstants.SUBSYSTEM,entry.getKey()),entry.getValue());
    }
    context.addStep(getRuntimeStep(runtimeOpsBySubsystem),OperationContext.Stage.RUNTIME);
  }
 catch (  InterruptedException e) {
    context.getFailureDescription().set(new ModelNode().set(MESSAGES.subsystemBootInterrupted()));
    Thread.currentThread().interrupt();
  }
  if (ROOT_LOGGER.isDebugEnabled()) {
    long elapsed=System.currentTimeMillis() - start;
    ROOT_LOGGER.debugf("Ran subsystem model operations in [%d] ms",elapsed);
  }
  OperationContext.ResultAction resultAction=context.completeStep();
  notifySubsystemTransactions(transactionControls,resultAction,committedLatch,OperationContext.Stage.RUNTIME);
  try {
    completeLatch.await();
  }
 catch (  InterruptedException e) {
    Thread.currentThread().interrupt();
  }
}
