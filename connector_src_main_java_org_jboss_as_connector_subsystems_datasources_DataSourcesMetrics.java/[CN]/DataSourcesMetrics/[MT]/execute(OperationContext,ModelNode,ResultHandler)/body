{
  if (context.getRuntimeContext() != null) {
    context.getRuntimeContext().setRuntimeTask(new RuntimeTask(){
      public void execute(      RuntimeTaskContext context) throws OperationFailedException {
        final PathAddress address=PathAddress.pathAddress(operation.require(OP_ADDR));
        final String jndiName=address.getLastElement().getValue();
        final String attributeName=operation.require(NAME).asString();
        final ServiceController<?> managementRepoService=context.getServiceRegistry().getService(ConnectorServices.MANAGEMENT_REPOSISTORY_SERVICE);
        if (managementRepoService != null) {
          try {
            final ManagementRepository repository=(ManagementRepository)managementRepoService.getValue();
            final ModelNode result=new ModelNode();
            if (repository.getDataSources() != null) {
              for (              DataSource ds : repository.getDataSources()) {
                if (jndiName.equalsIgnoreCase(ds.getJndiName())) {
                  if (MAX_POOL_SIZE.equals(attributeName)) {
                    result.set("" + ds.getPoolConfiguration().getMaxSize());
                  }
                  if (MIN_POOL_SIZE.equals(attributeName)) {
                    result.set("" + ds.getPoolConfiguration().getMinSize());
                  }
                  if (BLOCKING_TIMEOUT.equals(attributeName)) {
                    result.set("" + ds.getPoolConfiguration().getBlockingTimeout());
                  }
                  if (IDLE_TIMEOUT_MINUTES.equals(attributeName)) {
                    result.set("" + ds.getPoolConfiguration().getIdleTimeout());
                  }
                  if (BACKGROUND_VALIDATION.equals(attributeName)) {
                    result.set("" + ds.getPoolConfiguration().isBackgroundValidation());
                  }
                  if (BACKGROUND_VALIDATION_MINUTES.equals(attributeName)) {
                    result.set("" + ds.getPoolConfiguration().getBackgroundValidationMinutes());
                  }
                  if (POOL_PREFILL.equals(attributeName)) {
                    result.set("" + ds.getPoolConfiguration().isPrefill());
                  }
                  if (POOL_USE_STRICT_MIN.equals(attributeName)) {
                    result.set("" + ds.getPoolConfiguration().isStrictMin());
                  }
                  if (USE_FAST_FAIL.equals(attributeName)) {
                    result.set("" + ds.getPoolConfiguration().isUseFastFail());
                  }
                }
              }
            }
            resultHandler.handleResultFragment(new String[0],result);
            resultHandler.handleResultComplete();
          }
 catch (          Exception e) {
            throw new OperationFailedException(new ModelNode().set("failed to get metrics" + e.getMessage()));
          }
        }
      }
    }
);
  }
 else {
    resultHandler.handleResultFragment(NO_LOCATION,new ModelNode().set("no metrics available"));
    resultHandler.handleResultComplete();
  }
  return new BasicOperationResult();
}
