{
  final ModelNode result=context.getResult();
  final String name=operation.require(NAME).asString();
  if (equals(name,BASE_DIR)) {
    set(result,environment.getServerBaseDir());
  }
  if (equals(name,CONFIG_DIR)) {
    set(result,environment.getServerConfigurationDir());
  }
  if (equals(name,CONFIG_FILE)) {
    set(result,environment.getServerConfigurationFile());
  }
  if (equals(name,DATA_DIR)) {
    set(result,environment.getServerDataDir());
  }
  if (equals(name,CONTENT_DIR)) {
    set(result,environment.getServerContentDir());
  }
  if (equals(name,DEPLOY_DIR)) {
    set(result,environment.getServerContentDir());
  }
  if (equals(name,EXT_DIRS)) {
    set(result,environment.getJavaExtDirs());
  }
  if (equals(name,HOME_DIR)) {
    set(result,environment.getHomeDir());
  }
  if (equals(name,HOST_NAME)) {
    set(result,environment.getHostName());
  }
  if (equals(name,LAUNCH_TYPE)) {
    set(result,environment.getLaunchType().name());
  }
  if (equals(name,INITIAL_RUNNING_MODE)) {
    set(result,environment.getInitialRunningMode().name());
  }
  if (equals(name,LOG_DIR)) {
    set(result,environment.getServerLogDir());
  }
  if (equals(name,MODULES_DIR)) {
    @SuppressWarnings("deprecation") File modules=environment.getModulesDir();
    set(result,modules);
  }
  if (equals(name,NODE_NAME)) {
    set(result,environment.getNodeName());
  }
  if (equals(name,QUALIFIED_HOST_NAME)) {
    set(result,environment.getQualifiedHostName());
  }
  if (equals(name,SERVER_NAME)) {
    set(result,environment.getServerName());
  }
  if (equals(name,TEMP_DIR)) {
    set(result,environment.getServerTempDir());
  }
  context.stepCompleted();
}
