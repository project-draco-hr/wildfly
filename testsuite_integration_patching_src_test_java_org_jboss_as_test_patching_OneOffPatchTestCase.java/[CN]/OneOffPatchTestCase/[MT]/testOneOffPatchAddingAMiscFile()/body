{
  controller.start(CONTAINER);
  File tempDir=mkdir(new File(System.getProperty("java.io.tmpdir")),randomString());
  String patchID=randomString();
  File oneOffPatchDir=mkdir(tempDir,patchID);
  ContentModification miscFileAdded=ContentModificationUtils.addMisc(oneOffPatchDir,patchID,"content","awesomeDirectory","awesomeFile");
  ProductConfig productConfig=new ProductConfig(PRODUCT,AS_VERSION,"consoleSlot");
  Patch oneOffPatch=PatchBuilder.create().setPatchId(patchID).setDescription("A one-off patch used for testing purposes.").oneOffPatchIdentity(productConfig.getProductName(),productConfig.getProductVersion()).getParent().addContentModification(miscFileAdded).build();
  PatchingTestUtil.createPatchXMLFile(oneOffPatchDir,oneOffPatch);
  File zippedPatch=PatchingTestUtil.createZippedPatchFile(oneOffPatchDir,patchID);
  System.out.println("ZIPFILE: " + zippedPatch.getAbsolutePath());
  CliUtilsForPatching.applyPatch(zippedPatch.getAbsolutePath());
  controller.stop(CONTAINER);
  controller.start(CONTAINER);
  String path=PatchingTestUtil.AS_DISTRIBUTION + "/awesomeDirectory/awesomeFile";
  Assert.assertTrue(path,new File(path).exists());
  controller.stop(CONTAINER);
  controller.start(CONTAINER);
  CliUtilsForPatching.rollbackPatch(patchID);
  controller.stop(CONTAINER);
  controller.start(CONTAINER);
  Assert.assertFalse(new File(path).exists());
  controller.stop(CONTAINER);
}
