{
  File tempDir=mkdir(new File(System.getProperty("java.io.tmpdir")),randomString());
  String patchID=randomString();
  String layerPatchID=randomString();
  File oneOffPatchDir=mkdir(tempDir,patchID);
  ContentModification moduleAdded=ContentModificationUtils.addModule(oneOffPatchDir,layerPatchID,"org.wildfly.awesomemodule","content1","content2");
  ProductConfig productConfig=new ProductConfig(PRODUCT,AS_VERSION,"main");
  Patch oneOffPatch=PatchBuilder.create().setPatchId(patchID).setDescription("A one-off patch adding a new module.").oneOffPatchIdentity(productConfig.getProductName(),productConfig.getProductVersion()).getParent().oneOffPatchElement(layerPatchID,"base",false).setDescription("New module for the base layer").addContentModification(moduleAdded).getParent().build();
  PatchingTestUtil.createPatchXMLFile(oneOffPatchDir,oneOffPatch);
  File zippedPatch=PatchingTestUtil.createZippedPatchFile(oneOffPatchDir,patchID);
  controller.start(CONTAINER);
  CliUtilsForPatching.applyPatch(zippedPatch.getAbsolutePath());
  controller.stop(CONTAINER);
  controller.start(CONTAINER);
  CliUtilsForPatching.rollbackPatch(patchID);
  controller.stop(CONTAINER);
  controller.start(CONTAINER);
  CliUtilsForPatching.applyPatch(zippedPatch.getAbsolutePath());
  controller.stop(CONTAINER);
  controller.start(CONTAINER);
  Assert.assertTrue("The patch " + patchID + " should be listed as installed",CliUtilsForPatching.getInstalledPatches().contains(patchID));
  CliUtilsForPatching.rollbackPatch(patchID);
  controller.stop(CONTAINER);
}
