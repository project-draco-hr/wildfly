{
  MDC.put("process","process manager");
  String javaHome=System.getProperty("java.home",".");
  String jvmName=javaHome + "/bin/java";
  String jbossHome=System.getProperty("jboss.home.dir",".");
  String modulePath=System.getProperty("jboss.module.path","modules");
  String bootJar="jboss-modules.jar";
  String logModule="org.jboss.logmanager";
  String bootModule=SERVER_MANAGER_MODULE;
  String bindAddress="127.0.0.1";
  int bindPort=0;
  final List<String> javaOptions=new ArrayList<String>();
  final List<String> smOptions=new ArrayList<String>();
  OUT:   for (int i=0; i < args.length; i++) {
    String arg=args[i];
    if ("-jvm".equals(arg)) {
      jvmName=args[++i];
    }
 else     if ("-jboss-home".equals(arg)) {
      jbossHome=args[++i];
    }
 else     if ("-mp".equals(arg)) {
      modulePath=args[++i];
    }
 else     if ("-jar".equals(arg)) {
      bootJar=args[++i];
    }
 else     if ("-logmodule".equals(arg)) {
      logModule=args[++i];
    }
 else     if ("-bind-addr".equals(arg)) {
      bindAddress=args[++i];
    }
 else     if ("-bind-port".equals(arg)) {
      bindPort=Integer.parseInt(args[++i]);
    }
 else     if ("--".equals(arg)) {
      for (i++; i < args.length; i++) {
        arg=args[i];
        if ("--".equals(arg)) {
          for (i++; i < args.length; i++) {
            arg=args[i];
            smOptions.add(arg);
          }
          break OUT;
        }
 else {
          javaOptions.add(arg);
        }
      }
      break OUT;
    }
 else {
      throw new IllegalArgumentException("Bad option: " + arg);
    }
  }
  Handler consoleHandler=null;
  final Logger rootLogger=Logger.getLogger("");
  for (  Handler handler : rootLogger.getHandlers()) {
    if (handler instanceof ConsoleHandler) {
      if (consoleHandler != null) {
        rootLogger.removeHandler(handler);
      }
 else {
        consoleHandler=handler;
        ((ConsoleHandler)consoleHandler).setWriter(new SynchronizedWriter(System.out));
      }
    }
  }
  final ProtocolServer.Configuration configuration=new ProtocolServer.Configuration();
  if (bindAddress != null) {
    configuration.setBindAddress(new InetSocketAddress(bindAddress,bindPort));
  }
 else {
    configuration.setBindAddress(new InetSocketAddress(bindPort));
  }
  configuration.setBindAddress(new InetSocketAddress(InetAddress.getLocalHost(),0));
  configuration.setSocketFactory(ServerSocketFactory.getDefault());
  configuration.setThreadFactory(Executors.defaultThreadFactory());
  configuration.setReadExecutor(Executors.newCachedThreadPool());
  final ProcessManager processManager=new ProcessManager(configuration,System.out,System.err);
  final InetSocketAddress boundAddress=processManager.getServer().getBoundAddress();
  final List<String> initialCommand=new ArrayList<String>();
  initialCommand.add(jvmName);
  initialCommand.add("-D" + "jboss.home.dir=" + jbossHome);
  initialCommand.addAll(javaOptions);
  initialCommand.add("-jar");
  initialCommand.add(bootJar);
  initialCommand.add("-mp");
  initialCommand.add(modulePath);
  initialCommand.add("-logmodule");
  initialCommand.add(logModule);
  initialCommand.add(bootModule);
  initialCommand.add(CommandLineConstants.INTERPROCESS_PM_ADDRESS);
  initialCommand.add(boundAddress.getHostName());
  initialCommand.add(CommandLineConstants.INTERPROCESS_PM_PORT);
  initialCommand.add(Integer.toString(boundAddress.getPort()));
  initialCommand.addAll(smOptions);
  processManager.addProcess("Server Manager",initialCommand,Collections.<String,String>emptyMap(),jbossHome,true);
  processManager.startProcess("Server Manager");
  final Thread shutdownThread=new Thread(new Runnable(){
    public void run(){
      processManager.shutdown();
    }
  }
,"Shutdown thread");
  shutdownThread.setDaemon(false);
  Runtime.getRuntime().addShutdownHook(shutdownThread);
}
