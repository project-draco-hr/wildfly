{
  final ModelNode address=operation.require(OP_ADDR);
  final String dsName=PathAddress.pathAddress(address).getLastElement().getValue();
  final String jndiName=operation.hasDefined(JNDINAME.getName()) ? operation.get(JNDINAME.getName()).asString() : dsName;
  final ServiceTarget serviceTarget=context.getServiceTarget();
  boolean enabled=false;
  ModelNode node=operation.require(DATASOURCE_DRIVER.getName());
  AbstractDataSourceService dataSourceService=createDataSourceService(dsName);
  final ServiceName dataSourceServiceName=AbstractDataSourceService.SERVICE_NAME_BASE.append(dsName);
  final ServiceBuilder<?> dataSourceServiceBuilder=serviceTarget.addService(dataSourceServiceName,dataSourceService).addDependency(ConnectorServices.TRANSACTION_INTEGRATION_SERVICE,TransactionIntegration.class,dataSourceService.getTransactionIntegrationInjector()).addDependency(ConnectorServices.MANAGEMENT_REPOSISTORY_SERVICE,ManagementRepository.class,dataSourceService.getmanagementRepositoryInjector()).addDependency(SubjectFactoryService.SERVICE_NAME,SubjectFactory.class,dataSourceService.getSubjectFactoryInjector()).addDependency(ConnectorServices.JDBC_DRIVER_REGISTRY_SERVICE,DriverRegistry.class,dataSourceService.getDriverRegistryInjector()).addDependency(NamingService.SERVICE_NAME);
  startConfigAndAddDependency(dataSourceServiceBuilder,dataSourceService,dsName,serviceTarget,operation,verificationHandler);
  final String driverName=node.asString();
  final ServiceName driverServiceName=ServiceName.JBOSS.append("jdbc-driver",driverName.replaceAll("\\.","_"));
  if (driverServiceName != null) {
    dataSourceServiceBuilder.addDependency(driverServiceName,Driver.class,dataSourceService.getDriverInjector());
  }
  dataSourceServiceBuilder.setInitialMode(ServiceController.Mode.NEVER);
  controllers.add(dataSourceServiceBuilder.install());
}
