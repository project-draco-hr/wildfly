{
  final ModelNode address=operation.require(OP_ADDR);
  final String dsName=PathAddress.pathAddress(address).getLastElement().getValue();
  final String jndiName=operation.hasDefined(JNDINAME.getName()) ? operation.get(JNDINAME.getName()).asString() : dsName;
  final ServiceTarget serviceTarget=context.getServiceTarget();
  boolean enabled=false;
  ModelNode node=operation.require(DATASOURCE_DRIVER.getName());
  AbstractDataSourceService dataSourceService=createDataSourceService(dsName);
  final ManagementResourceRegistration registration=context.getResourceRegistrationForUpdate();
  final ServiceName dataSourceServiceName=AbstractDataSourceService.SERVICE_NAME_BASE.append(jndiName);
  final ServiceBuilder<?> dataSourceServiceBuilder=serviceTarget.addService(dataSourceServiceName,dataSourceService).addDependency(ConnectorServices.TRANSACTION_INTEGRATION_SERVICE,TransactionIntegration.class,dataSourceService.getTransactionIntegrationInjector()).addDependency(ConnectorServices.MANAGEMENT_REPOSISTORY_SERVICE,ManagementRepository.class,dataSourceService.getmanagementRepositoryInjector()).addDependency(SubjectFactoryService.SERVICE_NAME,SubjectFactory.class,dataSourceService.getSubjectFactoryInjector()).addDependency(ConnectorServices.JDBC_DRIVER_REGISTRY_SERVICE,DriverRegistry.class,dataSourceService.getDriverRegistryInjector()).addDependency(NamingService.SERVICE_NAME);
  dataSourceServiceBuilder.addListener(new AbstractServiceListener<Object>(){
    public void transition(    final ServiceController<? extends Object> controller,    final ServiceController.Transition transition){
switch (transition) {
case STARTING_to_UP:
{
          CommonDeployment deploymentMD=((AbstractDataSourceService)controller.getService()).getDeploymentMD();
          StatisticsPlugin jdbcStats=deploymentMD.getDataSources()[0].getStatistics();
          if (jdbcStats.getNames().size() != 0) {
            ManagementResourceRegistration subRegistration=registration.registerSubModel(PathElement.pathElement("statistics","jdbc"),new StatisticsDescrptionProvider(jdbcStats));
            for (            String statName : jdbcStats.getNames()) {
              subRegistration.registerMetric(statName,new PoolMetrics.ParametrizedPoolMetricsHandler(jdbcStats));
            }
            subRegistration.registerOperationHandler("clear-metrics",new ClearMetricsHandler(jdbcStats),DataSourcesSubsystemProviders.CLEAR_METRICS_DESC,false);
          }
          StatisticsPlugin poolStats=deploymentMD.getDataSources()[0].getPool().getStatistics();
          if (poolStats.getNames().size() != 0) {
            ManagementResourceRegistration subRegistration=registration.registerSubModel(PathElement.pathElement("statistics","pool"),new StatisticsDescrptionProvider(poolStats));
            for (            String statName : poolStats.getNames()) {
              subRegistration.registerMetric(statName,new PoolMetrics.ParametrizedPoolMetricsHandler(poolStats));
            }
            subRegistration.registerOperationHandler("clear-metrics",new ClearMetricsHandler(poolStats),DataSourcesSubsystemProviders.CLEAR_METRICS_DESC,false);
          }
          break;
        }
case UP_to_STOP_REQUESTED:
{
        CommonDeployment deploymentMD=((AbstractDataSourceService)controller.getService()).getDeploymentMD();
        StatisticsPlugin jdbcStats=deploymentMD.getDataSources()[0].getStatistics();
        if (jdbcStats.getNames().size() != 0) {
          registration.unregisterSubModel(PathElement.pathElement("statistics","jdbc"));
        }
        StatisticsPlugin poolStats=deploymentMD.getDataSources()[0].getPool().getStatistics();
        if (poolStats.getNames().size() != 0) {
          registration.unregisterSubModel(PathElement.pathElement("statistics","pool"));
        }
        break;
      }
  }
}
}
);
startConfigAndAddDependency(dataSourceServiceBuilder,dataSourceService,dsName,serviceTarget,operation,verificationHandler);
final String driverName=node.asString();
final ServiceName driverServiceName=ServiceName.JBOSS.append("jdbc-driver",driverName.replaceAll("\\.","_"));
if (driverServiceName != null) {
dataSourceServiceBuilder.addDependency(driverServiceName,Driver.class,dataSourceService.getDriverInjector());
}
dataSourceServiceBuilder.setInitialMode(ServiceController.Mode.NEVER);
controllers.add(dataSourceServiceBuilder.install());
}
