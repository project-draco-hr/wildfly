{
  final ModelNode subModel=context.getSubModel();
  populateModel(operation,subModel);
  final ModelNode address=operation.require(OP_ADDR);
  final ModelNode compensating=Util.getResourceRemoveOperation(address);
  if (context.getRuntimeContext() != null) {
    context.getRuntimeContext().setRuntimeTask(new RuntimeTask(){
      public void execute(      RuntimeTaskContext context) throws OperationFailedException {
        final ServiceTarget serviceTarget=context.getServiceTarget();
        boolean enabled=!operation.hasDefined(ENABLED) || operation.get(ENABLED).asBoolean();
        final String rawJndiName=operation.require(JNDINAME).asString();
        final String jndiName;
        if (!rawJndiName.startsWith("java:/") && operation.hasDefined(USE_JAVA_CONTEXT) && operation.get(USE_JAVA_CONTEXT).asBoolean()) {
          jndiName="java:/" + rawJndiName;
        }
 else {
          jndiName=rawJndiName;
        }
        final AbstractDataSourceService dataSourceService=createDataSourceService(jndiName,operation);
        final ServiceName dataSourceServiceName=AbstractDataSourceService.SERVICE_NAME_BASE.append(jndiName);
        final ServiceBuilder<?> dataSourceServiceBuilder=serviceTarget.addService(dataSourceServiceName,dataSourceService).addDependency(TxnServices.JBOSS_TXN_ARJUNA_TRANSACTION_MANAGER,com.arjuna.ats.jbossatx.jta.TransactionManagerService.class,dataSourceService.getTransactionManagerInjector()).addDependency(NamingService.SERVICE_NAME);
        final String driverName=operation.require(MODULE).asString();
        final ServiceName driverServiceName=getDriverDependency(driverName);
        if (driverServiceName != null) {
          dataSourceServiceBuilder.addDependency(driverServiceName,Driver.class,dataSourceService.getDriverInjector());
        }
        if (enabled) {
          dataSourceServiceBuilder.setInitialMode(ServiceController.Mode.ACTIVE);
        }
 else {
          dataSourceServiceBuilder.setInitialMode(ServiceController.Mode.NEVER);
        }
        dataSourceServiceBuilder.install();
        final BinderService binderService=new BinderService(jndiName.substring(6));
        final ServiceName binderServiceName=ContextNames.JAVA_CONTEXT_SERVICE_NAME.append(jndiName);
        final ServiceBuilder<?> binderServiceBuilder=serviceTarget.addService(binderServiceName,binderService).addDependency(dataSourceServiceName,ManagedReferenceFactory.class,binderService.getManagedObjectInjector()).addDependency(ContextNames.JAVA_CONTEXT_SERVICE_NAME,NamingStore.class,binderService.getNamingStoreInjector());
        if (enabled) {
          binderServiceBuilder.setInitialMode(ServiceController.Mode.ACTIVE);
          binderServiceBuilder.addListener(new ResultHandler.ServiceStartListener(resultHandler){
            public void serviceStarted(            ServiceController<?> controller){
              log.infof("Bound JDBC Data-source [%s]",jndiName);
              super.serviceStarted(controller);
            }
          }
);
        }
 else {
          binderServiceBuilder.setInitialMode(ServiceController.Mode.NEVER);
        }
        binderServiceBuilder.install();
        if (!enabled) {
          resultHandler.handleResultComplete();
        }
      }
    }
);
  }
 else {
    resultHandler.handleResultComplete();
  }
  return new BasicOperationResult(compensating);
}
