{
  final ModelNode subModel=context.getSubModel();
  populateModel(operation,subModel);
  final ModelNode address=operation.require(OP_ADDR);
  final ModelNode compensating=Util.getResourceRemoveOperation(address);
  final String rawJndiName=operation.require(JNDINAME).asString();
  final String jndiName;
  if (!rawJndiName.startsWith("java:/") && operation.hasDefined(USE_JAVA_CONTEXT) && operation.get(USE_JAVA_CONTEXT).asBoolean()) {
    jndiName="java:/" + rawJndiName;
  }
 else {
    jndiName=rawJndiName;
  }
  if (context.getRuntimeContext() != null) {
    context.getRuntimeContext().setRuntimeTask(new RuntimeTask(){
      @Override public void execute(      RuntimeTaskContext context) throws OperationFailedException {
        final ServiceTarget serviceTarget=context.getServiceTarget();
        boolean enabled=!operation.hasDefined(ENABLED) || operation.get(ENABLED).asBoolean();
        AbstractDataSourceService dataSourceService=createDataSourceService(jndiName);
        final ServiceName dataSourceServiceName=AbstractDataSourceService.SERVICE_NAME_BASE.append(jndiName);
        final ServiceBuilder<?> dataSourceServiceBuilder=serviceTarget.addService(dataSourceServiceName,dataSourceService).addDependency(ConnectorServices.TRANSACTION_INTEGRATION_SERVICE,TransactionIntegration.class,dataSourceService.getTransactionIntegrationInjector()).addDependency(ConnectorServices.MANAGEMENT_REPOSISTORY_SERVICE,ManagementRepository.class,dataSourceService.getmanagementRepositoryInjector()).addDependency(SubjectFactoryService.SERVICE_NAME,SubjectFactory.class,dataSourceService.getSubjectFactoryInjector()).addDependency(ConnectorServices.JDBC_DRIVER_REGISTRY_SERVICE,DriverRegistry.class,dataSourceService.getDriverRegistryInjector()).addDependency(NamingService.SERVICE_NAME);
        startConfigAndAddDependency(dataSourceServiceBuilder,dataSourceService,jndiName,serviceTarget,operation);
        ModelNode node=operation.require(DATASOURCE_DRIVER);
        final String driverName=node.asString();
        final ServiceName driverServiceName=ServiceName.JBOSS.append("jdbc-driver",driverName.replaceAll("\\.","_"));
        if (driverServiceName != null) {
          dataSourceServiceBuilder.addDependency(driverServiceName,Driver.class,dataSourceService.getDriverInjector());
        }
        final DataSourceReferenceFactoryService referenceFactoryService=new DataSourceReferenceFactoryService();
        final ServiceName referenceFactoryServiceName=DataSourceReferenceFactoryService.SERVICE_NAME_BASE.append(jndiName);
        final ServiceBuilder<?> referenceBuilder=serviceTarget.addService(referenceFactoryServiceName,referenceFactoryService).addDependency(dataSourceServiceName,DataSource.class,referenceFactoryService.getDataSourceInjector());
        String bindName=jndiName;
        if (jndiName.startsWith("java:/")) {
          bindName=jndiName.substring(6);
        }
        final BinderService binderService=new BinderService(bindName);
        final ServiceName binderServiceName=ContextNames.JAVA_CONTEXT_SERVICE_NAME.append(jndiName);
        final ServiceBuilder<?> binderBuilder=serviceTarget.addService(binderServiceName,binderService).addDependency(referenceFactoryServiceName,ManagedReferenceFactory.class,binderService.getManagedObjectInjector()).addDependency(ContextNames.JAVA_CONTEXT_SERVICE_NAME,NamingStore.class,binderService.getNamingStoreInjector()).addListener(new AbstractServiceListener<Object>(){
          public void transition(          final ServiceController<? extends Object> controller,          final ServiceController.Transition transition){
switch (transition) {
case STARTING_to_UP:
{
                log.infof("Bound data source [%s]",jndiName);
                break;
              }
case START_REQUESTED_to_DOWN:
{
              log.infof("Unbound data source [%s]",jndiName);
              break;
            }
case REMOVING_to_REMOVED:
{
            log.debugf("Removed JDBC Data-source [%s]",jndiName);
            break;
          }
      }
    }
  }
);
  if (enabled) {
    dataSourceServiceBuilder.setInitialMode(ServiceController.Mode.ACTIVE).install();
    referenceBuilder.setInitialMode(ServiceController.Mode.ACTIVE).install();
    binderBuilder.setInitialMode(ServiceController.Mode.ACTIVE).install();
  }
 else {
    dataSourceServiceBuilder.setInitialMode(ServiceController.Mode.NEVER).install();
    referenceBuilder.setInitialMode(ServiceController.Mode.NEVER).install();
    binderBuilder.setInitialMode(ServiceController.Mode.NEVER).install();
  }
  resultHandler.handleResultComplete();
}
}
);
}
 else {
resultHandler.handleResultComplete();
}
return new BasicOperationResult(compensating);
}
