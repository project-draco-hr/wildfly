{
  final ModelNode address=operation.require(OP_ADDR);
  final String dsName=PathAddress.pathAddress(address).getLastElement().getValue();
  final String jndiName=JNDI_NAME.resolveModelAttribute(context,model).asString();
  final boolean jta=JTA.resolveModelAttribute(context,operation).asBoolean();
  @SuppressWarnings("unused") final boolean statsEnabled=STATISTICS_ENABLED.resolveModelAttribute(context,model).asBoolean();
  final ServiceTarget serviceTarget=context.getServiceTarget();
  ModelNode node=DATASOURCE_DRIVER.resolveModelAttribute(context,model);
  final String driverName=node.asString();
  final ServiceName driverServiceName=ServiceName.JBOSS.append("jdbc-driver",driverName.replaceAll("\\.","_"));
  ValueInjectionService<Driver> driverDemanderService=new ValueInjectionService<Driver>();
  final ServiceName driverDemanderServiceName=ServiceName.JBOSS.append("driver-demander").append(jndiName);
  final ServiceBuilder<?> driverDemanderBuilder=serviceTarget.addService(driverDemanderServiceName,driverDemanderService).addDependency(driverServiceName,Driver.class,driverDemanderService.getInjector());
  driverDemanderBuilder.setInitialMode(ServiceController.Mode.ACTIVE);
  AbstractDataSourceService dataSourceService=createDataSourceService(dsName,jndiName);
  final ManagementResourceRegistration registration=context.getResourceRegistrationForUpdate();
  final ServiceName dataSourceServiceName=AbstractDataSourceService.SERVICE_NAME_BASE.append(jndiName);
  final ServiceBuilder<?> dataSourceServiceBuilder=Services.addServerExecutorDependency(serviceTarget.addService(dataSourceServiceName,dataSourceService),dataSourceService.getExecutorServiceInjector(),false).addDependency(ConnectorServices.MANAGEMENT_REPOSITORY_SERVICE,ManagementRepository.class,dataSourceService.getManagementRepositoryInjector()).addDependency(SubjectFactoryService.SERVICE_NAME,SubjectFactory.class,dataSourceService.getSubjectFactoryInjector()).addDependency(ConnectorServices.JDBC_DRIVER_REGISTRY_SERVICE,DriverRegistry.class,dataSourceService.getDriverRegistryInjector()).addDependency(ConnectorServices.IDLE_REMOVER_SERVICE).addDependency(ConnectorServices.CONNECTION_VALIDATOR_SERVICE).addDependency(ConnectorServices.IRONJACAMAR_MDR,MetadataRepository.class,dataSourceService.getMdrInjector()).addDependency(ConnectorServices.RA_REPOSITORY_SERVICE,ResourceAdapterRepository.class,dataSourceService.getRaRepositoryInjector()).addDependency(ConnectorServices.BOOTSTRAP_CONTEXT_SERVICE.append(DEFAULT_NAME)).addDependency(NamingService.SERVICE_NAME);
  if (jta) {
    dataSourceServiceBuilder.addDependency(ConnectorServices.TRANSACTION_INTEGRATION_SERVICE,TransactionIntegration.class,dataSourceService.getTransactionIntegrationInjector()).addDependency(ConnectorServices.CCM_SERVICE,CachedConnectionManager.class,dataSourceService.getCcmInjector());
  }
  if (registration.isAllowsOverride()) {
    registration.registerOverrideModel(dsName,DataSourcesSubsystemProviders.OVERRIDE_DS_DESC);
  }
  startConfigAndAddDependency(dataSourceServiceBuilder,dataSourceService,dsName,serviceTarget,operation);
  dataSourceServiceBuilder.addDependency(driverServiceName,Driver.class,dataSourceService.getDriverInjector());
  dataSourceServiceBuilder.setInitialMode(ServiceController.Mode.NEVER);
  dataSourceServiceBuilder.install();
  driverDemanderBuilder.install();
}
