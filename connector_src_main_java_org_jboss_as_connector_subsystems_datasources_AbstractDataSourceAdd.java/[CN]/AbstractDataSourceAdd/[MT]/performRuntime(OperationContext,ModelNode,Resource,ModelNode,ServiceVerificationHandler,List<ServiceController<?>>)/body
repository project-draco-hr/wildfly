{
  final ModelNode address=operation.require(OP_ADDR);
  final String dsName=PathAddress.pathAddress(address).getLastElement().getValue();
  final String jndiName=model.get(JNDI_NAME.getName()).asString();
  boolean jta=JTA.resolveModelAttribute(context,operation).asBoolean();
  final ServiceTarget serviceTarget=context.getServiceTarget();
  boolean enabled=false;
  ModelNode node=DATASOURCE_DRIVER.resolveModelAttribute(context,model);
  final String driverName=node.asString();
  final ServiceName driverServiceName=ServiceName.JBOSS.append("jdbc-driver",driverName.replaceAll("\\.","_"));
  ValueInjectionService driverDemanderService=new ValueInjectionService<Driver>();
  final ServiceName driverDemanderServiceName=ServiceName.JBOSS.append("driver-demander").append(jndiName);
  final ServiceBuilder<?> driverDemanderBuilder=serviceTarget.addService(driverDemanderServiceName,driverDemanderService).addDependency(driverServiceName,Driver.class,driverDemanderService.getInjector());
  driverDemanderBuilder.addListener(verificationHandler);
  driverDemanderBuilder.setInitialMode(ServiceController.Mode.ACTIVE);
  AbstractDataSourceService dataSourceService=createDataSourceService(dsName);
  final ManagementResourceRegistration registration=context.getResourceRegistrationForUpdate();
  final ServiceName dataSourceServiceName=AbstractDataSourceService.SERVICE_NAME_BASE.append(jndiName);
  final ServiceBuilder<?> dataSourceServiceBuilder=serviceTarget.addService(dataSourceServiceName,dataSourceService).addDependency(ConnectorServices.MANAGEMENT_REPOSITORY_SERVICE,ManagementRepository.class,dataSourceService.getManagementRepositoryInjector()).addDependency(SubjectFactoryService.SERVICE_NAME,SubjectFactory.class,dataSourceService.getSubjectFactoryInjector()).addDependency(ConnectorServices.JDBC_DRIVER_REGISTRY_SERVICE,DriverRegistry.class,dataSourceService.getDriverRegistryInjector()).addDependency(ConnectorServices.IDLE_REMOVER_SERVICE).addDependency(ConnectorServices.CONNECTION_VALIDATOR_SERVICE).addDependency(NamingService.SERVICE_NAME);
  if (jta) {
    dataSourceServiceBuilder.addDependency(ConnectorServices.TRANSACTION_INTEGRATION_SERVICE,TransactionIntegration.class,dataSourceService.getTransactionIntegrationInjector()).addDependency(ConnectorServices.CCM_SERVICE,CachedConnectionManager.class,dataSourceService.getCcmInjector());
  }
  dataSourceServiceBuilder.addListener(new DataSourceStatisticsListener(registration,resource,dsName));
  dataSourceServiceBuilder.addListener(verificationHandler);
  startConfigAndAddDependency(dataSourceServiceBuilder,dataSourceService,dsName,serviceTarget,operation,verificationHandler);
  dataSourceServiceBuilder.addDependency(driverServiceName,Driver.class,dataSourceService.getDriverInjector());
  dataSourceServiceBuilder.setInitialMode(ServiceController.Mode.NEVER);
  controllers.add(dataSourceServiceBuilder.install());
  controllers.add(driverDemanderBuilder.install());
}
