{
  final PathAddress address=PathAddress.pathAddress(SUBSYSTEM,RemotingExtension.SUBSYSTEM_NAME);
  final ModelNode subsystem=Util.createAddOperation(address);
  list.add(subsystem);
  requireAttributes(reader);
  boolean foundEndpoint=false;
  boolean doneWorkerThreadPool=false;
  while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
    final Element element=Element.forName(reader.getLocalName());
switch (element) {
case WORKER_THREAD_POOL:
      if (doneWorkerThreadPool) {
        throw ParseUtils.duplicateNamedElement(reader,Element.WORKER_THREAD_POOL.getLocalName());
      }
    if (foundEndpoint) {
      throw workerThreadPoolEndpointChoiceRequired(reader);
    }
  doneWorkerThreadPool=true;
parseWorkerThreadPool(reader,subsystem);
break;
case ENDPOINT:
if (doneWorkerThreadPool) {
throw workerThreadPoolEndpointChoiceRequired(reader);
}
ENDPOINT_PARSER.parse(reader,PathAddress.pathAddress(address),list);
foundEndpoint=true;
break;
case CONNECTOR:
{
parseConnector(reader,address.toModelNode(),list);
break;
}
case HTTP_CONNECTOR:
{
parseHttpConnector(reader,address.toModelNode(),list);
break;
}
case OUTBOUND_CONNECTIONS:
{
this.parseOutboundConnections(reader,address.toModelNode(),list);
break;
}
default :
{
throw unexpectedElement(reader);
}
}
}
}
