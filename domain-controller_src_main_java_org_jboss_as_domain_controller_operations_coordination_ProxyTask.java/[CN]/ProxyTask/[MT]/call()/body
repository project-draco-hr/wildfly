{
  System.out.println("Sending " + operation + " to "+ host);
  OperationMessageHandler messageHandler=new DelegatingMessageHandler(context);
  final AtomicReference<NewModelController.OperationTransaction> txRef=new AtomicReference<NewModelController.OperationTransaction>();
  final AtomicReference<ModelNode> preparedResultRef=new AtomicReference<ModelNode>();
  final AtomicReference<ModelNode> finalResultRef=new AtomicReference<ModelNode>();
  final NewProxyController.ProxyOperationControl proxyControl=new NewProxyController.ProxyOperationControl(){
    @Override public void operationPrepared(    NewModelController.OperationTransaction transaction,    ModelNode result){
      txRef.set(transaction);
      preparedResultRef.set(result);
    }
    @Override public void operationFailed(    ModelNode response){
      finalResultRef.set(response);
    }
    @Override public void operationCompleted(    ModelNode response){
      finalResultRef.set(response);
    }
  }
;
  proxyController.execute(operation,messageHandler,proxyControl,new DelegatingOperationAttachments(context));
  NewModelController.OperationTransaction remoteTransaction=null;
  ModelNode result=finalResultRef.get();
  if (result != null) {
    System.out.println("Received final result " + result + " from "+ host);
  }
 else {
    result=preparedResultRef.get();
    System.out.println("Received prepared result " + result + " from "+ host);
    remoteTransaction=txRef.get();
  }
synchronized (uncommittedResultRef) {
    uncommittedResultRef.set(result);
    uncommittedResultRef.notifyAll();
  }
  if (remoteTransaction != null) {
    if (cancelRemoteTransaction) {
      remoteTransaction.rollback();
    }
 else {
synchronized (transactionAction) {
        while (transactionAction.get() == null) {
          try {
            transactionAction.wait();
          }
 catch (          InterruptedException ie) {
            transactionAction.set(Boolean.FALSE);
          }
        }
        if (transactionAction.get().booleanValue()) {
          remoteTransaction.commit();
        }
 else {
          remoteTransaction.rollback();
        }
      }
    }
  }
  return finalResultRef.get();
}
