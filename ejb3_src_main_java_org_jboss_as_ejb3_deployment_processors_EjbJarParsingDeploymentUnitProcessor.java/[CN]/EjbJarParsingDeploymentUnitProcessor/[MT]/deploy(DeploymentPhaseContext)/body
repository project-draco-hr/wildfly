{
  DeploymentUnit deploymentUnit=deploymentPhase.getDeploymentUnit();
  VirtualFile deploymentRoot=deploymentUnit.getAttachment(Attachments.DEPLOYMENT_ROOT).getRoot();
  VirtualFile ejbJarXml=null;
  if (deploymentRoot.getName().toLowerCase().endsWith(WAR_FILE_EXTENSION)) {
    ejbJarXml=deploymentRoot.getChild(EJB_JAR_XML_LOCATION_IN_WAR);
  }
 else   if (deploymentRoot.getName().toLowerCase().endsWith(JAR_FILE_EXTENSION)) {
    ejbJarXml=deploymentRoot.getChild(EJB_JAR_XML_LOCATION_IN_JAR);
  }
 else {
    return;
  }
  if (ejbJarXml == null || !ejbJarXml.exists()) {
    return;
  }
  EjbDeploymentMarker.mark(deploymentUnit);
  MetaDataElementParser.DTDInfo dtdInfo=new MetaDataElementParser.DTDInfo();
  InputStream stream=null;
  try {
    stream=ejbJarXml.openStream();
    XMLStreamReader reader=this.getXMLStreamReader(stream,ejbJarXml,dtdInfo);
    EjbJarMetaData ejbJarMetaData=EjbJarMetaDataParser.parse(reader,dtdInfo);
    EnterpriseBeansMetaData ejbs=ejbJarMetaData.getEnterpriseBeans();
    if (ejbs == null || ejbs.isEmpty()) {
      return;
    }
    for (    EnterpriseBeanMetaData ejb : ejbs) {
      if (!ejb.isSession()) {
        logger.info("Only sessions beans currently supported! Skipping EJB description processing for bean: " + ejb.getName() + " in deployment unit: "+ deploymentUnit);
        return;
      }
      SessionBeanMetaData sessionBean=(SessionBeanMetaData)ejb;
      this.processSessionBean(sessionBean,deploymentUnit);
    }
  }
 catch (  XMLStreamException xmlse) {
    throw new DeploymentUnitProcessingException("Exception while parsing ejb-jar.xml: " + ejbJarXml.getPathName(),xmlse);
  }
catch (  IOException ioe) {
    throw new DeploymentUnitProcessingException("Failed to create reader for ejb-jar.xml: " + ejbJarXml.getPathName(),ioe);
  }
 finally {
    try {
      if (stream != null) {
        stream.close();
      }
    }
 catch (    IOException ioe) {
      logger.debug("Ignoring exception while closing the InputStream ",ioe);
    }
  }
}
