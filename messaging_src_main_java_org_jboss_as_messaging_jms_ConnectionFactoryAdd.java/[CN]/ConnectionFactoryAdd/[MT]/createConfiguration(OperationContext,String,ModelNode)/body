{
  final ConnectionFactoryConfiguration config=new ConnectionFactoryConfigurationImpl(name,HornetQClient.DEFAULT_HA,JndiEntriesAttribute.getJndiBindings(operation));
  config.setHA(HA.resolveModelAttribute(context,operation).asBoolean());
  config.setAutoGroup(AUTO_GROUP.resolveModelAttribute(context,operation).asBoolean());
  config.setBlockOnAcknowledge(BLOCK_ON_ACK.resolveModelAttribute(context,operation).asBoolean());
  config.setBlockOnDurableSend(BLOCK_ON_DURABLE_SEND.resolveModelAttribute(context,operation).asBoolean());
  config.setBlockOnNonDurableSend(BLOCK_ON_NON_DURABLE_SEND.resolveModelAttribute(context,operation).asBoolean());
  config.setCacheLargeMessagesClient(CACHE_LARGE_MESSAGE_CLIENT.resolveModelAttribute(context,operation).asBoolean());
  config.setCallTimeout(CALL_TIMEOUT.resolveModelAttribute(context,operation).asLong());
  config.setClientFailureCheckPeriod(CLIENT_FAILURE_CHECK_PERIOD.resolveModelAttribute(context,operation).asInt());
  final ModelNode clientId=CLIENT_ID.resolveModelAttribute(context,operation);
  if (clientId.isDefined()) {
    config.setClientID(clientId.asString());
  }
  config.setCompressLargeMessages(COMPRESS_LARGE_MESSAGES.resolveModelAttribute(context,operation).asBoolean());
  config.setConfirmationWindowSize(CONFIRMATION_WINDOW_SIZE.resolveModelAttribute(context,operation).asInt());
  config.setConnectionTTL(CONNECTION_TTL.resolveModelAttribute(context,operation).asLong());
  if (operation.hasDefined(CONNECTOR)) {
    ModelNode connectorRefs=operation.get(CONNECTOR);
    List<String> connectorNames=new ArrayList<String>();
    for (    String connectorName : operation.get(CONNECTOR).keys()) {
      ModelNode connectorRef=connectorRefs.get(connectorName);
      connectorNames.add(connectorName);
    }
    config.setConnectorNames(connectorNames);
  }
  config.setConsumerMaxRate(CONSUMER_MAX_RATE.resolveModelAttribute(context,operation).asInt());
  config.setConsumerWindowSize(CONSUMER_WINDOW_SIZE.resolveModelAttribute(context,operation).asInt());
  final ModelNode discoveryGroupName=DISCOVERY_GROUP_NAME.resolveModelAttribute(context,operation);
  if (discoveryGroupName.isDefined()) {
    config.setDiscoveryGroupName(discoveryGroupName.asString());
  }
  config.setDupsOKBatchSize(DUPS_OK_BATCH_SIZE.resolveModelAttribute(context,operation).asInt());
  config.setFailoverOnInitialConnection(FAILOVER_ON_INITIAL_CONNECTION.resolveModelAttribute(context,operation).asBoolean());
  final ModelNode groupId=GROUP_ID.resolveModelAttribute(context,operation);
  if (groupId.isDefined()) {
    config.setGroupID(groupId.asString());
  }
  final ModelNode lbcn=LOAD_BALANCING_CLASS_NAME.resolveModelAttribute(context,operation);
  if (lbcn.isDefined()) {
    config.setLoadBalancingPolicyClassName(lbcn.asString());
  }
  config.setMaxRetryInterval(MAX_RETRY_INTERVAL.resolveModelAttribute(context,operation).asLong());
  config.setMinLargeMessageSize(MIN_LARGE_MESSAGE_SIZE.resolveModelAttribute(context,operation).asInt());
  config.setPreAcknowledge(PRE_ACK.resolveModelAttribute(context,operation).asBoolean());
  config.setProducerMaxRate(PRODUCER_MAX_RATE.resolveModelAttribute(context,operation).asInt());
  config.setProducerWindowSize(PRODUCER_WINDOW_SIZE.resolveModelAttribute(context,operation).asInt());
  config.setReconnectAttempts(CONNECTION_FACTORY_RECONNECT_ATTEMPTS.resolveModelAttribute(context,operation).asInt());
  config.setRetryInterval(RETRY_INTERVAL.resolveModelAttribute(context,operation).asLong());
  config.setRetryIntervalMultiplier(RETRY_INTERVAL_MULTIPLIER.resolveModelAttribute(context,operation).asDouble());
  config.setScheduledThreadPoolMaxSize(CONNECTION_SCHEDULED_THREAD_POOL_MAX_SIZE.resolveModelAttribute(context,operation).asInt());
  config.setThreadPoolMaxSize(CONNECTION_THREAD_POOL_MAX_SIZE.resolveModelAttribute(context,operation).asInt());
  config.setTransactionBatchSize(TRANSACTION_BATCH_SIZE.resolveModelAttribute(context,operation).asInt());
  config.setUseGlobalPools(USE_GLOBAL_POOLS.resolveModelAttribute(context,operation).asBoolean());
  config.setLoadBalancingPolicyClassName(LOAD_BALANCING_CLASS_NAME.resolveModelAttribute(context,operation).asString());
  return config;
}
