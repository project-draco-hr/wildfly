{
  boolean stdout=false;
  Boolean oneOff=null;
  String patchID=UUID.randomUUID().toString();
  String appliesToVersion=null;
  final int argsLength=args.length;
  for (int i=0; i < argsLength; i++) {
    final String arg=args[i];
    try {
      if ("--help".equals(arg) || "-h".equals(arg) || "-H".equals(arg)) {
        usage();
        return null;
      }
 else       if (arg.equals("--one-off")) {
        if (oneOff == null) {
          oneOff=Boolean.TRUE;
          patchID=args[++i];
        }
 else {
          usage();
          return null;
        }
      }
 else       if (arg.equals("--cumulative")) {
        if (oneOff == null) {
          oneOff=Boolean.FALSE;
          patchID=args[++i];
        }
 else {
          usage();
          return null;
        }
      }
 else       if (arg.equals("--applies-to-version")) {
        appliesToVersion=args[++i];
      }
 else       if (arg.equals("--std.out")) {
        stdout=true;
      }
 else       if (arg.equals("--create-template")) {
        continue;
      }
 else {
        System.err.println(PatchMessages.MESSAGES.argumentExpected(arg));
        usage();
        return null;
      }
    }
 catch (    IndexOutOfBoundsException e) {
      System.err.println(PatchMessages.MESSAGES.argumentExpected(arg));
      usage();
      return null;
    }
  }
  if (oneOff == null) {
    usage();
    return null;
  }
  final StringBuilder builder=new StringBuilder();
  builder.append("<?xml version='1.0' encoding='UTF-8'?>").append(LF);
  builder.append("<patch-config xmlns=\"urn:jboss:patch-config:1.0\">").append(LF);
  builder.append(TAB).append("<name>").append(patchID).append("</name>").append(LF);
  builder.append(TAB).append("<description>No description available</description>").append(LF);
  builder.append(TAB);
  if (oneOff) {
    builder.append("<one-off ");
  }
 else {
    builder.append("<cumulative ");
  }
  if (appliesToVersion != null) {
    builder.append("applies-to-version=\"").append(appliesToVersion).append("\"");
  }
  builder.append(" />").append(LF);
  builder.append(TAB).append("<element patch-id=\"").append("layer-base-").append(patchID).append("\">").append(LF);
  builder.append(TAB).append(TAB);
  if (oneOff) {
    builder.append("<one-off ");
  }
 else {
    builder.append("<cumulative ");
  }
  builder.append("name=\"base\" />").append(LF);
  builder.append(TAB).append(TAB).append("<description>No description available</description>").append(LF);
  if (oneOff) {
    builder.append(TAB).append(TAB).append("<specified-content>").append(LF);
    builder.append(TAB).append(TAB).append(TAB).append("<modules>").append(LF);
    builder.append(TAB).append(TAB).append(TAB).append(TAB).append("<updated name=\"org.jboss.as.server\" />").append(LF);
    builder.append(TAB).append(TAB).append(TAB).append("</modules>").append(LF);
    builder.append(TAB).append(TAB).append("</specified-content>").append(LF);
  }
  builder.append(TAB).append("</element>").append(LF);
  if (oneOff) {
    builder.append(TAB).append("<specified-content>").append(LF);
    builder.append(TAB).append(TAB).append("<misc-files>").append(LF);
    builder.append(TAB).append(TAB).append(TAB).append("<updated path=\"version.txt\" />").append(LF);
    builder.append(TAB).append(TAB).append("</misc-files>").append(LF);
    builder.append(TAB).append("</specified-content>").append(LF);
  }
 else {
    builder.append(TAB).append("<generate-by-diff />").append(LF);
  }
  builder.append("</patch-config>").append(LF);
  final String output=builder.toString();
  if (stdout) {
    System.out.println(output);
  }
 else {
    final File file=new File("patch-config-" + patchID + ".xml");
    final Writer writer=new FileWriter(file);
    try {
      writer.write(output);
      writer.close();
    }
  finally {
      IoUtils.safeClose(writer);
    }
  }
  return output;
}
