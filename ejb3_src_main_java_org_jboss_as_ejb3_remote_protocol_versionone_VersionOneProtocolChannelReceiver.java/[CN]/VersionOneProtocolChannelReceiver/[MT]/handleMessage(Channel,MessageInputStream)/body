{
  try {
    final int header=messageInputStream.read();
    if (logger.isTraceEnabled()) {
      logger.trace("Got message with header 0x" + Integer.toHexString(header) + " on channel "+ channel);
    }
    MessageHandler messageHandler=null;
switch (header) {
case HEADER_INVOCATION_REQUEST:
      messageHandler=new MethodInvocationMessageHandler(this.deploymentRepository,this.marshallingStrategy,this.executorService);
    messageHandler.processMessage(channel,messageInputStream);
  break;
case HEADER_SESSION_OPEN_REQUEST:
messageHandler=new SessionOpenRequestHandler(this.deploymentRepository,this.marshallingStrategy);
messageHandler.processMessage(channel,messageInputStream);
break;
default :
logger.warn("Received unsupported message header 0x" + Integer.toHexString(header) + " on channel "+ channel);
}
}
 catch (IOException e) {
logger.errorf(e,"Exception on channel %s from message %s",channel,messageInputStream);
try {
channel.writeShutdown();
}
 catch (IOException e1) {
}
}
 finally {
channel.receiveMessage(this);
IoUtils.safeClose(messageInputStream);
}
}
