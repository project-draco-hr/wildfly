{
  try {
    final int header=messageInputStream.read();
    if (logger.isTraceEnabled()) {
      logger.trace("Got message with header 0x" + Integer.toHexString(header) + " on channel "+ channel);
    }
    MessageHandler messageHandler=null;
switch (header) {
case HEADER_INVOCATION_REQUEST:
      messageHandler=new MethodInvocationMessageHandler(this.deploymentRepository,this.marshallerFactory,this.executorService,this.remoteAsyncInvocationCancelStatus);
    break;
case HEADER_INVOCATION_CANCELLATION_REQUEST:
  messageHandler=new InvocationCancellationMessageHandler(this.remoteAsyncInvocationCancelStatus);
break;
case HEADER_SESSION_OPEN_REQUEST:
messageHandler=new SessionOpenRequestHandler(this.deploymentRepository,this.marshallerFactory,this.executorService);
break;
case HEADER_TX_COMMIT_REQUEST:
messageHandler=new TransactionRequestHandler(this.transactionsRepository,this.marshallerFactory,this.executorService,TransactionRequestHandler.TransactionRequestType.COMMIT);
break;
case HEADER_TX_ROLLBACK_REQUEST:
messageHandler=new TransactionRequestHandler(this.transactionsRepository,this.marshallerFactory,this.executorService,TransactionRequestHandler.TransactionRequestType.ROLLBACK);
break;
case HEADER_TX_FORGET_REQUEST:
messageHandler=new TransactionRequestHandler(this.transactionsRepository,this.marshallerFactory,this.executorService,TransactionRequestHandler.TransactionRequestType.FORGET);
break;
case HEADER_TX_PREPARE_REQUEST:
messageHandler=new TransactionRequestHandler(this.transactionsRepository,this.marshallerFactory,this.executorService,TransactionRequestHandler.TransactionRequestType.PREPARE);
break;
case HEADER_TX_BEFORE_COMPLETION_REQUEST:
messageHandler=new TransactionRequestHandler(this.transactionsRepository,this.marshallerFactory,this.executorService,TransactionRequestHandler.TransactionRequestType.BEFORE_COMPLETION);
break;
default :
logger.warn("Received unsupported message header 0x" + Integer.toHexString(header) + " on channel "+ channel);
return;
}
messageHandler.processMessage(channelAssociation,messageInputStream);
channel.receiveMessage(this);
}
 catch (IOException e) {
logger.errorf(e,"Exception on channel %s from message %s",channel,messageInputStream);
IoUtils.safeClose(channel);
}
 finally {
IoUtils.safeClose(messageInputStream);
}
}
