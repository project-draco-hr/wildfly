{
  if (Element.forName(reader.getLocalName()) != Element.SUBSYSTEM) {
    throw unexpectedElement(reader);
  }
  final ModelNode address=new ModelNode();
  address.add(SUBSYSTEM,SUBSYSTEM_NAME);
  address.protect();
  final ModelNode subsystem=new ModelNode();
  subsystem.get(OP).set(ADD);
  subsystem.get(OP_ADDR).set(address);
  list.add(subsystem);
  String readerNS=reader.getNamespaceURI();
  Namespace threadsNamespace=Namespace.forUri(readerNS);
  while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
    Element element=nextElement(reader,readerNS);
switch (element) {
case BOUNDED_QUEUE_THREAD_POOL:
{
        parseBoundedQueueThreadPool(reader,readerNS,threadsNamespace,address,list,BOUNDED_QUEUE_THREAD_POOL,null);
        break;
      }
case THREAD_FACTORY:
{
      parseThreadFactory(reader,readerNS,threadsNamespace,address,list,THREAD_FACTORY,null);
      break;
    }
case QUEUELESS_THREAD_POOL:
{
    parseQueuelessThreadPool(reader,readerNS,threadsNamespace,address,list,QUEUELESS_THREAD_POOL,null);
    break;
  }
case SCHEDULED_THREAD_POOL:
{
  parseScheduledThreadPool(reader,readerNS,threadsNamespace,address,list,SCHEDULED_THREAD_POOL,null);
  break;
}
case UNBOUNDED_QUEUE_THREAD_POOL:
{
parseUnboundedQueueThreadPool(reader,readerNS,address,list,UNBOUNDED_QUEUE_THREAD_POOL,null,threadsNamespace);
break;
}
default :
{
throw unexpectedElement(reader);
}
}
}
}
