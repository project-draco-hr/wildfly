{
  final ModelNode op=new ModelNode();
  list.add(op);
  op.get(OP).set(ADD);
  String name=null;
  int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    requireNoNamespaceAttribute(reader,i);
    final String value=reader.getAttributeValue(i);
    final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case NAME:
{
        name=value;
        break;
      }
case GROUP_NAME:
{
      PoolAttributeDefinitions.GROUP_NAME.parseAndSetParameter(value,op,reader);
      break;
    }
case THREAD_NAME_PATTERN:
{
    PoolAttributeDefinitions.THREAD_NAME_PATTERN.parseAndSetParameter(value,op,reader);
    break;
  }
case PRIORITY:
{
  PoolAttributeDefinitions.PRIORITY.parseAndSetParameter(value,op,reader);
  break;
}
default :
throw unexpectedAttribute(reader,i);
}
}
if (providedName != null) {
name=providedName;
}
 else if (name == null) {
throw missingRequired(reader,Collections.singleton(Attribute.NAME));
}
final ModelNode address=parentAddress.clone();
address.add(childType,name);
address.protect();
op.get(OP_ADDR).set(address);
while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
Element element=nextElement(reader,expectedNs);
switch (element) {
case PROPERTIES:
{
parseProperties(reader,threadsNamespace);
break;
}
default :
{
throw unexpectedElement(reader);
}
}
}
return name;
}
