{
  final List<? super AbstractThreadsSubsystemUpdate<?>> updates=new ArrayList<AbstractThreadsSubsystemUpdate<?>>();
  requireNoAttributes(reader);
  final Set<String> threadFactoryNames=new HashSet<String>();
  final Set<String> executorNames=new HashSet<String>();
  final Set<String> scheduledExecutorNames=new HashSet<String>();
  while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
switch (Namespace.forUri(reader.getNamespaceURI())) {
case THREADS_1_0:
{
        final Element element=Element.forName(reader.getLocalName());
switch (element) {
case THREAD_FACTORY:
{
            parseThreadFactoryElement(reader,updates,threadFactoryNames);
            break;
          }
case SCHEDULED_THREAD_POOL:
{
          parseScheduledExecutorElement(reader,updates,scheduledExecutorNames);
          break;
        }
case BOUNDED_QUEUE_THREAD_POOL:
{
        parseBoundedQueueExecutorElement(reader,updates,executorNames);
        break;
      }
case QUEUELESS_THREAD_POOL:
{
      parseQueuelessExecutorElement(reader,updates,executorNames);
      break;
    }
case UNBOUNDED_QUEUE_THREAD_POOL:
{
    parseUnboundedQueueExecutorElement(reader,updates,executorNames);
    break;
  }
default :
throw unexpectedElement(reader);
}
break;
}
default :
throw unexpectedElement(reader);
}
}
}
