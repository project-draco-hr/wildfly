{
  String name=null;
  String groupName=null;
  String threadNamePattern=null;
  Integer priority=null;
  final EnumSet<Attribute> required=EnumSet.of(Attribute.NAME);
  final int cnt=reader.getAttributeCount();
  for (int i=0; i < cnt; i++) {
    if (reader.getAttributeNamespace(i) != null) {
      throw unexpectedAttribute(reader,i);
    }
    final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
    required.remove(attribute);
switch (attribute) {
case NAME:
{
        name=reader.getAttributeValue(i);
        break;
      }
case GROUP_NAME:
{
      groupName=reader.getAttributeValue(i);
      break;
    }
case THREAD_NAME_PATTERN:
{
    threadNamePattern=reader.getAttributeValue(i);
    break;
  }
case PRIORITY:
{
  final int val=reader.getIntAttributeValue(i);
  if (val < Thread.MIN_PRIORITY || val > Thread.MAX_PRIORITY) {
    throw invalidAttributeValue(reader,i);
  }
  priority=Integer.valueOf(val);
  break;
}
default :
{
throw unexpectedAttribute(reader,i);
}
}
}
if (!required.isEmpty()) {
throw missingRequired(reader,required);
}
if (!names.add(name)) {
throw duplicateNamedElement(reader,name);
}
final ThreadFactoryAdd add=new ThreadFactoryAdd(name);
if (groupName != null) add.setGroupName(groupName);
if (threadNamePattern != null) add.setThreadNamePattern(threadNamePattern);
if (priority != null) add.setPriority(priority);
final Map<String,String> map=add.getProperties();
if (reader.nextTag() != END_ELEMENT) {
reader.require(START_ELEMENT,Namespace.CURRENT.getUriString(),Element.PROPERTIES.getLocalName());
while (reader.nextTag() != END_ELEMENT) {
reader.require(START_ELEMENT,Namespace.CURRENT.getUriString(),Element.PROPERTY.getLocalName());
readProperty(reader).addTo(map);
}
}
updates.add(add);
}
