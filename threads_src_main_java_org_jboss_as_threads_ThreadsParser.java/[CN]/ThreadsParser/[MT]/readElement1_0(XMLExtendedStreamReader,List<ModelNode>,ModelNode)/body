{
  Namespace threadsNamespace=Namespace.THREADS_1_0;
  String readerNS=threadsNamespace.getUriString();
  while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
    Element element=nextElement(reader,readerNS);
switch (element) {
case BOUNDED_QUEUE_THREAD_POOL:
{
        parseUnknownBoundedQueueThreadPool1_0(reader,readerNS,subsystemAddress,list);
        break;
      }
case THREAD_FACTORY:
{
      parseThreadFactory(reader,readerNS,threadsNamespace,subsystemAddress,list,THREAD_FACTORY,null);
      break;
    }
case QUEUELESS_THREAD_POOL:
{
    parseUnknownQueuelessThreadPool1_0(reader,readerNS,subsystemAddress,list);
    break;
  }
case SCHEDULED_THREAD_POOL:
{
  parseScheduledThreadPool(reader,readerNS,threadsNamespace,subsystemAddress,list,SCHEDULED_THREAD_POOL,null);
  break;
}
case UNBOUNDED_QUEUE_THREAD_POOL:
{
parseUnboundedQueueThreadPool(reader,readerNS,threadsNamespace,subsystemAddress,list,UNBOUNDED_QUEUE_THREAD_POOL,null);
break;
}
default :
{
throw unexpectedElement(reader);
}
}
}
}
