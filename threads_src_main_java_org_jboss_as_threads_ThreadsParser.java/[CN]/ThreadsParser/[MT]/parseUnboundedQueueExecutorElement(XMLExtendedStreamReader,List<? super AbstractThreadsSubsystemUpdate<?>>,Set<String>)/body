{
  String name=null;
  final EnumSet<Attribute> required=EnumSet.of(Attribute.NAME);
  final int cnt=reader.getAttributeCount();
  for (int i=0; i < cnt; i++) {
    if (reader.getAttributeNamespace(i) != null) {
      throw unexpectedAttribute(reader,i);
    }
    final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
    required.remove(attribute);
switch (attribute) {
case NAME:
{
        name=reader.getAttributeValue(i);
        break;
      }
default :
{
      throw unexpectedAttribute(reader,i);
    }
}
}
if (!required.isEmpty()) {
throw missingRequired(reader,required);
}
if (!names.add(name)) {
throw duplicateNamedElement(reader,name);
}
ScaledCount maxThreads=null;
TimeSpec keepaliveTime=null;
String threadFactory=null;
final EnumSet<Element> requiredElem=EnumSet.of(Element.MAX_THREADS);
final EnumSet<Element> encountered=EnumSet.noneOf(Element.class);
while (reader.nextTag() != END_ELEMENT) {
switch (Namespace.forUri(reader.getNamespaceURI())) {
case UNKNOWN:
{
    throw unexpectedElement(reader);
  }
}
final Element element=Element.forName(reader.getLocalName());
if (!encountered.add(element)) {
throw unexpectedElement(reader);
}
switch (element) {
case MAX_THREADS:
{
  maxThreads=readScaledCountElement(reader);
  break;
}
case KEEPALIVE_TIME:
{
keepaliveTime=readTimeSpecElement(reader);
break;
}
case THREAD_FACTORY:
{
threadFactory=readStringAttributeElement(reader,Attribute.NAME.getLocalName());
break;
}
case PROPERTIES:
{
while (reader.nextTag() != END_ELEMENT) {
while (reader.nextTag() != END_ELEMENT) {
}
}
break;
}
default :
{
throw unexpectedElement(reader);
}
}
}
if (!requiredElem.isEmpty()) {
throw missingRequired(reader,required);
}
final UnboundedQueueThreadPoolAdd add=new UnboundedQueueThreadPoolAdd(name,maxThreads);
add.setKeepaliveTime(keepaliveTime);
add.setThreadFactory(threadFactory);
updates.add(add);
}
