{
  final ModelNode op=new ModelNode();
  list.add(op);
  op.get(OP).set(ADD);
  String name=null;
  int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    requireNoNamespaceAttribute(reader,i);
    final String value=reader.getAttributeValue(i);
    final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case NAME:
{
        name=value;
        break;
      }
case BLOCKING:
{
      break;
    }
case ALLOW_CORE_TIMEOUT:
{
    PoolAttributeDefinitions.ALLOW_CORE_TIMEOUT.parseAndSetParameter(value,op,reader);
    break;
  }
default :
throw unexpectedAttribute(reader,i);
}
}
if (providedName != null) {
name=providedName;
}
 else if (name == null) {
throw missingRequired(reader,Collections.singleton(Attribute.NAME));
}
final ModelNode address=parentAddress.clone();
address.add(childType,name);
address.protect();
op.get(OP_ADDR).set(address);
Set<Element> required=EnumSet.of(Element.MAX_THREADS,Element.QUEUE_LENGTH);
while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
Element element=nextElement(reader,expectedNs);
required.remove(element);
switch (element) {
case CORE_THREADS:
{
String scaledCount=parseCount(reader,threadsNamespace);
PoolAttributeDefinitions.CORE_THREADS.parseAndSetParameter(scaledCount,op,reader);
break;
}
case HANDOFF_EXECUTOR:
{
String ref=readStringAttributeElement(reader,Attribute.NAME.getLocalName());
if (!blocking) {
PoolAttributeDefinitions.HANDOFF_EXECUTOR.parseAndSetParameter(ref,op,reader);
}
break;
}
case MAX_THREADS:
{
String scaledCount=parseCount(reader,threadsNamespace);
PoolAttributeDefinitions.MAX_THREADS.parseAndSetParameter(scaledCount,op,reader);
break;
}
case KEEPALIVE_TIME:
{
PoolAttributeDefinitions.KEEPALIVE_TIME.parseAndSetParameter(op,reader);
break;
}
case THREAD_FACTORY:
{
String ref=readStringAttributeElement(reader,Attribute.NAME.getLocalName());
PoolAttributeDefinitions.THREAD_FACTORY.parseAndSetParameter(ref,op,reader);
break;
}
case PROPERTIES:
{
parseProperties(reader,threadsNamespace);
break;
}
case QUEUE_LENGTH:
{
String scaledCount=parseCount(reader,threadsNamespace);
PoolAttributeDefinitions.QUEUE_LENGTH.parseAndSetParameter(scaledCount,op,reader);
break;
}
default :
{
throw unexpectedElement(reader);
}
}
}
if (!required.isEmpty()) {
throw missingRequiredElement(reader,required);
}
return name;
}
