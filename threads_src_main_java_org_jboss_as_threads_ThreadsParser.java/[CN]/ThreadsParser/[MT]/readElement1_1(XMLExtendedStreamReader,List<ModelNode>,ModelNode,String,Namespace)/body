{
  while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
    Element element=nextElement(reader,readerNS);
switch (element) {
case BLOCKING_BOUNDED_QUEUE_THREAD_POOL:
{
        parseBoundedQueueThreadPool1_1(reader,readerNS,threadsNamespace,subsystemAddress,list,BLOCKING_BOUNDED_QUEUE_THREAD_POOL,null,true);
        break;
      }
case BLOCKING_QUEUELESS_THREAD_POOL:
{
      parseQueuelessThreadPool1_1(reader,readerNS,threadsNamespace,subsystemAddress,list,BLOCKING_QUEUELESS_THREAD_POOL,null,true);
      break;
    }
case BOUNDED_QUEUE_THREAD_POOL:
{
    parseBoundedQueueThreadPool1_1(reader,readerNS,threadsNamespace,subsystemAddress,list,BOUNDED_QUEUE_THREAD_POOL,null,false);
    break;
  }
case THREAD_FACTORY:
{
  parseThreadFactory(reader,readerNS,threadsNamespace,subsystemAddress,list,THREAD_FACTORY,null);
  break;
}
case QUEUELESS_THREAD_POOL:
{
parseQueuelessThreadPool1_1(reader,readerNS,threadsNamespace,subsystemAddress,list,QUEUELESS_THREAD_POOL,null,false);
break;
}
case SCHEDULED_THREAD_POOL:
{
parseScheduledThreadPool(reader,readerNS,threadsNamespace,subsystemAddress,list,SCHEDULED_THREAD_POOL,null);
break;
}
case UNBOUNDED_QUEUE_THREAD_POOL:
{
parseUnboundedQueueThreadPool(reader,readerNS,threadsNamespace,subsystemAddress,list,UNBOUNDED_QUEUE_THREAD_POOL,null);
break;
}
default :
{
throw unexpectedElement(reader);
}
}
}
}
