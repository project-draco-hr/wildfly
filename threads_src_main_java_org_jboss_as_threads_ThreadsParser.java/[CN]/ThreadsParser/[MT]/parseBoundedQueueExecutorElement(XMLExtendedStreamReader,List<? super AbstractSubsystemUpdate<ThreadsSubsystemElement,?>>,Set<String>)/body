{
  String name=null;
  boolean allowCoreTimeout=false;
  boolean blocking=false;
  final int count=reader.getAttributeCount();
  final EnumSet<Attribute> required=EnumSet.of(Attribute.NAME);
  for (int i=0; i < count; i++) {
    if (reader.getAttributeNamespace(i) != null) {
      throw unexpectedAttribute(reader,i);
    }
    final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
    required.remove(attribute);
switch (attribute) {
case NAME:
{
        name=reader.getAttributeValue(i);
        break;
      }
case ALLOW_CORE_TIMEOUT:
{
      allowCoreTimeout=Boolean.parseBoolean(reader.getAttributeValue(i));
      break;
    }
case BLOCKING:
{
    blocking=Boolean.parseBoolean(reader.getAttributeValue(i));
    break;
  }
default :
{
  throw unexpectedAttribute(reader,i);
}
}
}
if (!required.isEmpty()) {
throw missingRequired(reader,required);
}
if (!names.add(name)) {
throw duplicateNamedElement(reader,name);
}
}
