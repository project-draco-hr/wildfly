{
  final ModelNode op=new ModelNode();
  list.add(op);
  op.get(OP).set(ADD);
  String name=null;
  int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    requireNoNamespaceAttribute(reader,i);
    final Location location=reader.getLocation();
    final String value=reader.getAttributeValue(i);
    final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case NAME:
{
        name=value;
        break;
      }
case GROUP_NAME:
{
      PoolAttributeDefinitions.GROUP_NAME.parseAndSetParameter(value,op,location);
      break;
    }
case THREAD_NAME_PATTERN:
{
    PoolAttributeDefinitions.THREAD_NAME_PATTERN.parseAndSetParameter(value,op,location);
    break;
  }
case PRIORITY:
{
  PoolAttributeDefinitions.PRIORITY.parseAndSetParameter(value,op,location);
  break;
}
default :
throw unexpectedAttribute(reader,i);
}
}
if (providedName != null) {
name=providedName;
}
 else if (name == null) {
throw missingRequired(reader,Collections.singleton(Attribute.NAME));
}
final ModelNode address=parentAddress.clone();
address.add(childAddress,name);
address.protect();
op.get(OP_ADDR).set(address);
while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
switch (Element.forName(reader.getLocalName())) {
case PROPERTIES:
{
ModelNode props=parseProperties(reader);
if (props.isDefined()) {
op.get(PROPERTIES).set(props);
}
break;
}
default :
{
throw unexpectedElement(reader);
}
}
}
return name;
}
