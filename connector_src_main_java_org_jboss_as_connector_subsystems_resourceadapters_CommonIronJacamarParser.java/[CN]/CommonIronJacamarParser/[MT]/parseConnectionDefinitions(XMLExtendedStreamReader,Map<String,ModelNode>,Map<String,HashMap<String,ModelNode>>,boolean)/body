{
  final ModelNode connectionDefinitionNode=new ModelNode();
  connectionDefinitionNode.get(OP).set(ADD);
  String poolName=null;
  String jndiName=null;
  int attributeSize=reader.getAttributeCount();
  boolean poolDefined=Boolean.FALSE;
  for (int i=0; i < attributeSize; i++) {
    CommonConnDef.Attribute attribute=CommonConnDef.Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case ENABLED:
{
        String value=rawAttributeText(reader,ENABLED.getXmlName());
        if (value != null) {
          ENABLED.parseAndSetParameter(value,connectionDefinitionNode,reader);
        }
        break;
      }
case JNDI_NAME:
{
      jndiName=rawAttributeText(reader,JNDINAME.getXmlName());
      if (jndiName != null) {
        JNDINAME.parseAndSetParameter(jndiName,connectionDefinitionNode,reader);
      }
      break;
    }
case POOL_NAME:
{
    poolName=rawAttributeText(reader,POOL_NAME_NAME);
    break;
  }
case USE_JAVA_CONTEXT:
{
  String value=rawAttributeText(reader,USE_JAVA_CONTEXT.getXmlName());
  if (value != null) {
    USE_JAVA_CONTEXT.parseAndSetParameter(value,connectionDefinitionNode,reader);
  }
  break;
}
case USE_CCM:
{
String value=rawAttributeText(reader,USE_CCM.getXmlName());
if (value != null) {
  USE_CCM.parseAndSetParameter(value,connectionDefinitionNode,reader);
}
break;
}
case CLASS_NAME:
{
String value=rawAttributeText(reader,CLASS_NAME.getXmlName());
if (value != null) {
CLASS_NAME.parseAndSetParameter(value,connectionDefinitionNode,reader);
}
break;
}
default :
break;
}
}
if (poolName == null || poolName.trim().equals("")) {
if (jndiName != null && jndiName.trim().length() != 0) {
if (jndiName.contains("/")) {
poolName=jndiName.substring(jndiName.lastIndexOf("/") + 1);
}
 else {
poolName=jndiName.substring(jndiName.lastIndexOf(":") + 1);
}
}
 else {
throw new ParserException(bundle.missingValue(JNDINAME.getXmlName()));
}
}
while (reader.hasNext()) {
switch (reader.nextTag()) {
case END_ELEMENT:
{
if (ResourceAdapter.Tag.forName(reader.getLocalName()) == ResourceAdapter.Tag.CONNECTION_DEFINITION) {
map.put(poolName,connectionDefinitionNode);
return;
}
 else {
if (CommonConnDef.Tag.forName(reader.getLocalName()) == CommonConnDef.Tag.UNKNOWN) {
throw new ParserException(bundle.unexpectedEndTag(reader.getLocalName()));
}
}
break;
}
case START_ELEMENT:
{
switch (CommonConnDef.Tag.forName(reader.getLocalName())) {
case CONFIG_PROPERTY:
{
if (!configMap.containsKey(poolName)) {
configMap.put(poolName,new HashMap<String,ModelNode>(0));
}
parseConfigProperties(reader,configMap.get(poolName));
break;
}
case SECURITY:
{
parseSecuritySettings(reader,connectionDefinitionNode);
break;
}
case TIMEOUT:
{
parseTimeOut(reader,isXa,connectionDefinitionNode);
break;
}
case VALIDATION:
{
parseValidation(reader,connectionDefinitionNode);
break;
}
case XA_POOL:
{
if (!isXa) throw new ParserException(bundle.unexpectedElement(CommonConnDef.Tag.XA_POOL.name()));
if (poolDefined) throw new ParserException(bundle.multiplePools());
parseXaPool(reader,connectionDefinitionNode);
poolDefined=true;
break;
}
case POOL:
{
if (isXa) throw new ParserException(bundle.unexpectedElement(CommonConnDef.Tag.POOL.name()));
if (poolDefined) throw new ParserException(bundle.multiplePools());
parsePool(reader,connectionDefinitionNode);
poolDefined=true;
break;
}
case RECOVERY:
{
parseRecovery(reader,connectionDefinitionNode);
break;
}
default :
throw new ParserException(bundle.unexpectedElement(reader.getLocalName()));
}
break;
}
}
}
throw new ParserException(bundle.unexpectedEndOfDocument());
}
