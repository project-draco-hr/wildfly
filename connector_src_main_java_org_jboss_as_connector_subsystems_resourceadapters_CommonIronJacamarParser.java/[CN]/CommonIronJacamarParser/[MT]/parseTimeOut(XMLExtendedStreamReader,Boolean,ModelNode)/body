{
  while (reader.hasNext()) {
switch (reader.nextTag()) {
case END_ELEMENT:
{
        if (ConnectionDefinition.Tag.forName(reader.getLocalName()) == ConnectionDefinition.Tag.TIMEOUT) {
          return;
        }
 else {
          if (TimeOut.Tag.forName(reader.getLocalName()) == TimeOut.Tag.UNKNOWN) {
            throw ParseUtils.unexpectedElement(reader);
          }
        }
        break;
      }
case START_ELEMENT:
{
      String value=rawElementText(reader);
switch (TimeOut.Tag.forName(reader.getLocalName())) {
case ALLOCATION_RETRY:
{
          ALLOCATION_RETRY.parseAndSetParameter(value,node,reader);
          break;
        }
case ALLOCATION_RETRY_WAIT_MILLIS:
{
        ALLOCATION_RETRY_WAIT_MILLIS.parseAndSetParameter(value,node,reader);
        break;
      }
case BLOCKING_TIMEOUT_MILLIS:
{
      BLOCKING_TIMEOUT_WAIT_MILLIS.parseAndSetParameter(value,node,reader);
      break;
    }
case IDLE_TIMEOUT_MINUTES:
{
    IDLETIMEOUTMINUTES.parseAndSetParameter(value,node,reader);
    break;
  }
case XA_RESOURCE_TIMEOUT:
{
  XA_RESOURCE_TIMEOUT.parseAndSetParameter(value,node,reader);
  break;
}
default :
throw ParseUtils.unexpectedElement(reader);
}
break;
}
}
}
throw ParseUtils.unexpectedEndElement(reader);
}
