{
  final String replaced=PropertyHelper.resolveValue(valueString);
  if (valueString == null) {
    if (paramType.isPrimitive()) {
      throw LoggingMessages.MESSAGES.cannotAssignNullToPrimitive(propertyName,objClass);
    }
    return ObjectProducer.NULL_PRODUCER;
  }
  if (paramType == String.class) {
    return new SimpleObjectProducer(replaced);
  }
 else   if (paramType == Handler.class) {
    if (!handlers.containsKey(replaced) || immediate && !handlerRefs.containsKey(replaced)) {
      throw LoggingMessages.MESSAGES.handlerNotFound(replaced);
    }
    if (immediate) {
      return new SimpleObjectProducer(handlerRefs.get(replaced));
    }
 else {
      return new RefProducer(replaced,handlerRefs);
    }
  }
 else   if (paramType == Filter.class) {
    return parseFilterExpression(replaced,immediate);
  }
 else   if (paramType == Formatter.class) {
    if (!formatters.containsKey(replaced) || immediate && !formatterRefs.containsKey(replaced)) {
      throw LoggingMessages.MESSAGES.formatterNotFound(replaced);
    }
    if (immediate) {
      return new SimpleObjectProducer(formatterRefs.get(replaced));
    }
 else {
      return new RefProducer(replaced,formatterRefs);
    }
  }
 else   if (paramType == ErrorManager.class) {
    if (!errorManagers.containsKey(replaced) || immediate && !errorManagerRefs.containsKey(replaced)) {
      throw LoggingMessages.MESSAGES.errorManagerNotFound(replaced);
    }
    if (immediate) {
      return new SimpleObjectProducer(errorManagerRefs.get(replaced));
    }
 else {
      return new RefProducer(replaced,errorManagerRefs);
    }
  }
 else   if (paramType == Level.class) {
    return new SimpleObjectProducer(LogContext.getSystemLogContext().getLevelForName(replaced));
  }
 else   if (paramType == java.util.logging.Logger.class) {
    return new SimpleObjectProducer(LogContext.getSystemLogContext().getLogger(replaced));
  }
 else   if (paramType == boolean.class || paramType == Boolean.class) {
    return new SimpleObjectProducer(Boolean.valueOf(replaced));
  }
 else   if (paramType == byte.class || paramType == Byte.class) {
    return new SimpleObjectProducer(Byte.valueOf(replaced));
  }
 else   if (paramType == short.class || paramType == Short.class) {
    return new SimpleObjectProducer(Short.valueOf(replaced));
  }
 else   if (paramType == int.class || paramType == Integer.class) {
    return new SimpleObjectProducer(Integer.valueOf(replaced));
  }
 else   if (paramType == long.class || paramType == Long.class) {
    return new SimpleObjectProducer(Long.valueOf(replaced));
  }
 else   if (paramType == float.class || paramType == Float.class) {
    return new SimpleObjectProducer(Float.valueOf(replaced));
  }
 else   if (paramType == double.class || paramType == Double.class) {
    return new SimpleObjectProducer(Double.valueOf(replaced));
  }
 else   if (paramType == char.class || paramType == Character.class) {
    return new SimpleObjectProducer(Character.valueOf(replaced.length() > 0 ? replaced.charAt(0) : 0));
  }
 else   if (paramType == TimeZone.class) {
    return new SimpleObjectProducer(TimeZone.getTimeZone(replaced));
  }
 else   if (paramType == Charset.class) {
    return new SimpleObjectProducer(Charset.forName(replaced));
  }
 else   if (paramType.isEnum()) {
    return new SimpleObjectProducer(Enum.valueOf(paramType.asSubclass(Enum.class),replaced));
  }
 else {
    throw LoggingMessages.MESSAGES.unknownParameterType(paramType,propertyName,objClass);
  }
}
