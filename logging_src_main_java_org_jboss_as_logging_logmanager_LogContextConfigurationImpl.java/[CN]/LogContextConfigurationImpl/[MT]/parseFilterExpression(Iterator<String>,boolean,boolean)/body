{
  if (!iterator.hasNext()) {
    if (outermost) {
      return ObjectProducer.NULL_PRODUCER;
    }
    throw LoggingMessages.MESSAGES.unexpectedEnd();
  }
  final String token=iterator.next();
  if ("accept".equals(token)) {
    return ACCEPT_PRODUCER;
  }
 else   if ("deny".equals(token)) {
    return DENY_PRODUCER;
  }
 else   if ("not".equals(token)) {
    expect("(",iterator);
    final ObjectProducer nested=parseFilterExpression(iterator,false,immediate);
    expect(")",iterator);
    return new ObjectProducer(){
      public Object getObject(){
        return new InvertFilter((Filter)nested.getObject());
      }
    }
;
  }
 else   if ("all".equals(token)) {
    expect("(",iterator);
    final List<ObjectProducer> producers=new ArrayList<ObjectProducer>();
    do {
      producers.add(parseFilterExpression(iterator,false,immediate));
    }
 while (expect(",",")",iterator));
    return new ObjectProducer(){
      public Object getObject(){
        final int length=producers.size();
        final Filter[] filters=new Filter[length];
        for (int i=0; i < length; i++) {
          filters[i]=(Filter)producers.get(i).getObject();
        }
        return new AllFilter(filters);
      }
    }
;
  }
 else   if ("any".equals(token)) {
    expect("(",iterator);
    final List<ObjectProducer> producers=new ArrayList<ObjectProducer>();
    do {
      producers.add(parseFilterExpression(iterator,false,immediate));
    }
 while (expect(",",")",iterator));
    return new ObjectProducer(){
      public Object getObject(){
        final int length=producers.size();
        final Filter[] filters=new Filter[length];
        for (int i=0; i < length; i++) {
          filters[i]=(Filter)producers.get(i).getObject();
        }
        return new AnyFilter(filters);
      }
    }
;
  }
 else   if ("levelChange".equals(token)) {
    expect("(",iterator);
    final String levelName=expectName(iterator);
    final Level level=logContext.getLevelForName(levelName);
    expect(")",iterator);
    return new SimpleObjectProducer(new LevelChangingFilter(level));
  }
 else   if ("levels".equals(token)) {
    expect("(",iterator);
    final Set<Level> levels=new HashSet<Level>();
    do {
      levels.add(logContext.getLevelForName(expectName(iterator)));
    }
 while (expect(",",")",iterator));
    return new SimpleObjectProducer(new LevelFilter(levels));
  }
 else   if ("levelRange".equals(token)) {
    final boolean minInclusive=expect("[","(",iterator);
    final Level minLevel=logContext.getLevelForName(expectName(iterator));
    expect(",",iterator);
    final Level maxLevel=logContext.getLevelForName(expectName(iterator));
    final boolean maxInclusive=expect("]",")",iterator);
    return new SimpleObjectProducer(new LevelRangeFilter(minLevel,minInclusive,maxLevel,maxInclusive));
  }
 else   if ("match".equals(token)) {
    expect("(",iterator);
    final String pattern=expectString(iterator);
    expect(")",iterator);
    return new SimpleObjectProducer(new RegexFilter(pattern));
  }
 else   if ("substitute".equals(token)) {
    expect("(",iterator);
    final String pattern=expectString(iterator);
    expect(",",iterator);
    final String replacement=expectString(iterator);
    expect(")",iterator);
    return new SimpleObjectProducer(new SubstituteFilter(pattern,replacement,false));
  }
 else   if ("substituteAll".equals(token)) {
    expect("(",iterator);
    final String pattern=expectString(iterator);
    expect(",",iterator);
    final String replacement=expectString(iterator);
    expect(")",iterator);
    return new SimpleObjectProducer(new SubstituteFilter(pattern,replacement,true));
  }
 else {
    final String name=expectName(iterator);
    if (!filters.containsKey(name) || immediate && !filterRefs.containsKey(name)) {
      throw LoggingMessages.MESSAGES.filterNotFound(name);
    }
    if (immediate) {
      return new SimpleObjectProducer(filterRefs.get(name));
    }
 else {
      return new RefProducer(name,filterRefs);
    }
  }
}
