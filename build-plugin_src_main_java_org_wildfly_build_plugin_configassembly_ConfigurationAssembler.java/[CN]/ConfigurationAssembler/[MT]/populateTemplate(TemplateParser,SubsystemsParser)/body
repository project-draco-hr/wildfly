{
  final Set<String> extensions=new TreeSet<String>();
  final Map<String,Map<String,ElementNode>> socketBindingsByGroup=new HashMap<String,Map<String,ElementNode>>();
  final Map<String,Map<String,ElementNode>> outboundSocketBindingsByGroup=new HashMap<String,Map<String,ElementNode>>();
  for (  Map.Entry<String,ProcessingInstructionNode> subsystemEntry : templateParser.getSubsystemPlaceholders().entrySet()) {
    final String subsystemName=subsystemEntry.getKey();
    final String groupName=subsystemEntry.getValue().getDataValue("socket-binding-group","");
    final SubsystemConfig[] subsystems=subsystemsParser.getSubsystemConfigs().get(subsystemName);
    if (subsystems == null) {
      throw new IllegalStateException("Could not find a subsystems configuration called '" + subsystemEntry.getKey() + "' in "+ subsystemsFile);
    }
    final Map<String,ElementNode> socketBindings=new TreeMap<String,ElementNode>();
    if (socketBindingsByGroup.put(groupName,socketBindings) != null) {
      throw new IllegalStateException("Group '" + groupName + "' already exists");
    }
    final Map<String,ElementNode> outboundSocketBindings=new TreeMap<String,ElementNode>();
    outboundSocketBindingsByGroup.put(groupName,outboundSocketBindings);
    for (    SubsystemConfig subsystem : subsystems) {
      final File subsystemFile=new File(baseDir,subsystem.getSubsystem());
      if (!subsystemFile.exists()) {
        throw new IllegalStateException("Could not find '" + subsystem + "' under the base directory '"+ baseDir+ "'");
      }
      final SubsystemParser subsystemParser=new SubsystemParser(templateParser.getRootNode().getNamespace(),subsystem.getSupplement(),subsystemFile);
      subsystemParser.parse();
      subsystemEntry.getValue().addDelegate(subsystemParser.getSubsystem());
      extensions.add(subsystemParser.getExtensionModule());
      for (      Map.Entry<String,ElementNode> entry : subsystemParser.getSocketBindings().entrySet()) {
        if (socketBindings.containsKey(entry.getKey())) {
          throw new IllegalStateException("SocketBinding '" + entry + "' already exists");
        }
        socketBindings.put(entry.getKey(),entry.getValue());
      }
      for (      Map.Entry<String,ElementNode> entry : subsystemParser.getOutboundSocketBindings().entrySet()) {
        if (outboundSocketBindings.containsKey(entry.getKey())) {
          throw new IllegalStateException("Outbound SocketBinding '" + entry + "' already exists");
        }
        outboundSocketBindings.put(entry.getKey(),entry.getValue());
      }
    }
  }
  if (extensions.size() > 0) {
    final ProcessingInstructionNode extensionNode=templateParser.getExtensionPlaceHolder();
    for (    String extension : extensions) {
      final ElementNode extensionElement=new ElementNode(null,"extension",templateParser.getRootNode().getNamespace());
      extensionElement.addAttribute("module",new AttributeValue(extension));
      extensionNode.addDelegate(extensionElement);
    }
  }
 else {
    for (Iterator<Node> it=templateParser.getRootNode().iterateChildren(); it.hasNext(); ) {
      Node node=it.next();
      if (node instanceof ElementNode) {
        ElementNode elementNode=(ElementNode)node;
        if (elementNode.getName().equals("extensions") || elementNode.getName().equals("profile")) {
          it.remove();
        }
      }
    }
  }
  if (socketBindingsByGroup.size() > 0 && outboundSocketBindingsByGroup.size() > 0) {
    for (    Map.Entry<String,ProcessingInstructionNode> entry : templateParser.getSocketBindingsPlaceHolders().entrySet()) {
      Map<String,ElementNode> socketBindings=socketBindingsByGroup.get(entry.getKey());
      if (socketBindings == null) {
        throw new IllegalArgumentException("No socket bindings for group " + entry.getKey());
      }
      if (socketBindings.size() > 0) {
        for (        ElementNode binding : socketBindings.values()) {
          entry.getValue().addDelegate(binding);
        }
      }
    }
    for (    Map.Entry<String,ProcessingInstructionNode> entry : templateParser.getSocketBindingsPlaceHolders().entrySet()) {
      Map<String,ElementNode> outboundSocketBindings=outboundSocketBindingsByGroup.get(entry.getKey());
      if (outboundSocketBindings == null) {
        throw new IllegalArgumentException("No outbound socket bindings for group " + entry.getKey());
      }
      if (outboundSocketBindings.size() > 0) {
        for (        ElementNode binding : outboundSocketBindings.values()) {
          entry.getValue().addDelegate(binding);
        }
      }
    }
  }
}
