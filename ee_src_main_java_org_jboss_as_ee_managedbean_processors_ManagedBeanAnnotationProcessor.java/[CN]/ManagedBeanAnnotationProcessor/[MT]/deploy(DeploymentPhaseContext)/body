{
  final DeploymentUnit deploymentUnit=phaseContext.getDeploymentUnit();
  final EEModuleDescription moduleDescription=deploymentUnit.getAttachment(org.jboss.as.ee.component.Attachments.EE_MODULE_DESCRIPTION);
  final CompositeIndex compositeIndex=deploymentUnit.getAttachment(Attachments.COMPOSITE_ANNOTATION_INDEX);
  if (compositeIndex == null) {
    return;
  }
  final List<AnnotationInstance> instances=compositeIndex.getAnnotations(MANAGED_BEAN_ANNOTATION_NAME);
  if (instances == null || instances.isEmpty()) {
    return;
  }
  for (  AnnotationInstance instance : instances) {
    AnnotationTarget target=instance.target();
    if (!(target instanceof ClassInfo)) {
      throw new DeploymentUnitProcessingException("The ManagedBean annotation is only allowed at the class level: " + target);
    }
    final ClassInfo classInfo=(ClassInfo)target;
    final String beanClassName=classInfo.name().toString();
    final AnnotationValue nameValue=instance.value();
    final String beanName=nameValue == null || nameValue.asString().isEmpty() ? beanClassName : nameValue.asString();
    final ComponentDescription componentDescription=new ComponentDescription(beanName,beanClassName,moduleDescription,moduleDescription.getOrAddClassByName(beanClassName),deploymentUnit.getServiceName());
    ViewDescription viewDescription=new ViewDescription(componentDescription,beanClassName);
    viewDescription.getConfigurators().addFirst(new ViewConfigurator(){
      public void configure(      final DeploymentPhaseContext context,      final ComponentConfiguration componentConfiguration,      final ViewDescription description,      final ViewConfiguration configuration) throws DeploymentUnitProcessingException {
        final Object contextKey=new Object();
        configuration.getViewPostConstructInterceptors().addFirst(new ManagedBeanCreateInterceptorFactory(contextKey));
        final ManagedBeanAssociatingInterceptorFactory associatingInterceptorFactory=new ManagedBeanAssociatingInterceptorFactory(contextKey);
        for (        Method method : configuration.getProxyFactory().getCachedMethods()) {
          configuration.getViewInterceptorDeque(method).addFirst(associatingInterceptorFactory);
        }
        configuration.getViewPreDestroyInterceptors().addFirst(new ManagedBeanCreateInterceptorFactory(contextKey));
      }
    }
);
    viewDescription.getBindingNames().addAll(Arrays.asList("java:module/" + beanName,"java:app/" + moduleDescription.getModuleName() + "/"+ beanName));
    componentDescription.getViews().add(viewDescription);
    moduleDescription.addComponent(componentDescription);
  }
}
