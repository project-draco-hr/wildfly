{
  final PatchingTestBuilder builder=createDefaultBuilder("layer2","layer1","base");
  final byte[] standaloneHash=new byte[20];
  final byte[] moduleHash=new byte[20];
  final PatchingTestStepBuilder cp1=builder.createStepBuilder();
  cp1.setPatchId("CP1").upgradeIdentity(PRODUCT_VERSION,PRODUCT_VERSION).upgradeElement("base:CP1","base",false).addModuleWithRandomContent("org.jboss.test",moduleHash).getParent().addFileWithRandomContent(standaloneHash,FILE_ONE);
  apply(cp1);
  Assert.assertTrue(builder.hasFile(FILE_ONE));
  final PatchingTestStepBuilder cp2=builder.createStepBuilder();
  cp2.setPatchId("CP2").upgradeIdentity(PRODUCT_VERSION,PRODUCT_VERSION).upgradeElement("layer2:CP2","layer2",false).addModuleWithRandomContent("org.jboss.test",null).getParent().upgradeElement("layer1:CP2","layer1",false).addModuleWithRandomContent("org.jboss.test",null).getParent().updateFileWithRandomContent(Arrays.copyOf(standaloneHash,standaloneHash.length),standaloneHash,FILE_ONE);
  apply(cp2);
  Assert.assertTrue(builder.hasFile(FILE_ONE));
  final PatchingTestStepBuilder cp3=builder.createStepBuilder();
  cp3.setPatchId("CP3").upgradeIdentity(PRODUCT_VERSION,PRODUCT_VERSION).removeFile(Arrays.copyOf(standaloneHash,standaloneHash.length),FILE_ONE);
  apply(cp3);
  Assert.assertFalse(builder.hasFile(FILE_ONE));
  rollback(cp3);
  Assert.assertTrue(builder.hasFile(FILE_ONE));
  rollback(cp2);
  Assert.assertTrue(builder.hasFile(FILE_ONE));
  rollback(cp1);
  Assert.assertFalse(builder.hasFile(FILE_ONE));
}
