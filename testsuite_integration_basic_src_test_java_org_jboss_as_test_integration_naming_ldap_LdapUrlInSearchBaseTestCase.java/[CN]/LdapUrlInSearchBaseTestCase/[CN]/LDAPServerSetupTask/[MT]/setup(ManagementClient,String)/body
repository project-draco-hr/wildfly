{
  try {
    if (Security.getProvider(BouncyCastleProvider.PROVIDER_NAME) == null) {
      Security.addProvider(new BouncyCastleProvider());
      removeBouncyCastle=true;
    }
  }
 catch (  SecurityException ex) {
    LOGGER.warn("Cannot register BouncyCastleProvider",ex);
  }
  directoryService=DSAnnotationProcessor.getDirectoryService();
  DSAnnotationProcessor.injectEntries(directoryService,"dn: uid=jduke,dc=jboss,dc=org\n" + "objectclass: top\n" + "objectclass: uidObject\n"+ "objectclass: person\n"+ "uid: jduke\n"+ "cn: Java Duke\n"+ "sn: Duke\n"+ "userPassword: theduke\n");
  final ManagedCreateLdapServer createLdapServer=new ManagedCreateLdapServer((CreateLdapServer)AnnotationUtils.getInstance(CreateLdapServer.class));
  Utils.fixApacheDSTransportAddress(createLdapServer,Utils.getSecondaryTestAddress(managementClient,false));
  ldapServer=ServerAnnotationProcessor.instantiateLdapServer(createLdapServer,directoryService);
  ldapServer.start();
}
