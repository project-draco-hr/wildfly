{
  for (  Cipher cipher : Cipher.values()) {
    String alias=cipher.getOpenSSLAlias();
    if (aliases.containsKey(alias)) {
      aliases.get(alias).add(cipher);
    }
 else {
      List<Cipher> list=new ArrayList<>();
      list.add(cipher);
      aliases.put(alias,list);
    }
    aliases.put(cipher.name(),Collections.singletonList(cipher));
    for (    String openSSlAltName : cipher.getOpenSSLAltNames()) {
      if (aliases.containsKey(openSSlAltName)) {
        aliases.get(openSSlAltName).add(cipher);
      }
 else {
        List<Cipher> list=new ArrayList<>();
        list.add(cipher);
        aliases.put(openSSlAltName,list);
      }
    }
    jsseToOpenSSL.put(cipher.name(),cipher.getOpenSSLAlias());
    Set<String> jsseNames=cipher.getJsseNames();
    for (    String jsseName : jsseNames) {
      jsseToOpenSSL.put(jsseName,cipher.getOpenSSLAlias());
    }
  }
  List<Cipher> allCiphersList=Arrays.asList(Cipher.values());
  Collections.reverse(allCiphersList);
  LinkedHashSet<Cipher> allCiphers=defaultSort(new LinkedHashSet<>(allCiphersList));
  addListAlias(eNULL,filterByEncryption(allCiphers,Collections.singleton(Encryption.eNULL)));
  LinkedHashSet<Cipher> all=new LinkedHashSet<>(allCiphers);
  remove(all,eNULL);
  addListAlias(ALL,all);
  addListAlias(HIGH,filterByEncryptionLevel(allCiphers,Collections.singleton(EncryptionLevel.HIGH)));
  addListAlias(MEDIUM,filterByEncryptionLevel(allCiphers,Collections.singleton(EncryptionLevel.MEDIUM)));
  addListAlias(LOW,filterByEncryptionLevel(allCiphers,Collections.singleton(EncryptionLevel.LOW)));
  addListAlias(EXPORT,filterByEncryptionLevel(allCiphers,new HashSet<>(Arrays.asList(EncryptionLevel.EXP40,EncryptionLevel.EXP56))));
  aliases.put("EXP",aliases.get(EXPORT));
  addListAlias(EXPORT40,filterByEncryptionLevel(allCiphers,Collections.singleton(EncryptionLevel.EXP40)));
  addListAlias(EXPORT56,filterByEncryptionLevel(allCiphers,Collections.singleton(EncryptionLevel.EXP56)));
  aliases.put("NULL",aliases.get(eNULL));
  aliases.put(COMPLEMENTOFALL,aliases.get(eNULL));
  addListAlias(aNULL,filterByAuthentication(allCiphers,Collections.singleton(Authentication.aNULL)));
  addListAlias(kRSA,filterByKeyExchange(allCiphers,Collections.singleton(KeyExchange.RSA)));
  addListAlias(aRSA,filterByAuthentication(allCiphers,Collections.singleton(Authentication.RSA)));
  aliases.put(RSA,aliases.get(kRSA));
  addListAlias(kEDH,filterByKeyExchange(allCiphers,Collections.singleton(KeyExchange.EDH)));
  addListAlias(kDHE,filterByKeyExchange(allCiphers,Collections.singleton(KeyExchange.EDH)));
  Set<Cipher> edh=filterByKeyExchange(allCiphers,Collections.singleton(KeyExchange.EDH));
  edh.removeAll(filterByAuthentication(allCiphers,Collections.singleton(Authentication.aNULL)));
  addListAlias(EDH,edh);
  addListAlias(DHE,edh);
  addListAlias(kDHr,filterByKeyExchange(allCiphers,Collections.singleton(KeyExchange.DHr)));
  addListAlias(kDHd,filterByKeyExchange(allCiphers,Collections.singleton(KeyExchange.DHd)));
  addListAlias(kDH,filterByKeyExchange(allCiphers,new HashSet<>(Arrays.asList(KeyExchange.DHr,KeyExchange.DHd))));
  addListAlias(kECDHr,filterByKeyExchange(allCiphers,Collections.singleton(KeyExchange.ECDHr)));
  addListAlias(kECDHe,filterByKeyExchange(allCiphers,Collections.singleton(KeyExchange.ECDHe)));
  addListAlias(kECDH,filterByKeyExchange(allCiphers,new HashSet<>(Arrays.asList(KeyExchange.ECDHe,KeyExchange.ECDHr))));
  addListAlias(ECDH,filterByKeyExchange(allCiphers,new HashSet<>(Arrays.asList(KeyExchange.ECDHe,KeyExchange.ECDHr,KeyExchange.EECDH))));
  addListAlias(kECDHE,filterByKeyExchange(allCiphers,Collections.singleton(KeyExchange.ECDHe)));
  aliases.put(ECDHE,aliases.get(kECDHE));
  addListAlias(kEECDH,filterByKeyExchange(allCiphers,Collections.singleton(KeyExchange.EECDH)));
  aliases.put(EECDHE,aliases.get(kEECDH));
  Set<Cipher> eecdh=filterByKeyExchange(allCiphers,Collections.singleton(KeyExchange.EECDH));
  eecdh.removeAll(filterByAuthentication(allCiphers,Collections.singleton(Authentication.aNULL)));
  addListAlias(EECDH,eecdh);
  addListAlias(aDSS,filterByAuthentication(allCiphers,Collections.singleton(Authentication.DSS)));
  aliases.put("DSS",aliases.get(aDSS));
  addListAlias(aDH,filterByAuthentication(allCiphers,Collections.singleton(Authentication.DH)));
  Set<Cipher> aecdh=filterByKeyExchange(allCiphers,Collections.singleton(KeyExchange.EECDH));
  addListAlias(AECDH,filterByAuthentication(aecdh,Collections.singleton(Authentication.aNULL)));
  addListAlias(aECDH,filterByAuthentication(allCiphers,Collections.singleton(Authentication.ECDH)));
  addListAlias(ECDSA,filterByAuthentication(allCiphers,Collections.singleton(Authentication.ECDSA)));
  aliases.put(aECDSA,aliases.get(ECDSA));
  addListAlias(kFZA,filterByKeyExchange(allCiphers,Collections.singleton(KeyExchange.FZA)));
  addListAlias(aFZA,filterByAuthentication(allCiphers,Collections.singleton(Authentication.FZA)));
  addListAlias(eFZA,filterByEncryption(allCiphers,Collections.singleton(Encryption.FZA)));
  addListAlias(FZA,filter(allCiphers,null,Collections.singleton(KeyExchange.FZA),Collections.singleton(Authentication.FZA),Collections.singleton(Encryption.FZA),null,null));
  addListAlias(Constants.SSL_PROTO_TLSv1_2,filterByProtocol(allCiphers,Collections.singleton(Protocol.TLSv1_2)));
  addListAlias(Constants.SSL_PROTO_TLSv1_1,filterByProtocol(allCiphers,Collections.singleton(Protocol.SSLv3)));
  addListAlias(Constants.SSL_PROTO_TLSv1,filterByProtocol(allCiphers,new HashSet<>(Arrays.asList(Protocol.TLSv1,Protocol.SSLv3))));
  aliases.put(Constants.SSL_PROTO_SSLv3,aliases.get(Constants.SSL_PROTO_TLSv1));
  addListAlias(Constants.SSL_PROTO_SSLv2,filterByProtocol(allCiphers,Collections.singleton(Protocol.SSLv2)));
  addListAlias(DH,filterByKeyExchange(allCiphers,new HashSet<>(Arrays.asList(KeyExchange.DHr,KeyExchange.DHd,KeyExchange.EDH))));
  Set<Cipher> adh=filterByKeyExchange(allCiphers,Collections.singleton(KeyExchange.EDH));
  adh.retainAll(filterByAuthentication(allCiphers,Collections.singleton(Authentication.aNULL)));
  addListAlias(ADH,adh);
  addListAlias(AES128,filterByEncryption(allCiphers,new HashSet<>(Arrays.asList(Encryption.AES128,Encryption.AES128GCM))));
  addListAlias(AES256,filterByEncryption(allCiphers,new HashSet<>(Arrays.asList(Encryption.AES256,Encryption.AES256GCM))));
  addListAlias(AES,filterByEncryption(allCiphers,new HashSet<>(Arrays.asList(Encryption.AES128,Encryption.AES128GCM,Encryption.AES256,Encryption.AES256GCM))));
  addListAlias(AESGCM,filterByEncryption(allCiphers,new HashSet<>(Arrays.asList(Encryption.AES128GCM,Encryption.AES256GCM))));
  addListAlias(CAMELLIA,filterByEncryption(allCiphers,new HashSet<>(Arrays.asList(Encryption.CAMELLIA128,Encryption.CAMELLIA256))));
  addListAlias(CAMELLIA128,filterByEncryption(allCiphers,Collections.singleton(Encryption.CAMELLIA128)));
  addListAlias(CAMELLIA256,filterByEncryption(allCiphers,Collections.singleton(Encryption.CAMELLIA256)));
  addListAlias(TRIPLE_DES,filterByEncryption(allCiphers,Collections.singleton(Encryption.TRIPLE_DES)));
  addListAlias(DES,filterByEncryption(allCiphers,Collections.singleton(Encryption.DES)));
  addListAlias(RC4,filterByEncryption(allCiphers,Collections.singleton(Encryption.RC4)));
  addListAlias(RC2,filterByEncryption(allCiphers,Collections.singleton(Encryption.RC2)));
  addListAlias(IDEA,filterByEncryption(allCiphers,Collections.singleton(Encryption.IDEA)));
  addListAlias(SEED,filterByEncryption(allCiphers,Collections.singleton(Encryption.SEED)));
  addListAlias(MD5,filterByMessageDigest(allCiphers,Collections.singleton(MessageDigest.MD5)));
  addListAlias(SHA1,filterByMessageDigest(allCiphers,Collections.singleton(MessageDigest.SHA1)));
  aliases.put(SHA,aliases.get(SHA1));
  addListAlias(SHA256,filterByMessageDigest(allCiphers,Collections.singleton(MessageDigest.SHA256)));
  addListAlias(SHA384,filterByMessageDigest(allCiphers,Collections.singleton(MessageDigest.SHA384)));
  addListAlias(aGOST,filterByAuthentication(allCiphers,new HashSet<>(Arrays.asList(Authentication.GOST01,Authentication.GOST94))));
  addListAlias(aGOST01,filterByAuthentication(allCiphers,Collections.singleton(Authentication.GOST01)));
  addListAlias(aGOST94,filterByAuthentication(allCiphers,Collections.singleton(Authentication.GOST94)));
  addListAlias(kGOST,filterByKeyExchange(allCiphers,Collections.singleton(KeyExchange.GOST)));
  addListAlias(GOST94,filterByMessageDigest(allCiphers,Collections.singleton(MessageDigest.GOST94)));
  addListAlias(GOST89MAC,filterByMessageDigest(allCiphers,Collections.singleton(MessageDigest.GOST89MAC)));
  addListAlias(PSK,filter(allCiphers,null,new HashSet<>(Arrays.asList(KeyExchange.PSK,KeyExchange.RSAPSK,KeyExchange.DHEPSK,KeyExchange.ECDHEPSK)),Collections.singleton(Authentication.PSK),null,null,null));
  addListAlias(KRB5,filter(allCiphers,null,Collections.singleton(KeyExchange.KRB5),Collections.singleton(Authentication.KRB5),null,null,null));
  addListAlias(aSRP,filterByAuthentication(allCiphers,Collections.singleton(Authentication.SRP)));
  addListAlias(kSRP,filterByKeyExchange(allCiphers,Collections.singleton(KeyExchange.SRP)));
  addListAlias(SRP,filterByKeyExchange(allCiphers,Collections.singleton(KeyExchange.SRP)));
  initialized=true;
  addListAlias(DEFAULT,parse("ALL:!EXPORT:!eNULL:!aNULL:!SSLv2"));
  Set<Cipher> complementOfDefault=filterByKeyExchange(all,new HashSet<>(Arrays.asList(KeyExchange.EDH,KeyExchange.EECDH)));
  complementOfDefault=filterByAuthentication(complementOfDefault,Collections.singleton(Authentication.aNULL));
  complementOfDefault.removeAll(aliases.get(eNULL));
  complementOfDefault.addAll(aliases.get(Constants.SSL_PROTO_SSLv2));
  complementOfDefault.addAll(aliases.get(EXPORT));
  addListAlias(COMPLEMENTOFDEFAULT,complementOfDefault);
}
