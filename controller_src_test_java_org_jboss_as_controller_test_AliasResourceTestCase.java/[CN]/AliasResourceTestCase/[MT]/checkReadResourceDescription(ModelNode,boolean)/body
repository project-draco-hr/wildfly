{
  Assert.assertEquals("The test resource",resource.get(DESCRIPTION).asString());
  Assert.assertEquals(5,resource.get(ATTRIBUTES).keys().size());
  checkAttribute(resource.get(ATTRIBUTES,"ro"),"R-O attr",AttributeAccess.AccessType.READ_ONLY.toString(),AttributeAccess.Storage.CONFIGURATION.toString());
  checkAttribute(resource.get(ATTRIBUTES,"rw"),"R-W attr",AttributeAccess.AccessType.READ_WRITE.toString(),AttributeAccess.Storage.CONFIGURATION.toString());
  checkAttribute(resource.get(ATTRIBUTES,"rt"),"R-T attr",AttributeAccess.AccessType.READ_ONLY.toString(),AttributeAccess.Storage.RUNTIME.toString());
  checkAttribute(resource.get(ATTRIBUTES,"roa"),"R-O alias",AttributeAccess.AccessType.READ_ONLY.toString(),AttributeAccess.Storage.CONFIGURATION.toString());
  checkAttribute(resource.get(ATTRIBUTES,"rwa"),"R-W alias",AttributeAccess.AccessType.READ_WRITE.toString(),AttributeAccess.Storage.CONFIGURATION.toString());
  Assert.assertEquals(3,resource.get(OPERATIONS).keys().size());
  Assert.assertTrue(resource.get(OPERATIONS,ADD).isDefined());
  Assert.assertTrue(resource.get(OPERATIONS,REMOVE).isDefined());
  Assert.assertTrue(resource.get(OPERATIONS,"core-test").isDefined());
  Assert.assertEquals(1,resource.get(CHILDREN).keys().size());
  Assert.assertTrue(resource.get(CHILDREN,CHILD,MODEL_DESCRIPTION,KID_MODEL).isDefined());
  checkChildResourceDescription(resource.get(CHILDREN,CHILD,MODEL_DESCRIPTION,KID_MODEL));
  if (aliasedChild) {
    Assert.assertTrue(resource.get(CHILDREN,CHILD,MODEL_DESCRIPTION,KID_ALIASED).isDefined());
    checkChildResourceDescription(resource.get(CHILDREN,CHILD,MODEL_DESCRIPTION,KID_ALIASED));
  }
 else {
    Assert.assertFalse(resource.get(CHILDREN,CHILD,MODEL_DESCRIPTION,KID_ALIASED).isDefined());
  }
}
