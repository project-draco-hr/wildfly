{
  addCore(CORE);
  addChild(CORE);
  ModelNode op=createOperation(READ_CHILDREN_RESOURCES_OPERATION);
  op.get(CHILD_TYPE).set(CORE);
  ModelNode result=executeForResult(op);
  Assert.assertTrue(result.hasDefined(MODEL));
  checkResource(false,result.get(MODEL),"R/O","R/W",null,null);
  op.get(CHILD_TYPE).set(ALIASED);
  result=executeForResult(op);
  Assert.assertTrue(result.hasDefined(MODEL));
  checkResource(false,result.get(MODEL),"R/O","R/W",null,null);
  op=createOperation(READ_CHILDREN_RESOURCES_OPERATION);
  op.get(CHILD_TYPE).set(CORE);
  op.get(RECURSIVE).set(true);
  result=executeForResult(op);
  Assert.assertTrue(result.hasDefined(MODEL));
  checkResource(false,result.get(MODEL),"R/O","R/W",null,"R/W 2");
  op.get(CHILD_TYPE).set(ALIASED);
  result=executeForResult(op);
  Assert.assertTrue(result.hasDefined(MODEL));
  checkResource(false,result.get(MODEL),"R/O","R/W",null,"R/W 2");
  op=createOperation(READ_CHILDREN_RESOURCES_OPERATION,CORE,MODEL);
  op.get(CHILD_TYPE).set(CHILD);
  result=executeForResult(op);
  Assert.assertEquals("R/W 2",result.get(KID_MODEL,"rw").asString());
  op=createOperation(READ_CHILDREN_RESOURCES_OPERATION,ALIASED,MODEL);
  op.get(CHILD_TYPE).set(CHILD);
  result=executeForResult(op);
  Assert.assertEquals("R/W 2",result.get(KID_MODEL,"rw").asString());
}
