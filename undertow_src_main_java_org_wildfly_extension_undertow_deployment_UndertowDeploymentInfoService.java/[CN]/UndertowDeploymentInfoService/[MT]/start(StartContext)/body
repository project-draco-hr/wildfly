{
  DeploymentInfo deploymentInfo=createServletConfig();
  handleSessionReplication(deploymentInfo);
  handleIdentityManager(deploymentInfo);
  SessionConfigMetaData sessionConfig=mergedMetaData.getSessionConfig();
  if (sessionConfig != null) {
    if (sessionConfig.getSessionTimeoutSet()) {
      deploymentInfo.setDefaultSessionTimeout(sessionConfig.getSessionTimeout() * 60);
    }
    CookieConfigMetaData cookieConfig=sessionConfig.getCookieConfig();
    if (cookieConfig != null) {
      SessionCookieConfig config=new SessionCookieConfigImpl();
      if (cookieConfig.getName() != null) {
        config.setName(cookieConfig.getName());
      }
      config.setSecure(cookieConfig.getSecure());
      config.setPath(cookieConfig.getPath());
      config.setMaxAge(cookieConfig.getMaxAge());
      config.setDomain(cookieConfig.getDomain());
      config.setComment(cookieConfig.getComment());
      config.setHttpOnly(cookieConfig.getHttpOnly());
      deploymentInfo.setSessionCookieConfig(config);
    }
  }
  for (  final SetupAction action : setupActions) {
    deploymentInfo.addThreadSetupAction(new ThreadSetupAction(){
      private final Handle handle=new Handle(){
        @Override public void tearDown(){
          action.teardown(Collections.<String,Object>emptyMap());
        }
      }
;
      @Override public Handle setup(      final HttpServerExchange exchange){
        action.setup(Collections.<String,Object>emptyMap());
        return handle;
      }
    }
);
  }
  this.deploymentInfo=deploymentInfo;
}
