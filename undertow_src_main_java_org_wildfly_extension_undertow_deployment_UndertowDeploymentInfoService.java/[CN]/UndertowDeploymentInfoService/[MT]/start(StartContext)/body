{
  ClassLoader oldTccl=Thread.currentThread().getContextClassLoader();
  try {
    Thread.currentThread().setContextClassLoader(module.getClassLoader());
    DeploymentInfo deploymentInfo=createServletConfig();
    handleDistributable(deploymentInfo);
    handleIdentityManager(deploymentInfo);
    handleJASPIMechanism(deploymentInfo);
    deploymentInfo.setIgnoreFlush(false);
    SessionConfigMetaData sessionConfig=mergedMetaData.getSessionConfig();
    ServletSessionConfig config=null;
    SessionCookieConfig defaultSessionConfig=container.getValue().getSessionCookieConfig();
    if (defaultSessionConfig != null) {
      config=new ServletSessionConfig();
      if (defaultSessionConfig.getName() != null) {
        config.setName(defaultSessionConfig.getName());
      }
      if (defaultSessionConfig.getDomain() != null) {
        config.setDomain(defaultSessionConfig.getDomain());
      }
      if (defaultSessionConfig.getHttpOnly() != null) {
        config.setHttpOnly(defaultSessionConfig.getHttpOnly());
      }
      if (defaultSessionConfig.getSecure() != null) {
        config.setSecure(defaultSessionConfig.getSecure());
      }
      if (defaultSessionConfig.getMaxAge() != null) {
        config.setMaxAge(defaultSessionConfig.getMaxAge());
      }
      if (defaultSessionConfig.getComment() != null) {
        config.setComment(defaultSessionConfig.getComment());
      }
    }
    if (sessionConfig != null) {
      if (sessionConfig.getSessionTimeoutSet()) {
        deploymentInfo.setDefaultSessionTimeout(sessionConfig.getSessionTimeout() * 60);
      }
      CookieConfigMetaData cookieConfig=sessionConfig.getCookieConfig();
      if (config == null) {
        config=new ServletSessionConfig();
      }
      if (cookieConfig != null) {
        if (cookieConfig.getName() != null) {
          config.setName(cookieConfig.getName());
        }
        if (cookieConfig.getDomain() != null) {
          config.setDomain(cookieConfig.getDomain());
        }
        if (cookieConfig.getComment() != null) {
          config.setComment(cookieConfig.getComment());
        }
        config.setSecure(cookieConfig.getSecure());
        config.setPath(cookieConfig.getPath());
        config.setMaxAge(cookieConfig.getMaxAge());
        config.setHttpOnly(cookieConfig.getHttpOnly());
      }
      List<SessionTrackingModeType> modes=sessionConfig.getSessionTrackingModes();
      if (modes != null && !modes.isEmpty()) {
        final Set<SessionTrackingMode> trackingModes=new HashSet<>();
        for (        SessionTrackingModeType mode : modes) {
switch (mode) {
case COOKIE:
            trackingModes.add(SessionTrackingMode.COOKIE);
          break;
case SSL:
        trackingModes.add(SessionTrackingMode.SSL);
      break;
case URL:
    trackingModes.add(SessionTrackingMode.URL);
  break;
}
}
config.setSessionTrackingModes(trackingModes);
}
}
if (config != null) {
deploymentInfo.setServletSessionConfig(config);
}
for (final SetupAction action : setupActions) {
deploymentInfo.addThreadSetupAction(new ThreadSetupAction(){
private final Handle handle=new Handle(){
@Override public void tearDown(){
action.teardown(Collections.<String,Object>emptyMap());
}
}
;
@Override public Handle setup(final HttpServerExchange exchange){
action.setup(Collections.<String,Object>emptyMap());
return handle;
}
}
);
}
this.deploymentInfo=deploymentInfo;
}
  finally {
Thread.currentThread().setContextClassLoader(oldTccl);
}
}
