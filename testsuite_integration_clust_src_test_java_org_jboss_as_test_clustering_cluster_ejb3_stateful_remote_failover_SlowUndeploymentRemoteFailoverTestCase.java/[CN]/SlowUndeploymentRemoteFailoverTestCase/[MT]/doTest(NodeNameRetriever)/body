{
  final StopSignal stopSignal=new StopSignal();
  final Callable<Integer> task=new EJBInvokingTask(bean,stopSignal);
  final ExecutorService executorService=Executors.newFixedThreadPool(1);
  try {
    final Future<Integer> futureResult=executorService.submit(task);
    final long initialFewInvocationsWaitTime=TimeoutUtil.adjust(500);
    logger.info("Sleeping for " + initialFewInvocationsWaitTime + " milli. sec to let the EJB be invoked a few times");
    Thread.sleep(initialFewInvocationsWaitTime);
    stopSignal.stop=true;
    final int numberOfExplicitClientTriggeredInvocations=futureResult.get();
    logger.info("Explicit client triggered invocations on the bean was " + numberOfExplicitClientTriggeredInvocations + " times and client interceptor was invoked "+ clientInterceptor.invocationCount+ " times");
    Assert.assertTrue("No invocations were done on the bean",numberOfExplicitClientTriggeredInvocations > 0);
    Assert.assertEquals("Unexpected number of invocations on the client interceptor",numberOfExplicitClientTriggeredInvocations,clientInterceptor.invocationCount);
    clientInterceptor.invocationCount=0;
    stopSignal.stop=false;
    final Future<Integer> futureResultExpectingRetry=executorService.submit(task);
    final long waitTimeBeforeUndeployment=TimeoutUtil.adjust(500);
    logger.info("Sleeping for " + waitTimeBeforeUndeployment + " milli. sec to let the EJB be invoked a few times, before undeploying it");
    Thread.sleep(waitTimeBeforeUndeployment);
    undeploy(ClusteringTestConstants.DEPLOYMENT_1);
    final long waitTimeAfterUndeployment=TimeoutUtil.adjust(1000);
    logger.info("Sleeping for " + waitTimeAfterUndeployment + " milli. sec to let the EJB be invoked a few times, after the deployment has been undeployed from one of the nodes");
    Thread.sleep(waitTimeAfterUndeployment);
    stopSignal.stop=true;
    final int explicitClientTriggeredInvocationsOnBeanExpectingFailover=futureResultExpectingRetry.get();
    logger.info("Explicit client triggered invocations on the bean was " + explicitClientTriggeredInvocationsOnBeanExpectingFailover + " times and client interceptor was invoked "+ clientInterceptor.invocationCount+ " times");
    Assert.assertTrue("No invocations were done on the bean",explicitClientTriggeredInvocationsOnBeanExpectingFailover > 0);
    final int NUM_RETRIES_EXPECTED=1;
    Assert.assertEquals("Client interceptor invocation count = " + clientInterceptor.invocationCount + " was expected to be "+ NUM_RETRIES_EXPECTED+ " greater than the explicit client triggered invocations on the bean, "+ "since we are expecting "+ NUM_RETRIES_EXPECTED+ " implicit retry/retries during failover",explicitClientTriggeredInvocationsOnBeanExpectingFailover + NUM_RETRIES_EXPECTED,clientInterceptor.invocationCount);
  }
  finally {
    executorService.shutdown();
  }
}
