{
  if (parsedRelationship.getMappingStyle() != null) {
    mappingStyle=parsedRelationship.getMappingStyle();
  }
 else {
    mappingStyle=defaultValues.mappingStyle;
  }
  if (parsedRelationship.getReadOnly() != null) {
    readOnly=parsedRelationship.getReadOnly();
  }
 else {
    readOnly=defaultValues.isReadOnly();
  }
  if (parsedRelationship.getReadTimeOut() != null) {
    readTimeOut=parsedRelationship.getReadTimeOut();
  }
 else {
    readTimeOut=defaultValues.getReadTimeOut();
  }
  if (parsedRelationship.getDataSourceName() != null)   dataSourceName=parsedRelationship.getDataSourceName();
 else   dataSourceName=defaultValues.getDataSourceName();
  if (parsedRelationship.getDatasourceMapping() != null) {
    datasourceMapping=jdbcApplication.getTypeMappingByName(parsedRelationship.getDatasourceMapping());
    if (datasourceMapping == null) {
      throw new RuntimeException("Error in jbosscmp-jdbc.xml : " + "datasource-mapping " + parsedRelationship.getDatasourceMapping() + " not found");
    }
  }
 else   if (defaultValues.getTypeMapping() != null) {
    datasourceMapping=defaultValues.getTypeMapping();
  }
 else {
  }
  String tableNameString=parsedRelationship.getTableName();
  if (tableNameString == null) {
    tableNameString=defaultValues.getDefaultTableName();
    if (tableNameString == null) {
      tableNameString=defaultValues.createDefaultTableName();
    }
  }
  tableName=tableNameString;
  if (parsedRelationship.getCreateTable() != null) {
    createTable=parsedRelationship.getCreateTable();
  }
 else {
    createTable=defaultValues.getCreateTable();
  }
  if (parsedRelationship.getRemoveTable() != null) {
    removeTable=parsedRelationship.getRemoveTable();
  }
 else {
    removeTable=defaultValues.getRemoveTable();
  }
  if (!parsedRelationship.getTablePostCreateCmd().isEmpty()) {
    tablePostCreateCmd.addAll(parsedRelationship.getTablePostCreateCmd());
  }
 else {
    tablePostCreateCmd.addAll(defaultValues.getDefaultTablePostCreateCmd());
  }
  if (parsedRelationship.getAlterTable() != null) {
    alterTable=parsedRelationship.getAlterTable();
  }
 else {
    alterTable=defaultValues.getAlterTable();
  }
  if (parsedRelationship.getRowLocking() != null) {
    rowLocking=!isReadOnly() && parsedRelationship.getRowLocking();
  }
 else {
    rowLocking=defaultValues.hasRowLocking();
  }
  if (parsedRelationship.getPrimaryKeyConstraint() != null) {
    primaryKeyConstraint=parsedRelationship.getPrimaryKeyConstraint();
  }
 else {
    primaryKeyConstraint=defaultValues.hasPrimaryKeyConstraint();
  }
  JDBCRelationshipRoleMetaData defaultLeft=defaultValues.getLeftRelationshipRole();
  JDBCRelationshipRoleMetaData defaultRight=defaultValues.getRightRelationshipRole();
  if (parsedRelationship.getRoles().isEmpty()) {
    left=new JDBCRelationshipRoleMetaData(this,jdbcApplication,defaultLeft);
    right=new JDBCRelationshipRoleMetaData(this,jdbcApplication,defaultRight);
    left.init(right);
    right.init(left);
  }
 else {
    ParsedRelationshipRole leftRole=getEJBRelationshipRole(parsedRelationship.getRoles(),defaultLeft);
    left=new JDBCRelationshipRoleMetaData(this,jdbcApplication,leftRole,defaultLeft);
    ParsedRelationshipRole rightRole=getEJBRelationshipRole(parsedRelationship.getRoles(),defaultRight);
    right=new JDBCRelationshipRoleMetaData(this,jdbcApplication,rightRole,defaultRight);
    left.init(right,leftRole);
    right.init(left,rightRole);
  }
  this.relationName=getNonNullRelationName(left,right,defaultValues.getRelationName());
  if (isForeignKeyMappingStyle() && left.getKeyFields().isEmpty() && right.getKeyFields().isEmpty()) {
    throw new RuntimeException("Atleast one role of a foreign-key " + "mapped relationship must have key fields " + "(or <primkey-field> is missing from ejb-jar.xml): "+ "ejb-relation-name="+ relationName);
  }
  if (isTableMappingStyle() && (left.getKeyFields().isEmpty() || right.getKeyFields().isEmpty())) {
    throw new RuntimeException("Both roles of a relation-table " + "mapped relationship must have key fields: " + "ejb-relation-name="+ relationName);
  }
}
