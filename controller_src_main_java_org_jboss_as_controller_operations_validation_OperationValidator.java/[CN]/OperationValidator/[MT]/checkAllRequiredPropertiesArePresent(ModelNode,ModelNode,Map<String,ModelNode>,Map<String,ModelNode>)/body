{
  for (  String paramName : describedProperties.keySet()) {
    final ModelNode described=describedProperties.get(paramName);
    final boolean required;
    if (described.hasDefined(REQUIRED)) {
      if (ModelType.BOOLEAN != described.get(REQUIRED).getType()) {
        throwOrWarnAboutDescriptorProblem(MESSAGES.invalidDescriptionRequiredFlagIsNotABoolean(paramName,getPathAddress(operation),description));
        required=false;
      }
 else {
        required=described.get(REQUIRED).asBoolean();
      }
    }
 else {
      required=true;
    }
    Collection<ModelNode> alternatives=null;
    if (described.hasDefined(ALTERNATIVES)) {
      alternatives=described.get(ALTERNATIVES).asList();
    }
    final boolean exist=actualParams.containsKey(paramName) && actualParams.get(paramName).isDefined();
    final String alternative=hasAlternative(actualParams.keySet(),alternatives);
    final boolean alternativeExist=alternative != null && actualParams.get(alternative).isDefined();
    if (required) {
      if (!exist && !alternativeExist) {
        throw MESSAGES.validationFailedRequiredParameterNotPresent(paramName,formatOperationForMessage(operation));
      }
    }
    if (exist && alternativeExist) {
      throw MESSAGES.validationFailedRequiredParameterPresentAsWellAsAlternative(alternative,paramName,formatOperationForMessage(operation));
    }
  }
}
