{
  if (!value.isDefined() || value.getType() == ModelType.EXPRESSION) {
    return;
  }
  if (describedProperty.hasDefined(MIN)) {
switch (modelType) {
case BIG_DECIMAL:
{
        final BigDecimal min;
        try {
          min=describedProperty.get(MIN).asBigDecimal();
        }
 catch (        IllegalArgumentException e) {
          throwOrWarnAboutDescriptorProblem(ControllerLogger.ROOT_LOGGER.invalidDescriptionMinMaxForParameterHasWrongType(MIN,paramName,ModelType.BIG_DECIMAL,getPathAddress(operation),description));
          return;
        }
        if (value.asBigDecimal().compareTo(min) == -1) {
          throw ControllerLogger.ROOT_LOGGER.validationFailedValueIsSmallerThanMin(value.asBigDecimal(),paramName,min,formatOperationForMessage(operation));
        }
      }
    break;
case BIG_INTEGER:
{
    final BigInteger min;
    try {
      min=describedProperty.get(MIN).asBigInteger();
    }
 catch (    IllegalArgumentException e) {
      throwOrWarnAboutDescriptorProblem(ControllerLogger.ROOT_LOGGER.invalidDescriptionMinMaxForParameterHasWrongType(MIN,paramName,ModelType.BIG_INTEGER,getPathAddress(operation),description));
      return;
    }
    if (value.asBigInteger().compareTo(min) == -1) {
      throw ControllerLogger.ROOT_LOGGER.validationFailedValueIsSmallerThanMin(value.asBigInteger(),paramName,min,formatOperationForMessage(operation));
    }
  }
break;
case DOUBLE:
{
final double min;
try {
  min=describedProperty.get(MIN).asDouble();
}
 catch (IllegalArgumentException e) {
  throwOrWarnAboutDescriptorProblem(ControllerLogger.ROOT_LOGGER.invalidDescriptionMinMaxForParameterHasWrongType(MIN,paramName,ModelType.DOUBLE,getPathAddress(operation),description));
  return;
}
if (value.asDouble() < min) {
  throw ControllerLogger.ROOT_LOGGER.validationFailedValueIsSmallerThanMin(value.asDouble(),paramName,min,formatOperationForMessage(operation));
}
}
break;
case INT:
{
final int min;
try {
min=describedProperty.get(MIN).asInt();
}
 catch (IllegalArgumentException e) {
throwOrWarnAboutDescriptorProblem(ControllerLogger.ROOT_LOGGER.invalidDescriptionMinMaxForParameterHasWrongType(MIN,paramName,ModelType.INT,getPathAddress(operation),description));
return;
}
if (value.asInt() < min) {
throw ControllerLogger.ROOT_LOGGER.validationFailedValueIsSmallerThanMin(value.asInt(),paramName,min,formatOperationForMessage(operation));
}
}
break;
case LONG:
{
final long min;
try {
min=describedProperty.get(MIN).asLong();
}
 catch (IllegalArgumentException e) {
throwOrWarnAboutDescriptorProblem(ControllerLogger.ROOT_LOGGER.invalidDescriptionMinMaxForParameterHasWrongType(MIN,paramName,ModelType.LONG,getPathAddress(operation),description));
return;
}
if (value.asLong() < describedProperty.get(MIN).asLong()) {
throw ControllerLogger.ROOT_LOGGER.validationFailedValueIsSmallerThanMin(value.asLong(),paramName,min,formatOperationForMessage(operation));
}
}
break;
}
}
if (describedProperty.hasDefined(MAX)) {
switch (modelType) {
case BIG_DECIMAL:
{
final BigDecimal max;
try {
max=describedProperty.get(MAX).asBigDecimal();
}
 catch (IllegalArgumentException e) {
throwOrWarnAboutDescriptorProblem(ControllerLogger.ROOT_LOGGER.invalidDescriptionMinMaxForParameterHasWrongType(MAX,paramName,ModelType.BIG_DECIMAL,getPathAddress(operation),description));
return;
}
if (value.asBigDecimal().compareTo(max) == 1) {
throw ControllerLogger.ROOT_LOGGER.validationFailedValueIsGreaterThanMax(value.asBigDecimal(),paramName,max,formatOperationForMessage(operation));
}
}
break;
case BIG_INTEGER:
{
final BigInteger max;
try {
max=describedProperty.get(MAX).asBigInteger();
}
 catch (IllegalArgumentException e) {
throwOrWarnAboutDescriptorProblem(ControllerLogger.ROOT_LOGGER.invalidDescriptionMinMaxForParameterHasWrongType(MAX,paramName,ModelType.BIG_INTEGER,getPathAddress(operation),description));
return;
}
if (value.asBigInteger().compareTo(max) == 1) {
throw ControllerLogger.ROOT_LOGGER.validationFailedValueIsGreaterThanMax(value.asBigInteger(),paramName,max,formatOperationForMessage(operation));
}
}
break;
case DOUBLE:
{
final double max;
try {
max=describedProperty.get(MAX).asDouble();
}
 catch (IllegalArgumentException e) {
throwOrWarnAboutDescriptorProblem(ControllerLogger.ROOT_LOGGER.invalidDescriptionMinMaxForParameterHasWrongType(MAX,paramName,ModelType.DOUBLE,getPathAddress(operation),description));
return;
}
if (value.asDouble() > max) {
throw ControllerLogger.ROOT_LOGGER.validationFailedValueIsGreaterThanMax(value.asDouble(),paramName,max,formatOperationForMessage(operation));
}
}
break;
case INT:
{
final int max;
try {
max=describedProperty.get(MAX).asInt();
}
 catch (IllegalArgumentException e) {
throwOrWarnAboutDescriptorProblem(ControllerLogger.ROOT_LOGGER.invalidDescriptionMinMaxForParameterHasWrongType(MAX,paramName,ModelType.INT,getPathAddress(operation),description));
return;
}
if (value.asInt() > max) {
throw ControllerLogger.ROOT_LOGGER.validationFailedValueIsGreaterThanMax(value.asInt(),paramName,max,formatOperationForMessage(operation));
}
}
break;
case LONG:
{
final Long max;
try {
max=describedProperty.get(MAX).asLong();
}
 catch (IllegalArgumentException e) {
throwOrWarnAboutDescriptorProblem(ControllerLogger.ROOT_LOGGER.invalidDescriptionMinMaxForParameterHasWrongType(MAX,paramName,ModelType.LONG,getPathAddress(operation),description));
return;
}
if (value.asLong() > describedProperty.get(MAX).asLong()) {
throw ControllerLogger.ROOT_LOGGER.validationFailedValueIsGreaterThanMax(value.asLong(),paramName,max,formatOperationForMessage(operation));
}
}
break;
}
}
if (describedProperty.hasDefined(MIN_LENGTH)) {
final int minLength;
try {
minLength=describedProperty.get(MIN_LENGTH).asInt();
}
 catch (IllegalArgumentException e) {
throwOrWarnAboutDescriptorProblem(ControllerLogger.ROOT_LOGGER.invalidDescriptionMinMaxLengthForParameterHasWrongType(MIN_LENGTH,paramName,getPathAddress(operation),description));
return;
}
switch (modelType) {
case LIST:
if (value.asList().size() < minLength) {
throw ControllerLogger.ROOT_LOGGER.validationFailedValueIsShorterThanMinLength(value.asList().size(),paramName,minLength,formatOperationForMessage(operation));
}
break;
case BYTES:
if (value.asBytes().length < minLength) {
throw ControllerLogger.ROOT_LOGGER.validationFailedValueIsShorterThanMinLength(value.asBytes().length,paramName,minLength,formatOperationForMessage(operation));
}
break;
case STRING:
if (value.asString().length() < minLength) {
throw ControllerLogger.ROOT_LOGGER.validationFailedValueIsShorterThanMinLength(value.asString().length(),paramName,minLength,formatOperationForMessage(operation));
}
break;
}
}
if (describedProperty.hasDefined(MAX_LENGTH)) {
final int maxLength;
try {
maxLength=describedProperty.get(MAX_LENGTH).asInt();
}
 catch (IllegalArgumentException e) {
throwOrWarnAboutDescriptorProblem(ControllerLogger.ROOT_LOGGER.invalidDescriptionMinMaxLengthForParameterHasWrongType(MAX_LENGTH,paramName,getPathAddress(operation),description));
return;
}
switch (modelType) {
case LIST:
if (value.asList().size() > maxLength) {
throw ControllerLogger.ROOT_LOGGER.validationFailedValueIsLongerThanMaxLength(value.asList().size(),paramName,maxLength,formatOperationForMessage(operation));
}
break;
case BYTES:
if (value.asBytes().length > maxLength) {
throw ControllerLogger.ROOT_LOGGER.validationFailedValueIsLongerThanMaxLength(value.asBytes().length,paramName,maxLength,formatOperationForMessage(operation));
}
break;
case STRING:
if (value.asString().length() > maxLength) {
throw ControllerLogger.ROOT_LOGGER.validationFailedValueIsLongerThanMaxLength(value.asString().length(),paramName,maxLength,formatOperationForMessage(operation));
}
break;
}
}
}
