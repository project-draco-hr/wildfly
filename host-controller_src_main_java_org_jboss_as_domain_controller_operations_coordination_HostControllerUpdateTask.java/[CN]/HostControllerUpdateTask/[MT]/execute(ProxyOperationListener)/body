{
  boolean trace=HOST_CONTROLLER_LOGGER.isTraceEnabled();
  if (trace) {
    HOST_CONTROLLER_LOGGER.tracef("Sending %s to %s",operation,name);
  }
  final TransactionalProtocolClient client=proxyController.getProtocolClient();
  final OperationMessageHandler messageHandler=new DelegatingMessageHandler(context);
  final OperationAttachments operationAttachments=new DelegatingOperationAttachments(context);
  final SubsystemInfoOperationListener subsystemListener=new SubsystemInfoOperationListener(listener,proxyController.getTransformers());
  try {
    final OperationTransformer.TransformedOperation transformationResult=proxyController.transformOperation(context,operation);
    final ModelNode transformedOperation=transformationResult.getTransformedOperation();
    final ProxyOperation proxyOperation=new ProxyOperation(name,transformedOperation,messageHandler,operationAttachments);
    try {
      final AsyncFuture<ModelNode> result=client.execute(subsystemListener,proxyOperation);
      return new ExecutedHostRequest(result,transformationResult);
    }
 catch (    IOException e) {
      final TransactionalProtocolClient.PreparedOperation<ProxyOperation> result=BlockingQueueOperationListener.FailedOperation.create(proxyOperation,e);
      subsystemListener.operationPrepared(result);
      return new ExecutedHostRequest(result.getFinalResult(),transformationResult);
    }
  }
 catch (  OperationFailedException e) {
    final ProxyOperation proxyOperation=new ProxyOperation(name,operation,messageHandler,operationAttachments);
    final TransactionalProtocolClient.PreparedOperation<ProxyOperation> result=BlockingQueueOperationListener.FailedOperation.create(proxyOperation,e);
    subsystemListener.operationPrepared(result);
    return new ExecutedHostRequest(result.getFinalResult(),OperationResultTransformer.ORIGINAL_RESULT,OperationTransformer.DEFAULT_REJECTION_POLICY);
  }
}
