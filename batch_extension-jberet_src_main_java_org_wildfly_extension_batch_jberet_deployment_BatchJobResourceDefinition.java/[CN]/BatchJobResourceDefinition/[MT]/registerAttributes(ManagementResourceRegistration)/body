{
  resourceRegistration.registerReadOnlyAttribute(RUNNING_EXECUTIONS,new JobOperationReadOnlyStepHandler(){
    @Override protected void updateModel(    final OperationContext context,    final ModelNode model,    final JobOperator jobOperator,    final String jobName) throws OperationFailedException {
      model.set(jobOperator.getRunningExecutions(jobName).size());
    }
  }
);
  resourceRegistration.registerReadOnlyAttribute(INSTANCE_COUNT,new JobOperationReadOnlyStepHandler(){
    @Override protected void updateModel(    final OperationContext context,    final ModelNode model,    final JobOperator jobOperator,    final String jobName) throws OperationFailedException {
      model.set(jobOperator.getJobInstanceCount(jobName));
    }
  }
);
  resourceRegistration.registerReadOnlyAttribute(JOB_XML_NAMES,new JobOperationReadOnlyStepHandler(){
    @Override protected void updateModel(    final OperationContext context,    final ModelNode model,    final JobOperator jobOperator,    final String jobName) throws OperationFailedException {
      final ModelNode list=model.setEmptyList();
      if (jobOperator instanceof JobOperatorService) {
        final JobOperatorService jobOperatorService=(JobOperatorService)jobOperator;
        for (        String jobXmlName : jobOperatorService.getJobDescriptors().getJobXmlNames(jobName)) {
          list.add(jobXmlName);
        }
      }
    }
  }
);
}
