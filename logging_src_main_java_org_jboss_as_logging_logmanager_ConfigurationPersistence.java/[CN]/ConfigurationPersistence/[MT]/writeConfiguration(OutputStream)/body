{
  try {
    final PrintStream out=new PrintStream(outputStream,true,ENCODING);
    try {
      final Set<String> implicitHandlers=new HashSet<String>();
      final Set<String> implicitFormatters=new HashSet<String>();
      final Set<String> implicitErrorManagers=new HashSet<String>();
      final List<String> loggerNames=config.getLoggerNames();
      writePropertyComment(out,"Additional loggers to configure (the root logger is always configured)");
      writeProperty(out,"loggers",toCsvString(loggerNames));
      final LoggerConfiguration rootLogger=config.getLoggerConfiguration("");
      writeLoggerConfiguration(out,rootLogger,implicitHandlers);
      loggerNames.remove("");
      for (      String loggerName : loggerNames) {
        writeLoggerConfiguration(out,config.getLoggerConfiguration(loggerName),implicitHandlers);
      }
      final List<String> allHandlerNames=config.getHandlerNames();
      final List<String> explicitHandlerNames=new ArrayList<String>(allHandlerNames);
      explicitHandlerNames.removeAll(implicitHandlers);
      if (!explicitHandlerNames.isEmpty()) {
        writePropertyComment(out,"Additional handlers to configure");
        writeProperty(out,"handlers",toCsvString(explicitHandlerNames));
        out.println();
      }
      for (      String handlerName : allHandlerNames) {
        writeHandlerConfiguration(out,config.getHandlerConfiguration(handlerName),implicitHandlers,implicitFormatters,implicitErrorManagers);
      }
      final List<String> allFilterNames=config.getFilterNames();
      if (!allFilterNames.isEmpty()) {
        writePropertyComment(out,"Additional filters to configure");
        writeProperty(out,"filters",toCsvString(allFilterNames));
        out.println();
      }
      for (      String filterName : allFilterNames) {
        writeFilterConfiguration(out,config.getFilterConfiguration(filterName));
      }
      final List<String> allFormatterNames=config.getFormatterNames();
      final ArrayList<String> explicitFormatterNames=new ArrayList<String>(allFormatterNames);
      explicitFormatterNames.removeAll(implicitFormatters);
      if (!explicitFormatterNames.isEmpty()) {
        writePropertyComment(out,"Additional formatters to configure");
        writeProperty(out,"formatters",toCsvString(explicitFormatterNames));
        out.println();
      }
      for (      String formatterName : allFormatterNames) {
        writeFormatterConfiguration(out,config.getFormatterConfiguration(formatterName));
      }
      final List<String> allErrorManagerNames=config.getErrorManagerNames();
      final ArrayList<String> explicitErrorManagerNames=new ArrayList<String>(allErrorManagerNames);
      explicitErrorManagerNames.removeAll(implicitErrorManagers);
      if (!explicitErrorManagerNames.isEmpty()) {
        writePropertyComment(out,"Additional errorManagers to configure");
        writeProperty(out,"errorManagers",toCsvString(explicitErrorManagerNames));
        out.println();
      }
      for (      String errorManagerName : allErrorManagerNames) {
        writeErrorManagerConfiguration(out,config.getErrorManagerConfiguration(errorManagerName));
      }
      out.close();
    }
  finally {
      safeClose(out);
    }
    outputStream.close();
  }
  finally {
    safeClose(outputStream);
  }
}
