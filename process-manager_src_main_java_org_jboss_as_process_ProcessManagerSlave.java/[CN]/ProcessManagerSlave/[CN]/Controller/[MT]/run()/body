{
  final InputStream input=ProcessManagerSlave.this.input;
  final StringBuilder b=new StringBuilder();
  try {
    for (; ; ) {
      Status status=StreamUtils.readWord(input,b);
      if (status == Status.END_OF_STREAM) {
        shutdown();
        break;
      }
      try {
        final Command command=Command.valueOf(b.toString());
switch (command) {
case SHUTDOWN:
{
            shutdown();
            break;
          }
case SHUTDOWN_SERVERS:
{
          handler.shutdownServers();
          break;
        }
case DOWN:
{
        if (status == Status.MORE) {
          status=StreamUtils.readWord(input,b);
          handler.down(b.toString());
        }
        break;
      }
case MSG:
{
      if (status == Status.MORE) {
        status=StreamUtils.readWord(input,b);
        final String sourceProcess=b.toString();
        final List<String> msg=new ArrayList<String>();
        while (status == Status.MORE) {
          status=StreamUtils.readWord(input,b);
          msg.add(b.toString());
        }
        if (status == Status.END_OF_LINE) {
          try {
            handler.handleMessage(sourceProcess,msg);
          }
 catch (          Throwable t) {
          }
        }
      }
      break;
    }
case MSG_BYTES:
{
    if (status == Status.MORE) {
      status=StreamUtils.readWord(input,b);
      final String sourceProcess=b.toString();
      if (status == Status.MORE) {
        try {
          handler.handleMessage(sourceProcess,StreamUtils.readBytesWithLength(input));
        }
 catch (        Throwable t) {
        }
        status=StreamUtils.readStatus(input);
      }
    }
    break;
  }
}
}
 catch (IllegalArgumentException e) {
}
if (status == Status.MORE) StreamUtils.readToEol(input);
}
}
 catch (IOException e) {
shutdown();
}
}
