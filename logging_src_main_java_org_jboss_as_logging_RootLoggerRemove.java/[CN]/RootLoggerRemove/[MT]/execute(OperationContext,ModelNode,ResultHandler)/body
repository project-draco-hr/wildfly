{
  final ModelNode subModel=context.getSubModel();
  final ModelNode compensatingOperation=new ModelNode();
  compensatingOperation.get(OP_ADDR).set(operation.require(OP_ADDR));
  compensatingOperation.get(OP).set("set-root-logger");
  compensatingOperation.get(CommonAttributes.LEVEL).set(subModel.get(CommonAttributes.ROOT_LOGGER,CommonAttributes.LEVEL));
  compensatingOperation.get(CommonAttributes.HANDLERS).set(subModel.get(CommonAttributes.ROOT_LOGGER,CommonAttributes.HANDLERS));
  if (context instanceof RuntimeOperationContext) {
    final RuntimeOperationContext runtimeContext=(RuntimeOperationContext)context;
    final ServiceRegistry registry=runtimeContext.getServiceRegistry();
    final ServiceController<?> controller=runtimeContext.getServiceRegistry().getService(LogServices.ROOT_LOGGER);
    if (controller != null) {
      controller.setMode(ServiceController.Mode.REMOVE);
    }
    if (subModel.get(CommonAttributes.ROOT_LOGGER).has(CommonAttributes.HANDLERS)) {
      LogServices.uninstallLoggerHandlers(registry,"",subModel.get(CommonAttributes.ROOT_LOGGER,CommonAttributes.HANDLERS));
    }
  }
  subModel.get(CommonAttributes.ROOT_LOGGER).clear();
  resultHandler.handleResultComplete(compensatingOperation);
  return Cancellable.NULL;
}
