{
  params.address=operation.require(OP_ADDR);
  PathAddress pathAddress=PathAddress.pathAddress(params.address);
  params.name=pathAddress.getLastElement().getValue();
  ModelNode tfNode=PoolAttributeDefinitions.THREAD_FACTORY.resolveModelAttribute(context,model);
  params.threadFactory=tfNode.isDefined() ? tfNode.asString() : null;
  params.maxThreads=PoolAttributeDefinitions.MAX_THREADS.resolveModelAttribute(context,model).asInt();
  if (model.hasDefined(KEEPALIVE_TIME)) {
    ModelNode keepaliveTime=model.get(KEEPALIVE_TIME);
    if (!keepaliveTime.hasDefined(TIME)) {
      throw ThreadsLogger.ROOT_LOGGER.missingKeepAliveTime(TIME,KEEPALIVE_TIME);
    }
    if (!keepaliveTime.hasDefined(UNIT)) {
      throw ThreadsLogger.ROOT_LOGGER.missingKeepAliveUnit(UNIT,KEEPALIVE_TIME);
    }
    long time=KeepAliveTimeAttributeDefinition.KEEPALIVE_TIME_TIME.resolveModelAttribute(context,keepaliveTime).asLong();
    String unit=KeepAliveTimeAttributeDefinition.KEEPALIVE_TIME_UNIT.resolveModelAttribute(context,keepaliveTime).asString();
    params.keepAliveTime=new TimeSpec(Enum.valueOf(TimeUnit.class,unit.toUpperCase()),time);
  }
  return params;
}
