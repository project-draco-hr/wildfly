{
  listeners.add(listener);
  if (fileSystemWatcher == null) {
    fileSystemWatcher=Xnio.getInstance().createFileSystemWatcher("Watcher for " + base,OptionMap.EMPTY);
    try {
      final File base=this.base.getPhysicalFile();
      fileSystemWatcher.watchPath(base,new FileChangeCallback(){
        @Override public void handleChanges(        Collection<FileChangeEvent> changes){
synchronized (VirtualFileResourceManager.this) {
            String basePath=base.getAbsolutePath();
            final List<ResourceChangeEvent> events=new ArrayList<ResourceChangeEvent>();
            for (            FileChangeEvent change : changes) {
              if (change.getFile().getAbsolutePath().startsWith(basePath)) {
                String path=change.getFile().getAbsolutePath().substring(basePath.length());
                events.add(new ResourceChangeEvent(path,ResourceChangeEvent.Type.valueOf(change.getType().name())));
              }
            }
            for (            ResourceChangeListener listener : listeners) {
              listener.handleChanges(events);
            }
          }
        }
      }
);
    }
 catch (    IOException e) {
    }
  }
}
