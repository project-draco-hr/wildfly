{
  final String operationName=operation.require(OP).asString();
  HornetQComponentControl control=null;
  boolean appliedToRuntime=false;
  Object handback=null;
  if (READ_ATTRIBUTE_OPERATION.equals(operationName)) {
    readAttributeValidator.validate(operation);
    final String name=operation.require(NAME).asString();
    if (STARTED.equals(name)) {
      control=getHornetQComponentControl(context,operation,false);
      context.getResult().set(control.isStarted());
    }
 else {
      handleReadAttribute(name,context,operation);
    }
  }
 else   if (START.equals(operationName)) {
    control=getHornetQComponentControl(context,operation,true);
    try {
      control.start();
      appliedToRuntime=true;
      context.getResult();
    }
 catch (    Exception e) {
      context.getFailureDescription().set(e.toString());
    }
  }
 else   if (STOP.equals(operationName)) {
    control=getHornetQComponentControl(context,operation,true);
    try {
      control.stop();
      appliedToRuntime=true;
      context.getResult();
    }
 catch (    Exception e) {
      context.getFailureDescription().set(e.toString());
    }
  }
 else {
    handback=handleOperation(operationName,context,operation);
    appliedToRuntime=handback != null;
  }
  if (context.completeStep() != OperationContext.ResultAction.KEEP && appliedToRuntime) {
    try {
      if (START.equals(operationName)) {
        control.stop();
      }
 else       if (STOP.equals(operationName)) {
        control.start();
      }
 else {
        handleRevertOperation(operationName,context,operation,handback);
      }
    }
 catch (    Exception e) {
      log.errorf(e,String.format("%s caught exception attempting to revert operation %s at address %s",getClass().getSimpleName(),operation.require(ModelDescriptionConstants.OP).asString(),PathAddress.pathAddress(operation.require(ModelDescriptionConstants.OP_ADDR))));
    }
  }
}
