{
  if (buffer.isEmpty()) {
    for (    String cmd : cmdRegistry.getTabCompletionCommands()) {
      CommandHandler handler=cmdRegistry.getCommandHandler(cmd);
      if (handler.isAvailable(ctx)) {
        candidates.add(cmd);
      }
    }
    Collections.sort(candidates);
    candidates.add(OperationFormat.INSTANCE.getAddressOperationSeparator());
    return 0;
  }
  final DefaultCallbackHandler parsedCmd=(DefaultCallbackHandler)ctx.getParsedCommandLine();
  try {
    parsedCmd.parse(ctx.getCurrentNodePath(),buffer,false,ctx);
  }
 catch (  UnresolvedVariableException e) {
    final String variable=e.getExpression();
    if (buffer.endsWith(variable)) {
      for (      String var : ctx.getVariables()) {
        if (var.startsWith(variable)) {
          candidates.add(var);
        }
      }
      Collections.sort(candidates);
      return buffer.length() - variable.length();
    }
 else {
    }
    return -1;
  }
catch (  CommandSubstitutionException e) {
    final String cmd=e.getExpression();
    if (buffer.endsWith(cmd)) {
      int i=doComplete(ctx,cmd,0,candidates);
      if (i < 0) {
        return -1;
      }
      return buffer.length() - cmd.length() + i;
    }
 else {
    }
    return -1;
  }
catch (  CommandFormatException e) {
    if (!parsedCmd.endsOnAddressOperationNameSeparator() || !parsedCmd.endsOnSeparator()) {
      return -1;
    }
  }
  final OperationCandidatesProvider candidatesProvider;
  if (buffer.isEmpty() || parsedCmd.getFormat() == CommandFormat.INSTANCE) {
    candidatesProvider=cmdProvider;
  }
 else {
    candidatesProvider=ctx.getOperationCandidatesProvider();
  }
  final int result=OperationRequestCompleter.INSTANCE.complete(ctx,candidatesProvider,buffer,cursor,candidates);
  if (candidates.isEmpty() && buffer.charAt(buffer.length() - 1) == '$' && !ctx.getVariables().isEmpty()) {
    candidates.addAll(ctx.getVariables());
    Collections.sort(candidates);
    return buffer.length();
  }
  return result;
}
