{
  final ExecutorService executor=executorInjector.getValue();
  final Runnable task=new Runnable(){
    @Override public void run(){
      try {
        PhaseOnePersistenceUnitServiceImpl phaseOnePersistenceUnitService=phaseOnePersistenceUnitServiceInjectedValue.getOptionalValue();
        WritableServiceBasedNamingStore.pushOwner(deploymentUnitServiceName);
        if (phaseOnePersistenceUnitService != null) {
          JPA_LOGGER.startingPersistenceUnitService(2,pu.getScopedPersistenceUnitName());
          phaseOnePersistenceUnitService.setSecondPhaseStarted(true);
          if (beanManagerInjector.getOptionalValue() != null) {
            phaseOnePersistenceUnitService.getBeanManager().setDelegate(beanManagerInjector.getOptionalValue());
          }
          entityManagerFactory=phaseOnePersistenceUnitService.getEntityManagerFactoryBuilder().build();
        }
 else {
          JPA_LOGGER.startingService("Persistence Unit",pu.getScopedPersistenceUnitName());
          pu.setTempClassLoaderFactory(new TempClassLoaderFactoryImpl(classLoader));
          pu.setJtaDataSource(jtaDataSource.getOptionalValue());
          pu.setNonJtaDataSource(nonJtaDataSource.getOptionalValue());
          if (beanManagerInjector.getOptionalValue() != null) {
            properties.getValue().put(CDI_BEAN_MANAGER,beanManagerInjector.getOptionalValue());
          }
          entityManagerFactory=createContainerEntityManagerFactory();
        }
        persistenceUnitRegistry.add(getScopedPersistenceUnitName(),getValue());
        context.complete();
      }
 catch (      Throwable t) {
        context.failed(new StartException(t));
      }
 finally {
        pu.setTempClassLoaderFactory(null);
        WritableServiceBasedNamingStore.popOwner();
      }
    }
  }
;
  context.asynchronous();
  executor.execute(task);
}
