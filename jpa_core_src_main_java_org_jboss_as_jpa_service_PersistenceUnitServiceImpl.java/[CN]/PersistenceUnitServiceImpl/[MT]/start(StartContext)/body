{
  final ExecutorService executor=executorInjector.getValue();
  final AccessControlContext accessControlContext=AccessController.doPrivileged(GetAccessControlContextAction.getInstance());
  final Runnable task=new Runnable(){
    @Override public void run(){
      PrivilegedAction<Void> privilegedAction=new PrivilegedAction<Void>(){
        @Override public Void run(){
          try {
            PhaseOnePersistenceUnitServiceImpl phaseOnePersistenceUnitService=phaseOnePersistenceUnitServiceInjectedValue.getOptionalValue();
            WritableServiceBasedNamingStore.pushOwner(deploymentUnitServiceName);
            if (validatorFactory != null) {
              properties.getValue().put(VALIDATOR_FACTORY,validatorFactory);
            }
            if (phaseOnePersistenceUnitService != null) {
              JPA_LOGGER.startingPersistenceUnitService(2,pu.getScopedPersistenceUnitName());
              phaseOnePersistenceUnitService.setSecondPhaseStarted(true);
              if (beanManagerInjector.getOptionalValue() != null) {
                proxyBeanManager=phaseOnePersistenceUnitService.getBeanManager();
                proxyBeanManager.setDelegate(beanManagerInjector.getOptionalValue());
              }
              EntityManagerFactoryBuilder emfBuilder=phaseOnePersistenceUnitService.getEntityManagerFactoryBuilder();
              if (validatorFactory != null) {
                emfBuilder.withValidatorFactory(validatorFactory);
              }
              entityManagerFactory=emfBuilder.build();
            }
 else {
              JPA_LOGGER.startingService("Persistence Unit",pu.getScopedPersistenceUnitName());
              pu.setTempClassLoaderFactory(new TempClassLoaderFactoryImpl(classLoader));
              pu.setJtaDataSource(jtaDataSource.getOptionalValue());
              pu.setNonJtaDataSource(nonJtaDataSource.getOptionalValue());
              if (beanManagerInjector.getOptionalValue() != null) {
                proxyBeanManager=new ProxyBeanManager();
                proxyBeanManager.setDelegate(beanManagerInjector.getOptionalValue());
                properties.getValue().put(CDI_BEAN_MANAGER,proxyBeanManager);
              }
              entityManagerFactory=createContainerEntityManagerFactory();
            }
            persistenceUnitRegistry.add(getScopedPersistenceUnitName(),getValue());
            context.complete();
          }
 catch (          Throwable t) {
            context.failed(new StartException(t));
          }
 finally {
            pu.setTempClassLoaderFactory(null);
            WritableServiceBasedNamingStore.popOwner();
          }
          return null;
        }
      }
;
      WildFlySecurityManager.doChecked(privilegedAction,accessControlContext);
    }
  }
;
  context.asynchronous();
  executor.execute(task);
}
