{
  final DeploymentUnit deploymentUnit=phaseContext.getDeploymentUnit();
  final ServiceTarget serviceTarget=phaseContext.getServiceTarget();
  final EEModuleDescription moduleDescription=deploymentUnit.getAttachment(org.jboss.as.ee.component.Attachments.EE_MODULE_DESCRIPTION);
  final Catalog catalog=new Catalog();
  final TransactionEntityMap entityMap=new TransactionEntityMap();
  final ServiceName entityMapServiceName=deploymentUnit.getServiceName().append("cmp","entity-map");
  serviceTarget.addService(entityMapServiceName,entityMap).addDependency(TxnServices.JBOSS_TXN_TRANSACTION_MANAGER,TransactionManager.class,entityMap.getTransactionManagerInjector()).install();
  final ServiceName relationsBarrierName=deploymentUnit.getServiceName().append("jdbc","store-manager","relations-barrier");
  final ServiceBuilder<?> relationsBarrierBuilder=serviceTarget.addService(relationsBarrierName,Service.NULL);
  final ServiceName startBarrierName=deploymentUnit.getServiceName().append("jdbc","store-manager","start-barrier");
  final ServiceBuilder<?> startBarrierBuilder=serviceTarget.addService(startBarrierName,Service.NULL);
  final ServiceName fkBarrierName=deploymentUnit.getServiceName().append("jdbc","store-manager","fk-barrier");
  final ServiceBuilder<?> fkBarrierBuilder=serviceTarget.addService(fkBarrierName,Service.NULL);
  for (  final ComponentDescription component : moduleDescription.getComponentDescriptions()) {
    if (component instanceof CmpEntityBeanComponentDescription) {
      final ServiceName serviceNameBase=component.getServiceName().append("jdbc","store-manager");
      final ServiceName initName=serviceNameBase.append("INIT");
      final ServiceName relationsName=serviceNameBase.append("RELATIONS");
      final ServiceName startName=serviceNameBase.append("START");
      relationsBarrierBuilder.addDependency(initName);
      startBarrierBuilder.addDependency(relationsName);
      fkBarrierBuilder.addDependency(startName);
      component.getConfigurators().add(new ComponentConfigurator(){
        public void configure(        final DeploymentPhaseContext context,        final ComponentDescription description,        final ComponentConfiguration configuration) throws DeploymentUnitProcessingException {
          final CmpEntityBeanComponentDescription componentDescription=(CmpEntityBeanComponentDescription)description;
          final JDBCEntityMetaData entityMetaData=componentDescription.getEntityMetaData();
          final JDBCStoreManager storeManager=new JDBCStoreManager(context.getDeploymentUnit(),entityMetaData,new CmpConfig(),catalog);
          final JdbcStoreManagerInitService initService=new JdbcStoreManagerInitService(storeManager);
          final ServiceBuilder<?> initBuilder=context.getServiceTarget().addService(initName,initService);
          initBuilder.addDependency(KeyGeneratorFactoryRegistry.SERVICE_NAME,KeyGeneratorFactoryRegistry.class,storeManager.getKeyGeneratorFactoryInjector());
          addDataSourceDependency(initBuilder,storeManager,entityMetaData.getDataSourceName());
          for (          JDBCRelationshipRoleMetaData roleMetaData : entityMetaData.getRelationshipRoles()) {
            final String dsName=roleMetaData.getRelationMetaData().getDataSourceName();
            if (dsName != null) {
              addDataSourceDependency(initBuilder,storeManager,dsName);
            }
          }
          initBuilder.addDependency(description.getCreateServiceName(),CmpEntityBeanComponent.class,storeManager.getComponentInjector());
          initBuilder.install();
          final JdbcStoreManagerRelationshipsService resolveRelationshipsService=new JdbcStoreManagerRelationshipsService(storeManager);
          context.getServiceTarget().addService(relationsName,resolveRelationshipsService).addDependency(relationsBarrierName).install();
          final JdbcStoreManagerStartService startService=new JdbcStoreManagerStartService(storeManager);
          context.getServiceTarget().addService(startName,startService).addDependency(startBarrierName).install();
          final JdbcStoreManagerForeignKeysService fkService=new JdbcStoreManagerForeignKeysService(storeManager);
          final ServiceName fkName=serviceNameBase.append("FOREIGN_KEYS");
          context.getServiceTarget().addService(fkName,fkService).addDependency(fkBarrierName).install();
          final InjectedValue<JDBCEntityPersistenceStore> persistenceStoreInjector=new InjectedValue<JDBCEntityPersistenceStore>();
          configuration.getCreateDependencies().add(new DependencyConfigurator<Service<Component>>(){
            public void configureDependency(            final ServiceBuilder<?> serviceBuilder,            final Service<Component> service) throws DeploymentUnitProcessingException {
              final CmpEntityBeanComponentCreateService createService=(CmpEntityBeanComponentCreateService)service;
              createService.setStoreManagerValue(persistenceStoreInjector);
              serviceBuilder.addDependency(entityMapServiceName,TransactionEntityMap.class,createService.getTransactionEntityMapInjector());
            }
          }
);
          configuration.getStartDependencies().add(new DependencyConfigurator<ComponentStartService>(){
            public void configureDependency(            ServiceBuilder<?> serviceBuilder,            ComponentStartService service) throws DeploymentUnitProcessingException {
              serviceBuilder.addDependency(initName,JDBCEntityPersistenceStore.class,persistenceStoreInjector);
              serviceBuilder.addDependency(fkName);
            }
          }
);
        }
      }
);
    }
  }
  relationsBarrierBuilder.install();
  startBarrierBuilder.install();
  fkBarrierBuilder.install();
}
