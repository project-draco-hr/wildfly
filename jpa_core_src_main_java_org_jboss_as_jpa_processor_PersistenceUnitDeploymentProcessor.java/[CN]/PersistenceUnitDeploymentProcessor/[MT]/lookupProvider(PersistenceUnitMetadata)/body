{
  String persistenceProviderModule=pu.getProperties().getProperty(Configuration.PROVIDER_MODULE);
  String persistenceProviderClassName=pu.getPersistenceProviderClassName();
  if (persistenceProviderClassName == null) {
    persistenceProviderClassName=Configuration.PROVIDER_CLASS_DEFAULT;
  }
  if (persistenceProviderModule == null) {
    if (persistenceProviderClassName.equals(Configuration.PROVIDER_CLASS_DEFAULT)) {
      persistenceProviderModule=Configuration.PROVIDER_MODULE_DEFAULT;
    }
  }
  PersistenceProvider provider=getProviderByName(pu,persistenceProviderModule);
  if (provider == null) {
    if (persistenceProviderModule != null) {
      final ModuleLoader moduleLoader=Module.getBootModuleLoader();
      Module module=null;
      try {
        module=moduleLoader.loadModule(ModuleIdentifier.fromString(persistenceProviderModule));
      }
 catch (      ModuleLoadException e) {
        throw new DeploymentUnitProcessingException("persistence provider module load error " + persistenceProviderModule + " (class "+ persistenceProviderClassName+ ")",e);
      }
      final ServiceLoader<PersistenceProvider> serviceLoader=module.loadService(PersistenceProvider.class);
      if (serviceLoader != null) {
        PersistenceProvider persistenceProvider=null;
        for (        PersistenceProvider provider1 : serviceLoader) {
          if (persistenceProviderClassName.equals(provider1.getClass().getName())) {
            persistenceProvider=provider1;
          }
        }
        if (persistenceProvider == null) {
          ArrayList<String> providerClasses=new ArrayList<String>();
          for (          PersistenceProvider provider2 : serviceLoader) {
            providerClasses.add(provider2.getClass().getName());
          }
          throw new DeploymentUnitProcessingException(pu.getPersistenceUnitName() + " used incorrect persistence provider class name. Module = " + persistenceProviderModule+ "), persistenceProvider specified = "+ persistenceProviderClassName+ ", providers found = {"+ providerClasses+ " }");
        }
        PersistenceProviderResolverImpl.getInstance().addPersistenceProvider(persistenceProvider);
      }
    }
  }
  if (provider == null)   provider=getProviderByName(pu,persistenceProviderModule);
  if (provider == null)   throw new PersistenceException("PersistenceProvider '" + persistenceProviderClassName + "' not found");
  return provider;
}
