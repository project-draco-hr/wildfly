{
  final ModelNode address=new ModelNode();
  address.add("toto","testSubsystem");
  final ModelNode operation=new ModelNode();
  operation.get(ModelDescriptionConstants.OP).set("operation-with-transformer");
  operation.get(ModelDescriptionConstants.OP_ADDR).set(address);
  operation.get("test").set("a");
  OperationTransformer.TransformedOperation op=transformOperation(operation);
  final ModelNode transformed=op.getTransformedOperation();
  System.out.println(transformed);
  Assert.assertEquals(COMPOSITE,transformed.get(OP).asString());
  Assert.assertEquals(new ModelNode().setEmptyList(),transformed.get(OP_ADDR));
  Assert.assertEquals(ModelType.LIST,transformed.get(STEPS).getType());
  Assert.assertEquals(2,transformed.get(STEPS).asList().size());
  ModelNode remove=transformed.get(STEPS).asList().get(0);
  Assert.assertEquals(2,remove.keys().size());
  Assert.assertEquals(REMOVE,remove.get(OP).asString());
  Assert.assertEquals(PATH,PathAddress.pathAddress(remove.get(OP_ADDR)).iterator().next());
  ModelNode add=transformed.get(STEPS).asList().get(1);
  Assert.assertEquals(4,add.keys().size());
  Assert.assertEquals(ADD,add.get(OP).asString());
  Assert.assertEquals(PATH,PathAddress.pathAddress(add.get(OP_ADDR)).iterator().next());
  Assert.assertEquals("a",add.get("test").asString());
  Assert.assertEquals("shiny",add.get("new").asString());
}
