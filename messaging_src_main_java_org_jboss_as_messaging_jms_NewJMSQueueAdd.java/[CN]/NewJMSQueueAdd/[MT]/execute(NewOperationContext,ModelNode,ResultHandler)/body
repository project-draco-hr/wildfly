{
  final PathAddress address=PathAddress.pathAddress(operation.require(OP_ADDR));
  final String name=address.getLastElement().getValue();
  final ModelNode compensatingOperation=new ModelNode();
  compensatingOperation.get(OP).set(REMOVE);
  compensatingOperation.get(OP_ADDR).set(operation.require(OP_ADDR));
  if (context instanceof NewRuntimeOperationContext) {
    final NewRuntimeOperationContext runtimeContext=(NewRuntimeOperationContext)context;
    final JMSQueueService service=new JMSQueueService(name,operation.get(SELECTOR).asString(),operation.get(DURABLE).asBoolean(true),jndiBindings(operation));
    final ServiceName serviceName=JMSServices.JMS_QUEUE_BASE.append(name);
    runtimeContext.getServiceTarget().addService(serviceName,service).addDependency(JMSServices.JMS_MANAGER,JMSServerManager.class,service.getJmsServer()).setInitialMode(Mode.ACTIVE).install();
  }
  final ModelNode subModel=context.getSubModel();
  if (operation.get(SELECTOR).isDefined()) {
    subModel.get(SELECTOR).set(operation.get(SELECTOR));
  }
  if (operation.get(DURABLE).isDefined()) {
    subModel.get(DURABLE).set(operation.get(DURABLE));
  }
  if (operation.get(ENTRIES).isDefined()) {
    subModel.get(ENTRIES).set(operation.get(ENTRIES));
  }
  resultHandler.handleResultComplete(compensatingOperation);
  return Cancellable.NULL;
}
