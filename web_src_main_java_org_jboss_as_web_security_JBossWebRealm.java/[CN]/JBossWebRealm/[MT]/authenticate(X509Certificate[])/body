{
  if ((certs == null) || (certs.length < 1))   return (null);
  if (authenticationManager == null)   throw MESSAGES.noAuthenticationManager();
  if (authorizationManager == null)   throw MESSAGES.noAuthorizationManager();
  Principal incomingPrincipal=certMapping.toPrincipal(certs);
  Principal userPrincipal=null;
  try {
    Subject subject=new Subject();
    boolean isValid=authenticationManager.isValid(incomingPrincipal,certs,subject);
    if (isValid) {
      WebLogger.WEB_SECURITY_LOGGER.tracef("User: " + incomingPrincipal + " is authenticated");
      SecurityContext sc=SecurityActions.getSecurityContext();
      if (sc == null)       throw new IllegalStateException("No SecurityContext found!");
      sc.getUtil().createSubjectInfo(incomingPrincipal,certs,subject);
      userPrincipal=getPrincipal(subject);
      SecurityContextCallbackHandler scb=new SecurityContextCallbackHandler(sc);
      if (mappingManager != null) {
        MappingContext<RoleGroup> mc=mappingManager.getMappingContext(MappingType.ROLE.name());
        if (mc != null && mc.hasModules()) {
          SecurityRolesAssociation.setSecurityRoles(principalVersusRolesMap);
        }
      }
      RoleGroup roles=authorizationManager.getSubjectRoles(subject,scb);
      List<Role> rolesAsList=roles.getRoles();
      List<String> rolesAsStringList=new ArrayList<String>();
      for (      Role role : rolesAsList) {
        rolesAsStringList.add(role.getRoleName());
      }
      if (mappingManager != null) {
        MappingContext<RoleGroup> mc=mappingManager.getMappingContext(MappingType.ROLE.name());
        if (mc == null || !mc.hasModules()) {
          rolesAsStringList=mapUserRoles(rolesAsStringList);
        }
      }
 else       rolesAsStringList=mapUserRoles(rolesAsStringList);
      if (authenticationManager instanceof CacheableManager) {
        @SuppressWarnings("unchecked") CacheableManager<?,Principal> cm=(CacheableManager<?,Principal>)authenticationManager;
        userPrincipal=new JBossGenericPrincipal(this,incomingPrincipal.getName(),null,rolesAsStringList,userPrincipal,null,certs,cm,subject);
      }
 else       userPrincipal=new JBossGenericPrincipal(this,incomingPrincipal.getName(),null,rolesAsStringList,userPrincipal,null,certs,null,subject);
    }
 else {
      WebLogger.WEB_SECURITY_LOGGER.tracef("User: " + userPrincipal + " is NOT authenticated");
      userPrincipal=null;
    }
  }
 catch (  Exception e) {
    WebLogger.WEB_SECURITY_LOGGER.authenticateErrorCert(e);
    exceptionAudit(userPrincipal,null,e);
  }
  if (userPrincipal != null) {
    successAudit(userPrincipal,null);
  }
  return userPrincipal;
}
