{
  if (username == null && credentials == null)   return null;
  if (authenticationManager == null)   throw new IllegalStateException("Authentication Manager has not been set");
  if (authorizationManager == null)   throw new IllegalStateException("Authorization Manager has not been set");
  Principal userPrincipal=getPrincipal(username);
  Subject subject=new Subject();
  boolean isValid=authenticationManager.isValid(userPrincipal,credentials,subject);
  if (isValid) {
    if (log.isTraceEnabled()) {
      log.trace("User: " + userPrincipal + " is authenticated");
    }
    SecurityContext sc=SecurityActions.createSecurityContext(authenticationManager.getSecurityDomain());
    userPrincipal=getPrincipal(subject);
    sc.getUtil().createSubjectInfo(userPrincipal,credentials,subject);
    SecurityActions.setSecurityContextOnAssociation(sc);
    SecurityContextCallbackHandler scb=new SecurityContextCallbackHandler(sc);
    if (mappingManager != null) {
      MappingContext<RoleGroup> mc=mappingManager.getMappingContext(MappingType.ROLE.name());
      if (mc != null && mc.hasModules()) {
        SecurityRolesAssociation.setSecurityRoles(principalVersusRolesMap);
      }
    }
    RoleGroup roles=authorizationManager.getSubjectRoles(subject,scb);
    List<Role> rolesAsList=roles.getRoles();
    List<String> rolesAsStringList=new ArrayList<String>();
    for (    Role role : rolesAsList) {
      rolesAsStringList.add(role.getRoleName());
    }
    if (mappingManager != null) {
      MappingContext<RoleGroup> mc=mappingManager.getMappingContext(MappingType.ROLE.name());
      if (mc == null || !mc.hasModules()) {
        rolesAsStringList=mapUserRoles(rolesAsStringList);
      }
    }
 else     rolesAsStringList=mapUserRoles(rolesAsStringList);
    if (authenticationManager instanceof CacheableManager) {
      @SuppressWarnings("unchecked") CacheableManager<?,Principal> cm=(CacheableManager<?,Principal>)authenticationManager;
      return new JBossGenericPrincipal(this,userPrincipal.getName(),null,rolesAsStringList,userPrincipal,null,cm);
    }
 else     return new JBossGenericPrincipal(this,userPrincipal.getName(),null,rolesAsStringList,userPrincipal,null);
  }
  return super.authenticate(username,credentials);
}
