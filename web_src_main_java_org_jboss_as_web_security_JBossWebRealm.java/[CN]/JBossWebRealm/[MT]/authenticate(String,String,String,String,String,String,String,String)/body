{
  if (authenticationManager == null)   throw MESSAGES.noAuthenticationManager();
  if (authorizationManager == null)   throw MESSAGES.noAuthorizationManager();
  Principal incomingPrincipal=getPrincipal(username);
  Principal userPrincipal=null;
  SecurityContext sc=SecurityActions.getSecurityContext();
  if (sc == null)   throw MESSAGES.noSecurityContext();
  Principal caller=sc.getUtil().getUserPrincipal();
  if (caller == null && username == null && clientDigest == null) {
    return null;
  }
  try {
    DigestCallbackHandler handler=new DigestCallbackHandler(username,nOnce,nc,cnonce,qop,realm,md5a2);
    CallbackHandlerPolicyContextHandler.setCallbackHandler(handler);
    Subject subject=new Subject();
    boolean isValid=authenticationManager.isValid(incomingPrincipal,clientDigest,subject);
    if (isValid) {
      WebLogger.WEB_SECURITY_LOGGER.tracef("User: " + incomingPrincipal + " is authenticated");
      sc.getUtil().createSubjectInfo(incomingPrincipal,clientDigest,subject);
      userPrincipal=getPrincipal(subject);
      SecurityContextCallbackHandler scb=new SecurityContextCallbackHandler(sc);
      if (mappingManager != null) {
        MappingContext<RoleGroup> mc=mappingManager.getMappingContext(MappingType.ROLE.name());
        if (mc != null && mc.hasModules()) {
          SecurityRolesAssociation.setSecurityRoles(principalVersusRolesMap);
        }
      }
      RoleGroup roles=authorizationManager.getSubjectRoles(subject,scb);
      List<Role> rolesAsList=roles.getRoles();
      List<String> rolesAsStringList=new ArrayList<String>();
      for (      Role role : rolesAsList) {
        rolesAsStringList.add(role.getRoleName());
      }
      if (mappingManager != null) {
        MappingContext<RoleGroup> mc=mappingManager.getMappingContext(MappingType.ROLE.name());
        if (mc == null || !mc.hasModules()) {
          rolesAsStringList=mapUserRoles(rolesAsStringList);
        }
      }
 else       rolesAsStringList=mapUserRoles(rolesAsStringList);
      if (authenticationManager instanceof CacheableManager) {
        @SuppressWarnings("unchecked") CacheableManager<?,Principal> cm=(CacheableManager<?,Principal>)authenticationManager;
        userPrincipal=new JBossGenericPrincipal(this,incomingPrincipal.getName(),null,rolesAsStringList,userPrincipal,null,clientDigest,cm,subject);
      }
 else       userPrincipal=new JBossGenericPrincipal(this,incomingPrincipal.getName(),null,rolesAsStringList,userPrincipal,null,clientDigest,null,subject);
    }
 else {
      WebLogger.WEB_SECURITY_LOGGER.tracef("User: " + userPrincipal + " is NOT authenticated");
      userPrincipal=null;
    }
  }
 catch (  Exception e) {
    WebLogger.WEB_SECURITY_LOGGER.authenticateErrorDigest(e);
  }
  if (userPrincipal != null) {
    successAudit(userPrincipal,null);
  }
 else {
    failureAudit(userPrincipal,null);
  }
  return userPrincipal;
}
