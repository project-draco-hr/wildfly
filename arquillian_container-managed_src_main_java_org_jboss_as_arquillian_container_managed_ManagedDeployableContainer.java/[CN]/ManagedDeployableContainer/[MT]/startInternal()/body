{
  ManagedContainerConfiguration config=getContainerConfiguration();
  if (isServerRunning()) {
    if (config.isAllowConnectingToRunningServer()) {
      return;
    }
 else {
      failDueToRunning();
    }
  }
  try {
    final String jbossHome=config.getJbossHome();
    File jbossHomeDir=new File(jbossHome).getCanonicalFile();
    if (jbossHomeDir.isDirectory() == false)     throw new IllegalStateException("Cannot find: " + jbossHomeDir);
    String modulesPath=config.getModulePath();
    if (modulesPath == null || modulesPath.isEmpty()) {
      modulesPath=jbossHome + File.separatorChar + "modules";
    }
    String bundlesPath=config.getBundlePath();
    if (bundlesPath == null || bundlesPath.isEmpty()) {
      bundlesPath=jbossHome + File.separatorChar + "bundles";
    }
    final String additionalJavaOpts=config.getJavaVmArguments();
    File modulesJar=new File(jbossHome + File.separatorChar + "jboss-modules.jar");
    if (!modulesJar.exists())     throw new IllegalStateException("Cannot find: " + modulesJar);
    List<String> cmd=new ArrayList<String>();
    String javaExec=config.getJavaHome() + File.separatorChar + "bin"+ File.separatorChar+ "java";
    if (config.getJavaHome().contains(" ")) {
      javaExec="\"" + javaExec + "\"";
    }
    cmd.add(javaExec);
    if (additionalJavaOpts != null) {
      for (      String opt : additionalJavaOpts.split("\\s+")) {
        cmd.add(opt);
      }
    }
    if (config.isEnableAssertions()) {
      cmd.add("-ea");
    }
    String serverBaseDir=getSystemPropertyValue(cmd,"jboss.server.base.dir",jbossHome + File.separatorChar + SERVER_BASE_DIR);
    if (config.isSetupCleanServerBaseDir() || config.getCleanServerBaseDir() != null) {
      serverBaseDir=setupCleanServerDirectories(serverBaseDir,jbossHome,config.getCleanServerBaseDir()).getAbsolutePath();
      replaceSystemPropertyValue(cmd,"jboss.server.base.dir",serverBaseDir);
    }
    final String bootLogFileDefaultValue=serverBaseDir + File.separatorChar + LOG_DIR+ File.separatorChar+ "server.log";
    final String loggingConfigurationDefaultValue=serverBaseDir + File.separatorChar + CONFIG_DIR+ File.separatorChar+ "logging.properties";
    cmd.add("-Djboss.home.dir=" + jbossHome);
    cmd.add("-Dorg.jboss.boot.log.file=" + getSystemPropertyValue(cmd,"org.jboss.boot.log.file",getFile(bootLogFileDefaultValue,jbossHome).getAbsolutePath()));
    cmd.add("-Dlogging.configuration=" + getSystemPropertyValue(cmd,"logging.configuration",getFile(loggingConfigurationDefaultValue,jbossHome).toURI().toString()));
    cmd.add("-Djboss.bundles.dir=" + bundlesPath);
    cmd.add("-jar");
    cmd.add(modulesJar.getAbsolutePath());
    cmd.add("-mp");
    cmd.add(modulesPath);
    cmd.add("org.jboss.as.standalone");
    cmd.add("-server-config");
    cmd.add(config.getServerConfig());
    if (config.isAdminOnly())     cmd.add("--admin-only");
    this.waitOnPorts();
    log.info("Starting container with: " + cmd.toString());
    ProcessBuilder processBuilder=new ProcessBuilder(cmd);
    processBuilder.redirectErrorStream(true);
    process=processBuilder.start();
    new Thread(new ConsoleConsumer()).start();
    final Process proc=process;
    shutdownThread=new Thread(new Runnable(){
      @Override public void run(){
        if (proc != null) {
          proc.destroy();
          try {
            proc.waitFor();
          }
 catch (          InterruptedException e) {
            throw new RuntimeException(e);
          }
        }
      }
    }
);
    Runtime.getRuntime().addShutdownHook(shutdownThread);
    long startupTimeout=getContainerConfiguration().getStartupTimeoutInSeconds();
    long timeout=startupTimeout * 1000;
    boolean serverAvailable=false;
    long sleep=1000;
    while (timeout > 0 && serverAvailable == false) {
      long before=System.currentTimeMillis();
      serverAvailable=getManagementClient().isServerInRunningState();
      timeout-=(System.currentTimeMillis() - before);
      if (!serverAvailable) {
        if (processHasDied(proc))         break;
        Thread.sleep(sleep);
        timeout-=sleep;
        sleep=Math.max(sleep / 2,100);
      }
    }
    if (!serverAvailable) {
      destroyProcess();
      throw new TimeoutException(String.format("Managed server was not started within [%d] s",getContainerConfiguration().getStartupTimeoutInSeconds()));
    }
  }
 catch (  Exception e) {
    throw new LifecycleException("Could not start container",e);
  }
}
