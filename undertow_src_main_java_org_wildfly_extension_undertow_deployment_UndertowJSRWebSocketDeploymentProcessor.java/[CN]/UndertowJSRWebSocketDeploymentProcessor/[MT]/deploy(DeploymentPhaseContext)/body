{
  final DeploymentUnit deploymentUnit=phaseContext.getDeploymentUnit();
  final DeploymentClassIndex classIndex=deploymentUnit.getAttachment(Attachments.CLASS_INDEX);
  final Module module=deploymentUnit.getAttachment(Attachments.MODULE);
  if (module == null) {
    return;
  }
  ClassLoader oldCl=Thread.currentThread().getContextClassLoader();
  try {
    Thread.currentThread().setContextClassLoader(module.getClassLoader());
    WarMetaData metaData=deploymentUnit.getAttachment(WarMetaData.ATTACHMENT_KEY);
    if (metaData == null) {
      return;
    }
    final Set<Class<?>> annotatedEndpoints=new HashSet<>();
    final Set<Class<? extends Endpoint>> endpoints=new HashSet<>();
    final Set<Class<? extends ServerApplicationConfig>> config=new HashSet<>();
    final CompositeIndex index=deploymentUnit.getAttachment(Attachments.COMPOSITE_ANNOTATION_INDEX);
    final List<AnnotationInstance> serverEndpoints=index.getAnnotations(SERVER_ENDPOINT);
    if (serverEndpoints != null) {
      for (      AnnotationInstance endpoint : serverEndpoints) {
        if (endpoint.target() instanceof ClassInfo) {
          ClassInfo clazz=(ClassInfo)endpoint.target();
          try {
            Class<?> moduleClass=classIndex.classIndex(clazz.name().toString()).getModuleClass();
            if (!Modifier.isAbstract(moduleClass.getModifiers())) {
              annotatedEndpoints.add(moduleClass);
            }
          }
 catch (          ClassNotFoundException e) {
            UndertowLogger.ROOT_LOGGER.couldNotLoadWebSocketEndpoint(clazz.name().toString(),e);
          }
        }
      }
    }
    final List<AnnotationInstance> clientEndpoints=index.getAnnotations(CLIENT_ENDPOINT);
    if (clientEndpoints != null) {
      for (      AnnotationInstance endpoint : clientEndpoints) {
        if (endpoint.target() instanceof ClassInfo) {
          ClassInfo clazz=(ClassInfo)endpoint.target();
          try {
            Class<?> moduleClass=classIndex.classIndex(clazz.name().toString()).getModuleClass();
            if (!Modifier.isAbstract(moduleClass.getModifiers())) {
              annotatedEndpoints.add(moduleClass);
            }
          }
 catch (          ClassNotFoundException e) {
            UndertowLogger.ROOT_LOGGER.couldNotLoadWebSocketEndpoint(clazz.name().toString(),e);
          }
        }
      }
    }
    final Set<ClassInfo> subclasses=index.getAllKnownImplementors(SERVER_APPLICATION_CONFIG);
    if (subclasses != null) {
      for (      final ClassInfo clazz : subclasses) {
        try {
          Class<?> moduleClass=classIndex.classIndex(clazz.name().toString()).getModuleClass();
          if (!Modifier.isAbstract(moduleClass.getModifiers())) {
            config.add((Class)moduleClass);
          }
        }
 catch (        ClassNotFoundException e) {
          UndertowLogger.ROOT_LOGGER.couldNotLoadWebSocketConfig(clazz.name().toString(),e);
        }
      }
    }
    final Set<ClassInfo> epClasses=index.getAllKnownSubclasses(ENDPOINT);
    if (epClasses != null) {
      for (      final ClassInfo clazz : epClasses) {
        try {
          Class<?> moduleClass=classIndex.classIndex(clazz.name().toString()).getModuleClass();
          if (!Modifier.isAbstract(moduleClass.getModifiers())) {
            endpoints.add((Class)moduleClass);
          }
        }
 catch (        ClassNotFoundException e) {
          UndertowLogger.ROOT_LOGGER.couldNotLoadWebSocketConfig(clazz.name().toString(),e);
        }
      }
    }
    ServerWebSocketContainer container=new ServerWebSocketContainer(DefaultClassIntrospector.INSTANCE);
    doDeployment(container,annotatedEndpoints,config,endpoints);
    installWebsockets(phaseContext,metaData,container);
  }
  finally {
    Thread.currentThread().setContextClassLoader(oldCl);
  }
}
