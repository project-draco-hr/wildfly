{
  ServiceBuilder<ChannelFactory> builder=target.addService(ChannelFactoryService.getServiceName(name),new ChannelFactoryService(stackConfig)).addDependency(ProtocolDefaultsService.SERVICE_NAME,ProtocolDefaults.class,stackConfig.getDefaultsInjector()).addDependency(MBeanServerService.SERVICE_NAME,MBeanServer.class,stackConfig.getMBeanServerInjector()).addDependency(ServerEnvironmentService.SERVICE_NAME,ServerEnvironment.class,stackConfig.getEnvironmentInjector()).setInitialMode(ServiceController.Mode.ON_DEMAND);
  addSocketBindingDependency(builder,transportSocketBinding,transportConfig.getSocketBindingInjector());
  for (  Map.Entry<Protocol,String> entry : protocolSocketBindings) {
    addSocketBindingDependency(builder,entry.getValue(),entry.getKey().getSocketBindingInjector());
  }
  addSocketBindingDependency(builder,diagnosticsSocketBinding,transportConfig.getDiagnosticsSocketBindingInjector());
  addExecutorDependency(builder,defaultExecutor,transportConfig.getDefaultExecutorInjector());
  addExecutorDependency(builder,oobExecutor,transportConfig.getOOBExecutorInjector());
  if (timerExecutor != null) {
    builder.addDependency(ThreadsServices.executorName(timerExecutor),ScheduledExecutorService.class,transportConfig.getTimerExecutorInjector());
  }
  if (threadFactory != null) {
    builder.addDependency(ThreadsServices.threadFactoryName(threadFactory),ThreadFactory.class,transportConfig.getThreadFactoryInjector());
  }
  return builder.install();
}
