{
  final PathAddress address=PathAddress.pathAddress(operation.get(OP_ADDR));
  final String name=address.getLastElement().getValue();
  protocolStackSanityCheck(name,model);
  List<Property> orderedProtocols=getOrderedProtocolPropertyList(model);
  ModelNode transport=model.get(ModelKeys.TRANSPORT,ModelKeys.TRANSPORT_NAME);
  ModelNode resolvedValue=null;
  final String type=((resolvedValue=CommonAttributes.TYPE.resolveModelAttribute(context,transport)).isDefined()) ? resolvedValue.asString() : null;
  final boolean shared=CommonAttributes.SHARED.resolveModelAttribute(context,transport).asBoolean();
  final String machine=((resolvedValue=CommonAttributes.MACHINE.resolveModelAttribute(context,transport)).isDefined()) ? resolvedValue.asString() : null;
  final String rack=((resolvedValue=CommonAttributes.RACK.resolveModelAttribute(context,transport)).isDefined()) ? resolvedValue.asString() : null;
  final String site=((resolvedValue=CommonAttributes.SITE.resolveModelAttribute(context,transport)).isDefined()) ? resolvedValue.asString() : null;
  final String timerExecutor=((resolvedValue=CommonAttributes.TIMER_EXECUTOR.resolveModelAttribute(context,transport)).isDefined()) ? resolvedValue.asString() : null;
  final String threadFactory=((resolvedValue=CommonAttributes.THREAD_FACTORY.resolveModelAttribute(context,transport)).isDefined()) ? resolvedValue.asString() : null;
  final String diagnosticsSocketBinding=((resolvedValue=CommonAttributes.DIAGNOSTICS_SOCKET_BINDING.resolveModelAttribute(context,transport)).isDefined()) ? resolvedValue.asString() : null;
  final String defaultExecutor=((resolvedValue=CommonAttributes.DEFAULT_EXECUTOR.resolveModelAttribute(context,transport)).isDefined()) ? resolvedValue.asString() : null;
  final String oobExecutor=((resolvedValue=CommonAttributes.OOB_EXECUTOR.resolveModelAttribute(context,transport)).isDefined()) ? resolvedValue.asString() : null;
  final String transportSocketBinding=((resolvedValue=CommonAttributes.SOCKET_BINDING.resolveModelAttribute(context,transport)).isDefined()) ? resolvedValue.asString() : null;
  List<String> protocolSocketBindings=new ArrayList<String>();
  for (  Property protocolProperty : orderedProtocols) {
    ModelNode protocol=protocolProperty.getValue();
    final String protocolSocketBinding=((resolvedValue=CommonAttributes.SOCKET_BINDING.resolveModelAttribute(context,protocol)).isDefined()) ? resolvedValue.asString() : null;
    protocolSocketBindings.add(protocolSocketBinding);
  }
  Transport transportConfig=new Transport(type);
  transportConfig.setShared(shared);
  transportConfig.setTopology(site,rack,machine);
  initProtocolProperties(transport,transportConfig);
  ProtocolStack stackConfig=new ProtocolStack(name,transportConfig);
  for (  Property protocolProperty : orderedProtocols) {
    ModelNode tmp=null;
    final String protocolType=((tmp=CommonAttributes.TYPE.resolveModelAttribute(context,protocolProperty.getValue())).isDefined()) ? tmp.asString() : null;
    Protocol protocolConfig=new Protocol(protocolType);
    initProtocolProperties(protocolProperty.getValue(),protocolConfig);
    stackConfig.getProtocols().add(protocolConfig);
  }
  ServiceTarget target=context.getServiceTarget();
  ServiceController<ChannelFactory> cfsController=installChannelFactoryService(target,name,diagnosticsSocketBinding,defaultExecutor,oobExecutor,timerExecutor,threadFactory,transportSocketBinding,protocolSocketBindings,transportConfig,stackConfig,verificationHandler);
  if (newControllers != null) {
    newControllers.add(cfsController);
  }
}
