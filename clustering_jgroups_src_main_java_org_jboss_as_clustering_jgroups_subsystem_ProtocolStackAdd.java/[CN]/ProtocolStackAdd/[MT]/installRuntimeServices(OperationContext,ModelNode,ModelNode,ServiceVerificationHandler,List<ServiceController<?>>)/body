{
  final PathAddress address=PathAddress.pathAddress(operation.get(OP_ADDR));
  final String name=address.getLastElement().getValue();
  protocolStackSanityCheck(name,model);
  List<Property> orderedProtocols=getOrderedProtocolPropertyList(model);
  ModelNode transport=model.get(ModelKeys.TRANSPORT,ModelKeys.TRANSPORT_NAME);
  ModelNode resolvedValue=null;
  final String type=(resolvedValue=TransportResource.TYPE.resolveModelAttribute(context,transport)).isDefined() ? resolvedValue.asString() : null;
  final boolean shared=TransportResource.SHARED.resolveModelAttribute(context,transport).asBoolean();
  final String machine=(resolvedValue=TransportResource.MACHINE.resolveModelAttribute(context,transport)).isDefined() ? resolvedValue.asString() : null;
  final String rack=(resolvedValue=TransportResource.RACK.resolveModelAttribute(context,transport)).isDefined() ? resolvedValue.asString() : null;
  final String site=(resolvedValue=TransportResource.SITE.resolveModelAttribute(context,transport)).isDefined() ? resolvedValue.asString() : null;
  final String timerExecutor=(resolvedValue=TransportResource.TIMER_EXECUTOR.resolveModelAttribute(context,transport)).isDefined() ? resolvedValue.asString() : null;
  final String threadFactory=(resolvedValue=TransportResource.THREAD_FACTORY.resolveModelAttribute(context,transport)).isDefined() ? resolvedValue.asString() : null;
  final String diagnosticsSocketBinding=(resolvedValue=TransportResource.DIAGNOSTICS_SOCKET_BINDING.resolveModelAttribute(context,transport)).isDefined() ? resolvedValue.asString() : null;
  final String defaultExecutor=(resolvedValue=TransportResource.DEFAULT_EXECUTOR.resolveModelAttribute(context,transport)).isDefined() ? resolvedValue.asString() : null;
  final String oobExecutor=(resolvedValue=TransportResource.OOB_EXECUTOR.resolveModelAttribute(context,transport)).isDefined() ? resolvedValue.asString() : null;
  final String transportSocketBinding=(resolvedValue=TransportResource.SOCKET_BINDING.resolveModelAttribute(context,transport)).isDefined() ? resolvedValue.asString() : null;
  Transport transportConfig=new Transport(type);
  transportConfig.setShared(shared);
  transportConfig.setTopology(site,rack,machine);
  initProtocolProperties(context,transport,transportConfig);
  ProtocolStack stackConfig=new ProtocolStack(name,transportConfig);
  List<Map.Entry<Protocol,String>> protocolSocketBindings=new ArrayList<Map.Entry<Protocol,String>>(orderedProtocols.size());
  for (  Property protocolProperty : orderedProtocols) {
    ModelNode protocol=protocolProperty.getValue();
    final String protocolType=(resolvedValue=ProtocolResource.TYPE.resolveModelAttribute(context,protocol)).isDefined() ? resolvedValue.asString() : null;
    Protocol protocolConfig=new Protocol(protocolType);
    initProtocolProperties(context,protocol,protocolConfig);
    stackConfig.getProtocols().add(protocolConfig);
    final String protocolSocketBinding=(resolvedValue=ProtocolResource.SOCKET_BINDING.resolveModelAttribute(context,protocol)).isDefined() ? resolvedValue.asString() : null;
    protocolSocketBindings.add(new AbstractMap.SimpleImmutableEntry<Protocol,String>(protocolConfig,protocolSocketBinding));
  }
  ServiceTarget target=context.getServiceTarget();
  ServiceController<ChannelFactory> cfsController=installChannelFactoryService(target,name,diagnosticsSocketBinding,defaultExecutor,oobExecutor,timerExecutor,threadFactory,transportSocketBinding,protocolSocketBindings,transportConfig,stackConfig,verificationHandler);
  if (newControllers != null) {
    newControllers.add(cfsController);
  }
}
