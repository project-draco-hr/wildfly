{
  ServiceBuilder<ChannelFactory> builder=target.addService(ChannelFactoryService.getServiceName(name),new ChannelFactoryService(stackConfig)).addDependency(ProtocolDefaultsService.SERVICE_NAME,ProtocolDefaults.class,stackConfig.getDefaultsInjector()).addDependency(MBeanServerService.SERVICE_NAME,MBeanServer.class,stackConfig.getMBeanServerInjector()).addDependency(ServerEnvironmentService.SERVICE_NAME,ServerEnvironment.class,stackConfig.getEnvironmentInjector());
  addSocketBindingDependency(builder,transportSocketBinding,transportConfig.getSocketBindingInjector());
  Iterator sbIterator=protocolSocketBindings.iterator();
  Iterator pcIterator=stackConfig.getProtocols().iterator();
  while (sbIterator.hasNext() && pcIterator.hasNext()) {
    String socketBinding=(String)sbIterator.next();
    Protocol protocolConfig=(Protocol)pcIterator.next();
    addSocketBindingDependency(builder,socketBinding,protocolConfig.getSocketBindingInjector());
  }
  addSocketBindingDependency(builder,diagnosticsSocketBinding,transportConfig.getDiagnosticsSocketBindingInjector());
  addExecutorDependency(builder,defaultExecutor,transportConfig.getDefaultExecutorInjector());
  addExecutorDependency(builder,oobExecutor,transportConfig.getOOBExecutorInjector());
  if (timerExecutor != null) {
    builder.addDependency(ThreadsServices.executorName(timerExecutor),ScheduledExecutorService.class,transportConfig.getTimerExecutorInjector());
  }
  if (threadFactory != null) {
    builder.addDependency(ThreadsServices.threadFactoryName(threadFactory),ThreadFactory.class,transportConfig.getThreadFactoryInjector());
  }
  builder.setInitialMode(ServiceController.Mode.ON_DEMAND);
  return builder.install();
}
