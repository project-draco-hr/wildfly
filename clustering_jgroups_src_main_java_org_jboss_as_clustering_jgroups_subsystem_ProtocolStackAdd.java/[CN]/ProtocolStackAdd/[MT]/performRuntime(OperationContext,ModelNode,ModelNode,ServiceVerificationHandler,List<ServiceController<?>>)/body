{
  final PathAddress address=PathAddress.pathAddress(operation.get(OP_ADDR));
  final String name=address.getLastElement().getValue();
  ModelNode transport=operation.get(ModelKeys.TRANSPORT);
  Transport transportConfig=new Transport(transport.require(ModelKeys.TYPE).asString());
  ProtocolStack stackConfig=new ProtocolStack(name,transportConfig);
  ServiceBuilder<ChannelFactory> builder=context.getServiceTarget().addService(ChannelFactoryService.getServiceName(name),new ChannelFactoryService(stackConfig)).addDependency(ProtocolDefaultsService.SERVICE_NAME,ProtocolDefaults.class,stackConfig.getDefaultsInjector()).addDependency(DependencyType.OPTIONAL,ServiceName.JBOSS.append("mbean","server"),MBeanServer.class,stackConfig.getMBeanServerInjector()).addDependency(ServerEnvironmentService.SERVICE_NAME,ServerEnvironment.class,stackConfig.getEnvironmentInjector());
  if (transport.hasDefined(ModelKeys.SHARED)) {
    transportConfig.setShared(transport.get(ModelKeys.SHARED).asBoolean());
  }
  if (transport.hasDefined(ModelKeys.MACHINE)) {
    transportConfig.setMachineId(context.resolveExpressions(transport.get(ModelKeys.MACHINE)).asString());
  }
  if (transport.hasDefined(ModelKeys.RACK)) {
    transportConfig.setRackId(context.resolveExpressions(transport.get(ModelKeys.RACK)).asString());
  }
  if (transport.hasDefined(ModelKeys.SITE)) {
    transportConfig.setSiteId(context.resolveExpressions(transport.get(ModelKeys.SITE)).asString());
  }
  build(builder,transport,transportConfig);
  addSocketBindingDependency(builder,transport,ModelKeys.DIAGNOSTICS_SOCKET_BINDING,transportConfig.getDiagnosticsSocketBindingInjector());
  addExecutorDependency(builder,transport,ModelKeys.DEFAULT_EXECUTOR,transportConfig.getDefaultExecutorInjector());
  addExecutorDependency(builder,transport,ModelKeys.OOB_EXECUTOR,transportConfig.getOOBExecutorInjector());
  if (transport.hasDefined(ModelKeys.TIMER_EXECUTOR)) {
    builder.addDependency(ThreadsServices.executorName(transport.get(ModelKeys.TIMER_EXECUTOR).asString()),ScheduledExecutorService.class,transportConfig.getTimerExecutorInjector());
  }
  if (transport.hasDefined(ModelKeys.THREAD_FACTORY)) {
    builder.addDependency(ThreadsServices.threadFactoryName(transport.get(ModelKeys.THREAD_FACTORY).asString()),ThreadFactory.class,transportConfig.getThreadFactoryInjector());
  }
  for (  ModelNode protocol : operation.get(ModelKeys.PROTOCOL).asList()) {
    Protocol protocolConfig=new Protocol(protocol.require(ModelKeys.TYPE).asString());
    build(builder,protocol,protocolConfig);
    stackConfig.getProtocols().add(protocolConfig);
  }
  builder.setInitialMode(ServiceController.Mode.ON_DEMAND);
  newControllers.add(builder.install());
}
