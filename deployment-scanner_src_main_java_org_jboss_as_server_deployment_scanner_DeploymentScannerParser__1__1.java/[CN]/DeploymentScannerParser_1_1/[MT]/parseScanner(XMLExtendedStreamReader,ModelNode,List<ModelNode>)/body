{
  String name=DeploymentScannerExtension.DEFAULT_SCANNER_NAME;
  String path=null;
  final ModelNode operation=new ModelNode();
  operation.get(OP).set(ADD);
  final int attrCount=reader.getAttributeCount();
  for (int i=0; i < attrCount; i++) {
    requireNoNamespaceAttribute(reader,i);
    final String value=reader.getAttributeValue(i);
    final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case PATH:
{
        path=value;
        DeploymentScannerDefinition.PATH.parseAndSetParameter(value,operation,reader);
        break;
      }
case NAME:
{
      name=DeploymentScannerDefinition.NAME.parse(value,reader).asString();
      break;
    }
case RELATIVE_TO:
{
    DeploymentScannerDefinition.RELATIVE_TO.parseAndSetParameter(value,operation,reader);
    break;
  }
case SCAN_INTERVAL:
{
  DeploymentScannerDefinition.SCAN_INTERVAL.parseAndSetParameter(value,operation,reader);
  break;
}
case SCAN_ENABLED:
{
DeploymentScannerDefinition.SCAN_ENABLED.parseAndSetParameter(value,operation,reader);
break;
}
case AUTO_DEPLOY_ZIPPED:
{
DeploymentScannerDefinition.AUTO_DEPLOY_ZIPPED.parseAndSetParameter(value,operation,reader);
break;
}
case AUTO_DEPLOY_EXPLODED:
{
DeploymentScannerDefinition.AUTO_DEPLOY_EXPLODED.parseAndSetParameter(value,operation,reader);
break;
}
case AUTO_DEPLOY_XML:
{
DeploymentScannerDefinition.AUTO_DEPLOY_XML.parseAndSetParameter(value,operation,reader);
break;
}
case DEPLOYMENT_TIMEOUT:
{
DeploymentScannerDefinition.DEPLOYMENT_TIMEOUT.parseAndSetParameter(value,operation,reader);
break;
}
default :
throw ParseUtils.unexpectedAttribute(reader,i);
}
}
if (name == null) {
ParseUtils.missingRequired(reader,Collections.singleton(CommonAttributes.NAME));
}
if (path == null) {
ParseUtils.missingRequired(reader,Collections.singleton(CommonAttributes.PATH));
}
requireNoContent(reader);
operation.get(OP_ADDR).set(address).add(CommonAttributes.SCANNER,name);
list.add(operation);
}
