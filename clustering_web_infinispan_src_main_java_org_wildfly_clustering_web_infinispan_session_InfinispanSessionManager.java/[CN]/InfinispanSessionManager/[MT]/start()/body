{
  this.identifierFactory.start();
  final List<Scheduler> schedulers=new ArrayList<>(2);
  schedulers.add(new SessionExpirationScheduler(this.batcher,new ExpiredSessionRemover<>(this.factory)));
  if (this.maxActiveSessions >= 0) {
    schedulers.add(new SessionEvictionScheduler(this.cache.getName() + ".eviction",this.batcher,this.factory,this.dispatcherFactory,this.maxActiveSessions));
  }
  this.scheduler=new Scheduler(){
    @Override public void schedule(    ImmutableSession session){
      for (      Scheduler scheduler : schedulers) {
        scheduler.schedule(session);
      }
    }
    @Override public void cancel(    String sessionId){
      for (      Scheduler scheduler : schedulers) {
        scheduler.cancel(sessionId);
      }
    }
    @Override public void cancel(    Locality locality){
      for (      Scheduler scheduler : schedulers) {
        scheduler.cancel(locality);
      }
    }
    @Override public void close(){
      for (      Scheduler scheduler : schedulers) {
        scheduler.close();
      }
    }
  }
;
  this.dispatcher=this.dispatcherFactory.createCommandDispatcher(this.cache.getName() + ".schedulers",this.scheduler);
  this.cache.addListener(this,this.filter);
  this.schedule(this.cache,new SimpleLocality(false),new ConsistentHashLocality(this.cache));
}
