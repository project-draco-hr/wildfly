{
  final DeploymentUnit deploymentUnit=phaseContext.getDeploymentUnit();
  final ServiceTarget serviceTarget=phaseContext.getServiceTarget();
  if (!WeldDeploymentMarker.isWeldDeployment(deploymentUnit)) {
    return;
  }
  if (deploymentUnit.getParent() != null) {
    return;
  }
  log.info("Starting Services for CDI deployment: " + phaseContext.getDeploymentUnit().getName());
  final Module module=deploymentUnit.getAttachment(Attachments.MODULE);
  final Set<BeanDeploymentModule> beanDeploymentModules=new HashSet<BeanDeploymentModule>();
  final Set<BeanDeploymentModule> globalBeanDeploymentModules=new HashSet<BeanDeploymentModule>();
  final Set<BeanDeploymentArchiveImpl> beanDeploymentArchives=new HashSet<BeanDeploymentArchiveImpl>();
  final BeanDeploymentModule rootBeanDeploymentModule=deploymentUnit.getAttachment(WeldAttachments.BEAN_DEPLOYMENT_MODULE);
  globalBeanDeploymentModules.add(rootBeanDeploymentModule);
  beanDeploymentArchives.addAll(rootBeanDeploymentModule.getBeanDeploymentArchives());
  final List<DeploymentUnit> subDeployments=deploymentUnit.getAttachmentList(Attachments.SUB_DEPLOYMENTS);
  for (  DeploymentUnit subDeployment : subDeployments) {
    final BeanDeploymentModule bdm=subDeployment.getAttachment(WeldAttachments.BEAN_DEPLOYMENT_MODULE);
    if (bdm == null) {
      continue;
    }
    beanDeploymentArchives.addAll(bdm.getBeanDeploymentArchives());
    if (bdm != null) {
      beanDeploymentModules.add(bdm);
      if (!PrivateSubDeploymentMarker.isPrivate(subDeployment)) {
        globalBeanDeploymentModules.add(bdm);
      }
    }
  }
  for (  BeanDeploymentModule bdm : beanDeploymentModules) {
    if (bdm == rootBeanDeploymentModule) {
      continue;
    }
    bdm.addBeanDeploymentModules(globalBeanDeploymentModules);
  }
  final List<Metadata<Extension>> extensions=deploymentUnit.getAttachmentList(WeldAttachments.PORTABLE_EXTENSIONS);
  final WeldDeployment deployment=new WeldDeployment(beanDeploymentArchives,extensions,module);
  final WeldContainer weldContainer=new WeldContainer(deployment,Environments.EE_INJECT);
  final ValidatorFactory factory=deploymentUnit.getAttachment(BeanValidationAttachments.VALIDATOR_FACTORY);
  weldContainer.addWeldService(ValidationServices.class,new WeldValidationServices(factory));
  final WeldService weldService=new WeldService(weldContainer);
  final ServiceName weldServiceName=deploymentUnit.getServiceName().append(WeldService.SERVICE_NAME);
  final ServiceBuilder<WeldContainer> weldServiceBuilder=serviceTarget.addService(weldServiceName,weldService);
  weldServiceBuilder.addDependencies(TCCLSingletonService.SERVICE_NAME);
  installEjbInjectionService(serviceTarget,deploymentUnit,weldService,weldServiceBuilder);
  installEjbService(serviceTarget,deploymentUnit,weldService,weldServiceBuilder);
  installJpaInjectionService(serviceTarget,deploymentUnit,weldService,weldServiceBuilder);
  installResourceInjectionService(serviceTarget,deploymentUnit,weldService,weldServiceBuilder);
  installSecurityService(serviceTarget,deploymentUnit,weldService,weldServiceBuilder);
  installTransactionService(serviceTarget,deploymentUnit,weldService,weldServiceBuilder);
  weldServiceBuilder.install();
}
