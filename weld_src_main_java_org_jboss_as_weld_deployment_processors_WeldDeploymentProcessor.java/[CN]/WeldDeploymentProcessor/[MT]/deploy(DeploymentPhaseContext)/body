{
  final DeploymentUnit deploymentUnit=phaseContext.getDeploymentUnit();
  final ServiceTarget serviceTarget=phaseContext.getServiceTarget();
  if (!WeldDeploymentMarker.isPartOfWeldDeployment(deploymentUnit)) {
    return;
  }
  if (deploymentUnit.getParent() != null) {
    return;
  }
  log.info("Starting Services for CDI deployment: " + phaseContext.getDeploymentUnit().getName());
  final Module module=deploymentUnit.getAttachment(Attachments.MODULE);
  final ModuleSpecification moduleSpecification=deploymentUnit.getAttachment(Attachments.MODULE_SPECIFICATION);
  final Set<BeanDeploymentModule> beanDeploymentModules=new HashSet<BeanDeploymentModule>();
  final Set<BeanDeploymentArchiveImpl> beanDeploymentArchives=new HashSet<BeanDeploymentArchiveImpl>();
  final Map<ModuleIdentifier,BeanDeploymentModule> bdmsByIdentifier=new HashMap<ModuleIdentifier,BeanDeploymentModule>();
  final Map<ModuleIdentifier,ModuleSpecification> moduleSpecByIdentifier=new HashMap<ModuleIdentifier,ModuleSpecification>();
  final BeanDeploymentModule rootBeanDeploymentModule=deploymentUnit.getAttachment(WeldAttachments.BEAN_DEPLOYMENT_MODULE);
  final EEModuleDescription eeModuleDescription=deploymentUnit.getAttachment(org.jboss.as.ee.component.Attachments.EE_MODULE_DESCRIPTION);
  bdmsByIdentifier.put(module.getIdentifier(),rootBeanDeploymentModule);
  moduleSpecByIdentifier.put(module.getIdentifier(),moduleSpecification);
  beanDeploymentArchives.addAll(rootBeanDeploymentModule.getBeanDeploymentArchives());
  final List<DeploymentUnit> subDeployments=deploymentUnit.getAttachmentList(Attachments.SUB_DEPLOYMENTS);
  final Set<ClassLoader> subDeploymentLoaders=new HashSet<ClassLoader>();
  for (  DeploymentUnit subDeployment : subDeployments) {
    final Module subDeploymentModule=subDeployment.getAttachment(Attachments.MODULE);
    if (subDeploymentModule == null) {
      continue;
    }
    subDeploymentLoaders.add(subDeploymentModule.getClassLoader());
    final ModuleSpecification subDeploymentModuleSpec=subDeployment.getAttachment(Attachments.MODULE_SPECIFICATION);
    final BeanDeploymentModule bdm=subDeployment.getAttachment(WeldAttachments.BEAN_DEPLOYMENT_MODULE);
    if (bdm == null) {
      continue;
    }
    beanDeploymentArchives.addAll(bdm.getBeanDeploymentArchives());
    beanDeploymentModules.add(bdm);
    bdmsByIdentifier.put(subDeploymentModule.getIdentifier(),bdm);
    moduleSpecByIdentifier.put(subDeploymentModule.getIdentifier(),subDeploymentModuleSpec);
  }
  for (  Map.Entry<ModuleIdentifier,BeanDeploymentModule> entry : bdmsByIdentifier.entrySet()) {
    final ModuleSpecification bdmSpec=moduleSpecByIdentifier.get(entry.getKey());
    final BeanDeploymentModule bdm=entry.getValue();
    if (bdm == rootBeanDeploymentModule) {
      continue;
    }
    for (    ModuleDependency dependency : bdmSpec.getDependencies()) {
      BeanDeploymentModule other=bdmsByIdentifier.get(dependency.getIdentifier());
      if (other != null && other != bdm) {
        bdm.addBeanDeploymentModule(other);
      }
    }
  }
  final List<Metadata<Extension>> extensions=deploymentUnit.getAttachmentList(WeldAttachments.PORTABLE_EXTENSIONS);
  final WeldDeployment deployment=new WeldDeployment(beanDeploymentArchives,extensions,module,subDeploymentLoaders);
  final WeldContainer weldContainer=new WeldContainer(deployment,Environments.EE_INJECT);
  final ValidatorFactory factory=deploymentUnit.getAttachment(BeanValidationAttachments.VALIDATOR_FACTORY);
  weldContainer.addWeldService(ValidationServices.class,new WeldValidationServices(factory));
  final EjbInjectionServices ejbInjectionServices=new WeldEjbInjectionServices(deploymentUnit.getServiceRegistry(),eeModuleDescription);
  weldContainer.addWeldService(EjbInjectionServices.class,ejbInjectionServices);
  weldContainer.addWeldService(EjbServices.class,new WeldEjbServices(deploymentUnit.getServiceRegistry()));
  final JpaInjectionServices rootJpaInjectionServices=new WeldJpaInjectionServices(deploymentUnit,deploymentUnit.getServiceRegistry());
  weldContainer.addWeldService(JpaInjectionServices.class,rootJpaInjectionServices);
  final WeldService weldService=new WeldService(weldContainer);
  final ServiceName weldServiceName=deploymentUnit.getServiceName().append(WeldService.SERVICE_NAME);
  final ServiceBuilder<WeldContainer> weldServiceBuilder=serviceTarget.addService(weldServiceName,weldService);
  weldServiceBuilder.addDependencies(TCCLSingletonService.SERVICE_NAME);
  installResourceInjectionService(serviceTarget,deploymentUnit,weldService,weldServiceBuilder);
  installSecurityService(serviceTarget,deploymentUnit,weldService,weldServiceBuilder);
  installTransactionService(serviceTarget,deploymentUnit,weldService,weldServiceBuilder);
  weldServiceBuilder.install();
}
