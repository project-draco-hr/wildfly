{
  if (socketBindings.size() == 0) {
    return;
  }
  rootResource.getModel().get(INTERFACE);
  rootResource.getModel().get(SOCKET_BINDING_GROUP);
  ManagementResourceRegistration interfaces=rootRegistration.registerSubModel(PathElement.pathElement(INTERFACE),CommonProviders.SPECIFIED_INTERFACE_PROVIDER);
  interfaces.registerOperationHandler(SpecifiedInterfaceAddHandler.OPERATION_NAME,SpecifiedInterfaceAddHandler.INSTANCE,SpecifiedInterfaceAddHandler.INSTANCE,false);
  interfaces.registerOperationHandler(SpecifiedInterfaceRemoveHandler.OPERATION_NAME,SpecifiedInterfaceRemoveHandler.INSTANCE,SpecifiedInterfaceRemoveHandler.INSTANCE,false);
  ManagementResourceRegistration socketGroup=rootRegistration.registerSubModel(PathElement.pathElement(SOCKET_BINDING_GROUP),ServerDescriptionProviders.SOCKET_BINDING_GROUP_PROVIDER);
  socketGroup.registerOperationHandler(BindingGroupAddHandler.OPERATION_NAME,BindingGroupAddHandler.INSTANCE,BindingGroupAddHandler.INSTANCE,false);
  socketGroup.registerOperationHandler(SocketBindingGroupRemoveHandler.OPERATION_NAME,SocketBindingGroupRemoveHandler.INSTANCE,SocketBindingGroupRemoveHandler.INSTANCE,false);
  socketGroup.registerReadWriteAttribute(PORT_OFFSET,null,BindingGroupPortOffsetHandler.INSTANCE,AttributeAccess.Storage.CONFIGURATION);
  socketGroup.registerReadWriteAttribute(DEFAULT_INTERFACE,null,BindingGroupDefaultInterfaceHandler.INSTANCE,AttributeAccess.Storage.CONFIGURATION);
  ManagementResourceRegistration socketBinding=socketGroup.registerSubModel(PathElement.pathElement(SOCKET_BINDING),CommonProviders.SOCKET_BINDING_PROVIDER);
  socketBinding.registerOperationHandler(BindingAddHandler.OPERATION_NAME,BindingAddHandler.INSTANCE,BindingAddHandler.INSTANCE,false);
  socketBinding.registerOperationHandler(BindingRemoveHandler.OPERATION_NAME,BindingRemoveHandler.INSTANCE,BindingRemoveHandler.INSTANCE,false);
  socketBinding.registerMetric(BindingMetricHandlers.BoundHandler.ATTRIBUTE_NAME,BindingMetricHandlers.BoundHandler.INSTANCE);
  socketBinding.registerMetric(BindingMetricHandlers.BoundAddressHandler.ATTRIBUTE_NAME,BindingMetricHandlers.BoundAddressHandler.INSTANCE);
  socketBinding.registerMetric(BindingMetricHandlers.BoundPortHandler.ATTRIBUTE_NAME,BindingMetricHandlers.BoundPortHandler.INSTANCE);
  socketBinding.registerReadWriteAttribute(INTERFACE,null,BindingInterfaceHandler.INSTANCE,AttributeAccess.Storage.CONFIGURATION);
  socketBinding.registerReadWriteAttribute(PORT,null,BindingPortHandler.INSTANCE,AttributeAccess.Storage.CONFIGURATION);
  socketBinding.registerReadWriteAttribute(FIXED_PORT,null,BindingFixedPortHandler.INSTANCE,AttributeAccess.Storage.CONFIGURATION);
  socketBinding.registerReadWriteAttribute(MULTICAST_ADDRESS,null,BindingMulticastAddressHandler.INSTANCE,AttributeAccess.Storage.CONFIGURATION);
  socketBinding.registerReadWriteAttribute(MULTICAST_PORT,null,BindingMulticastPortHandler.INSTANCE,AttributeAccess.Storage.CONFIGURATION);
}
