{
  assertEquals(0,MockBean.getFinalized());
  StatelessObjectFactory<MockBean> factory=new MockFactory();
  final ThreadLocalPool<MockBean> pool=new ThreadLocalPool<MockBean>(factory);
  pool.start();
  Runnable test=new Runnable(){
    public void run(){
      MockBean bean=pool.get();
      pool.release(bean);
      bean=null;
      while (!Thread.currentThread().isInterrupted()) {
        try {
          Thread.sleep(1000);
        }
 catch (        InterruptedException e) {
          return;
        }
      }
    }
  }
;
  MyUncaughtExceptionHandler eh=new MyUncaughtExceptionHandler();
  Thread threads[]=new Thread[10];
  for (int i=0; i < threads.length; i++) {
    threads[i]=new Thread(test);
    threads[i].setUncaughtExceptionHandler(eh);
    threads[i].start();
  }
  assertNull(eh.getUncaughtException());
  Thread.sleep(500);
  pool.stop();
  gc();
  assertNull(eh.getUncaughtException());
  assertEquals(10,MockBean.getPostConstructs());
  assertEquals(10,MockBean.getFinalized());
  assertEquals(10,MockBean.getPreDestroys());
  for (  Thread thread : threads) {
    thread.interrupt();
    thread.join(5000);
    assertFalse(thread.isAlive());
  }
  assertNull(eh.getUncaughtException());
}
