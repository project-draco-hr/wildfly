{
  this.clz=clz;
  if (IDLEntity.class.isAssignableFrom(clz) && UserException.class.isAssignableFrom(clz)) {
    String helperClassName=clz.getName() + "Helper";
    try {
      Class helperClass=clz.getClassLoader().loadClass(helperClassName);
      Class[] paramTypes={org.omg.CORBA.portable.InputStream.class};
      readMethod=helperClass.getMethod("read",paramTypes);
      java.lang.reflect.Method idMethod=helperClass.getMethod("id",null);
      this.reposId=(String)idMethod.invoke(null,null);
    }
 catch (    ClassNotFoundException e) {
      throw JacORBLogger.ROOT_LOGGER.errorLoadingClass(helperClassName,e);
    }
catch (    NoSuchMethodException e) {
      throw JacORBLogger.ROOT_LOGGER.noReadMethodInHelper(helperClassName,e);
    }
catch (    IllegalAccessException e) {
      throw JacORBLogger.ROOT_LOGGER.unexpectedException(e);
    }
catch (    java.lang.reflect.InvocationTargetException e) {
      throw JacORBLogger.ROOT_LOGGER.unexpectedException(e.getTargetException());
    }
  }
 else {
    this.reposId=reposId;
  }
}
