{
  String outcome=result.get(OUTCOME).asString();
switch (expectedOutcome) {
case SUCCESS:
    if (!SUCCESS.equals(outcome)) {
      System.out.println("Failed: " + operation);
      System.out.print("Result: " + result);
      fail(result.asString());
    }
  break;
case UNAUTHORIZED:
{
  if (!FAILED.equals(outcome)) {
    fail("Didn't fail: " + result.asString());
  }
  if (!result.get(FAILURE_DESCRIPTION).asString().contains("WFLYCTL0313") && !result.asString().contains("WFLYJMX0037") && !result.asString().contains("WFLYJMX0038")&& !result.asString().contains("WFLYJMX0039")&& !result.asString().contains("WFLYJMX0040")) {
    fail("Incorrect failure type: " + result.asString());
  }
  break;
}
case HIDDEN:
{
if (!FAILED.equals(outcome)) {
  fail("Didn't fail: " + result.asString());
}
String failureDesc=result.get(FAILURE_DESCRIPTION).asString();
if (!failureDesc.contains("WFLYCTL0216") && !failureDesc.contains("WFLYCTL0030") && !failureDesc.contains("WFLYJMX0017")) {
  fail("Incorrect failure type: " + result.asString());
}
break;
}
case FAILED:
{
if (!FAILED.equals(outcome)) {
fail("Didn't fail: " + result.asString());
}
String failureDesc=result.get(FAILURE_DESCRIPTION).asString();
if (failureDesc.contains("WFLYCTL0216") || failureDesc.contains("WFLYCTL0030") || failureDesc.contains("WFLYCTL0313")|| failureDesc.contains("WFLYJMX0017")) {
fail("Incorrect failure type: " + result.asString());
}
break;
}
default :
throw new IllegalStateException();
}
return result;
}
