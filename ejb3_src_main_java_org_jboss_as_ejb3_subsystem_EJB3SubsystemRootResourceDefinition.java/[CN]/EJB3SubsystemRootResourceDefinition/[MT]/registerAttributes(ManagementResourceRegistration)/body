{
  resourceRegistration.registerReadOnlyAttribute(DEFAULT_CLUSTERED_SFSB_CACHE,new SimpleAliasReadAttributeHandler(DEFAULT_SFSB_CACHE));
  resourceRegistration.registerReadWriteAttribute(DEFAULT_SFSB_CACHE,null,EJB3SubsystemDefaultCacheWriteHandler.SFSB_CACHE);
  resourceRegistration.registerReadWriteAttribute(DEFAULT_SFSB_PASSIVATION_DISABLED_CACHE,null,EJB3SubsystemDefaultCacheWriteHandler.SFSB_PASSIVATION_DISABLED_CACHE);
  resourceRegistration.registerReadWriteAttribute(DEFAULT_SLSB_INSTANCE_POOL,null,EJB3SubsystemDefaultPoolWriteHandler.SLSB_POOL);
  resourceRegistration.registerReadWriteAttribute(DEFAULT_MDB_INSTANCE_POOL,null,EJB3SubsystemDefaultPoolWriteHandler.MDB_POOL);
  resourceRegistration.registerReadWriteAttribute(DEFAULT_ENTITY_BEAN_INSTANCE_POOL,null,EJB3SubsystemDefaultPoolWriteHandler.ENTITY_BEAN_POOL);
  resourceRegistration.registerReadWriteAttribute(DEFAULT_ENTITY_BEAN_OPTIMISTIC_LOCKING,null,EJB3SubsystemDefaultEntityBeanOptimisticLockingWriteHandler.INSTANCE);
  resourceRegistration.registerReadWriteAttribute(DEFAULT_RESOURCE_ADAPTER_NAME,null,DefaultResourceAdapterWriteHandler.INSTANCE);
  resourceRegistration.registerReadWriteAttribute(DEFAULT_SINGLETON_BEAN_ACCESS_TIMEOUT,null,DefaultSingletonBeanAccessTimeoutWriteHandler.INSTANCE);
  resourceRegistration.registerReadWriteAttribute(DEFAULT_STATEFUL_BEAN_ACCESS_TIMEOUT,null,DefaultStatefulBeanAccessTimeoutWriteHandler.INSTANCE);
  resourceRegistration.registerReadWriteAttribute(ENABLE_STATISTICS,null,EnableStatisticsWriteHandler.INSTANCE);
  resourceRegistration.registerReadWriteAttribute(PASS_BY_VALUE,null,EJBRemoteInvocationPassByValueWriteHandler.INSTANCE);
  resourceRegistration.registerReadWriteAttribute(DEFAULT_DISTINCT_NAME,null,EJBDefaultDistinctNameWriteHandler.INSTANCE);
  resourceRegistration.registerReadWriteAttribute(LOG_EJB_EXCEPTIONS,null,ExceptionLoggingWriteHandler.INSTANCE);
  resourceRegistration.registerReadWriteAttribute(ALLOW_EJB_NAME_REGEX,null,EJBNameRegexWriteHandler.INSTANCE);
  final EJBDefaultSecurityDomainWriteHandler defaultSecurityDomainWriteHandler=new EJBDefaultSecurityDomainWriteHandler(DEFAULT_SECURITY_DOMAIN,defaultSecurityDomainDeploymentProcessor);
  resourceRegistration.registerReadWriteAttribute(DEFAULT_SECURITY_DOMAIN,null,defaultSecurityDomainWriteHandler);
  final EJBDefaultMissingMethodPermissionsWriteHandler defaultMissingMethodPermissionsWriteHandler=new EJBDefaultMissingMethodPermissionsWriteHandler(DEFAULT_MISSING_METHOD_PERMISSIONS_DENY_ACCESS,missingMethodPermissionsDenyAccessMergingProcessor);
  resourceRegistration.registerReadWriteAttribute(DEFAULT_MISSING_METHOD_PERMISSIONS_DENY_ACCESS,null,defaultMissingMethodPermissionsWriteHandler);
  resourceRegistration.registerReadWriteAttribute(DISABLE_DEFAULT_EJB_PERMISSIONS,null,new AbstractWriteAttributeHandler<Void>(){
    protected boolean applyUpdateToRuntime(    final OperationContext context,    final ModelNode operation,    final String attributeName,    final ModelNode resolvedValue,    final ModelNode currentValue,    final HandbackHolder<Void> handbackHolder) throws OperationFailedException {
      if (resolvedValue.asBoolean()) {
        throw EjbLogger.ROOT_LOGGER.disableDefaultEjbPermissionsCannotBeTrue();
      }
      return false;
    }
    protected void revertUpdateToRuntime(    final OperationContext context,    final ModelNode operation,    final String attributeName,    final ModelNode valueToRestore,    final ModelNode valueToRevert,    final Void handback) throws OperationFailedException {
    }
  }
);
}
