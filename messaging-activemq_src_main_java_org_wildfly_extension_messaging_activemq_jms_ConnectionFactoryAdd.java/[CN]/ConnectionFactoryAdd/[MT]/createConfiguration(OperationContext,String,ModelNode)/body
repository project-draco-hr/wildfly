{
  final ModelNode entries=Common.ENTRIES.resolveModelAttribute(context,model);
  final String[] jndiBindings=JMSServices.getJndiBindings(entries);
  final ConnectionFactoryConfiguration config=new ConnectionFactoryConfigurationImpl().setName(name).setHA(ActiveMQClient.DEFAULT_HA).setBindings(jndiBindings);
  config.setHA(HA.resolveModelAttribute(context,model).asBoolean());
  config.setAutoGroup(Common.AUTO_GROUP.resolveModelAttribute(context,model).asBoolean());
  config.setBlockOnAcknowledge(Common.BLOCK_ON_ACKNOWLEDGE.resolveModelAttribute(context,model).asBoolean());
  config.setBlockOnDurableSend(Common.BLOCK_ON_DURABLE_SEND.resolveModelAttribute(context,model).asBoolean());
  config.setBlockOnNonDurableSend(Common.BLOCK_ON_NON_DURABLE_SEND.resolveModelAttribute(context,model).asBoolean());
  config.setCacheLargeMessagesClient(Common.CACHE_LARGE_MESSAGE_CLIENT.resolveModelAttribute(context,model).asBoolean());
  config.setCallTimeout(CALL_TIMEOUT.resolveModelAttribute(context,model).asLong());
  config.setClientFailureCheckPeriod(Common.CLIENT_FAILURE_CHECK_PERIOD.resolveModelAttribute(context,model).asInt());
  config.setCallFailoverTimeout(CALL_FAILOVER_TIMEOUT.resolveModelAttribute(context,model).asLong());
  final ModelNode clientId=CLIENT_ID.resolveModelAttribute(context,model);
  if (clientId.isDefined()) {
    config.setClientID(clientId.asString());
  }
  config.setCompressLargeMessages(Common.COMPRESS_LARGE_MESSAGES.resolveModelAttribute(context,model).asBoolean());
  config.setConfirmationWindowSize(Common.CONFIRMATION_WINDOW_SIZE.resolveModelAttribute(context,model).asInt());
  config.setConnectionTTL(Common.CONNECTION_TTL.resolveModelAttribute(context,model).asLong());
  List<String> connectorNames=Common.CONNECTORS.unwrap(context,model);
  config.setConnectorNames(connectorNames);
  config.setConsumerMaxRate(Common.CONSUMER_MAX_RATE.resolveModelAttribute(context,model).asInt());
  config.setConsumerWindowSize(Common.CONSUMER_WINDOW_SIZE.resolveModelAttribute(context,model).asInt());
  final ModelNode discoveryGroupName=Common.DISCOVERY_GROUP.resolveModelAttribute(context,model);
  if (discoveryGroupName.isDefined()) {
    config.setDiscoveryGroupName(discoveryGroupName.asString());
  }
  config.setDupsOKBatchSize(Common.DUPS_OK_BATCH_SIZE.resolveModelAttribute(context,model).asInt());
  config.setFailoverOnInitialConnection(Common.FAILOVER_ON_INITIAL_CONNECTION.resolveModelAttribute(context,model).asBoolean());
  final ModelNode groupId=Common.GROUP_ID.resolveModelAttribute(context,model);
  if (groupId.isDefined()) {
    config.setGroupID(groupId.asString());
  }
  final ModelNode lbcn=Common.CONNECTION_LOAD_BALANCING_CLASS_NAME.resolveModelAttribute(context,model);
  if (lbcn.isDefined()) {
    config.setLoadBalancingPolicyClassName(lbcn.asString());
  }
  config.setMaxRetryInterval(Common.MAX_RETRY_INTERVAL.resolveModelAttribute(context,model).asLong());
  config.setMinLargeMessageSize(Common.MIN_LARGE_MESSAGE_SIZE.resolveModelAttribute(context,model).asInt());
  config.setPreAcknowledge(Common.PRE_ACKNOWLEDGE.resolveModelAttribute(context,model).asBoolean());
  config.setProducerMaxRate(Common.PRODUCER_MAX_RATE.resolveModelAttribute(context,model).asInt());
  config.setProducerWindowSize(Common.PRODUCER_WINDOW_SIZE.resolveModelAttribute(context,model).asInt());
  config.setReconnectAttempts(Common.RECONNECT_ATTEMPTS.resolveModelAttribute(context,model).asInt());
  config.setRetryInterval(Common.RETRY_INTERVAL.resolveModelAttribute(context,model).asLong());
  config.setRetryIntervalMultiplier(Common.RETRY_INTERVAL_MULTIPLIER.resolveModelAttribute(context,model).asDouble());
  config.setScheduledThreadPoolMaxSize(Common.SCHEDULED_THREAD_POOL_MAX_SIZE.resolveModelAttribute(context,model).asInt());
  config.setThreadPoolMaxSize(Common.THREAD_POOL_MAX_SIZE.resolveModelAttribute(context,model).asInt());
  config.setTransactionBatchSize(Common.TRANSACTION_BATCH_SIZE.resolveModelAttribute(context,model).asInt());
  config.setUseGlobalPools(Common.USE_GLOBAL_POOLS.resolveModelAttribute(context,model).asBoolean());
  config.setLoadBalancingPolicyClassName(Common.CONNECTION_LOAD_BALANCING_CLASS_NAME.resolveModelAttribute(context,model).asString());
  JMSFactoryType jmsFactoryType=ConnectionFactoryType.valueOf(ConnectionFactoryAttributes.Regular.FACTORY_TYPE.resolveModelAttribute(context,model).asString()).getType();
  config.setFactoryType(jmsFactoryType);
  return config;
}
