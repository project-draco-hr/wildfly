{
  final DeploymentUnit deploymentUnit=phaseContext.getDeploymentUnit();
  final Module module=deploymentUnit.getAttachment(Attachments.MODULE);
  final ServicesAttachment servicesAttachment=deploymentUnit.getAttachment(Attachments.SERVICES);
  if (module != null && servicesAttachment != null) {
    final ModuleClassLoader deploymentModuleClassLoader=module.getClassLoader();
    PersistenceProvider provider;
    final List<String> providerNames=servicesAttachment.getServiceImplementations(PERSISTENCE_PROVIDER_CLASSNAME);
    List<PersistenceProvider> providerList=new ArrayList<PersistenceProvider>();
    for (    String providerName : providerNames) {
      try {
        final Class<? extends PersistenceProvider> providerClass=deploymentModuleClassLoader.loadClass(providerName).asSubclass(PersistenceProvider.class);
        final Constructor<? extends PersistenceProvider> constructor=providerClass.getConstructor();
        provider=constructor.newInstance();
        providerList.add(provider);
        JpaLogger.ROOT_LOGGER.tracef("deployment %s is using its own copy of %s",deploymentUnit.getName(),providerName);
      }
 catch (      Exception e) {
        throw JpaLogger.ROOT_LOGGER.cannotDeployApp(e,providerName);
      }
    }
    if (providerList.size() > 0) {
      final String adapterClass=deploymentUnit.getAttachment(JpaAttachments.ADAPTOR_CLASS_NAME);
      PersistenceProviderAdaptor adaptor;
      if (adapterClass != null) {
        try {
          adaptor=(PersistenceProviderAdaptor)deploymentModuleClassLoader.loadClass(adapterClass).newInstance();
          adaptor.injectJtaManager(JtaManagerImpl.getInstance());
          adaptor.injectPlatform(platform);
          ArrayList<PersistenceProviderAdaptor> adaptorList=new ArrayList<>();
          adaptorList.add(adaptor);
          PersistenceProviderDeploymentHolder.savePersistenceProviderInDeploymentUnit(deploymentUnit,providerList,adaptorList);
        }
 catch (        InstantiationException e) {
          throw JpaLogger.ROOT_LOGGER.cannotCreateAdapter(e,adapterClass);
        }
catch (        IllegalAccessException e) {
          throw JpaLogger.ROOT_LOGGER.cannotCreateAdapter(e,adapterClass);
        }
catch (        ClassNotFoundException e) {
          throw JpaLogger.ROOT_LOGGER.cannotCreateAdapter(e,adapterClass);
        }
      }
 else {
        PersistenceProviderDeploymentHolder.savePersistenceProviderInDeploymentUnit(deploymentUnit,providerList,null);
      }
    }
  }
}
