{
  nameValidator.validate(operation);
  final String attributeName=operation.require(NAME).asString();
  ModelNode newValue=operation.hasDefined(VALUE) ? operation.get(VALUE) : new ModelNode();
  validateUnresolvedValue(attributeName,newValue);
  final Resource resource=context.readResourceForUpdate(PathAddress.EMPTY_ADDRESS);
  final ModelNode submodel=resource.getModel();
  final ModelNode currentValue=submodel.get(attributeName).clone();
  final AttributeDefinition attributeDefinition=getAttributeDefinition(attributeName);
  final ModelNode defaultValue;
  if (attributeDefinition != null) {
    defaultValue=attributeDefinition.getDefaultValue();
    final ModelNode syntheticOp=new ModelNode();
    syntheticOp.get(attributeName).set(newValue);
    attributeDefinition.validateAndSet(syntheticOp,submodel);
    newValue=submodel.get(attributeName);
  }
 else {
    defaultValue=null;
    submodel.get(attributeName).set(newValue);
  }
  finishModelStage(context,operation,attributeName,newValue,currentValue,resource);
  if (requiresRuntime(context)) {
    final ModelNode updatedValue=newValue;
    context.addStep(new OperationStepHandler(){
      @Override public void execute(      OperationContext context,      ModelNode operation) throws OperationFailedException {
        final ModelNode resolvedValue=attributeDefinition != null ? attributeDefinition.resolveModelAttribute(context,submodel) : updatedValue.resolve();
        validateResolvedValue(attributeName,updatedValue);
        final HandbackHolder<T> handback=new HandbackHolder<T>();
        final boolean reloadRequired=applyUpdateToRuntime(context,operation,attributeName,resolvedValue,currentValue,handback);
        if (reloadRequired) {
          context.reloadRequired();
        }
        context.completeStep(new OperationContext.RollbackHandler(){
          @Override public void handleRollback(          OperationContext context,          ModelNode operation){
            ModelNode valueToRestore=currentValue.resolve();
            if (valueToRestore.isDefined() == false && defaultValue != null) {
              valueToRestore=defaultValue;
            }
            try {
              revertUpdateToRuntime(context,operation,attributeName,valueToRestore,resolvedValue,handback.handback);
            }
 catch (            Exception e) {
              MGMT_OP_LOGGER.errorRevertingOperation(e,getClass().getSimpleName(),operation.require(ModelDescriptionConstants.OP).asString(),PathAddress.pathAddress(operation.get(ModelDescriptionConstants.OP_ADDR)));
            }
            if (reloadRequired) {
              context.revertReloadRequired();
            }
          }
        }
);
      }
    }
,OperationContext.Stage.RUNTIME);
  }
  context.stepCompleted();
}
