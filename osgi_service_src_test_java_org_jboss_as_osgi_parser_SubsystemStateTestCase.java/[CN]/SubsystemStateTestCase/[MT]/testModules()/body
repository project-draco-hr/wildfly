{
  SubsystemState state=new SubsystemState();
  final List<Observable> observables=new ArrayList<Observable>();
  final List<Object> arguments=new ArrayList<Object>();
  Observer o=new Observer(){
    @Override public void update(    Observable o,    Object arg){
      observables.add(o);
      arguments.add(arg);
    }
  }
;
  state.addObserver(o);
  Assert.assertEquals("Precondition",0,state.getModules().size());
  Assert.assertEquals("Precondition",0,arguments.size());
  ModuleIdentifier id=ModuleIdentifier.fromString("hi");
  SubsystemState.OSGiModule m=new SubsystemState.OSGiModule(id,3);
  state.addModule(m);
  Assert.assertEquals(1,arguments.size());
  SubsystemState.ChangeEvent event=(SubsystemState.ChangeEvent)arguments.get(0);
  assertEventEquals(id.toString(),false,SubsystemState.ChangeType.MODULE,event);
  Assert.assertEquals(Collections.singletonList(m),state.getModules());
  Assert.assertNull(state.removeModule("abc"));
  Assert.assertEquals(Collections.singletonList(m),state.getModules());
  Assert.assertEquals(m,state.removeModule("hi"));
  Assert.assertEquals(2,arguments.size());
  SubsystemState.ChangeEvent event2=(SubsystemState.ChangeEvent)arguments.get(1);
  assertEventEquals(id.toString(),true,SubsystemState.ChangeType.MODULE,event2);
  Assert.assertEquals(0,state.getModules().size());
}
