{
  SubsystemState state=new SubsystemState();
  final List<Observable> observables=new ArrayList<Observable>();
  final List<Object> arguments=new ArrayList<Object>();
  Observer o=new Observer(){
    @Override public void update(    Observable o,    Object arg){
      observables.add(o);
      arguments.add(arg);
    }
  }
;
  state.addObserver(o);
  Assert.assertEquals("Precondition",Collections.emptyMap(),state.getProperties());
  Assert.assertEquals("Precondition",0,arguments.size());
  Assert.assertNull(state.setProperty("a","aaa"));
  Assert.assertNull(state.setProperty("b","bbb"));
  Assert.assertEquals("bbb",state.setProperty("b","ccc"));
  Assert.assertEquals(3,observables.size());
  Assert.assertEquals(Collections.nCopies(3,state),observables);
  Assert.assertEquals(3,arguments.size());
  SubsystemState.ChangeEvent event=(SubsystemState.ChangeEvent)arguments.get(0);
  assertEventEquals("a",false,SubsystemState.ChangeType.PROPERTY,event);
  SubsystemState.ChangeEvent event2=(SubsystemState.ChangeEvent)arguments.get(1);
  assertEventEquals("b",false,SubsystemState.ChangeType.PROPERTY,event2);
  SubsystemState.ChangeEvent event3=(SubsystemState.ChangeEvent)arguments.get(2);
  assertEventEquals("b",false,SubsystemState.ChangeType.PROPERTY,event3);
  Assert.assertEquals("aaa",state.getProperties().get("a"));
  Assert.assertEquals("ccc",state.getProperties().get("b"));
  Assert.assertEquals("aaa",state.setProperty("a",null));
  Assert.assertEquals(4,observables.size());
  Assert.assertEquals(Collections.nCopies(4,state),observables);
  Assert.assertEquals(4,arguments.size());
  SubsystemState.ChangeEvent event4=(SubsystemState.ChangeEvent)arguments.get(3);
  assertEventEquals("a",true,SubsystemState.ChangeType.PROPERTY,event4);
  Assert.assertNull(state.getProperties().get("a"));
  Assert.assertEquals("ccc",state.getProperties().get("b"));
}
