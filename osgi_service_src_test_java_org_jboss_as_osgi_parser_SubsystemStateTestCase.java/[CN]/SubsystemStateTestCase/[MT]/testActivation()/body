{
  SubsystemState state=new SubsystemState();
  final List<Observable> observables=new ArrayList<Observable>();
  final List<Object> arguments=new ArrayList<Object>();
  Observer o=new Observer(){
    @Override public void update(    Observable o,    Object arg){
      observables.add(o);
      arguments.add(arg);
    }
  }
;
  state.addObserver(o);
  Assert.assertEquals("Default",SubsystemState.Activation.LAZY,state.getActivationPolicy());
  Assert.assertEquals("Precondition",0,arguments.size());
  state.setActivation(SubsystemState.Activation.LAZY);
  Assert.assertEquals(0,arguments.size());
  state.setActivation(SubsystemState.Activation.EAGER);
  Assert.assertEquals(1,arguments.size());
  SubsystemState.ChangeEvent event=(SubsystemState.ChangeEvent)arguments.get(0);
  assertEventEquals(SubsystemState.Activation.EAGER.toString(),false,SubsystemState.ChangeType.ACTIVATION,event);
}
