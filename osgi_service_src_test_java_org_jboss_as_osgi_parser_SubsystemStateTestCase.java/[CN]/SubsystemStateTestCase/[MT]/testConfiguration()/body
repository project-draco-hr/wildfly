{
  String pid="myPid";
  SubsystemState state=new SubsystemState();
  final List<Observable> observables=new ArrayList<Observable>();
  final List<Object> arguments=new ArrayList<Object>();
  Observer o=new Observer(){
    @Override public void update(    Observable o,    Object arg){
      observables.add(o);
      arguments.add(arg);
    }
  }
;
  state.addObserver(o);
  Assert.assertFalse(state.hasConfiguration(pid));
  Assert.assertNull(state.getConfiguration(pid));
  Assert.assertEquals(0,state.getConfigurations().size());
  Dictionary<String,String> d=new Hashtable<String,String>();
  d.put("a","b");
  Assert.assertEquals("Precondition",0,arguments.size());
  state.putConfiguration(pid,d);
  Assert.assertEquals(1,observables.size());
  Assert.assertEquals(1,arguments.size());
  Assert.assertSame(state,observables.get(0));
  SubsystemState.ChangeEvent event=(SubsystemState.ChangeEvent)arguments.get(0);
  assertEventEquals(pid,false,SubsystemState.ChangeType.CONFIG,event);
  Assert.assertEquals(map(d),map(state.getConfiguration(pid)));
  Assert.assertEquals(1,state.getConfigurations().size());
  Assert.assertEquals(pid,state.getConfigurations().iterator().next());
  Assert.assertEquals(map(d),map(state.removeConfiguration(pid)));
  Assert.assertEquals(2,observables.size());
  Assert.assertEquals(2,arguments.size());
  Assert.assertSame(state,observables.get(1));
  SubsystemState.ChangeEvent event2=(SubsystemState.ChangeEvent)arguments.get(1);
  assertEventEquals(pid,true,SubsystemState.ChangeType.CONFIG,event2);
}
