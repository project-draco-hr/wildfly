{
  ManagementResourceRegistration hostRegistration=root.registerSubModel(PathElement.pathElement(HOST),HostDescriptionProviders.HOST_ROOT_PROVIDER);
  LocalHostAddHandler handler=LocalHostAddHandler.getInstance(hostControllerInfo);
  hostRegistration.registerOperationHandler(LocalHostAddHandler.OPERATION_NAME,handler,handler,false,OperationEntry.EntryType.PRIVATE);
  EnumSet<OperationEntry.Flag> flags=EnumSet.of(OperationEntry.Flag.READ_ONLY);
  root.registerOperationHandler(READ_RESOURCE_OPERATION,GlobalOperationHandlers.READ_RESOURCE,CommonProviders.READ_RESOURCE_PROVIDER,true,OperationEntry.EntryType.PUBLIC,flags);
  root.registerOperationHandler(READ_ATTRIBUTE_OPERATION,GlobalOperationHandlers.READ_ATTRIBUTE,CommonProviders.READ_ATTRIBUTE_PROVIDER,true,OperationEntry.EntryType.PUBLIC,flags);
  root.registerOperationHandler(READ_RESOURCE_DESCRIPTION_OPERATION,GlobalOperationHandlers.READ_RESOURCE_DESCRIPTION,CommonProviders.READ_RESOURCE_DESCRIPTION_PROVIDER,true,OperationEntry.EntryType.PUBLIC,flags);
  root.registerOperationHandler(READ_CHILDREN_NAMES_OPERATION,GlobalOperationHandlers.READ_CHILDREN_NAMES,CommonProviders.READ_CHILDREN_NAMES_PROVIDER,true,OperationEntry.EntryType.PUBLIC,flags);
  root.registerOperationHandler(READ_CHILDREN_TYPES_OPERATION,GlobalOperationHandlers.READ_CHILDREN_TYPES,CommonProviders.READ_CHILDREN_TYPES_PROVIDER,true,OperationEntry.EntryType.PUBLIC,flags);
  root.registerOperationHandler(READ_CHILDREN_RESOURCES_OPERATION,GlobalOperationHandlers.READ_CHILDREN_RESOURCES,CommonProviders.READ_CHILDREN_RESOURCES_PROVIDER,true,OperationEntry.EntryType.PUBLIC,flags);
  root.registerOperationHandler(READ_OPERATION_NAMES_OPERATION,GlobalOperationHandlers.READ_OPERATION_NAMES,CommonProviders.READ_OPERATION_NAMES_PROVIDER,true,OperationEntry.EntryType.PUBLIC,flags);
  root.registerOperationHandler(READ_OPERATION_DESCRIPTION_OPERATION,GlobalOperationHandlers.READ_OPERATION_DESCRIPTION,CommonProviders.READ_OPERATION_PROVIDER,true,OperationEntry.EntryType.PUBLIC,flags);
  root.registerOperationHandler(UNDEFINE_ATTRIBUTE_OPERATION,GlobalOperationHandlers.UNDEFINE_ATTRIBUTE,CommonProviders.UNDEFINE_ATTRIBUTE_PROVIDER,true);
  root.registerOperationHandler(WRITE_ATTRIBUTE_OPERATION,GlobalOperationHandlers.WRITE_ATTRIBUTE,CommonProviders.WRITE_ATTRIBUTE_PROVIDER,true);
  root.registerOperationHandler(CompositeOperationHandler.NAME,CompositeOperationHandler.INSTANCE,CompositeOperationHandler.INSTANCE,false,OperationEntry.EntryType.PRIVATE);
  XmlMarshallingHandler xmh=new HostXmlMarshallingHandler(configurationPersister.getHostPersister(),hostControllerInfo);
  hostRegistration.registerOperationHandler(XmlMarshallingHandler.OPERATION_NAME,xmh,xmh,false,OperationEntry.EntryType.PUBLIC,flags);
  hostRegistration.registerOperationHandler(NamespaceAddHandler.OPERATION_NAME,NamespaceAddHandler.INSTANCE,NamespaceAddHandler.INSTANCE,false);
  hostRegistration.registerOperationHandler(NamespaceRemoveHandler.OPERATION_NAME,NamespaceRemoveHandler.INSTANCE,NamespaceRemoveHandler.INSTANCE,false);
  hostRegistration.registerOperationHandler(SchemaLocationAddHandler.OPERATION_NAME,SchemaLocationAddHandler.INSTANCE,SchemaLocationAddHandler.INSTANCE,false);
  hostRegistration.registerOperationHandler(SchemaLocationRemoveHandler.OPERATION_NAME,SchemaLocationRemoveHandler.INSTANCE,SchemaLocationRemoveHandler.INSTANCE,false);
  hostRegistration.registerReadWriteAttribute(NAME,null,new WriteAttributeHandlers.StringLengthValidatingHandler(1),Storage.CONFIGURATION);
  hostRegistration.registerReadOnlyAttribute(MASTER,IsMasterHandler.INSTANCE,Storage.RUNTIME);
  StartServersHandler ssh=new StartServersHandler(environment,serverInventory);
  hostRegistration.registerOperationHandler(StartServersHandler.OPERATION_NAME,ssh,ssh,false,OperationEntry.EntryType.PRIVATE);
  HostShutdownHandler hsh=new HostShutdownHandler(domainController);
  hostRegistration.registerOperationHandler(HostShutdownHandler.OPERATION_NAME,hsh,hsh);
  hostRegistration.registerOperationHandler(ResolveExpressionHandler.OPERATION_NAME,ResolveExpressionHandler.INSTANCE,ResolveExpressionHandler.INSTANCE,EnumSet.of(OperationEntry.Flag.READ_ONLY));
  hostRegistration.registerOperationHandler(ResolveExpressionOnHostHandler.OPERATION_NAME,ResolveExpressionOnHostHandler.INSTANCE,ResolveExpressionOnHostHandler.INSTANCE,EnumSet.of(OperationEntry.Flag.READ_ONLY,OperationEntry.Flag.DOMAIN_PUSH_TO_SERVERS));
  ProcessReloadHandler reloadHandler=new ProcessReloadHandler(HostControllerService.HC_SERVICE_NAME,runningModeControl,HostRootDescription.getResourceDescriptionResolver("host"));
  hostRegistration.registerOperationHandler(ProcessReloadHandler.OPERATION_NAME,reloadHandler,reloadHandler);
  RunningModeReadHandler.createAndRegister(runningModeControl,hostRegistration);
  DomainServerLifecycleHandlers.initializeServerInventory(serverInventory);
  hostRegistration.registerOperationHandler(SpecifiedInterfaceResolveHandler.OPERATION_NAME,SpecifiedInterfaceResolveHandler.INSTANCE,SpecifiedInterfaceResolveHandler.INSTANCE);
  ManagementResourceRegistration sysProps=hostRegistration.registerSubModel(PathElement.pathElement(SYSTEM_PROPERTY),HostDescriptionProviders.SYSTEM_PROPERTIES_PROVIDER);
  sysProps.registerOperationHandler(SystemPropertyAddHandler.OPERATION_NAME,SystemPropertyAddHandler.INSTANCE_WITH_BOOTTIME,SystemPropertyAddHandler.INSTANCE_WITH_BOOTTIME,false);
  sysProps.registerOperationHandler(SystemPropertyRemoveHandler.OPERATION_NAME,SystemPropertyRemoveHandler.INSTANCE,SystemPropertyRemoveHandler.INSTANCE,false);
  sysProps.registerReadWriteAttribute(VALUE,null,SystemPropertyValueWriteAttributeHandler.INSTANCE,Storage.CONFIGURATION);
  sysProps.registerReadWriteAttribute(BOOT_TIME,null,new WriteAttributeHandlers.ModelTypeValidatingHandler(ModelType.BOOLEAN),Storage.CONFIGURATION);
  ManagementResourceRegistration vault=hostRegistration.registerSubModel(PathElement.pathElement(CORE_SERVICE,VAULT),CommonProviders.VAULT_PROVIDER);
  VaultAddHandler vah=new VaultAddHandler(vaultReader);
  vault.registerOperationHandler(VaultAddHandler.OPERATION_NAME,vah,vah,false);
  VaultRemoveHandler vrh=new VaultRemoveHandler(vaultReader);
  vault.registerOperationHandler(VaultRemoveHandler.OPERATION_NAME,vrh,vrh,false);
  VaultWriteAttributeHandler.INSTANCE.registerAttributes(vault);
  ManagementResourceRegistration management=hostRegistration.registerSubModel(PathElement.pathElement(CORE_SERVICE,MANAGEMENT),CommonProviders.MANAGEMENT_WITH_INTERFACES_PROVIDER);
  management.registerSubModel(SecurityRealmResourceDefinition.INSTANCE);
  management.registerSubModel(LdapConnectionResourceDefinition.INSTANCE);
  management.registerSubModel(new NativeManagementResourceDefinition(hostControllerInfo));
  management.registerSubModel(new HttpManagementResourceDefinition(hostControllerInfo,environment));
  PlatformMBeanResourceRegistrar.registerPlatformMBeanResources(hostRegistration);
  LocalDomainControllerAddHandler localDcAddHandler=LocalDomainControllerAddHandler.getInstance(root,hostControllerInfo,configurationPersister,localFileRepository,contentRepository,domainController,registry);
  hostRegistration.registerOperationHandler(LocalDomainControllerAddHandler.OPERATION_NAME,localDcAddHandler,localDcAddHandler,false);
  hostRegistration.registerOperationHandler(LocalDomainControllerRemoveHandler.OPERATION_NAME,LocalDomainControllerRemoveHandler.INSTANCE,LocalDomainControllerRemoveHandler.INSTANCE,false);
  RemoteDomainControllerAddHandler remoteDcAddHandler=RemoteDomainControllerAddHandler.getInstance(root,hostControllerInfo,configurationPersister,contentRepository,remoteFileRepository);
  hostRegistration.registerOperationHandler(RemoteDomainControllerAddHandler.OPERATION_NAME,remoteDcAddHandler,remoteDcAddHandler,false);
  hostRegistration.registerOperationHandler(RemoteDomainControllerRemoveHandler.OPERATION_NAME,RemoteDomainControllerRemoveHandler.INSTANCE,RemoteDomainControllerRemoveHandler.INSTANCE,false);
  SnapshotDeleteHandler snapshotDelete=new SnapshotDeleteHandler(configurationPersister.getHostPersister());
  hostRegistration.registerOperationHandler(SnapshotDeleteHandler.OPERATION_NAME,snapshotDelete,snapshotDelete,false);
  SnapshotListHandler snapshotList=new SnapshotListHandler(configurationPersister.getHostPersister());
  hostRegistration.registerOperationHandler(SnapshotListHandler.OPERATION_NAME,snapshotList,snapshotList,false);
  SnapshotTakeHandler snapshotTake=new SnapshotTakeHandler(configurationPersister.getHostPersister());
  hostRegistration.registerOperationHandler(SnapshotTakeHandler.OPERATION_NAME,snapshotTake,snapshotTake,false);
  final ManagementResourceRegistration jvms=hostRegistration.registerSubModel(PathElement.pathElement(JVM),CommonProviders.JVM_PROVIDER);
  JVMHandlers.register(jvms);
  ManagementResourceRegistration paths=hostRegistration.registerSubModel(PathElement.pathElement(PATH),CommonProviders.SPECIFIED_PATH_PROVIDER);
  paths.registerOperationHandler(PathAddHandler.OPERATION_NAME,PathAddHandler.SPECIFIED_INSTANCE,PathAddHandler.SPECIFIED_INSTANCE,false);
  paths.registerOperationHandler(PathRemoveHandler.OPERATION_NAME,PathRemoveHandler.INSTANCE,PathRemoveHandler.INSTANCE,false);
  ManagementResourceRegistration interfaces=hostRegistration.registerSubModel(PathElement.pathElement(INTERFACE),CommonProviders.SPECIFIED_INTERFACE_PROVIDER);
  HostSpecifiedInterfaceAddHandler hsiah=new HostSpecifiedInterfaceAddHandler();
  interfaces.registerOperationHandler(InterfaceAddHandler.OPERATION_NAME,hsiah,hsiah,false);
  HostSpecifiedInterfaceRemoveHandler sirh=new HostSpecifiedInterfaceRemoveHandler();
  interfaces.registerOperationHandler(InterfaceRemoveHandler.OPERATION_NAME,sirh,sirh,false);
  InterfaceCriteriaWriteHandler.register(interfaces);
  interfaces.registerReadOnlyAttribute(ModelDescriptionConstants.CRITERIA,InterfaceLegacyCriteriaReadHandler.INSTANCE,Storage.CONFIGURATION);
  interfaces.registerOperationHandler(SpecifiedInterfaceResolveHandler.OPERATION_NAME,SpecifiedInterfaceResolveHandler.INSTANCE,SpecifiedInterfaceResolveHandler.INSTANCE);
  ManagementResourceRegistration servers=hostRegistration.registerSubModel(PathElement.pathElement(SERVER_CONFIG),HostDescriptionProviders.SERVER_PROVIDER);
  servers.registerOperationHandler(ServerAddHandler.OPERATION_NAME,ServerAddHandler.INSTANCE,ServerAddHandler.INSTANCE,false);
  servers.registerOperationHandler(ServerRemoveHandler.OPERATION_NAME,ServerRemoveHandler.INSTANCE,ServerRemoveHandler.INSTANCE,false);
  servers.registerReadWriteAttribute(AUTO_START,null,new WriteAttributeHandlers.ModelTypeValidatingHandler(ModelType.BOOLEAN),Storage.CONFIGURATION);
  servers.registerReadWriteAttribute(SOCKET_BINDING_GROUP,null,WriteAttributeHandlers.WriteAttributeOperationHandler.INSTANCE,Storage.CONFIGURATION);
  servers.registerReadWriteAttribute(SOCKET_BINDING_PORT_OFFSET,null,new WriteAttributeHandlers.IntRangeValidatingHandler(0,true),Storage.CONFIGURATION);
  servers.registerReadWriteAttribute(PRIORITY,null,new WriteAttributeHandlers.IntRangeValidatingHandler(0),Storage.CONFIGURATION);
  servers.registerReadWriteAttribute(CPU_AFFINITY,null,new WriteAttributeHandlers.StringLengthValidatingHandler(1),Storage.CONFIGURATION);
  servers.registerMetric(ServerStatusHandler.ATTRIBUTE_NAME,new ServerStatusHandler(serverInventory));
  ServerStartHandler startHandler=new ServerStartHandler(serverInventory);
  servers.registerOperationHandler(ServerStartHandler.OPERATION_NAME,startHandler,startHandler,EnumSet.of(OperationEntry.Flag.HOST_CONTROLLER_ONLY));
  ServerRestartHandler restartHandler=new ServerRestartHandler(serverInventory);
  servers.registerOperationHandler(ServerRestartHandler.OPERATION_NAME,restartHandler,restartHandler,EnumSet.of(OperationEntry.Flag.HOST_CONTROLLER_ONLY));
  ServerStopHandler stopHandler=new ServerStopHandler(serverInventory);
  servers.registerOperationHandler(ServerStopHandler.OPERATION_NAME,stopHandler,stopHandler,EnumSet.of(OperationEntry.Flag.HOST_CONTROLLER_ONLY));
  ManagementResourceRegistration serverPaths=servers.registerSubModel(PathElement.pathElement(PATH),CommonProviders.SPECIFIED_INTERFACE_PROVIDER);
  serverPaths.registerOperationHandler(PathAddHandler.OPERATION_NAME,PathAddHandler.SPECIFIED_INSTANCE,PathAddHandler.SPECIFIED_INSTANCE,false);
  serverPaths.registerOperationHandler(PathRemoveHandler.OPERATION_NAME,PathRemoveHandler.INSTANCE,PathRemoveHandler.INSTANCE,false);
  ManagementResourceRegistration serverInterfaces=servers.registerSubModel(PathElement.pathElement(INTERFACE),CommonProviders.SPECIFIED_INTERFACE_PROVIDER);
  serverInterfaces.registerOperationHandler(InterfaceAddHandler.OPERATION_NAME,SpecifiedInterfaceAddHandler.INSTANCE,SpecifiedInterfaceAddHandler.INSTANCE,false);
  serverInterfaces.registerOperationHandler(InterfaceRemoveHandler.OPERATION_NAME,SpecifiedInterfaceRemoveHandler.INSTANCE,SpecifiedInterfaceRemoveHandler.INSTANCE,false);
  InterfaceCriteriaWriteHandler.register(serverInterfaces);
  serverInterfaces.registerReadOnlyAttribute(ModelDescriptionConstants.CRITERIA,InterfaceLegacyCriteriaReadHandler.INSTANCE,Storage.CONFIGURATION);
  ManagementResourceRegistration serverSysProps=servers.registerSubModel(PathElement.pathElement(SYSTEM_PROPERTY),HostDescriptionProviders.SERVER_SYSTEM_PROPERTIES_PROVIDER);
  serverSysProps.registerOperationHandler(SystemPropertyAddHandler.OPERATION_NAME,SystemPropertyAddHandler.INSTANCE_WITH_BOOTTIME,SystemPropertyAddHandler.INSTANCE_WITH_BOOTTIME,false);
  serverSysProps.registerOperationHandler(SystemPropertyRemoveHandler.OPERATION_NAME,SystemPropertyRemoveHandler.INSTANCE,SystemPropertyRemoveHandler.INSTANCE,false);
  serverSysProps.registerReadWriteAttribute(VALUE,null,SystemPropertyValueWriteAttributeHandler.INSTANCE,Storage.CONFIGURATION);
  serverSysProps.registerReadWriteAttribute(BOOT_TIME,null,new WriteAttributeHandlers.ModelTypeValidatingHandler(ModelType.BOOLEAN),Storage.CONFIGURATION);
  final ManagementResourceRegistration serverVMs=servers.registerSubModel(PathElement.pathElement(JVM),JVMHandlers.SERVER_MODEL_PROVIDER);
  JVMHandlers.register(serverVMs,true);
}
