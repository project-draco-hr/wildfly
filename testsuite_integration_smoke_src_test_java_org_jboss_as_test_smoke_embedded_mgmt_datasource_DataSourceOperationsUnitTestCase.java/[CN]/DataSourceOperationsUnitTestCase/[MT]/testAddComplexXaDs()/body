{
  final String complexXaDs="complexXaDs";
  final String complexXaDsJndi="java:jboss/xa-datasources/" + complexXaDs;
  final ModelNode address=new ModelNode();
  address.add("subsystem","datasources");
  address.add("xa-data-source",complexXaDs);
  address.protect();
  final ModelNode operation=new ModelNode();
  operation.get(OP).set("add");
  operation.get(OP_ADDR).set(address);
  Hashtable<String,String> params=hashtableWithXaParameters(complexXaDs,complexXaDsJndi);
  setOperationParams(operation,params);
  addExtensionProperties(operation);
  execute(operation);
  final ModelNode xaDatasourcePropertiesAddress=address.clone();
  xaDatasourcePropertiesAddress.add("xa-datasource-properties","URL");
  xaDatasourcePropertiesAddress.protect();
  final ModelNode xaDatasourcePropertyOperation=new ModelNode();
  xaDatasourcePropertyOperation.get(OP).set("add");
  xaDatasourcePropertyOperation.get(OP_ADDR).set(xaDatasourcePropertiesAddress);
  xaDatasourcePropertyOperation.get("value").set("jdbc:h2:mem:test");
  execute(xaDatasourcePropertyOperation);
  final ModelNode operationts=new ModelNode();
  operationts.get(OP).set("take-snapshot");
  execute(operationts);
  List<ModelNode> newList=marshalAndReparseDsResources("xa-data-source");
  Assert.assertNotNull(newList);
  Map<String,ModelNode> parseChildren=null;
  boolean containsRightJndiname=false;
  for (  ModelNode result : newList) {
    parseChildren=getChildren(result);
    if (!parseChildren.isEmpty() && parseChildren.get("jndi-name") != null && parseChildren.get("jndi-name").asString().equals(complexXaDsJndi)) {
      containsRightJndiname=true;
      break;
    }
  }
  Assert.assertTrue(containsRightJndiname);
  controlParseChildrenParams(parseChildren,params);
  remove(address);
}
