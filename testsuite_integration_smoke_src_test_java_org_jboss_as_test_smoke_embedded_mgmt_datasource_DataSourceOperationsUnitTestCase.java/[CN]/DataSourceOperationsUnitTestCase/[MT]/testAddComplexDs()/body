{
  final String complexDs="complexDs";
  final String complexDsJndi="java:jboss/datasources/" + complexDs;
  final ModelNode address=new ModelNode();
  address.add("subsystem","datasources");
  address.add("data-source",complexDs);
  address.protect();
  Properties params=nonXaDsProperties(complexDsJndi);
  final ModelNode operation=new ModelNode();
  operation.get(OP).set("add");
  operation.get(OP_ADDR).set(address);
  setOperationParams(operation,params);
  addExtensionProperties(operation);
  executeOperation(operation);
  final ModelNode datasourcePropertiesAddress=address.clone();
  datasourcePropertiesAddress.add("connection-properties","char.encoding");
  datasourcePropertiesAddress.protect();
  final ModelNode datasourcePropertyOperation=new ModelNode();
  datasourcePropertyOperation.get(OP).set("add");
  datasourcePropertyOperation.get(OP_ADDR).set(datasourcePropertiesAddress);
  datasourcePropertyOperation.get("value").set("UTF-8");
  executeOperation(datasourcePropertyOperation);
  List<ModelNode> newList=marshalAndReparseDsResources("data-source",getModelControllerClient());
  remove(address);
  Assert.assertNotNull("Reparsing failed:",newList);
  ModelNode rightChild=findNodeWithProperty(newList,"jndi-name",complexDsJndi);
  Assert.assertTrue("node:" + rightChild.asString() + ";\nparams"+ params,checkModelParams(rightChild,params));
  Assert.assertEquals(rightChild.asString(),"Property2",rightChild.get("valid-connection-checker-properties","name").asString());
  Assert.assertEquals(rightChild.asString(),"Property4",rightChild.get("exception-sorter-properties","name").asString());
  Assert.assertEquals(rightChild.asString(),"Property3",rightChild.get("stale-connection-checker-properties","name").asString());
  Assert.assertEquals(rightChild.asString(),"Property1",rightChild.get("reauth-plugin-properties","name").asString());
  Assert.assertNotNull("connection-properties not propagated ",findNodeWithProperty(newList,"value","UTF-8"));
}
