{
  this.isPrimaryKeyParameter=false;
  this.parameterString=parameterString;
  if (parameterString == null || parameterString.length() == 0) {
    throw new IllegalArgumentException("Parameter string is empty");
  }
  StringTokenizer tok=new StringTokenizer(parameterString,".");
  try {
    argNum=Integer.parseInt(tok.nextToken());
  }
 catch (  NumberFormatException e) {
    throw new IllegalArgumentException("The parameter must begin with a number");
  }
  if (argNum > method.getParameterTypes().length) {
    throw new IllegalArgumentException("The parameter index is " + argNum + " but the query method only has "+ method.getParameterTypes().length+ "parameter(s)");
  }
  Class argType=method.getParameterTypes()[argNum];
  JDBCType type;
  if (EJBObject.class.isAssignableFrom(argType) || EJBLocalObject.class.isAssignableFrom(argType)) {
    if (!tok.hasMoreTokens()) {
      throw new IllegalArgumentException("When the parameter is an ejb a field name must be supplied.");
    }
    String fieldName=tok.nextToken();
    field=getCMPField(manager,argType,fieldName);
    if (!field.isPrimaryKeyMember()) {
      throw new IllegalArgumentException("The specified field must be a primary key field");
    }
    type=field.getJDBCType();
  }
 else {
    type=manager.getJDBCTypeFactory().getJDBCType(argType);
  }
  if (type instanceof JDBCTypeSimple) {
    if (tok.hasMoreTokens()) {
      throw new IllegalArgumentException("Parameter is NOT a known " + "dependent value class, so a properties cannot supplied.");
    }
    jdbcType=type.getJDBCTypes()[0];
    this.type=type;
  }
 else {
    if (!tok.hasMoreTokens()) {
      throw new IllegalArgumentException("Parameter is a known " + "dependent value class, so a property must be supplied");
    }
    StringBuffer propertyName=new StringBuffer(parameterString.length());
    propertyName.append(tok.nextToken());
    while (tok.hasMoreTokens()) {
      propertyName.append('.').append(tok.nextToken());
    }
    property=((JDBCTypeComplex)type).getProperty(propertyName.toString());
    jdbcType=property.getJDBCType();
  }
}
