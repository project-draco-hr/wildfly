{
  final String[] oldHandlerNames=handlerNames.toArray(new String[handlerNames.size()]);
  handlerNames.clear();
  final LinkedHashSet<String> strings=new LinkedHashSet<String>(asList(names));
  handlerNames.addAll(strings);
  final String[] stringsArray=strings.toArray(new String[strings.size()]);
  final LogContextConfigurationImpl configuration=getConfiguration();
  if (!ExtHandler.class.isAssignableFrom(getActualClass())) {
    if (names.length == 0) {
      return;
    }
    throw LoggingMessages.MESSAGES.nestedHandlersNotSupported(getActualClass());
  }
  configuration.addAction(new ConfigAction<Void>(){
    public Void validate() throws IllegalArgumentException {
      for (      String name : stringsArray) {
        if (configuration.getHandlerConfiguration(name) == null) {
          throw LoggingMessages.MESSAGES.handlerNotFound(name);
        }
      }
      return null;
    }
    public void applyPreCreate(    final Void param){
    }
    public void applyPostCreate(    final Void param){
      final Map<String,Handler> handlerRefs=configuration.getHandlerRefs();
      final ExtHandler handler=(ExtHandler)handlerRefs.get(getName());
      final int length=stringsArray.length;
      final Handler[] handlers=new Handler[length];
      for (int i=0; i < length; i++) {
        handlers[i]=handlerRefs.get(stringsArray[i]);
      }
      handler.setHandlers(handlers);
    }
    public void rollback(){
      handlerNames.clear();
      handlerNames.addAll(asList(oldHandlerNames));
    }
  }
);
}
