{
  if (!context.getProcessType().isServer()) {
    context.addStep(new OperationStepHandler(){
      @Override public void execute(      OperationContext context,      ModelNode operation) throws OperationFailedException {
        String socketBindingGroupName=PathAddress.pathAddress(operation.get(OP_ADDR)).getLastElement().getValue();
        Set<String> serverGroups=new HashSet<String>();
        for (        ResourceEntry entry : context.readResourceFromRoot(PathAddress.EMPTY_ADDRESS).getChildren(SERVER_GROUP)) {
          if (entry.getModel().get(SOCKET_BINDING_GROUP).asString().equals(socketBindingGroupName)) {
            serverGroups.add(entry.getName());
          }
        }
        Set<String> runningServers=new HashSet<String>();
        for (        ResourceEntry entry : context.readResourceFromRoot(PathAddress.EMPTY_ADDRESS).getChildren(HOST).iterator().next().getChildren(SERVER_CONFIG)) {
          ModelNode configModel=entry.getModel();
          if (configModel.hasDefined(SOCKET_BINDING_GROUP)) {
            if (configModel.get(SOCKET_BINDING_GROUP).asString().equals(socketBindingGroupName)) {
              if (isRunningServer(entry.getName())) {
                runningServers.add(entry.getName());
              }
            }
          }
 else {
            if (serverGroups.contains(configModel.get(GROUP).asString())) {
              if (isRunningServer(entry.getName())) {
                runningServers.add(entry.getName());
              }
            }
          }
        }
        if (!runningServers.isEmpty()) {
          throw new OperationFailedException("Could not remove socket-binding-group since the following servers are running: " + runningServers);
        }
        context.completeStep(RollbackHandler.NOOP_ROLLBACK_HANDLER);
      }
    }
,Stage.MODEL);
  }
  super.performRemove(context,operation,model);
}
