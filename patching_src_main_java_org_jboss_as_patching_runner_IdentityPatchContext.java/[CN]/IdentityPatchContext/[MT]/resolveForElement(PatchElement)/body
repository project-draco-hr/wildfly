{
  final PatchElementProvider provider=element.getProvider();
  final String layerName=provider.getName();
  final LayerType layerType=provider.getLayerType();
  final Map<String,PatchEntry> map;
  if (layerType == LayerType.Layer) {
    map=layers;
  }
 else {
    map=addOns;
  }
  PatchEntry entry=map.get(layerName);
  if (entry == null) {
    final InstallationManager.MutablePatchingTarget target=modification.resolve(layerName,layerType);
    entry=new PatchEntry(target,element);
    map.put(layerName,entry);
    String elementId=element.getId();
    if (contentProvider != null) {
      try {
        File miscRoot=newFile(getPatchContentRootDir(),elementId,MISC);
        File moduleRoot=newFile(getPatchContentRootDir(),elementId,MODULES);
        File bundleRoot=newFile(getPatchContentRootDir(),elementId,BUNDLES);
        contentLoaders.put(element.getId(),new PatchContentLoader(miscRoot,bundleRoot,moduleRoot));
      }
 catch (      Exception e) {
        throw new PatchingException("failed to resolve content for " + element);
      }
    }
  }
  if (entry == null) {
    throw new PatchingException("failed to resolve target for " + element);
  }
  return entry;
}
