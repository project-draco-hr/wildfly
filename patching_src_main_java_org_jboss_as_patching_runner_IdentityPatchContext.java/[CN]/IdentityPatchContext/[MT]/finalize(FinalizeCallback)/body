{
  final Patch.PatchType patchType=callback.getPatchType();
  final String patchId;
  if (patchType == Patch.PatchType.CUMULATIVE) {
    patchId=modification.getCumulativeID();
  }
 else {
    patchId=callback.getPatchId();
  }
  final IdentityPatch rollbackPatch=createRollbackPatch(patchId,patchType,modification.getVersion());
  callback.finishPatch(rollbackPatch,this);
  return new PatchingResult(){
    @Override public String getPatchId(){
      return callback.getPatchId();
    }
    @Override public PatchInfo getPatchInfo(){
      return new PatchInfo(){
        @Override public String getVersion(){
          return identityEntry.getResultingVersion();
        }
        @Override public String getCumulativeID(){
          return identityEntry.delegate.getModifiedState().getCumulativeID();
        }
        @Override public List<String> getPatchIDs(){
          return identityEntry.delegate.getModifiedState().getPatchIDs();
        }
      }
;
    }
    @Override public void commit(){
      try {
        modification.complete();
        callback.commit();
      }
 catch (      Exception e) {
        throw new RuntimeException(e);
      }
    }
    @Override public void rollback(){
      try {
        callback.rollback();
      }
  finally {
        modification.cancel();
      }
    }
  }
;
}
