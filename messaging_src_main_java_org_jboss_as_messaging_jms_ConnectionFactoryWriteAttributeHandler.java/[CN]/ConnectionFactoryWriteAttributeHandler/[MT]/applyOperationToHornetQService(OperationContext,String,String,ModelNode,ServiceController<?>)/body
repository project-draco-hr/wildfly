{
  HornetQServer server=HornetQServer.class.cast(hqService.getValue());
  ConnectionFactoryControl control=ConnectionFactoryControl.class.cast(server.getManagementService().getResource(ResourceNames.JMS_CONNECTION_FACTORY + name));
  try {
    if (attributeName.equals(CommonAttributes.CLIENT_ID.getName())) {
      control.setClientID(value.isDefined() ? value.asString() : null);
    }
 else     if (attributeName.equals(CommonAttributes.COMPRESS_LARGE_MESSAGES.getName())) {
      control.setCompressLargeMessages(value.asBoolean());
    }
 else     if (attributeName.equals(CommonAttributes.CLIENT_FAILURE_CHECK_PERIOD.getName())) {
      control.setClientFailureCheckPeriod(value.asLong());
    }
 else     if (attributeName.equals(CommonAttributes.CALL_TIMEOUT.getName())) {
      control.setCallTimeout(value.asLong());
    }
 else     if (attributeName.equals(CommonAttributes.DUPS_OK_BATCH_SIZE.getName())) {
      control.setDupsOKBatchSize(value.asInt());
    }
 else     if (attributeName.equals(CommonAttributes.CONSUMER_MAX_RATE.getName())) {
      control.setConsumerMaxRate(value.asInt());
    }
 else     if (attributeName.equals(CommonAttributes.CONSUMER_WINDOW_SIZE.getName())) {
      control.setConsumerWindowSize(value.asInt());
    }
 else     if (attributeName.equals(CommonAttributes.PRODUCER_MAX_RATE.getName())) {
      control.setProducerMaxRate(value.asInt());
    }
 else     if (attributeName.equals(CommonAttributes.CONFIRMATION_WINDOW_SIZE.getName())) {
      control.setConfirmationWindowSize(value.asInt());
    }
 else     if (attributeName.equals(CommonAttributes.BLOCK_ON_ACK.getName())) {
      control.setBlockOnAcknowledge(value.asBoolean());
    }
 else     if (attributeName.equals(CommonAttributes.BLOCK_ON_DURABLE_SEND.getName())) {
      control.setBlockOnDurableSend(value.asBoolean());
    }
 else     if (attributeName.equals(CommonAttributes.BLOCK_ON_NON_DURABLE_SEND.getName())) {
      control.setBlockOnNonDurableSend(value.asBoolean());
    }
 else     if (attributeName.equals(CommonAttributes.PRE_ACK.getName())) {
      control.setPreAcknowledge(value.asBoolean());
    }
 else     if (attributeName.equals(CommonAttributes.CONNECTION_TTL.getName())) {
      control.setConnectionTTL(value.asLong());
    }
 else     if (attributeName.equals(CommonAttributes.TRANSACTION_BATCH_SIZE.getName())) {
      control.setTransactionBatchSize(value.asInt());
    }
 else     if (attributeName.equals(CommonAttributes.MIN_LARGE_MESSAGE_SIZE.getName())) {
      control.setMinLargeMessageSize(value.asInt());
    }
 else     if (attributeName.equals(CommonAttributes.AUTO_GROUP.getName())) {
      control.setAutoGroup(value.asBoolean());
    }
 else     if (attributeName.equals(CommonAttributes.RETRY_INTERVAL.getName())) {
      control.setRetryInterval(value.asLong());
    }
 else     if (attributeName.equals(CommonAttributes.RETRY_INTERVAL_MULTIPLIER.getName())) {
      control.setRetryIntervalMultiplier(value.asDouble());
    }
 else     if (attributeName.equals(CommonAttributes.CONNECTION_FACTORY_RECONNECT_ATTEMPTS.getName())) {
      control.setReconnectAttempts(value.asInt());
    }
 else     if (attributeName.equals(CommonAttributes.FAILOVER_ON_INITIAL_CONNECTION.getName())) {
      control.setFailoverOnInitialConnection(value.asBoolean());
    }
 else     if (attributeName.equals(CommonAttributes.PRODUCER_WINDOW_SIZE.getName())) {
      control.setProducerWindowSize(value.asInt());
    }
 else     if (attributeName.equals(CommonAttributes.CACHE_LARGE_MESSAGE_CLIENT.getName())) {
      control.setCacheLargeMessagesClient(value.asBoolean());
    }
 else     if (attributeName.equals(CommonAttributes.MAX_RETRY_INTERVAL.getName())) {
      control.setMaxRetryInterval(value.asLong());
    }
 else     if (attributeName.equals(CommonAttributes.CONNECTION_SCHEDULED_THREAD_POOL_MAX_SIZE.getName())) {
      control.setScheduledThreadPoolMaxSize(value.asInt());
    }
 else     if (attributeName.equals(CommonAttributes.CONNECTION_THREAD_POOL_MAX_SIZE.getName())) {
      control.setThreadPoolMaxSize(value.asInt());
    }
 else     if (attributeName.equals(CommonAttributes.GROUP_ID.getName())) {
      control.setGroupID(value.isDefined() ? value.asString() : null);
    }
 else     if (attributeName.equals(CommonAttributes.USE_GLOBAL_POOLS.getName())) {
      control.setUseGlobalPools(value.asBoolean());
    }
 else     if (attributeName.equals(CommonAttributes.LOAD_BALANCING_CLASS_NAME.getName())) {
      control.setConnectionLoadBalancingPolicyClassName(value.asString());
    }
 else {
      throw MESSAGES.unsupportedRuntimeAttribute(attributeName);
    }
  }
 catch (  RuntimeException e) {
    throw e;
  }
catch (  Exception e) {
    throw new RuntimeException(e);
  }
}
