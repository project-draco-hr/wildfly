{
  TesteeSet ts=getTesteeSet(node1,0,3);
  assertEquals(LockResult.NEW_LOCK,ts.testee.lock("test",1000,true));
  ts.testee.unlock("test",true);
  assertEquals(LockResult.NEW_LOCK,ts.testee.lock("test",1000,true));
  assertEquals(LockResult.ALREADY_HELD,ts.testee.lock("test",1000,true));
  ts.testee.unlock("test",false);
  ts.testee.unlock("test",true);
  assertEquals(LockResult.NEW_LOCK,ts.testee.lock("test",1000,true));
  assertEquals(LockResult.ALREADY_HELD,ts.testee.lock("test",1000,true));
  ts.testee.unlock("test",true);
  assertEquals(LockResult.ALREADY_HELD,ts.testee.lock("test",1000,true));
  ts.testee.unlock("test",false);
  ts.testee.unlock("test",false);
  assertEquals(LockResult.NEW_LOCK,ts.testee.lock("test",1000,true));
  ts.testee.unlock("test",true);
  when(ts.rpcDispatcher.getMethodCallTimeout()).thenReturn(60000l);
  List<RemoteLockResponse> rspList=getOKResponses(2);
  when(ts.rpcDispatcher.<RemoteLockResponse>callMethodOnCluster(eq("test"),eq("remoteLock"),eqLockParams(node1,200000),aryEq(AbstractClusterLockSupport.REMOTE_LOCK_TYPES),eq(true),eq(NULL_FILTER),anyInt(),eq(false))).thenReturn(rspList);
  assertEquals(LockResult.ACQUIRED_FROM_CLUSTER,ts.testee.lock("test",1000,false));
}
