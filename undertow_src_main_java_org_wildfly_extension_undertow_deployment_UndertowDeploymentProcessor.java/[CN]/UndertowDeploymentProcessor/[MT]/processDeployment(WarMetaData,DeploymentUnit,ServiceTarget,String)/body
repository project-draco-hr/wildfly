{
  final VirtualFile deploymentRoot=deploymentUnit.getAttachment(Attachments.DEPLOYMENT_ROOT).getRoot();
  final Module module=deploymentUnit.getAttachment(Attachments.MODULE);
  if (module == null) {
    throw new DeploymentUnitProcessingException(UndertowLogger.ROOT_LOGGER.failedToResolveModule(deploymentUnit));
  }
  final JBossWebMetaData metaData=warMetaData.getMergedJBossWebMetaData();
  final List<SetupAction> setupActions=deploymentUnit.getAttachmentList(org.jboss.as.ee.component.Attachments.WEB_SETUP_ACTIONS);
  metaData.resolveRunAs();
  ScisMetaData scisMetaData=deploymentUnit.getAttachment(ScisMetaData.ATTACHMENT_KEY);
  final Set<ServiceName> dependentComponents=new HashSet<>();
  final List<ServiceName> components=deploymentUnit.getAttachmentList(WebComponentDescription.WEB_COMPONENTS);
  final Set<ServiceName> failed=deploymentUnit.getAttachment(org.jboss.as.ee.component.Attachments.FAILED_COMPONENTS);
  for (  final ServiceName component : components) {
    if (!failed.contains(component)) {
      dependentComponents.add(component);
    }
  }
  boolean componentRegistryExists=true;
  ComponentRegistry componentRegistry=deploymentUnit.getAttachment(org.jboss.as.ee.component.Attachments.COMPONENT_REGISTRY);
  if (componentRegistry == null) {
    componentRegistryExists=false;
    componentRegistry=new ComponentRegistry(null);
  }
  final WebInjectionContainer injectionContainer=new WebInjectionContainer(module.getClassLoader(),componentRegistry);
  String jaccContextId=metaData.getJaccContextID();
  if (jaccContextId == null) {
    jaccContextId=deploymentUnit.getName();
  }
  if (deploymentUnit.getParent() != null) {
    jaccContextId=deploymentUnit.getParent().getName() + "!" + jaccContextId;
  }
  String deploymentName;
  if (deploymentUnit.getParent() == null) {
    deploymentName=deploymentUnit.getName();
  }
 else {
    deploymentName=deploymentUnit.getParent().getName() + "." + deploymentUnit.getName();
  }
  final String pathName=pathNameOfDeployment(deploymentUnit,metaData);
  String metaDataSecurityDomain=metaData.getSecurityDomain();
  if (metaDataSecurityDomain == null) {
    metaDataSecurityDomain=getJBossAppSecurityDomain(deploymentUnit);
  }
  if (metaDataSecurityDomain != null) {
    metaDataSecurityDomain=metaDataSecurityDomain.trim();
  }
  String securityDomain=metaDataSecurityDomain == null ? SecurityConstants.DEFAULT_APPLICATION_POLICY : SecurityUtil.unprefixSecurityDomain(metaDataSecurityDomain);
  String serverInstanceName=metaData.getServerInstanceName() == null ? defaultServer : metaData.getServerInstanceName();
  final ServiceName deploymentServiceName=UndertowService.deploymentServiceName(serverInstanceName,hostName,pathName);
  final Set<ServiceName> additionalDependencies=new HashSet<>();
  for (  final SetupAction setupAction : setupActions) {
    Set<ServiceName> dependencies=setupAction.dependencies();
    if (dependencies != null) {
      additionalDependencies.addAll(dependencies);
    }
  }
  SharedSessionManagerConfig sharedSessionManagerConfig=deploymentUnit.getParent() != null ? deploymentUnit.getParent().getAttachment(UndertowAttachments.SHARED_SESSION_MANAGER_CONFIG) : null;
  additionalDependencies.addAll(warMetaData.getAdditionalDependencies());
  final ServiceName hostServiceName=UndertowService.virtualHostName(serverInstanceName,hostName);
  TldsMetaData tldsMetaData=deploymentUnit.getAttachment(TldsMetaData.ATTACHMENT_KEY);
  UndertowDeploymentInfoService undertowDeploymentInfoService=UndertowDeploymentInfoService.builder().setAttributes(deploymentUnit.getAttachment(ServletContextAttribute.ATTACHMENT_KEY)).setTopLevelDeploymentName(deploymentUnit.getParent() == null ? deploymentUnit.getName() : deploymentUnit.getParent().getName()).setContextPath(pathName).setDeploymentName(deploymentName).setDeploymentRoot(deploymentRoot).setMergedMetaData(warMetaData.getMergedJBossWebMetaData()).setModule(module).setScisMetaData(scisMetaData).setJaccContextId(jaccContextId).setSecurityDomain(securityDomain).setSharedTlds(tldsMetaData == null ? Collections.<TldMetaData>emptyList() : tldsMetaData.getSharedTlds(deploymentUnit)).setTldsMetaData(tldsMetaData).setSetupActions(setupActions).setSharedSessionManagerConfig(sharedSessionManagerConfig).setOverlays(warMetaData.getOverlays()).setExpressionFactoryWrappers(deploymentUnit.getAttachmentList(ExpressionFactoryWrapper.ATTACHMENT_KEY)).setPredicatedHandlers(deploymentUnit.getAttachment(UndertowHandlersDeploymentProcessor.PREDICATED_HANDLERS)).setInitialHandlerChainWrappers(deploymentUnit.getAttachmentList(UndertowAttachments.UNDERTOW_INITIAL_HANDLER_CHAIN_WRAPPERS)).setInnerHandlerChainWrappers(deploymentUnit.getAttachmentList(UndertowAttachments.UNDERTOW_INNER_HANDLER_CHAIN_WRAPPERS)).setOuterHandlerChainWrappers(deploymentUnit.getAttachmentList(UndertowAttachments.UNDERTOW_OUTER_HANDLER_CHAIN_WRAPPERS)).setThreadSetupActions(deploymentUnit.getAttachmentList(UndertowAttachments.UNDERTOW_THREAD_SETUP_ACTIONS)).setServletExtensions(deploymentUnit.getAttachmentList(UndertowAttachments.UNDERTOW_SERVLET_EXTENSIONS)).setExplodedDeployment(ExplodedDeploymentMarker.isExplodedDeployment(deploymentUnit)).setWebSocketDeploymentInfo(deploymentUnit.getAttachment(UndertowAttachments.WEB_SOCKET_DEPLOYMENT_INFO)).createUndertowDeploymentInfoService();
  final ServiceName deploymentInfoServiceName=deploymentServiceName.append(UndertowDeploymentInfoService.SERVICE_NAME);
  ServiceBuilder<DeploymentInfo> infoBuilder=serviceTarget.addService(deploymentInfoServiceName,undertowDeploymentInfoService).addDependency(UndertowService.SERVLET_CONTAINER.append(defaultContainer),ServletContainerService.class,undertowDeploymentInfoService.getContainer()).addDependency(SecurityDomainService.SERVICE_NAME.append(securityDomain),SecurityDomainContext.class,undertowDeploymentInfoService.getSecurityDomainContextValue()).addDependency(UndertowService.UNDERTOW,UndertowService.class,undertowDeploymentInfoService.getUndertowService()).addDependencies(deploymentUnit.getAttachmentList(Attachments.WEB_DEPENDENCIES)).addDependency(PathManagerService.SERVICE_NAME,PathManager.class,undertowDeploymentInfoService.getPathManagerInjector()).addDependency(hostServiceName,Host.class,undertowDeploymentInfoService.getHost()).addDependencies(additionalDependencies);
  if (RequestControllerActivationMarker.isRequestControllerEnabled(deploymentUnit)) {
    String topLevelName;
    if (deploymentUnit.getParent() == null) {
      topLevelName=deploymentUnit.getName();
    }
 else {
      topLevelName=deploymentUnit.getParent().getName();
    }
    infoBuilder.addDependency(ControlPointService.serviceName(topLevelName,UndertowExtension.SUBSYSTEM_NAME),ControlPoint.class,undertowDeploymentInfoService.getControlPointInjectedValue());
  }
  final Set<String> seenExecutors=new HashSet<String>();
  if (metaData.getExecutorName() != null) {
    final InjectedValue<Executor> executor=new InjectedValue<Executor>();
    infoBuilder.addDependency(IOServices.WORKER.append(metaData.getExecutorName()),Executor.class,executor);
    undertowDeploymentInfoService.addInjectedExecutor(metaData.getExecutorName(),executor);
    seenExecutors.add(metaData.getExecutorName());
  }
  if (metaData.getServlets() != null) {
    for (    JBossServletMetaData servlet : metaData.getServlets()) {
      if (servlet.getExecutorName() != null && !seenExecutors.contains(servlet.getExecutorName())) {
        final InjectedValue<Executor> executor=new InjectedValue<Executor>();
        infoBuilder.addDependency(IOServices.WORKER.append(servlet.getExecutorName()),Executor.class,executor);
        undertowDeploymentInfoService.addInjectedExecutor(servlet.getExecutorName(),executor);
        seenExecutors.add(servlet.getExecutorName());
      }
    }
  }
  if (componentRegistryExists) {
    infoBuilder.addDependency(ComponentRegistry.serviceName(deploymentUnit),ComponentRegistry.class,undertowDeploymentInfoService.getComponentRegistryInjectedValue());
  }
 else {
    undertowDeploymentInfoService.getComponentRegistryInjectedValue().setValue(new ImmediateValue<>(componentRegistry));
  }
  if (sharedSessionManagerConfig != null) {
    infoBuilder.addDependency(deploymentUnit.getParent().getServiceName().append(SharedSessionManagerConfig.SHARED_SESSION_MANAGER_SERVICE_NAME),SessionManagerFactory.class,undertowDeploymentInfoService.getSessionManagerFactoryInjector());
    infoBuilder.addDependency(deploymentUnit.getParent().getServiceName().append(SharedSessionManagerConfig.SHARED_SESSION_IDENTIFIER_CODEC_SERVICE_NAME),SessionIdentifierCodec.class,undertowDeploymentInfoService.getSessionIdentifierCodecInjector());
  }
 else {
    ServiceName sessionManagerFactoryServiceName=installSessionManagerFactory(serviceTarget,deploymentServiceName,deploymentName,module,metaData);
    infoBuilder.addDependency(sessionManagerFactoryServiceName,SessionManagerFactory.class,undertowDeploymentInfoService.getSessionManagerFactoryInjector());
    ServiceName sessionIdentifierCodecServiceName=installSessionIdentifierCodec(serviceTarget,deploymentServiceName,deploymentName,metaData);
    infoBuilder.addDependency(sessionIdentifierCodecServiceName,SessionIdentifierCodec.class,undertowDeploymentInfoService.getSessionIdentifierCodecInjector());
  }
  infoBuilder.install();
  final boolean isWebappBundle=deploymentUnit.hasAttachment(Attachments.OSGI_MANIFEST);
  final UndertowDeploymentService service=new UndertowDeploymentService(injectionContainer,!isWebappBundle);
  final ServiceBuilder<UndertowDeploymentService> builder=serviceTarget.addService(deploymentServiceName,service).addDependencies(dependentComponents).addDependency(UndertowService.SERVLET_CONTAINER.append(defaultContainer),ServletContainerService.class,service.getContainer()).addDependency(hostServiceName,Host.class,service.getHost()).addDependencies(deploymentUnit.getAttachmentList(Attachments.WEB_DEPENDENCIES)).addDependency(deploymentInfoServiceName,DeploymentInfo.class,service.getDeploymentInfoInjectedValue());
  deploymentUnit.addToAttachmentList(Attachments.DEPLOYMENT_COMPLETE_SERVICES,deploymentServiceName);
  AbstractSecurityDeployer<WarMetaData> deployer=new WarJACCDeployer();
  JaccService<WarMetaData> jaccService=deployer.deploy(deploymentUnit,jaccContextId);
  if (jaccService != null) {
    final ServiceName jaccServiceName=deploymentUnit.getServiceName().append(JaccService.SERVICE_NAME);
    ServiceBuilder<?> jaccBuilder=serviceTarget.addService(jaccServiceName,jaccService);
    if (deploymentUnit.getParent() != null) {
      final DeploymentUnit parentDU=deploymentUnit.getParent();
      jaccBuilder.addDependency(parentDU.getServiceName().append(JaccService.SERVICE_NAME),PolicyConfiguration.class,jaccService.getParentPolicyInjector());
    }
    jaccBuilder.addDependency(deploymentServiceName);
    jaccBuilder.setInitialMode(Mode.PASSIVE).install();
  }
  if (isWebappBundle) {
    UndertowDeploymentService.ContextActivatorImpl activator=new UndertowDeploymentService.ContextActivatorImpl(builder.install());
    deploymentUnit.putAttachment(ContextActivator.ATTACHMENT_KEY,activator);
    deploymentUnit.addToAttachmentList(Attachments.BUNDLE_ACTIVE_DEPENDENCIES,deploymentServiceName);
  }
 else {
    builder.install();
  }
  final ModelNode node=deploymentUnit.getDeploymentSubsystemModel(UndertowExtension.SUBSYSTEM_NAME);
  node.get(DeploymentDefinition.CONTEXT_ROOT.getName()).set("".equals(pathName) ? "/" : pathName);
  node.get(DeploymentDefinition.VIRTUAL_HOST.getName()).set(hostName);
  node.get(DeploymentDefinition.SERVER.getName()).set(serverInstanceName);
  processManagement(deploymentUnit,metaData);
}
