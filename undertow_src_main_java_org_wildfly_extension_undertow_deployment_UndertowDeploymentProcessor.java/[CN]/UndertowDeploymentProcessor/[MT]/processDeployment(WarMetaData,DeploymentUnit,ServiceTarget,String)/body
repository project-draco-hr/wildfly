{
  final VirtualFile deploymentRoot=deploymentUnit.getAttachment(Attachments.DEPLOYMENT_ROOT).getRoot();
  final Module module=deploymentUnit.getAttachment(Attachments.MODULE);
  if (module == null) {
    throw new DeploymentUnitProcessingException(MESSAGES.failedToResolveModule(deploymentUnit));
  }
  final JBossWebMetaData metaData=warMetaData.getMergedJBossWebMetaData();
  final List<SetupAction> setupActions=deploymentUnit.getAttachmentList(org.jboss.as.ee.component.Attachments.WEB_SETUP_ACTIONS);
  metaData.resolveRunAs();
  ScisMetaData scisMetaData=deploymentUnit.getAttachment(ScisMetaData.ATTACHMENT_KEY);
  final Set<ServiceName> dependentComponents=new HashSet<>();
  final List<ServiceName> components=deploymentUnit.getAttachmentList(WebComponentDescription.WEB_COMPONENTS);
  final Set<ServiceName> failed=deploymentUnit.getAttachment(org.jboss.as.ee.component.Attachments.FAILED_COMPONENTS);
  for (  final ServiceName component : components) {
    if (!failed.contains(component)) {
      dependentComponents.add(component);
    }
  }
  boolean componentRegistryExists=true;
  ComponentRegistry componentRegistry=deploymentUnit.getAttachment(org.jboss.as.ee.component.Attachments.COMPONENT_REGISTRY);
  if (componentRegistry == null) {
    componentRegistryExists=false;
    componentRegistry=new ComponentRegistry(null);
  }
  final WebInjectionContainer injectionContainer=new WebInjectionContainer(module.getClassLoader(),componentRegistry);
  String securityContextId=deploymentUnit.getName();
  if (deploymentUnit.getParent() != null) {
    securityContextId=deploymentUnit.getParent().getName() + "!" + securityContextId;
  }
  final String pathName=pathNameOfDeployment(deploymentUnit,metaData);
  String metaDataSecurityDomain=metaData.getSecurityDomain();
  if (metaDataSecurityDomain == null) {
    metaDataSecurityDomain=getJBossAppSecurityDomain(deploymentUnit);
  }
  if (metaDataSecurityDomain != null) {
    metaDataSecurityDomain=metaDataSecurityDomain.trim();
  }
  String securityDomain=metaDataSecurityDomain == null ? SecurityConstants.DEFAULT_APPLICATION_POLICY : SecurityUtil.unprefixSecurityDomain(metaDataSecurityDomain);
  final ServiceName deploymentServiceName=UndertowService.deploymentServiceName(hostName,pathName);
  final Set<ServiceName> additionalDependencies=new HashSet<>();
  for (  final SetupAction setupAction : setupActions) {
    Set<ServiceName> dependencies=setupAction.dependencies();
    if (dependencies != null) {
      additionalDependencies.addAll(dependencies);
    }
  }
  TldsMetaData tldsMetaData=deploymentUnit.getAttachment(TldsMetaData.ATTACHMENT_KEY);
  UndertowDeploymentInfoService undertowDeploymentInfoService=UndertowDeploymentInfoService.builder().setAttributes(deploymentUnit.getAttachment(ServletContextAttribute.ATTACHMENT_KEY)).setContextPath(pathName).setDeploymentName(deploymentUnit.getName()).setDeploymentRoot(deploymentRoot).setMergedMetaData(warMetaData.getMergedJBossWebMetaData()).setModule(module).setScisMetaData(scisMetaData).setSecurityContextId(securityContextId).setSecurityDomain(securityDomain).setSharedTlds(tldsMetaData == null ? Collections.<TldMetaData>emptyList() : tldsMetaData.getSharedTlds(deploymentUnit)).setTldsMetaData(tldsMetaData).setSetupActions(setupActions).setOverlays(warMetaData.getOverlays()).setExpressionFactoryWrappers(deploymentUnit.getAttachmentList(ExpressionFactoryWrapper.ATTACHMENT_KEY)).setPredicatedHandlers(deploymentUnit.getAttachment(UndertowHandlersDeploymentProcessor.PREDICATED_HANDLERS)).createUndertowDeploymentInfoService();
  final ServiceName deploymentInfoServiceName=deploymentServiceName.append(UndertowDeploymentInfoService.SERVICE_NAME);
  ServiceBuilder<DeploymentInfo> infoBuilder=serviceTarget.addService(deploymentInfoServiceName,undertowDeploymentInfoService).addDependency(UndertowService.SERVLET_CONTAINER.append(defaultContainer),ServletContainerService.class,undertowDeploymentInfoService.getContainer()).addDependency(SecurityDomainService.SERVICE_NAME.append(securityDomain),SecurityDomainContext.class,undertowDeploymentInfoService.getSecurityDomainContextValue()).addDependency(UndertowService.UNDERTOW,UndertowService.class,undertowDeploymentInfoService.getUndertowService()).addDependencies(deploymentUnit.getAttachmentList(Attachments.WEB_DEPENDENCIES)).addDependency(PathManagerService.SERVICE_NAME,PathManager.class,undertowDeploymentInfoService.getPathManagerInjector()).addDependencies(additionalDependencies);
  if (componentRegistryExists) {
    infoBuilder.addDependency(ComponentRegistry.serviceName(deploymentUnit),ComponentRegistry.class,undertowDeploymentInfoService.getComponentRegistryInjectedValue());
  }
 else {
    undertowDeploymentInfoService.getComponentRegistryInjectedValue().setValue(new ImmediateValue<>(componentRegistry));
  }
  if (metaData.getDistributable() != null) {
    SessionManagerFactoryBuilderService factoryBuilderService=new SessionManagerFactoryBuilderService();
    SessionManagerFactoryBuilder factoryBuilder=factoryBuilderService.getValue();
    if (factoryBuilder != null) {
      ServiceName factoryName=deploymentServiceName.append("session");
      factoryBuilder.build(serviceTarget,factoryName,deploymentServiceName,module,metaData).setInitialMode(Mode.ON_DEMAND).install();
      infoBuilder.addDependency(factoryName,SessionManagerFactory.class,undertowDeploymentInfoService.getSessionManagerFactoryInjector());
    }
 else {
      UndertowLogger.ROOT_LOGGER.clusteringNotSupported();
    }
  }
  infoBuilder.install();
  final boolean isWebappBundle=deploymentUnit.hasAttachment(Attachments.OSGI_MANIFEST);
  final ServiceName hostServiceName=UndertowService.virtualHostName(defaultServer,hostName);
  final UndertowDeploymentService service=new UndertowDeploymentService(injectionContainer,!isWebappBundle);
  final ServiceBuilder<UndertowDeploymentService> builder=serviceTarget.addService(deploymentServiceName,service).addDependencies(dependentComponents).addDependency(UndertowService.SERVLET_CONTAINER.append(defaultContainer),ServletContainerService.class,service.getContainer()).addDependency(hostServiceName,Host.class,service.getHost()).addDependencies(deploymentUnit.getAttachmentList(Attachments.WEB_DEPENDENCIES)).addDependency(deploymentInfoServiceName,DeploymentInfo.class,service.getDeploymentInfoInjectedValue());
  deploymentUnit.addToAttachmentList(Attachments.DEPLOYMENT_COMPLETE_SERVICES,deploymentServiceName);
  if (isWebappBundle) {
    UndertowDeploymentService.ContextActivatorImpl activator=new UndertowDeploymentService.ContextActivatorImpl(builder.install());
    deploymentUnit.putAttachment(ContextActivator.ATTACHMENT_KEY,activator);
    deploymentUnit.addToAttachmentList(Attachments.BUNDLE_ACTIVE_DEPENDENCIES,deploymentServiceName);
  }
 else {
    builder.install();
  }
  final ModelNode node=deploymentUnit.getDeploymentSubsystemModel(UndertowExtension.SUBSYSTEM_NAME);
  node.get(DeploymentDefinition.CONTEXT_ROOT.getName()).set("".equals(pathName) ? "/" : pathName);
  node.get(DeploymentDefinition.VIRTUAL_HOST.getName()).set(hostName);
  processManagement(deploymentUnit,metaData);
}
