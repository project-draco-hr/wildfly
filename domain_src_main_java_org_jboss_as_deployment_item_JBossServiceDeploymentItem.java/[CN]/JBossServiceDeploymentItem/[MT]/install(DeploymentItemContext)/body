{
  final Module module=context.getModule();
  final ClassLoader classLoader=module.getClassLoader();
  final BatchBuilder batchBuilder=context.getBatchBuilder();
  final String codeName=serviceConfig.getCode();
  final LookupClassValue classValue=new LookupClassValue(codeName,Values.immediateValue(classLoader));
  final List<Value<?>> constructorArguments=new ArrayList<Value<?>>();
  final List<Value<Class<?>>> constructorSignature=new ArrayList<Value<Class<?>>>();
  final JBossServiceConstructorConfig constructorConfig=serviceConfig.getConstructorConfig();
  if (constructorConfig != null) {
    final JBossServiceConstructorConfig.Argument[] arguments=constructorConfig.getArguments();
    for (    JBossServiceConstructorConfig.Argument argument : arguments) {
      final Object value=null;
      constructorArguments.add(Values.immediateValue(value));
      constructorSignature.add(new LookupClassValue(argument.getType(),Values.immediateValue(classLoader)));
    }
  }
  final LookupConstructorValue constructorValue=new LookupConstructorValue(classValue,constructorSignature);
  final ConstructedValue constructedValue=new ConstructedValue(constructorValue,constructorArguments);
  final JBossService<?> jBossService=new JBossService<Object>(constructedValue);
  final String serviceName=serviceConfig.getName();
  final BatchServiceBuilder<?> serviceBuilder=batchBuilder.addService(ServiceName.of(serviceName),jBossService);
  final JBossServiceDependencyConfig[] dependencyConfigs=serviceConfig.getDependencyConfigs();
  for (  JBossServiceDependencyConfig dependencyConfig : dependencyConfigs) {
    final BatchInjectionBuilder injectionBuilder=serviceBuilder.addDependency(ServiceName.of(dependencyConfig.getDependencyName()));
    final String optionalAttributeName=dependencyConfig.getOptionalAttributeName();
    if (optionalAttributeName != null) {
      injectionBuilder.toProperty(optionalAttributeName);
    }
  }
}
