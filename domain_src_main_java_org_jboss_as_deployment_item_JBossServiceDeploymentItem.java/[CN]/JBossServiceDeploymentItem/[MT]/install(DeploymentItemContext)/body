{
  final Module module=context.getModule();
  final ClassLoader classLoader=module.getClassLoader();
  final Value<ClassLoader> classLoaderValue=Values.immediateValue(classLoader);
  final BatchBuilder batchBuilder=context.getBatchBuilder();
  final String codeName=serviceConfig.getCode();
  final LookupClassValue classValue=new LookupClassValue(codeName,classLoaderValue);
  final List<Value<?>> constructorArguments=new ArrayList<Value<?>>();
  final List<Value<Class<?>>> constructorSignature=new ArrayList<Value<Class<?>>>();
  final JBossServiceConstructorConfig constructorConfig=serviceConfig.getConstructorConfig();
  if (constructorConfig != null) {
    final JBossServiceConstructorConfig.Argument[] arguments=constructorConfig.getArguments();
    for (    JBossServiceConstructorConfig.Argument argument : arguments) {
      final Value<?> value=null;
      constructorArguments.add(value);
      constructorSignature.add(new LookupClassValue(argument.getType(),classLoaderValue));
    }
  }
  final LookupConstructorValue constructorValue=new LookupConstructorValue(classValue,constructorSignature);
  final ConstructedValue constructedValue=new ConstructedValue(constructorValue,constructorArguments);
  final JBossService<?> jBossService=new JBossService<Object>(constructedValue);
  final String serviceName=serviceConfig.getName();
  final BatchServiceBuilder<?> serviceBuilder=batchBuilder.addService(ServiceName.of(serviceName),jBossService);
  final JBossServiceDependencyConfig[] dependencyConfigs=serviceConfig.getDependencyConfigs();
  if (dependencyConfigs != null) {
    for (    JBossServiceDependencyConfig dependencyConfig : dependencyConfigs) {
      final BatchInjectionBuilder injectionBuilder=serviceBuilder.addDependency(ServiceName.of(dependencyConfig.getDependencyName()));
      final String optionalAttributeName=dependencyConfig.getOptionalAttributeName();
      if (optionalAttributeName != null) {
        injectionBuilder.toProperty(optionalAttributeName);
      }
    }
  }
  final JBossServiceAttributeConfig[] attributeConfigs=serviceConfig.getAttributeConfigs();
  if (attributeConfigs != null) {
    for (    JBossServiceAttributeConfig attributeConfig : attributeConfigs) {
      final String attributeName=attributeConfig.getName();
      final JBossServiceAttributeConfig.Inject inject=attributeConfig.getInject();
      final JBossServiceAttributeConfig.ValueFactory valueFactory=attributeConfig.getValueFactory();
      if (inject != null) {
        final BatchInjectionBuilder injectionBuilder=serviceBuilder.addDependency(ServiceName.of(inject.getBeanName())).toProperty(attributeName);
        final String propertyName=inject.getPropertyName();
        if (propertyName != null) {
          injectionBuilder.fromProperty(inject.getPropertyName());
        }
      }
 else       if (valueFactory != null) {
        final String methodName=valueFactory.getMethodName();
        final JBossServiceAttributeConfig.ValueFactoryParameter[] parameters=valueFactory.getParameters();
        final List<Value<Class<?>>> paramTypes=new ArrayList<Value<Class<?>>>(parameters.length);
        final List<Value<?>> paramValues=new ArrayList<Value<?>>(parameters.length);
        for (        JBossServiceAttributeConfig.ValueFactoryParameter parameter : parameters) {
          paramTypes.add(new LookupClassValue(parameter.getClassName(),classLoaderValue));
          final Value<?> value=null;
          paramValues.add(value);
        }
        final BatchInjectionBuilder injectionBuilder=serviceBuilder.addDependency(ServiceName.of(valueFactory.getBeanName())).toProperty(attributeName).fromMethod(methodName,paramTypes,paramValues);
      }
    }
  }
}
