{
  final Module module=context.getModule();
  final ClassLoader classLoader=module.getClassLoader();
  final Value<ClassLoader> classLoaderValue=Values.immediateValue(classLoader);
  final BatchBuilder batchBuilder=context.getBatchBuilder();
  final String codeName=serviceConfig.getCode();
  final LookupClassValue classValue=new LookupClassValue(codeName,classLoaderValue);
  final List<Value<?>> constructorArguments=new ArrayList<Value<?>>();
  final List<Value<Class<?>>> constructorSignature=new ArrayList<Value<Class<?>>>();
  final JBossServiceConstructorConfig constructorConfig=serviceConfig.getConstructorConfig();
  if (constructorConfig != null) {
    final JBossServiceConstructorConfig.Argument[] arguments=constructorConfig.getArguments();
    for (    JBossServiceConstructorConfig.Argument argument : arguments) {
      final Value<Class<?>> attributeTypeValue=new LookupClassValue(argument.getType(),classLoaderValue);
      final Value<?> value=new ArgumentValue(attributeTypeValue,argument.getValue());
      constructorArguments.add(value);
      constructorSignature.add(attributeTypeValue);
    }
  }
  final LookupConstructorValue constructorValue=new LookupConstructorValue(classValue,constructorSignature);
  final ConstructedValue constructedValue=new ConstructedValue(constructorValue,constructorArguments);
  final JBossService<?> jBossService=new JBossService<Object>(constructedValue);
  final String serviceName=serviceConfig.getName();
  final BatchServiceBuilder<?> serviceBuilder=batchBuilder.addService(convert(serviceName),jBossService);
  final JBossServiceDependencyConfig[] dependencyConfigs=serviceConfig.getDependencyConfigs();
  if (dependencyConfigs != null) {
    for (    JBossServiceDependencyConfig dependencyConfig : dependencyConfigs) {
      final BatchInjectionBuilder injectionBuilder=serviceBuilder.addDependency(convert(dependencyConfig.getDependencyName()));
      final String optionalAttributeName=dependencyConfig.getOptionalAttributeName();
      if (optionalAttributeName != null) {
        injectionBuilder.toInjector(new PropertyInjector(new LookupPropertyValue(classValue,optionalAttributeName),jBossService));
      }
    }
  }
  final JBossServiceAttributeConfig[] attributeConfigs=serviceConfig.getAttributeConfigs();
  if (attributeConfigs != null) {
    for (    JBossServiceAttributeConfig attributeConfig : attributeConfigs) {
      final String attributeName=attributeConfig.getName();
      final JBossServiceAttributeConfig.Inject inject=attributeConfig.getInject();
      final JBossServiceAttributeConfig.ValueFactory valueFactory=attributeConfig.getValueFactory();
      final Value<Property> propertyValue=new LookupPropertyValue(classValue,attributeName);
      final Injector<?> propInjector=new PropertyInjector(propertyValue,jBossService);
      if (inject != null) {
        final BatchInjectionBuilder injectionBuilder=serviceBuilder.addDependency(convert(inject.getBeanName()));
        final String propertyName=inject.getPropertyName();
        if (propertyName != null) {
          injectionBuilder.fromProperty(inject.getPropertyName());
        }
        injectionBuilder.toInjector(propInjector);
      }
 else       if (valueFactory != null) {
        final String methodName=valueFactory.getMethodName();
        final JBossServiceAttributeConfig.ValueFactoryParameter[] parameters=valueFactory.getParameters();
        final List<Value<Class<?>>> paramTypes=new ArrayList<Value<Class<?>>>(parameters.length);
        final List<Value<?>> paramValues=new ArrayList<Value<?>>(parameters.length);
        for (        JBossServiceAttributeConfig.ValueFactoryParameter parameter : parameters) {
          final Value<Class<?>> attributeTypeValue=new LookupClassValue(parameter.getType(),classLoaderValue);
          paramTypes.add(attributeTypeValue);
          final Value<?> value=new ArgumentValue(attributeTypeValue,parameter.getValue());
          paramValues.add(value);
        }
        serviceBuilder.addDependency(convert(valueFactory.getBeanName())).fromMethod(methodName,paramTypes,paramValues).toInjector(propInjector);
      }
 else {
        serviceBuilder.addInjectionValue(new AttributeValue(classValue,attributeName,attributeConfig.getValue())).toInjector(propInjector);
      }
    }
  }
}
