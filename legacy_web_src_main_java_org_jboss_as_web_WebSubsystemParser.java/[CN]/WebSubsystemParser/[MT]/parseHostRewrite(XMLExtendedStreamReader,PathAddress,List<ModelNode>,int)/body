{
  final ModelNode rewrite=Util.createAddOperation();
  final int count=reader.getAttributeCount();
  String name=RULE_PREFIX + rewriteCount;
  for (int i=0; i < count; i++) {
    requireNoNamespaceAttribute(reader,i);
    final String value=reader.getAttributeValue(i);
    final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case PATTERN:
      WebReWriteDefinition.PATTERN.parseAndSetParameter(value,rewrite,reader);
    break;
case SUBSTITUTION:
  WebReWriteDefinition.SUBSTITUTION.parseAndSetParameter(value,rewrite,reader);
break;
case FLAGS:
WebReWriteDefinition.FLAGS.parseAndSetParameter(value,rewrite,reader);
break;
case NAME:
name=value;
break;
default :
throw unexpectedAttribute(reader,i);
}
}
final PathAddress address=PathAddress.pathAddress(parent,PathElement.pathElement(REWRITE,name));
rewrite.get(OP_ADDR).set(address.toModelNode());
list.add(rewrite);
int conditionCount=0;
while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
switch (Namespace.forUri(reader.getNamespaceURI())) {
case WEB_1_0:
case WEB_1_1:
case WEB_1_2:
case WEB_1_3:
case WEB_1_4:
case WEB_1_5:
case WEB_2_0:
case WEB_2_1:
case WEB_2_2:
{
final Element element=Element.forName(reader.getLocalName());
switch (element) {
case CONDITION:
final ModelNode condition=Util.createAddOperation();
String condName=CONDITION_PREFIX + conditionCount;
final int count2=reader.getAttributeCount();
for (int i=0; i < count2; i++) {
requireNoNamespaceAttribute(reader,i);
final String value=reader.getAttributeValue(i);
final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case NAME:
condName=value;
break;
case TEST:
WebReWriteConditionDefinition.TEST.parseAndSetParameter(value,condition,reader);
break;
case PATTERN:
WebReWriteConditionDefinition.PATTERN.parseAndSetParameter(value,condition,reader);
break;
case FLAGS:
WebReWriteConditionDefinition.FLAGS.parseAndSetParameter(value,condition,reader);
break;
default :
throw unexpectedAttribute(reader,i);
}
}
PathAddress condAddress=address.append(PathElement.pathElement(CONDITION,condName));
condition.get(OP_ADDR).set(condAddress.toModelNode());
requireNoContent(reader);
list.add(condition);
conditionCount++;
break;
default :
throw unexpectedElement(reader);
}
break;
}
default :
throw unexpectedElement(reader);
}
}
}
