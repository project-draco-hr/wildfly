{
  String securityKey=null;
  ModelNode securityKeyNode=ModClusterDefinition.SECURITY_KEY.resolveModelAttribute(operationContext,model);
  if (securityKeyNode.isDefined()) {
    securityKey=securityKeyNode.asString();
  }
  ModClusterService service=new ModClusterService(model,ModClusterDefinition.HEALTH_CHECK_INTERVAL.resolveModelAttribute(operationContext,model).asInt(),ModClusterDefinition.MAX_REQUEST_TIME.resolveModelAttribute(operationContext,model).asInt(),ModClusterDefinition.BROKEN_NODE_TIMEOUT.resolveModelAttribute(operationContext,model).asInt(),ModClusterDefinition.ADVERTISE_FREQUENCY.resolveModelAttribute(operationContext,model).asInt(),ModClusterDefinition.ADVERTISE_PATH.resolveModelAttribute(operationContext,model).asString(),ModClusterDefinition.ADVERTISE_PROTOCOL.resolveModelAttribute(operationContext,model).asString(),securityKey);
  ServiceBuilder<FilterService> builder=serviceTarget.addService(UndertowService.FILTER.append(name),service);
  builder.addDependency(SocketBinding.JBOSS_BINDING_NAME.append(ModClusterDefinition.MANAGEMENT_SOCKET_BINDING.resolveModelAttribute(operationContext,model).asString()),SocketBinding.class,service.managementSocketBinding);
  builder.addDependency(SocketBinding.JBOSS_BINDING_NAME.append(ModClusterDefinition.ADVERTISE_SOCKET_BINDING.resolveModelAttribute(operationContext,model).asString()),SocketBinding.class,service.advertiseSocketBinding);
  builder.addDependency(IOServices.WORKER.append(ModClusterDefinition.WORKER.resolveModelAttribute(operationContext,model).asString()),XnioWorker.class,service.workerInjectedValue);
  if (serviceVerificationHandler != null) {
    builder.addListener(serviceVerificationHandler);
  }
  return builder.install();
}
