{
  this.consistentHashStrategy=ModelNodes.asEnum(CONSISTENT_HASH_STRATEGY.resolveModelAttribute(context,model),ConsistentHashStrategy.class);
  ClusteringConfigurationBuilder builder=new ConfigurationBuilder().clustering();
  this.hash=builder.hash().capacityFactor(CAPACITY_FACTOR.resolveModelAttribute(context,model).asInt()).numOwners(OWNERS.resolveModelAttribute(context,model).asInt()).numSegments(SEGMENTS.resolveModelAttribute(context,model).asInt()).create();
  long l1Lifespan=L1_LIFESPAN.resolveModelAttribute(context,model).asLong();
  this.l1=builder.l1().enabled(l1Lifespan > 0).lifespan(l1Lifespan).create();
  this.global=new InjectedValueDependency<>(InfinispanRequirement.CONFIGURATION.getServiceName(context,this.containerName),GlobalConfiguration.class);
  return super.configure(context,model);
}
