{
  ModelNode op=operation.require(VALUE.getName());
  PathAddress addr=PathAddress.pathAddress(op.get(OP_ADDR));
  if (slave) {
    op=op.clone();
    if (addr.size() > 0 && addr.getElement(0).getKey().equals(HOST)) {
      addr=addr.subAddress(1);
      op.get(OP_ADDR).set(addr.toModelNode());
    }
  }
  ProxyOperationAddressTranslator translator=null;
  ImmutableManagementResourceRegistration proxyReg=null;
  PathAddress proxyAddr=PathAddress.EMPTY_ADDRESS;
  for (  PathElement element : addr) {
    proxyAddr=proxyAddr.append(element);
    ImmutableManagementResourceRegistration reg=context.getResourceRegistration().getSubModel(proxyAddr);
    if (reg.isRemote()) {
      translator=element.getKey().equals(SERVER) ? ProxyOperationAddressTranslator.SERVER : ProxyOperationAddressTranslator.HOST;
      proxyReg=reg;
      break;
    }
  }
  if (proxyReg != null) {
    ModelNode proxyOp=operation.clone();
    proxyOp.get(OP_ADDR).set(proxyAddr.toModelNode());
    proxyOp.get(VALUE.getName(),OP_ADDR).set(translator.translateAddress(addr).toModelNode());
    final ModelNode result=new ModelNode();
    context.addStep(result,proxyOp,proxyReg.getOperationHandler(PathAddress.EMPTY_ADDRESS,VALIDATE_OPERATION),Stage.MODEL,true);
    context.completeStep(new OperationContext.RollbackHandler(){
      @Override public void handleRollback(      OperationContext context,      ModelNode operation){
        context.getFailureDescription().set(result.get(FAILURE_DESCRIPTION));
      }
    }
);
  }
 else {
    try {
      new OperationValidator(context.getResourceRegistration(),false,false).validateOperation(op);
    }
 catch (    IllegalArgumentException e) {
      context.getFailureDescription().set(e.getMessage());
    }
    context.completeStep(OperationContext.RollbackHandler.NOOP_ROLLBACK_HANDLER);
  }
}
