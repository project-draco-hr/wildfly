{
  getReference();
  delegate.allDone();
  logger.debug("ValueDefImpl.allDone(): baseValueTypeCode is " + ((baseValueTypeCode == null) ? "null" : "NOT null"));
  if (baseValueTypeCode != null)   logger.debug("ValueDefImpl.allDone(): " + "baseValueTypeCode.kind().value()=" + baseValueTypeCode.kind().value());
  if (baseValueTypeCode != null && baseValueTypeCode.kind() != TCKind.tk_null) {
    try {
      baseValue=baseValueTypeCode.id();
      logger.debug("ValueDefImpl.allDone(): baseValue=\"" + baseValue + "\".");
    }
 catch (    BadKind ex) {
      throw new IRConstructionException("Bad kind for super-valuetype of " + id());
    }
    Contained c=repository.lookup_id(baseValue);
    logger.debug("ValueDefImpl.allDone(): c is " + ((c == null) ? "null" : "NOT null"));
    base_value_ref=ValueDefHelper.narrow(c);
    logger.debug("ValueDefImpl.allDone(): base_value_ref is " + ((base_value_ref == null) ? "null" : "NOT null"));
  }
 else   baseValue="IDL:omg.org/CORBA/ValueBase:1.0";
  supported_interfaces_ref=new InterfaceDef[supported_interfaces.length];
  for (int i=0; i < supported_interfaces.length; ++i) {
    InterfaceDef iDef=InterfaceDefHelper.narrow(repository.lookup_id(supported_interfaces[i]));
    if (iDef == null)     throw new IRConstructionException("ValueDef \"" + id() + "\" unable to resolve "+ "reference to implemented interface \""+ supported_interfaces[i]+ "\".");
    supported_interfaces_ref[i]=iDef;
  }
  abstract_base_valuetypes_ref=new ValueDef[abstract_base_valuetypes.length];
  for (int i=0; i < abstract_base_valuetypes.length; ++i) {
    ValueDef vDef=ValueDefHelper.narrow(repository.lookup_id(abstract_base_valuetypes[i]));
    if (vDef == null)     throw new IRConstructionException("ValueDef \"" + id() + "\" unable to resolve "+ "reference to abstract base valuetype \""+ abstract_base_valuetypes[i]+ "\".");
    abstract_base_valuetypes_ref[i]=vDef;
  }
}
