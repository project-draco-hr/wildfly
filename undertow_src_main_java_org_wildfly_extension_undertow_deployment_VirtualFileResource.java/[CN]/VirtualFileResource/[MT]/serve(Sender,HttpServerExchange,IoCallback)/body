{
abstract class BaseFileTask implements Runnable {
    protected volatile FileChannel fileChannel;
    protected boolean openFile(){
      try {
        fileChannel=exchange.getConnection().getWorker().getXnio().openFile(file.getPhysicalFile(),FileAccess.READ_ONLY);
      }
 catch (      FileNotFoundException e) {
        exchange.setResponseCode(404);
        callback.onException(exchange,sender,e);
        return false;
      }
catch (      IOException e) {
        exchange.setResponseCode(500);
        callback.onException(exchange,sender,e);
        return false;
      }
      return true;
    }
  }
class ServerTask extends BaseFileTask implements IoCallback {
    private Pooled<ByteBuffer> pooled;
    @Override public void run(){
      if (fileChannel == null) {
        if (!openFile()) {
          return;
        }
        pooled=exchange.getConnection().getBufferPool().allocate();
      }
      if (pooled != null) {
        ByteBuffer buffer=pooled.getResource();
        try {
          buffer.clear();
          int res=fileChannel.read(buffer);
          if (res == -1) {
            pooled.free();
            IoUtils.safeClose(fileChannel);
            callback.onComplete(exchange,sender);
            return;
          }
          buffer.flip();
          sender.send(buffer,this);
        }
 catch (        IOException e) {
          onException(exchange,sender,e);
        }
      }
    }
    @Override public void onComplete(    final HttpServerExchange exchange,    final Sender sender){
      if (exchange.isInIoThread()) {
        exchange.dispatch(this);
      }
 else {
        run();
      }
    }
    @Override public void onException(    final HttpServerExchange exchange,    final Sender sender,    final IOException exception){
      UndertowLogger.REQUEST_IO_LOGGER.ioException(exception);
      if (pooled != null) {
        pooled.free();
        pooled=null;
      }
      IoUtils.safeClose(fileChannel);
      if (!exchange.isResponseStarted()) {
        exchange.setResponseCode(500);
      }
      callback.onException(exchange,sender,exception);
    }
  }
class TransferTask extends BaseFileTask {
    @Override public void run(){
      if (!openFile()) {
        return;
      }
      sender.transferFrom(fileChannel,new IoCallback(){
        @Override public void onComplete(        HttpServerExchange exchange,        Sender sender){
          try {
            IoUtils.safeClose(fileChannel);
          }
  finally {
            callback.onComplete(exchange,sender);
          }
        }
        @Override public void onException(        HttpServerExchange exchange,        Sender sender,        IOException exception){
          try {
            IoUtils.safeClose(fileChannel);
          }
  finally {
            callback.onException(exchange,sender,exception);
          }
        }
      }
);
    }
  }
  BaseFileTask task=new TransferTask();
  if (exchange.isInIoThread()) {
    exchange.dispatch(task);
  }
 else {
    task.run();
  }
}
