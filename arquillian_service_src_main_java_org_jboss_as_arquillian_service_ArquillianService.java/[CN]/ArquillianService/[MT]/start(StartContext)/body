{
  log.debugf("Starting Arquillian Test Runner");
  final MBeanServer mbeanServer=injectedMBeanServer.getValue();
  final TestClassLoader testClassLoader=new TestClassLoaderImpl();
  serviceContainer=context.getController().getServiceContainer();
  ServiceLoader<TestEnricher> loader=ServiceLoader.load(TestEnricher.class,testClassLoader.getServiceClassLoader());
  for (  TestEnricher enricher : loader.getProviders()) {
    if (enricher instanceof ServiceContainerInjector)     ((ServiceContainerInjector)enricher).inject(serviceContainer);
  }
  try {
    jmxTestRunner=new JMXTestRunner(){
      @Override public TestResult runTestMethod(      String className,      String methodName,      Map<String,String> props){
        NamespaceSelectorService namespaceSelectorService=null;
        try {
          ArquillianConfig config=getConfig(className);
          if (config != null) {
            ServiceName NamespaceContextSelectorServiceName=config.getDeploymentUnitContext().getServiceName().append(NamespaceSelectorService.NAME);
            ServiceController<?> serviceController=serviceContainer.getService(NamespaceContextSelectorServiceName);
            if (serviceController != null) {
              namespaceSelectorService=(NamespaceSelectorService)serviceController.getValue();
              namespaceSelectorService.activate();
            }
          }
          return super.runTestMethod(className,methodName,props);
        }
  finally {
          if (namespaceSelectorService != null) {
            namespaceSelectorService.deactivate();
          }
        }
      }
      @Override protected TestClassLoader getTestClassLoader(){
        return testClassLoader;
      }
    }
;
    jmxTestRunner.registerMBean(mbeanServer);
  }
 catch (  Throwable t) {
    throw new StartException("Failed to start Arquillian Test Runner",t);
  }
}
