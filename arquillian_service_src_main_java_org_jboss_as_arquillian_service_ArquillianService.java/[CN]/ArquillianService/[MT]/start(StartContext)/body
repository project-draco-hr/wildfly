{
  log.debugf("Starting Arquillian Test Runner");
  final MBeanServer mbeanServer=injectedMBeanServer.getValue();
  final TestClassLoader testClassLoader=new TestClassLoaderImpl();
  serviceContainer=context.getController().getServiceContainer();
  ServiceLoader<TestEnricher> loader=ServiceLoader.load(TestEnricher.class,testClassLoader.getServiceClassLoader());
  for (  TestEnricher enricher : loader.getProviders()) {
    if (enricher instanceof ServiceContainerInjector)     ((ServiceContainerInjector)enricher).inject(serviceContainer);
  }
  try {
    jmxTestRunner=new JMXTestRunner(){
      @Override public TestResult runTestMethod(      String className,      String methodName,      Map<String,String> props){
        final ContextManagerBuilder builder=new ContextManagerBuilder();
        ArquillianConfig config=getConfig(className);
        if (config != null) {
          final DeploymentUnit deployment=config.getDeploymentUnitContext();
          final Module module=deployment.getAttachment(Attachments.MODULE);
          builder.add(new TCCLSetup(module.getClassLoader()));
          builder.addAll(deployment);
        }
        Map<String,Object> properties=Collections.<String,Object>singletonMap(TEST_CLASS_PROPERTY,className);
        ContextManager contextManager=builder.build();
        contextManager.setup(properties);
        try {
          return super.runTestMethod(className,methodName,props);
        }
  finally {
          contextManager.teardown(properties);
        }
      }
      @Override protected TestClassLoader getTestClassLoader(){
        return testClassLoader;
      }
    }
;
    jmxTestRunner.registerMBean(mbeanServer);
  }
 catch (  Throwable t) {
    throw new StartException("Failed to start Arquillian Test Runner",t);
  }
}
