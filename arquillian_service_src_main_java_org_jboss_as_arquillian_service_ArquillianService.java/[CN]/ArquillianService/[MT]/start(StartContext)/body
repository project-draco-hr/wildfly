{
  log.debugf("Starting Arquillian Test Runner");
  final MBeanServer mbeanServer=injectedMBeanServer.getValue();
  final ServiceContainer serviceContainer=context.getController().getServiceContainer();
  final TestClassLoader testClassLoader=new TestClassLoaderImpl(serviceContainer);
  final ServiceTarget serviceTarget=context.getChildTarget();
  try {
    jmxTestRunner=new JMXTestRunner(testClassLoader){
      @Override public TestResult runTestMethodRemote(      String className,      String methodName){
        Map<String,Object> properties=Collections.<String,Object>singletonMap(TEST_CLASS_PROPERTY,className);
        ContextManager contextManager=initializeContextManager(className,properties);
        try {
          return super.runTestMethodRemote(className,methodName);
        }
  finally {
          contextManager.teardown(properties);
        }
      }
      @Override public InputStream runTestMethodEmbedded(      String className,      String methodName){
        Map<String,Object> properties=Collections.<String,Object>singletonMap(TEST_CLASS_PROPERTY,className);
        ContextManager contextManager=initializeContextManager(className,properties);
        try {
          return super.runTestMethodEmbedded(className,methodName);
        }
  finally {
          contextManager.teardown(properties);
        }
      }
      private ContextManager initializeContextManager(      String className,      Map<String,Object> properties){
        final ContextManagerBuilder builder=new ContextManagerBuilder();
        ArquillianConfig config=getConfig(className,5000);
        if (config != null) {
          final DeploymentUnit deployment=config.getDeploymentUnit();
          final Module module=deployment.getAttachment(Attachments.MODULE);
          if (module != null) {
            builder.add(new TCCLSetup(module.getClassLoader()));
          }
          builder.addAll(deployment);
        }
        ContextManager contextManager=builder.build();
        contextManager.setup(properties);
        return contextManager;
      }
    }
;
    jmxTestRunner.registerMBean(mbeanServer);
  }
 catch (  Throwable t) {
    throw new StartException("Failed to start Arquillian Test Runner",t);
  }
  serviceContainer.addListener(new AbstractServiceListener<Object>(){
    @Override public void serviceStarted(    ServiceController<? extends Object> controller){
      ServiceName serviceName=controller.getName();
      String simpleName=serviceName.getSimpleName();
      if (JBOSS_DEPLOYMENT.isParentOf(serviceName) && simpleName.equals(Phase.INSTALL.toString())) {
        ServiceName parentName=serviceName.getParent();
        ServiceController<?> parentController=serviceContainer.getService(parentName);
        DeploymentUnit deploymentUnit=(DeploymentUnit)parentController.getValue();
        ArquillianConfig arqConfig=new ArquillianRunWithProcessor(deploymentUnit).getArquillianConfig();
        if (arqConfig != null) {
          new ArquillianDeploymentProcessor(deploymentUnit).deploy(serviceTarget);
          new ArquillianDependencyProcessor(deploymentUnit).deploy();
          registerDeployment(parentName,arqConfig);
        }
      }
    }
    @Override public void serviceStopped(    ServiceController<? extends Object> controller){
      ServiceName serviceName=controller.getName();
      ArquillianConfig arqConfig=deployedTests.remove(serviceName);
      if (arqConfig != null) {
        DeploymentUnit deploymentUnit=arqConfig.getDeploymentUnit();
        new ArquillianDeploymentProcessor(deploymentUnit).undeploy();
      }
    }
  }
);
}
