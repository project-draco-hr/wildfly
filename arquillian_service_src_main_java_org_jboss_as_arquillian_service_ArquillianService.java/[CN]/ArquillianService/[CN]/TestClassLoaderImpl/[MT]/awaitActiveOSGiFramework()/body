{
  ServiceController<Framework> controller=(ServiceController<Framework>)serviceContainer.getRequiredService(FRAMEWORK_ACTIVE);
  Future<Framework> future=new FutureServiceValue<Framework>(controller);
  Framework framework;
  try {
    framework=future.get(10,TimeUnit.SECONDS);
    BundleContext context=framework.getBundleContext();
    ServiceReference sref=context.getServiceReference(StartLevel.class.getName());
    StartLevel startLevel=(StartLevel)context.getService(sref);
    if (startLevel.getStartLevel() < 5) {
      final CountDownLatch latch=new CountDownLatch(1);
      context.addFrameworkListener(new FrameworkListener(){
        public void frameworkEvent(        FrameworkEvent event){
          if (event.getType() == FrameworkEvent.STARTLEVEL_CHANGED) {
            latch.countDown();
          }
        }
      }
);
      startLevel.setStartLevel(5);
      if (latch.await(20,TimeUnit.SECONDS) == false)       throw new TimeoutException("Timeout waiting for STARTLEVEL_CHANGED event");
    }
  }
 catch (  RuntimeException rte) {
    throw rte;
  }
catch (  Exception ex) {
    throw new IllegalStateException("Error starting framework",ex);
  }
  return framework;
}
