{
  final Xnio xnio;
  try {
    xnio=Xnio.getInstance(null,Module.getModuleFromCallerModuleLoader(ModuleIdentifier.fromString("org.jboss.xnio.nio")).getClassLoader());
  }
 catch (  Exception e) {
    throw new IllegalStateException(e.getLocalizedMessage());
  }
  try {
    worker=xnio.createWorker(OptionMap.builder().set(Options.WORKER_WRITE_THREADS,4).set(Options.WORKER_READ_THREADS,4).set(Options.CONNECTION_HIGH_WATER,1000000).set(Options.CONNECTION_LOW_WATER,1000000).set(Options.WORKER_TASK_CORE_THREADS,10).set(Options.WORKER_TASK_MAX_THREADS,12).set(Options.TCP_NODELAY,true).set(Options.CORK,true).getMap());
    OptionMap serverOptions=OptionMap.builder().set(Options.WORKER_ACCEPT_THREADS,4).set(Options.TCP_NODELAY,true).set(Options.REUSE_ADDRESSES,true).getMap();
    ChannelListener<? super AcceptingChannel<ConnectedStreamChannel>> acceptListener=ChannelListeners.openListenerAdapter(openListener);
    if (httpAddress != null) {
      System.out.println("-----> Starting undertow server on " + httpAddress);
      normalServer=worker.createStreamServer(httpAddress,acceptListener,serverOptions);
      normalServer.resumeAccepts();
    }
    if (secureAddress != null) {
      System.out.println("-----> Starting undertow server on " + httpAddress);
      secureServer=worker.createStreamServer(secureAddress,acceptListener,serverOptions);
      secureServer.resumeAccepts();
    }
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}
