{
  final boolean rcPresent=context.getOriginalRootResource().hasChild(PathElement.pathElement(ModelDescriptionConstants.SUBSYSTEM,RequestControllerExtension.SUBSYSTEM_NAME));
  context.addStep(new AbstractDeploymentChainStep(){
    public void execute(    DeploymentProcessorTarget processorTarget){
      processorTarget.addDeploymentProcessor(BatchSubsystemDefinition.NAME,Phase.DEPENDENCIES,Phase.DEPENDENCIES_BATCH,new BatchDependencyProcessor());
      processorTarget.addDeploymentProcessor(BatchSubsystemDefinition.NAME,Phase.POST_MODULE,Phase.POST_MODULE_BATCH_ENVIRONMENT,new BatchEnvironmentProcessor(rcPresent));
      processorTarget.addDeploymentProcessor(BatchSubsystemDefinition.NAME,Phase.INSTALL,Phase.INSTALL_BATCH_RESOURCES,new BatchDeploymentResourceProcessor(NAME));
    }
  }
,OperationContext.Stage.RUNTIME);
  final ServiceTarget target=context.getServiceTarget();
  final JobExecutorService service=new JobExecutorService();
  target.addService(context.getCapabilityServiceName(Capabilities.DEFAULT_THREAD_POOL_CAPABILITY.getName(),JobExecutor.class),service).addDependency(BatchServiceNames.BATCH_THREAD_POOL_NAME,ManagedJBossThreadPoolExecutorService.class,service.getThreadPoolInjector()).install();
  final String repositoryType=JOB_REPOSITORY_TYPE.resolveModelAttribute(context,model).asString();
  JobRepositoryFactory.getInstance().setJobRepositoryType(repositoryType);
}
