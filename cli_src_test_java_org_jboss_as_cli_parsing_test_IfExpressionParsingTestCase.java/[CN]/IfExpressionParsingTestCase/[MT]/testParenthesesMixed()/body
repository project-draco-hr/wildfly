{
  parser.reset();
  Operation op=parser.parseExpression("((a==b || c<=d && e>f) && g!=h || i>=j) && (k<l && m>n || o==p)");
  assertOperation(op,AND,2);
  final List<Operand> topOperands=op.getOperands();
  Operand operand=topOperands.get(0);
  assertOperation(operand,OR,2);
  Operation or=(Operation)operand;
  operand=or.getOperands().get(0);
  assertOperation(operand,AND,2);
  Operation and=(Operation)operand;
  operand=and.getOperands().get(0);
  assertOperation(operand,OR,2);
  assertComparison(((Operation)operand).getOperands().get(0),EQ,"a","b");
  Operand cdAndEf=((Operation)operand).getOperands().get(1);
  assertOperation(cdAndEf,AND,2);
  assertComparison(((Operation)cdAndEf).getOperands().get(0),NGT,"c","d");
  assertComparison(((Operation)cdAndEf).getOperands().get(1),GT,"e","f");
  operand=and.getOperands().get(1);
  assertComparison(operand,NOT_EQ,"g","h");
  operand=or.getOperands().get(1);
  assertComparison(operand,NLT,"i","j");
  operand=topOperands.get(1);
  assertOperation(operand,OR,2);
  or=(Operation)operand;
  operand=or.getOperands().get(0);
  assertOperation(operand,AND,2);
  assertComparison(((Operation)operand).getOperands().get(0),LT,"k","l");
  assertComparison(((Operation)operand).getOperands().get(1),GT,"m","n");
  assertComparison(or.getOperands().get(1),EQ,"o","p");
}
