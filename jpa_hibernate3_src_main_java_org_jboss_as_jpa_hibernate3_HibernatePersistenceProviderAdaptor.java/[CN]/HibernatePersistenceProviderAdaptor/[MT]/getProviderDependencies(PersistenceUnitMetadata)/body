{
  Properties properties=pu.getProperties();
  if (Boolean.parseBoolean(properties.getProperty("hibernate.cache.use_second_level_cache"))) {
    if (properties.getProperty("hibernate.cache.region_prefix") == null) {
      properties.put("hibernate.cache.region_prefix",pu.getScopedPersistenceUnitName());
    }
    String regionFactory=properties.getProperty("hibernate.cache.region.factory_class");
    if (regionFactory == null) {
      regionFactory=DEFAULT_REGION_FACTORY;
      properties.setProperty("hibernate.cache.region.factory_class",regionFactory);
    }
    if (regionFactory.equals(DEFAULT_REGION_FACTORY)) {
      String container=properties.getProperty("hibernate.cache.infinispan.container");
      if (container == null) {
        container=DEFAULT_CACHE_CONTAINER;
        properties.setProperty("hibernate.cache.infinispan.container",container);
      }
      String entity=properties.getProperty("hibernate.cache.infinispan.entity.cfg",DEFAULT_ENTITY_CACHE);
      String collection=properties.getProperty("hibernate.cache.infinispan.collection.cfg",DEFAULT_COLLECTION_CACHE);
      String query=properties.getProperty("hibernate.cache.infinispan.query.cfg",DEFAULT_QUERY_CACHE);
      String timestamps=properties.getProperty("hibernate.cache.infinispan.timestamps.cfg",DEFAULT_TIMESTAMPS_CACHE);
      Set<ServiceName> result=new HashSet<ServiceName>();
      result.add(this.getCacheConfigServiceName(container,entity));
      result.add(this.getCacheConfigServiceName(container,collection));
      result.add(this.getCacheConfigServiceName(container,timestamps));
      result.add(this.getCacheConfigServiceName(container,query));
      return result;
    }
  }
  return null;
}
