{
  final int count=reader.getAttributeCount();
  String profileName=null;
  final ModelNode operation=Util.createAddOperation();
  for (int i=0; i < count; i++) {
    requireNoNamespaceAttribute(reader,i);
    final String value=reader.getAttributeValue(i);
    final EJB3SubsystemXMLAttribute attribute=EJB3SubsystemXMLAttribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case NAME:
      profileName=value;
    break;
case EXCLUDE_LOCAL_RECEIVER:
  RemotingProfileResourceDefinition.EXCLUDE_LOCAL_RECEIVER.parseAndSetParameter(value,operation,reader);
break;
case LOCAL_RECEIVER_PASS_BY_VALUE:
RemotingProfileResourceDefinition.LOCAL_RECEIVER_PASS_BY_VALUE.parseAndSetParameter(value,operation,reader);
break;
default :
throw unexpectedAttribute(reader,i);
}
}
final PathAddress address=SUBSYSTEM_PATH.append(EJB3SubsystemModel.REMOTING_PROFILE,profileName);
operation.get(OP_ADDR).set(address.toModelNode());
operations.add(operation);
while (reader.hasNext() && reader.nextTag() != XMLStreamConstants.END_ELEMENT) {
switch (EJB3SubsystemXMLElement.forName(reader.getLocalName())) {
case REMOTING_EJB_RECEIVER:
{
parseRemotingReceiver(reader,address,operations);
break;
}
default :
{
throw unexpectedElement(reader);
}
}
}
if (profileName == null) {
throw missingRequired(reader,Collections.singleton(EJB3SubsystemXMLAttribute.NAME.getLocalName()));
}
}
