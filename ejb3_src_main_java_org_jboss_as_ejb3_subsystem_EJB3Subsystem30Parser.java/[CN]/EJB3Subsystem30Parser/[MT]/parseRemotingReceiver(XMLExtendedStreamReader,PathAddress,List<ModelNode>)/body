{
  final ModelNode operation=Util.createAddOperation();
  String name=null;
  final Set<EJB3SubsystemXMLAttribute> required=EnumSet.of(EJB3SubsystemXMLAttribute.OUTBOUND_CONNECTION_REF);
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    final String value=reader.getAttributeValue(i);
    final EJB3SubsystemXMLAttribute attribute=EJB3SubsystemXMLAttribute.forName(reader.getAttributeLocalName(i));
    required.remove(attribute);
switch (attribute) {
case NAME:
      name=value;
    break;
case OUTBOUND_CONNECTION_REF:
  RemotingEjbReceiverDefinition.OUTBOUND_CONNECTION_REF.parseAndSetParameter(value,operation,reader);
break;
case CONNECT_TIMEOUT:
RemotingEjbReceiverDefinition.CONNECT_TIMEOUT.parseAndSetParameter(value,operation,reader);
break;
default :
unexpectedAttribute(reader,i);
}
}
if (!required.isEmpty()) {
throw missingRequired(reader,required);
}
final PathAddress receiverAddress=profileAddress.append(EJB3SubsystemModel.REMOTING_EJB_RECEIVER,name);
operation.get(OP_ADDR).set(receiverAddress.toModelNode());
operations.add(operation);
while (reader.hasNext() && reader.nextTag() != XMLStreamConstants.END_ELEMENT) {
switch (EJB3SubsystemXMLElement.forName(reader.getLocalName())) {
case CHANNEL_CREATION_OPTIONS:
parseChannelCreationOptions(reader,receiverAddress,operations);
break;
default :
unexpectedElement(reader);
}
}
}
