{
  ModelNode composite=new ModelNode();
  composite.get(OP).set(COMPOSITE);
  composite.get(OP_ADDR).setEmptyList();
  composite.get(STEPS).setEmptyList();
  ModelNode handler=Util.createAddOperation(createSyslogHandlerAddress(handlerName));
  if (syslogFormat != null) {
    handler.get(SYSLOG_FORMAT).set(syslogFormat.toString());
  }
  handler.get(ModelDescriptionConstants.FORMATTER).set(formatterName);
  composite.get(STEPS).add(handler);
  ModelNode protocol=Util.createAddOperation(createSyslogHandlerProtocolAddress(handlerName,SyslogAuditLogHandler.Transport.TLS));
  protocol.get(HOST).set(InetAddressUtil.canonize(addr.getHostName()));
  protocol.get(PORT).set(port);
  if (transfer != null) {
    protocol.get(MESSAGE_TRANSFER).set(transfer.name());
  }
  composite.get(STEPS).add(protocol);
  ModelNode truststore=Util.createAddOperation(createSyslogHandlerProtocolAddress("syslog-test",Transport.TLS).append(PathElement.pathElement(ModelDescriptionConstants.AUTHENTICATION,ModelDescriptionConstants.TRUSTSTORE)));
  truststore.get(SyslogAuditLogProtocolResourceDefinition.TlsKeyStore.KEYSTORE_PATH.getName()).set(truststorePath.getAbsolutePath());
  truststore.get(SyslogAuditLogProtocolResourceDefinition.TlsKeyStore.KEYSTORE_PASSWORD.getName()).set(trustPwd);
  composite.get(STEPS).add(truststore);
  if (clientCertPath != null) {
    ModelNode clientCert=Util.createAddOperation(createSyslogHandlerProtocolAddress("syslog-test",Transport.TLS).append(PathElement.pathElement(ModelDescriptionConstants.AUTHENTICATION,ModelDescriptionConstants.CLIENT_CERT_STORE)));
    clientCert.get(SyslogAuditLogProtocolResourceDefinition.TlsKeyStore.KEYSTORE_PATH.getName()).set(clientCertPath.getAbsolutePath());
    clientCert.get(SyslogAuditLogProtocolResourceDefinition.TlsKeyStore.KEYSTORE_PASSWORD.getName()).set(clientCertPwd);
    composite.get(STEPS).add(clientCert);
  }
  return composite;
}
