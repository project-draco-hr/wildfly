{
  if (endpointName == null && endpoint == null) {
    throw new IllegalArgumentException("Null endpoint name and null endpoing");
  }
  if (optionMap == null) {
    throw new IllegalArgumentException("Null option map");
  }
  if (uriScheme == null && endpoint == null) {
    throw new IllegalArgumentException("Null uriScheme name");
  }
  if (uriScheme != null && endpoint != null) {
    throw new IllegalArgumentException("Can't set uriScheme with specified endpoint");
  }
  if (uri == null) {
    throw new IllegalArgumentException("Null uri");
  }
  if (endpoint != null) {
    if (!uri.getScheme().equals("remote")) {
      throw new IllegalArgumentException("Only 'remote' is a valid url");
    }
  }
 else {
    if (!uriScheme.equals(uri.getScheme())) {
      throw new IllegalArgumentException("Scheme " + uriScheme + " does not match uri "+ uri);
    }
  }
  if (endpoint != null && executor != null) {
    throw new IllegalArgumentException("Don't need an executor when specified endpoint");
  }
  if (endpoint == null && executor == null) {
    throw new IllegalArgumentException("Need an executor when endpoint is not specified");
  }
  if (channelFactory == null) {
    throw new IllegalArgumentException("Null channel factory");
  }
  if (connectTimeout != -1 && connectTimeoutProperty != null) {
    throw new IllegalArgumentException("Can't use both a connect timeout and a connect timeout property");
  }
  if (connectTimeoutProperty != null) {
    connectTimeout=AccessController.doPrivileged(new PrivilegedAction<Long>(){
      @Override public Long run(){
        try {
          return Long.valueOf(System.getProperty(connectTimeoutProperty,"-1"));
        }
 catch (        NumberFormatException e) {
          return Long.valueOf("-1");
        }
      }
    }
);
  }
  if (connectTimeout < 0) {
    connectTimeout=DEFAULT_CONNECT_TIMEOUT;
  }
}
