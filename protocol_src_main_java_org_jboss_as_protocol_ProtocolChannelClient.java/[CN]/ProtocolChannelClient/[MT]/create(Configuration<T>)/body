{
  if (configuration == null) {
    throw new IllegalArgumentException("Null configuration");
  }
  configuration.validate();
  final Endpoint endpoint;
  if (configuration.getEndpoint() != null) {
    endpoint=configuration.getEndpoint();
    return new ProtocolChannelClient<T>(endpoint,configuration.getUri(),configuration.getChannelFactory());
  }
 else {
    endpoint=Remoting.createEndpoint(configuration.getEndpointName(),configuration.getExecutor(),configuration.getOptionMap());
    Xnio xnio;
    try {
      xnio=XnioUtil.getXnio();
    }
 catch (    ModuleLoadException e) {
      throw new RuntimeException(e);
    }
    final ReadChannelThread readChannelThread=xnio.createReadChannelThread(configuration.getReadChannelThreadFactory());
    final WriteChannelThread writeChannelThread=xnio.createWriteChannelThread(configuration.getWriteChannelThreadFactory());
    final ConnectionChannelThread connectionChannelThread=xnio.createReadChannelThread(configuration.getConnectionChannelThreadFactory());
    final ChannelThreadPool<ReadChannelThread> readPool=ChannelThreadPools.singleton(readChannelThread);
    final ChannelThreadPool<WriteChannelThread> writePool=ChannelThreadPools.singleton(writeChannelThread);
    final ChannelThreadPool<ConnectionChannelThread> connectionPool=ChannelThreadPools.singleton(connectionChannelThread);
    final Pool<ByteBuffer> bufferPool=Buffers.allocatedBufferPool(BufferAllocator.BYTE_BUFFER_ALLOCATOR,8192);
    endpoint.addConnectionProvider(configuration.getUri().getScheme(),new RemoteConnectionProviderFactory(xnio,bufferPool,readPool,writePool,connectionPool));
    return new ProtocolChannelClient<T>(endpoint,configuration.getUri(),readChannelThread,writeChannelThread,connectionChannelThread,configuration.getChannelFactory());
  }
}
