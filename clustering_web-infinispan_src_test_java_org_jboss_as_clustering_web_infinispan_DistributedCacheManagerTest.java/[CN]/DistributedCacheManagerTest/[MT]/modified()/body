{
  @SuppressWarnings("unchecked") CacheEntryModifiedEvent<String,Map<Object,Object>> event=mock(CacheEntryModifiedEvent.class);
  when(event.isPre()).thenReturn(true);
  this.manager.modified(event);
  verifyZeroInteractions(this.sessionManager);
  when(event.isPre()).thenReturn(false);
  when(event.isOriginLocal()).thenReturn(true);
  this.manager.modified(event);
  verifyZeroInteractions(this.sessionManager);
  when(event.isPre()).thenReturn(false);
  when(event.isOriginLocal()).thenReturn(false);
  when(event.getCache()).thenReturn(this.cache);
  when(this.cache.getAdvancedCache()).thenReturn(this.cache);
  when(this.cache.getClassLoader()).thenReturn(Thread.currentThread().getContextClassLoader());
  when(event.getKey()).thenReturn("abc");
  when(event.getValue()).thenReturn(Collections.emptyMap());
  this.manager.modified(event);
  verifyZeroInteractions(this.sessionManager);
  @SuppressWarnings("unchecked") Map<Object,Object> map=mock(Map.class);
  Integer version=Integer.valueOf(10);
  Long timestamp=Long.valueOf(System.currentTimeMillis());
  DistributableSessionMetadata metadata=new DistributableSessionMetadata();
  when(event.isPre()).thenReturn(false);
  when(event.isOriginLocal()).thenReturn(false);
  when(event.getCache()).thenReturn(this.cache);
  when(this.cache.getAdvancedCache()).thenReturn(this.cache);
  when(this.cache.getClassLoader()).thenReturn(Thread.currentThread().getContextClassLoader());
  when(event.getKey()).thenReturn("abc");
  when(event.getCache()).thenReturn(this.cache);
  when(this.cache.getAdvancedCache()).thenReturn(this.cache);
  when(this.cache.getClassLoader()).thenReturn(Thread.currentThread().getContextClassLoader());
  when(event.getValue()).thenReturn(map);
  when(map.isEmpty()).thenReturn(false);
  when(map.get(Byte.valueOf((byte)SessionMapEntry.VERSION.ordinal()))).thenReturn(version);
  when(map.get(Byte.valueOf((byte)SessionMapEntry.TIMESTAMP.ordinal()))).thenReturn(timestamp);
  when(map.get(Byte.valueOf((byte)SessionMapEntry.METADATA.ordinal()))).thenReturn(metadata);
  this.manager.modified(event);
  verify(this.sessionManager).sessionChangedInDistributedCache("abc",null,version.intValue(),timestamp.longValue(),metadata);
}
