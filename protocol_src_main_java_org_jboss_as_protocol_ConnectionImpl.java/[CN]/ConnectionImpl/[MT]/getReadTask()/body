{
  return new Runnable(){
    public void run(){
      try {
        Pipe pipe=null;
        final InputStream is=socket.getInputStream();
        OutputStream mos=null;
        final int bufferSize=8192;
        final byte[] buffer=new byte[bufferSize];
        for (; ; ) {
          int cmd=is.read();
switch (cmd) {
case -1:
{
              log.trace("Received end of stream");
              safeHandleShutdown();
              boolean done;
              if (mos != null) {
                mos.close();
                pipe.await();
              }
synchronized (lock) {
                readDone=true;
                done=writeDone;
              }
              if (done) {
                StreamUtils.safeClose(socket);
                safeHandleFinished();
              }
              return;
            }
case CHUNK_START:
{
            if (mos == null) {
              pipe=new Pipe(8192);
              final InputStream pis=pipe.getIn();
              mos=pipe.getOut();
              readExecutor.execute(new Runnable(){
                public void run(){
                  safeHandleMessage(new MessageInputStream(pis));
                }
              }
);
            }
            int cnt=StreamUtils.readInt(is);
            log.tracef("Received data chunk of size %d",Integer.valueOf(cnt));
            while (cnt > 0) {
              int sc=is.read(buffer,0,Math.min(cnt,bufferSize));
              if (sc == -1) {
                throw new EOFException("Unexpected end of stream");
              }
              mos.write(buffer,0,sc);
              cnt-=sc;
            }
            break;
          }
case CHUNK_END:
{
          log.trace("Received end data marker");
          if (mos != null) {
            mos.close();
            pipe.await();
            mos=null;
            pipe=null;
          }
          break;
        }
default :
{
        throw new IOException("Invalid command byte read: " + cmd);
      }
  }
}
}
 catch (IOException e) {
safeHandlerFailure(e);
}
}
}
;
}
