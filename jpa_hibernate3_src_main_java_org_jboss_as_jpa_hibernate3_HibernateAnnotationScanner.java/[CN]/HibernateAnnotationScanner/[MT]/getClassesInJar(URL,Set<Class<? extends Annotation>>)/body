{
  JPA_LOGGER.tracef("getClassesInJar url=%s annotations=%s",jartoScan.getPath(),annotationsToLookFor);
  PersistenceUnitMetadata pu=persistenceUnitMetadataTLS.get();
  if (pu == null) {
    throw MESSAGES.missingPersistenceUnitMetadata();
  }
  if (jartoScan == null) {
    throw MESSAGES.nullVar("jarToScan");
  }
  Index index=getJarFileIndex(jartoScan,pu);
  if (index == null) {
    JPA_LOGGER.tracef("No classes to scan for annotations in jar '%s' (jars with classes '%s')",jartoScan,pu.getAnnotationIndex().keySet());
    return new HashSet<Class<?>>();
  }
  if (annotationsToLookFor == null) {
    throw MESSAGES.nullVar("annotationsToLookFor");
  }
  if (annotationsToLookFor.size() == 0) {
    throw MESSAGES.emptyParameter("annotationsToLookFor");
  }
  Set<Class<?>> result=new HashSet<Class<?>>();
  for (  Class<? extends Annotation> annClass : annotationsToLookFor) {
    DotName annotation=DotName.createSimple(annClass.getName());
    List<AnnotationInstance> classesWithAnnotation=index.getAnnotations(annotation);
    for (    AnnotationInstance annotationInstance : classesWithAnnotation) {
      if (annotationInstance.target() instanceof ClassInfo) {
        String className=annotationInstance.target().toString();
        try {
          JPA_LOGGER.tracef("getClassesInJar found class %s with annotation %s",className,annClass.getName());
          result.add(pu.getClassLoader().loadClass(className));
        }
 catch (        ClassNotFoundException e) {
          throw MESSAGES.cannotLoadEntityClass(e,className);
        }
      }
    }
  }
  return result;
}
