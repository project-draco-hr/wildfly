{
  logger.info("APPLYING ONEOFF:)");
  ModelControllerClient client=getControllerClient();
  final String fileContent="Hello World!";
  String patchID=randomString();
  File oneOffPatchDir=mkdir(tempDir,patchID);
  String[] miscFileLocation=new String[]{"newPatchDirectory","awesomeFile"};
  ContentModification miscFileAdded=ContentModificationUtils.addMisc(oneOffPatchDir,patchID,fileContent,miscFileLocation);
  ProductConfig productConfig=new ProductConfig(PRODUCT,AS_VERSION,"main");
  Patch oneOffPatch=PatchBuilder.create().setPatchId(patchID).setDescription("A one-off patch adding a misc file.").oneOffPatchIdentity(productConfig.getProductName(),productConfig.getProductVersion()).getParent().addContentModification(miscFileAdded).build();
  createPatchXMLFile(oneOffPatchDir,oneOffPatch);
  File zippedPatch=createZippedPatchFile(oneOffPatchDir,patchID);
  controller.start(CONTAINER);
  Operation o=NativeApiUtilsForPatching.createPatchOperation(zippedPatch);
  logger.info(o.getOperation().toJSONString(false));
  ModelNode ret=client.execute(o);
  logger.info(ret.toJSONString(false));
  Assert.assertTrue(ret.get("outcome").asString().equalsIgnoreCase("success"));
  controller.stop(CONTAINER);
  controller.start(CONTAINER);
  String path=AS_DISTRIBUTION + FILE_SEPARATOR + Joiner.on(FILE_SEPARATOR).join(miscFileLocation);
  Assert.assertTrue("File " + path + " should exist",new File(path).exists());
  Assert.assertTrue("The patch " + patchID + " should be listed as installed",NativeApiUtilsForPatching.getInstalledPatches(client).contains(patchID));
  ModelNode itemForPatch=NativeApiUtilsForPatching.getHistoryItemForOneOffPatch(client,patchID);
  Assert.assertNotNull("The patch should appear in patching history",itemForPatch);
  Assert.assertEquals("Unexpected contents of misc file",fileContent,readFile(path));
  o=NativeApiUtilsForPatching.createRollbackOperation(patchID);
  logger.info(o.getOperation().toJSONString(false));
  ret=client.execute(o);
  logger.info(ret.toJSONString(false));
  Assert.assertEquals(ret.get("outcome").asString(),"success");
  controller.stop(CONTAINER);
  controller.start(CONTAINER);
  Assert.assertFalse("File + " + path + " should have been deleted",new File(path).exists());
  Assert.assertFalse("The patch " + patchID + " NOT should be listed as installed",NativeApiUtilsForPatching.getInstalledPatches(client).contains(patchID));
  IoUtils.recursiveDelete(tempDir);
  IoUtils.recursiveDelete(zippedPatch);
}
