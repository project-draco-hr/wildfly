{
  List<BindingConfiguration> bindings=new ArrayList<BindingConfiguration>();
  final EEResourceReferenceProcessorRegistry registry=deploymentUnit.getAttachment(Attachments.RESOURCE_REFERENCE_PROCESSOR_REGISTRY);
  final ResourceReferencesMetaData resourceRefs=environment.getEnvironment().getResourceReferences();
  if (resourceRefs == null) {
    return bindings;
  }
  for (  final ResourceReferenceMetaData resourceRef : resourceRefs) {
    final String name;
    if (resourceRef.getName().startsWith("java:")) {
      name=resourceRef.getName();
    }
 else {
      name=environment.getDefaultContext() + resourceRef.getName();
    }
    Class<?> classType=null;
    if (resourceRef.getType() != null) {
      try {
        classType=classLoader.loadClass(resourceRef.getType());
      }
 catch (      ClassNotFoundException e) {
        throw MESSAGES.cannotLoad(e,resourceRef.getType());
      }
    }
    LookupInjectionSource injectionSource=new LookupInjectionSource(name);
    classType=processInjectionTargets(resourceInjectionTarget,injectionSource,classLoader,deploymentReflectionIndex,resourceRef,classType);
    final BindingConfiguration bindingConfiguration;
    if (!isEmpty(resourceRef.getLookupName())) {
      bindingConfiguration=new BindingConfiguration(name,new LookupInjectionSource(resourceRef.getLookupName()));
    }
 else     if (!isEmpty(resourceRef.getResUrl())) {
      if (classType != null && classType.equals(URI.class)) {
        try {
          bindingConfiguration=new BindingConfiguration(name,new FixedInjectionSource(new ManagedReferenceFactory(){
            @Override public ManagedReference getReference(){
              try {
                return new ValueManagedReference(new ImmediateValue(new URI(resourceRef.getResUrl())));
              }
 catch (              URISyntaxException e) {
                throw new RuntimeException(e);
              }
            }
          }
,new URI(resourceRef.getResUrl())));
        }
 catch (        URISyntaxException e) {
          throw MESSAGES.cannotParseResourceRefUri(e,resourceRef.getResUrl());
        }
      }
 else {
        try {
          bindingConfiguration=new BindingConfiguration(name,new FixedInjectionSource(new ManagedReferenceFactory(){
            @Override public ManagedReference getReference(){
              try {
                return new ValueManagedReference(new ImmediateValue(new URL(resourceRef.getResUrl())));
              }
 catch (              MalformedURLException e) {
                throw new RuntimeException(e);
              }
            }
          }
,new URL(resourceRef.getResUrl())));
        }
 catch (        MalformedURLException e) {
          throw MESSAGES.cannotParseResourceRefUri(e,resourceRef.getResUrl());
        }
      }
    }
 else {
      if (classType == null) {
        throw MESSAGES.cannotDetermineType(name);
      }
      final String lookup=ResourceInjectionAnnotationParsingProcessor.FIXED_LOCATIONS.get(classType.getName());
      if (lookup != null) {
        bindingConfiguration=new BindingConfiguration(name,new LookupInjectionSource(lookup));
      }
 else {
        final EEResourceReferenceProcessor resourceReferenceProcessor=registry.getResourceReferenceProcessor(classType.getName());
        if (resourceReferenceProcessor != null) {
          InjectionSource valueSource=resourceReferenceProcessor.getResourceReferenceBindingSource();
          bindingConfiguration=new BindingConfiguration(name,valueSource);
        }
 else         if (!resourceRef.getResourceRefName().startsWith("java:")) {
          bindingConfiguration=new BindingConfiguration(name,new LookupInjectionSource("java:jboss/resources/" + resourceRef.getResourceRefName()));
        }
 else {
          ROOT_LOGGER.cannotResolve("resource-env-ref",name);
          continue;
        }
      }
    }
    bindings.add(bindingConfiguration);
  }
  return bindings;
}
