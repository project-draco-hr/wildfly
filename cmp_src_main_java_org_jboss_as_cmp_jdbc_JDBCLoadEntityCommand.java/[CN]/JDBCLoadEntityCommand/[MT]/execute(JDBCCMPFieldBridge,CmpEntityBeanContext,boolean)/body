{
  Object id=ctx.getPrimaryKey();
  entity.injectPrimaryKeyIntoInstance(ctx,id);
  ReadAheadCache readAheadCache=manager.getReadAheadCache();
  if (readAheadCache.load(ctx)) {
    if (requiredField == null || (requiredField != null && requiredField.isLoaded(ctx))) {
      return true;
    }
  }
  ReadAheadCache.EntityReadAheadInfo info=readAheadCache.getEntityReadAheadInfo(id);
  JDBCEntityBridge.FieldIterator loadIter=entity.getLoadIterator(requiredField,info.getReadAhead(),ctx);
  if (!loadIter.hasNext())   return true;
  List loadKeys=info.getLoadKeys();
  String sql=(rowLockingTemplate != null ? getRawLockingSQL(loadIter,loadKeys.size()) : getSQL(loadIter,loadKeys.size()));
  Connection con=null;
  PreparedStatement ps=null;
  ResultSet rs=null;
  try {
    if (log.isDebugEnabled()) {
      log.debug("Executing SQL: " + sql);
    }
    con=entity.getDataSource().getConnection();
    ps=con.prepareStatement(sql);
    if (entity.getFetchSize() > 0) {
      ps.setFetchSize(entity.getFetchSize());
    }
    int paramIndex=1;
    for (int i=0; i < loadKeys.size(); i++) {
      paramIndex=entity.setPrimaryKeyParameters(ps,paramIndex,loadKeys.get(i));
    }
    rs=ps.executeQuery();
    boolean mainEntityLoaded=false;
    Object[] ref=new Object[1];
    while (rs.next()) {
      int index=1;
      ref[0]=null;
      Object pk=null;
      if (loadKeys.size() > 1) {
        index=entity.loadPrimaryKeyResults(rs,index,ref);
        pk=ref[0];
      }
      if (loadKeys.size() == 1 || pk.equals(id)) {
        loadIter.reset();
        while (loadIter.hasNext()) {
          JDBCCMPFieldBridge field=loadIter.next();
          index=field.loadInstanceResults(rs,index,ctx);
          field.setClean(ctx);
        }
        mainEntityLoaded=true;
      }
 else {
        loadIter.reset();
        while (loadIter.hasNext()) {
          JDBCCMPFieldBridge field=loadIter.next();
          ref[0]=null;
          index=field.loadArgumentResults(rs,index,ref);
          readAheadCache.addPreloadData(pk,field,ref[0]);
        }
      }
    }
    loadIter.removeAll();
    if (!mainEntityLoaded) {
      if (failIfNotFound)       throw new NoSuchEntityException("Entity not found: primaryKey=" + ctx.getPrimaryKey());
 else       return false;
    }
 else     return true;
  }
 catch (  EJBException e) {
    throw e;
  }
catch (  Exception e) {
    throw new EJBException("Load failed",e);
  }
 finally {
    JDBCUtil.safeClose(rs);
    JDBCUtil.safeClose(ps);
    JDBCUtil.safeClose(con);
  }
}
