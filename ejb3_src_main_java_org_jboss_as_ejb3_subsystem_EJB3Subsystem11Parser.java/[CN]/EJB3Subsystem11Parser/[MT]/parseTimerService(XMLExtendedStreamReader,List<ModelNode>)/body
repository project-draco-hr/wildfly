{
  final ModelNode timerService=new ModelNode();
  final ModelNode defaultTimer=timerService.get(DEFAULT);
  requireNoAttributes(reader);
  Integer coreThreads=null;
  Integer maxThreads=null;
  String dataStorePath=null;
  String dataStorePathRelativeTo=null;
  while (reader.hasNext() && reader.nextTag() != XMLStreamConstants.END_ELEMENT) {
switch (EJB3SubsystemXMLElement.forName(reader.getLocalName())) {
case THREAD_POOL:
{
        final int count=reader.getAttributeCount();
        for (int i=0; i < count; i++) {
          requireNoNamespaceAttribute(reader,i);
          final String value=reader.getAttributeValue(i);
          final EJB3SubsystemXMLAttribute attribute=EJB3SubsystemXMLAttribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case CORE_THREADS:
            if (coreThreads != null) {
              throw unexpectedAttribute(reader,i);
            }
          coreThreads=Integer.valueOf(value);
        break;
case MAX_THREADS:
      if (maxThreads != null) {
        throw unexpectedAttribute(reader,i);
      }
    maxThreads=Integer.valueOf(value);
  break;
default :
throw unexpectedAttribute(reader,i);
}
}
if (coreThreads != null) {
defaultTimer.get(CORE_THREADS).set(coreThreads.intValue());
}
if (maxThreads != null) {
defaultTimer.get(MAX_THREADS).set(maxThreads.intValue());
}
requireNoContent(reader);
break;
}
case DATA_STORE:
{
final int count=reader.getAttributeCount();
for (int i=0; i < count; i++) {
requireNoNamespaceAttribute(reader,i);
final String value=reader.getAttributeValue(i);
final EJB3SubsystemXMLAttribute attribute=EJB3SubsystemXMLAttribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case PATH:
if (dataStorePath != null) {
throw unexpectedAttribute(reader,i);
}
dataStorePath=value;
break;
case RELATIVE_TO:
if (dataStorePathRelativeTo != null) {
throw unexpectedAttribute(reader,i);
}
dataStorePathRelativeTo=value;
break;
default :
throw unexpectedAttribute(reader,i);
}
}
if (dataStorePath == null) {
throw missingRequired(reader,Collections.singleton(EJB3SubsystemXMLAttribute.PATH));
}
defaultTimer.get(PATH).set(dataStorePath);
if (dataStorePathRelativeTo != null) {
defaultTimer.get(RELATIVE_TO).set(dataStorePathRelativeTo);
}
requireNoContent(reader);
break;
}
default :
{
throw unexpectedElement(reader);
}
}
}
return timerService;
}
