{
  ParseUtils.requireNoAttributes(reader);
  final ModelNode ejb3SubsystemAddOperation=new ModelNode();
  ejb3SubsystemAddOperation.get(OP).set(ADD);
  ejb3SubsystemAddOperation.get(OP_ADDR).add(SUBSYSTEM,EJB3Extension.SUBSYSTEM_NAME);
  operations.add(ejb3SubsystemAddOperation);
  final EnumSet<EJB3SubsystemXMLElement> encountered=EnumSet.noneOf(EJB3SubsystemXMLElement.class);
  while (reader.hasNext() && reader.nextTag() != XMLStreamConstants.END_ELEMENT) {
switch (EJB3SubsystemNamespace.forUri(reader.getNamespaceURI())) {
case EJB3_1_1:
{
        final EJB3SubsystemXMLElement element=EJB3SubsystemXMLElement.forName(reader.getLocalName());
        if (!encountered.add(element)) {
          throw unexpectedElement(reader);
        }
switch (element) {
case MDB:
{
            this.parseMDB(reader,operations);
            break;
          }
case POOLS:
{
          this.parsePools(reader,operations);
          break;
        }
case SESSION_BEAN:
{
        this.parseSessionBean(reader,operations);
        break;
      }
case TIMER_SERVICE:
{
      final ModelNode timerService=parseTimerService(reader,operations);
      ejb3SubsystemAddOperation.get(TIMER_SERVICE).set(timerService);
      break;
    }
default :
{
    throw unexpectedElement(reader);
  }
}
break;
}
default :
{
throw unexpectedElement(reader);
}
}
}
}
