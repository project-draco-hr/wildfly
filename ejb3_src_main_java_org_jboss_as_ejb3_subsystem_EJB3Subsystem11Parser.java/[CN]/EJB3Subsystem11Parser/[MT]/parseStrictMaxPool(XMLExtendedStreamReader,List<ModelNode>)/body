{
  final int count=reader.getAttributeCount();
  String poolName=null;
  Integer maxPoolSize=null;
  Long timeout=null;
  String unit=null;
  for (int i=0; i < count; i++) {
    requireNoNamespaceAttribute(reader,i);
    final String value=reader.getAttributeValue(i);
    final EJB3SubsystemXMLAttribute attribute=EJB3SubsystemXMLAttribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case NAME:
      poolName=value;
    break;
case MAX_POOL_SIZE:
  if (!isPositiveInt(value.trim())) {
    throw new XMLStreamException("Illegal value: " + value + " for "+ EJB3SubsystemXMLAttribute.MAX_POOL_SIZE.getLocalName(),reader.getLocation());
  }
maxPoolSize=new Integer(value.trim());
break;
case INSTANCE_AQUISITION_TIMEOUT:
if (!isPositiveInt(value.trim())) {
throw new XMLStreamException("Illegal value: " + value + " for "+ EJB3SubsystemXMLAttribute.INSTANCE_AQUISITION_TIMEOUT.getLocalName(),reader.getLocation());
}
timeout=new Long(value.trim());
break;
case INSTANCE_AQUISITION_TIMEOUT_UNIT:
if (!isValidTimeoutUnit(value.trim())) {
throw new XMLStreamException("Illegal value: " + value + " for "+ EJB3SubsystemXMLAttribute.INSTANCE_AQUISITION_TIMEOUT_UNIT.getLocalName(),reader.getLocation());
}
unit=value.trim().toUpperCase(Locale.ENGLISH);
break;
default :
throw unexpectedAttribute(reader,i);
}
}
requireNoContent(reader);
if (poolName == null) {
throw missingRequired(reader,Collections.singleton(EJB3SubsystemXMLAttribute.NAME.getLocalName()));
}
operations.add(this.createAddStrictMaxBeanInstancePoolOperation(poolName,maxPoolSize,timeout,unit));
}
