{
  final BindInfo aliasBindInfo=ContextNames.bindInfoFor(alias);
  final BinderService aliasBinderService=new BinderService(alias);
  aliasBinderService.getManagedObjectInjector().inject(new AliasManagedReferenceFactory(bindInfo.getAbsoluteJndiName()));
  serviceTarget.addService(aliasBindInfo.getBinderServiceName(),aliasBinderService).addDependency(bindInfo.getParentContextServiceName(),ServiceBasedNamingStore.class,aliasBinderService.getNamingStoreInjector()).addDependency(bindInfo.getBinderServiceName()).addListener(new AbstractServiceListener<ManagedReferenceFactory>(){
    @Override public void transition(    ServiceController<? extends ManagedReferenceFactory> controller,    ServiceController.Transition transition){
switch (transition) {
case STARTING_to_UP:
{
          ROOT_LOGGER.boundJndiName("ALIAS " + alias);
          break;
        }
case START_REQUESTED_to_DOWN:
{
        ROOT_LOGGER.unboundJndiName("ALIAS " + alias);
        break;
      }
case REMOVING_to_REMOVED:
{
      ROOT_LOGGER.debugf("Removed messaging object [%s]",alias);
      break;
    }
}
}
}
).install();
}
