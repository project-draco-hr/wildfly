{
  final CallbackConfig callbackConfig=new CallbackConfig();
  final Set<Attribute> required=EnumSet.of(Attribute.METHOD);
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    final Attribute attribute=Attribute.of(reader.getAttributeLocalName(i));
    required.remove(attribute);
    final String attributeValue=reader.getAttributeValue(i);
switch (attribute) {
case STATE:
      callbackConfig.setWhenRequired(BeanState.valueOf(attributeValue.toUpperCase()));
    break;
case TARGET_STATE:
  callbackConfig.setState(BeanState.valueOf(attributeValue.toUpperCase()));
break;
case METHOD:
callbackConfig.setMethodName(attributeValue);
break;
case SIGNATURE:
callbackConfig.setSignature(attributeValue);
break;
default :
throw unexpectedAttribute(reader,i);
}
}
if (required.isEmpty() == false) {
throw missingRequired(reader,required);
}
while (reader.hasNext()) {
switch (reader.next()) {
case END_ELEMENT:
return callbackConfig;
}
}
throw unexpectedElement(reader);
}
