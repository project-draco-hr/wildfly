{
  final PropertyConfig property=new PropertyConfig();
  final Set<Attribute> required=EnumSet.of(Attribute.NAME);
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    final Attribute attribute=Attribute.of(reader.getAttributeName(i));
    required.remove(attribute);
    final String attributeValue=reader.getAttributeValue(i);
switch (attribute) {
case NAME:
      property.setPropertyName(attributeValue);
    break;
case CLASS:
  property.setType(attributeValue);
break;
default :
throw unexpectedAttribute(reader,i);
}
}
if (required.isEmpty() == false) {
throw missingRequired(reader,required);
}
while (reader.hasNext()) {
switch (reader.next()) {
case END_ELEMENT:
return property;
case START_ELEMENT:
switch (Element.of(reader.getName())) {
case VALUE:
property.setValue(parseValue(reader));
break;
case INJECT:
property.setValue(parseInject(reader));
break;
case VALUE_FACTORY:
property.setValue(parseValueFactory(reader));
break;
case LIST:
property.setValue(parseList(reader));
break;
case SET:
property.setValue(parseSet(reader));
break;
case MAP:
property.setValue(parseMap(reader));
break;
default :
throw unexpectedElement(reader);
}
}
}
throw unexpectedElement(reader);
}
