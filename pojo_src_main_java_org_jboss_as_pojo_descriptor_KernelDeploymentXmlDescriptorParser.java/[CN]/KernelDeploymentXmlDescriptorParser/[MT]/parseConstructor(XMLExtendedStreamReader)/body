{
  final ConstructorConfig ctorConfig=new ConstructorConfig();
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    final Attribute attribute=Attribute.of(reader.getAttributeName(i));
    final String attributeValue=reader.getAttributeValue(i);
switch (attribute) {
case FACTORY_CLASS:
      ctorConfig.setFactoryClass(attributeValue);
    break;
case FACTORY_METHOD:
  ctorConfig.setFactoryMethod(attributeValue);
break;
default :
throw unexpectedAttribute(reader,i);
}
}
List<ValueConfig> parameters=new ArrayList<ValueConfig>();
while (reader.hasNext()) {
switch (reader.next()) {
case END_ELEMENT:
ctorConfig.setParameters(parameters.toArray(new ValueConfig[parameters.size()]));
return ctorConfig;
case START_ELEMENT:
switch (Element.of(reader.getName())) {
case FACTORY:
ctorConfig.setFactory(parseFactory(reader));
break;
case PARAMETER:
ValueConfig p=parseParameter(reader);
p.setIndex(parameters.size());
parameters.add(p);
break;
default :
throw unexpectedElement(reader);
}
}
}
throw unexpectedElement(reader);
}
