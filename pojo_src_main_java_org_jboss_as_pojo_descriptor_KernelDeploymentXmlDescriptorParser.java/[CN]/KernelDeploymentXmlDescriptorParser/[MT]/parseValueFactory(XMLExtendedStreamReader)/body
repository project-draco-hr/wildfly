{
  final ValueFactoryConfig valueFactoryConfig=new ValueFactoryConfig();
  final Set<Attribute> required=EnumSet.of(Attribute.BEAN,Attribute.METHOD);
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    final Attribute attribute=Attribute.of(reader.getAttributeLocalName(i));
    required.remove(attribute);
    final String attributeValue=reader.getAttributeValue(i);
switch (attribute) {
case BEAN:
      valueFactoryConfig.setBean(attributeValue);
    break;
case METHOD:
  valueFactoryConfig.setMethod(attributeValue);
break;
case STATE:
valueFactoryConfig.setState(BeanState.valueOf(attributeValue.toUpperCase()));
break;
default :
throw unexpectedAttribute(reader,i);
}
}
if (required.isEmpty() == false) {
throw missingRequired(reader,required);
}
List<ValueConfig> parameters=new ArrayList<ValueConfig>();
while (reader.hasNext()) {
switch (reader.next()) {
case END_ELEMENT:
valueFactoryConfig.setParameters(parameters.toArray(new ValueConfig[parameters.size()]));
return valueFactoryConfig;
case START_ELEMENT:
switch (Element.of(reader.getLocalName())) {
case PARAMETER:
ValueConfig p=parseParameter(reader);
p.setIndex(parameters.size());
parameters.add(p);
break;
default :
throw unexpectedElement(reader);
}
}
}
throw unexpectedElement(reader);
}
