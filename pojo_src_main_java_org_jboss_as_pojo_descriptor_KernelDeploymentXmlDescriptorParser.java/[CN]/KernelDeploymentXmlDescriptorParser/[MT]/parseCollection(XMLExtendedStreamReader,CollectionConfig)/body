{
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    final Attribute attribute=Attribute.of(reader.getAttributeName(i));
    final String attributeValue=reader.getAttributeValue(i);
switch (attribute) {
case CLASS:
      config.setType(attributeValue);
    break;
case ELEMENT:
  config.setElementType(attributeValue);
break;
default :
throw unexpectedAttribute(reader,i);
}
}
while (reader.hasNext()) {
switch (reader.next()) {
case END_ELEMENT:
return config;
case START_ELEMENT:
switch (Element.of(reader.getName())) {
case VALUE:
config.addValue(parseValue(reader));
break;
case INJECT:
config.addValue(parseInject(reader));
break;
case VALUE_FACTORY:
config.addValue(parseValueFactory(reader));
break;
case LIST:
config.addValue(parseList(reader));
break;
case SET:
config.addValue(parseSet(reader));
break;
case MAP:
config.addValue(parseMap(reader));
break;
default :
throw unexpectedElement(reader);
}
}
}
throw unexpectedElement(reader);
}
