{
  BeanMetaDataConfig beanConfig=new BeanMetaDataConfig();
  final int count=reader.getAttributeCount();
  final Set<Attribute> required=EnumSet.of(Attribute.NAME);
  for (int i=0; i < count; i++) {
    final Attribute attribute=Attribute.of(reader.getAttributeLocalName(i));
    required.remove(attribute);
    final String attributeValue=reader.getAttributeValue(i);
switch (attribute) {
case NAME:
      beanConfig.setName(attributeValue);
    break;
case CLASS:
  beanConfig.setBeanClass(attributeValue);
break;
case MODE:
beanConfig.setMode(ModeConfig.of(attributeValue));
break;
default :
throw unexpectedAttribute(reader,i);
}
}
if (required.isEmpty() == false) {
throw missingRequired(reader,required);
}
while (reader.hasNext()) {
switch (reader.nextTag()) {
case COMMENT:
break;
case END_ELEMENT:
return beanConfig;
case START_ELEMENT:
switch (Element.of(reader.getLocalName())) {
case ALIAS:
Set<String> aliases=beanConfig.getAliases();
if (aliases == null) {
aliases=new HashSet<String>();
beanConfig.setAliases(aliases);
}
aliases.add(parseAlias(reader));
break;
case CLASSLOADER:
beanConfig.setModule(parseModuleConfig(reader));
break;
case CONSTRUCTOR:
beanConfig.setConstructor(parseConstructor(reader));
break;
case PROPERTY:
Set<PropertyConfig> properties=beanConfig.getProperties();
if (properties == null) {
properties=new HashSet<PropertyConfig>();
beanConfig.setProperties(properties);
}
properties.add(parseProperty(reader));
break;
case INSTALL:
List<InstallConfig> installs=beanConfig.getInstalls();
if (installs == null) {
installs=new ArrayList<InstallConfig>();
beanConfig.setInstalls(installs);
}
installs.add(parseInstall(reader));
break;
case UNINSTALL:
List<InstallConfig> uninstalls=beanConfig.getUninstalls();
if (uninstalls == null) {
uninstalls=new ArrayList<InstallConfig>();
beanConfig.setUninstalls(uninstalls);
}
uninstalls.add(parseInstall(reader));
break;
case INCALLBACK:
List<CallbackConfig> incallbacks=beanConfig.getIncallbacks();
if (incallbacks == null) {
incallbacks=new ArrayList<CallbackConfig>();
beanConfig.setIncallbacks(incallbacks);
}
incallbacks.add(parseCallback(reader));
break;
case UNCALLBACK:
List<CallbackConfig> uncallbacks=beanConfig.getUncallbacks();
if (uncallbacks == null) {
uncallbacks=new ArrayList<CallbackConfig>();
beanConfig.setUncallbacks(uncallbacks);
}
uncallbacks.add(parseCallback(reader));
break;
case DEPENDS:
Set<DependsConfig> depends=beanConfig.getDepends();
if (depends == null) {
depends=new HashSet<DependsConfig>();
beanConfig.setDepends(depends);
}
depends.add(parseDepends(reader));
break;
case CREATE:
beanConfig.setCreate(parseLifecycle(reader,"create"));
break;
case START:
beanConfig.setStart(parseLifecycle(reader,"start"));
break;
case STOP:
beanConfig.setStop(parseLifecycle(reader,"stop"));
break;
case DESTROY:
beanConfig.setDestroy(parseLifecycle(reader,"destroy"));
break;
case UNKNOWN:
throw unexpectedElement(reader);
}
break;
}
}
throw unexpectedElement(reader);
}
