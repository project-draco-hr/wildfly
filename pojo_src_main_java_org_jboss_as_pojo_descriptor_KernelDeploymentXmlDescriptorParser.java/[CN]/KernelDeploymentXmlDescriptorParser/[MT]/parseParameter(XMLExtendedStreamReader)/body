{
  ValueConfig valueConfig=null;
  String type=null;
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    final Attribute attribute=Attribute.of(reader.getAttributeLocalName(i));
    final String attributeValue=reader.getAttributeValue(i);
switch (attribute) {
case CLASS:
      type=attributeValue;
    break;
default :
  throw unexpectedAttribute(reader,i);
}
}
while (reader.hasNext()) {
switch (reader.next()) {
case CHARACTERS:
final StringValueConfig svc=new StringValueConfig();
svc.setValue(reader.getText());
valueConfig=svc;
break;
case END_ELEMENT:
if (valueConfig == null) throw new XMLStreamException(PojoLogger.ROOT_LOGGER.missingValue(),reader.getLocation());
if (valueConfig.getType() == null) valueConfig.setType(type);
return valueConfig;
case START_ELEMENT:
switch (Element.of(reader.getLocalName())) {
case VALUE:
valueConfig=parseValue(reader);
break;
case INJECT:
valueConfig=parseInject(reader);
break;
case VALUE_FACTORY:
valueConfig=parseValueFactory(reader);
break;
case LIST:
valueConfig=parseList(reader);
break;
case SET:
valueConfig=parseSet(reader);
break;
case MAP:
valueConfig=parseMap(reader);
break;
default :
throw unexpectedElement(reader);
}
}
}
throw unexpectedElement(reader);
}
