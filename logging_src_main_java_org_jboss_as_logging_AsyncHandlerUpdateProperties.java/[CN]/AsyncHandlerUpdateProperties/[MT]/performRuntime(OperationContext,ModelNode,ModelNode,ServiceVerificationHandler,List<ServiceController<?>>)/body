{
  final PathAddress address=PathAddress.pathAddress(operation.require(OP_ADDR));
  final String name=address.getLastElement().getValue();
  final ServiceRegistry serviceRegistry=context.getServiceRegistry(true);
  final ServiceController<Handler> controller=(ServiceController<Handler>)serviceRegistry.getService(LogServices.handlerName(name));
  if (controller != null) {
    final Handler handler=controller.getValue();
    final ModelNode level=LEVEL.validateResolvedOperation(model);
    final ModelNode filter=FILTER.validateResolvedOperation(model);
    final ModelNode formatter=FORMATTER.validateResolvedOperation(model);
    final ModelNode queueLength=QUEUE_LENGTH.validateResolvedOperation(model);
    if (level.isDefined()) {
      handler.setLevel(java.util.logging.Level.parse(level.asString()));
    }
    if (filter.isDefined()) {
    }
    if (formatter.isDefined()) {
      AbstractFormatterSpec.fromModelNode(model).apply(handler);
    }
    final AsyncHandler asyncHandler=AsyncHandler.class.cast(handler);
    asyncHandler.setOverflowAction(AsyncHandler.OverflowAction.valueOf(OVERFLOW_ACTION.validateResolvedOperation(operation).asString()));
  }
}
