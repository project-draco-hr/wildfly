{
  this.entity=entity;
  JDBCCMPFieldBridge2[] fields=(JDBCCMPFieldBridge2[])entity.getTableFields();
  String selectColumns=fields[0].getColumnName();
  for (int i=1; i < fields.length; ++i) {
    selectColumns+=", " + fields[i].getColumnName();
  }
  JDBCCMPFieldBridge2[] pkFields=(JDBCCMPFieldBridge2[])entity.getPrimaryKeyFields();
  String whereColumns=pkFields[0].getColumnName() + "=?";
  for (int i=1; i < pkFields.length; ++i) {
    whereColumns+=" and " + pkFields[i].getColumnName() + "=?";
  }
  if (entity.getMetaData().hasRowLocking()) {
    JDBCEntityPersistenceStore manager=entity.getManager();
    JDBCTypeFactory typeFactory=manager.getJDBCTypeFactory();
    JDBCTypeMappingMetaData typeMapping=typeFactory.getTypeMapping();
    JDBCFunctionMappingMetaData rowLockingTemplate=typeMapping.getRowLockingTemplate();
    if (rowLockingTemplate == null) {
      throw new RuntimeException("Row locking template is not defined for mapping: " + typeMapping.getName());
    }
    sql=rowLockingTemplate.getFunctionSql(new Object[]{selectColumns,entity.getQualifiedTableName(),whereColumns,null},new StringBuffer()).toString();
  }
 else {
    sql="select ";
    sql+=selectColumns;
    sql+=" from " + entity.getQualifiedTableName() + " where ";
    sql+=whereColumns;
  }
  log=Logger.getLogger(getClass().getName() + "." + entity.getEntityName()+ "#findByPrimaryKey");
  log.debug("sql: " + sql);
  setParameters(QueryParameter.createPrimaryKeyParameters(0,entity));
  setEntityReader(entity,false);
}
