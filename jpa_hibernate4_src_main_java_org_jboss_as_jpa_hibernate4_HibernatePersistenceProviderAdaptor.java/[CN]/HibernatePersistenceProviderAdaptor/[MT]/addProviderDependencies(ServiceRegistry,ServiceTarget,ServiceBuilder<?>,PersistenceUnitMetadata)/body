{
  Properties properties=pu.getProperties();
  if (Boolean.parseBoolean(properties.getProperty(AvailableSettings.USE_SECOND_LEVEL_CACHE))) {
    if (properties.getProperty(AvailableSettings.CACHE_REGION_PREFIX) == null) {
      properties.put(AvailableSettings.CACHE_REGION_PREFIX,pu.getScopedPersistenceUnitName());
    }
    String regionFactory=properties.getProperty(AvailableSettings.CACHE_REGION_FACTORY);
    if (regionFactory == null) {
      regionFactory=DEFAULT_REGION_FACTORY;
      properties.setProperty(AvailableSettings.CACHE_REGION_FACTORY,regionFactory);
    }
    if (regionFactory.equals(DEFAULT_REGION_FACTORY)) {
      String container=properties.getProperty(InfinispanRegionFactory.CACHE_CONTAINER);
      if (container == null) {
        container=InfinispanRegionFactory.DEFAULT_CACHE_CONTAINER;
        properties.setProperty(InfinispanRegionFactory.CACHE_CONTAINER,container);
      }
      ServiceName classLoaderServiceName=EmbeddedCacheManagerConfigurationService.getClassLoaderServiceName(container);
synchronized (this) {
        if (registry.getService(classLoaderServiceName) == null) {
          target.addService(classLoaderServiceName,new ValueService<ClassLoader>(new ImmediateValue<ClassLoader>(SharedInfinispanRegionFactory.class.getClassLoader()))).setInitialMode(ServiceController.Mode.ON_DEMAND).install();
        }
      }
      String entity=properties.getProperty(InfinispanRegionFactory.ENTITY_CACHE_RESOURCE_PROP,InfinispanRegionFactory.DEF_ENTITY_RESOURCE);
      String collection=properties.getProperty(InfinispanRegionFactory.COLLECTION_CACHE_RESOURCE_PROP,InfinispanRegionFactory.DEF_ENTITY_RESOURCE);
      String query=properties.getProperty(InfinispanRegionFactory.QUERY_CACHE_RESOURCE_PROP,InfinispanRegionFactory.DEF_QUERY_RESOURCE);
      String timestamps=properties.getProperty(InfinispanRegionFactory.TIMESTAMPS_CACHE_RESOURCE_PROP,InfinispanRegionFactory.DEF_QUERY_RESOURCE);
      builder.addDependency(CacheConfigurationService.getServiceName(container,entity));
      builder.addDependency(CacheConfigurationService.getServiceName(container,collection));
      builder.addDependency(CacheConfigurationService.getServiceName(container,timestamps));
      builder.addDependency(CacheConfigurationService.getServiceName(container,query));
    }
  }
}
