{
  String patchID=null;
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    final String value=reader.getAttributeValue(i);
    final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case PATCH_ID:
      patchID=value;
    break;
default :
  throw unexpectedAttribute(reader,i);
}
}
if (patchID == null) {
throw missingRequired(reader,EnumSet.of(Attribute.PATCH_ID));
}
PatchElementConfigBuilder builder=null;
while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
final Element element=Element.forName(reader.getLocalName());
switch (element) {
case UPGRADE:
builder=createBuilder(reader,patchConfigBuilder,patchID,Patch.PatchType.CUMULATIVE);
break;
case ONE_OFF:
builder=createBuilder(reader,patchConfigBuilder,patchID,Patch.PatchType.ONE_OFF);
break;
case DESCRIPTION:
if (builder == null) {
throw missingRequired(reader,"cumulative","one-off");
}
builder.setDescription(reader.getElementText());
break;
case SPECIFIED_CONTENT:
if (builder == null) {
throw missingRequired(reader,"cumulative","one-off");
}
parseSpecifiedContent(reader,builder);
break;
default :
throw unexpectedElement(reader);
}
}
}
