{
  builder.setPatchType(type);
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    final String value=reader.getAttributeValue(i);
    final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case RESULTING_VERSION:
      if (type == Patch.PatchType.CUMULATIVE) {
        builder.setResultingVersion(value);
        updatedStructure=DistributionStructure.Factory.create(value);
        break;
      }
 else {
        throw PatchMessages.MESSAGES.resultingVersionForCumulativePatchOnly();
      }
default :
    throw unexpectedAttribute(reader,i);
}
}
while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
final Element element=Element.forName(reader.getLocalName());
switch (element) {
case APPLIES_TO_VERSION:
  String value=reader.getElementText();
builder.addAppliesTo(value);
if (appliesToStructure == null) {
appliesToStructure=DistributionStructure.Factory.create(value);
if (type == Patch.PatchType.ONE_OFF) {
  updatedStructure=appliesToStructure;
}
}
break;
default :
throw unexpectedElement(reader);
}
}
}
