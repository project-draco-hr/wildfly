{
  while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
    final Element element=Element.forName(reader.getLocalName());
switch (element) {
case NAME:
      patchConfigBuilder.setPatchId(reader.getElementText());
    break;
case DESCRIPTION:
  patchConfigBuilder.setDescription(reader.getElementText());
break;
case DISTRIBUTION_STRUCTURE:
parseDistributionStructure(reader,patchConfigBuilder);
break;
case CUMULATIVE:
parseCumulativePatchType(reader,patchConfigBuilder);
break;
case ONE_OFF:
parseOneOffPatchType(reader,patchConfigBuilder);
break;
case GENERATE_BY_DIFF:
parseGenerateByDiff(reader,patchConfigBuilder);
break;
case SPECIFIED_CONTENT:
parseSpecifiedContent(reader,patchConfigBuilder);
break;
case MODULES:
parseModules(reader,patchConfigBuilder);
break;
case BUNDLES:
parseBundles(reader,patchConfigBuilder);
break;
case MISC_FILES:
parseMiscFiles(reader,patchConfigBuilder);
break;
default :
throw unexpectedElement(reader);
}
}
}
