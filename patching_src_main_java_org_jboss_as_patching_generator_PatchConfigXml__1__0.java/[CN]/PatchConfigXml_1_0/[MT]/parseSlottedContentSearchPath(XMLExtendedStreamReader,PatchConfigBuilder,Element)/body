{
  String name=null;
  String path=null;
  PatchConfigBuilder.AffectsType affectsType=PatchConfigBuilder.AffectsType.BOTH;
  Set<Attribute> required=EnumSet.of(Attribute.NAME,Attribute.PATH);
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    final String value=reader.getAttributeValue(i);
    final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
    required.remove(attribute);
switch (attribute) {
case NAME:
      name=value;
    break;
case PATH:
  path=value;
break;
case AFFECTS_TYPE:
try {
affectsType=Enum.valueOf(PatchConfigBuilder.AffectsType.class,value.toUpperCase());
}
 catch (RuntimeException e) {
throw PatchMessages.MESSAGES.illegalAffectsType(value,reader.getLocation());
}
break;
default :
throw unexpectedAttribute(reader,i);
}
}
requireNoContent(reader);
if (!required.isEmpty()) {
throw missingRequired(reader,required);
}
if (type == Element.MODULE_SEARCH_PATH) {
patchConfigBuilder.addModuleSearchPath(name,path,affectsType);
}
 else {
patchConfigBuilder.addBundleSearchPath(name,path,affectsType);
}
}
