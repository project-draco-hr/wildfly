{
  context.getSubModel().setEmptyObject();
  if (context instanceof BootOperationContext) {
    final BootOperationContext updateContext=(BootOperationContext)context;
    context.getRuntimeContext().setRuntimeTask(new RuntimeTask(){
      public void execute(      RuntimeTaskContext context) throws OperationFailedException {
        updateContext.addDeploymentProcessor(Phase.DEPENDENCIES,Phase.DEPENDENCIES_NAMING,new NamingDependencyProcessor());
        log.info("Activating Naming Subsystem");
        NamingContext.initializeNamingManager();
        final NamingStore namingStore=new InMemoryNamingStore(new NamingEventCoordinator());
        final ServiceTarget target=context.getServiceTarget();
        target.addService(NamingService.SERVICE_NAME,new NamingService(namingStore)).addAliases(ContextNames.JAVA_CONTEXT_SERVICE_NAME).setInitialMode(ServiceController.Mode.ACTIVE).install();
        addGlobalContextFactory(target,"global");
        addGlobalContextFactory(target,"jboss");
        addContextFactory(target,"app");
        addContextFactory(target,"module");
        addContextFactory(target,"comp");
        InitialContextFactoryService.addService(target);
        final JndiView jndiView=new JndiView();
        target.addService(ServiceName.JBOSS.append("naming","jndi","view"),jndiView).addDependency(ServiceBuilder.DependencyType.OPTIONAL,ServiceName.JBOSS.append("mbean","server"),MBeanServer.class,jndiView.getMBeanServerInjector()).install();
        resultHandler.handleResultComplete();
      }
    }
);
  }
 else {
    resultHandler.handleResultComplete();
  }
  final ModelNode compensatingOperation=Util.getResourceRemoveOperation(operation.require(OP_ADDR));
  return new BasicOperationResult(compensatingOperation);
}
