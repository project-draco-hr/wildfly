{
  final ModelNode compensatingOperation=Util.getResourceRemoveOperation(operation.require(OP_ADDR));
  if (context instanceof BootOperationContext) {
    final BootOperationContext updateContext=(BootOperationContext)context;
    updateContext.addDeploymentProcessor(Phase.DEPENDENCIES,Phase.DEPENDENCIES_NAMING,new NamingDependencyProcessor());
    log.info("Activating Naming Subsystem");
    ObjectFactoryBuilder.INSTANCE.setServiceRegistry(updateContext.getServiceRegistry());
    NamingContext.initializeNamingManager();
    final ServiceTarget target=updateContext.getServiceTarget();
    target.addService(NamingService.SERVICE_NAME,new NamingService(true)).install();
    final JavaContextService javaContextService=new JavaContextService();
    target.addService(JavaContextService.SERVICE_NAME,javaContextService).addDependency(NamingService.SERVICE_NAME).install();
    final ContextService globalContextService=new ContextService("global");
    target.addService(JavaContextService.SERVICE_NAME.append("global"),globalContextService).addDependency(JavaContextService.SERVICE_NAME,Context.class,globalContextService.getParentContextInjector()).install();
    addContextFactory(target,"app");
    addContextFactory(target,"module");
    addContextFactory(target,"comp");
    InitialContextFactoryService.addService(target);
    final JndiView jndiView=new JndiView();
    target.addService(ServiceName.JBOSS.append("naming","jndi","view"),jndiView).addDependency(ServiceBuilder.DependencyType.OPTIONAL,ServiceName.JBOSS.append("mbean","server"),MBeanServer.class,jndiView.getMBeanServerInjector()).install();
  }
  context.getSubModel().setEmptyObject();
  resultHandler.handleResultComplete(compensatingOperation);
  return Cancellable.NULL;
}
