{
  Integer pmPort=null;
  InetAddress pmAddress=null;
  Integer smPort=Integer.valueOf(0);
  InetAddress smAddress=null;
  try {
    smAddress=InetAddress.getLocalHost();
  }
 catch (  UnknownHostException e) {
    throw new RuntimeException(e);
  }
  String procName="Host Controller";
  String defaultJVM=null;
  boolean isRestart=false;
  final int argsLength=args.length;
  for (int i=0; i < argsLength; i++) {
    final String arg=args[i];
    try {
      if (CommandLineConstants.VERSION.equals(arg)) {
        System.out.println("JBoss Application Server " + getVersionString());
        return null;
      }
 else       if (CommandLineConstants.HELP.equals(arg)) {
        usage();
        return null;
      }
 else       if (CommandLineConstants.PROPERTIES.equals(arg) || "-P".equals(arg)) {
        URL url=null;
        try {
          url=makeURL(args[++i]);
          Properties props=System.getProperties();
          props.load(url.openConnection().getInputStream());
        }
 catch (        MalformedURLException e) {
          System.err.printf("Malformed URL provided for option %s\n",arg);
          usage();
          return null;
        }
catch (        IOException e) {
          System.err.printf("Unable to load properties from URL %s\n",url);
          usage();
          return null;
        }
      }
 else       if (CommandLineConstants.INTERPROCESS_PC_PORT.equals(arg)) {
        try {
          pmPort=Integer.valueOf(args[++i]);
        }
 catch (        NumberFormatException e) {
          System.err.printf("Value for %s is not an Integer -- %s\n",CommandLineConstants.INTERPROCESS_PC_PORT,args[i]);
          usage();
          return null;
        }
      }
 else       if (CommandLineConstants.INTERPROCESS_PC_ADDRESS.equals(arg)) {
        try {
          pmAddress=InetAddress.getByName(args[++i]);
        }
 catch (        UnknownHostException e) {
          System.err.printf("Value for %s is not a known host -- %s\n",CommandLineConstants.INTERPROCESS_PC_ADDRESS,args[i]);
          usage();
          return null;
        }
      }
 else       if (CommandLineConstants.INTERPROCESS_HC_PORT.equals(arg)) {
        try {
          smPort=Integer.valueOf(args[++i]);
        }
 catch (        NumberFormatException e) {
          System.err.printf("Value for %s is not an Integer -- %s\n",CommandLineConstants.INTERPROCESS_HC_PORT,args[i]);
          usage();
          return null;
        }
      }
 else       if (CommandLineConstants.INTERPROCESS_HC_ADDRESS.equals(arg)) {
        try {
          smAddress=InetAddress.getByName(args[++i]);
        }
 catch (        UnknownHostException e) {
          System.err.printf("Value for %s is not a known host -- %s\n",CommandLineConstants.INTERPROCESS_HC_ADDRESS,args[i]);
          usage();
          return null;
        }
      }
 else       if (CommandLineConstants.INTERPROCESS_NAME.equals(arg)) {
        procName=args[++i];
      }
 else       if (CommandLineConstants.RESTART_HOST_CONTROLLER.equals(arg)) {
        isRestart=true;
      }
 else       if (CommandLineConstants.DEFAULT_JVM.equals(arg)) {
        defaultJVM=args[++i];
      }
 else       if (arg.startsWith("-D")) {
        String name, value;
        int idx=arg.indexOf("=");
        if (idx == -1) {
          name=arg.substring(2);
          value="true";
        }
 else {
          name=arg.substring(2,idx);
          value=arg.substring(idx + 1,arg.length());
        }
        System.setProperty(name,value);
      }
 else {
        System.err.printf("Invalid option '%s'\n",arg);
        usage();
        return null;
      }
    }
 catch (    IndexOutOfBoundsException e) {
      System.err.printf("Argument expected for option %s\n",arg);
      usage();
      return null;
    }
  }
  return new HostControllerEnvironment(systemProperties,isRestart,stdin,stdout,stderr,procName,pmAddress,pmPort,smAddress,smPort,defaultJVM);
}
