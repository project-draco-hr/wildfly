{
  Integer pmPort=null;
  InetAddress pmAddress=null;
  Integer smPort=Integer.valueOf(0);
  InetAddress smAddress=null;
  try {
    smAddress=InetAddress.getLocalHost();
  }
 catch (  UnknownHostException e) {
    throw new RuntimeException(e);
  }
  final String procName="Host Controller";
  String defaultJVM=null;
  boolean isRestart=false;
  boolean backupDomainFiles=false;
  boolean cachedDc=false;
  String domainConfig=null;
  String hostConfig=null;
  Map<String,String> hostSystemProperties=new HashMap<String,String>();
  final int argsLength=args.length;
  for (int i=0; i < argsLength; i++) {
    final String arg=args[i];
    try {
      if (CommandLineConstants.VERSION.equals(arg) || CommandLineConstants.SHORT_VERSION.equals(arg) || CommandLineConstants.OLD_VERSION.equals(arg)|| CommandLineConstants.OLD_SHORT_VERSION.equals(arg)) {
        System.out.println("JBoss Application Server " + getVersionString());
        return null;
      }
 else       if (CommandLineConstants.HELP.equals(arg) || CommandLineConstants.SHORT_HELP.equals(arg) || CommandLineConstants.OLD_HELP.equals(arg)) {
        usage();
        return null;
      }
 else       if (CommandLineConstants.PROPERTIES.equals(arg) || CommandLineConstants.OLD_PROPERTIES.equals(arg) || CommandLineConstants.SHORT_PROPERTIES.equals(arg)) {
        if (!processProperties(arg,args[++i])) {
          return null;
        }
      }
 else       if (arg.startsWith(CommandLineConstants.PROPERTIES)) {
        String urlSpec=parseValue(arg,CommandLineConstants.PROPERTIES);
        if (urlSpec == null || !processProperties(arg,urlSpec)) {
          return null;
        }
      }
 else       if (arg.startsWith(CommandLineConstants.SHORT_PROPERTIES)) {
        String urlSpec=parseValue(arg,CommandLineConstants.SHORT_PROPERTIES);
        if (urlSpec == null || !processProperties(arg,urlSpec)) {
          return null;
        }
      }
 else       if (arg.startsWith(CommandLineConstants.OLD_PROPERTIES)) {
        String urlSpec=parseValue(arg,CommandLineConstants.OLD_PROPERTIES);
        if (urlSpec == null || !processProperties(arg,urlSpec)) {
          return null;
        }
      }
 else       if (CommandLineConstants.PROCESS_CONTROLLER_BIND_PORT.equals(arg)) {
        final String port=args[++i];
        try {
          pmPort=Integer.valueOf(port);
        }
 catch (        NumberFormatException e) {
          System.err.printf("Value for %s is not an Integer -- %s\n",CommandLineConstants.PROCESS_CONTROLLER_BIND_PORT,port);
          usage();
          return null;
        }
      }
 else       if (arg.startsWith(CommandLineConstants.PROCESS_CONTROLLER_BIND_PORT)) {
        String val=parseValue(arg,CommandLineConstants.PROCESS_CONTROLLER_BIND_PORT);
        if (val == null) {
          return null;
        }
        final Integer port=parsePort(val,CommandLineConstants.PROCESS_CONTROLLER_BIND_PORT);
        if (port == null) {
          return null;
        }
        pmPort=port;
      }
 else       if (CommandLineConstants.PROCESS_CONTROLLER_BIND_ADDR.equals(arg)) {
        final String addr=args[++i];
        try {
          pmAddress=InetAddress.getByName(addr);
        }
 catch (        UnknownHostException e) {
          System.err.printf("Value for %s is not a known host -- %s\n",CommandLineConstants.PROCESS_CONTROLLER_BIND_ADDR,addr);
          usage();
          return null;
        }
      }
 else       if (arg.startsWith(CommandLineConstants.PROCESS_CONTROLLER_BIND_ADDR)) {
        final String val=parseValue(arg,CommandLineConstants.PROCESS_CONTROLLER_BIND_ADDR);
        if (val == null) {
          return null;
        }
        final InetAddress addr=parseAddress(val,arg);
        if (addr == null) {
          return null;
        }
        pmAddress=addr;
      }
 else       if (CommandLineConstants.INTERPROCESS_HC_PORT.equals(arg) || CommandLineConstants.OLD_INTERPROCESS_HC_PORT.equals(arg)) {
        final Integer port=parsePort(args[++i],arg);
        if (port == null) {
          return null;
        }
        smPort=port;
      }
 else       if (arg.startsWith(CommandLineConstants.INTERPROCESS_HC_PORT)) {
        String val=parseValue(arg,CommandLineConstants.INTERPROCESS_HC_PORT);
        if (val == null) {
          return null;
        }
        final Integer port=parsePort(val,CommandLineConstants.INTERPROCESS_HC_PORT);
        if (port == null) {
          return null;
        }
        smPort=port;
      }
 else       if (arg.startsWith(CommandLineConstants.OLD_INTERPROCESS_HC_PORT)) {
        String val=parseValue(arg,CommandLineConstants.INTERPROCESS_HC_PORT);
        if (val == null) {
          return null;
        }
        final Integer port=parsePort(val,CommandLineConstants.INTERPROCESS_HC_PORT);
        if (port == null) {
          return null;
        }
        smPort=port;
      }
 else       if (CommandLineConstants.INTERPROCESS_HC_ADDRESS.equals(arg) || CommandLineConstants.OLD_INTERPROCESS_HC_ADDRESS.equals(arg)) {
        final InetAddress addr=parseAddress(args[++i],arg);
        if (addr == null) {
          return null;
        }
        smAddress=addr;
      }
 else       if (arg.startsWith(CommandLineConstants.INTERPROCESS_HC_ADDRESS)) {
        final String val=parseValue(arg,CommandLineConstants.INTERPROCESS_HC_ADDRESS);
        if (val == null) {
          return null;
        }
        final InetAddress addr=parseAddress(val,arg);
        if (addr == null) {
          return null;
        }
        smAddress=addr;
      }
 else       if (arg.startsWith(CommandLineConstants.OLD_INTERPROCESS_HC_ADDRESS)) {
        final String val=parseValue(arg,CommandLineConstants.OLD_INTERPROCESS_HC_ADDRESS);
        if (val == null) {
          return null;
        }
        final InetAddress addr=parseAddress(val,arg);
        if (addr == null) {
          return null;
        }
        smAddress=addr;
      }
 else       if (CommandLineConstants.RESTART_HOST_CONTROLLER.equals(arg)) {
        isRestart=true;
      }
 else       if (CommandLineConstants.BACKUP_DC.equals(arg) || CommandLineConstants.OLD_BACKUP_DC.equals(arg)) {
        backupDomainFiles=true;
      }
 else       if (CommandLineConstants.CACHED_DC.equals(arg) || CommandLineConstants.OLD_CACHED_DC.equals(arg)) {
        cachedDc=true;
      }
 else       if (CommandLineConstants.DEFAULT_JVM.equals(arg) || CommandLineConstants.OLD_DEFAULT_JVM.equals(arg)) {
        defaultJVM=args[++i];
      }
 else       if (CommandLineConstants.DOMAIN_CONFIG.equals(arg) || CommandLineConstants.OLD_DOMAIN_CONFIG.equals(arg)) {
        domainConfig=args[++i];
      }
 else       if (arg.startsWith(CommandLineConstants.DOMAIN_CONFIG)) {
        String val=parseValue(arg,CommandLineConstants.DOMAIN_CONFIG);
        if (val == null) {
          return null;
        }
        domainConfig=val;
      }
 else       if (arg.startsWith(CommandLineConstants.OLD_DOMAIN_CONFIG)) {
        String val=parseValue(arg,CommandLineConstants.OLD_DOMAIN_CONFIG);
        if (val == null) {
          return null;
        }
        domainConfig=val;
      }
 else       if (CommandLineConstants.HOST_CONFIG.equals(arg) || CommandLineConstants.OLD_HOST_CONFIG.equals(arg)) {
        hostConfig=args[++i];
      }
 else       if (arg.startsWith(CommandLineConstants.HOST_CONFIG)) {
        String val=parseValue(arg,CommandLineConstants.HOST_CONFIG);
        if (val == null) {
          return null;
        }
        hostConfig=val;
      }
 else       if (arg.startsWith(CommandLineConstants.OLD_HOST_CONFIG)) {
        String val=parseValue(arg,CommandLineConstants.OLD_HOST_CONFIG);
        if (val == null) {
          return null;
        }
        hostConfig=val;
      }
 else       if (arg.startsWith(CommandLineConstants.SYS_PROP)) {
        String name, value;
        int idx=arg.indexOf("=");
        if (idx == -1) {
          name=arg.substring(2);
          value="true";
        }
 else {
          name=arg.substring(2,idx);
          value=arg.substring(idx + 1,arg.length());
        }
        SecurityActions.setSystemProperty(name,value);
        hostSystemProperties.put(name,value);
      }
 else       if (arg.startsWith(CommandLineConstants.PUBLIC_BIND_ADDRESS)) {
        int idx=arg.indexOf('=');
        if (idx == arg.length() - 1) {
          System.err.printf("Argument expected for option %s\n",arg);
          usage();
          return null;
        }
        String value=idx > -1 ? arg.substring(idx + 1) : args[++i];
        String logicalName=null;
        if (idx < 0) {
          logicalName=arg.length() == 2 ? CommandLineConstants.DEFAULT_INTERFACE : arg.substring(2);
        }
 else         if (idx == 2) {
          logicalName=CommandLineConstants.DEFAULT_INTERFACE;
        }
 else {
          logicalName=arg.substring(2,idx);
        }
        String propertyName=HostControllerEnvironment.JBOSS_BIND_ADDRESS_PREFIX + logicalName;
        hostSystemProperties.put(propertyName,value);
        SecurityActions.setSystemProperty(propertyName,value);
      }
 else {
        System.err.printf("Invalid option '%s'\n",arg);
        usage();
        return null;
      }
    }
 catch (    IndexOutOfBoundsException e) {
      System.err.printf("Argument expected for option %s\n",arg);
      usage();
      return null;
    }
  }
  return new HostControllerEnvironment(hostSystemProperties,isRestart,stdin,stdout,stderr,pmAddress,pmPort,smAddress,smPort,defaultJVM,domainConfig,hostConfig,backupDomainFiles,cachedDc);
}
