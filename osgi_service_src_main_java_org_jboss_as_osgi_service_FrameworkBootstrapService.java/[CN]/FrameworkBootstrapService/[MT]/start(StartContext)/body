{
  ServiceController<?> controller=context.getController();
  log.debugf("Starting: %s in mode %s",controller.getName(),controller.getMode());
  try {
    ServiceContainer serviceContainer=context.getController().getServiceContainer();
    Map<String,Object> props=new HashMap<String,Object>(injectedSubsystemState.getValue().getProperties());
    setupIntegrationProperties(context,props);
    Module coreFrameworkModule=((ModuleClassLoader)FrameworkBuilder.class.getClassLoader()).getModule();
    Module.registerURLStreamHandlerFactoryModule(coreFrameworkModule);
    Module.registerContentHandlerFactoryModule(coreFrameworkModule);
    FrameworkBuilder builder=new FrameworkBuilder(props);
    builder.setServiceContainer(serviceContainer);
    builder.setServiceTarget(context.getChildTarget());
    builder.addProvidedService(Services.AUTOINSTALL_PROVIDER);
    builder.addProvidedService(Services.BUNDLE_INSTALL_PROVIDER);
    builder.addProvidedService(Services.FRAMEWORK_MODULE_PROVIDER);
    builder.addProvidedService(Services.MODULE_LOADER_PROVIDER);
    builder.addProvidedService(Services.SYSTEM_SERVICES_PROVIDER);
    Activation activation=injectedSubsystemState.getValue().getActivationPolicy();
    Mode initialMode=(activation == Activation.EAGER ? Mode.ACTIVE : Mode.ON_DEMAND);
    builder.createFrameworkServices(initialMode,true);
  }
 catch (  Throwable t) {
    throw new StartException("Failed to create Framework services",t);
  }
}
