{
  ServiceController<?> controller=context.getController();
  LOGGER.tracef("Starting: %s in mode %s",controller.getName(),controller.getMode());
  try {
    ServiceContainer serviceContainer=context.getController().getServiceContainer();
    SubsystemState subsystemState=injectedSubsystemState.getValue();
    Map<String,Object> props=new HashMap<String,Object>(subsystemState.getProperties());
    setupIntegrationProperties(context,props);
    Module coreFrameworkModule=((ModuleClassLoader)FrameworkBuilder.class.getClassLoader()).getModule();
    Module.registerURLStreamHandlerFactoryModule(coreFrameworkModule);
    Module.registerContentHandlerFactoryModule(coreFrameworkModule);
    ServiceTarget serviceTarget=context.getChildTarget();
    JAXPServiceProvider.addService(serviceTarget);
    ResolverService.addService(serviceTarget);
    RepositoryService.addService(serviceTarget);
    FrameworkBuilder builder=new FrameworkBuilder(props);
    builder.setServiceContainer(serviceContainer);
    builder.setServiceTarget(serviceTarget);
    builder.installIntegrationService(serviceContainer,serviceTarget,new BundleLifecycleIntegration());
    builder.installIntegrationService(serviceContainer,serviceTarget,new FrameworkModuleIntegration(props));
    builder.installIntegrationService(serviceContainer,serviceTarget,new ModuleLoaderIntegration());
    builder.installIntegrationService(serviceContainer,serviceTarget,new SystemServicesIntegration(resource,extensions));
    Activation activation=subsystemState.getActivationPolicy();
    if (activation == Activation.EAGER) {
      builder.installIntegrationService(serviceContainer,serviceTarget,new BootstrapBundlesIntegration());
      builder.installIntegrationService(serviceContainer,serviceTarget,new PersistentBundlesIntegration());
      builder.setInitialMode(Mode.ACTIVE);
    }
 else {
      builder.addExcludedService(IntegrationService.BOOTSTRAP_BUNDLES_INSTALL);
      builder.addExcludedService(IntegrationService.PERSISTENT_BUNDLES_INSTALL);
      builder.setInitialMode(Mode.LAZY);
    }
    builder.createFrameworkServices(true);
  }
 catch (  Throwable th) {
    throw MESSAGES.startFailedToCreateFrameworkServices(th);
  }
}
