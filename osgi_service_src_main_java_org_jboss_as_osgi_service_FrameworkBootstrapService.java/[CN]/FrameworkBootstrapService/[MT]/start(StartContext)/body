{
  ServiceController<?> controller=context.getController();
  LOGGER.tracef("Starting: %s in mode %s",controller.getName(),controller.getMode());
  try {
    ServiceContainer serviceContainer=context.getController().getServiceContainer();
    SubsystemState subsystemState=injectedSubsystemState.getValue();
    Map<String,String> props=new HashMap<String,String>(subsystemState.getProperties());
    setupIntegrationProperties(context,props);
    Module coreFrameworkModule=((ModuleClassLoader)FrameworkBuilder.class.getClassLoader()).getModule();
    Module.registerURLStreamHandlerFactoryModule(coreFrameworkModule);
    Module.registerContentHandlerFactoryModule(coreFrameworkModule);
    ServiceTarget serviceTarget=context.getChildTarget();
    JAXPServiceProvider.addService(serviceTarget);
    RepositoryService.addService(serviceTarget);
    Activation activation=subsystemState.getActivationPolicy();
    Mode initialMode=(activation == Activation.EAGER ? Mode.ACTIVE : Mode.LAZY);
    FrameworkBuilder builder=FrameworkBuilderFactory.create(props,initialMode);
    builder.setServiceContainer(serviceContainer);
    builder.setServiceTarget(serviceTarget);
    builder.createFrameworkServices(serviceContainer,true);
    builder.registerIntegrationService(FrameworkPhase.CREATE,new BundleLifecycleIntegration());
    builder.registerIntegrationService(FrameworkPhase.CREATE,new FrameworkModuleIntegration(props));
    builder.registerIntegrationService(FrameworkPhase.CREATE,new ModuleLoaderIntegration());
    builder.registerIntegrationService(FrameworkPhase.CREATE,new LockManagerIntegration());
    builder.registerIntegrationService(FrameworkPhase.CREATE,new SystemServicesIntegration(resource,extensions));
    builder.registerIntegrationService(FrameworkPhase.INIT,new BootstrapBundlesIntegration());
    builder.registerIntegrationService(FrameworkPhase.INIT,new PersistentBundlesIntegration(deploymentTracker));
    for (    SubsystemExtension extension : extensions) {
      extension.registerIntegrationServices(builder,subsystemState);
    }
    builder.installServices(FrameworkPhase.CREATE,serviceTarget,verificationHandler);
    if (activation == Activation.EAGER) {
      builder.installServices(FrameworkPhase.INIT,serviceTarget,verificationHandler);
      builder.installServices(FrameworkPhase.ACTIVE,serviceTarget,verificationHandler);
    }
    FrameworkActivator.create(builder);
  }
 catch (  Throwable th) {
    throw MESSAGES.startFailedToCreateFrameworkServices(th);
  }
}
