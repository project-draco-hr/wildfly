{
  ServiceController<?> controller=context.getController();
  LOGGER.tracef("Starting: %s in mode %s",controller.getName(),controller.getMode());
  try {
    ServiceContainer serviceContainer=context.getController().getServiceContainer();
    SubsystemState subsystemState=injectedSubsystemState.getValue();
    Map<String,Object> props=new HashMap<String,Object>(subsystemState.getProperties());
    setupIntegrationProperties(context,props);
    Module coreFrameworkModule=((ModuleClassLoader)FrameworkBuilder.class.getClassLoader()).getModule();
    Module.registerURLStreamHandlerFactoryModule(coreFrameworkModule);
    Module.registerContentHandlerFactoryModule(coreFrameworkModule);
    ServiceTarget serviceTarget=context.getChildTarget();
    AutoInstallIntegration.addService(serviceTarget);
    BundleInstallIntegration.addService(serviceTarget);
    FrameworkModuleIntegration.addService(serviceTarget,props);
    JAXPServiceProvider.addService(serviceTarget);
    ModuleLoaderIntegration.addService(serviceTarget);
    ModuleIdentityArtifactProvider.addService(serviceTarget);
    RepositoryProvider.addService(serviceTarget);
    ResolverService.addService(serviceTarget);
    SystemServicesIntegration.addService(serviceTarget,resource);
    Activation activation=subsystemState.getActivationPolicy();
    Mode initialMode=(activation == Activation.EAGER ? Mode.ACTIVE : Mode.ON_DEMAND);
    FrameworkBuilder builder=new FrameworkBuilder(props,initialMode);
    builder.setServiceContainer(serviceContainer);
    builder.setServiceTarget(serviceTarget);
    builder.createFrameworkServices(true);
  }
 catch (  Throwable th) {
    throw MESSAGES.startFailedToCreateFrameworkServices(th);
  }
}
