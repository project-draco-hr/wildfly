{
  ServiceController<?> controller=context.getController();
  LOGGER.debugf("Starting: %s in mode %s",controller.getName(),controller.getMode());
  serviceContainer=context.getController().getServiceContainer();
  final BundleContext syscontext=injectedBundleContext.getValue();
  jndiServiceListener=new JNDIServiceListener(syscontext);
  try {
    String filter="(" + Constants.OBJECTCLASS + "="+ ObjectFactory.class.getName()+ ")";
    syscontext.addServiceListener(jndiServiceListener,filter);
  }
 catch (  InvalidSyntaxException e) {
  }
  String bindingNames=syscontext.getProperty(MAPPED_OSGI_SOCKET_BINDINGS);
  if (bindingNames != null) {
    final Set<ServiceName> socketBindingNames=new HashSet<ServiceName>();
    for (    String suffix : bindingNames.split(",")) {
      socketBindingNames.add(JBOSS_BINDING_NAME.append(suffix));
    }
    ServiceTarget serviceTarget=context.getChildTarget();
    ServiceName serviceName=Services.SYSTEM_SERVICES_PROVIDER.append("BINDINGS");
    ServiceBuilder<Void> builder=serviceTarget.addService(serviceName,new AbstractService<Void>(){
      public void start(      StartContext context) throws StartException {
        for (        ServiceName serviceName : socketBindingNames) {
          SocketBinding binding=(SocketBinding)serviceContainer.getRequiredService(serviceName).getValue();
          Dictionary<String,String> props=new Hashtable<String,String>();
          props.put("socketBinding",serviceName.getSimpleName());
          InetSocketAddress value=binding.getSocketAddress();
          syscontext.registerService(InetSocketAddress.class.getName(),value,props);
        }
      }
    }
);
    ServiceName[] serviceNameArray=socketBindingNames.toArray(new ServiceName[socketBindingNames.size()]);
    builder.addDependencies(serviceNameArray);
    builder.install();
  }
}
