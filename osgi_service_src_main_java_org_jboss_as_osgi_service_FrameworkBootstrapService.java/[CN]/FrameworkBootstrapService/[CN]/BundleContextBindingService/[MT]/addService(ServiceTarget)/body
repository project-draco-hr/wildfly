{
  ContextNames.BindInfo bindInfo=ContextNames.bindInfoFor(BUNDLE_CONTEXT_BINDING_NAME);
  BinderService binderService=new BinderService(bindInfo.getBindName()){
    @Override public synchronized void start(    StartContext context) throws StartException {
      super.start(context);
      ServiceController<?> controller=context.getController();
      controller.setMode(Mode.ACTIVE);
    }
  }
;
  ServiceBuilder<?> builder=serviceTarget.addService(getBinderServiceName(),binderService);
  builder.addDependency(Services.SYSTEM_CONTEXT,BundleContext.class,new ManagedReferenceInjector<BundleContext>(binderService.getManagedObjectInjector()));
  builder.addDependency(Services.FRAMEWORK_ACTIVATOR);
  builder.addDependency(bindInfo.getParentContextServiceName(),ServiceBasedNamingStore.class,binderService.getNamingStoreInjector()).addListener(new AbstractServiceListener<Object>(){
    public void transition(    final ServiceController<? extends Object> controller,    final ServiceController.Transition transition){
switch (transition) {
case STARTING_to_UP:
{
          LOGGER.infoBoundSystemContext(BUNDLE_CONTEXT_BINDING_NAME);
          break;
        }
case START_REQUESTED_to_DOWN:
{
        LOGGER.infoUnboundSystemContext(BUNDLE_CONTEXT_BINDING_NAME);
        break;
      }
  }
}
}
);
builder.setInitialMode(Mode.ON_DEMAND);
return builder.install();
}
