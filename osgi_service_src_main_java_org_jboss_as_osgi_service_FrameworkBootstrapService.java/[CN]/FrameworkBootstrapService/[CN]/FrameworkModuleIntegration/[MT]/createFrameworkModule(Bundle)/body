{
  ModuleSpec.Builder specBuilder=ModuleSpec.build(ModuleIdentifier.create(JBOSGI_PREFIX + ".framework"));
  SystemPathsProvider provider=injectedSystemPaths.getValue();
  Set<String> sysPaths=provider.getSystemPaths();
  PathFilter sysImport=provider.getSystemFilter();
  PathFilter acceptAll=PathFilters.acceptAll();
  specBuilder.addDependency(DependencySpec.createSystemDependencySpec(sysImport,acceptAll,sysPaths));
  ModuleLoader bootLoader=Module.getBootModuleLoader();
  String[] modids=new String[]{"org.jboss.osgi.framework","org.jboss.as.osgi"};
  for (  String modid : modids) {
    ModuleIdentifier identifier=ModuleIdentifier.create(modid);
    specBuilder.addDependency(DependencySpec.createModuleDependencySpec(acceptAll,acceptAll,bootLoader,identifier,false));
  }
  String modulesProps=(String)injectedSubsystemState.getValue().getProperties().get(PROP_JBOSS_OSGI_SYSTEM_MODULES);
  if (modulesProps != null) {
    for (    String moduleProp : modulesProps.split(",")) {
      moduleProp=moduleProp.trim();
      if (moduleProp.length() > 0) {
        ModuleIdentifier moduleId=ModuleIdentifier.create(moduleProp);
        DependencySpec moduleDep=DependencySpec.createModuleDependencySpec(acceptAll,acceptAll,bootLoader,moduleId,false);
        specBuilder.addDependency(moduleDep);
      }
    }
  }
  specBuilder.setModuleClassLoaderFactory(new BundleReferenceClassLoader.Factory(systemBundle));
  try {
    final ModuleSpec moduleSpec=specBuilder.create();
    ModuleLoader moduleLoader=new ModuleLoader(){
      @Override protected ModuleSpec findModule(      ModuleIdentifier identifier) throws ModuleLoadException {
        return (moduleSpec.getModuleIdentifier().equals(identifier) ? moduleSpec : null);
      }
      @Override public String toString(){
        return "FrameworkModuleLoader";
      }
    }
;
    return moduleLoader.loadModule(specBuilder.getIdentifier());
  }
 catch (  ModuleLoadException ex) {
    throw new IllegalStateException(ex);
  }
}
