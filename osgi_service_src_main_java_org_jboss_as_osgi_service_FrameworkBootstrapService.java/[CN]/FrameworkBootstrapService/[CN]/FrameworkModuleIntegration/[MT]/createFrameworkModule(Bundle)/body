{
  Module systemModule=injectedSystemModule.getValue();
  ModuleIdentifier systemIdentifier=systemModule.getIdentifier();
  ModuleLoader systemLoader=systemModule.getModuleLoader();
  ModuleSpec.Builder specBuilder=ModuleSpec.build(ModuleIdentifier.create(JBOSGI_PREFIX + ".framework"));
  specBuilder.addDependency(createSystemModuleDependency(systemLoader,systemIdentifier));
  ModuleLoader bootLoader=Module.getBootModuleLoader();
  ModuleIdentifier frameworkIdentifier=ModuleIdentifier.create("org.jboss.osgi.framework");
  specBuilder.addDependency(createSystemModuleDependency(bootLoader,frameworkIdentifier));
  ModuleIdentifier subsystemIdentifier=ModuleIdentifier.create("org.jboss.as.osgi");
  specBuilder.addDependency(createSystemModuleDependency(bootLoader,subsystemIdentifier));
  String sysmodules=(String)props.get(PROP_JBOSS_OSGI_SYSTEM_MODULES);
  if (sysmodules == null)   sysmodules="";
  String extramodules=(String)props.get(PROP_JBOSS_OSGI_SYSTEM_MODULES_EXTRA);
  if (extramodules != null)   sysmodules+="," + extramodules;
  for (  String moduleProp : sysmodules.split(",")) {
    moduleProp=moduleProp.trim();
    if (moduleProp.length() > 0) {
      ModuleIdentifier moduleId=ModuleIdentifier.create(moduleProp);
      DependencySpec moduleDep=createSystemModuleDependency(bootLoader,moduleId);
      specBuilder.addDependency(moduleDep);
    }
  }
  specBuilder.setModuleClassLoaderFactory(new BundleReferenceClassLoader.Factory(systemBundle));
  try {
    final ModuleSpec moduleSpec=specBuilder.create();
    ModuleLoader moduleLoader=new ModuleLoader(){
      @Override protected ModuleSpec findModule(      ModuleIdentifier identifier) throws ModuleLoadException {
        return (moduleSpec.getModuleIdentifier().equals(identifier) ? moduleSpec : null);
      }
      @Override public String toString(){
        return getClass().getSimpleName();
      }
    }
;
    return moduleLoader.loadModule(specBuilder.getIdentifier());
  }
 catch (  ModuleLoadException ex) {
    throw new IllegalStateException(ex);
  }
}
