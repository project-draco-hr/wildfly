{
  boolean success;
  Connection con=null;
  ResultSet rs=null;
  String schema=SQLUtil.getSchema(qualifiedTableName);
  String tableName=schema != null ? SQLUtil.getTableNameWithoutSchema(qualifiedTableName) : qualifiedTableName;
  try {
    con=dataSource.getConnection();
    DatabaseMetaData dmd=con.getMetaData();
    rs=dmd.getTables(con.getCatalog(),schema,tableName,null);
    if (!rs.next()) {
      return true;
    }
  }
 catch (  SQLException e) {
    log.debug("Error getting database metadata for DROP TABLE command. " + " DROP TABLE will not be executed. ",e);
    return true;
  }
 finally {
    JDBCUtil.safeClose(rs);
    JDBCUtil.safeClose(con);
  }
  TransactionManager tm=manager.getComponent().getTransactionManager();
  Transaction oldTransaction=null;
  try {
    oldTransaction=tm.suspend();
  }
 catch (  Exception e) {
    log.error("Could not suspend current transaction before drop table. " + "'" + qualifiedTableName + "' will not be dropped.",e);
  }
  try {
    Statement statement=null;
    try {
      con=dataSource.getConnection();
      statement=con.createStatement();
      String sql=SQLUtil.DROP_TABLE + qualifiedTableName;
      log.debug("Executing SQL: " + sql);
      statement.executeUpdate(sql);
      success=true;
    }
  finally {
      JDBCUtil.safeClose(statement);
      JDBCUtil.safeClose(con);
    }
  }
 catch (  Exception e) {
    log.debug("Could not drop table " + qualifiedTableName + ": "+ e.getMessage());
    success=false;
  }
 finally {
    try {
      if (oldTransaction != null) {
        tm.resume(oldTransaction);
      }
    }
 catch (    Exception e) {
      log.error("Could not reattach original transaction after drop table");
    }
  }
  return success;
}
