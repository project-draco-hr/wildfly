{
  final DeploymentUnit deploymentUnit=phaseContext.getDeploymentUnit();
  if (deploymentUnit.getAttachment(Attachments.DEPLOYMENT_ROOT) != null) {
    return;
  }
  final DeploymentMountProvider deploymentMountProvider=deploymentUnit.getAttachment(Attachments.SERVER_DEPLOYMENT_REPOSITORY);
  if (deploymentMountProvider == null) {
    throw ServerMessages.MESSAGES.noDeploymentRepositoryAvailable();
  }
  final String deploymentName=deploymentUnit.getName();
  final VirtualFile deploymentContents=deploymentUnit.getAttachment(Attachments.DEPLOYMENT_CONTENTS);
  if (deploymentContents == null)   return;
  final VirtualFile deploymentRoot;
  final MountHandle mountHandle;
  if (deploymentContents.isDirectory()) {
    deploymentRoot=deploymentContents;
    mountHandle=null;
    if (deploymentUnit.getParent() == null || ExplodedDeploymentMarker.isExplodedDeployment(deploymentUnit.getParent())) {
      ExplodedDeploymentMarker.markAsExplodedDeployment(deploymentUnit);
    }
  }
 else {
    deploymentRoot=VFS.getChild("content/" + deploymentName);
    boolean failed=false;
    Closeable handle=null;
    try {
      final boolean mountExploded=MountExplodedMarker.isMountExploded(deploymentUnit);
      final MountType type;
      if (mountExploded) {
        type=MountType.EXPANDED;
      }
 else       if (deploymentName.endsWith(".xml")) {
        type=MountType.REAL;
      }
 else {
        type=MountType.ZIP;
      }
      handle=deploymentMountProvider.mountDeploymentContent(deploymentContents,deploymentRoot,type);
      mountHandle=new MountHandle(handle);
    }
 catch (    IOException e) {
      failed=true;
      throw ServerMessages.MESSAGES.deploymentMountFailed(e);
    }
 finally {
      if (failed) {
        VFSUtils.safeClose(handle);
      }
    }
  }
  final ResourceRoot resourceRoot=new ResourceRoot(deploymentRoot,mountHandle);
  ModuleRootMarker.mark(resourceRoot);
  deploymentUnit.putAttachment(Attachments.DEPLOYMENT_ROOT,resourceRoot);
  deploymentUnit.putAttachment(Attachments.MODULE_SPECIFICATION,new ModuleSpecification());
}
