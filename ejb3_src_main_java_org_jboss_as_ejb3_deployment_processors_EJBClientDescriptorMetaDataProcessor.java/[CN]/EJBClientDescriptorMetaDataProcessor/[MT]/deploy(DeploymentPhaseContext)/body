{
  final DeploymentUnit deploymentUnit=phaseContext.getDeploymentUnit();
  if (deploymentUnit.getParent() != null) {
    return;
  }
  final EJBClientDescriptorMetaData ejbClientDescriptorMetaData=deploymentUnit.getAttachment(Attachments.EJB_CLIENT_METADATA);
  if (ejbClientDescriptorMetaData == null) {
    return;
  }
  final Module module=deploymentUnit.getAttachment(org.jboss.as.server.deployment.Attachments.MODULE);
  if (module == null) {
    return;
  }
  final ServiceName ejbClientContextServiceName=DescriptorBasedEJBClientContextService.BASE_SERVICE_NAME.append(deploymentUnit.getName());
  final ServiceTarget serviceTarget=phaseContext.getServiceTarget();
  final EJBClientConfiguration ejbClientConfiguration=this.createClientConfiguration(phaseContext.getServiceRegistry(),module.getClassLoader(),ejbClientDescriptorMetaData);
  final DescriptorBasedEJBClientContextService service=new DescriptorBasedEJBClientContextService(ejbClientConfiguration,module.getClassLoader());
  final ServiceBuilder serviceBuilder=serviceTarget.addService(ejbClientContextServiceName,service);
  for (  final EJBClientDescriptorMetaData.RemotingReceiverConfiguration remotingReceiverConfiguration : ejbClientDescriptorMetaData.getRemotingReceiverConfigurations()) {
    final String connectionRef=remotingReceiverConfiguration.getOutboundConnectionRef();
    final ServiceName connectionDependencyService=AbstractOutboundConnectionService.OUTBOUND_CONNECTION_BASE_SERVICE_NAME.append(connectionRef);
    service.addRemotingConnectionDependency(serviceBuilder,connectionDependencyService);
    final Properties channelCreationProps=remotingReceiverConfiguration.getChannelCreationOptions();
    final OptionMap channelCreationOpts;
    if (channelCreationProps == null) {
      channelCreationOpts=OptionMap.EMPTY;
    }
 else {
      channelCreationOpts=this.getOptionMapFromProperties(channelCreationProps,this.getClass().getClassLoader());
    }
    logger.debug("Channel creation options for connection " + connectionRef + " are "+ channelCreationOpts);
    service.setChannelCreationOptions(connectionRef,channelCreationOpts);
    service.setConnectionCreationTimeout(connectionRef,remotingReceiverConfiguration.getConnectionTimeout());
  }
  if (!ejbClientDescriptorMetaData.isLocalReceiverExcluded()) {
    final Boolean passByValue=ejbClientDescriptorMetaData.isLocalReceiverPassByValue();
    if (passByValue != null) {
      final ServiceName localEjbReceiverServiceName=passByValue == true ? LocalEjbReceiver.BY_VALUE_SERVICE_NAME : LocalEjbReceiver.BY_REFERENCE_SERVICE_NAME;
      serviceBuilder.addDependency(localEjbReceiverServiceName,LocalEjbReceiver.class,service.getLocalEjbReceiverInjector());
    }
 else {
      serviceBuilder.addDependency(LocalEjbReceiver.DEFAULT_LOCAL_EJB_RECEIVER_SERVICE_NAME,LocalEjbReceiver.class,service.getLocalEjbReceiverInjector());
    }
  }
  serviceBuilder.addDependency(TCCLEJBClientContextSelectorService.TCCL_BASED_EJB_CLIENT_CONTEXT_SELECTOR_SERVICE_NAME);
  serviceBuilder.install();
  logger.debug("Deployment unit " + deploymentUnit + " will use "+ ejbClientContextServiceName+ " as the EJB client context service");
  phaseContext.addDeploymentDependency(ejbClientContextServiceName,EjbDeploymentAttachmentKeys.EJB_CLIENT_CONTEXT);
}
