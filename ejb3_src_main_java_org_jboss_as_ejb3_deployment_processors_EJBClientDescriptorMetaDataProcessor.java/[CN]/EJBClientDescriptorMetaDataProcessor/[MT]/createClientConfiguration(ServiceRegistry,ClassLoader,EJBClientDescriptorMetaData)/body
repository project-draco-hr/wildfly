{
  final JBossEJBClientXmlConfiguration ejbClientConfig=new JBossEJBClientXmlConfiguration();
  ejbClientConfig.setInvocationTimeout(ejbClientDescriptorMetaData.getInvocationTimeout());
  final String deploymentNodeSelectorClassName=ejbClientDescriptorMetaData.getDeploymentNodeSelector();
  if (deploymentNodeSelectorClassName != null && !deploymentNodeSelectorClassName.trim().isEmpty()) {
    try {
      final Class<?> deploymentNodeSelectorClass=classLoader.loadClass(deploymentNodeSelectorClassName);
      ejbClientConfig.setDeploymentNodeSelector((DeploymentNodeSelector)deploymentNodeSelectorClass.newInstance());
    }
 catch (    Exception e) {
      throw EjbMessages.MESSAGES.failedToCreateDeploymentNodeSelector(e,deploymentNodeSelectorClassName);
    }
  }
  for (  final EJBClientDescriptorMetaData.ClusterConfig clusterMetadata : ejbClientDescriptorMetaData.getClusterConfigs()) {
    final EJBClientClusterConfig clusterConfig=new EJBClientClusterConfig(clusterMetadata,classLoader,serviceRegistry);
    ejbClientConfig.addClusterConfiguration(clusterConfig);
    for (    final EJBClientDescriptorMetaData.ClusterNodeConfig nodeMetadata : clusterMetadata.getClusterNodeConfigs()) {
      final EJBClientClusterNodeConfig clusterNodeConfig=new EJBClientClusterNodeConfig(nodeMetadata,classLoader,serviceRegistry);
      clusterConfig.addClusterNode(clusterNodeConfig);
    }
  }
  return ejbClientConfig;
}
