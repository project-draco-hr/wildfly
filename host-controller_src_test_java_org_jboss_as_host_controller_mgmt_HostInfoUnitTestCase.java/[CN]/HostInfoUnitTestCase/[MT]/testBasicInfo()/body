{
  LocalHostControllerInfoImpl lch=new MockLocalHostControllerInfo(new ControlledProcessState(true),"test");
  ProductConfig productConfig=new ProductConfig("product","version","main");
  IgnoredDomainResourceRegistry ignoredRegistry=new IgnoredDomainResourceRegistry(lch);
  ModelNode model=HostInfo.createLocalHostHostInfo(lch,productConfig,ignoredRegistry,Resource.Factory.create());
  Assert.assertTrue(model.get(IGNORE_UNUSED_CONFIG).asBoolean());
  Assert.assertEquals(new ModelNode().setEmptyObject(),model.get(INITIAL_SERVER_GROUPS));
  HostInfo testee=HostInfo.fromModelNode(model);
  Assert.assertEquals("test",testee.getHostName());
  Assert.assertEquals("product",testee.getProductName());
  Assert.assertEquals("version",testee.getProductVersion());
  Assert.assertEquals(Version.AS_VERSION,testee.getReleaseVersion());
  Assert.assertEquals(Version.AS_RELEASE_CODENAME,testee.getReleaseCodeName());
  Assert.assertEquals(Version.MANAGEMENT_MAJOR_VERSION,testee.getManagementMajorVersion());
  Assert.assertEquals(Version.MANAGEMENT_MINOR_VERSION,testee.getManagementMinorVersion());
  Assert.assertEquals(Version.MANAGEMENT_MICRO_VERSION,testee.getManagementMicroVersion());
  Assert.assertNull(testee.getRemoteConnectionId());
  productConfig=new ProductConfig(null,null,"main");
  model=HostInfo.createLocalHostHostInfo(lch,productConfig,ignoredRegistry,Resource.Factory.create());
  model.get(RemoteDomainConnectionService.DOMAIN_CONNECTION_ID).set(1L);
  testee=HostInfo.fromModelNode(model);
  Assert.assertNull(testee.getProductName());
  Assert.assertNull(testee.getProductVersion());
  Assert.assertNotNull(testee.getRemoteConnectionId());
  Assert.assertEquals(1L,testee.getRemoteConnectionId().longValue());
}
