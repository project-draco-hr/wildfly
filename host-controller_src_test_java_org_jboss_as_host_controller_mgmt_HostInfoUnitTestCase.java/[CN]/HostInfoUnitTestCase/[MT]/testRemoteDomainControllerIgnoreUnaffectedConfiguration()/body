{
  LocalHostControllerInfoImpl lch=new MockLocalHostControllerInfo(new ControlledProcessState(true),"test");
  ProductConfig productConfig=new ProductConfig("product","version","main");
  Resource hostResource=Resource.Factory.create();
  Resource server1=Resource.Factory.create();
  server1.getModel().get(GROUP).set("server-group1");
  server1.getModel().get(SOCKET_BINDING_GROUP).set("socket-binding-group1");
  hostResource.registerChild(PathElement.pathElement(SERVER_CONFIG,"server-1"),server1);
  Resource server2=Resource.Factory.create();
  server2.getModel().get(GROUP).set("server-group1");
  hostResource.registerChild(PathElement.pathElement(SERVER_CONFIG,"server-2"),server2);
  Resource domainResource=Resource.Factory.create();
  domainResource.registerChild(PathElement.pathElement(HOST,"test"),hostResource);
  Resource serverGroup1=Resource.Factory.create();
  serverGroup1.getModel().get(PROFILE).set("profile1");
  serverGroup1.getModel().get(SOCKET_BINDING_GROUP).set("socket-binding-group1a");
  domainResource.registerChild(PathElement.pathElement(SERVER_GROUP,"server-group1"),serverGroup1);
  Resource serverGroup2=Resource.Factory.create();
  serverGroup2.getModel().get(PROFILE).set("profile1");
  domainResource.registerChild(PathElement.pathElement(SERVER_GROUP,"server-group2"),serverGroup2);
  IgnoredDomainResourceRegistry ignoredRegistry=new IgnoredDomainResourceRegistry(lch);
  ModelNode model=HostInfo.createLocalHostHostInfo(lch,productConfig,ignoredRegistry,hostResource);
  Assert.assertTrue(model.get(IGNORE_UNUSED_CONFIG).asBoolean());
  Assert.assertEquals(2,model.get(INITIAL_SERVER_GROUPS).keys().size());
  Assert.assertEquals("server-group1",model.get(INITIAL_SERVER_GROUPS,"server-1",GROUP).asString());
  Assert.assertEquals("socket-binding-group1",model.get(INITIAL_SERVER_GROUPS,"server-1",SOCKET_BINDING_GROUP).asString());
  Assert.assertEquals("server-group1",model.get(INITIAL_SERVER_GROUPS,"server-2",GROUP).asString());
  Assert.assertFalse(model.get(INITIAL_SERVER_GROUPS,"server-2",SOCKET_BINDING_GROUP).isDefined());
  final ExtensionRegistry extensionRegistry=new ExtensionRegistry(ProcessType.HOST_CONTROLLER,new RunningModeControl(RunningMode.NORMAL));
  HostInfo testee=HostInfo.fromModelNode(model);
  RuntimeIgnoreTransformation masterIgnorer=DomainControllerRuntimeIgnoreTransformationEntry.create(testee,extensionRegistry);
  Assert.assertFalse(masterIgnorer.ignoreResource(domainResource,PathAddress.pathAddress(PathElement.pathElement(SERVER_GROUP,"server-group1"))));
  Assert.assertTrue(masterIgnorer.ignoreResource(domainResource,PathAddress.pathAddress(PathElement.pathElement(SERVER_GROUP,"server-group2"))));
  Assert.assertFalse(masterIgnorer.ignoreResource(domainResource,PathAddress.pathAddress(PathElement.pathElement(SOCKET_BINDING_GROUP,"socket-binding-group1"))));
  Assert.assertFalse(masterIgnorer.ignoreResource(domainResource,PathAddress.pathAddress(PathElement.pathElement(SOCKET_BINDING_GROUP,"socket-binding-group1a"))));
  Assert.assertTrue(masterIgnorer.ignoreResource(domainResource,PathAddress.pathAddress(PathElement.pathElement(SOCKET_BINDING_GROUP,"socket-binding-group2"))));
  Assert.assertFalse(masterIgnorer.ignoreResource(domainResource,PathAddress.pathAddress(PathElement.pathElement(PROFILE,"profile1"))));
  Assert.assertTrue(masterIgnorer.ignoreResource(domainResource,PathAddress.pathAddress(PathElement.pathElement(PROFILE,"profile2"))));
  IgnoredNonAffectedServerGroupsUtil slaveUtil=IgnoredNonAffectedServerGroupsUtil.create(extensionRegistry);
  Set<IgnoredNonAffectedServerGroupsUtil.ServerConfigInfo> slaveServerConfigs=slaveUtil.getServerConfigsOnSlave(hostResource);
  Assert.assertFalse(slaveUtil.ignoreResource(domainResource,slaveServerConfigs,PathAddress.pathAddress(PathElement.pathElement(SERVER_GROUP,"server-group1"))));
  Assert.assertTrue(slaveUtil.ignoreResource(domainResource,slaveServerConfigs,PathAddress.pathAddress(PathElement.pathElement(SERVER_GROUP,"server-group2"))));
  Assert.assertFalse(slaveUtil.ignoreResource(domainResource,slaveServerConfigs,PathAddress.pathAddress(PathElement.pathElement(SOCKET_BINDING_GROUP,"socket-binding-group1"))));
  Assert.assertFalse(slaveUtil.ignoreResource(domainResource,slaveServerConfigs,PathAddress.pathAddress(PathElement.pathElement(SOCKET_BINDING_GROUP,"socket-binding-group1a"))));
  Assert.assertTrue(slaveUtil.ignoreResource(domainResource,slaveServerConfigs,PathAddress.pathAddress(PathElement.pathElement(SOCKET_BINDING_GROUP,"socket-binding-group2"))));
  Assert.assertFalse(slaveUtil.ignoreResource(domainResource,slaveServerConfigs,PathAddress.pathAddress(PathElement.pathElement(PROFILE,"profile1"))));
  Assert.assertTrue(slaveUtil.ignoreResource(domainResource,slaveServerConfigs,PathAddress.pathAddress(PathElement.pathElement(PROFILE,"profile2"))));
  server1.getModel().remove(SOCKET_BINDING_GROUP);
  slaveServerConfigs=slaveUtil.getServerConfigsOnSlave(hostResource);
  Assert.assertTrue(slaveUtil.ignoreResource(domainResource,slaveServerConfigs,PathAddress.pathAddress(PathElement.pathElement(SOCKET_BINDING_GROUP,"socket-binding-group1"))));
  Assert.assertFalse(slaveUtil.ignoreResource(domainResource,slaveServerConfigs,PathAddress.pathAddress(PathElement.pathElement(SOCKET_BINDING_GROUP,"socket-binding-group1a"))));
  Assert.assertTrue(slaveUtil.ignoreResource(domainResource,slaveServerConfigs,PathAddress.pathAddress(PathElement.pathElement(SOCKET_BINDING_GROUP,"socket-binding-group2"))));
  server1.getModel().get(GROUP).set("server-group2");
  server2.getModel().get(GROUP).set("server-group2");
  serverGroup2.getModel().get(SOCKET_BINDING_GROUP).set("socket-binding-group1");
  slaveServerConfigs=slaveUtil.getServerConfigsOnSlave(hostResource);
  Assert.assertTrue(slaveUtil.ignoreResource(domainResource,slaveServerConfigs,PathAddress.pathAddress(PathElement.pathElement(SERVER_GROUP,"server-group1"))));
  Assert.assertFalse(slaveUtil.ignoreResource(domainResource,slaveServerConfigs,PathAddress.pathAddress(PathElement.pathElement(SERVER_GROUP,"server-group2"))));
  Assert.assertFalse(slaveUtil.ignoreResource(domainResource,slaveServerConfigs,PathAddress.pathAddress(PathElement.pathElement(SOCKET_BINDING_GROUP,"socket-binding-group1"))));
  Assert.assertTrue(slaveUtil.ignoreResource(domainResource,slaveServerConfigs,PathAddress.pathAddress(PathElement.pathElement(SOCKET_BINDING_GROUP,"socket-binding-group1a"))));
  Assert.assertTrue(slaveUtil.ignoreResource(domainResource,slaveServerConfigs,PathAddress.pathAddress(PathElement.pathElement(SOCKET_BINDING_GROUP,"socket-binding-group2"))));
  Assert.assertFalse(slaveUtil.ignoreResource(domainResource,slaveServerConfigs,PathAddress.pathAddress(PathElement.pathElement(PROFILE,"profile1"))));
  Assert.assertTrue(slaveUtil.ignoreResource(domainResource,slaveServerConfigs,PathAddress.pathAddress(PathElement.pathElement(PROFILE,"profile2"))));
  serverGroup2.getModel().get(PROFILE).set("profile2");
  Assert.assertTrue(slaveUtil.ignoreResource(domainResource,slaveServerConfigs,PathAddress.pathAddress(PathElement.pathElement(SERVER_GROUP,"server-group1"))));
  Assert.assertFalse(slaveUtil.ignoreResource(domainResource,slaveServerConfigs,PathAddress.pathAddress(PathElement.pathElement(SERVER_GROUP,"server-group2"))));
  Assert.assertFalse(slaveUtil.ignoreResource(domainResource,slaveServerConfigs,PathAddress.pathAddress(PathElement.pathElement(SOCKET_BINDING_GROUP,"socket-binding-group1"))));
  Assert.assertTrue(slaveUtil.ignoreResource(domainResource,slaveServerConfigs,PathAddress.pathAddress(PathElement.pathElement(SOCKET_BINDING_GROUP,"socket-binding-group1a"))));
  Assert.assertTrue(slaveUtil.ignoreResource(domainResource,slaveServerConfigs,PathAddress.pathAddress(PathElement.pathElement(SOCKET_BINDING_GROUP,"socket-binding-group2"))));
  Assert.assertTrue(slaveUtil.ignoreResource(domainResource,slaveServerConfigs,PathAddress.pathAddress(PathElement.pathElement(PROFILE,"profile1"))));
  Assert.assertFalse(slaveUtil.ignoreResource(domainResource,slaveServerConfigs,PathAddress.pathAddress(PathElement.pathElement(PROFILE,"profile2"))));
}
