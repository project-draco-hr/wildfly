{
  final long hungTaskThreshold=DefaultManagedScheduledExecutorServiceResourceDefinition.HUNG_TASK_THRESHOLD_AD.resolveModelAttribute(context,model).asLong();
  final boolean longRunningTasks=DefaultManagedScheduledExecutorServiceResourceDefinition.LONG_RUNNING_TASKS_AD.resolveModelAttribute(context,model).asBoolean();
  final int coreThreads=DefaultManagedScheduledExecutorServiceResourceDefinition.CORE_THREADS_AD.resolveModelAttribute(context,model).asInt();
  final long keepAliveTime=DefaultManagedScheduledExecutorServiceResourceDefinition.KEEPALIVE_TIME_AD.resolveModelAttribute(context,model).asLong();
  final TimeUnit keepAliveTimeUnit=TimeUnit.MILLISECONDS;
  final long threadLifeTime=0L;
  final AbstractManagedExecutorService.RejectPolicy rejectPolicy=AbstractManagedExecutorService.RejectPolicy.valueOf(DefaultManagedScheduledExecutorServiceResourceDefinition.REJECT_POLICY_AD.resolveModelAttribute(context,model).asString());
  final ManagedScheduledExecutorServiceService service=new ManagedScheduledExecutorServiceService(ConcurrentServiceNames.DEFAULT_NAME,hungTaskThreshold,longRunningTasks,coreThreads,keepAliveTime,keepAliveTimeUnit,threadLifeTime,rejectPolicy);
  final ServiceBuilder serviceBuilder=context.getServiceTarget().addService(ConcurrentServiceNames.DEFAULT_MANAGED_SCHEDULED_EXECUTOR_SERVICE_SERVICE_NAME,service).addDependency(ConcurrentServiceNames.DEFAULT_CONTEXT_SERVICE_SERVICE_NAME,ContextServiceImpl.class,service.getContextServiceInjector()).addListener(verificationHandler);
  newControllers.add(serviceBuilder.install());
  context.addStep(new AbstractDeploymentChainStep(){
    protected void execute(    DeploymentProcessorTarget processorTarget){
      processorTarget.addDeploymentProcessor(EeExtension.SUBSYSTEM_NAME,Phase.PARSE,Phase.PARSE_EE_CONCURRENT_DEFAULT_MANAGED_SCHEDULED_EXECUTOR_SERVICE,new EEConcurrentDefaultManagedScheduledExecutorServiceProcessor());
    }
  }
,OperationContext.Stage.RUNTIME);
}
