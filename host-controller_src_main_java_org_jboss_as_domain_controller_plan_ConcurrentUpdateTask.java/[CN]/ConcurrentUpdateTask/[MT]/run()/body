{
  List<Future<?>> futures=new ArrayList<Future<?>>();
  for (  Runnable r : concurrentTasks) {
    final Runnable task=r;
    futures.add(doPrivileged(new PrivilegedAction<Future<?>>(){
      @Override public Future<?> run(){
        return executorService.submit(task);
      }
    }
));
  }
  for (int i=0; i < futures.size(); i++) {
    Future<?> future=futures.get(i);
    try {
      future.get();
    }
 catch (    InterruptedException e) {
      DOMAIN_DEPLOYMENT_LOGGER.caughtExceptionWaitingForTaskReturning(ConcurrentUpdateTask.class.getSimpleName(),e.getClass().getSimpleName(),concurrentTasks.get(i).toString());
      Thread.currentThread().interrupt();
      return;
    }
catch (    ExecutionException e) {
      DOMAIN_DEPLOYMENT_LOGGER.caughtExceptionWaitingForTask(ConcurrentUpdateTask.class.getSimpleName(),e.getClass().getSimpleName(),concurrentTasks.get(i).toString());
    }
  }
}
