{
  ROOT_LOGGER.debugf("started DirectConnectionFactoryActivatorService %s",context.getController().getName());
  String cfInterface=null;
  try {
    Connector cmd=mdr.getValue().getResourceAdapter(raId);
    ResourceAdapter ra=cmd.getResourceadapter();
    if (ra.getOutboundResourceadapter() != null) {
      for (      ConnectionDefinition cd : ra.getOutboundResourceadapter().getConnectionDefinitions()) {
        if (cd.getConnectionFactoryInterface().getValue().equals(interfaceName))         cfInterface=cd.getConnectionFactoryInterface().getValue();
      }
    }
    if (cfInterface == null || !cfInterface.equals(interfaceName)) {
      throw ConnectorLogger.ROOT_LOGGER.invalidConnectionFactory(cfInterface,resourceAdapter,jndiName);
    }
    Map<String,String> raConfigProperties=new HashMap<String,String>();
    Map<String,String> mcfConfigProperties=new HashMap<String,String>();
    String securitySetting=null;
    String securitySettingDomain=null;
    if (properties != null) {
      for (      Map.Entry<String,String> prop : properties.entrySet()) {
        String key=prop.getKey();
        String value=prop.getValue();
        if (key.startsWith("ironjacamar.security")) {
          securitySetting=value;
        }
 else         if (key.startsWith("ironjacamar.security.domain")) {
          securitySettingDomain=value;
        }
 else {
          if (key.startsWith("ra.")) {
            raConfigProperties.put(key.substring(3),value);
          }
 else           if (key.startsWith("mcf.")) {
            mcfConfigProperties.put(key.substring(4),value);
          }
 else {
            mcfConfigProperties.put(key,value);
          }
        }
      }
    }
    String mcfClass=null;
    if (ra.getOutboundResourceadapter() != null) {
      for (      ConnectionDefinition cd : ra.getOutboundResourceadapter().getConnectionDefinitions()) {
        if (cd.getConnectionFactoryInterface().getValue().equals(cfInterface))         mcfClass=cd.getManagedConnectionFactoryClass().getValue();
      }
    }
    Security security=null;
    if (securitySetting != null) {
      if ("".equals(securitySetting)) {
        security=new SecurityImpl(null,null,false);
      }
 else       if ("application".equals(securitySetting)) {
        security=new SecurityImpl(null,null,true);
      }
 else       if ("domain".equals(securitySetting) && securitySettingDomain != null) {
        security=new SecurityImpl(securitySettingDomain,null,false);
      }
 else       if ("domain-and-application".equals(securitySetting) && securitySettingDomain != null) {
        security=new SecurityImpl(null,securitySettingDomain,false);
      }
    }
    if (security == null) {
      SUBSYSTEM_RA_LOGGER.noSecurityDefined(jndiName);
    }
    Pool pool=null;
    Boolean isXA=Boolean.FALSE;
    if (transactionSupport == TransactionSupport.TransactionSupportLevel.XATransaction) {
      pool=new XaPoolImpl(minPoolSize < 0 ? Defaults.MIN_POOL_SIZE : minPoolSize,Defaults.INITIAL_POOL_SIZE,maxPoolSize < 0 ? Defaults.MAX_POOL_SIZE : maxPoolSize,Defaults.PREFILL,Defaults.USE_STRICT_MIN,Defaults.FLUSH_STRATEGY,null,Defaults.IS_SAME_RM_OVERRIDE,Defaults.INTERLEAVING,Defaults.PAD_XID,Defaults.WRAP_XA_RESOURCE,Defaults.NO_TX_SEPARATE_POOL);
      isXA=Boolean.TRUE;
    }
 else {
      pool=new PoolImpl(minPoolSize < 0 ? Defaults.MIN_POOL_SIZE : minPoolSize,Defaults.INITIAL_POOL_SIZE,maxPoolSize < 0 ? Defaults.MAX_POOL_SIZE : maxPoolSize,Defaults.PREFILL,Defaults.USE_STRICT_MIN,Defaults.FLUSH_STRATEGY,null);
    }
    TransactionSupportEnum transactionSupportValue=TransactionSupportEnum.NoTransaction;
    if (transactionSupport == TransactionSupport.TransactionSupportLevel.XATransaction) {
      transactionSupportValue=TransactionSupportEnum.XATransaction;
    }
 else     if (transactionSupport == TransactionSupport.TransactionSupportLevel.LocalTransaction) {
      transactionSupportValue=TransactionSupportEnum.LocalTransaction;
    }
    org.jboss.jca.common.api.metadata.resourceadapter.ConnectionDefinition cd=new org.jboss.jca.common.metadata.resourceadapter.ConnectionDefinitionImpl(mcfConfigProperties,mcfClass,jndiName,poolName(cfInterface),Boolean.TRUE,Boolean.TRUE,Boolean.TRUE,Boolean.TRUE,Boolean.TRUE,Defaults.CONNECTABLE,Defaults.TRACKING,pool,null,null,security,null,isXA);
    Activation activation=new ActivationImpl(null,null,transactionSupportValue,Collections.singletonList(cd),Collections.<AdminObject>emptyList(),raConfigProperties,Collections.<String>emptyList(),null,null);
    String serviceName=jndiName;
    serviceName=serviceName.replace(':','_');
    serviceName=serviceName.replace('/','_');
    ResourceAdapterActivatorService activator=new ResourceAdapterActivatorService(cmd,activation,module.getClassLoader(),serviceName);
    activator.setCreateBinderService(false);
    activator.setBindInfo(bindInfo);
    ServiceTarget serviceTarget=context.getChildTarget();
    ServiceName activatorServiceName=ConnectorServices.RESOURCE_ADAPTER_ACTIVATOR_SERVICE.append(serviceName);
    ServiceBuilder connectionFactoryServiceBuilder=serviceTarget.addService(activatorServiceName,activator).addDependency(ConnectorServices.IRONJACAMAR_MDR,AS7MetadataRepository.class,activator.getMdrInjector()).addDependency(ConnectorServices.RA_REPOSITORY_SERVICE,ResourceAdapterRepository.class,activator.getRaRepositoryInjector()).addDependency(ConnectorServices.MANAGEMENT_REPOSITORY_SERVICE,ManagementRepository.class,activator.getManagementRepositoryInjector()).addDependency(ConnectorServices.RESOURCE_ADAPTER_REGISTRY_SERVICE,ResourceAdapterDeploymentRegistry.class,activator.getRegistryInjector()).addDependency(ConnectorServices.CONNECTOR_CONFIG_SERVICE,JcaSubsystemConfiguration.class,activator.getConfigInjector()).addDependency(SubjectFactoryService.SERVICE_NAME,SubjectFactory.class,activator.getSubjectFactoryInjector()).addDependency(ConnectorServices.CCM_SERVICE,CachedConnectionManager.class,activator.getCcmInjector()).addDependency(NamingService.SERVICE_NAME).addDependency(ConnectorServices.TRANSACTION_INTEGRATION_SERVICE,TransactionIntegration.class,activator.getTxIntegrationInjector()).addDependency(TxnServices.JBOSS_TXN_TRANSACTION_MANAGER).addDependency(ConnectorServices.BOOTSTRAP_CONTEXT_SERVICE.append("default"));
    connectionFactoryServiceBuilder.setInitialMode(ServiceController.Mode.ACTIVE).install();
  }
 catch (  Exception e) {
    throw new StartException(e);
  }
}
