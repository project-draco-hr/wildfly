{
  super(componentConfiguration,ejbJarConfiguration);
  final EntityBeanComponentDescription description=EntityBeanComponentDescription.class.cast(componentConfiguration.getComponentDescription());
  final EntityBeanMetaData beanMetaData=EntityBeanMetaData.class.cast(description.getDescriptorData());
  final ClassLoader classLoader=componentConfiguration.getComponentClass().getClassLoader();
  homeClass=(Class<EJBHome>)load(classLoader,beanMetaData.getHome());
  localHomeClass=(Class<EJBLocalHome>)load(classLoader,beanMetaData.getLocalHome());
  localClass=(Class<EJBLocalObject>)load(classLoader,beanMetaData.getLocal());
  remoteClass=(Class<EJBObject>)load(classLoader,beanMetaData.getRemote());
  primaryKeyClass=(Class<Object>)load(classLoader,beanMetaData.getPrimKeyClass());
  final InterceptorFactory tcclInterceptorFactory=new ImmediateInterceptorFactory(new TCCLInterceptor(componentConfiguration.getModuleClassLoder()));
  final InterceptorFactory namespaceContextInterceptorFactory=componentConfiguration.getNamespaceContextInterceptorFactory();
  Method ejbStore=null;
  Method ejbLoad=null;
  Method ejbActivate=null;
  Method ejbPassivate=null;
  for (  final Method method : componentConfiguration.getDefinedComponentMethods()) {
    if (method.getName().equals("ejbStore") && method.getParameterTypes().length == 0) {
      ejbStore=method;
    }
 else     if (method.getName().equals("ejbLoad") && method.getParameterTypes().length == 0) {
      ejbLoad=method;
    }
 else     if (method.getName().equals("ejbActivate") && method.getParameterTypes().length == 0) {
      ejbActivate=method;
    }
 else     if (method.getName().equals("ejbPassivate") && method.getParameterTypes().length == 0) {
      ejbPassivate=method;
    }
  }
  if (ejbStore == null) {
    throw EjbMessages.MESSAGES.couldNotFindEntityBeanMethod("ejbStore");
  }
 else   if (ejbLoad == null) {
    throw EjbMessages.MESSAGES.couldNotFindEntityBeanMethod("ejbLoad");
  }
 else   if (ejbActivate == null) {
    throw EjbMessages.MESSAGES.couldNotFindEntityBeanMethod("ejbActivate");
  }
 else   if (ejbPassivate == null) {
    throw EjbMessages.MESSAGES.couldNotFindEntityBeanMethod("ejbPassivate");
  }
  this.ejbActivateMethod=ejbActivate;
  this.ejbLoadMethod=ejbLoad;
  this.ejbStoreMethod=ejbStore;
  this.ejbPassivateMethod=ejbPassivate;
  this.ejbActivate=Interceptors.getChainedInterceptorFactory(tcclInterceptorFactory,namespaceContextInterceptorFactory,CurrentInvocationContextInterceptor.FACTORY,invokeMethodOnTarget(ejbActivate));
  this.ejbLoad=Interceptors.getChainedInterceptorFactory(tcclInterceptorFactory,namespaceContextInterceptorFactory,CurrentInvocationContextInterceptor.FACTORY,invokeMethodOnTarget(ejbLoad));
  this.ejbStore=Interceptors.getChainedInterceptorFactory(tcclInterceptorFactory,namespaceContextInterceptorFactory,CurrentInvocationContextInterceptor.FACTORY,invokeMethodOnTarget(ejbStore));
  this.ejbPassivate=Interceptors.getChainedInterceptorFactory(tcclInterceptorFactory,namespaceContextInterceptorFactory,CurrentInvocationContextInterceptor.FACTORY,invokeMethodOnTarget(ejbPassivate));
}
