{
  boolean showResolvedModel=false;
  boolean showExpressionModel=false;
  boolean connectorAdd=false;
  ParseUtils.requireNoAttributes(reader);
  list.add(createAddOperation());
  while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
    final Element element=Element.forName(reader.getLocalName());
switch (element) {
case EXPOSE_RESOLVED_MODEL:
      if (showResolvedModel) {
        throw ParseUtils.duplicateNamedElement(reader,Element.EXPOSE_RESOLVED_MODEL.getLocalName());
      }
    showResolvedModel=true;
  list.add(parseShowModelElement(reader,CommonAttributes.RESOLVED));
break;
case EXPOSE_EXPRESSION_MODEL:
if (showExpressionModel) {
throw ParseUtils.duplicateNamedElement(reader,Element.EXPOSE_EXPRESSION_MODEL.getLocalName());
}
showExpressionModel=true;
list.add(parseShowModelElement(reader,CommonAttributes.EXPRESSION));
break;
case REMOTING_CONNECTOR:
if (connectorAdd) {
throw ParseUtils.duplicateNamedElement(reader,Element.REMOTING_CONNECTOR.getLocalName());
}
connectorAdd=true;
list.add(parseRemoteConnector(reader));
break;
default :
{
throw ParseUtils.unexpectedElement(reader);
}
}
}
}
