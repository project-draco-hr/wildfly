{
  Namespace schemaVer=Namespace.CURRENT;
  final ModelNode node=context.getModelNode();
  context.startSubsystemElement(schemaVer.getUriString(),false);
  if (node.hasDefined(CommonAttributes.EXPOSE_MODEL)) {
    ModelNode showModel=node.get(CommonAttributes.EXPOSE_MODEL);
    if (showModel.hasDefined(CommonAttributes.RESOLVED)) {
      writer.writeEmptyElement(Element.EXPOSE_RESOLVED_MODEL.getLocalName());
      ExposeModelResourceResolved.DOMAIN_NAME.marshallAsAttribute(showModel.get(CommonAttributes.RESOLVED),false,writer);
      ExposeModelResourceResolved.PROPER_PROPERTY_FORMAT.marshallAsAttribute(showModel.get(CommonAttributes.RESOLVED),false,writer);
    }
    if (showModel.hasDefined(CommonAttributes.EXPRESSION)) {
      writer.writeEmptyElement(Element.EXPOSE_EXPRESSION_MODEL.getLocalName());
      ExposeModelResourceExpression.DOMAIN_NAME.marshallAsAttribute(showModel.get(CommonAttributes.EXPRESSION),false,writer);
    }
  }
  if (node.hasDefined(CommonAttributes.REMOTING_CONNECTOR)) {
    writer.writeStartElement(Element.REMOTING_CONNECTOR.getLocalName());
    final ModelNode resourceModel=node.get(CommonAttributes.REMOTING_CONNECTOR).get(CommonAttributes.JMX);
    RemotingConnectorResource.USE_MANAGEMENT_ENDPOINT.marshallAsAttribute(resourceModel,writer);
    writer.writeEndElement();
  }
  if (node.hasDefined(JmxAuditLoggerResourceDefinition.PATH_ELEMENT.getKey()) && node.get(JmxAuditLoggerResourceDefinition.PATH_ELEMENT.getKey()).hasDefined(JmxAuditLoggerResourceDefinition.PATH_ELEMENT.getValue())) {
    ModelNode auditLog=node.get(JmxAuditLoggerResourceDefinition.PATH_ELEMENT.getKey(),JmxAuditLoggerResourceDefinition.PATH_ELEMENT.getValue());
    writer.writeStartElement(Element.AUDIT_LOG.getLocalName());
    JmxAuditLoggerResourceDefinition.LOG_BOOT.marshallAsAttribute(auditLog,writer);
    JmxAuditLoggerResourceDefinition.LOG_READ_ONLY.marshallAsAttribute(auditLog,writer);
    JmxAuditLoggerResourceDefinition.ENABLED.marshallAsAttribute(auditLog,writer);
    if (auditLog.hasDefined(HANDLER) && auditLog.get(HANDLER).keys().size() > 0) {
      writer.writeStartElement(CommonAttributes.HANDLERS);
      for (      String key : auditLog.get(HANDLER).keys()) {
        writer.writeEmptyElement(CommonAttributes.HANDLER);
        writer.writeAttribute(CommonAttributes.NAME,key);
      }
      writer.writeEndElement();
    }
    writer.writeEndElement();
  }
  if (node.hasDefined(JMXSubsystemRootResource.CORE_MBEAN_SENSITIVITY.getName())) {
    writer.writeStartElement(Element.SENSITIVITY.getLocalName());
    JMXSubsystemRootResource.CORE_MBEAN_SENSITIVITY.marshallAsAttribute(node,writer);
    writer.writeEndElement();
  }
  writer.writeEndElement();
}
