{
  ModelNode op=createOperation(ADD,JmxAuditLoggerResourceDefinition.PATH_ELEMENT.getKey(),JmxAuditLoggerResourceDefinition.PATH_ELEMENT.getValue());
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    final String value=reader.getAttributeValue(i);
    final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case LOG_BOOT:
{
        JmxAuditLoggerResourceDefinition.LOG_BOOT.parseAndSetParameter(value,op,reader);
        break;
      }
case LOG_READ_ONLY:
{
      JmxAuditLoggerResourceDefinition.LOG_READ_ONLY.parseAndSetParameter(value,op,reader);
      break;
    }
case ENABLED:
{
    JmxAuditLoggerResourceDefinition.ENABLED.parseAndSetParameter(value,op,reader);
    break;
  }
default :
{
  throw ParseUtils.unexpectedAttribute(reader,i);
}
}
}
list.add(op);
while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
final Element element=Element.forName(reader.getLocalName());
switch (element) {
case HANDLERS:
parseAuditLogHandlers(reader,list);
break;
default :
{
throw ParseUtils.unexpectedElement(reader);
}
}
}
}
