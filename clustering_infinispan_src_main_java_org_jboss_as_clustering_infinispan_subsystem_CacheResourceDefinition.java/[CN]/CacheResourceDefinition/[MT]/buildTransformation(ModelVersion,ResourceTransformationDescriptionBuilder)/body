{
  if (InfinispanModel.VERSION_3_0_0.requiresTransformation(version)) {
    AttributeConverter batchingConverter=new AttributeConverter(){
      @Override public void convertOperationParameter(      PathAddress address,      String name,      ModelNode value,      ModelNode operation,      TransformationContext context){
      }
      @Override public void convertResourceAttribute(      PathAddress address,      String name,      ModelNode value,      TransformationContext context){
        PathAddress transactionAddress=address.append(TransactionResourceDefinition.PATH);
        try {
          ModelNode transaction=context.readResourceFromRoot(transactionAddress).getModel();
          if (transaction.hasDefined(TransactionResourceDefinition.MODE.getName())) {
            ModelNode mode=transaction.get(TransactionResourceDefinition.MODE.getName());
            if ((mode.getType() == ModelType.STRING) && (TransactionMode.valueOf(mode.asString()) == TransactionMode.BATCH)) {
              value.set(true);
            }
          }
        }
 catch (        NoSuchElementException e) {
        }
      }
    }
;
    builder.getAttributeBuilder().setValueConverter(batchingConverter,BATCHING);
  }
  if (InfinispanModel.VERSION_2_0_0.requiresTransformation(version)) {
    builder.getAttributeBuilder().setDiscard(new DiscardAttributeChecker.DiscardAttributeValueChecker(false,false,new ModelNode(true)),STATISTICS_ENABLED).addRejectCheck(RejectAttributeChecker.UNDEFINED,STATISTICS_ENABLED).addRejectCheck(RejectAttributeChecker.SIMPLE_EXPRESSIONS,STATISTICS_ENABLED).addRejectCheck(new RejectAttributeChecker.SimpleRejectAttributeChecker(new ModelNode(false)),STATISTICS_ENABLED);
  }
  if (InfinispanModel.VERSION_1_4_0.requiresTransformation(version)) {
    builder.getAttributeBuilder().addRejectCheck(RejectAttributeChecker.SIMPLE_EXPRESSIONS,BATCHING,INDEXING,JNDI_NAME,MODULE,START).setDiscard(DiscardAttributeChecker.UNDEFINED,INDEXING_PROPERTIES).addRejectCheck(RejectAttributeChecker.DEFINED,INDEXING_PROPERTIES);
  }
  LockingResourceDefinition.buildTransformation(version,builder);
  EvictionResourceDefinition.buildTransformation(version,builder);
  ExpirationResourceDefinition.buildTransformation(version,builder);
  TransactionResourceDefinition.buildTransformation(version,builder);
  FileStoreResourceDefinition.buildTransformation(version,builder);
  BinaryKeyedJDBCStoreResourceDefinition.buildTransformation(version,builder);
  MixedKeyedJDBCStoreResourceDefinition.buildTransformation(version,builder);
  StringKeyedJDBCStoreResourceDefinition.buildTransformation(version,builder);
  RemoteStoreResourceDefinition.buildTransformation(version,builder);
  CustomStoreResourceDefinition.buildTransformation(version,builder);
}
