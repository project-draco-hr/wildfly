{
  final PathAddress address=PathAddress.pathAddress(operation.get(OP_ADDR));
  final PathAddress parent=address.subAddress(0,address.size() - 1);
  String name=address.getLastElement().getValue();
  String bindingRef=AbstractListenerResourceDefinition.SOCKET_BINDING.resolveModelAttribute(context,model).asString();
  String workerName=AbstractListenerResourceDefinition.WORKER.resolveModelAttribute(context,model).asString();
  String bufferPoolName=AbstractListenerResourceDefinition.BUFFER_POOL.resolveModelAttribute(context,model).asString();
  boolean enabled=AbstractListenerResourceDefinition.ENABLED.resolveModelAttribute(context,model).asBoolean();
  String serverName=parent.getLastElement().getValue();
  if (enabled) {
    final AbstractListenerService<? extends AbstractListenerService> service=createService(name,context,model);
    final ServiceBuilder<? extends AbstractListenerService> serviceBuilder=context.getServiceTarget().addService(constructServiceName(name),service);
    serviceBuilder.addDependency(UndertowService.WORKER.append(workerName),XnioWorker.class,service.getWorker()).addDependency(SocketBinding.JBOSS_BINDING_NAME.append(bindingRef),SocketBinding.class,service.getBinding()).addDependency(UndertowService.BUFFER_POOL.append(bufferPoolName),Pool.class,service.getBufferPool()).addDependency(UndertowService.SERVER.append(serverName),Server.class,service.getServerService());
    configureAdditionalDependencies(context,serviceBuilder,model,service);
    final ServiceController<? extends AbstractListenerService> serviceController=serviceBuilder.install();
    if (newControllers != null) {
      newControllers.add(serviceController);
    }
  }
}
