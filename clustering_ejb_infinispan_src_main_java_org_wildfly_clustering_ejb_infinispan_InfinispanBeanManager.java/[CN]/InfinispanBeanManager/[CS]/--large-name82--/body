{
  this.beanName=beanName;
  this.groupFactory=groupConfiguration.getFactory();
  this.beanFactory=beanConfiguration.getFactory();
  this.groupCache=groupConfiguration.getCache();
  this.beanCache=beanConfiguration.getCache();
  final Address address=this.groupCache.getCacheManager().getAddress();
  final KeyGenerator<G> groupKeyGenerator=new KeyGenerator<G>(){
    @Override public G getKey(){
      return groupConfiguration.getIdentifierFactory().createIdentifier();
    }
  }
;
  final KeyAffinityService<G> groupAffinityService=affinityFactory.createService(this.groupCache,groupKeyGenerator);
  this.groupIdentifierFactory=new IdentifierFactory<G>(){
    @Override public G createIdentifier(){
      return groupAffinityService.getKeyForAddress(address);
    }
  }
;
  this.affinityServices.add(groupAffinityService);
  final KeyGenerator<BeanKey<I>> beanKeyGenerator=new KeyGenerator<BeanKey<I>>(){
    @Override public BeanKey<I> getKey(){
      return beanConfiguration.getFactory().createKey(beanConfiguration.getIdentifierFactory().createIdentifier());
    }
  }
;
  final KeyAffinityService<BeanKey<I>> beanAffinityService=affinityFactory.createService(this.beanCache,beanKeyGenerator);
  this.beanIdentifierFactory=new IdentifierFactory<I>(){
    @Override public I createIdentifier(){
      return beanAffinityService.getKeyForAddress(address).getId();
    }
  }
;
  this.affinityServices.add(beanAffinityService);
  this.registry=registry;
  this.nodeFactory=nodeFactory;
  this.expiration=expiration;
  this.passivation=passivation;
}
