{
  this.beanName=configuration.getBeanName();
  this.groupFactory=groupConfiguration.getFactory();
  this.beanFactory=beanConfiguration.getFactory();
  this.groupCache=groupConfiguration.getCache();
  this.beanCache=beanConfiguration.getCache();
  this.batcher=new InfinispanBatcher(this.groupCache);
  final Address address=this.groupCache.getCacheManager().getAddress();
  final KeyGenerator<G> groupKeyGenerator=new KeyGenerator<G>(){
    @Override public G getKey(){
      return groupConfiguration.getIdentifierFactory().createIdentifier();
    }
  }
;
  KeyAffinityServiceFactory affinityFactory=configuration.getAffinityFactory();
  final KeyAffinityService<G> groupAffinity=affinityFactory.createService(this.groupCache,groupKeyGenerator);
  this.groupIdentifierFactory=new IdentifierFactory<G>(){
    @Override public G createIdentifier(){
      return groupAffinity.getKeyForAddress(address);
    }
  }
;
  this.affinityServices.add(groupAffinity);
  final KeyGenerator<BeanKey<I>> beanKeyGenerator=new KeyGenerator<BeanKey<I>>(){
    @Override public BeanKey<I> getKey(){
      return beanConfiguration.getFactory().createKey(beanConfiguration.getIdentifierFactory().createIdentifier());
    }
  }
;
  final KeyAffinityService<BeanKey<I>> beanAffinity=affinityFactory.createService(this.beanCache,beanKeyGenerator);
  this.beanIdentifierFactory=new IdentifierFactory<I>(){
    @Override public I createIdentifier(){
      return beanAffinity.getKeyForAddress(address).getId();
    }
  }
;
  this.affinityServices.add(beanAffinity);
  this.registry=configuration.getRegistry();
  this.nodeFactory=configuration.getNodeFactory();
  this.dispatcherFactory=configuration.getCommandDispatcherFactory();
  this.expiration=configuration.getExpirationConfiguration();
  this.passivation=configuration.getPassivationConfiguration();
}
