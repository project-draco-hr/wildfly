{
  this.executor=new StampedLockServiceExecutor();
  this.affinity.start();
  Time timeout=this.expiration.getTimeout();
  Scheduler<I> noopScheduler=new Scheduler<I>(){
    @Override public void schedule(    I id){
    }
    @Override public void cancel(    I id){
    }
    @Override public void cancel(    Locality locality){
    }
    @Override public void close(){
    }
  }
;
  Scheduler<I> beanScheduler=(timeout != null) && (timeout.getValue() >= 0) ? new BeanExpirationScheduler<>(this.batcher,new ExpiredBeanRemover<>(this.beanFactory),this.expiration) : noopScheduler;
  Scheduler<I> groupScheduler=this.passivation.isEvictionAllowed() ? new BeanGroupEvictionScheduler<>(this.beanName + ".eviction",this.batcher,this.groupFactory,this.dispatcherFactory,this.passivation) : noopScheduler;
  this.schedulerContext=new SchedulerContext<I>(){
    @Override public void close(){
      groupScheduler.close();
      beanScheduler.close();
    }
    @Override public Scheduler<I> getBeanScheduler(){
      return beanScheduler;
    }
    @Override public Scheduler<I> getBeanGroupScheduler(){
      return groupScheduler;
    }
  }
;
  this.dispatcher=this.dispatcherFactory.createCommandDispatcher(this.beanName + ".schedulers",this.schedulerContext);
  this.cache.addListener(this,this.filter,null);
  this.schedule(new SimpleLocality(false),new ConsistentHashLocality(this.cache));
}
