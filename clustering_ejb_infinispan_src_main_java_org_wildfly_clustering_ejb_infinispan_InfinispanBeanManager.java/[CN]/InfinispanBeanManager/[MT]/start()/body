{
  for (  KeyAffinityService<?> service : this.affinityServices) {
    service.start();
  }
  final List<Scheduler<Bean<G,I,T>>> schedulers=new ArrayList<>(2);
  Time timeout=this.expiration.getTimeout();
  if ((timeout != null) && (timeout.getValue() >= 0)) {
    schedulers.add(new BeanExpirationScheduler<G,I,T>(this,new ExpiredBeanRemover<>(this.beanFactory),this.expiration));
  }
  if (this.passivation.isEvictionAllowed()) {
    schedulers.add(new BeanEvictionScheduler<G,I,T>(this.beanName + ".eviction",this,this.beanFactory,this.dispatcherFactory,this.passivation));
  }
  this.schedulerContext=new SchedulerContext<G,I,T>(){
    @Override public void schedule(    Bean<G,I,T> bean){
      for (      Scheduler<Bean<G,I,T>> scheduler : schedulers) {
        scheduler.schedule(bean);
      }
    }
    @Override public void cancel(    Bean<G,I,T> bean){
      for (      Scheduler<Bean<G,I,T>> scheduler : schedulers) {
        scheduler.cancel(bean);
      }
    }
    @Override public void close(){
      for (      Scheduler<?> scheduler : schedulers) {
        scheduler.close();
      }
    }
  }
;
  this.dispatcher=this.dispatcherFactory.createCommandDispatcher(this.beanName + ".schedulers",this.schedulerContext);
  this.beanCache.addListener(this,this);
}
