{
  try {
    ModelNode param=operation.get(SCHEMA_LOCATION);
    String failure=typeValidator.validateParameter(SCHEMA_LOCATION,param);
    if (failure != null) {
      throw new OperationFailedException(new ModelNode().set(failure));
    }
    ModelNode locations=context.getSubModel().get(SCHEMA_LOCATIONS);
    Property toRemove=null;
    ModelNode newList=new ModelNode().setEmptyList();
    String uri=param.asString();
    if (locations.isDefined()) {
      for (      Property location : locations.asPropertyList()) {
        if (uri.equals(location.getName())) {
          toRemove=location;
        }
 else {
          newList.add(location.getName(),location.getValue());
        }
      }
    }
    if (toRemove != null) {
      locations.set(newList);
      resultHandler.handleResultComplete();
      ModelNode compensating=SchemaLocationAddHandler.getAddSchemaLocationOperation(operation.get(OP_ADDR),toRemove);
      return new BasicOperationResult(compensating);
    }
 else {
      throw new OperationFailedException(new ModelNode().set("No schema location with URI " + uri + "found"));
    }
  }
 catch (  Exception e) {
    throw new OperationFailedException(new ModelNode().set(e.getLocalizedMessage()));
  }
}
