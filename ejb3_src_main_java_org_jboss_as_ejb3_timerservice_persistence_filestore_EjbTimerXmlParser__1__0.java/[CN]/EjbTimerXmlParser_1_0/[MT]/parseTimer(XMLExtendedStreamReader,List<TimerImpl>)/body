{
  LoadableElements loadableElements=new LoadableElements();
  TimerImpl.Builder builder=TimerImpl.builder();
  final Set<String> required=new HashSet<>(Arrays.asList(new String[]{TIMED_OBJECT_ID,TIMER_ID,INITIAL_DATE,REPEAT_INTERVAL,NEXT_DATE,TIMER_STATE}));
  for (int i=0; i < reader.getAttributeCount(); ++i) {
    String attr=reader.getAttributeValue(i);
    String attrName=reader.getAttributeLocalName(i);
    required.remove(attrName);
    boolean handled=handleCommonAttributes(builder,reader,i);
    if (!handled) {
switch (attrName) {
case REPEAT_INTERVAL:
        builder.setRepeatInterval(Long.parseLong(attr));
      break;
default :
    throw ParseUtils.unexpectedAttribute(reader,i);
}
}
}
if (!required.isEmpty()) {
throw ParseUtils.missingRequired(reader,required);
}
while (reader.hasNext()) {
switch (reader.nextTag()) {
case END_ELEMENT:
{
  try {
    if (loadableElements.info != null) {
      builder.setInfo((Serializable)deserialize(loadableElements.info));
    }
    if (loadableElements.primaryKey != null) {
      builder.setPrimaryKey(deserialize(loadableElements.primaryKey));
    }
    timers.add(builder.build(timerService));
  }
 catch (  Exception e) {
    EjbLogger.ROOT_LOGGER.timerReinstatementFailed(builder.getTimedObjectId(),builder.getId(),e);
  }
  return;
}
case START_ELEMENT:
{
boolean handled=handleCommonElements(reader,loadableElements);
if (!handled) {
  throw ParseUtils.unexpectedElement(reader);
}
break;
}
}
}
}
