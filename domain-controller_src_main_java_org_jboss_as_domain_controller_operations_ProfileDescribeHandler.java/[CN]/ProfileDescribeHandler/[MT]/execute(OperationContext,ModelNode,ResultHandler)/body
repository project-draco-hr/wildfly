{
  final PathAddress address=PathAddress.pathAddress(operation.require(OP_ADDR));
  final ModelNode result=new ModelNode();
  final ModelNode profile=context.getSubModel();
  result.setEmptyList();
  if (profile.hasDefined(INCLUDES)) {
    for (    ModelNode include : profile.get(INCLUDES).asList()) {
      final ModelNode includeAddress=address.subAddress(0,address.size() - 1).append(PathElement.pathElement(PROFILE,include.asString())).toModelNode();
      final ModelNode newOp=operation.clone();
      newOp.get(OP_ADDR).set(includeAddress);
      final ModelNode newOpResult=context.getController().execute(newOp);
      if (FAILED.equals(newOpResult.get(OUTCOME).asString())) {
        throw new OperationFailedException(newOpResult.get(FAILURE_DESCRIPTION));
      }
      for (      ModelNode op : newOpResult.require(RESULT).asList()) {
        result.add(op);
      }
    }
  }
  if (profile.hasDefined(SUBSYSTEM)) {
    for (    String subsystemName : profile.get(SUBSYSTEM).keys()) {
      final ModelNode subsystemAddress=address.append(PathElement.pathElement(SUBSYSTEM,subsystemName)).toModelNode();
      final ModelNode newOp=operation.clone();
      newOp.get(OP_ADDR).set(subsystemAddress);
      final ModelNode newOpResult=context.getController().execute(newOp);
      if (FAILED.equals(newOpResult.get(OUTCOME).asString())) {
        throw new OperationFailedException(newOpResult.get(FAILURE_DESCRIPTION));
      }
      for (      ModelNode op : newOpResult.require(RESULT).asList()) {
        result.add(op);
      }
    }
  }
  resultHandler.handleResultFragment(Util.NO_LOCATION,result);
  resultHandler.handleResultComplete();
  return new BasicOperationResult();
}
