{
  final String handlerType=operation.require(HANDLER_TYPE).asString();
  final LoggerHandlerType type=LoggerHandlerType.valueOf(handlerType);
switch (type) {
case ASYNC_HANDLER:
{
      return NewAsyncHandlerAdd.INSTANCE.execute(context,operation,resultHandler);
    }
case CONSOLE_HANDLER:
{
    return NewConsoleHandlerAdd.INSTANCE.execute(context,operation,resultHandler);
  }
case FILE_HANDLER:
{
  return NewFileHandlerAdd.INSTANCE.execute(context,operation,resultHandler);
}
case PERIODIC_ROTATING_FILE_HANDLER:
{
return NewPeriodicFileHandlerAdd.INSTANCE.execute(context,operation,resultHandler);
}
case SIZE_ROTATING_FILE_HANDLER:
{
return NewSizePeriodicFileHandlerAdd.INSTANCE.execute(context,operation,resultHandler);
}
default :
{
resultHandler.handleFailed(new ModelNode());
}
}
return Cancellable.NULL;
}
