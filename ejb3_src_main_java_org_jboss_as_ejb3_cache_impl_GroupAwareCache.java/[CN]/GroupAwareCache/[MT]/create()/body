{
  boolean outer=false;
  GroupCreationContext<K,V,G,M,GroupAwareBackingCache<K,V,G,M>> groupContext=GroupCreationContext.getGroupCreationContext();
  if (groupContext == null) {
    groupContext=GroupCreationContext.startGroupCreationContext(this.strictGroups);
    outer=true;
  }
  List<Map.Entry<V,GroupAwareBackingCache<K,V,G,M>>> contextEntries=groupContext.getEntries();
  try {
    V cacheItem=this.groupedCache.create().getUnderlyingItem();
    contextEntries.add(new AbstractMap.SimpleImmutableEntry<V,GroupAwareBackingCache<K,V,G,M>>(cacheItem,groupedCache));
    if (outer) {
      if (contextEntries.size() > 1) {
        SerializationGroup<K,V,G> group=groupedCache.createGroup();
        for (        Map.Entry<V,GroupAwareBackingCache<K,V,G,M>> entry : contextEntries) {
          V object=entry.getKey();
          GroupAwareBackingCache<K,V,G,M> pairCache=entry.getValue();
          pairCache.setGroup(object,group);
        }
      }
    }
    return cacheItem;
  }
 catch (  RuntimeException e) {
    if (outer) {
      for (      Map.Entry<V,GroupAwareBackingCache<K,V,G,M>> entry : contextEntries) {
        V item=entry.getKey();
        K id=item.getId();
        try {
          entry.getValue().remove(id);
        }
 catch (        Exception toLog) {
          EjbLogger.EJB3_LOGGER.cacheRemoveFailed(id);
        }
      }
    }
    throw e;
  }
 finally {
    if (outer) {
      GroupCreationContext.clearGroupCreationContext();
    }
  }
}
