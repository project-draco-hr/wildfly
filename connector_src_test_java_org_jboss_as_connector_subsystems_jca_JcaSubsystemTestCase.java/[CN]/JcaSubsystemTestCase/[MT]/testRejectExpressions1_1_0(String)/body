{
  KernelServicesBuilder builder=createKernelServicesBuilder(createAdditionalInitialization());
  ModelVersion version_1_1_0=ModelVersion.create(1,1,0);
  builder.createLegacyKernelServicesBuilder(null,version_1_1_0).addMavenResourceURL("org.jboss.as:jboss-as-connector:" + mavenVersion).addMavenResourceURL("org.jboss.as:jboss-as-threads:" + mavenVersion).setExtensionClassName("org.jboss.as.connector.subsystems.jca.JcaExtension");
  KernelServices mainServices=builder.build();
  KernelServices legacyServices=mainServices.getLegacyServices(version_1_1_0);
  Assert.assertNotNull(legacyServices);
  Assert.assertTrue("main services did not boot",mainServices.isSuccessfulBoot());
  Assert.assertTrue(legacyServices.isSuccessfulBoot());
  List<ModelNode> xmlOps=builder.parseXmlResource("jca-full-expression.xml");
  ModelTestUtils.checkFailedTransformedBootOperations(mainServices,version_1_1_0,xmlOps,new FailedOperationTransformationConfig().addFailedAttribute(PathAddress.pathAddress(JcaSubsystemRootDefinition.PATH_SUBSYSTEM,JcaWorkManagerDefinition.PATH_WORK_MANAGER,PathElement.pathElement(WORKMANAGER_SHORT_RUNNING)),new FailedOperationTransformationConfig.RejectExpressionsConfig(PoolAttributeDefinitions.ALLOW_CORE_TIMEOUT,PoolAttributeDefinitions.KEEPALIVE_TIME)).addFailedAttribute(PathAddress.pathAddress(JcaSubsystemRootDefinition.PATH_SUBSYSTEM,JcaWorkManagerDefinition.PATH_WORK_MANAGER,PathElement.pathElement(WORKMANAGER_LONG_RUNNING)),new FailedOperationTransformationConfig.RejectExpressionsConfig(PoolAttributeDefinitions.ALLOW_CORE_TIMEOUT,PoolAttributeDefinitions.KEEPALIVE_TIME)));
}
