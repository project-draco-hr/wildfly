{
  final int argsLength=args.length;
  String serverConfig=null;
  for (int i=0; i < argsLength; i++) {
    final String arg=args[i];
    try {
      if (CommandLineConstants.VERSION.equals(arg) || CommandLineConstants.SHORT_VERSION.equals(arg) || CommandLineConstants.OLD_VERSION.equals(arg)) {
        System.out.println("JBoss Application Server " + getVersionString());
        return null;
      }
 else       if (CommandLineConstants.HELP.equals(arg) || CommandLineConstants.SHORT_HELP.equals(arg) || CommandLineConstants.OLD_HELP.equals(arg)) {
        usage();
        return null;
      }
 else       if (CommandLineConstants.SERVER_CONFIG.equals(arg) || CommandLineConstants.OLD_SERVER_CONFIG.equals(arg)) {
        serverConfig=args[++i];
      }
 else       if (arg.startsWith(CommandLineConstants.SERVER_CONFIG)) {
        serverConfig=parseValue(arg,CommandLineConstants.SERVER_CONFIG);
        if (serverConfig == null) {
          return null;
        }
      }
 else       if (arg.startsWith(CommandLineConstants.OLD_SERVER_CONFIG)) {
        serverConfig=parseValue(arg,CommandLineConstants.OLD_SERVER_CONFIG);
        if (serverConfig == null) {
          return null;
        }
      }
 else       if (CommandLineConstants.PROPERTIES.equals(arg) || CommandLineConstants.OLD_PROPERTIES.equals(arg) || CommandLineConstants.SHORT_PROPERTIES.equals(arg)) {
        if (!processProperties(arg,args[++i])) {
          return null;
        }
      }
 else       if (arg.startsWith(CommandLineConstants.PROPERTIES)) {
        String urlSpec=parseValue(arg,CommandLineConstants.PROPERTIES);
        if (urlSpec == null || !processProperties(arg,urlSpec)) {
          return null;
        }
      }
 else       if (arg.startsWith(CommandLineConstants.SHORT_PROPERTIES)) {
        String urlSpec=parseValue(arg,CommandLineConstants.SHORT_PROPERTIES);
        if (urlSpec == null || !processProperties(arg,urlSpec)) {
          return null;
        }
      }
 else       if (arg.startsWith(CommandLineConstants.OLD_PROPERTIES)) {
        String urlSpec=parseValue(arg,CommandLineConstants.OLD_PROPERTIES);
        if (urlSpec == null || !processProperties(arg,urlSpec)) {
          return null;
        }
      }
 else       if (arg.startsWith("-D")) {
        String name, value;
        int idx=arg.indexOf("=");
        if (idx == -1) {
          name=arg.substring(2);
          value="true";
        }
 else {
          name=arg.substring(2,idx);
          value=arg.substring(idx + 1,arg.length());
        }
        systemProperties.setProperty(name,value);
        SecurityActions.setSystemProperty(name,value);
      }
 else       if (arg.startsWith("-b")) {
        int idx=arg.indexOf('=');
        if (idx == arg.length() - 1) {
          System.err.printf("Argument expected for option %s\n",arg);
          usage();
          return null;
        }
        String value=idx > -1 ? arg.substring(idx + 1) : args[++i];
        String logicalName=null;
        if (idx < 0) {
          logicalName=arg.length() == 2 ? "public" : arg.substring(2);
        }
 else         if (idx == 2) {
          logicalName="public";
        }
 else {
          logicalName=arg.substring(2,idx);
        }
        String propertyName=ServerEnvironment.JBOSS_BIND_ADDRESS_PREFIX + logicalName;
        systemProperties.setProperty(propertyName,value);
        SecurityActions.setSystemProperty(propertyName,value);
      }
 else {
        System.err.printf("Invalid option '%s'\n",arg);
        usage();
        return null;
      }
    }
 catch (    IndexOutOfBoundsException e) {
      System.err.printf("Argument expected for option %s\n",arg);
      usage();
      return null;
    }
  }
  return new ServerEnvironment(systemProperties,systemEnvironment,serverConfig,launchType);
}
