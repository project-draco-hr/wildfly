{
  try {
    if (java.util.logging.LogManager.getLogManager().getClass().getName().equals("org.jboss.logmanager.LogManager")) {
      try {
        Class.forName(org.jboss.logmanager.handlers.ConsoleHandler.class.getName(),true,org.jboss.logmanager.handlers.ConsoleHandler.class.getClassLoader());
      }
 catch (      Throwable ignored) {
      }
      StdioContext.install();
      final StdioContext context=StdioContext.create(new NullInputStream(),new LoggingOutputStream(org.jboss.logmanager.Logger.getLogger("stdout"),org.jboss.logmanager.Level.INFO),new LoggingOutputStream(org.jboss.logmanager.Logger.getLogger("stderr"),org.jboss.logmanager.Level.ERROR));
      StdioContext.setStdioContextSelector(new SimpleStdioContextSelector(context));
    }
    Module.registerURLStreamHandlerFactoryModule(Module.getBootModuleLoader().loadModule(ModuleIdentifier.create("org.jboss.vfs")));
    ServerEnvironment serverEnvironment=determineEnvironment(args,SecurityActions.getSystemProperties(),SecurityActions.getSystemEnvironment(),ServerEnvironment.LaunchType.STANDALONE);
    if (serverEnvironment == null) {
      abort(null);
    }
 else {
      final Bootstrap bootstrap=Bootstrap.Factory.newInstance();
      final Bootstrap.Configuration configuration=new Bootstrap.Configuration(serverEnvironment);
      configuration.setModuleLoader(Module.getBootModuleLoader());
      bootstrap.bootstrap(configuration,Collections.<ServiceActivator>emptyList()).get();
      return;
    }
  }
 catch (  Throwable t) {
    abort(t);
  }
}
