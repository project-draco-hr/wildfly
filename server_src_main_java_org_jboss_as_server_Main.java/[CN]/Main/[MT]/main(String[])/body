{
  SecurityActions.setSystemProperty("log4j.defaultInitOverride","true");
  new BridgeRepositorySelector().start();
  try {
    Class.forName(ConsoleHandler.class.getName(),true,ConsoleHandler.class.getClassLoader());
  }
 catch (  Throwable ignored) {
  }
  StdioContext.install();
  final StdioContext context=StdioContext.create(new NullInputStream(),new LoggingOutputStream(Logger.getLogger("stdout"),Level.INFO),new LoggingOutputStream(Logger.getLogger("stderr"),Level.ERROR));
  StdioContext.setStdioContextSelector(new SimpleStdioContextSelector(context));
  try {
    Module.registerURLStreamHandlerFactoryModule(Module.getBootModuleLoader().loadModule(ModuleIdentifier.create("org.jboss.vfs")));
    ServerEnvironment serverEnvironment=determineEnvironment(args,new Properties(SecurityActions.getSystemProperties()),SecurityActions.getSystemEnvironment(),ServerEnvironment.LaunchType.STANDALONE);
    if (serverEnvironment == null) {
      abort(null);
    }
 else {
      final Bootstrap bootstrap=Bootstrap.Factory.newInstance();
      final Bootstrap.Configuration configuration=new Bootstrap.Configuration();
      configuration.setServerEnvironment(serverEnvironment);
      configuration.setModuleLoader(Module.getBootModuleLoader());
      bootstrap.bootstrap(configuration,Collections.<ServiceActivator>emptyList()).get();
      return;
    }
  }
 catch (  Throwable t) {
    abort(t);
  }
}
