{
  TransformersSubRegistration subsystemTransformer=subsystemRegistration.registerModelTransformers(ModelVersion.create(1,1),null);
  TransformersSubRegistration securityDomain=subsystemTransformer.registerSubResource(SECURITY_DOMAIN_PATH);
  ModulesToAttributeTransformer loginModule=new ModulesToAttributeTransformer(Constants.LOGIN_MODULE,Constants.LOGIN_MODULES);
  securityDomain.registerSubResource(PATH_CLASSIC_AUTHENTICATION,loginModule,loginModule).registerSubResource(PathElement.pathElement(Constants.LOGIN_MODULE),true);
  final ModulesToAttributeTransformer policyModule=new ModulesToAttributeTransformer(Constants.POLICY_MODULE,Constants.POLICY_MODULES);
  securityDomain.registerSubResource(PATH_AUTHORIZATION_CLASSIC,policyModule,policyModule).registerSubResource(PathElement.pathElement(Constants.POLICY_MODULE),true);
  final ModulesToAttributeTransformer mappingModule=new ModulesToAttributeTransformer(Constants.MAPPING_MODULE,Constants.MAPPING_MODULES);
  securityDomain.registerSubResource(PATH_MAPPING_CLASSIC,mappingModule,mappingModule).registerSubResource(PathElement.pathElement(Constants.MAPPING_MODULE),true);
  final ModulesToAttributeTransformer providerModule=new ModulesToAttributeTransformer(Constants.PROVIDER_MODULE,Constants.PROVIDER_MODULES);
  securityDomain.registerSubResource(PATH_AUDIT_CLASSIC,providerModule,providerModule).registerSubResource(PathElement.pathElement(Constants.PROVIDER_MODULE),true);
  final ModulesToAttributeTransformer authModule=new ModulesToAttributeTransformer(Constants.AUTH_MODULE,Constants.AUTH_MODULES);
  TransformersSubRegistration jaspiReg=securityDomain.registerSubResource(PATH_JASPI_AUTH,authModule,authModule);
  jaspiReg.registerSubResource(PathElement.pathElement(Constants.AUTH_MODULE),true);
  jaspiReg.registerSubResource(PATH_LOGIN_MODULE_STACK,loginModule,loginModule).registerSubResource(PathElement.pathElement(Constants.LOGIN_MODULE),true);
}
