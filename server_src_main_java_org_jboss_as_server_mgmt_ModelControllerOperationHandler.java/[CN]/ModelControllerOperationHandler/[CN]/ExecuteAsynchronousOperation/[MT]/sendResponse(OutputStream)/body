{
  final Marshaller marshaller=getMarshaller();
  try {
    final ByteOutput output=createByteOutput(outputStream);
    marshaller.start(output);
    final CountDownLatch completeLatch=new CountDownLatch(1);
    final IOExceptionHolder holder=new IOExceptionHolder();
    ModelController.Operation result=modelController.execute(operation,new ResultHandler(){
      @Override public void handleResultFragment(      String[] location,      ModelNode result){
        try {
synchronized (marshaller) {
            marshaller.writeByte(ModelControllerClientProtocol.PARAM_HANDLE_RESULT_FRAGMENT);
            marshaller.writeByte(ModelControllerClientProtocol.PARAM_LOCATION);
            marshaller.writeObject(location);
            marshaller.writeByte(ModelControllerClientProtocol.PARAM_OPERATION);
            marshaller.writeObject(result);
            marshaller.flush();
          }
        }
 catch (        IOException e) {
          handleIOException(e);
        }
      }
      @Override public void handleResultComplete(){
        try {
          asynchOperations.remove(asynchronousRequestId);
synchronized (marshaller) {
            marshaller.writeByte(ModelControllerClientProtocol.PARAM_HANDLE_RESULT_COMPLETE);
            marshaller.flush();
          }
          completeLatch.countDown();
        }
 catch (        IOException e) {
          handleIOException(e);
        }
      }
      @Override public void handleCancellation(){
        try {
          asynchOperations.remove(asynchronousRequestId);
synchronized (marshaller) {
            marshaller.writeByte(ModelControllerClientProtocol.PARAM_HANDLE_CANCELLATION);
            marshaller.flush();
          }
          completeLatch.countDown();
        }
 catch (        IOException e) {
          handleIOException(e);
        }
      }
      private void handleIOException(      IOException e){
        asynchOperations.remove(asynchronousRequestId);
        holder.setException(e);
        completeLatch.countDown();
      }
    }
);
    if (completeLatch.getCount() == 0) {
    }
 else {
      asynchOperations.put(Integer.valueOf(asynchronousRequestId),result);
synchronized (marshaller) {
        marshaller.writeByte(ModelControllerClientProtocol.PARAM_REQUEST_ID);
        marshaller.writeInt(asynchronousRequestId);
        marshaller.flush();
      }
      while (true) {
        try {
          completeLatch.await();
          break;
        }
 catch (        InterruptedException e) {
        }
      }
      if (holder.getException() != null) {
        throw holder.getException();
      }
    }
    marshaller.finish();
  }
  finally {
    safeFinish(marshaller);
  }
}
