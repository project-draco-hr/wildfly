{
  final String subsystemXml=getSubsystemXml();
  KernelServicesBuilder builder=createKernelServicesBuilder(createAdditionalInitialization()).setSubsystemXml(subsystemXml);
  ModelVersion version_1_1_0=ModelVersion.create(1,1,0);
  builder.createLegacyKernelServicesBuilder(AdditionalInitialization.MANAGEMENT,version_1_1_0).addMavenResourceURL("org.jboss.as:jboss-as-jacorb:7.1.2.Final");
  KernelServices mainServices=builder.build();
  KernelServices legacyServices=mainServices.getLegacyServices(version_1_1_0);
  assertNotNull(legacyServices);
  checkSubsystemModelTransformation(mainServices,version_1_1_0);
  final ModelNode operation=new ModelNode();
  operation.get(OP).set(WRITE_ATTRIBUTE_OPERATION);
  operation.get(OP_ADDR).add(SUBSYSTEM,"jacorb");
  operation.get(NAME);
  operation.get(VALUE).setExpression("${org.jboss.test.value:test}");
  final Set<String> toSkip=new HashSet<String>(Arrays.asList(JacORBSubsystemConstants.SECURITY_SECURITY_DOMAIN,SOCKET_BINDING,JacORBSubsystemConstants.ORB_SSL_SOCKET_BINDING,PROPERTIES));
  for (  final String key : JacORBSubsystemDefinitions.ATTRIBUTES_BY_NAME.keySet()) {
    if (toSkip.contains(key)) {
      continue;
    }
    operation.get(NAME).set(key);
    final ModelNode mainResult=mainServices.executeOperation(operation);
    Assert.assertTrue(SUCCESS.equals(mainResult.get(OUTCOME).asString()));
    final OperationTransformer.TransformedOperation op=mainServices.transformOperation(version_1_1_0,operation);
    final ModelNode result=mainServices.executeOperation(version_1_1_0,op);
    Assert.assertEquals(op.getTransformedOperation().toString(),FAILED,result.get(OUTCOME).asString());
  }
}
