{
  ServiceRegistry serviceRegistry=Mockito.mock(ServiceRegistry.class);
  ServiceController serviceController=Mockito.mock(ServiceController.class);
  Mockito.when(serviceController.getValue()).thenReturn(stateService);
  Mockito.when(serviceRegistry.getService(SubsystemState.SERVICE_NAME)).thenReturn(serviceController);
  ModelNode result=new ModelNode();
  final OperationContext context=Mockito.mock(OperationContext.class);
  Resource resource=Mockito.mock(Resource.class);
  Mockito.when(resource.getModel()).thenReturn(result);
  Mockito.when(context.getServiceRegistry(true)).thenReturn(serviceRegistry);
  Mockito.when(context.completeStep()).thenReturn(stepResult);
  Mockito.when(context.createResource(PathAddress.EMPTY_ADDRESS)).thenReturn(resource);
  Mockito.when(context.readResource(PathAddress.EMPTY_ADDRESS)).thenReturn(resource);
  Mockito.when(context.getType()).thenReturn(OperationContext.Type.SERVER);
  Mockito.doAnswer(new Answer<Void>(){
    @Override public Void answer(    InvocationOnMock invocation) throws Throwable {
      addedSteps.add((OperationStepHandler)invocation.getArguments()[0]);
      return null;
    }
  }
).when(context).addStep((OperationStepHandler)Mockito.anyObject(),Mockito.eq(OperationContext.Stage.RUNTIME));
  Mockito.doAnswer(new Answer<Void>(){
    @Override public Void answer(    InvocationOnMock invocation) throws Throwable {
      if (stepResult == ResultAction.ROLLBACK) {
        Object[] args=invocation.getArguments();
        OperationContext.RollbackHandler handler=OperationContext.RollbackHandler.class.cast(args[0]);
        handler.handleRollback(context,operationHolder.get());
      }
      return null;
    }
  }
).when(context).completeStep(Mockito.any(OperationContext.RollbackHandler.class));
  return context;
}
