{
  super();
  StaticSTSProperties props=new StaticSTSProperties();
  props.setSignatureCryptoProperties("stsKeystore.properties");
  props.setSignatureUsername("mystskey");
  props.setCallbackHandlerClass(STSCallbackHandler.class.getName());
  props.setIssuer("DoubleItSTSIssuer");
  List<ServiceMBean> services=new LinkedList<ServiceMBean>();
  StaticService service=new StaticService();
  String serverHostRegexp=WSTrustAppUtils.getServerHost().replace("[","\\[").replace("]","\\]").replace("127.0.0.1","localhost");
  service.setEndpoints(Arrays.asList("http://" + serverHostRegexp + ":(\\d)*/jaxws-samples-wsse-policy-trust/SecurityService","http://" + serverHostRegexp + ":(\\d)*/jaxws-samples-wsse-policy-trust-actas/ActAsService","http://" + serverHostRegexp + ":(\\d)*/jaxws-samples-wsse-policy-trust-onbehalfof/OnBehalfOfService"));
  services.add(service);
  TokenIssueOperation issueOperation=new TokenIssueOperation();
  issueOperation.setServices(services);
  issueOperation.getTokenProviders().add(new SAMLTokenProvider());
  issueOperation.getTokenValidators().add(new UsernameTokenValidator());
  issueOperation.getDelegationHandlers().add(new UsernameTokenDelegationHandler());
  issueOperation.setStsProperties(props);
  TokenValidateOperation validateOperation=new TokenValidateOperation();
  validateOperation.getTokenValidators().add(new SAMLTokenValidator());
  validateOperation.setStsProperties(props);
  this.setIssueOperation(issueOperation);
  this.setValidateOperation(validateOperation);
}
