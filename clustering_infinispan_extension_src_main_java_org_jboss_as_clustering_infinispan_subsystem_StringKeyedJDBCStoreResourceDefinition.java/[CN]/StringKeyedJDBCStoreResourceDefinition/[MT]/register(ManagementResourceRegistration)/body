{
  ManagementResourceRegistration registration=parentRegistration.registerSubModel(this);
  parentRegistration.registerAlias(LEGACY_PATH,new SimpleAliasEntry(registration));
  ResourceDescriptor descriptor=new ResourceDescriptor(this.getResourceDescriptionResolver()).addAttributes(JDBCStoreResourceDefinition.Attribute.class).addAttributes(StoreResourceDefinition.Attribute.class).addExtraParameters(DeprecatedAttribute.class).addExtraParameters(JDBCStoreResourceDefinition.DeprecatedAttribute.class).addCapabilities(Capability.class).addRequiredChildren(StringTableResourceDefinition.PATH).addRequiredSingletonChildren(StoreWriteThroughResourceDefinition.PATH);
  ResourceServiceHandler handler=new SimpleResourceServiceHandler<>(new StringKeyedJDBCStoreBuilderFactory());
  new AddStepHandler(descriptor,handler){
    @Override protected void populateModel(    OperationContext context,    ModelNode operation,    Resource resource) throws OperationFailedException {
      translateAddOperation(context,operation);
      if (operation.hasDefined(DeprecatedAttribute.TABLE.getDefinition().getName())) {
        ModelNode addTableOperation=Util.createAddOperation(context.getCurrentAddress().append(StringTableResourceDefinition.PATH));
        ModelNode parameters=operation.get(DeprecatedAttribute.TABLE.getDefinition().getName());
        for (        Property parameter : parameters.asPropertyList()) {
          addTableOperation.get(parameter.getName()).set(parameter.getValue());
        }
        context.addStep(addTableOperation,registration.getOperationHandler(PathAddress.pathAddress(StringTableResourceDefinition.PATH),ModelDescriptionConstants.ADD),context.getCurrentStage());
      }
      super.populateModel(context,operation,resource);
    }
  }
.register(registration);
  new RemoveStepHandler(descriptor,handler).register(registration);
  registration.registerReadWriteAttribute(DeprecatedAttribute.TABLE.getDefinition(),LEGACY_READ_TABLE_HANDLER,LEGACY_WRITE_TABLE_HANDLER);
  new StringTableResourceDefinition().register(registration);
  super.register(registration);
}
