{
  final VirtualFile deploymentRoot=VirtualFileAttachment.getVirtualFileAttachment(context);
  final Module module=context.getAttachment(ModuleDeploymentProcessor.MODULE_ATTACHMENT_KEY);
  if (module == null) {
    throw new DeploymentUnitProcessingException("failed to resolve module for deployment " + deploymentRoot);
  }
  final ClassLoader classLoader=module.getClassLoader();
  final StandardContext webContext=new StandardContext();
  final ContextConfig config=new JBossContextConfig(context);
  try {
    webContext.setDocBase(deploymentRoot.getPhysicalFile().getAbsolutePath());
  }
 catch (  IOException e) {
    throw new DeploymentUnitProcessingException(e);
  }
  webContext.addLifecycleListener(config);
  final String deploymentName=context.getName();
  String pathName=deploymentRoot.getName();
  if (pathName.equals("ROOT.war")) {
    pathName="";
  }
 else {
    pathName="/" + pathName.substring(0,pathName.length() - 4);
  }
  webContext.setPath(pathName);
  webContext.setIgnoreAnnotations(true);
  final Loader loader=new WebCtxLoader(classLoader);
  final InstanceManager manager=new WebInjectionContainer(classLoader);
  webContext.setInstanceManager(manager);
  webContext.setLoader(loader);
  final JBossWebMetaData metaData=warMetaData.getMergedJBossWebMetaData();
switch (metaData.getSessionCookies()) {
case JBossWebMetaData.SESSION_COOKIES_ENABLED:
    webContext.setCookies(true);
  break;
case JBossWebMetaData.SESSION_COOKIES_DISABLED:
webContext.setCookies(false);
break;
}
String metaDataSecurityDomain=metaData.getSecurityDomain();
if (metaDataSecurityDomain != null) {
metaDataSecurityDomain=metaDataSecurityDomain.trim();
}
final BatchBuilder builder=context.getBatchBuilder();
builder.addService(WebSubsystemElement.JBOSS_WEB.append(deploymentName),new WebDeploymentService(webContext)).addDependency(WebSubsystemElement.JBOSS_WEB_HOST.append(hostName),Host.class,new WebContextInjector(webContext)).setInitialMode(Mode.IMMEDIATE);
}
