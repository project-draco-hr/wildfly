{
  final VirtualFile deploymentRoot=deploymentUnit.getAttachment(Attachments.DEPLOYMENT_ROOT).getRoot();
  final Module module=deploymentUnit.getAttachment(Attachments.MODULE);
  if (module == null) {
    throw new DeploymentUnitProcessingException(MESSAGES.failedToResolveModule(deploymentRoot));
  }
  final ClassLoader classLoader=module.getClassLoader();
  final JBossWebMetaData metaData=warMetaData.getMergedJBossWebMetaData();
  final List<SetupAction> setupActions=deploymentUnit.getAttachmentList(org.jboss.as.ee.component.Attachments.WEB_SETUP_ACTIONS);
  WebContextFactory contextFactory=deploymentUnit.getAttachment(WebContextFactory.ATTACHMENT);
  if (contextFactory == null) {
    contextFactory=WebContextFactory.DEFAULT;
  }
  final StandardContext webContext=contextFactory.createContext(deploymentUnit);
  final JBossContextConfig config=new JBossContextConfig(deploymentUnit,this.service);
  webContext.addValve(new SecurityContextAssociationValve(deploymentUnit));
  try {
    webContext.setDocBase(deploymentRoot.getPhysicalFile().getAbsolutePath());
  }
 catch (  IOException e) {
    throw new DeploymentUnitProcessingException(e);
  }
  webContext.addLifecycleListener(config);
  final String pathName=pathNameOfDeployment(deploymentUnit,metaData);
  webContext.setPath(pathName);
  webContext.setIgnoreAnnotations(true);
  webContext.setCrossContext(!metaData.isDisableCrossContext());
  List<ExpressionFactoryWrapper> wrappers=deploymentUnit.getAttachmentList(ExpressionFactoryWrapper.ATTACHMENT_KEY);
  if (!wrappers.isEmpty()) {
    if (metaData.getListeners() == null) {
      metaData.setListeners(new ArrayList<ListenerMetaData>());
    }
    final ListenerMetaData listenerMetaData=new ListenerMetaData();
    listenerMetaData.setListenerClass(JspInitializationListener.class.getName());
    metaData.getListeners().add(listenerMetaData);
    deploymentUnit.addToAttachmentList(ServletContextAttribute.ATTACHMENT_KEY,new ServletContextAttribute(JspInitializationListener.CONTEXT_KEY,wrappers));
  }
  contextFactory.postProcessContext(deploymentUnit,webContext);
  final Set<ServiceName> dependentComponents=new HashSet<ServiceName>();
  final List<ServiceName> components=deploymentUnit.getAttachmentList(WebComponentDescription.WEB_COMPONENTS);
  final Set<ServiceName> failed=deploymentUnit.getAttachment(org.jboss.as.ee.component.Attachments.FAILED_COMPONENTS);
  for (  final ServiceName component : components) {
    if (!failed.contains(component)) {
      dependentComponents.add(component);
    }
  }
  final Loader loader=new WebCtxLoader(classLoader);
  webContext.setLoader(loader);
  webContext.setAllowLinking(metaData.isSymbolicLinkingEnabled());
  List<ValveMetaData> valves=metaData.getValves();
  if (valves == null) {
    metaData.setValves(valves=new ArrayList<ValveMetaData>());
  }
  for (  ValveMetaData valve : valves) {
    Valve valveInstance=(Valve)getInstance(module,valve.getModule(),valve.getValveClass(),valve.getParams());
    webContext.getPipeline().addValve(valveInstance);
  }
  List<ContainerListenerMetaData> listeners=metaData.getContainerListeners();
  if (listeners != null) {
    for (    ContainerListenerMetaData listener : listeners) {
switch (listener.getListenerType()) {
case CONTAINER:
        ContainerListener containerListener=(ContainerListener)getInstance(module,listener.getModule(),listener.getListenerClass(),listener.getParams());
      webContext.addContainerListener(containerListener);
    break;
case LIFECYCLE:
  LifecycleListener lifecycleListener=(LifecycleListener)getInstance(module,listener.getModule(),listener.getListenerClass(),listener.getParams());
if (webContext instanceof Lifecycle) {
  ((Lifecycle)webContext).addLifecycleListener(lifecycleListener);
}
break;
case SERVLET_INSTANCE:
webContext.addInstanceListener(listener.getListenerClass());
break;
case SERVLET_CONTAINER:
webContext.addWrapperListener(listener.getListenerClass());
break;
case SERVLET_LIFECYCLE:
webContext.addWrapperLifecycle(listener.getListenerClass());
break;
}
}
}
switch (metaData.getSessionCookies()) {
case JBossWebMetaData.SESSION_COOKIES_ENABLED:
webContext.setCookies(true);
break;
case JBossWebMetaData.SESSION_COOKIES_DISABLED:
webContext.setCookies(false);
break;
}
String metaDataSecurityDomain=metaData.getSecurityDomain();
if (metaDataSecurityDomain == null) {
metaDataSecurityDomain=getJBossAppSecurityDomain(deploymentUnit);
}
if (metaDataSecurityDomain != null) {
metaDataSecurityDomain=metaDataSecurityDomain.trim();
}
String securityDomain=metaDataSecurityDomain == null ? SecurityConstants.DEFAULT_APPLICATION_POLICY : SecurityUtil.unprefixSecurityDomain(metaDataSecurityDomain);
final List<ServletContextAttribute> attributes=deploymentUnit.getAttachment(ServletContextAttribute.ATTACHMENT_KEY);
try {
final ServiceName webappServiceName=WebSubsystemServices.deploymentServiceName(hostName,pathName);
final ServiceName realmServiceName=webappServiceName.append("realm");
deploymentUnit.addToAttachmentList(Attachments.DEPLOYMENT_COMPLETE_SERVICES,webappServiceName);
deploymentUnit.addToAttachmentList(Attachments.DEPLOYMENT_COMPLETE_SERVICES,realmServiceName);
final JBossWebRealmService realmService=new JBossWebRealmService(deploymentUnit);
ServiceBuilder<Realm> realmBuilder=serviceTarget.addService(realmServiceName,realmService);
realmBuilder.addDependency(DependencyType.REQUIRED,SecurityDomainService.SERVICE_NAME.append(securityDomain),SecurityDomainContext.class,realmService.getSecurityDomainContextInjector()).setInitialMode(Mode.ACTIVE).install();
ComponentRegistry componentRegistry=deploymentUnit.getAttachment(org.jboss.as.ee.component.Attachments.COMPONENT_REGISTRY);
if (componentRegistry == null) {
componentRegistry=new ComponentRegistry(null);
}
final WebDeploymentService webappService=new WebDeploymentService(webContext,new WebInjectionContainer(module.getClassLoader(),componentRegistry),setupActions,attributes);
ServiceBuilder<StandardContext> webappBuilder=serviceTarget.addService(webappServiceName,webappService).addDependency(WebSubsystemServices.JBOSS_WEB_HOST.append(hostName),VirtualHost.class,new WebContextInjector(webContext)).addDependencies(dependentComponents).addDependency(realmServiceName,Realm.class,webappService.getRealm()).addDependencies(deploymentUnit.getAttachmentList(Attachments.WEB_DEPENDENCIES)).addDependency(JndiNamingDependencyProcessor.serviceName(deploymentUnit.getServiceName()));
Services.addServerExecutorDependency(webappBuilder,webappService.getServerExecutorInjector(),false);
for (final SetupAction action : setupActions) {
webappBuilder.addDependencies(action.dependencies());
}
if (metaData.getDistributable() != null) {
SessionManagerFactoryBuilderService factoryBuilderService=new SessionManagerFactoryBuilderService();
SessionManagerFactoryBuilder factoryBuilder=factoryBuilderService.getValue();
if (factoryBuilder != null) {
ServiceName factoryName=webappServiceName.append("session");
ServiceBuilder<SessionManagerFactory> builder=factoryBuilder.build(serviceTarget,factoryName,webappServiceName,module,metaData);
if (builder != null) {
builder.setInitialMode(Mode.ON_DEMAND).install();
webappBuilder.addDependency(factoryName,SessionManagerFactory.class,config.getSessionManagerFactoryInjector());
}
}
}
webappBuilder.setInitialMode(Mode.ACTIVE);
webappBuilder.install();
AbstractSecurityDeployer<WarMetaData> deployer=new WarSecurityDeployer();
JaccService<WarMetaData> jaccService=deployer.deploy(deploymentUnit);
if (jaccService != null) {
((WarJaccService)jaccService).setContext(webContext);
final ServiceName jaccServiceName=deploymentUnit.getServiceName().append(JaccService.SERVICE_NAME);
ServiceBuilder<?> jaccBuilder=serviceTarget.addService(jaccServiceName,jaccService);
if (deploymentUnit.getParent() != null) {
final DeploymentUnit parentDU=deploymentUnit.getParent();
jaccBuilder.addDependency(parentDU.getServiceName().append(JaccService.SERVICE_NAME),PolicyConfiguration.class,jaccService.getParentPolicyInjector());
}
jaccBuilder.addDependency(webappServiceName);
jaccBuilder.setInitialMode(Mode.PASSIVE).install();
}
}
 catch (ServiceRegistryException e) {
throw new DeploymentUnitProcessingException(MESSAGES.failedToAddWebDeployment(),e);
}
final ModelNode node=deploymentUnit.getDeploymentSubsystemModel("web");
node.get(WebDeploymentDefinition.CONTEXT_ROOT.getName()).set("".equals(pathName) ? "/" : pathName);
node.get(WebDeploymentDefinition.VIRTUAL_HOST.getName()).set(hostName);
processManagement(deploymentUnit,metaData);
}
