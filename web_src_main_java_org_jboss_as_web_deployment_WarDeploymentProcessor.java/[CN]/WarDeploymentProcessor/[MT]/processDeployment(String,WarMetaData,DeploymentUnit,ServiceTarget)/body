{
  final VirtualFile deploymentRoot=deploymentUnit.getAttachment(Attachments.DEPLOYMENT_ROOT).getRoot();
  final Module module=deploymentUnit.getAttachment(Attachments.MODULE);
  if (module == null) {
    throw new DeploymentUnitProcessingException("failed to resolve module for deployment " + deploymentRoot);
  }
  final ClassLoader classLoader=module.getClassLoader();
  final JBossWebMetaData metaData=warMetaData.getMergedJBossWebMetaData();
  final StandardContext webContext=new StandardContext();
  final ContextConfig config=new JBossContextConfig(deploymentUnit);
  webContext.addInstanceListener(NamingListener.class.getName());
  try {
    webContext.setDocBase(deploymentRoot.getPhysicalFile().getAbsolutePath());
  }
 catch (  IOException e) {
    throw new DeploymentUnitProcessingException(e);
  }
  webContext.addLifecycleListener(config);
  final String deploymentName=deploymentUnit.getName();
  String pathName=null;
  if (metaData.getContextRoot() == null) {
    pathName=deploymentRoot.getName();
    if (pathName.equals("ROOT.war")) {
      pathName="";
    }
 else {
      pathName="/" + pathName.substring(0,pathName.length() - 4);
    }
  }
 else {
    pathName=metaData.getContextRoot();
    if ("/".equals(pathName)) {
      pathName="";
    }
  }
  webContext.setPath(pathName);
  webContext.setIgnoreAnnotations(true);
  final Loader loader=new WebCtxLoader(classLoader);
  final InstanceManager manager=new WebInjectionContainer(classLoader);
  webContext.setInstanceManager(manager);
  webContext.setLoader(loader);
switch (metaData.getSessionCookies()) {
case JBossWebMetaData.SESSION_COOKIES_ENABLED:
    webContext.setCookies(true);
  break;
case JBossWebMetaData.SESSION_COOKIES_DISABLED:
webContext.setCookies(false);
break;
}
String metaDataSecurityDomain=metaData.getSecurityDomain();
if (metaDataSecurityDomain != null) {
metaDataSecurityDomain=metaDataSecurityDomain.trim();
}
JBossWebRealm realm=new JBossWebRealm();
String securityDomain=metaDataSecurityDomain == null ? SecurityConstants.DEFAULT_APPLICATION_POLICY : metaDataSecurityDomain;
ClassLoader tcl=SecurityActions.getContextClassLoader();
SecurityActions.setContextClassLoader(classLoader);
try {
AuthenticationManager authM=getAuthenticationManager(securityDomain);
realm.setAuthenticationManager(authM);
AuthorizationManager authzM=getAuthorizationManager(securityDomain);
realm.setAuthorizationManager(authzM);
webContext.setRealm(realm);
}
 catch (NamingException e1) {
throw new RuntimeException(e1);
}
 finally {
SecurityActions.setContextClassLoader(tcl);
}
try {
ServiceName namespaceSelectorServiceName=deploymentUnit.getServiceName().append(NamespaceSelectorService.NAME);
WebDeploymentService webDeploymentService=new WebDeploymentService(webContext);
serviceTarget.addService(WebSubsystemServices.JBOSS_WEB.append(deploymentName),webDeploymentService).addDependency(WebSubsystemServices.JBOSS_WEB_HOST.append(hostName),Host.class,new WebContextInjector(webContext)).addDependency(namespaceSelectorServiceName,NamespaceSelectorService.class,webDeploymentService.getNamespaceSelector()).setInitialMode(Mode.ACTIVE).install();
}
 catch (ServiceRegistryException e) {
throw new DeploymentUnitProcessingException("Failed to add JBoss web deployment service",e);
}
}
