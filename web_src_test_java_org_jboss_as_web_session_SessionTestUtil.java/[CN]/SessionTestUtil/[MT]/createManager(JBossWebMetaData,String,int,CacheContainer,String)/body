{
  if (cacheContainer == null) {
    throw new IllegalStateException("Failed to initialize distributedManagerFactory");
  }
  DistributedCacheManagerFactory factory=new DistributedCacheManagerFactory();
  CacheSource sessionCacheSource=new CacheSource(){
    @Override public <K,V>Cache<K,V> getCache(    ServiceRegistry registry,    LocalDistributableSessionManager manager){
      return cacheContainer.getCache();
    }
  }
;
  CacheSource jvmRouteCacheSource=new CacheSource(){
    @Override public <K,V>Cache<K,V> getCache(    ServiceRegistry registry,    LocalDistributableSessionManager manager){
      return cacheContainer.getCache(JVM_ROUTE_CACHE_NAME);
    }
  }
;
  factory.setSessionCacheSource(sessionCacheSource);
  factory.setJvmRouteCacheSource(jvmRouteCacheSource);
  try {
    DistributableSessionManager<OutgoingDistributableSessionData> manager=new DistributableSessionManager<OutgoingDistributableSessionData>(factory,mock(Container.class),metaData,mock(ServiceRegistry.class));
    setupContainer(warName,jvmRoute,manager);
    manager.setMaxInactiveInterval(maxInactiveInterval);
    return manager;
  }
 catch (  ClusteringNotSupportedException e) {
    throw new IllegalStateException(e);
  }
}
