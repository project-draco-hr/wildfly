{
  resourceRegistration.registerOperationHandler(ENABLE_NODES,new AbstractGroupOperation(){
    @Override protected void handleGroup(    OperationContext context,    ModClusterStatus.LoadBalancer balancer,    String groupName,    ModelNode operation){
      for (      ModClusterStatus.Node node : balancer.getNodes()) {
        if (groupName.equals(node.getDomain())) {
          for (          ModClusterStatus.Context n : node.getContexts()) {
            n.enable();
          }
        }
      }
    }
  }
);
  resourceRegistration.registerOperationHandler(DISABLE_NODES,new AbstractGroupOperation(){
    @Override protected void handleGroup(    OperationContext context,    ModClusterStatus.LoadBalancer balancer,    String groupName,    ModelNode operation){
      for (      ModClusterStatus.Node node : balancer.getNodes()) {
        if (groupName.equals(node.getDomain())) {
          for (          ModClusterStatus.Context n : node.getContexts()) {
            n.disable();
          }
        }
      }
    }
  }
);
  resourceRegistration.registerOperationHandler(STOP_NODES,new AbstractGroupOperation(){
    @Override protected void handleGroup(    OperationContext context,    ModClusterStatus.LoadBalancer balancer,    String groupName,    ModelNode operation){
      for (      ModClusterStatus.Node node : balancer.getNodes()) {
        if (groupName.equals(node.getDomain())) {
          for (          ModClusterStatus.Context n : node.getContexts()) {
            n.stop();
          }
        }
      }
    }
  }
);
}
