{
  final Object proxy;
  final Component component=componentView.getComponent();
  final ComponentClientInstance instance=new ComponentClientInstance();
  try {
    proxy=proxyFactory.newInstance(new ProxyInvocationHandler(clientInterceptors,instance,componentView));
  }
 catch (  InstantiationException e) {
    InstantiationError error=new InstantiationError(e.getMessage());
    Throwable cause=e.getCause();
    if (cause != null)     error.initCause(cause);
    throw error;
  }
catch (  IllegalAccessException e) {
    IllegalAccessError error=new IllegalAccessError(e.getMessage());
    Throwable cause=e.getCause();
    if (cause != null)     error.initCause(cause);
    throw error;
  }
  InterceptorContext context=new InterceptorContext();
  context.putPrivateData(ComponentView.class,componentView);
  context.putPrivateData(Component.class,component);
  context.putPrivateData(ComponentClientInstance.class,instance);
  context.setContextData(new HashMap<String,Object>());
  for (  Map.Entry<Object,Object> entry : contextData.entrySet()) {
    context.putPrivateData(entry.getKey(),entry.getValue());
  }
  clientPostConstructInterceptor.processInvocation(context);
  instance.constructionComplete();
  return new ManagedReference(){
    @Override public void release(){
      try {
        InterceptorContext interceptorContext=new InterceptorContext();
        interceptorContext.putPrivateData(ComponentView.class,componentView);
        interceptorContext.putPrivateData(Component.class,component);
        clientPreDestroyInterceptor.processInvocation(interceptorContext);
      }
 catch (      Exception e) {
        ROOT_LOGGER.preDestroyInterceptorFailure(e,component.getComponentClass());
      }
    }
    @Override public Object getInstance(){
      return proxy;
    }
  }
;
}
