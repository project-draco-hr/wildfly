{
  final SimpleInterceptorFactoryContext factoryContext=new SimpleInterceptorFactoryContext();
  factoryContext.getContextData().put(Component.class,component);
  factoryContext.getContextData().put(ComponentView.class,View.this);
  factoryContext.getContextData().put(ComponentViewInstance.class,this);
  factoryContext.getContextData().putAll(contextData);
  final Interceptor clientPostConstructInterceptor=clientPostConstruct.create(factoryContext);
  final Interceptor clientPreDestroyInterceptor=clientPreDestroy.create(factoryContext);
  final Map<Method,InterceptorFactory> clientInterceptorFactories=ViewService.this.clientInterceptorFactories;
  IdentityHashMap<Method,Interceptor> clientEntryPoints=new IdentityHashMap<Method,Interceptor>(clientInterceptorFactories.size());
  for (  Method method : clientInterceptorFactories.keySet()) {
    clientEntryPoints.put(method,clientInterceptorFactories.get(method).create(factoryContext));
  }
  final ComponentViewInstance instance=new ViewInstance(viewInterceptors,clientPreDestroyInterceptor,clientEntryPoints);
  try {
    InterceptorContext context=new InterceptorContext();
    context.putPrivateData(ComponentView.class,this);
    context.putPrivateData(Component.class,component);
    clientPostConstructInterceptor.processInvocation(context);
  }
 catch (  Exception e) {
    throw new RuntimeException("Failed to instantiate component view",e);
  }
  return instance;
}
