{
  ModelNode container=Util.getEmptyOperation(ModelDescriptionConstants.ADD,null);
  String name=null;
  for (int i=0; i < reader.getAttributeCount(); i++) {
    ParseUtils.requireNoNamespaceAttribute(reader,i);
    String value=reader.getAttributeValue(i);
    Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case NAME:
{
        name=value;
        break;
      }
case ALIASES:
{
      for (      String alias : reader.getListAttributeValue(i)) {
        container.get(ModelKeys.ALIASES).add(alias);
      }
      break;
    }
case DEFAULT_CACHE:
{
    CommonAttributes.DEFAULT_CACHE.parseAndSetParameter(value,container,reader);
    break;
  }
case JNDI_NAME:
{
  CommonAttributes.JNDI_NAME.parseAndSetParameter(value,container,reader);
  break;
}
case START:
{
CommonAttributes.START.parseAndSetParameter(value,container,reader);
break;
}
case LISTENER_EXECUTOR:
{
CommonAttributes.LISTENER_EXECUTOR.parseAndSetParameter(value,container,reader);
break;
}
case EVICTION_EXECUTOR:
{
CommonAttributes.EVICTION_EXECUTOR.parseAndSetParameter(value,container,reader);
break;
}
case REPLICATION_QUEUE_EXECUTOR:
{
CommonAttributes.REPLICATION_QUEUE_EXECUTOR.parseAndSetParameter(value,container,reader);
break;
}
case MODULE:
{
CommonAttributes.CACHE_CONTAINER_MODULE.parseAndSetParameter(value,container,reader);
break;
}
default :
{
throw ParseUtils.unexpectedAttribute(reader,i);
}
}
}
if ((name == null) || !container.hasDefined(ModelKeys.DEFAULT_CACHE)) {
throw ParseUtils.missingRequired(reader,EnumSet.of(Attribute.NAME,Attribute.DEFAULT_CACHE));
}
ModelNode containerAddress=subsystemAddress.clone();
containerAddress.add(ModelKeys.CACHE_CONTAINER,name);
containerAddress.protect();
container.get(ModelDescriptionConstants.OP_ADDR).set(containerAddress);
operations.add(container);
while (reader.hasNext() && (reader.nextTag() != XMLStreamConstants.END_ELEMENT)) {
Element element=Element.forName(reader.getLocalName());
switch (element) {
case TRANSPORT:
{
parseTransport(reader,containerAddress,operations);
break;
}
case LOCAL_CACHE:
{
parseLocalCache(reader,containerAddress,operations);
break;
}
case INVALIDATION_CACHE:
{
parseInvalidationCache(reader,containerAddress,operations);
break;
}
case REPLICATED_CACHE:
{
parseReplicatedCache(reader,containerAddress,operations);
break;
}
case DISTRIBUTED_CACHE:
{
parseDistributedCache(reader,containerAddress,operations);
break;
}
default :
{
throw ParseUtils.unexpectedElement(reader);
}
}
}
}
