{
  for (int i=0; i < reader.getAttributeCount(); i++) {
    String value=reader.getAttributeValue(i);
    Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case PREFIX:
{
        BaseJDBCStoreResource.PREFIX.parseAndSetParameter(value,table,reader);
        break;
      }
case FETCH_SIZE:
{
      BaseJDBCStoreResource.FETCH_SIZE.parseAndSetParameter(value,table,reader);
      break;
    }
case BATCH_SIZE:
{
    BaseJDBCStoreResource.BATCH_SIZE.parseAndSetParameter(value,table,reader);
    break;
  }
default :
{
  throw ParseUtils.unexpectedAttribute(reader,i);
}
}
}
while (reader.hasNext() && (reader.nextTag() != XMLStreamConstants.END_ELEMENT)) {
Element element=Element.forName(reader.getLocalName());
switch (element) {
case ID_COLUMN:
{
this.parseJDBCStoreColumn(reader,table.get(ModelKeys.ID_COLUMN).setEmptyObject());
break;
}
case DATA_COLUMN:
{
this.parseJDBCStoreColumn(reader,table.get(ModelKeys.DATA_COLUMN).setEmptyObject());
break;
}
case TIMESTAMP_COLUMN:
{
this.parseJDBCStoreColumn(reader,table.get(ModelKeys.TIMESTAMP_COLUMN).setEmptyObject());
break;
}
default :
{
throw ParseUtils.unexpectedElement(reader);
}
}
}
}
