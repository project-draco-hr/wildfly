{
  final CountDownLatch executeLatch=new CountDownLatch(1);
  MockModelController controller=new MockModelController(){
    @Override public ModelNode execute(    ModelNode operation,    OperationMessageHandler handler,    OperationTransactionControl control,    OperationAttachments attachments){
      this.operation=operation;
      handler.handleReport(MessageSeverity.INFO,"Test1");
      handler.handleReport(MessageSeverity.INFO,"Test2");
      executeLatch.countDown();
      ModelNode result=new ModelNode();
      result.get("testing").set(operation.get("test"));
      return result;
    }
  }
;
  handler.setDelegate(new ModelControllerClientOperationHandler(controller,channels.getExecutorService()));
  final ModelControllerClient client=createTestClient();
  try {
    ModelNode operation=new ModelNode();
    operation.get("test").set("123");
    final BlockingQueue<String> messages=new LinkedBlockingQueue<String>();
    ModelNode result=client.execute(operation,new OperationMessageHandler(){
      @Override public void handleReport(      MessageSeverity severity,      String message){
        if (severity == MessageSeverity.INFO && message.startsWith("Test")) {
          messages.add(message);
        }
      }
    }
);
    assertEquals("123",controller.getOperation().get("test").asString());
    assertEquals("123",result.get("testing").asString());
    assertEquals("Test1",messages.take());
    assertEquals("Test2",messages.take());
  }
  finally {
    IoUtils.safeClose(client);
  }
}
