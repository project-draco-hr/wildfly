{
  final ModelNode resolved=new ModelNode();
  resolved.get(OP).set(operation.get(OP));
  resolved.get(OP_ADDR).set(operation.get(OP_ADDR));
  for (  final AttributeDefinition attribute : ATTRIBUTES) {
    resolved.get(attribute.getName()).set(attribute.resolveModelAttribute(context,model));
  }
  final QueuelessOperationParameters params=ThreadsSubsystemThreadPoolOperationUtils.parseQueuelessThreadPoolOperationParameters(resolved);
  ServiceTarget target=context.getServiceTarget();
  final ServiceName serviceName=ThreadsServices.executorName(params.getName());
  final QueuelessThreadPoolService service=new QueuelessThreadPoolService(params.getMaxThreads().getScaledCount(),params.isBlocking(),params.getKeepAliveTime());
  final ServiceBuilder<ManagedQueuelessExecutorService> serviceBuilder=target.addService(serviceName,service);
  ThreadsSubsystemThreadPoolOperationUtils.addThreadFactoryDependency(params.getThreadFactory(),serviceName,serviceBuilder,service.getThreadFactoryInjector(),target,params.getName() + "-threads");
  if (verificationHandler != null) {
    serviceBuilder.addListener(verificationHandler);
  }
  ServiceController<?> sc=serviceBuilder.install();
  if (newControllers != null) {
    newControllers.add(sc);
  }
}
