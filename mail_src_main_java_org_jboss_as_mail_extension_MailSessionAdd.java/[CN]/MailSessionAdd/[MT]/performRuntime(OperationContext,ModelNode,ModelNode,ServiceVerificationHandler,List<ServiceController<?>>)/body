{
  final String jndiName=Util.getJndiName(operation);
  final ServiceTarget serviceTarget=context.getServiceTarget();
  MailSessionService service=createMailSessionService(operation);
  final ServiceName serviceName=SERVICE_NAME_BASE.append(jndiName);
  final ServiceBuilder<?> mailSessionBuilder=serviceTarget.addService(serviceName,service);
  final MailSessionReferenceFactoryService referenceFactoryService=new MailSessionReferenceFactoryService();
  final ServiceName referenceFactoryServiceName=MailSessionReferenceFactoryService.SERVICE_NAME_BASE.append(jndiName);
  final ServiceBuilder<?> referenceBuilder=serviceTarget.addService(referenceFactoryServiceName,referenceFactoryService).addDependency(serviceName,Session.class,referenceFactoryService.getDataSourceInjector());
  final ServiceName binderServiceName=ContextNames.serviceNameOfGlobalEntry(jndiName);
  final BinderService binderService=new BinderService(binderServiceName.getSimpleName());
  final ServiceBuilder<?> binderBuilder=serviceTarget.addService(binderServiceName,binderService).addDependency(referenceFactoryServiceName,ManagedReferenceFactory.class,binderService.getManagedObjectInjector()).addDependency(binderServiceName.getParent(),NamingStore.class,binderService.getNamingStoreInjector()).addListener(new AbstractServiceListener<Object>(){
    public void transition(    final ServiceController<? extends Object> controller,    final ServiceController.Transition transition){
switch (transition) {
case STARTING_to_UP:
{
          log.infof("Bound mail session [%s]",jndiName);
          break;
        }
case START_REQUESTED_to_DOWN:
{
        log.infof("Unbound mail session [%s]",jndiName);
        break;
      }
case REMOVING_to_REMOVED:
{
      log.debugf("Removed mail session [%s]",jndiName);
      break;
    }
}
}
}
);
mailSessionBuilder.setInitialMode(ServiceController.Mode.ACTIVE).addListener(verificationHandler);
referenceBuilder.setInitialMode(ServiceController.Mode.ACTIVE).addListener(verificationHandler);
binderBuilder.setInitialMode(ServiceController.Mode.ACTIVE).addListener(verificationHandler);
controllers.add(mailSessionBuilder.install());
controllers.add(referenceBuilder.install());
controllers.add(binderBuilder.install());
}
