{
  final PathAddress address=PathAddress.pathAddress(operation.get(OP_ADDR));
  Resource resource=context.readResourceFromRoot(address.subAddress(0,address.size() - 1));
  ModelNode workers=Resource.Tools.readModel(resource).get(IOExtension.WORKER_PATH.getKey());
  int allWorkerCount=workers.asList().size();
  final String name=address.getLastElement().getValue();
  final OptionMap.Builder builder=OptionMap.builder();
  for (  OptionAttributeDefinition attr : WorkerResourceDefinition.ATTRIBUTES) {
    Option option=attr.getOption();
    ModelNode value=attr.resolveModelAttribute(context,model);
    if (!value.isDefined()) {
      continue;
    }
    if (attr.getType() == ModelType.INT) {
      builder.set((Option<Integer>)option,value.asInt());
    }
 else     if (attr.getType() == ModelType.LONG) {
      builder.set(option,value.asLong());
    }
 else     if (attr.getType() == ModelType.BOOLEAN) {
      builder.set(option,value.asBoolean());
    }
  }
  builder.set(Options.WORKER_NAME,name);
  ModelNode ioThreadsModel=WORKER_IO_THREADS.resolveModelAttribute(context,model);
  ModelNode maxTaskThreadsModel=WORKER_TASK_MAX_THREADS.resolveModelAttribute(context,model);
  int cpuCount=getCpuCount();
  int ioThreadsCalculated=getSuggestedIoThreadCount();
  if (!ioThreadsModel.isDefined() && !maxTaskThreadsModel.isDefined()) {
    int workerThreads=getWorkerThreads(name,allWorkerCount);
    builder.set((Option<Integer>)WORKER_IO_THREADS.getOption(),ioThreadsCalculated);
    builder.set((Option<Integer>)WORKER_TASK_MAX_THREADS.getOption(),workerThreads);
    IOLogger.ROOT_LOGGER.printDefaults(name,ioThreadsCalculated,workerThreads,cpuCount);
  }
 else {
    if (!ioThreadsModel.isDefined()) {
      builder.set((Option<Integer>)WORKER_IO_THREADS.getOption(),ioThreadsCalculated);
      IOLogger.ROOT_LOGGER.printDefaultsIoThreads(name,ioThreadsCalculated,cpuCount);
    }
    if (!maxTaskThreadsModel.isDefined()) {
      int workerThreads=getWorkerThreads(name,allWorkerCount);
      builder.set((Option<Integer>)WORKER_TASK_MAX_THREADS.getOption(),workerThreads);
      IOLogger.ROOT_LOGGER.printDefaultsWorkerThreads(name,workerThreads,cpuCount);
    }
  }
  final WorkerService workerService=new WorkerService(builder.getMap());
  final ServiceBuilder<XnioWorker> serviceBuilder=context.getServiceTarget().addService(IOServices.WORKER.append(name),workerService);
  serviceBuilder.setInitialMode(ServiceController.Mode.ON_DEMAND);
  final ServiceController<XnioWorker> serviceController=serviceBuilder.install();
  if (newControllers != null) {
    newControllers.add(serviceController);
  }
}
