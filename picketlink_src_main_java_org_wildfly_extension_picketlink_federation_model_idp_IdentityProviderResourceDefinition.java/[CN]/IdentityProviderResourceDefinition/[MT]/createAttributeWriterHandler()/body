{
  List<SimpleAttributeDefinition> attributes=getAttributes();
  return new AbstractWriteAttributeHandler(attributes.toArray(new AttributeDefinition[attributes.size()])){
    @Override public void execute(    OperationContext context,    ModelNode operation) throws OperationFailedException {
      context.addStep(new IdentityProviderValidationStepHandler(),OperationContext.Stage.MODEL);
      super.execute(context,operation);
    }
    @Override protected boolean applyUpdateToRuntime(    OperationContext context,    ModelNode operation,    String attributeName,    ModelNode resolvedValue,    ModelNode currentValue,    HandbackHolder handbackHolder) throws OperationFailedException {
      PathAddress pathAddress=PathAddress.pathAddress(operation.get(ModelDescriptionConstants.ADDRESS));
      String alias=pathAddress.getLastElement().getValue();
      ServiceRegistry serviceRegistry=context.getServiceRegistry(false);
      ServiceController<IdentityProviderService> serviceController=(ServiceController<IdentityProviderService>)serviceRegistry.getService(IdentityProviderService.createServiceName(alias));
      if (serviceController != null) {
        IdentityProviderService service=serviceController.getValue();
        ModelNode identityProviderNode=context.readResource(EMPTY_ADDRESS,false).getModel();
        service.setConfiguration(IdentityProviderAddHandler.toIDPConfig(context,identityProviderNode,alias));
      }
      return false;
    }
    @Override protected void revertUpdateToRuntime(    OperationContext context,    ModelNode operation,    String attributeName,    ModelNode valueToRestore,    ModelNode valueToRevert,    Object handback) throws OperationFailedException {
    }
  }
;
}
