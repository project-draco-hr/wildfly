{
  final Resource resource=context.readResourceForUpdate(PathAddress.EMPTY_ADDRESS);
  final ModelNode model=resource.getModel();
  ModelNode dc=model.get(DOMAIN_CONTROLLER);
  ModelNode remoteDC=dc.get(REMOTE);
  PORT.validateAndSet(operation,remoteDC);
  HOST.validateAndSet(operation,remoteDC);
  if (operation.has(SECURITY_REALM)) {
    ModelNode securityRealm=operation.require(SECURITY_REALM);
    dc.get(REMOTE,SECURITY_REALM).set(securityRealm);
    hostControllerInfo.setRemoteDomainControllerSecurityRealm(securityRealm.resolve().asString());
  }
  if (dc.has(LOCAL)) {
    dc.remove(LOCAL);
  }
  hostControllerInfo.setMasterDomainController(false);
  hostControllerInfo.setRemoteDomainControllerHost(HOST.resolveModelAttribute(context,remoteDC).asString());
  hostControllerInfo.setRemoteDomainControllerPort(PORT.resolveModelAttribute(context,remoteDC).asInt());
  overallConfigPersister.initializeDomainConfigurationPersister(true);
  DomainModelUtil.initializeSlaveDomainRegistry(rootRegistration,overallConfigPersister.getDomainPersister(),fileRepository);
  context.completeStep();
}
