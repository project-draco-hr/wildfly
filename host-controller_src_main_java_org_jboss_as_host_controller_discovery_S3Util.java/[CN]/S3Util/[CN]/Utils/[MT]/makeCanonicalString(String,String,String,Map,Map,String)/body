{
  StringBuilder buf=new StringBuilder();
  buf.append(method + "\n");
  SortedMap interestingHeaders=new TreeMap();
  if (headers != null) {
    for (Iterator i=headers.keySet().iterator(); i.hasNext(); ) {
      String hashKey=(String)i.next();
      if (hashKey == null)       continue;
      String lk=hashKey.toLowerCase();
      if (lk.equals("content-type") || lk.equals("content-md5") || lk.equals("date")|| lk.startsWith(AMAZON_HEADER_PREFIX)) {
        List s=(List)headers.get(hashKey);
        interestingHeaders.put(lk,concatenateList(s));
      }
    }
  }
  if (interestingHeaders.containsKey(ALTERNATIVE_DATE_HEADER)) {
    interestingHeaders.put("date","");
  }
  if (expires != null) {
    interestingHeaders.put("date",expires);
  }
  if (!interestingHeaders.containsKey("content-type")) {
    interestingHeaders.put("content-type","");
  }
  if (!interestingHeaders.containsKey("content-md5")) {
    interestingHeaders.put("content-md5","");
  }
  for (Iterator i=interestingHeaders.keySet().iterator(); i.hasNext(); ) {
    String headerKey=(String)i.next();
    if (headerKey.startsWith(AMAZON_HEADER_PREFIX)) {
      buf.append(headerKey).append(':').append(interestingHeaders.get(headerKey));
    }
 else {
      buf.append(interestingHeaders.get(headerKey));
    }
    buf.append("\n");
  }
  if (bucketName != null && bucketName.length() != 0) {
    buf.append("/" + bucketName);
  }
  buf.append("/");
  if (key != null) {
    buf.append(key);
  }
  if (pathArgs != null) {
    if (pathArgs.containsKey("acl")) {
      buf.append("?acl");
    }
 else     if (pathArgs.containsKey("torrent")) {
      buf.append("?torrent");
    }
 else     if (pathArgs.containsKey("logging")) {
      buf.append("?logging");
    }
 else     if (pathArgs.containsKey("location")) {
      buf.append("?location");
    }
  }
  return buf.toString();
}
