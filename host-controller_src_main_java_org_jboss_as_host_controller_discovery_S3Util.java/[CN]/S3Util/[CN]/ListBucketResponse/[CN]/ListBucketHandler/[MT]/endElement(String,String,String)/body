{
  if (name.equals("Name")) {
    this.name=this.currText.toString();
  }
 else   if (name.equals("Prefix") && this.isEchoedPrefix) {
    this.prefix=this.currText.toString();
    this.isEchoedPrefix=false;
  }
 else   if (name.equals("Marker")) {
    this.marker=this.currText.toString();
  }
 else   if (name.equals("MaxKeys")) {
    this.maxKeys=Integer.parseInt(this.currText.toString());
  }
 else   if (name.equals("Delimiter")) {
    this.delimiter=this.currText.toString();
  }
 else   if (name.equals("IsTruncated")) {
    this.isTruncated=Boolean.valueOf(this.currText.toString());
  }
 else   if (name.equals("NextMarker")) {
    this.nextMarker=this.currText.toString();
  }
 else   if (name.equals("Contents")) {
    this.keyEntries.add(this.keyEntry);
  }
 else   if (name.equals("Key")) {
    this.keyEntry.key=this.currText.toString();
  }
 else   if (name.equals("LastModified")) {
    try {
      this.keyEntry.lastModified=this.iso8601Parser.parse(this.currText.toString());
    }
 catch (    ParseException e) {
      throw MESSAGES.errorParsingBucketListings(e);
    }
  }
 else   if (name.equals("ETag")) {
    this.keyEntry.eTag=this.currText.toString();
  }
 else   if (name.equals("Size")) {
    this.keyEntry.size=Long.parseLong(this.currText.toString());
  }
 else   if (name.equals("StorageClass")) {
    this.keyEntry.storageClass=this.currText.toString();
  }
 else   if (name.equals("ID")) {
    this.keyEntry.owner.id=this.currText.toString();
  }
 else   if (name.equals("DisplayName")) {
    this.keyEntry.owner.displayName=this.currText.toString();
  }
 else   if (name.equals("CommonPrefixes")) {
    this.commonPrefixEntries.add(this.commonPrefixEntry);
  }
 else   if (name.equals("Prefix")) {
    this.commonPrefixEntry.prefix=this.currText.toString();
  }
  if (this.currText.length() != 0)   this.currText=new StringBuffer();
}
