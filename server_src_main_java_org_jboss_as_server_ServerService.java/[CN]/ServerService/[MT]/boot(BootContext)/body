{
  boolean ok;
  try {
    final ServerEnvironment serverEnvironment=configuration.getServerEnvironment();
    final ServiceTarget serviceTarget=context.getServiceTarget();
    serviceTarget.addListener(ServiceListener.Inheritance.ALL,bootstrapListener);
    final File[] extDirs=serverEnvironment.getJavaExtDirs();
    final File[] newExtDirs=Arrays.copyOf(extDirs,extDirs.length + 1);
    newExtDirs[extDirs.length]=new File(serverEnvironment.getServerBaseDir(),"lib/ext");
    serviceTarget.addService(org.jboss.as.server.deployment.Services.JBOSS_DEPLOYMENT_EXTENSION_INDEX,new ExtensionIndexService(newExtDirs)).setInitialMode(ServiceController.Mode.ON_DEMAND).install();
    DeployerChainAddHandler.addDeploymentProcessor(SERVER_NAME,Phase.STRUCTURE,Phase.STRUCTURE_SERVICE_MODULE_LOADER,new DeploymentUnitProcessor(){
      @Override public void deploy(      DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException {
        phaseContext.getDeploymentUnit().putAttachment(Attachments.SERVICE_MODULE_LOADER,injectedModuleLoader.getValue());
        phaseContext.getDeploymentUnit().putAttachment(Attachments.EXTERNAL_MODULE_SERVICE,injectedExternalModuleService.getValue());
      }
      @Override public void undeploy(      DeploymentUnit context){
        context.removeAttachment(Attachments.SERVICE_MODULE_LOADER);
      }
    }
);
    DeployerChainAddHandler.addDeploymentProcessor(SERVER_NAME,Phase.STRUCTURE,Phase.STRUCTURE_EXPLODED_MOUNT,new DeploymentRootExplodedMountProcessor());
    DeployerChainAddHandler.addDeploymentProcessor(SERVER_NAME,Phase.STRUCTURE,Phase.STRUCTURE_MOUNT,new DeploymentRootMountProcessor());
    DeployerChainAddHandler.addDeploymentProcessor(SERVER_NAME,Phase.STRUCTURE,Phase.STRUCTURE_MANIFEST,new ManifestAttachmentProcessor());
    DeployerChainAddHandler.addDeploymentProcessor(SERVER_NAME,Phase.STRUCTURE,Phase.STRUCTURE_ADDITIONAL_MANIFEST,new ManifestAttachmentProcessor());
    DeployerChainAddHandler.addDeploymentProcessor(SERVER_NAME,Phase.STRUCTURE,Phase.STRUCTURE_SUB_DEPLOYMENT,new SubDeploymentProcessor());
    DeployerChainAddHandler.addDeploymentProcessor(SERVER_NAME,Phase.STRUCTURE,Phase.STRUCTURE_MODULE_IDENTIFIERS,new ModuleIdentifierProcessor());
    DeployerChainAddHandler.addDeploymentProcessor(SERVER_NAME,Phase.STRUCTURE,Phase.STRUCTURE_ANNOTATION_INDEX,new AnnotationIndexProcessor());
    DeployerChainAddHandler.addDeploymentProcessor(SERVER_NAME,Phase.STRUCTURE,Phase.STRUCTURE_JBOSS_DEPLOYMENT_STRUCTURE_DESCRIPTOR,new DeploymentStructureDescriptorParser());
    DeployerChainAddHandler.addDeploymentProcessor(SERVER_NAME,Phase.STRUCTURE,Phase.STRUCTURE_CLASS_PATH,new ManifestClassPathProcessor());
    DeployerChainAddHandler.addDeploymentProcessor(SERVER_NAME,Phase.PARSE,Phase.PARSE_DEPENDENCIES_MANIFEST,new ManifestDependencyProcessor());
    DeployerChainAddHandler.addDeploymentProcessor(SERVER_NAME,Phase.PARSE,Phase.PARSE_COMPOSITE_ANNOTATION_INDEX,new CompositeIndexProcessor());
    DeployerChainAddHandler.addDeploymentProcessor(SERVER_NAME,Phase.PARSE,Phase.PARSE_EXTENSION_LIST,new ManifestExtensionListProcessor());
    DeployerChainAddHandler.addDeploymentProcessor(SERVER_NAME,Phase.PARSE,Phase.PARSE_EXTENSION_NAME,new ManifestExtensionNameProcessor());
    DeployerChainAddHandler.addDeploymentProcessor(SERVER_NAME,Phase.PARSE,Phase.PARSE_SERVICE_LOADER_DEPLOYMENT,new ServiceLoaderProcessor());
    DeployerChainAddHandler.addDeploymentProcessor(SERVER_NAME,Phase.DEPENDENCIES,Phase.DEPENDENCIES_MODULE,new ModuleDependencyProcessor());
    DeployerChainAddHandler.addDeploymentProcessor(SERVER_NAME,Phase.DEPENDENCIES,Phase.DEPENDENCIES_SAR_MODULE,new ServiceActivatorDependencyProcessor());
    DeployerChainAddHandler.addDeploymentProcessor(SERVER_NAME,Phase.DEPENDENCIES,Phase.DEPENDENCIES_CLASS_PATH,new ModuleClassPathProcessor());
    DeployerChainAddHandler.addDeploymentProcessor(SERVER_NAME,Phase.DEPENDENCIES,Phase.DEPENDENCIES_EXTENSION_LIST,new ModuleExtensionListProcessor());
    DeployerChainAddHandler.addDeploymentProcessor(SERVER_NAME,Phase.DEPENDENCIES,Phase.DEPENDENCIES_SUB_DEPLOYMENTS,new SubDeploymentDependencyProcessor());
    DeployerChainAddHandler.addDeploymentProcessor(SERVER_NAME,Phase.DEPENDENCIES,Phase.DEPENDENCIES_JDK,new ServerDependenciesProcessor());
    DeployerChainAddHandler.addDeploymentProcessor(SERVER_NAME,Phase.DEPENDENCIES,Phase.DEPENDENCIES_VISIBLE_MODULES,new DeploymentVisibilityProcessor());
    DeployerChainAddHandler.addDeploymentProcessor(SERVER_NAME,Phase.DEPENDENCIES,Phase.DEPENDENCIES_DRIVERS,new DriverDependenciesProcessor());
    DeployerChainAddHandler.addDeploymentProcessor(SERVER_NAME,Phase.CONFIGURE_MODULE,Phase.CONFIGURE_MODULE_SPEC,new ModuleSpecProcessor());
    DeployerChainAddHandler.addDeploymentProcessor(SERVER_NAME,Phase.POST_MODULE,Phase.POST_MODULE_INSTALL_EXTENSION,new ModuleExtensionNameProcessor());
    DeployerChainAddHandler.addDeploymentProcessor(SERVER_NAME,Phase.POST_MODULE,Phase.POST_MODULE_REFLECTION_INDEX,new InstallReflectionIndexProcessor());
    DeployerChainAddHandler.addDeploymentProcessor(SERVER_NAME,Phase.POST_MODULE,Phase.POST_MODULE_TRANSFORMER,new ClassFileTransformerProcessor());
    DeployerChainAddHandler.addDeploymentProcessor(SERVER_NAME,Phase.INSTALL,Phase.INSTALL_SERVICE_ACTIVATOR,new ServiceActivatorProcessor());
    DeployerChainAddHandler.addDeploymentProcessor(SERVER_NAME,Phase.DEPENDENCIES,Phase.DEPENDENCIES_SEAM,new Seam2Processor(serviceTarget));
    try {
      ok=boot(extensibleConfigurationPersister.load(),false);
      if (ok) {
        finishBoot();
      }
    }
  finally {
      DeployerChainAddHandler.INSTANCE.clearDeployerMap();
    }
  }
 catch (  Exception e) {
    ServerLogger.ROOT_LOGGER.caughtExceptionDuringBoot(e);
    ok=false;
  }
  if (ok) {
    bootstrapListener.tick();
  }
 else {
    ServerLogger.ROOT_LOGGER.unsuccessfulBoot();
    System.exit(1);
  }
}
