{
  final ExternalContexts externalContexts=deploymentUnit.getAttachment(Attachments.EXTERNAL_CONTEXTS);
  final ServiceName parentExternalContextServiceName=externalContexts != null ? externalContexts.getParentExternalContext(getBinderServiceName()) : null;
  final ServiceName dependencyServiceName=parentExternalContextServiceName == null ? getBinderServiceName() : parentExternalContextServiceName;
  final ServiceBuilder.DependencyType dependencyType=optional ? ServiceBuilder.DependencyType.OPTIONAL : ServiceBuilder.DependencyType.REQUIRED;
  serviceBuilder.addDependency(dependencyType,dependencyServiceName);
  final Injector<NamingStore> lookupInjector=new Injector<NamingStore>(){
    @Override public void uninject(){
      targetInjector.uninject();
    }
    @Override public void inject(    final NamingStore value) throws InjectionException {
      final NamingContext storeBaseContext=new NamingContext(value,null);
      final ManagedReferenceFactory factory=new ManagedReferenceFactory(){
        @Override public ManagedReference getReference(){
          try {
            return new ImmediateManagedReference(storeBaseContext.lookup(getBindName()));
          }
 catch (          NamingException e) {
            if (!optional) {
              throw MESSAGES.resourceLookupForInjectionFailed(getAbsoluteJndiName(),e);
            }
 else {
              NamingLogger.ROOT_LOGGER.tracef(e,"failed to lookup %s",getAbsoluteJndiName());
            }
          }
          return null;
        }
      }
;
      targetInjector.inject(factory);
    }
  }
;
  serviceBuilder.addDependency(getParentContextServiceName(),NamingStore.class,lookupInjector);
}
