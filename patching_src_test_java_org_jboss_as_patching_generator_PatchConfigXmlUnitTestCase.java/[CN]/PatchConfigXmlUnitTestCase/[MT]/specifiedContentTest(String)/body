{
  final InputStream is=getResource(configFile);
  final PatchConfig patchConfig=PatchConfigXml.parse(is);
  Map<ModificationType,Set<String>> content=new HashMap<ModificationType,Set<String>>();
  Set<String> adds=new HashSet<String>(Arrays.asList("modules/org/jboss/as/test/main","modules/org/jboss/as/test/prod","bundles/org/jboss/as/test/main","bundles/org/jboss/as/test/prod","test/file","test/file2"));
  content.put(ModificationType.ADD,adds);
  Set<String> mods=new HashSet<String>(Arrays.asList("modules/org/jboss/as/test2/main","modules/org/jboss/as/test2/prod","bundles/org/jboss/as/test2/main","bundles/org/jboss/as/test2/prod","test/file3","test/file4"));
  content.put(ModificationType.MODIFY,mods);
  Set<String> rems=new HashSet<String>(Arrays.asList("modules/org/jboss/as/test3/main","modules/org/jboss/as/test3/prod","bundles/org/jboss/as/test3/main","bundles/org/jboss/as/test3/prod","test/file5","test/file6"));
  content.put(ModificationType.REMOVE,rems);
  for (  Map<ModificationType,SortedSet<DistributionContentItem>> map : patchConfig.getSpecifiedContent().values()) {
    for (    Map.Entry<ModificationType,SortedSet<DistributionContentItem>> entry : map.entrySet()) {
      for (      DistributionContentItem item : entry.getValue()) {
        String path=item.getPath();
        assertTrue(path,content.get(entry.getKey()).remove(path));
      }
    }
  }
  for (  Set<String> set : content.values()) {
    assertTrue(set.toString(),set.isEmpty());
  }
  Set<String> validInUse=new HashSet<String>(Arrays.asList("test/file3","test/file5"));
  validateInRuntimeUse(patchConfig,validInUse);
}
