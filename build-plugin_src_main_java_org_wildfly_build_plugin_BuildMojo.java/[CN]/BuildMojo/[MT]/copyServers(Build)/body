{
  File baseDir=new File(buildName,serverName);
  deleteRecursive(baseDir);
  final Path path=Paths.get(baseDir.getAbsolutePath());
  for (  final Server server : build.getServers()) {
    final Path base=Paths.get(server.getPath());
    Files.walkFileTree(base,new FileVisitor<Path>(){
      @Override public FileVisitResult preVisitDirectory(      Path dir,      BasicFileAttributes attrs) throws IOException {
        String relative=base.relativize(dir).toString();
        boolean include=server.includeFile(relative);
        if (include) {
          Path rel=path.resolve(relative);
          if (!Files.isDirectory(rel)) {
            if (!rel.toFile().mkdirs()) {
              throw new IOException("Could not create directory " + rel.toString());
            }
          }
          return FileVisitResult.CONTINUE;
        }
        return FileVisitResult.SKIP_SUBTREE;
      }
      @Override public FileVisitResult visitFile(      Path file,      BasicFileAttributes attrs) throws IOException {
        String relative=base.relativize(file).toString();
        if (!server.includeFile(relative)) {
          return FileVisitResult.CONTINUE;
        }
        Path targetFile=path.resolve(relative);
        copyFile(file.toFile(),targetFile.toFile());
        if (!OS_WINDOWS) {
          Files.setPosixFilePermissions(targetFile,Files.getPosixFilePermissions(file));
        }
        return FileVisitResult.CONTINUE;
      }
      @Override public FileVisitResult visitFileFailed(      Path file,      IOException exc) throws IOException {
        return FileVisitResult.TERMINATE;
      }
      @Override public FileVisitResult postVisitDirectory(      Path dir,      IOException exc) throws IOException {
        return FileVisitResult.CONTINUE;
      }
    }
);
  }
}
