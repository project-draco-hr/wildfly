{
  ModelNode node=Util.createAddOperation(parentAddress);
  String code=null;
  String name=null;
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    requireNoNamespaceAttribute(reader,i);
    final String value=reader.getAttributeValue(i);
    final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
    if (notAllowed.contains(attribute)) {
      throw unexpectedAttribute(reader,i);
    }
    required.remove(attribute);
switch (attribute) {
case CODE:
{
        code=value;
        LoginModuleResourceDefinition.CODE.parseAndSetParameter(value,node,reader);
        break;
      }
case FLAG:
{
      LoginModuleResourceDefinition.FLAG.parseAndSetParameter(value,node,reader);
      break;
    }
case TYPE:
{
    MappingModuleDefinition.TYPE.parseAndSetParameter(value,node,reader);
    break;
  }
case MODULE:
{
  LoginModuleResourceDefinition.MODULE.parseAndSetParameter(value,node,reader);
  break;
}
case LOGIN_MODULE_STACK_REF:
{
JASPIMappingModuleDefinition.LOGIN_MODULE_STACK_REF.parseAndSetParameter(value,node,reader);
break;
}
case NAME:
{
name=value;
break;
}
default :
throw unexpectedAttribute(reader,i);
}
}
if (name == null) {
name=code;
}
String key=keyName + "-" + name;
if (moduleNames.put(key,1) != null) {
for (int i=2; ; i++) {
name=code + "-" + i;
key=keyName + "-" + name;
if (!moduleNames.containsKey(key)) {
moduleNames.put(key,i);
break;
}
}
}
node.get(OP_ADDR).set(parentAddress.append(keyName,name).toModelNode());
if (required.size() > 0) {
throw missingRequired(reader,required);
}
parseProperties(Element.MODULE_OPTION.getLocalName(),reader,node,LoginModuleResourceDefinition.MODULE_OPTIONS);
list.add(node);
}
