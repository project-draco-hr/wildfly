{
switch (element) {
case SECURITY_MANAGEMENT:
{
      parseSecurityManagement(reader,subsystemNode);
      break;
    }
case SECURITY_DOMAINS:
{
    final List<ModelNode> securityDomainsUpdates=parseSecurityDomains(reader,subsystemPath);
    if (securityDomainsUpdates != null) {
      operations.addAll(securityDomainsUpdates);
    }
    break;
  }
case SECURITY_PROPERTIES:
reader.discardRemainder();
break;
case VAULT:
{
final Namespace schemaVer=Namespace.forUri(reader.getNamespaceURI());
if (schemaVer == Namespace.SECURITY_1_0) {
throw unexpectedElement(reader);
}
final int count=reader.getAttributeCount();
ModelNode vault=createAddOperation(subsystemPath,VAULT,CLASSIC);
if (count > 1) {
throw unexpectedAttribute(reader,count);
}
for (int i=0; i < count; i++) {
requireNoNamespaceAttribute(reader,i);
final String value=reader.getAttributeValue(i);
final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case CODE:
{
    vault.get(CODE).set(value);
    break;
  }
default :
throw unexpectedAttribute(reader,i);
}
}
parseProperties(Element.VAULT_OPTION.getLocalName(),reader,vault,VaultResourceDefinition.OPTIONS);
operations.add(vault);
break;
}
default :
{
throw unexpectedElement(reader);
}
}
}
