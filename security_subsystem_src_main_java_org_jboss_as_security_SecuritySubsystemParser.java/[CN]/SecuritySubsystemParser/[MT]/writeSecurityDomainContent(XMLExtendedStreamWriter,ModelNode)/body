{
  Set<String> keys=policyDetails.keys();
  keys.remove(NAME);
  keys.remove(CACHE_TYPE);
  for (  String key : keys) {
    Element element=Element.forName(key);
switch (element) {
case AUTHENTICATION:
{
        ModelNode kind=policyDetails.get(AUTHENTICATION);
        for (        Property prop : kind.asPropertyList()) {
          if (CLASSIC.equals(prop.getName())) {
            writeAuthentication(writer,prop.getValue());
          }
 else           if (JASPI.equals(prop.getName())) {
            writeAuthenticationJaspi(writer,prop.getValue());
          }
        }
        break;
      }
case AUTHORIZATION:
{
      writeAuthorization(writer,policyDetails.get(AUTHORIZATION,CLASSIC));
      break;
    }
case ACL:
{
    writeACL(writer,policyDetails.get(ACL,CLASSIC));
    break;
  }
case AUDIT:
{
  writeAudit(writer,policyDetails.get(AUDIT,CLASSIC));
  break;
}
case IDENTITY_TRUST:
{
writeIdentityTrust(writer,policyDetails.get(IDENTITY_TRUST,CLASSIC));
break;
}
case MAPPING:
{
writeMapping(writer,policyDetails.get(MAPPING,CLASSIC));
break;
}
case JSSE:
{
writeJSSE(writer,policyDetails.get(JSSE,CLASSIC));
break;
}
}
}
}
