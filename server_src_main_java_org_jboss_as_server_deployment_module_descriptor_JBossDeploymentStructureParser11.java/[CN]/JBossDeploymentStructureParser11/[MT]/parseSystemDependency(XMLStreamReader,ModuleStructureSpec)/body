{
  boolean export=false;
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    final Attribute attribute=Attribute.of(reader.getAttributeName(i));
switch (attribute) {
case EXPORT:
      export=Boolean.parseBoolean(reader.getAttributeValue(i));
    break;
default :
  throw unexpectedContent(reader);
}
}
Set<String> paths=Collections.emptySet();
final MultiplePathFilterBuilder exportBuilder=PathFilters.multiplePathFilterBuilder(export);
while (reader.hasNext()) {
switch (reader.nextTag()) {
case END_ELEMENT:
{
  if (export) {
    exportBuilder.addFilter(PathFilters.getMetaInfSubdirectoriesFilter(),false);
    exportBuilder.addFilter(PathFilters.getMetaInfFilter(),false);
  }
  final PathFilter exportFilter=exportBuilder.create();
  specBuilder.addSystemDependency(DependencySpec.createSystemDependencySpec(PathFilters.getDefaultImportFilter(),exportFilter,paths));
  return;
}
case START_ELEMENT:
{
switch (Element.of(reader.getName())) {
case PATHS:
{
    paths=parseSet(reader);
    break;
  }
case EXPORTS:
{
  parseFilterList(reader,exportBuilder);
  break;
}
default :
{
throw unexpectedContent(reader);
}
}
}
}
}
}
