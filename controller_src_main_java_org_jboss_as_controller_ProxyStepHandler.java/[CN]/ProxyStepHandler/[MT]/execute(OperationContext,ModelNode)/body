{
  OperationMessageHandler messageHandler=new DelegatingMessageHandler(context);
  final AtomicReference<ModelController.OperationTransaction> txRef=new AtomicReference<ModelController.OperationTransaction>();
  final AtomicReference<ModelNode> preparedResultRef=new AtomicReference<ModelNode>();
  final AtomicReference<ModelNode> finalResultRef=new AtomicReference<ModelNode>();
  final ProxyController.ProxyOperationControl proxyControl=new ProxyController.ProxyOperationControl(){
    @Override public void operationPrepared(    ModelController.OperationTransaction transaction,    ModelNode result){
      txRef.set(transaction);
      preparedResultRef.set(result);
    }
    @Override public void operationFailed(    ModelNode response){
      finalResultRef.set(response);
    }
    @Override public void operationCompleted(    ModelNode response){
      finalResultRef.set(response);
    }
  }
;
  if (proxyController instanceof TransformingProxyController) {
    final TransformingProxyController transformingProxyController=(TransformingProxyController)proxyController;
    final OperationTransformer.TransformedOperation result=transformingProxyController.transformOperation(context,operation);
    final ModelNode transformedOperation=result.getTransformedOperation();
    final OperationResultTransformer resultTransformer=result.getResultTransformer();
    if (transformedOperation != null) {
      final ProxyController.ProxyOperationControl transformingProxyControl=new ProxyController.ProxyOperationControl(){
        @Override public void operationFailed(        final ModelNode response){
          final ModelNode transformed;
          if (result.rejectOperation(response)) {
            final ModelNode newResponse=new ModelNode();
            newResponse.get(OUTCOME).set(FAILED);
            newResponse.get(FAILURE_DESCRIPTION).set(result.getFailureDescription());
            transformed=newResponse;
          }
 else {
            transformed=response;
          }
          final ModelNode result=resultTransformer.transformResult(transformed);
          proxyControl.operationFailed(result);
        }
        @Override public void operationCompleted(        ModelNode response){
          final ModelNode result=resultTransformer.transformResult(response);
          proxyControl.operationCompleted(result);
        }
        @Override public void operationPrepared(        ModelController.OperationTransaction transaction,        ModelNode response){
          final ModelNode transformed;
          if (result.rejectOperation(response)) {
            final ModelNode newResponse=new ModelNode();
            newResponse.get(OUTCOME).set(FAILED);
            newResponse.get(FAILURE_DESCRIPTION).set(result.getFailureDescription());
            transformed=newResponse;
          }
 else {
            transformed=response;
          }
          proxyControl.operationPrepared(transaction,transformed);
        }
      }
;
      proxyController.execute(transformedOperation,messageHandler,transformingProxyControl,new DelegatingOperationAttachments(context));
    }
 else {
      final ModelNode transformedResult=resultTransformer.transformResult(new ModelNode());
      if (transformedResult != null) {
        context.getResult().set(transformedResult);
      }
      context.completeStep(OperationContext.RollbackHandler.NOOP_ROLLBACK_HANDLER);
      return;
    }
  }
 else {
    proxyController.execute(operation,messageHandler,proxyControl,new DelegatingOperationAttachments(context));
  }
  ModelNode finalResult=finalResultRef.get();
  if (finalResult != null) {
    context.getResult().set(finalResult.get(RESULT));
    context.getFailureDescription().set(finalResult.get(FAILURE_DESCRIPTION));
    if (finalResult.hasDefined(RESPONSE_HEADERS)) {
      context.getResponseHeaders().set(finalResult.get(RESPONSE_HEADERS));
    }
    context.completeStep(OperationContext.RollbackHandler.NOOP_ROLLBACK_HANDLER);
  }
 else {
    completeRemoteTransaction(context,operation,txRef,preparedResultRef,finalResultRef);
  }
}
