{
  OperationMessageHandler messageHandler=new DelegatingMessageHandler(context);
  final CountDownLatch completedLatch=new CountDownLatch(1);
  final AtomicReference<NewModelController.OperationTransaction> txRef=new AtomicReference<NewModelController.OperationTransaction>();
  final AtomicReference<ModelNode> preparedResultRef=new AtomicReference<ModelNode>();
  final AtomicReference<ModelNode> finalResultRef=new AtomicReference<ModelNode>();
  final NewProxyController.ProxyOperationControl proxyControl=new NewProxyController.ProxyOperationControl(){
    @Override public void operationPrepared(    NewModelController.OperationTransaction transaction,    ModelNode result){
      txRef.set(transaction);
      preparedResultRef.set(result);
    }
    @Override public void operationFailed(    ModelNode response){
      finalResultRef.set(response);
    }
    @Override public void operationCompleted(    ModelNode response){
      finalResultRef.set(response);
      completedLatch.countDown();
    }
  }
;
  final ModelNode execute=operation.clone();
  final PathAddress addr=PathAddress.pathAddress(execute.require(ADDRESS));
  if (addr.size() > 0) {
    final PathAddress newAddr;
    if (addr.size() == proxyController.getProxyNodeAddress().size()) {
      newAddr=PathAddress.EMPTY_ADDRESS;
    }
 else     if (proxyController.getProxyNodeAddress().size() > addr.size()) {
      throw new IllegalArgumentException(addr + " does not appear to capture proxy " + proxyController.getProxyNodeAddress());
    }
 else {
      newAddr=addr.subAddress(proxyController.getProxyNodeAddress().size());
    }
    execute.get(ADDRESS).set(newAddr.toModelNode());
  }
  proxyController.execute(execute,messageHandler,proxyControl,new DelegatingOperationAttachments(context));
  ModelNode finalResult=finalResultRef.get();
  if (finalResult != null) {
    context.getResult().set(finalResult.get(RESULT));
    context.getFailureDescription().set(finalResult.get(FAILURE_DESCRIPTION));
    context.completeStep();
  }
 else {
    ModelNode preparedResult=preparedResultRef.get();
    context.getResult().set(preparedResult.get(RESULT));
    if (preparedResult.hasDefined(FAILURE_DESCRIPTION)) {
      context.getFailureDescription().set(preparedResult.get(FAILURE_DESCRIPTION));
    }
    boolean waitForCompletion=false;
    NewOperationContext.ResultAction resultAction=context.completeStep();
    NewModelController.OperationTransaction tx=txRef.get();
    if (tx != null) {
      if (resultAction == NewOperationContext.ResultAction.KEEP) {
        tx.commit();
        waitForCompletion=true;
      }
 else {
        tx.rollback();
      }
    }
    try {
      if (waitForCompletion) {
        completedLatch.await();
      }
    }
 catch (    InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new RuntimeException("Thread was interrupted waiting for final result from transaction");
    }
  }
}
