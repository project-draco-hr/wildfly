{
  final SecurityContext securityContext=doPrivileged(securityContext());
  if (securityContext == null) {
    return false;
  }
  RoleGroup roleGroup=null;
  RunAs runAs=securityContext.getIncomingRunAs();
  if (runAs != null && runAs instanceof RunAsIdentity) {
    RunAsIdentity runAsIdentity=(RunAsIdentity)runAs;
    roleGroup=runAsIdentity.getRunAsRolesAsRoleGroup();
  }
 else {
    AuthorizationManager am=securityContext.getAuthorizationManager();
    SecurityContextCallbackHandler scb=new SecurityContextCallbackHandler(securityContext);
    roleGroup=am.getSubjectRoles(securityContext.getSubjectInfo().getAuthenticatedSubject(),scb);
  }
  List<Role> roles=roleGroup.getRoles();
  Set<String> requiredRoles=new HashSet<String>();
  for (  String current : roleNames) {
    requiredRoles.add(current);
  }
  Set<String> actualRoles=new HashSet<String>();
  for (  Role current : roles) {
    actualRoles.add(current.getRoleName());
  }
  boolean userNotInRole=Collections.disjoint(requiredRoles,actualRoles);
  return userNotInRole == false;
}
