{
  final SecurityContext previous=SecurityContextAssociation.getSecurityContext();
  contexts.push(previous);
  SecurityContext current=establishSecurityContext(securityDomain);
  if (previous != null) {
    current.setSubjectInfo(previous.getSubjectInfo());
    current.setIncomingRunAs(previous.getOutgoingRunAs());
  }
  RunAs currentRunAs=current.getIncomingRunAs();
  boolean trusted=currentRunAs != null && currentRunAs instanceof RunAsIdentity;
  if (trusted == false) {
    boolean authenticated=false;
    if (SecurityActions.remotingContextIsSet()) {
      SecurityContextUtil util=current.getUtil();
      UserInfo userInfo=SecurityActions.remotingContextGetConnection().getUserInfo();
      Principal p=null;
      String credential=null;
      Subject subject=null;
      if (userInfo instanceof SubjectUserInfo) {
        SubjectUserInfo sinfo=(SubjectUserInfo)userInfo;
        subject=sinfo.getSubject();
        Set<PasswordCredential> pcSet=subject.getPrivateCredentials(PasswordCredential.class);
        if (pcSet.size() > 0) {
          PasswordCredential pc=pcSet.iterator().next();
          p=new SimplePrincipal(pc.getUserName());
          credential=new String(pc.getCredential());
          SecurityActions.remotingContextClear();
        }
        if ((p == null || credential == null) && userInfo instanceof UniqueIdUserInfo) {
          UniqueIdUserInfo uinfo=(UniqueIdUserInfo)userInfo;
          p=new SimplePrincipal(sinfo.getUserName());
          credential=uinfo.getId();
        }
      }
      if (p == null || credential == null) {
        p=new SimplePrincipal(UUID.randomUUID().toString());
        credential=UUID.randomUUID().toString();
      }
      util.createSubjectInfo(p,credential,subject);
    }
    if (authenticated == false) {
      authenticated=authenticate(current,null);
    }
    if (authenticated == false) {
      throw SecurityMessages.MESSAGES.invalidUserException();
    }
  }
  if (runAs != null) {
    RunAs runAsIdentity=new RunAsIdentity(runAs,runAsPrincipal,extraRoles);
    current.setOutgoingRunAs(runAsIdentity);
  }
 else   if (previous != null && previous.getOutgoingRunAs() != null) {
    current.setOutgoingRunAs(previous.getOutgoingRunAs());
  }
}
