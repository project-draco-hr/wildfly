{
  AccessController.doPrivileged(new PrivilegedAction<Object>(){
    public Object run(){
      if (Security.getProperty(saslProvider.getName()) == null) {
        Security.insertProviderAt(saslProvider,1);
      }
      return null;
    }
  }
);
  try {
    configuration.validate();
    String jbossHomeDir=configuration.getJbossHome();
    final String additionalJavaOpts=System.getProperty("jboss.options");
    File modulesJar=new File(jbossHomeDir + "/jboss-modules.jar");
    if (modulesJar.exists() == false)     throw new IllegalStateException("Cannot find: " + modulesJar);
    String javaHome=configuration.getJavaHome();
    String java=(javaHome != null) ? javaHome + "/bin/java" : "java";
    File domainDir=configuration.getDomainDirectory() != null ? new File(configuration.getDomainDirectory()) : new File(new File(jbossHomeDir),"domain");
    String domainPath=domainDir.getAbsolutePath();
    final String modulePath;
    if (configuration.getModulePath() != null && !configuration.getModulePath().isEmpty()) {
      modulePath=configuration.getModulePath();
    }
 else {
      modulePath=jbossHomeDir + "/modules";
    }
    File usersFile=new File(domainPath + "/configuration/mgmt-users.properties");
    FileOutputStream fos=new FileOutputStream(usersFile);
    PrintWriter pw=new PrintWriter(fos);
    pw.println(USERNAME + "=" + new UsernamePasswordHashUtil().generateHashedHexURP(USERNAME,"ManagementRealm",PASSWORD.toCharArray()));
    pw.println("slave=" + new UsernamePasswordHashUtil().generateHashedHexURP("slave","ManagementRealm","slave_user_password".toCharArray()));
    pw.close();
    fos.close();
    List<String> cmd=new ArrayList<String>();
    cmd.add(java);
    if (additionalJavaOpts != null) {
      for (      String opt : additionalJavaOpts.split("\\s+")) {
        cmd.add(opt);
      }
    }
    cmd.add("-Djboss.home.dir=" + jbossHomeDir);
    cmd.add("-Dorg.jboss.boot.log.file=" + domainPath + "/log/process-controller.log");
    cmd.add("-Dlogging.configuration=file:" + jbossHomeDir + "/domain/configuration/logging.properties");
    cmd.add("-jar");
    cmd.add(modulesJar.getAbsolutePath());
    cmd.add("-mp");
    cmd.add(modulePath);
    cmd.add("-logmodule");
    cmd.add("org.jboss.logmanager");
    cmd.add("org.jboss.as.process-controller");
    cmd.add("-jboss-home");
    cmd.add(jbossHomeDir);
    cmd.add("-jvm");
    cmd.add(java);
    cmd.add("--");
    cmd.add("-Dorg.jboss.boot.log.file=" + domainPath + "/log/host-controller.log");
    cmd.add("-Dlogging.configuration=file:" + jbossHomeDir + "/domain/configuration/logging.properties");
    if (additionalJavaOpts != null) {
      for (      String opt : additionalJavaOpts.split("\\s+")) {
        cmd.add(opt);
      }
    }
    cmd.add("--");
    cmd.add("-default-jvm");
    cmd.add(java);
    if (configuration.getDomainConfigFile() != null) {
      cmd.add("-domain-config");
      cmd.add(configuration.getDomainConfigFile());
    }
    if (configuration.getHostConfigFile() != null) {
      cmd.add("-host-config");
      cmd.add(configuration.getHostConfigFile());
    }
    if (configuration.getHostCommandLineProperties() != null) {
      for (      String opt : configuration.getHostCommandLineProperties().split("\\s+")) {
        cmd.add(opt);
      }
    }
    if (configuration.getDomainDirectory() != null) {
      cmd.add("-Djboss.domain.base.dir=" + configuration.getDomainDirectory());
    }
    log.info("Starting container with: " + cmd.toString());
    ProcessBuilder processBuilder=new ProcessBuilder(cmd);
    processBuilder.redirectErrorStream(true);
    long start=System.currentTimeMillis();
    process=processBuilder.start();
    new Thread(new ConsoleConsumer()).start();
    final Process proc=process;
    shutdownThread=new Thread(new Runnable(){
      @Override public void run(){
        if (proc != null) {
          proc.destroy();
          try {
            proc.waitFor();
          }
 catch (          InterruptedException e) {
            throw new RuntimeException(e);
          }
        }
      }
    }
);
    Runtime.getRuntime().addShutdownHook(shutdownThread);
    long timeout=configuration.getStartupTimeoutInSeconds() * 1000;
    boolean serversAvailable=false;
    while (timeout > 0 && serversAvailable == false) {
      serversAvailable=areServersStarted();
      if (!serversAvailable) {
        Thread.sleep(100);
        timeout-=100;
      }
    }
    if (!serversAvailable) {
      throw new TimeoutException(String.format("Managed servers were not started within [%d] seconds",configuration.getStartupTimeoutInSeconds()));
    }
    log.info("All servers started in " + (System.currentTimeMillis() - start) + " ms");
    Map<ServerIdentity,MBeanServerConnection> connections=new HashMap<ServerIdentity,MBeanServerConnection>();
    for (    Map.Entry<ServerIdentity,ServerStatus> entry : serverStatuses.entrySet()) {
switch (entry.getValue()) {
case STARTED:
        connections.put(entry.getKey(),null);
    }
  }
  log.info("Awaiting mbeanServer connections for " + connections.keySet());
  int available=0;
  int enabledCount=connections.size();
  while (timeout > 0 && available < enabledCount) {
    for (    Map.Entry<ServerIdentity,MBeanServerConnection> entry : connections.entrySet()) {
      if (entry.getValue() == null) {
        try {
          MBeanServerConnectionProvider provider=getMBeanServerConnectionProvider(entry.getKey());
          MBeanServerConnection mbeanServer=provider == null ? null : provider.getConnection();
          if (mbeanServer != null) {
            connections.put(entry.getKey(),mbeanServer);
            available++;
          }
        }
 catch (        Exception ignore) {
          log.severe(String.format("Failed accessing mbean server on %s: %s",entry.getKey(),ignore));
        }
      }
    }
    if (available < enabledCount) {
      final long sleep=100;
      Thread.sleep(sleep);
      timeout-=sleep;
    }
  }
  if (available < enabledCount) {
    ArrayList<ServerIdentity> notStartedServers=new ArrayList<ServerIdentity>();
    for (    Map.Entry<ServerIdentity,MBeanServerConnection> entry : connections.entrySet()) {
      if (entry.getValue() == null) {
        notStartedServers.add(entry.getKey());
      }
    }
    throw new TimeoutException(String.format("Could not connect to the managed server's MBeanServer for servers %s within [%d] seconds",notStartedServers.toString(),configuration.getStartupTimeoutInSeconds()));
  }
  log.info("All containers available");
}
 catch (Exception e) {
  throw new RuntimeException("Could not start container",e);
}
}
