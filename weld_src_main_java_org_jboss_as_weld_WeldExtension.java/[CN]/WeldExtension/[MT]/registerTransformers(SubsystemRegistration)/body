{
  ResourceTransformationDescriptionBuilder builder=TransformationDescriptionBuilder.Factory.createSubsystemInstance();
  builder.getAttributeBuilder().setDiscard(new DiscardAttributeChecker.DiscardAttributeValueChecker(false,false,new ModelNode(true)),WeldResourceDefinition.NON_PORTABLE_MODE_ATTRIBUTE,WeldResourceDefinition.REQUIRE_BEAN_DESCRIPTOR_ATTRIBUTE).addRejectCheck(new RejectAttributeChecker.DefaultRejectAttributeChecker(){
    @Override public String getRejectionLogMessage(    Map<String,ModelNode> attributes){
      return WeldMessages.MESSAGES.rejectAttributesMustBeTrue(attributes.keySet());
    }
    @Override protected boolean rejectAttribute(    PathAddress address,    String attributeName,    ModelNode attributeValue,    TransformationContext context){
      return !attributeValue.isDefined() || !attributeValue.asString().equals("true");
    }
  }
,WeldResourceDefinition.NON_PORTABLE_MODE_ATTRIBUTE,WeldResourceDefinition.REQUIRE_BEAN_DESCRIPTOR_ATTRIBUTE).end();
  TransformationDescription.Tools.register(builder.build(),subsystem,ModelVersion.create(1,0,0));
}
