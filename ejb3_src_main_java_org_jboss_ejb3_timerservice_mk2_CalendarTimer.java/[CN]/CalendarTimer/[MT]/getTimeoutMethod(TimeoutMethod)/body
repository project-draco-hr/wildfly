{
  String declaringClass=timeoutMethodInfo.getDeclaringClass();
  Class<?> timeoutMethodDeclaringClass=null;
  try {
    timeoutMethodDeclaringClass=Class.forName(declaringClass,false,timedObjectInvoker.getClassLoader());
  }
 catch (  ClassNotFoundException cnfe) {
    throw new RuntimeException("Could not load declaring class: " + declaringClass + " of timeout method");
  }
  String timeoutMethodName=timeoutMethodInfo.getMethodName();
  String[] timeoutMethodParams=timeoutMethodInfo.getMethodParams();
  Class<?>[] timeoutMethodParamTypes=new Class<?>[]{};
  if (timeoutMethodParams != null) {
    timeoutMethodParamTypes=new Class<?>[timeoutMethodParams.length];
    int i=0;
    for (    String paramClassName : timeoutMethodParams) {
      Class<?> methodParamClass=null;
      try {
        methodParamClass=Class.forName(paramClassName,false,timedObjectInvoker.getClassLoader());
      }
 catch (      ClassNotFoundException cnfe) {
        throw new RuntimeException("Could not load method param class: " + paramClassName + " of timeout method");
      }
      timeoutMethodParamTypes[i++]=methodParamClass;
    }
  }
  Class<?> klass=timeoutMethodDeclaringClass;
  while (klass != null) {
    Method[] methods=klass.getDeclaredMethods();
    for (    Method method : methods) {
      if (method.getName().equals(timeoutMethodName)) {
        Class<?>[] methodParamTypes=method.getParameterTypes();
        if (timeoutMethodParamTypes.length != methodParamTypes.length) {
          continue;
        }
        for (int i=0; i < methodParamTypes.length; i++) {
          if (!timeoutMethodParamTypes[i].equals(methodParamTypes[i])) {
            continue;
          }
        }
        return method;
      }
    }
    klass=klass.getSuperclass();
  }
  return null;
}
