{
  final BlockingQueue<SyslogServerEventIF> queue=BlockedSyslogServerEventHandler.getQueue();
  queue.clear();
  SyslogServerEventIF syslogEvent=null;
  makeOneLog();
  syslogEvent=queue.poll(1 * ADJUSTED_SECOND,TimeUnit.MILLISECONDS);
  Assert.assertNull("No message was expected in the syslog",syslogEvent);
  try {
    setAuditlogEnabled(true);
    syslogEvent=queue.poll(5 * ADJUSTED_SECOND,TimeUnit.MILLISECONDS);
    Assert.assertNotNull("Enabling audit log wasn't logged into the syslog",syslogEvent);
    Assert.assertEquals(1,syslogEvent.getFacility());
    assertAppName(AuditLogToSyslogSetup.DEFAULT_APPNAME,syslogEvent);
    makeOneLog();
    syslogEvent=queue.poll(5 * ADJUSTED_SECOND,TimeUnit.MILLISECONDS);
    Assert.assertNotNull("Auditable event was't logged into the syslog",syslogEvent);
    Assert.assertEquals(1,syslogEvent.getFacility());
    assertAppName(AuditLogToSyslogSetup.DEFAULT_APPNAME,syslogEvent);
    Utils.applyUpdate(Util.createRemoveOperation(AuditLogToSyslogSetup.AUDIT_LOG_LOGGER_SYSLOG_HANDLER_ADDR),managementClient.getControllerClient());
    syslogEvent=queue.poll(5 * ADJUSTED_SECOND,TimeUnit.MILLISECONDS);
    Assert.assertNotNull("Auditable event was't logged into the syslog",syslogEvent);
    Assert.assertEquals(1,syslogEvent.getFacility());
    assertAppName(AuditLogToSyslogSetup.DEFAULT_APPNAME,syslogEvent);
    Utils.applyUpdate(Util.createAddOperation(AuditLogToSyslogSetup.AUDIT_LOG_LOGGER_SYSLOG_HANDLER_ADDR2),managementClient.getControllerClient());
    syslogEvent=queue.poll(5 * ADJUSTED_SECOND,TimeUnit.MILLISECONDS);
    Assert.assertNotNull("Auditable event was't logged into the syslog",syslogEvent);
    Assert.assertEquals(6,syslogEvent.getFacility());
    assertAppName("TestApp",syslogEvent);
    Utils.applyUpdate(Util.getWriteAttributeOperation(AuditLogToSyslogSetup.AUDIT_SYSLOG_HANDLER_ADDR2,APP_NAME,new ModelNode("Stuff")),managementClient.getControllerClient());
    syslogEvent=queue.poll(5 * ADJUSTED_SECOND,TimeUnit.MILLISECONDS);
    Assert.assertNotNull("Auditable event was't logged into the syslog",syslogEvent);
    Assert.assertEquals(6,syslogEvent.getFacility());
    assertAppName("Stuff",syslogEvent);
    Utils.applyUpdate(Util.getWriteAttributeOperation(AuditLogToSyslogSetup.AUDIT_SYSLOG_HANDLER_ADDR2,APP_NAME,new ModelNode()),managementClient.getControllerClient());
    syslogEvent=queue.poll(5 * ADJUSTED_SECOND,TimeUnit.MILLISECONDS);
    Assert.assertNotNull("Auditable event was't logged into the syslog",syslogEvent);
    Assert.assertEquals(6,syslogEvent.getFacility());
    assertAppName(AuditLogToSyslogSetup.DEFAULT_APPNAME,syslogEvent);
    Utils.applyUpdate(Util.getWriteAttributeOperation(AuditLogToSyslogSetup.AUDIT_SYSLOG_HANDLER_ADDR2,FACILITY,new ModelNode("LOCAL_USE_0")),managementClient.getControllerClient());
    syslogEvent=queue.poll(5 * ADJUSTED_SECOND,TimeUnit.MILLISECONDS);
    Assert.assertNotNull("Auditable event was't logged into the syslog",syslogEvent);
    Assert.assertEquals(16,syslogEvent.getFacility());
    assertAppName(AuditLogToSyslogSetup.DEFAULT_APPNAME,syslogEvent);
    Utils.applyUpdate(Util.getWriteAttributeOperation(AuditLogToSyslogSetup.AUDIT_SYSLOG_HANDLER_ADDR2,FACILITY,new ModelNode()),managementClient.getControllerClient());
    syslogEvent=queue.poll(5 * ADJUSTED_SECOND,TimeUnit.MILLISECONDS);
    Assert.assertNotNull("Auditable event was't logged into the syslog",syslogEvent);
    Assert.assertEquals(1,syslogEvent.getFacility());
    assertAppName(AuditLogToSyslogSetup.DEFAULT_APPNAME,syslogEvent);
  }
  finally {
    setAuditlogEnabled(false);
  }
  syslogEvent=queue.poll(5 * ADJUSTED_SECOND,TimeUnit.MILLISECONDS);
  Assert.assertNotNull("Disabling audit log wasn't logged into the syslog",syslogEvent);
  makeOneLog();
  syslogEvent=queue.poll(1 * ADJUSTED_SECOND,TimeUnit.MILLISECONDS);
  Assert.assertNull("No message was expected in the syslog",syslogEvent);
  for (  Long property : properties) {
    Utils.applyUpdate(Util.createRemoveOperation(PathAddress.pathAddress().append(SYSTEM_PROPERTY,Long.toString(property))),managementClient.getControllerClient());
  }
  properties.clear();
}
