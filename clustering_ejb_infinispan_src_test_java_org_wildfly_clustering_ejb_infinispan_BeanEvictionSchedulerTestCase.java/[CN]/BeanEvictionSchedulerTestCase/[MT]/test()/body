{
  String name="bean";
  String evictedBeanId="evicted";
  String activeBeanId="active";
  Bean<Object,String,Object> evictedBean=mock(Bean.class);
  Bean<Object,String,Object> activeBean=mock(Bean.class);
  CommandDispatcherFactory dispatcherFactory=mock(CommandDispatcherFactory.class);
  CommandDispatcher<BeanEvictionContext<String>> dispatcher=mock(CommandDispatcher.class);
  Batcher batcher=mock(Batcher.class);
  Batch batch=mock(Batch.class);
  Evictor<String> evictor=mock(Evictor.class);
  PassivationConfiguration<Bean<Object,String,Object>> config=mock(PassivationConfiguration.class);
  BeanPassivationConfiguration passivationConfig=mock(BeanPassivationConfiguration.class);
  ArgumentCaptor<Command> capturedCommand=ArgumentCaptor.forClass(Command.class);
  ArgumentCaptor<BeanEvictionContext> capturedContext=ArgumentCaptor.forClass(BeanEvictionContext.class);
  when(dispatcherFactory.createCommandDispatcher(same(name),(BeanEvictionContext<String>)capturedContext.capture())).thenReturn(dispatcher);
  when(config.getConfiguration()).thenReturn(passivationConfig);
  when(passivationConfig.getMaxSize()).thenReturn(1);
  try (Scheduler<Bean<Object,String,Object>> scheduler=new BeanEvictionScheduler<>(name,batcher,evictor,dispatcherFactory,config)){
    BeanEvictionContext<String> context=capturedContext.getValue();
    assertSame(scheduler,context);
    when(evictedBean.getId()).thenReturn(evictedBeanId);
    when(activeBean.getId()).thenReturn(activeBeanId);
    scheduler.schedule(evictedBean);
    verifyZeroInteractions(dispatcher);
    scheduler.schedule(activeBean);
    verify(dispatcher).submitOnCluster(capturedCommand.capture());
    when(batcher.startBatch()).thenReturn(batch);
    capturedCommand.getValue().execute(context);
    verify(evictor).evict(evictedBeanId);
    verify(evictor,never()).evict(activeBeanId);
    verify(batch).close();
  }
   verify(dispatcher).close();
}
