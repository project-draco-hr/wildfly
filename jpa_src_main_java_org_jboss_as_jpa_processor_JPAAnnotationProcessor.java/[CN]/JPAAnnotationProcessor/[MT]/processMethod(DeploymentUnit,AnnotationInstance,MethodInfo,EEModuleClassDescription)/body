{
  final String methodName=methodInfo.name();
  if (!methodName.startsWith("set") || methodInfo.args().length != 1) {
    eeModuleClassDescription.setInvalid(JpaLogger.ROOT_LOGGER.setterMethodOnlyAnnotation(annotation.name().toString(),methodInfo));
    return;
  }
  final String contextNameSuffix=methodName.substring(3,4).toLowerCase(Locale.ENGLISH) + methodName.substring(4);
  final AnnotationValue declaredNameValue=annotation.value("name");
  final String declaredName=declaredNameValue != null ? declaredNameValue.asString() : null;
  final String localContextName;
  if (declaredName == null || declaredName.isEmpty()) {
    localContextName=methodInfo.declaringClass().name().toString() + "/" + contextNameSuffix;
  }
 else {
    localContextName=declaredName;
  }
  final String injectionType=methodInfo.args()[0].name().toString();
  final InjectionSource bindingSource=this.getBindingSource(deploymentUnit,annotation,injectionType,eeModuleClassDescription);
  if (bindingSource != null) {
    final BindingConfiguration bindingConfiguration=new BindingConfiguration(localContextName,bindingSource);
    eeModuleClassDescription.getBindingConfigurations().add(bindingConfiguration);
    final InjectionTarget injectionTarget=new MethodInjectionTarget(methodInfo.declaringClass().name().toString(),methodName,methodInfo.args()[0].name().toString());
    final InjectionSource injectionSource=new LookupInjectionSource(localContextName);
    final ResourceInjectionConfiguration injectionConfiguration=new ResourceInjectionConfiguration(injectionTarget,injectionSource);
    eeModuleClassDescription.addResourceInjection(injectionConfiguration);
  }
}
