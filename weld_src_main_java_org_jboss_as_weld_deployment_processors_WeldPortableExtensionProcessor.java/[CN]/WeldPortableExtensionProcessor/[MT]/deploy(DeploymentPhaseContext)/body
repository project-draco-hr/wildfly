{
  final DeploymentUnit deploymentUnit=phaseContext.getDeploymentUnit();
  if (PrivateSubDeploymentMarker.isPrivate(deploymentUnit)) {
    if (!WeldDeploymentMarker.isPartOfWeldDeployment(deploymentUnit)) {
      return;
    }
  }
 else {
    if (!WeldDeploymentMarker.isPartOfWeldDeployment(deploymentUnit)) {
      return;
    }
  }
  WeldPortableExtensions extensions=WeldPortableExtensions.getPortableExtensions(deploymentUnit);
  final Module module=deploymentUnit.getAttachment(Attachments.MODULE);
  ClassLoader oldCl=WildFlySecurityManager.getCurrentContextClassLoaderPrivileged();
  try {
    WildFlySecurityManager.setCurrentContextClassLoaderPrivileged(module.getClassLoader());
    loadAttachments(module,deploymentUnit,extensions);
    if (deploymentUnit.getParent() == null) {
      ValidatorFactory validatorFactory=deploymentUnit.getAttachment(BeanValidationAttachments.VALIDATOR_FACTORY);
      extensions.registerExtensionInstance(new HackValidationExtension(validatorFactory),deploymentUnit);
    }
  }
  finally {
    WildFlySecurityManager.setCurrentContextClassLoaderPrivileged(oldCl);
  }
}
