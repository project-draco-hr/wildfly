{
  final DeploymentUnit deploymentUnit=phaseContext.getDeploymentUnit();
  if (PrivateSubDeploymentMarker.isPrivate(deploymentUnit)) {
    if (!WeldDeploymentMarker.isPartOfWeldDeployment(deploymentUnit)) {
      return;
    }
  }
 else   if (deploymentUnit.getParent() == null) {
    if (!WeldDeploymentMarker.isPartOfWeldDeployment(deploymentUnit)) {
      return;
    }
  }
 else {
    if (!WeldDeploymentMarker.isPartOfWeldDeployment(deploymentUnit.getParent())) {
      return;
    }
  }
  final DeploymentUnit topLevelDeployment=deploymentUnit.getParent() == null ? deploymentUnit : deploymentUnit.getParent();
  final ServicesAttachment services=deploymentUnit.getAttachment(Attachments.SERVICES);
  final Module module=deploymentUnit.getAttachment(Attachments.MODULE);
  ClassLoader oldCl=WildFlySecurityManager.getCurrentContextClassLoaderPrivileged();
  try {
    WildFlySecurityManager.setCurrentContextClassLoaderPrivileged(module.getClassLoader());
    loadAttachments(services,module,deploymentUnit,topLevelDeployment);
    if (deploymentUnit.getParent() == null) {
      ValidatorFactory validatorFactory=deploymentUnit.getAttachment(BeanValidationAttachments.VALIDATOR_FACTORY);
      Metadata<Extension> metadata=new MetadataImpl<Extension>(new HackValidationExtension(validatorFactory),deploymentUnit.getName());
      topLevelDeployment.addToAttachmentList(WeldAttachments.PORTABLE_EXTENSIONS,metadata);
    }
  }
  finally {
    WildFlySecurityManager.setCurrentContextClassLoaderPrivileged(oldCl);
  }
}
