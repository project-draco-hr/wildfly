{
  PatchInfo info=new LocalPatchInfo(randomString(),PatchInfo.BASE,Collections.<String>emptyList(),env);
  String bundleName=randomString();
  File bundlesDir=env.getInstalledImage().getBundlesDir();
  createBundle(env.getInstalledImage().getJbossHome(),bundleName,true);
  byte[] existingHash=hashFile(new File(bundlesDir,bundleName));
  ContentModification bundleRemoved=new ContentModification(new BundleItem(bundleName,null,NO_CONTENT),existingHash,REMOVE);
  PatchBuilder1_1 builder=PatchBuilder1_1.create().setPatchId(randomString()).setDescription(randomString()).setIdentity(new IdentityImpl("eap",info.getVersion())).setNoUpgrade();
  PatchElementImpl element=new PatchElementImpl("patch element 01");
  builder.addElement(element);
  element.setDescription("patch element 01 description");
  element.setNoUpgrade();
  PatchElementProviderImpl provider=new PatchElementProviderImpl("base","4.5.6",false);
  provider.require("patch element 02");
  element.setProvider(provider);
  element.addContentModification(bundleRemoved);
  final Patch1_1 patch=builder.build();
  File patchDir=mkdir(tempDir,patch.getPatchId());
  createPatchXMLFile(patchDir,patch);
  File zippedPatch=createZippedPatchFile(patchDir,patch.getPatchId());
  PatchingResult result=executePatch(info,zippedPatch);
  assertPatchHasBeenApplied(result,patch);
  File bundlesPatchDirectory=env.getBundlesPatchDirectory(patch.getPatchId());
  assertDirExists(bundlesPatchDirectory);
  assertContains(bundlesPatchDirectory,getBundlePath(env,result.getPatchInfo()));
  assertDefinedAbsentBundle(getBundlePath(env,result.getPatchInfo()),bundleName);
}
