{
  final DeploymentReflectionIndex index=context.getDeploymentUnit().getAttachment(org.jboss.as.server.deployment.Attachments.REFLECTION_INDEX);
  configuration.addClientPostConstructInterceptor(getEjbCreateInterceptorFactory(),InterceptorOrder.ClientPostConstruct.INSTANCE_CREATE);
  configuration.addViewInterceptor(EntityBeanAssociatingInterceptor.FACTORY,InterceptorOrder.View.ASSOCIATING_INTERCEPTOR);
  for (  final Method method : configuration.getProxyFactory().getCachedMethods()) {
    if (method.getName().equals("getPrimaryKey") && method.getParameterTypes().length == 0) {
      configuration.addClientInterceptor(method,ViewDescription.CLIENT_DISPATCHER_INTERCEPTOR_FACTORY,InterceptorOrder.Client.CLIENT_DISPATCHER);
      configuration.addViewInterceptor(method,EntityBeanInterceptors.GET_PRIMARY_KEY,InterceptorOrder.View.COMPONENT_DISPATCHER);
    }
 else     if (method.getName().equals("remove") && method.getParameterTypes().length == 0) {
      configuration.addClientInterceptor(method,ViewDescription.CLIENT_DISPATCHER_INTERCEPTOR_FACTORY,InterceptorOrder.Client.CLIENT_DISPATCHER);
      Method remove=resolveRemoveMethod(componentConfiguration.getComponentClass(),index,componentConfiguration.getComponentName());
      configuration.addViewInterceptor(method,getEjbRemoveInterceptorFactory(remove),InterceptorOrder.View.COMPONENT_DISPATCHER);
    }
 else     if (method.getName().equals("isIdentical") && method.getParameterTypes().length == 1 && (method.getParameterTypes()[0] == EJBLocalObject.class || method.getParameterTypes()[0] == EJBObject.class)) {
      configuration.addClientInterceptor(method,ViewDescription.CLIENT_DISPATCHER_INTERCEPTOR_FACTORY,InterceptorOrder.Client.CLIENT_DISPATCHER);
      configuration.addViewInterceptor(method,EntityBeanIsIdenticalInterceptorFactory.INSTANCE,InterceptorOrder.View.COMPONENT_DISPATCHER);
    }
 else     if (method.getName().equals("getEJBLocalHome") && method.getParameterTypes().length == 0) {
      configuration.addClientInterceptor(method,ViewDescription.CLIENT_DISPATCHER_INTERCEPTOR_FACTORY,InterceptorOrder.Client.CLIENT_DISPATCHER);
      final EntityGetHomeInterceptorFactory factory=new EntityGetHomeInterceptorFactory();
      configuration.addViewInterceptor(method,factory,InterceptorOrder.View.COMPONENT_DISPATCHER);
      final EntityBeanComponentDescription entityBeanComponentDescription=(EntityBeanComponentDescription)componentConfiguration.getComponentDescription();
      componentConfiguration.getStartDependencies().add(new DependencyConfigurator<ComponentStartService>(){
        @Override public void configureDependency(        final ServiceBuilder<?> serviceBuilder,        final ComponentStartService service) throws DeploymentUnitProcessingException {
          serviceBuilder.addDependency(entityBeanComponentDescription.getEjbLocalHomeView().getServiceName(),ComponentView.class,factory.getViewToCreate());
        }
      }
);
    }
 else     if (method.getName().equals("getEJBHome") && method.getParameterTypes().length == 0) {
      configuration.addClientInterceptor(method,ViewDescription.CLIENT_DISPATCHER_INTERCEPTOR_FACTORY,InterceptorOrder.Client.CLIENT_DISPATCHER);
      final EntityGetHomeInterceptorFactory factory=new EntityGetHomeInterceptorFactory();
      configuration.addViewInterceptor(method,factory,InterceptorOrder.View.COMPONENT_DISPATCHER);
      final EntityBeanComponentDescription entityBeanComponentDescription=(EntityBeanComponentDescription)componentConfiguration.getComponentDescription();
      componentConfiguration.getStartDependencies().add(new DependencyConfigurator<ComponentStartService>(){
        @Override public void configureDependency(        final ServiceBuilder<?> serviceBuilder,        final ComponentStartService service) throws DeploymentUnitProcessingException {
          serviceBuilder.addDependency(entityBeanComponentDescription.getEjbHomeView().getServiceName(),ComponentView.class,factory.getViewToCreate());
        }
      }
);
    }
 else     if (method.getName().equals("getHandle") && method.getParameterTypes().length == 0) {
    }
 else     if ((method.getName().equals("hashCode") && method.getParameterTypes().length == 0) || method.getName().equals("equals") && method.getParameterTypes().length == 1 && method.getParameterTypes()[0] == Object.class) {
      configuration.addClientInterceptor(method,EntityBeanIdentityInterceptorFactory.INSTANCE,InterceptorOrder.Client.EJB_EQUALS_HASHCODE);
    }
 else {
      final Method componentMethod=ClassReflectionIndexUtil.findMethod(index,componentConfiguration.getComponentClass(),MethodIdentifier.getIdentifierForMethod(method));
      if (componentMethod == null) {
        handleNonBeanMethod(componentConfiguration,configuration,index,method);
      }
 else {
        if (!Modifier.isPublic(componentMethod.getModifiers())) {
          throw EjbMessages.MESSAGES.ejbBusinessMethodMustBePublic(componentMethod);
        }
        configuration.addViewInterceptor(method,new ImmediateInterceptorFactory(new ComponentDispatcherInterceptor(componentMethod)),InterceptorOrder.View.COMPONENT_DISPATCHER);
        configuration.addClientInterceptor(method,ViewDescription.CLIENT_DISPATCHER_INTERCEPTOR_FACTORY,InterceptorOrder.Client.CLIENT_DISPATCHER);
      }
    }
  }
  configuration.addClientPostConstructInterceptor(Interceptors.getTerminalInterceptorFactory(),InterceptorOrder.ClientPostConstruct.TERMINAL_INTERCEPTOR);
  configuration.addClientPreDestroyInterceptor(Interceptors.getTerminalInterceptorFactory(),InterceptorOrder.ClientPreDestroy.TERMINAL_INTERCEPTOR);
}
