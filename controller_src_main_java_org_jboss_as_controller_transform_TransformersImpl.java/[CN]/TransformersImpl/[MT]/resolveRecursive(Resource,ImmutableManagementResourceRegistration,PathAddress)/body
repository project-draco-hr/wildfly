{
  boolean isSubsystem=address.size() > 0 && !ModelDescriptionConstants.EXTENSION.equals(address.getElement(0).getKey()) && ModelDescriptionConstants.SUBSYSTEM.equals(address.getLastElement().getKey());
  if (isSubsystem) {
    String subsystemName=address.getLastElement().getValue();
    SubsystemTransformer transformer=target.getSubsystemTransformer(subsystemName);
    if (transformer != null) {
      log.info("transforming subsystem: " + subsystemName + ", to model version: "+ transformer.getMajorManagementVersion()+ "."+ transformer.getMinorManagementVersion());
      ResourceDefinition rd=TransformerRegistry.loadSubsystemDefinition(subsystemName,transformer.getMajorManagementVersion(),transformer.getMinorManagementVersion());
      ManagementResourceRegistration targetDefinition=ManagementResourceRegistration.Factory.create(rd);
      ModelNode fullSubsystemModel=Resource.Tools.readModel(resource);
      ModelNode transformed=transformer.transformModel(null,fullSubsystemModel);
      return TransformerRegistry.modelToResource(targetDefinition,transformed);
    }
    return resource;
  }
  for (  PathElement element : registration.getChildAddresses(PathAddress.EMPTY_ADDRESS)) {
    if (element.isMultiTarget()) {
      final String childType=element.getKey();
      for (      final Resource.ResourceEntry entry : resource.getChildren(childType)) {
        final ImmutableManagementResourceRegistration childRegistration=registration.getSubModel(PathAddress.pathAddress(PathElement.pathElement(childType,entry.getName())));
        Resource res=resolveRecursive(entry,childRegistration,address.append(entry.getPathElement()));
        if (!res.equals(entry)) {
          resource.removeChild(entry.getPathElement());
          resource.registerChild(entry.getPathElement(),res);
        }
      }
    }
 else {
      final Resource child=resource.getChild(element);
      final ImmutableManagementResourceRegistration childRegistration=registration.getSubModel(PathAddress.pathAddress(element));
      if (child != null) {
        Resource res=resolveRecursive(child,childRegistration,address.append(element));
        if (!res.equals(child)) {
          resource.removeChild(element);
          resource.registerChild(element,res);
        }
      }
    }
  }
  return resource;
}
