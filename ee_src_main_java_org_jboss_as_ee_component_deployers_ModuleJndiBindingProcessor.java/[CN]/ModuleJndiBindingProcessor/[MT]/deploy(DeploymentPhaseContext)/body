{
  final DeploymentUnit deploymentUnit=phaseContext.getDeploymentUnit();
  final EEApplicationClasses applicationClasses=deploymentUnit.getAttachment(Attachments.EE_APPLICATION_CLASSES_DESCRIPTION);
  final EEModuleConfiguration moduleConfiguration=deploymentUnit.getAttachment(Attachments.EE_MODULE_CONFIGURATION);
  final EEModuleDescription eeModuleDescription=deploymentUnit.getAttachment(Attachments.EE_MODULE_DESCRIPTION);
  final DeploymentClassIndex classIndex=deploymentUnit.getAttachment(org.jboss.as.server.deployment.Attachments.CLASS_INDEX);
  if (moduleConfiguration == null || DeploymentUtils.skipRepeatedActivation(deploymentUnit,0)) {
    return;
  }
  final List<ServiceName> dependencies=deploymentUnit.getAttachmentList(org.jboss.as.server.deployment.Attachments.JNDI_DEPENDENCIES);
  final Map<ServiceName,BindingConfiguration> deploymentDescriptorBindings=new HashMap<ServiceName,BindingConfiguration>();
  final List<BindingConfiguration> bindingConfigurations=eeModuleDescription.getBindingConfigurations();
  if (!DeploymentTypeMarker.isType(DeploymentType.EAR,deploymentUnit)) {
    bindingConfigurations.add(new BindingConfiguration("java:module/env",new ContextInjectionSource("env","java:module/env")));
  }
  if (deploymentUnit.getParent() == null) {
    bindingConfigurations.add(new BindingConfiguration("java:app/env",new ContextInjectionSource("env","java:app/env")));
  }
  for (  BindingConfiguration binding : bindingConfigurations) {
    final ContextNames.BindInfo bindInfo=ContextNames.bindInfoForEnvEntry(moduleConfiguration.getApplicationName(),moduleConfiguration.getModuleName(),null,false,binding.getName());
    deploymentDescriptorBindings.put(bindInfo.getBinderServiceName(),binding);
    addJndiBinding(moduleConfiguration,binding,phaseContext,dependencies);
  }
  for (  final ComponentConfiguration componentConfiguration : moduleConfiguration.getComponentConfigurations()) {
    for (    BindingConfiguration binding : componentConfiguration.getComponentDescription().getBindingConfigurations()) {
      final String bindingName=binding.getName();
      final boolean compBinding=bindingName.startsWith("java:comp") || !bindingName.startsWith("java:");
      if (componentConfiguration.getComponentDescription().getNamingMode() == ComponentNamingMode.CREATE && compBinding) {
        continue;
      }
      final ContextNames.BindInfo bindInfo=ContextNames.bindInfoForEnvEntry(moduleConfiguration.getApplicationName(),moduleConfiguration.getModuleName(),null,false,binding.getName());
      deploymentDescriptorBindings.put(bindInfo.getBinderServiceName(),binding);
      addJndiBinding(moduleConfiguration,binding,phaseContext,dependencies);
    }
  }
  final Set<String> handledClasses=new HashSet<String>();
  for (  final ComponentConfiguration componentConfiguration : moduleConfiguration.getComponentConfigurations()) {
    final Set<Class<?>> classConfigurations=new HashSet<Class<?>>();
    classConfigurations.add(componentConfiguration.getComponentClass());
    for (    final InterceptorDescription interceptor : componentConfiguration.getComponentDescription().getAllInterceptors()) {
      try {
        final ClassIndex interceptorClass=classIndex.classIndex(interceptor.getInterceptorClassName());
        classConfigurations.add(interceptorClass.getModuleClass());
      }
 catch (      ClassNotFoundException e) {
        throw MESSAGES.cannotLoadInterceptor(e,interceptor.getInterceptorClassName(),componentConfiguration.getComponentClass());
      }
    }
    processClassConfigurations(phaseContext,applicationClasses,moduleConfiguration,deploymentDescriptorBindings,handledClasses,componentConfiguration.getComponentDescription().getNamingMode(),classConfigurations,componentConfiguration.getComponentName(),dependencies);
  }
}
