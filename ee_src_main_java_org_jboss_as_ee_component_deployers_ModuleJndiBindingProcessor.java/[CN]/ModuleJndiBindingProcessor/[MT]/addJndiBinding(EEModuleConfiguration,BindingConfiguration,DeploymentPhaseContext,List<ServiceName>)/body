{
  final String bindingName=bindingConfiguration.getName().startsWith("java:") ? bindingConfiguration.getName() : "java:module/env/" + bindingConfiguration.getName();
  final ServiceVerificationHandler serviceVerificationHandler=phaseContext.getDeploymentUnit().getAttachment(org.jboss.as.server.deployment.Attachments.SERVICE_VERIFICATION_HANDLER);
  InjectionSource.ResolutionContext resolutionContext=new InjectionSource.ResolutionContext(true,module.getModuleName(),module.getModuleName(),module.getApplicationName());
  if (bindingName != null) {
    final ContextNames.BindInfo bindInfo=ContextNames.bindInfoForEnvEntry(module.getApplicationName(),module.getModuleName(),module.getModuleName(),false,bindingName);
    dependencies.add(bindInfo.getBinderServiceName());
    if (bindingName.startsWith("java:comp") || bindingName.startsWith("java:module") || bindingName.startsWith("java:app")) {
      try {
        final BinderService service=new BinderService(bindInfo.getBindName(),bindingConfiguration.getSource());
        ServiceBuilder<ManagedReferenceFactory> serviceBuilder=phaseContext.getServiceTarget().addService(bindInfo.getBinderServiceName(),service);
        bindingConfiguration.getSource().getResourceValue(resolutionContext,serviceBuilder,phaseContext,service.getManagedObjectInjector());
        serviceBuilder.addDependency(bindInfo.getParentContextServiceName(),ServiceBasedNamingStore.class,service.getNamingStoreInjector());
        serviceBuilder.install();
      }
 catch (      DuplicateServiceException e) {
        ServiceController<ManagedReferenceFactory> registered=(ServiceController<ManagedReferenceFactory>)CurrentServiceContainer.getServiceContainer().getService(bindInfo.getBinderServiceName());
        if (registered == null)         throw e;
        BinderService service=(BinderService)registered.getService();
        if (!service.getSource().equals(bindingConfiguration.getSource()))         throw EeLogger.ROOT_LOGGER.conflictingBinding(bindingName,bindingConfiguration.getSource());
      }
catch (      CircularDependencyException e) {
        throw EeLogger.ROOT_LOGGER.circularDependency(bindingName);
      }
    }
 else {
      BinderService service;
      try {
        service=new BinderService(bindInfo.getBindName(),bindingConfiguration.getSource(),true);
        ServiceBuilder<ManagedReferenceFactory> serviceBuilder=CurrentServiceContainer.getServiceContainer().addService(bindInfo.getBinderServiceName(),service);
        bindingConfiguration.getSource().getResourceValue(resolutionContext,serviceBuilder,phaseContext,service.getManagedObjectInjector());
        serviceBuilder.addDependency(bindInfo.getParentContextServiceName(),ServiceBasedNamingStore.class,service.getNamingStoreInjector());
        serviceBuilder.addListener(serviceVerificationHandler);
        serviceBuilder.install();
      }
 catch (      DuplicateServiceException e) {
        final ServiceController<ManagedReferenceFactory> controller=(ServiceController<ManagedReferenceFactory>)CurrentServiceContainer.getServiceContainer().getService(bindInfo.getBinderServiceName());
        if (controller == null)         throw e;
        service=(BinderService)controller.getService();
        if (!equals(service.getSource(),bindingConfiguration.getSource())) {
          throw EeLogger.ROOT_LOGGER.conflictingBinding(bindingName,bindingConfiguration.getSource());
        }
      }
      service.acquire();
      ServiceController<?> unitService=CurrentServiceContainer.getServiceContainer().getService(phaseContext.getDeploymentUnit().getServiceName());
      unitService.addListener(new BinderReleaseListener(service));
    }
  }
 else {
    throw EeLogger.ROOT_LOGGER.nullBindingName(bindingConfiguration);
  }
}
