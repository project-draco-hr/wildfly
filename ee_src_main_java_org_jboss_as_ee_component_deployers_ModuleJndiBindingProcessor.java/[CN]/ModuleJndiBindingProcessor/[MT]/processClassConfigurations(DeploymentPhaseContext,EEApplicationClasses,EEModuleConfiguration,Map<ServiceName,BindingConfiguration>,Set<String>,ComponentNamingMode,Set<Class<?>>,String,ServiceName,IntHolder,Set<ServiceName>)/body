{
  for (  final Class<?> clazz : classes) {
    new ClassDescriptionTraversal(clazz,applicationClasses){
      @Override protected void handle(      final Class<?> currentClass,      final EEModuleClassConfiguration configuration,      final EEModuleClassDescription classDescription) throws DeploymentUnitProcessingException {
        if (configuration == null) {
          return;
        }
        if (classDescription.isInvalid()) {
          throw new DeploymentUnitProcessingException("Component class " + classDescription.getClassName() + " for component "+ componentName+ " has errors: \n "+ classDescription.getInvalidMessage());
        }
        if (handledClasses.contains(classDescription.getClassName())) {
          return;
        }
        handledClasses.add(classDescription.getClassName());
        final Set<BindingConfiguration> classLevelBindings=new HashSet<BindingConfiguration>(configuration.getBindingConfigurations());
        for (        BindingConfiguration binding : classLevelBindings) {
          final String bindingName=binding.getName();
          final boolean compBinding=bindingName.startsWith("java:comp") || !bindingName.startsWith("java:");
          if (namingMode == ComponentNamingMode.CREATE && compBinding) {
            continue;
          }
          final ContextNames.BindInfo bindInfo=ContextNames.bindInfoForEnvEntry(moduleConfiguration.getApplicationName(),moduleConfiguration.getModuleName(),null,false,binding.getName());
          logger.tracef("Binding %s using service %s",binding.getName(),bindInfo.getBinderServiceName());
          if (deploymentDescriptorBindings.containsKey(bindInfo.getBinderServiceName())) {
            continue;
          }
          addJndiBinding(moduleConfiguration,binding,phaseContext,bindInfo.getBinderServiceName(),ownerName,handleCount,dependencies);
        }
      }
    }
.run();
  }
}
