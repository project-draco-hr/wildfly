{
  ModelNode options=new ModelNode();
  ParseUtils.requireNoAttributes(reader);
  while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
    requireNamespace(reader,expectedNs);
    final Element element=Element.forName(reader.getLocalName());
    if (element == Element.OPTION) {
      ModelNode option=null;
      final int count=reader.getAttributeCount();
      for (int i=0; i < count; i++) {
        final String attrValue=reader.getAttributeValue(i);
        if (!isNoNamespaceAttribute(reader,i)) {
          throw ParseUtils.unexpectedAttribute(reader,i);
        }
 else {
          final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case VALUE:
{
              option=ParseUtils.parsePossibleExpression(attrValue);
              break;
            }
default :
          throw ParseUtils.unexpectedAttribute(reader,i);
      }
    }
  }
  if (option == null) {
    throw ParseUtils.missingRequired(reader,Collections.singleton(Attribute.NAME));
  }
  options.add(option);
  requireNoContent(reader);
}
 else {
  throw unexpectedElement(reader);
}
}
if (!options.isDefined()) {
throw missingRequiredElement(reader,Collections.singleton(Element.OPTION));
}
addOp.get(JvmAttributes.JVM_OPTIONS).set(options);
}
