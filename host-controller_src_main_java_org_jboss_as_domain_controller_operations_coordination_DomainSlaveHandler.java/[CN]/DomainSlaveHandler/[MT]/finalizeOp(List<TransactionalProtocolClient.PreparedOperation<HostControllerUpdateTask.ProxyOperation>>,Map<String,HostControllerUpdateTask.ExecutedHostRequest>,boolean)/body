{
  boolean interruptThread=interrupted;
  try {
    boolean rollback=domainOperationContext.isCompleteRollback();
    for (    final TransactionalProtocolClient.PreparedOperation<HostControllerUpdateTask.ProxyOperation> prepared : results) {
      if (prepared.isDone()) {
        continue;
      }
      if (!rollback) {
        prepared.commit();
      }
 else {
        prepared.rollback();
      }
    }
    for (    final TransactionalProtocolClient.PreparedOperation<HostControllerUpdateTask.ProxyOperation> prepared : results) {
      final String hostName=prepared.getOperation().getName();
      try {
        final HostControllerUpdateTask.ExecutedHostRequest request=finalResults.get(hostName);
        final ModelNode finalResult=prepared.getFinalResult().get();
        final ModelNode transformedResult=request.transformResult(finalResult);
        domainOperationContext.addHostControllerResult(hostName,transformedResult);
        if (HOST_CONTROLLER_LOGGER.isTraceEnabled()) {
          HOST_CONTROLLER_LOGGER.tracef("Final result for remote host %s is %s",hostName,finalResult);
        }
      }
 catch (      InterruptedException e) {
        interruptThread=true;
        CONTROLLER_LOGGER.interruptedAwaitingFinalResponse(hostName);
      }
catch (      ExecutionException e) {
        CONTROLLER_LOGGER.caughtExceptionAwaitingFinalResponse(e.getCause(),hostName);
      }
    }
  }
  finally {
    if (interruptThread) {
      Thread.currentThread().interrupt();
    }
  }
}
