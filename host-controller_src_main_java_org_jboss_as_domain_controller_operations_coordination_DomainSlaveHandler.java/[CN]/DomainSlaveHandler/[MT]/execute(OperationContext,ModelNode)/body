{
  if (context.hasFailureDescription()) {
    context.setRollbackOnly();
    context.completeStep();
    return;
  }
  final Set<String> outstanding=new HashSet<String>(hostProxies.keySet());
  final List<TransactionalProtocolClient.PreparedOperation<NewProxyTask.ProxyOperation>> results=new ArrayList<TransactionalProtocolClient.PreparedOperation<NewProxyTask.ProxyOperation>>();
  final Map<String,Future<ModelNode>> finalResults=new HashMap<String,Future<ModelNode>>();
  final NewProxyTask.ProxyOperationListener listener=new NewProxyTask.ProxyOperationListener();
  for (  Map.Entry<String,ProxyController> entry : hostProxies.entrySet()) {
    final String host=entry.getKey();
    final TransactionalProtocolClient client=((RemoteProxyController)entry.getValue()).getTransactionalProtocolClient();
    final NewProxyTask task=new NewProxyTask(host,operation.clone(),context,client);
    final Future<ModelNode> finalResult=task.execute(listener);
    finalResults.put(host,finalResult);
  }
  boolean interrupted=false;
  try {
    while (outstanding.size() > 0) {
      try {
        final TransactionalProtocolClient.PreparedOperation<NewProxyTask.ProxyOperation> prepared=listener.retrievePreparedOperation();
        final String name=prepared.getOperation().getName();
        if (!outstanding.remove(name)) {
          ROOT_LOGGER.errorf("did not expect response from host %s",name);
          continue;
        }
        final ModelNode preparedResult=prepared.getPreparedResult();
        if (HOST_CONTROLLER_LOGGER.isTraceEnabled()) {
          HOST_CONTROLLER_LOGGER.tracef("Preliminary result for remote host %s is %s",name,preparedResult);
        }
        domainOperationContext.addHostControllerResult(name,preparedResult);
        results.add(prepared);
      }
 catch (      InterruptedException e) {
        interrupted=true;
      }
    }
    context.completeStep();
  }
  finally {
    try {
      boolean rollback=domainOperationContext.isCompleteRollback();
      for (      final TransactionalProtocolClient.PreparedOperation<NewProxyTask.ProxyOperation> prepared : results) {
        if (!rollback) {
          prepared.commit();
        }
 else {
          prepared.rollback();
        }
      }
      for (      final TransactionalProtocolClient.PreparedOperation<NewProxyTask.ProxyOperation> prepared : results) {
        final String name=prepared.getOperation().getName();
        try {
          final ModelNode finalResult=prepared.getFinalResult().get();
          domainOperationContext.addHostControllerResult(name,finalResult);
          if (HOST_CONTROLLER_LOGGER.isTraceEnabled()) {
            HOST_CONTROLLER_LOGGER.tracef("Final result for remote host %s is %s",name,finalResult);
          }
        }
 catch (        InterruptedException e) {
          interrupted=true;
          CONTROLLER_LOGGER.interruptedAwaitingFinalResponse(name);
        }
catch (        ExecutionException e) {
          CONTROLLER_LOGGER.caughtExceptionAwaitingFinalResponse(e.getCause(),name);
        }
      }
    }
  finally {
      if (interrupted) {
        Thread.currentThread().interrupt();
      }
    }
  }
}
