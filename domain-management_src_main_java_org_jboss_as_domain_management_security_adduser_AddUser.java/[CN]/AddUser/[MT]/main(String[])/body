{
  FileMode fileMode=FileMode.MANAGEMENT;
  RuntimeOptions options=new RuntimeOptions();
  options.setConsoleWrapper(new JavaConsole());
  options.setJBossHome(System.getenv(JBOSS_HOME_ENV));
  if (args.length >= 1) {
    Iterator<String> it=Arrays.asList(args).iterator();
    String temp;
    while (it.hasNext()) {
      temp=it.next();
      if (CommandLineArgument.HELP.match(temp)) {
        usage(options.getConsoleWrapper());
        return;
      }
      if (CommandLineArgument.DOMAIN_CONFIG_DIR_USERS.match(temp)) {
        options.setDomainConfigDir(it.next());
      }
 else       if (CommandLineArgument.SERVER_CONFIG_DIR_USERS.match(temp)) {
        options.setServerConfigDir(it.next());
      }
 else       if (CommandLineArgument.APPLICATION_USERS.match(temp)) {
        fileMode=FileMode.APPLICATION;
      }
 else       if (CommandLineArgument.USER_PROPERTIES.match(temp)) {
        options.setUserProperties(it.next());
      }
 else       if (CommandLineArgument.GROUP_PROPERTIES.match(temp)) {
        options.setGroupProperties(it.next());
      }
 else {
        CommandLineArgument commandLineArgument=findCommandLineOption(temp);
        if (commandLineArgument != null) {
          final String value;
          if (CommandLineArgument.SILENT.equals(commandLineArgument)) {
            value=Boolean.TRUE.toString();
          }
 else           if (CommandLineArgument.RELAX_PASSWORD.equals(commandLineArgument)) {
            value=Boolean.TRUE.toString();
          }
 else           if (CommandLineArgument.DISABLE.equals(commandLineArgument)) {
            value=Boolean.TRUE.toString();
          }
 else           if (CommandLineArgument.ENABLE.equals(commandLineArgument)) {
            value=Boolean.TRUE.toString();
          }
 else {
            value=it.hasNext() ? it.next() : null;
          }
          if (value != null) {
            argsCliProps.setProperty(commandLineArgument.key(),value);
          }
        }
 else {
          final String userKey=CommandLineArgument.USER.key();
          if (!argsCliProps.containsKey(userKey)) {
            argsCliProps.setProperty(userKey,temp);
          }
 else {
            final String passwordKey=CommandLineArgument.PASSWORD.key();
            if (!argsCliProps.containsKey(passwordKey)) {
              argsCliProps.setProperty(passwordKey,temp);
            }
 else {
              final String realmKey=CommandLineArgument.REALM.key();
              if (!argsCliProps.containsKey(realmKey)) {
                argsCliProps.setProperty(realmKey,temp);
              }
            }
          }
        }
      }
    }
  }
  if (argsCliProps.containsKey(CommandLineArgument.RELAX_PASSWORD.key())) {
    options.setRelaxPassword(true);
  }
  if (argsCliProps.containsKey(CommandLineArgument.PASSWORD.key()) || argsCliProps.containsKey(CommandLineArgument.USER.key())) {
    final String password=argsCliProps.getProperty(CommandLineArgument.PASSWORD.key());
    final String user=argsCliProps.getProperty(CommandLineArgument.USER.key());
    final boolean enableArgExists=argsCliProps.getProperty(CommandLineArgument.ENABLE.key()) != null;
    final boolean disableArgExists=argsCliProps.getProperty(CommandLineArgument.DISABLE.key()) != null;
    final boolean disable=Boolean.valueOf(argsCliProps.getProperty(CommandLineArgument.DISABLE.key()));
    options.setEnableDisableMode(enableArgExists || disableArgExists);
    options.setDisable(disable);
    if (argsCliProps.containsKey(CommandLineArgument.REALM.key())) {
      new AddUser(options,fileMode,user,password,argsCliProps.getProperty(CommandLineArgument.REALM.key()),RealmMode.USER_SUPPLIED).run();
    }
 else {
      new AddUser(options,fileMode,user,password).run();
    }
  }
 else {
    String realm=null;
    if (argsCliProps.containsKey(CommandLineArgument.REALM.key())) {
      realm=argsCliProps.getProperty(CommandLineArgument.REALM.key());
    }
    new AddUser(options,realm).run();
  }
}
