{
  ModelNode opAddr=operation.require(OP_ADDR);
  final PathAddress address=PathAddress.pathAddress(opAddr);
  final String name=address.getLastElement().getValue();
  final ModelNode compensatingOperation=Util.getResourceRemoveOperation(opAddr);
  final String selector;
  final ModelNode subModel=context.getSubModel();
  if (operation.hasDefined(SELECTOR)) {
    selector=operation.get(SELECTOR).asString();
    subModel.get(SELECTOR).set(selector);
  }
 else {
    selector=null;
  }
  if (operation.hasDefined(DURABLE)) {
    subModel.get(DURABLE).set(operation.get(DURABLE));
  }
  if (operation.hasDefined(ENTRIES)) {
    subModel.get(ENTRIES).set(operation.get(ENTRIES));
  }
  if (context.getRuntimeContext() != null) {
    context.getRuntimeContext().setRuntimeTask(new RuntimeTask(){
      public void execute(      RuntimeTaskContext context) throws OperationFailedException {
        final JMSQueueService service=new JMSQueueService(name,selector,operation.get(DURABLE).asBoolean(true),jndiBindings(operation));
        final ServiceName serviceName=JMSServices.JMS_QUEUE_BASE.append(name);
        context.getServiceTarget().addService(serviceName,service).addDependency(JMSServices.JMS_MANAGER,JMSServerManager.class,service.getJmsServer()).setInitialMode(Mode.ACTIVE).addListener(new ResultHandler.ServiceStartListener(resultHandler)).install();
      }
    }
);
  }
 else {
    resultHandler.handleResultComplete();
  }
  return new BasicOperationResult(compensatingOperation);
}
