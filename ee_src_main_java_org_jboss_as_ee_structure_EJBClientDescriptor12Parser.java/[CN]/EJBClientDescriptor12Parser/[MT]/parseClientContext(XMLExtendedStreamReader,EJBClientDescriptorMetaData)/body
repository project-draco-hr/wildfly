{
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    final Attribute attribute=Attribute.of(reader.getAttributeName(i));
    final String val=reader.getAttributeValue(i);
switch (attribute) {
case INVOCATION_TIMEOUT:
      final Long invocationTimeout=Long.parseLong(val.trim());
    ejbClientDescriptorMetaData.setInvocationTimeout(invocationTimeout);
  break;
default :
unexpectedContent(reader);
}
}
final Set<Element> visited=EnumSet.noneOf(Element.class);
while (reader.hasNext()) {
switch (reader.nextTag()) {
case END_ELEMENT:
{
return;
}
case START_ELEMENT:
{
final Element element=Element.of(reader.getName());
if (visited.contains(element)) {
this.unexpectedElement(reader);
}
visited.add(element);
switch (element) {
case EJB_RECEIVERS:
this.parseEJBReceivers(reader,ejbClientDescriptorMetaData);
break;
case CLUSTERS:
this.parseClusters(reader,ejbClientDescriptorMetaData);
break;
default :
this.unexpectedElement(reader);
}
break;
}
default :
{
unexpectedContent(reader);
}
}
}
unexpectedEndOfDocument(reader.getLocation());
}
