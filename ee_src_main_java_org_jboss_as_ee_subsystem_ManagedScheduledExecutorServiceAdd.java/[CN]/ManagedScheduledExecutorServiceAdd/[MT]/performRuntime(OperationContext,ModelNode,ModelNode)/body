{
  boolean rcPresent=context.readResourceFromRoot(PathAddress.EMPTY_ADDRESS).hasChild(PathElement.pathElement(ModelDescriptionConstants.SUBSYSTEM,RequestControllerExtension.SUBSYSTEM_NAME));
  final String name=PathAddress.pathAddress(operation.get(ModelDescriptionConstants.ADDRESS)).getLastElement().getValue();
  final String jndiName=ManagedExecutorServiceResourceDefinition.JNDI_NAME_AD.resolveModelAttribute(context,model).asString();
  final long hungTaskThreshold=ManagedScheduledExecutorServiceResourceDefinition.HUNG_TASK_THRESHOLD_AD.resolveModelAttribute(context,model).asLong();
  final boolean longRunningTasks=ManagedScheduledExecutorServiceResourceDefinition.LONG_RUNNING_TASKS_AD.resolveModelAttribute(context,model).asBoolean();
  final int coreThreads;
  final ModelNode coreThreadsModel=ManagedScheduledExecutorServiceResourceDefinition.CORE_THREADS_AD.resolveModelAttribute(context,model);
  if (coreThreadsModel.isDefined()) {
    coreThreads=coreThreadsModel.asInt();
  }
 else {
    coreThreads=(ProcessorInfo.availableProcessors() * 2);
  }
  final long keepAliveTime=ManagedScheduledExecutorServiceResourceDefinition.KEEPALIVE_TIME_AD.resolveModelAttribute(context,model).asLong();
  final TimeUnit keepAliveTimeUnit=TimeUnit.MILLISECONDS;
  final long threadLifeTime=0L;
  final AbstractManagedExecutorService.RejectPolicy rejectPolicy=AbstractManagedExecutorService.RejectPolicy.valueOf(ManagedScheduledExecutorServiceResourceDefinition.REJECT_POLICY_AD.resolveModelAttribute(context,model).asString());
  final ManagedScheduledExecutorServiceService service=new ManagedScheduledExecutorServiceService(name,jndiName,hungTaskThreshold,longRunningTasks,coreThreads,keepAliveTime,keepAliveTimeUnit,threadLifeTime,rejectPolicy);
  final ServiceBuilder<ManagedScheduledExecutorServiceAdapter> serviceBuilder=context.getServiceTarget().addService(ConcurrentServiceNames.getManagedScheduledExecutorServiceServiceName(name),service);
  String contextService=null;
  if (model.hasDefined(ManagedScheduledExecutorServiceResourceDefinition.CONTEXT_SERVICE)) {
    contextService=ManagedScheduledExecutorServiceResourceDefinition.CONTEXT_SERVICE_AD.resolveModelAttribute(context,model).asString();
  }
  if (contextService != null) {
    serviceBuilder.addDependency(ConcurrentServiceNames.getContextServiceServiceName(contextService),ContextServiceImpl.class,service.getContextServiceInjector());
  }
  String threadFactory=null;
  if (model.hasDefined(ManagedScheduledExecutorServiceResourceDefinition.THREAD_FACTORY)) {
    threadFactory=ManagedScheduledExecutorServiceResourceDefinition.THREAD_FACTORY_AD.resolveModelAttribute(context,model).asString();
  }
  if (threadFactory != null) {
    serviceBuilder.addDependency(ConcurrentServiceNames.getManagedThreadFactoryServiceName(threadFactory),ManagedThreadFactoryImpl.class,service.getManagedThreadFactoryInjector());
  }
  if (rcPresent) {
    serviceBuilder.addDependency(RequestController.SERVICE_NAME,RequestController.class,service.getRequestController());
  }
  serviceBuilder.install();
}
