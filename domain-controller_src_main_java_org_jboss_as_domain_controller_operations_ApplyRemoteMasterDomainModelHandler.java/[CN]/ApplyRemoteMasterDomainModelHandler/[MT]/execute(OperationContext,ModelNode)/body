{
  final ModelNode domainModel=operation.get(DOMAIN_MODEL);
  if (!appliedExensions) {
    final Set<String> ourServerGroups=getOurServerGroups(context);
    final Map<String,Set<byte[]>> deploymentHashes=new HashMap<String,Set<byte[]>>();
    final Set<String> relevantDeployments=new HashSet<String>();
    for (    final ModelNode resourceDescription : domainModel.asList()) {
      appliedExensions=true;
      final PathAddress resourceAddress=PathAddress.pathAddress(resourceDescription.require("domain-resource-address"));
      final Resource resource=resourceAddress.size() == 0 ? context.readResourceForUpdate(PathAddress.EMPTY_ADDRESS) : context.createResource(resourceAddress);
      if (resourceAddress.size() == 1 && resourceAddress.getElement(0).getKey().equals(ModelDescriptionConstants.EXTENSION)) {
        final String module=resourceAddress.getElement(0).getValue();
        try {
          for (          final Extension extension : Module.loadServiceFromCallerModuleLoader(ModuleIdentifier.fromString(module),Extension.class)) {
            ClassLoader oldTccl=SecurityActions.setThreadContextClassLoader(extension.getClass());
            try {
              extension.initialize(extensionContext);
            }
  finally {
              SecurityActions.setThreadContextClassLoader(oldTccl);
            }
          }
        }
 catch (        ModuleLoadException e) {
          throw new RuntimeException(e);
        }
      }
      resource.writeModel(resourceDescription.get("domain-resource-model"));
      if (resourceAddress.size() == 1 && resourceAddress.getElement(0).getKey().equals(DEPLOYMENT)) {
        ModelNode model=resource.getModel();
        String id=resourceAddress.getElement(0).getValue();
        if (model.hasDefined(CONTENT)) {
          for (          ModelNode contentItem : model.get(CONTENT).asList()) {
            if (contentItem.hasDefined(HASH)) {
              Set<byte[]> hashes=deploymentHashes.get(id);
              if (hashes == null) {
                hashes=new HashSet<byte[]>();
                deploymentHashes.put(id,hashes);
              }
              hashes.add(contentItem.get(HASH).asBytes());
            }
          }
        }
      }
 else       if (resourceAddress.size() == 2 && resourceAddress.getElement(0).getKey().equals(SERVER_GROUP) && ourServerGroups.contains(resourceAddress.getElement(0).getValue()) && resourceAddress.getElement(1).getKey().equals(DEPLOYMENT)) {
        relevantDeployments.add(resourceAddress.getElement(1).getValue());
      }
    }
    for (    String id : relevantDeployments) {
      Set<byte[]> hashes=deploymentHashes.remove(id);
      if (hashes != null) {
        for (        byte[] hash : hashes) {
          fileRepository.getDeploymentFiles(hash);
        }
      }
    }
  }
  context.completeStep();
}
