{
  context.getResult().set(new ModelNode());
  boolean pushToServers=!domainOperationContext.hasHostLevelFailures();
  if (pushToServers) {
    ModelNode ourResult=domainOperationContext.getCoordinatorResult();
    if (ourResult.has(FAILURE_DESCRIPTION)) {
      System.out.println("coordinator failed: " + ourResult);
      pushToServers=false;
      domainOperationContext.setCompleteRollback(true);
    }
 else {
      System.out.println("coordinator succeeded: " + ourResult);
      for (      ModelNode hostResult : domainOperationContext.getHostControllerResults().values()) {
        if (hostResult.has(FAILURE_DESCRIPTION)) {
          System.out.println("host failed: " + hostResult);
          pushToServers=false;
          domainOperationContext.setCompleteRollback(true);
          break;
        }
      }
    }
  }
 else   System.out.println("Complete rollback");
  if (pushToServers) {
    domainOperationContext.setCompleteRollback(false);
    final Map<ServerIdentity,ProxyTask> tasks=new HashMap<ServerIdentity,ProxyTask>();
    try {
      pushToServers(context,tasks);
      context.completeStep();
    }
  finally {
      boolean completeRollback=domainOperationContext.isCompleteRollback();
      for (      Map.Entry<ServerIdentity,ProxyTask> entry : tasks.entrySet()) {
        boolean rollback=completeRollback || domainOperationContext.isServerGroupRollback(entry.getKey().getServerGroupName());
        entry.getValue().finalizeTransaction(!rollback);
      }
    }
  }
 else {
    context.completeStep();
  }
}
