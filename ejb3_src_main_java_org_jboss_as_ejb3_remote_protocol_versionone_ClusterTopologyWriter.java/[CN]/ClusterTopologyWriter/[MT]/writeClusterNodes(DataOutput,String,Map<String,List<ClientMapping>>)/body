{
  final int memberCount=clientMappings.size();
  PackedInteger.writePackedInteger(output,memberCount);
  for (  final Map.Entry<String,List<ClientMapping>> entry : clientMappings.entrySet()) {
    final String nodeName=entry.getKey();
    output.writeUTF(nodeName);
    final List<ClientMapping> clientMappingsForNode=entry.getValue();
    if (clientMappingsForNode == null || clientMappingsForNode.isEmpty()) {
      throw new IllegalStateException("No client-mapping entries found for node " + nodeName + " in cluster "+ clusterName);
    }
    PackedInteger.writePackedInteger(output,clientMappingsForNode.size());
    for (    final ClientMapping clientMapping : clientMappingsForNode) {
      final InetAddress clientNetworkAddress=clientMapping.getSourceNetworkAddress();
      final int netMask=clientMapping.getSourceNetworkMaskBits();
      final int netMaskAndIPFamilyDifferentiator;
      if (clientNetworkAddress instanceof Inet4Address) {
        netMaskAndIPFamilyDifferentiator=(netMask << 1) | 1;
      }
 else {
        netMaskAndIPFamilyDifferentiator=(netMask << 1);
      }
      PackedInteger.writePackedInteger(output,netMaskAndIPFamilyDifferentiator);
      output.write(clientNetworkAddress.getAddress());
      output.writeUTF(clientMapping.getDestinationAddress());
      output.writeShort(clientMapping.getDestinationPort());
    }
  }
}
