{
  final ClassLoader cl=SecurityActions.getContextClassLoader();
  try {
    SecurityActions.setContextClassLoader(classLoader);
    beanManager=(BeanManagerImpl)weldContainer.getValue().getBeanManager(beanDeploymentArchiveId);
    for (    final Class<?> interceptor : interceptorClasses) {
      interceptorInjections.put(interceptor,WeldEEInjection.createWeldEEInjection(interceptor,null,beanManager));
    }
    if (ejbName != null) {
      EjbDescriptor<Object> descriptor=beanManager.getEjbDescriptor(ejbName);
      if (descriptor != null) {
        bean=beanManager.getBean(descriptor);
      }
    }
 else     if (delegateProduce) {
      final Set<Annotation> qualifiers=new HashSet<Annotation>();
      for (      Annotation annotation : componentClass.getAnnotations()) {
        if (beanManager.isQualifier(annotation.annotationType())) {
          qualifiers.add(annotation);
        }
      }
      Set<Bean<?>> beans=beanManager.getBeans(componentClass,qualifiers);
      boolean found=false;
      for (      Bean<?> bean : beans) {
        if (bean instanceof ManagedBean) {
          found=true;
          this.bean=bean;
          break;
        }
      }
      if (!found) {
        WeldLogger.DEPLOYMENT_LOGGER.debugf("Could not find bean for %s, interception and decoration will be unavailable",componentClass);
      }
    }
    injectionTarget=WeldEEInjection.createWeldEEInjection(componentClass,bean,beanManager);
  }
  finally {
    SecurityActions.setContextClassLoader(cl);
  }
}
