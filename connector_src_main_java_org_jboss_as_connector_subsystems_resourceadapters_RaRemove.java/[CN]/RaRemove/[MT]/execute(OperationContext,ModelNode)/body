{
  final ModelNode opAddr=operation.require(OP_ADDR);
  final String name=PathAddress.pathAddress(opAddr).getLastElement().getValue();
  final ModelNode model=context.readModel(PathAddress.EMPTY_ADDRESS);
  final String archiveOrModuleName;
  if (model.get(ARCHIVE.getName()).isDefined()) {
    archiveOrModuleName=ARCHIVE.resolveModelAttribute(context,model).asString();
  }
 else {
    archiveOrModuleName=MODULE.resolveModelAttribute(context,model).asString();
  }
  final ModelNode compensating=Util.getEmptyOperation(ADD,opAddr);
  if (model.hasDefined(RESOURCEADAPTERS_NAME)) {
    for (    ModelNode raNode : model.get(RESOURCEADAPTERS_NAME).asList()) {
      ModelNode raCompensatingNode=raNode.clone();
      compensating.get(RESOURCEADAPTERS_NAME).add(raCompensatingNode);
    }
  }
  context.removeResource(PathAddress.EMPTY_ADDRESS);
  context.addStep(new OperationStepHandler(){
    public void execute(    OperationContext context,    ModelNode operation) throws OperationFailedException {
      final boolean wasActive=RaOperationUtil.deactivateIfActive(context,name);
      ServiceName raServiceName=ServiceName.of(ConnectorServices.RA_SERVICE,name);
      ServiceController<?> serviceController=context.getServiceRegistry(false).getService(raServiceName);
      final ModifiableResourceAdapter resourceAdapter;
      if (serviceController != null) {
        resourceAdapter=(ModifiableResourceAdapter)serviceController.getValue();
      }
 else {
        resourceAdapter=null;
      }
      final List<ServiceName> serviceNameList=context.getServiceRegistry(false).getServiceNames();
      for (      ServiceName name : serviceNameList) {
        if (raServiceName.isParentOf(name)) {
          context.removeService(name);
        }
      }
      if (model.get(MODULE.getName()).isDefined()) {
        ServiceName deployerServiceName=ConnectorServices.RESOURCE_ADAPTER_DEPLOYER_SERVICE_PREFIX.append(name);
        context.removeService(deployerServiceName);
        ServiceName inactiveServiceName=ConnectorServices.INACTIVE_RESOURCE_ADAPTER_SERVICE.append(name);
        context.removeService(inactiveServiceName);
      }
      context.removeService(raServiceName);
      context.completeStep(new OperationContext.RollbackHandler(){
        @Override public void handleRollback(        OperationContext context,        ModelNode operation){
          if (resourceAdapter != null) {
            List<ServiceController<?>> newControllers=new LinkedList<ServiceController<?>>();
            if (model.get(ARCHIVE.getName()).isDefined()) {
              RaOperationUtil.installRaServices(context,new ServiceVerificationHandler(),name,resourceAdapter,newControllers);
            }
 else {
              try {
                RaOperationUtil.installRaServicesAndDeployFromModule(context,new ServiceVerificationHandler(),name,resourceAdapter,archiveOrModuleName,newControllers);
              }
 catch (              OperationFailedException e) {
              }
            }
            try {
              if (wasActive)               RaOperationUtil.activate(context,archiveOrModuleName,archiveOrModuleName,null);
            }
 catch (            OperationFailedException e) {
            }
          }
        }
      }
);
    }
  }
,OperationContext.Stage.RUNTIME);
  context.stepCompleted();
}
