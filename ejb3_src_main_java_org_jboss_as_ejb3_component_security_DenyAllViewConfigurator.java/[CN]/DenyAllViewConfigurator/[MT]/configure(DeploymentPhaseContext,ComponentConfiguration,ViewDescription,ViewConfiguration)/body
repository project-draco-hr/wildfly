{
  final EJBComponentDescription ejbComponentDescription=(EJBComponentDescription)componentConfiguration.getComponentDescription();
  final Collection<EJBMethodIdentifier> denyAllMethodsForView=ejbComponentDescription.getDenyAllMethodsForView(viewDescription.getViewClassName());
  if (denyAllMethodsForView == null || denyAllMethodsForView.isEmpty()) {
    return;
  }
  final DeploymentReflectionIndex deploymentReflectionIndex=context.getDeploymentUnit().getAttachment(REFLECTION_INDEX);
  final ClassReflectionIndex<?> classReflectionIndex=deploymentReflectionIndex.getClassIndex(componentConfiguration.getComponentClass());
  final Method[] viewMethods=viewConfiguration.getProxyFactory().getCachedMethods();
  for (  final Method viewMethod : viewMethods) {
    final Method componentMethod=ClassReflectionIndexUtil.findRequiredMethod(deploymentReflectionIndex,classReflectionIndex,viewMethod);
    final EJBMethodIdentifier ejbMethodIdentifier=EJBMethodIdentifier.fromMethod(componentMethod);
    if (denyAllMethodsForView.contains(ejbMethodIdentifier)) {
      viewConfiguration.addViewInterceptor(viewMethod,new ImmediateInterceptorFactory(new DenyAllInterceptor()),InterceptorOrder.View.EJB_SECURITY_DENY_ALL_INTERCEPTOR);
      continue;
    }
    final Class<?> declaringClass=componentMethod.getDeclaringClass();
    if (ejbComponentDescription.isDenyAllApplicableToClass(declaringClass.getName())) {
      viewConfiguration.addViewInterceptor(viewMethod,new ImmediateInterceptorFactory(new DenyAllInterceptor()),InterceptorOrder.View.EJB_SECURITY_DENY_ALL_INTERCEPTOR);
      continue;
    }
  }
}
