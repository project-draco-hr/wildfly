{
  while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
    final Element element=Element.forName(reader.getLocalName());
switch (element) {
case PROPERTY:
      final int count=reader.getAttributeCount();
    String name=null, value=null;
  for (int i=0; i < count; i++) {
    final String attributeValue=getAttribute(reader,i,propertyReplacer);
    final String attributeNamespace=reader.getAttributeNamespace(i);
    if (attributeNamespace != null && !attributeNamespace.isEmpty()) {
      continue;
    }
    final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case NAME:
      name=attributeValue;
    break;
case VALUE:
  value=attributeValue;
if (name != null && value != null) {
  properties.put(name,value);
}
name=value=null;
break;
default :
throw unexpectedAttribute(reader,i);
}
}
if (reader.hasNext() && (reader.nextTag() != END_ELEMENT)) throw unexpectedElement(reader);
break;
default :
throw unexpectedElement(reader);
}
}
}
