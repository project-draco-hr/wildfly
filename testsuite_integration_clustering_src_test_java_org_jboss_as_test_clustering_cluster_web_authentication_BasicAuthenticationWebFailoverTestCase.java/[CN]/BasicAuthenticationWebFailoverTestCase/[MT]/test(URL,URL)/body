{
  CredentialsProvider provider=new BasicCredentialsProvider();
  HttpClient client=HttpClients.custom().setDefaultCredentialsProvider(provider).build();
  URI uri1=SecureServlet.createURI(baseURL1);
  URI uri2=SecureServlet.createURI(baseURL2);
  try {
    setCredentials(provider,"forbidden","password",baseURL1,baseURL2);
    HttpResponse response=client.execute(new HttpGet(uri1));
    try {
      Assert.assertEquals(HttpServletResponse.SC_FORBIDDEN,response.getStatusLine().getStatusCode());
    }
  finally {
      HttpClientUtils.closeQuietly(response);
    }
    setCredentials(provider,"allowed","bad",baseURL1,baseURL2);
    response=client.execute(new HttpGet(uri1));
    try {
      Assert.assertEquals(HttpServletResponse.SC_UNAUTHORIZED,response.getStatusLine().getStatusCode());
    }
  finally {
      HttpClientUtils.closeQuietly(response);
    }
    setCredentials(provider,"allowed","password",baseURL1,baseURL2);
    String sessionId=null;
    response=client.execute(new HttpGet(uri1));
    try {
      Assert.assertEquals(HttpServletResponse.SC_OK,response.getStatusLine().getStatusCode());
      Assert.assertNotNull(response.getFirstHeader(SecureServlet.SESSION_ID_HEADER));
      sessionId=response.getFirstHeader(SecureServlet.SESSION_ID_HEADER).getValue();
    }
  finally {
      HttpClientUtils.closeQuietly(response);
    }
    undeploy(DEPLOYMENT_1);
    response=client.execute(new HttpGet(uri2));
    try {
      Assert.assertEquals(HttpServletResponse.SC_OK,response.getStatusLine().getStatusCode());
      Assert.assertEquals(sessionId,response.getFirstHeader(SecureServlet.SESSION_ID_HEADER).getValue());
    }
  finally {
      HttpClientUtils.closeQuietly(response);
    }
    deploy(DEPLOYMENT_1);
    response=client.execute(new HttpGet(uri1));
    try {
      Assert.assertEquals(HttpServletResponse.SC_OK,response.getStatusLine().getStatusCode());
      Assert.assertEquals(sessionId,response.getFirstHeader(SecureServlet.SESSION_ID_HEADER).getValue());
    }
  finally {
      HttpClientUtils.closeQuietly(response);
    }
  }
  finally {
    HttpClientUtils.closeQuietly(client);
  }
}
