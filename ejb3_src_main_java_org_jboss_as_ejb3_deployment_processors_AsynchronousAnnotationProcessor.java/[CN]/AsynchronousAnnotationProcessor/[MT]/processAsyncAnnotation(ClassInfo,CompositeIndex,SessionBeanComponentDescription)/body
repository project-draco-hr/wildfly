{
  final DotName superName=beanClass.superName();
  if (superName != null) {
    ClassInfo superClass=compositeIndex.getClassByName(superName);
    if (superClass != null)     processAsyncAnnotation(superClass,compositeIndex,componentDescription);
  }
  final Map<DotName,List<AnnotationInstance>> classAnnotations=beanClass.annotations();
  if (classAnnotations == null) {
    return;
  }
  List<AnnotationInstance> annotations=classAnnotations.get(ASYNCHRONOUS_ANNOTATION);
  if (annotations == null) {
    return;
  }
  for (  AnnotationInstance annotationInstance : annotations) {
    AnnotationTarget target=annotationInstance.target();
    if (target instanceof ClassInfo) {
      componentDescription.addAsynchronousView(ClassInfo.class.cast(target).name().toString());
    }
 else     if (target instanceof MethodInfo) {
      final MethodInfo methodInfo=MethodInfo.class.cast(target);
      final String[] args=new String[methodInfo.args().length];
      for (int i=0; i < methodInfo.args().length; i++) {
        args[i]=methodInfo.args()[i].name().toString();
      }
      componentDescription.addAsynchronousMethod(MethodIdentifier.getIdentifier(methodInfo.returnType().name().toString(),methodInfo.name(),args));
    }
  }
}
