{
  WebLogger.WEB_SSO_LOGGER.tracef("Deregistering locally sso id '%s'",ssoId);
  emptySSOs.remove(ssoId);
  SingleSignOnEntry sso=null;
synchronized (cache) {
    sso=(SingleSignOnEntry)cache.remove(ssoId);
  }
  if (sso == null)   return;
  for (  Session session : sso.findSessions()) {
    WebLogger.WEB_SSO_LOGGER.tracef(" Invalidating session %s",session);
synchronized (reverse) {
      reverse.remove(session);
    }
    ClusteredSession<OutgoingDistributableSessionData> clusteredSession=(ClusteredSession<OutgoingDistributableSessionData>)session;
    boolean notify=true;
    boolean localCall=false;
    boolean localOnly=true;
    clusteredSession.expire(notify,localCall,localOnly,ClusteredSessionNotificationCause.INVALIDATE);
  }
}
