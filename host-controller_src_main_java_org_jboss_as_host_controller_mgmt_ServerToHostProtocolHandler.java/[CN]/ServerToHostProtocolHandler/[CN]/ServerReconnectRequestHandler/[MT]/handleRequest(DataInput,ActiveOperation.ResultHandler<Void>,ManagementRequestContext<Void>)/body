{
  expectHeader(input,DomainServerProtocol.PARAM_SERVER_NAME);
  final String serverName=input.readUTF();
  final Channel channel=context.getChannel();
  CONTROLLER_MANAGEMENT_LOGGER.serverRegistered(serverName,channel);
  context.executeAsync(new ManagementRequestContext.AsyncTask<Void>(){
    @Override public void execute(    final ManagementRequestContext<Void> requestContext) throws Exception {
      final OperationStepHandler stepHandler=new OperationStepHandler(){
        @Override public void execute(        final OperationContext context,        final ModelNode operation) throws OperationFailedException {
          context.acquireControllerLock();
          final byte param;
          if (serverInventory.serverReconnected(serverName,channelHandler)) {
            param=DomainServerProtocol.PARAM_OK;
          }
 else {
            param=DomainServerProtocol.PARAM_RESTART_REQUIRED;
          }
          safeWriteResponse(channel,requestContext.getRequestHeader(),param);
          context.completeStep(OperationContext.RollbackHandler.NOOP_ROLLBACK_HANDLER);
        }
      }
;
      try {
        final ModelNode result=operationExecutor.execute(EMPTY_OP,OperationMessageHandler.DISCARD,ModelController.OperationTransactionControl.COMMIT,OperationAttachments.EMPTY,stepHandler);
        if (!SUCCESS.equals(result.get(OUTCOME).asString())) {
          safeWriteResponse(context.getChannel(),context.getRequestHeader(),DomainServerProtocol.PARAM_ERROR);
        }
      }
 catch (      Exception e) {
        safeWriteResponse(context,e);
      }
 finally {
        resultHandler.done(null);
      }
    }
  }
);
}
