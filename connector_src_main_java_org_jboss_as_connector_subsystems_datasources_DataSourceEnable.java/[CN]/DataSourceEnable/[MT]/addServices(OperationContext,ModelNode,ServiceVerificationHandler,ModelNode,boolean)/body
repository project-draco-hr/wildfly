{
  final ServiceTarget serviceTarget=context.getServiceTarget();
  final ModelNode address=operation.require(OP_ADDR);
  final String dsName=PathAddress.pathAddress(address).getLastElement().getValue();
  final String jndiName=model.get(JNDINAME.getName()).asString();
  final ServiceRegistry registry=context.getServiceRegistry(true);
  final List<ServiceName> serviceNames=registry.getServiceNames();
  if (isXa) {
    final ModifiableXaDataSource dataSourceConfig;
    try {
      dataSourceConfig=xaFrom(context,model,dsName);
    }
 catch (    ValidateException e) {
      throw new OperationFailedException(e,new ModelNode().set(MESSAGES.failedToCreate("XaDataSource",operation,e.getLocalizedMessage())));
    }
    final ServiceName xaDataSourceConfigServiceName=XADataSourceConfigService.SERVICE_NAME_BASE.append(dsName);
    final XADataSourceConfigService xaDataSourceConfigService=new XADataSourceConfigService(dataSourceConfig);
    final ServiceBuilder<?> builder=serviceTarget.addService(xaDataSourceConfigServiceName,xaDataSourceConfigService);
    if (verificationHandler != null) {
      builder.addListener(verificationHandler);
    }
    int propertiesCount=0;
    for (    ServiceName name : serviceNames) {
      if (xaDataSourceConfigServiceName.append("xa-datasource-properties").isParentOf(name)) {
        final ServiceController<?> xaConfigPropertyController=registry.getService(name);
        XaDataSourcePropertiesService xaPropService=(XaDataSourcePropertiesService)xaConfigPropertyController.getService();
        if (xaConfigPropertyController != null) {
          if (!ServiceController.State.UP.equals(xaConfigPropertyController.getState())) {
            propertiesCount++;
            xaConfigPropertyController.setMode(ServiceController.Mode.ACTIVE);
            builder.addDependency(name,String.class,xaDataSourceConfigService.getXaDataSourcePropertyInjector(xaPropService.getName()));
          }
 else {
            throw new OperationFailedException(new ModelNode().set(MESSAGES.serviceAlreadyStarted("Data-source.xa-config-property",name)));
          }
        }
 else {
          throw new OperationFailedException(new ModelNode().set(MESSAGES.serviceNotAvailable("Data-source.xa-config-property",name)));
        }
      }
    }
    if (propertiesCount == 0) {
      throw MESSAGES.xaDataSourcePropertiesNotPresent();
    }
    builder.install();
  }
 else {
    final ModifiableDataSource dataSourceConfig;
    try {
      dataSourceConfig=from(context,model,dsName);
    }
 catch (    ValidateException e) {
      throw new OperationFailedException(e,new ModelNode().set(MESSAGES.failedToCreate("DataSource",operation,e.getLocalizedMessage())));
    }
    final ServiceName dataSourceCongServiceName=DataSourceConfigService.SERVICE_NAME_BASE.append(dsName);
    final DataSourceConfigService configService=new DataSourceConfigService(dataSourceConfig);
    final ServiceBuilder<?> builder=serviceTarget.addService(dataSourceCongServiceName,configService);
    if (verificationHandler != null) {
      builder.addListener(verificationHandler);
    }
    for (    ServiceName name : serviceNames) {
      if (dataSourceCongServiceName.append("connection-properties").isParentOf(name)) {
        final ServiceController<?> dataSourceController=registry.getService(name);
        ConnectionPropertiesService connPropService=(ConnectionPropertiesService)dataSourceController.getService();
        if (dataSourceController != null) {
          if (!ServiceController.State.UP.equals(dataSourceController.getState())) {
            dataSourceController.setMode(ServiceController.Mode.ACTIVE);
            builder.addDependency(name,String.class,configService.getConnectionPropertyInjector(connPropService.getName()));
          }
 else {
            throw new OperationFailedException(new ModelNode().set(MESSAGES.serviceAlreadyStarted("Data-source.connectionProperty",name)));
          }
        }
 else {
          throw new OperationFailedException(new ModelNode().set(MESSAGES.serviceNotAvailable("Data-source.connectionProperty",name)));
        }
      }
    }
    builder.install();
  }
  final ServiceName dataSourceServiceName=AbstractDataSourceService.SERVICE_NAME_BASE.append(jndiName);
  final ServiceController<?> dataSourceController=registry.getService(dataSourceServiceName);
  if (dataSourceController != null) {
    if (!ServiceController.State.UP.equals(dataSourceController.getState())) {
      dataSourceController.setMode(ServiceController.Mode.ACTIVE);
    }
 else {
      throw new OperationFailedException(new ModelNode().set(MESSAGES.serviceAlreadyStarted("Data-source",dsName)));
    }
  }
 else {
    throw new OperationFailedException(new ModelNode().set(MESSAGES.serviceNotAvailable("Data-source",dsName)));
  }
  final DataSourceReferenceFactoryService referenceFactoryService=new DataSourceReferenceFactoryService();
  final ServiceName referenceFactoryServiceName=DataSourceReferenceFactoryService.SERVICE_NAME_BASE.append(dsName);
  final ServiceBuilder<?> referenceBuilder=serviceTarget.addService(referenceFactoryServiceName,referenceFactoryService).addDependency(dataSourceServiceName,javax.sql.DataSource.class,referenceFactoryService.getDataSourceInjector());
  if (verificationHandler != null) {
    referenceBuilder.addListener(verificationHandler);
  }
  referenceBuilder.install();
  final ContextNames.BindInfo bindInfo=ContextNames.bindInfoFor(jndiName);
  final BinderService binderService=new BinderService(bindInfo.getBindName());
  final ServiceBuilder<?> binderBuilder=serviceTarget.addService(bindInfo.getBinderServiceName(),binderService).addDependency(referenceFactoryServiceName,ManagedReferenceFactory.class,binderService.getManagedObjectInjector()).addDependency(bindInfo.getParentContextServiceName(),ServiceBasedNamingStore.class,binderService.getNamingStoreInjector()).addListener(new AbstractServiceListener<Object>(){
    public void transition(    final ServiceController<? extends Object> controller,    final ServiceController.Transition transition){
switch (transition) {
case STARTING_to_UP:
{
          SUBSYSTEM_DATASOURCES_LOGGER.boundDataSource(jndiName);
          break;
        }
case START_REQUESTED_to_DOWN:
{
        SUBSYSTEM_DATASOURCES_LOGGER.unboundDataSource(jndiName);
        break;
      }
case REMOVING_to_REMOVED:
{
      SUBSYSTEM_DATASOURCES_LOGGER.debugf("Removed JDBC Data-source [%s]",jndiName);
      break;
    }
}
}
}
);
binderBuilder.setInitialMode(ServiceController.Mode.ACTIVE);
if (verificationHandler != null) {
binderBuilder.addListener(verificationHandler);
}
binderBuilder.install();
}
