{
  final ModelNode opAddr=operation.require(OP_ADDR);
  final ModelNode compensatingOperation=new ModelNode();
  compensatingOperation.get(OP).set(DISABLE);
  compensatingOperation.get(OP_ADDR).set(opAddr);
  final String jndiName=PathAddress.pathAddress(opAddr).getLastElement().getValue();
  context.getSubModel().get(ENABLED).set(true);
  if (context.getRuntimeContext() != null) {
    context.getRuntimeContext().setRuntimeTask(new RuntimeTask(){
      public void execute(      final RuntimeTaskContext context) throws OperationFailedException {
        final ServiceRegistry registry=context.getServiceRegistry();
        final ServiceName dataSourceServiceName=AbstractDataSourceService.SERVICE_NAME_BASE.append(jndiName);
        final ServiceController<?> dataSourceController=registry.getService(dataSourceServiceName);
        if (dataSourceController != null) {
          if (!ServiceController.State.UP.equals(dataSourceController.getState())) {
            dataSourceController.setMode(ServiceController.Mode.ACTIVE);
          }
 else {
            resultHandler.handleResultComplete();
          }
        }
 else {
          throw new OperationFailedException(new ModelNode().set("Data-source service for [" + jndiName + "] is not available"));
        }
        final ServiceName binderServiceName=ContextNames.JAVA_CONTEXT_SERVICE_NAME.append(jndiName);
        final ServiceController<?> binderController=registry.getService(binderServiceName);
        if (binderController != null) {
          if (!ServiceController.State.UP.equals(binderController.getState())) {
            binderController.setMode(ServiceController.Mode.ACTIVE);
            binderController.addListener(new ResultHandler.ServiceStartListener(resultHandler){
              public void serviceStarted(              ServiceController<?> controller){
                log.infof("Bound JDBC Data-source [%s]",jndiName);
                super.serviceStarted(controller);
              }
            }
);
          }
 else {
            resultHandler.handleResultComplete();
          }
        }
 else {
          throw new OperationFailedException(new ModelNode().set("Data-source binder service for [" + jndiName + "] is not available"));
        }
      }
    }
);
  }
 else {
    resultHandler.handleResultComplete();
  }
  return new BasicOperationResult(compensatingOperation);
}
