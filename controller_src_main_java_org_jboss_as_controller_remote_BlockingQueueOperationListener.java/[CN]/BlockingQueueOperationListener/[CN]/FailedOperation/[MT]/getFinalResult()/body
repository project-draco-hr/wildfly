{
  return new AsyncFuture<ModelNode>(){
    @Override public boolean cancel(    boolean mayInterruptIfRunning){
      return false;
    }
    @Override public boolean isCancelled(){
      return false;
    }
    @Override public boolean isDone(){
      return true;
    }
    @Override public ModelNode get(){
      return finalResult;
    }
    @Override public ModelNode get(    long timeout,    TimeUnit unit){
      return finalResult;
    }
    @Override public Status await() throws InterruptedException {
      return Status.COMPLETE;
    }
    @Override public Status await(    long timeout,    TimeUnit unit) throws InterruptedException {
      return Status.COMPLETE;
    }
    @Override public ModelNode getUninterruptibly() throws CancellationException, ExecutionException {
      return finalResult;
    }
    @Override public ModelNode getUninterruptibly(    long timeout,    TimeUnit unit) throws CancellationException, ExecutionException, TimeoutException {
      return finalResult;
    }
    @Override public Status awaitUninterruptibly(){
      return Status.COMPLETE;
    }
    @Override public Status awaitUninterruptibly(    long timeout,    TimeUnit unit){
      return Status.COMPLETE;
    }
    @Override public Status getStatus(){
      return Status.COMPLETE;
    }
    @Override public <A>void addListener(    Listener<? super ModelNode,A> aListener,    A attachment){
      aListener.handleComplete(this,attachment);
    }
    @Override public void asyncCancel(    boolean interruptionDesired){
    }
  }
;
}
