{
  final ModelNode model=context.getSubModel();
  final String name=model.require(NAME).asString();
  if (context.getRuntimeContext() != null) {
    context.getRuntimeContext().setRuntimeTask(new RuntimeTask(){
      public void execute(      RuntimeTaskContext context) throws OperationFailedException {
        final ServiceController<?> controller=context.getServiceRegistry().getService(ConnectorServices.CONNECTOR_CONFIG_SERVICE);
        if (controller != null) {
          controller.setMode(ServiceController.Mode.REMOVE);
        }
        resultHandler.handleResultComplete();
      }
    }
);
  }
 else {
    resultHandler.handleResultComplete();
  }
  final ModelNode compensating=new ModelNode();
  compensating.get(OP_ADDR).set(operation.require(ADDRESS));
  compensating.get(OP).set(ADD);
  compensating.get(NAME).set(name);
  if (model.has(ARCHIVE_VALIDATION_ENABLED)) {
    compensating.get(ARCHIVE_VALIDATION_ENABLED).set(model.get(ARCHIVE_VALIDATION_ENABLED));
  }
  if (model.has(ARCHIVE_VALIDATION_FAIL_ON_ERROR)) {
    compensating.get(ARCHIVE_VALIDATION_FAIL_ON_ERROR).set(model.get(ARCHIVE_VALIDATION_FAIL_ON_ERROR));
  }
  if (model.has(ARCHIVE_VALIDATION_FAIL_ON_WARN)) {
    compensating.get(ARCHIVE_VALIDATION_FAIL_ON_WARN).set(model.get(ARCHIVE_VALIDATION_FAIL_ON_WARN));
  }
  if (model.has(BEAN_VALIDATION_ENABLED)) {
    compensating.get(BEAN_VALIDATION_ENABLED).set(model.get(BEAN_VALIDATION_ENABLED));
  }
  if (model.has(DEFAULT_WORKMANAGER_LONG_RUNNING_THREAD_POOL)) {
    compensating.get(DEFAULT_WORKMANAGER_LONG_RUNNING_THREAD_POOL).set(model.get(DEFAULT_WORKMANAGER_LONG_RUNNING_THREAD_POOL));
  }
  if (model.has(DEFAULT_WORKMANAGER_SHORT_RUNNING_THREAD_POOL)) {
    compensating.get(DEFAULT_WORKMANAGER_SHORT_RUNNING_THREAD_POOL).set(model.get(DEFAULT_WORKMANAGER_SHORT_RUNNING_THREAD_POOL));
  }
  if (model.has(CACHED_CONNECTION_MANAGER_DEBUG)) {
    compensating.get(CACHED_CONNECTION_MANAGER_DEBUG).set(model.get(CACHED_CONNECTION_MANAGER_DEBUG));
  }
  if (model.has(CACHED_CONNECTION_MANAGER_ERROR)) {
    compensating.get(CACHED_CONNECTION_MANAGER_ERROR).set(model.get(CACHED_CONNECTION_MANAGER_ERROR));
  }
  return new BasicOperationResult(compensating);
}
