{
  ManagementResourceRegistration root=parent.registerSubModel(PathElement.pathElement(CORE_SERVICE,PLATFORM_MBEAN),new DescriptionProvider(){
    @Override public ModelNode getModelDescription(    Locale locale){
      return PlatformMBeanDescriptions.getRootResource(locale);
    }
  }
);
  ManagementResourceRegistration classloading=root.registerSubModel(CLASS_LOADING_PATH,new DescriptionProvider(){
    @Override public ModelNode getModelDescription(    Locale locale){
      return PlatformMBeanDescriptions.getClassLoadingResource(locale);
    }
  }
);
  ClassLoadingMXBeanAttributeHandler.INSTANCE.register(classloading);
  if (ManagementFactory.getCompilationMXBean() != null) {
    ManagementResourceRegistration compilation=root.registerSubModel(COMPILATION_PATH,new DescriptionProvider(){
      @Override public ModelNode getModelDescription(      Locale locale){
        return PlatformMBeanDescriptions.getCompilationResource(locale);
      }
    }
);
    compilation.registerOperationHandler(READ_RESOURCE_OPERATION,CompilationMXBeanReadResourceHandler.INSTANCE,CommonProviders.READ_RESOURCE_PROVIDER);
    CompilationMXBeanAttributeHandler.INSTANCE.register(compilation);
  }
  ManagementResourceRegistration gcRoot=root.registerSubModel(GARBAGE_COLLECTOR_PATH,new DescriptionProvider(){
    @Override public ModelNode getModelDescription(    Locale locale){
      return PlatformMBeanDescriptions.getGarbageCollectorRootResource(locale);
    }
  }
);
  ManagementResourceRegistration gc=gcRoot.registerSubModel(PathElement.pathElement(NAME),new DescriptionProvider(){
    @Override public ModelNode getModelDescription(    Locale locale){
      return PlatformMBeanDescriptions.getGarbageCollectorResource(locale);
    }
  }
);
  GarbageCollectorMXBeanAttributeHandler.INSTANCE.register(gc);
  ManagementResourceRegistration memMgrRoot=root.registerSubModel(MEMORY_MANAGER_PATH,new DescriptionProvider(){
    @Override public ModelNode getModelDescription(    Locale locale){
      return PlatformMBeanDescriptions.getMemoryManagerRootResource(locale);
    }
  }
);
  ManagementResourceRegistration memMgr=memMgrRoot.registerSubModel(PathElement.pathElement(NAME),new DescriptionProvider(){
    @Override public ModelNode getModelDescription(    Locale locale){
      return PlatformMBeanDescriptions.getMemoryManagerResource(locale);
    }
  }
);
  MemoryManagerMXBeanAttributeHandler.INSTANCE.register(memMgr);
  ManagementResourceRegistration memory=root.registerSubModel(MEMORY_PATH,new DescriptionProvider(){
    @Override public ModelNode getModelDescription(    Locale locale){
      return PlatformMBeanDescriptions.getMemoryResource(locale);
    }
  }
);
  MemoryMXBeanAttributeHandler.INSTANCE.register(memory);
  memory.registerOperationHandler(PlatformMBeanConstants.GC,MemoryMXBeanGCHandler.INSTANCE,MemoryMXBeanGCHandler.INSTANCE);
  ManagementResourceRegistration memPoolRoot=root.registerSubModel(MEMORY_POOL_PATH,new DescriptionProvider(){
    @Override public ModelNode getModelDescription(    Locale locale){
      return PlatformMBeanDescriptions.getMemoryPoolRootResource(locale);
    }
  }
);
  ManagementResourceRegistration memPool=memPoolRoot.registerSubModel(PathElement.pathElement(NAME),new DescriptionProvider(){
    @Override public ModelNode getModelDescription(    Locale locale){
      return PlatformMBeanDescriptions.getMemoryPoolResource(locale);
    }
  }
);
  memPool.registerOperationHandler(READ_RESOURCE_OPERATION,MemoryPoolMXBeanReadResourceHandler.INSTANCE,CommonProviders.READ_RESOURCE_PROVIDER);
  memPool.registerOperationHandler(RESET_PEAK_USAGE,MemoryPoolMXBeanResetPeakUsageHandler.INSTANCE,MemoryPoolMXBeanResetPeakUsageHandler.INSTANCE);
  MemoryPoolMXBeanAttributeHandler.INSTANCE.register(memPool);
  ManagementResourceRegistration opSys=root.registerSubModel(OPERATING_SYSTEM_PATH,new DescriptionProvider(){
    @Override public ModelNode getModelDescription(    Locale locale){
      return PlatformMBeanDescriptions.getOperatingSystemResource(locale);
    }
  }
);
  opSys.registerOperationHandler(READ_RESOURCE_OPERATION,OperatingSystemMXBeanReadResourceHandler.INSTANCE,CommonProviders.READ_RESOURCE_PROVIDER);
  OperatingSystemMXBeanAttributeHandler.INSTANCE.register(opSys);
  ManagementResourceRegistration runtime=root.registerSubModel(RUNTIME_PATH,new DescriptionProvider(){
    @Override public ModelNode getModelDescription(    Locale locale){
      return PlatformMBeanDescriptions.getRuntimeResource(locale);
    }
  }
);
  runtime.registerOperationHandler(READ_RESOURCE_OPERATION,RuntimeMXBeanReadResourceHandler.INSTANCE,CommonProviders.READ_RESOURCE_PROVIDER);
  RuntimeMXBeanAttributeHandler.INSTANCE.register(runtime);
  ManagementResourceRegistration threads=root.registerSubModel(THREADING_PATH,new DescriptionProvider(){
    @Override public ModelNode getModelDescription(    Locale locale){
      return PlatformMBeanDescriptions.getThreadingResource(locale);
    }
  }
);
  threads.registerOperationHandler(READ_RESOURCE_OPERATION,ThreadMXBeanReadResourceHandler.INSTANCE,CommonProviders.READ_RESOURCE_PROVIDER);
  threads.registerOperationHandler(RESET_PEAK_THREAD_COUNT,ThreadMXBeanResetPeakThreadCountHandler.INSTANCE,ThreadMXBeanResetPeakThreadCountHandler.INSTANCE);
  threads.registerOperationHandler(FIND_DEADLOCKED_THREADS,ThreadMXBeanFindDeadlockedThreadsHandler.INSTANCE,ThreadMXBeanFindDeadlockedThreadsHandler.INSTANCE);
  threads.registerOperationHandler(FIND_MONITOR_DEADLOCKED_THREADS,ThreadMXBeanFindMonitorDeadlockedThreadsHandler.INSTANCE,ThreadMXBeanFindMonitorDeadlockedThreadsHandler.INSTANCE);
  threads.registerOperationHandler(GET_THREAD_INFO,ThreadMXBeanThreadInfoHandler.INSTANCE,ThreadMXBeanThreadInfoHandler.INSTANCE);
  threads.registerOperationHandler(GET_THREAD_INFOS,ThreadMXBeanThreadInfosHandler.INSTANCE,ThreadMXBeanThreadInfosHandler.INSTANCE);
  threads.registerOperationHandler(GET_THREAD_CPU_TIME,ThreadMXBeanCpuTimeHandler.INSTANCE,ThreadMXBeanCpuTimeHandler.INSTANCE);
  threads.registerOperationHandler(GET_THREAD_USER_TIME,ThreadMXBeanUserTimeHandler.INSTANCE,ThreadMXBeanUserTimeHandler.INSTANCE);
  threads.registerOperationHandler(DUMP_ALL_THREADS,ThreadMXBeanDumpAllThreadsHandler.INSTANCE,ThreadMXBeanDumpAllThreadsHandler.INSTANCE);
  ThreadMXBeanAttributeHandler.INSTANCE.register(threads);
  if (PlatformMBeanUtil.JVM_MAJOR_VERSION > 6) {
    ManagementResourceRegistration bufPoolRoot=root.registerSubModel(BUFFER_POOL_PATH,new DescriptionProvider(){
      @Override public ModelNode getModelDescription(      Locale locale){
        return PlatformMBeanDescriptions.getBufferPoolRootResource(locale);
      }
    }
);
    ManagementResourceRegistration bufPool=memPoolRoot.registerSubModel(PathElement.pathElement(NAME),new DescriptionProvider(){
      @Override public ModelNode getModelDescription(      Locale locale){
        return PlatformMBeanDescriptions.getBufferPoolResource(locale);
      }
    }
);
    BufferPoolMXBeanAttributeHandler.INSTANCE.register(bufPool);
    ManagementResourceRegistration logging=root.registerSubModel(LOGGING_PATH,new DescriptionProvider(){
      @Override public ModelNode getModelDescription(      Locale locale){
        return PlatformMBeanDescriptions.getPlatformLoggingResource(locale);
      }
    }
);
    logging.registerOperationHandler(GET_LOGGER_LEVEL,PlatformLoggingMXBeanGetLoggerLevelHandler.INSTANCE,PlatformLoggingMXBeanGetLoggerLevelHandler.INSTANCE);
    logging.registerOperationHandler(SET_LOGGER_LEVEL,PlatformLoggingMXBeanSetLoggerLevelHandler.INSTANCE,PlatformLoggingMXBeanSetLoggerLevelHandler.INSTANCE);
    logging.registerOperationHandler(GET_PARENT_LOGGER_NAME,PlatformLoggingMXBeanGetParentLoggerNameHandler.INSTANCE,PlatformLoggingMXBeanGetParentLoggerNameHandler.INSTANCE);
    PlatformLoggingMXBeanAttributeHandler.INSTANCE.register(logging);
  }
}
