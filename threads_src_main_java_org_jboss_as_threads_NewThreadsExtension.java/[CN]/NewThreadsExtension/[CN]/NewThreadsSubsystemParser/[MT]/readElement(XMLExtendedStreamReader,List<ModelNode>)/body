{
  final ModelNode address=new ModelNode();
  address.add(ModelDescriptionConstants.SUBSYSTEM,"threads");
  address.protect();
  final ModelNode subsystem=new ModelNode();
  subsystem.get(OP).set(ADD);
  subsystem.get(OP_ADDR).set(address);
  list.add(subsystem);
  while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
switch (Namespace.forUri(reader.getNamespaceURI())) {
case THREADS_1_0:
{
        final Element element=Element.forName(reader.getLocalName());
switch (element) {
case BOUNDED_QUEUE_THREAD_POOL:
{
            parseBoundedQueueThreadPool(reader,address,list);
            break;
          }
case THREAD_FACTORY:
{
          parseThreadFactory(reader,address,list);
          break;
        }
case QUEUELESS_THREAD_POOL:
{
        parseQueuelessThreadPool(reader,address,list);
        break;
      }
case SCHEDULED_THREAD_POOL:
{
      parseScheduledThreadPool(reader,address,list);
      break;
    }
case UNBOUNDED_QUEUE_THREAD_POOL:
{
    parseUnboundedQueueThreadPool(reader,address,list);
    break;
  }
default :
{
  throw unexpectedElement(reader);
}
}
break;
}
default :
{
throw unexpectedElement(reader);
}
}
}
}
