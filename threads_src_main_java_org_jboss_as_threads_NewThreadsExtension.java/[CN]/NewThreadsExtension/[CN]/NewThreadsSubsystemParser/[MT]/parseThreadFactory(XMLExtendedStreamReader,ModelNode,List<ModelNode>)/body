{
  final ModelNode op=new ModelNode();
  list.add(op);
  op.get(OP).set(ADD);
  String name=null;
  int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    final String value=reader.getAttributeValue(i);
    if (reader.getAttributeNamespace(i) != null) {
      throw ParseUtils.unexpectedAttribute(reader,i);
    }
 else {
      final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case NAME:
{
          op.get(NAME).set(value);
          name=value;
          break;
        }
case GROUP_NAME:
{
        op.get(GROUP_NAME).set(value);
        break;
      }
case THREAD_NAME_PATTERN:
{
      op.get(THREAD_NAME_PATTERN).set(value);
      break;
    }
case PRIORITY:
{
    try {
      int priority=Integer.valueOf(value);
      op.get(PRIORITY).set(priority);
    }
 catch (    NumberFormatException e) {
      invalidAttributeValue(reader,i);
    }
  }
break;
default :
throw unexpectedAttribute(reader,i);
}
}
}
if (name == null) {
throw missingRequired(reader,Collections.singleton(Attribute.NAME));
}
final ModelNode address=parentAddress.clone();
address.add(THREAD_FACTORY,name);
address.protect();
op.get(ADDRESS).set(address);
while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
switch (Element.forName(reader.getLocalName())) {
case PROPERTIES:
{
Map<String,String> props=parseProperties(reader);
if (props != null && props.size() > 0) {
ModelNode properties=op.get(PROPERTIES);
for (Map.Entry<String,String> prop : props.entrySet()) {
properties.add(prop.getKey(),prop.getValue());
}
}
break;
}
default :
{
throw unexpectedElement(reader);
}
}
break;
}
}
