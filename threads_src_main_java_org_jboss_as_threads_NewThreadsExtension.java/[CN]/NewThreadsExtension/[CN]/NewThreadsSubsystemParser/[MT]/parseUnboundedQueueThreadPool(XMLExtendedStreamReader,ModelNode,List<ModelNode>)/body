{
  final ModelNode op=new ModelNode();
  list.add(op);
  op.get(OP).set(ADD);
  String name=null;
  int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    requireNoNamespaceAttribute(reader,i);
    final String value=reader.getAttributeValue(i);
    final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case NAME:
{
        op.get(NAME).set(value);
        name=value;
        break;
      }
default :
    throw unexpectedAttribute(reader,i);
}
}
if (name == null) {
throw missingRequired(reader,Collections.singleton(Attribute.NAME));
}
final ModelNode address=parentAddress.clone();
address.add(UNBOUNDED_QUEUE_THREAD_POOL,name);
address.protect();
op.get(ADDRESS).set(address);
boolean foundMaxThreads=false;
while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
switch (Element.forName(reader.getLocalName())) {
case MAX_THREADS:
{
    op.get(MAX_THREADS).set(parseScaledCount(reader));
    foundMaxThreads=true;
    break;
  }
case KEEPALIVE_TIME:
{
  op.get(KEEPALIVE_TIME).set(parseTimeSpec(reader));
  break;
}
case THREAD_FACTORY:
{
op.get(CommonAttributes.THREAD_FACTORY).set(parseRef(reader));
break;
}
case PROPERTIES:
{
ModelNode props=parseProperties(reader);
if (props.isDefined()) {
op.get(PROPERTIES).set(props);
}
break;
}
default :
{
throw unexpectedElement(reader);
}
}
}
if (!foundMaxThreads) {
throw missingRequiredElement(reader,Collections.singleton(Element.MAX_THREADS));
}
}
