{
  PathAddress address=cacheAddress.append(RemoteStoreResourceDefinition.PATH);
  ModelNode operation=Util.createAddOperation(address);
  operations.put(address,operation);
  for (int i=0; i < reader.getAttributeCount(); i++) {
    String value=reader.getAttributeValue(i);
    Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case CACHE:
{
        RemoteStoreResourceDefinition.CACHE.parseAndSetParameter(value,operation,reader);
        break;
      }
case SOCKET_TIMEOUT:
{
      RemoteStoreResourceDefinition.SOCKET_TIMEOUT.parseAndSetParameter(value,operation,reader);
      break;
    }
case TCP_NO_DELAY:
{
    RemoteStoreResourceDefinition.TCP_NO_DELAY.parseAndSetParameter(value,operation,reader);
    break;
  }
default :
{
  this.parseStoreAttribute(reader,i,operation);
}
}
}
while (reader.hasNext() && (reader.nextTag() != XMLStreamConstants.END_ELEMENT)) {
Element element=Element.forName(reader.getLocalName());
switch (element) {
case REMOTE_SERVER:
{
this.parseRemoteServer(reader,operation);
break;
}
default :
{
this.parseStoreElement(reader,address,operations);
}
}
}
if (!operation.hasDefined(ModelKeys.REMOTE_SERVERS)) {
throw ParseUtils.missingRequired(reader,Collections.singleton(Element.REMOTE_SERVER));
}
}
