{
  PathAddress address=containerAddress.append(ModelKeys.TRANSPORT,ModelKeys.TRANSPORT_NAME);
  ModelNode operation=Util.createAddOperation(address);
  operations.put(address,operation);
  for (int i=0; i < reader.getAttributeCount(); i++) {
    String value=reader.getAttributeValue(i);
    Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case STACK:
{
        TransportResourceDefinition.STACK.parseAndSetParameter(value,operation,reader);
        break;
      }
case EXECUTOR:
{
      TransportResourceDefinition.EXECUTOR.parseAndSetParameter(value,operation,reader);
      break;
    }
case LOCK_TIMEOUT:
{
    TransportResourceDefinition.LOCK_TIMEOUT.parseAndSetParameter(value,operation,reader);
    break;
  }
case SITE:
{
  if (!this.schema.since(InfinispanSchema.VERSION_1_1)) {
    ROOT_LOGGER.topologyAttributeDeprecated(ModelKeys.SITE);
    break;
  }
}
case RACK:
{
if (!this.schema.since(InfinispanSchema.VERSION_1_1)) {
  ROOT_LOGGER.topologyAttributeDeprecated(ModelKeys.RACK);
  break;
}
}
case MACHINE:
{
if (!this.schema.since(InfinispanSchema.VERSION_1_1)) {
ROOT_LOGGER.topologyAttributeDeprecated(ModelKeys.MACHINE);
break;
}
}
case CLUSTER:
{
if (this.schema.since(InfinispanSchema.VERSION_1_2)) {
TransportResourceDefinition.CLUSTER.parseAndSetParameter(value,operation,reader);
break;
}
}
default :
{
throw ParseUtils.unexpectedAttribute(reader,i);
}
}
}
ParseUtils.requireNoContent(reader);
}
