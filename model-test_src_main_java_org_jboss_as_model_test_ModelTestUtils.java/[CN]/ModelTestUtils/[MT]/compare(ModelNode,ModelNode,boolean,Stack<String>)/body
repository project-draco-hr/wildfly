{
  Assert.assertEquals(getCompareStackAsString(stack) + " types",node1.getType(),node2.getType());
  if (node1.getType() == ModelType.OBJECT) {
    ModelNode model1=ignoreUndefined ? trimUndefinedChildren(node1) : node1;
    ModelNode model2=ignoreUndefined ? trimUndefinedChildren(node2) : node2;
    final Set<String> keys1=new TreeSet<String>(model1.keys());
    final Set<String> keys2=new TreeSet<String>(model2.keys());
    if (!keys1.toString().equals(keys2.toString())) {
      System.out.print("");
    }
    Assert.assertEquals(node1 + "\n" + node2,keys1.toString(),keys2.toString());
    Assert.assertTrue(keys1.containsAll(keys2));
    for (    String key : keys1) {
      final ModelNode child1=model1.get(key);
      Assert.assertTrue("Missing: " + key + "\n"+ node1+ "\n"+ node2,model2.has(key));
      final ModelNode child2=model2.get(key);
      if (child1.isDefined()) {
        if (!ignoreUndefined) {
          Assert.assertTrue("key=" + key + "\n with child1 \n"+ child1.toString()+ "\n has child2 not defined\n node2 is:\n"+ node2.toString(),child2.isDefined());
        }
        stack.push(key + "/");
        compare(child1,child2,ignoreUndefined,stack);
        stack.pop();
      }
 else       if (!ignoreUndefined) {
        Assert.assertFalse(child2.asString(),child2.isDefined());
      }
    }
  }
 else   if (node1.getType() == ModelType.LIST) {
    List<ModelNode> list1=node1.asList();
    List<ModelNode> list2=node2.asList();
    Assert.assertEquals(list1 + "\n" + list2,list1.size(),list2.size());
    for (int i=0; i < list1.size(); i++) {
      stack.push(i + "/");
      compare(list1.get(i),list2.get(i),ignoreUndefined,stack);
      stack.pop();
    }
  }
 else   if (node1.getType() == ModelType.PROPERTY) {
    Property prop1=node1.asProperty();
    Property prop2=node2.asProperty();
    Assert.assertEquals(prop1 + "\n" + prop2,prop1.getName(),prop2.getName());
    stack.push(prop1.getName() + "/");
    compare(prop1.getValue(),prop2.getValue(),ignoreUndefined,stack);
    stack.pop();
  }
 else {
    try {
      Assert.assertEquals(getCompareStackAsString(stack) + "\n\"" + node1.asString()+ "\"\n\""+ node2.asString()+ "\"\n-----",node2.asString().trim(),node1.asString().trim());
    }
 catch (    AssertionFailedError error) {
      throw error;
    }
  }
}
