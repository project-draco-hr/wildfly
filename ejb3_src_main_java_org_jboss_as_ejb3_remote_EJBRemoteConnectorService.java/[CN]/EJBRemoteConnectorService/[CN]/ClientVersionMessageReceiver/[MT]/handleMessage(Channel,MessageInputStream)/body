{
  final DataInputStream dataInputStream=new DataInputStream(messageInputStream);
  try {
    final byte version=dataInputStream.readByte();
    final String clientMarshallingStrategy=dataInputStream.readUTF();
    log.debug("Client with protocol version " + version + " and marshalling strategy "+ clientMarshallingStrategy+ " trying to communicate on "+ channel);
    if (!EJBRemoteConnectorService.this.isSupportedMarshallingStrategy(clientMarshallingStrategy)) {
      log.info("Unsupported client marshalling strategy " + clientMarshallingStrategy + " received on channel "+ channel+ ", no further communication will take place");
      channel.close();
      return;
    }
switch (version) {
case 0x01:
      final MarshallerFactory marshallerFactory=EJBRemoteConnectorService.this.getMarshallerFactory(clientMarshallingStrategy);
    final DeploymentRepository deploymentRepository=EJBRemoteConnectorService.this.deploymentRepositoryInjectedValue.getValue();
  final VersionOneProtocolChannelReceiver receiver=new VersionOneProtocolChannelReceiver(channel,deploymentRepository,EJBRemoteConnectorService.this.ejbRemoteTransactionsRepositoryInjectedValue.getValue(),marshallerFactory,executorService.getValue());
receiver.startReceiving();
break;
default :
throw new RuntimeException("Cannot handle client version " + version);
}
}
 catch (IOException e) {
log.errorf(e,"Exception on channel %s from message %s",channel,messageInputStream);
IoUtils.safeClose(channel);
}
 finally {
IoUtils.safeClose(messageInputStream);
}
}
