{
  final DataInputStream dataInputStream=new DataInputStream(messageInputStream);
  try {
    final byte version=dataInputStream.readByte();
    final String clientMarshallingStrategy=dataInputStream.readUTF();
    EjbLogger.REMOTE_LOGGER.debugf("Client with protocol version %s and marshalling strategy %s trying to communicate on %s",version,clientMarshallingStrategy,channel);
    if (!EJBRemoteConnectorService.this.isSupportedMarshallingStrategy(clientMarshallingStrategy)) {
      EjbLogger.REMOTE_LOGGER.unsupportedClientMarshallingStrategy(clientMarshallingStrategy,channel);
      channel.close();
      return;
    }
    final MarshallerFactory marshallerFactory=EJBRemoteConnectorService.this.getMarshallerFactory(clientMarshallingStrategy);
    final DeploymentRepository deploymentRepository=EJBRemoteConnectorService.this.deploymentRepositoryInjectedValue.getValue();
    final RegistryCollector<String,List<ClientMapping>> clientMappingRegistryCollector=EJBRemoteConnectorService.this.clusterRegistryCollector.getValue();
    final RemoteAsyncInvocationCancelStatusService asyncInvocationCancelStatus=EJBRemoteConnectorService.this.remoteAsyncInvocationCancelStatus.getValue();
    final SuspendController suspendController=EJBRemoteConnectorService.this.suspendControllerInjectedValue.getValue();
switch (version) {
case 0x01:
      final VersionOneProtocolChannelReceiver versionOneProtocolHandler=new VersionOneProtocolChannelReceiver(this.channelAssociation,deploymentRepository,EJBRemoteConnectorService.this.ejbRemoteTransactionsRepositoryInjectedValue.getValue(),clientMappingRegistryCollector,marshallerFactory,executorService.getOptionalValue(),asyncInvocationCancelStatus,suspendController);
    versionOneProtocolHandler.startReceiving();
  break;
case 0x02:
final VersionTwoProtocolChannelReceiver versionTwoProtocolHandler=new VersionTwoProtocolChannelReceiver(this.channelAssociation,deploymentRepository,EJBRemoteConnectorService.this.ejbRemoteTransactionsRepositoryInjectedValue.getValue(),clientMappingRegistryCollector,marshallerFactory,executorService.getOptionalValue(),asyncInvocationCancelStatus,suspendController);
versionTwoProtocolHandler.startReceiving();
break;
default :
throw EjbLogger.ROOT_LOGGER.ejbRemoteServiceCannotHandleClientVersion(version);
}
}
 catch (IOException e) {
EjbLogger.REMOTE_LOGGER.exceptionOnChannel(e,channel,messageInputStream);
IoUtils.safeClose(channel);
}
 finally {
IoUtils.safeClose(messageInputStream);
}
}
