{
  requireSingleAttribute(reader,CommonAttributes.NAME);
  final String name=reader.getAttributeValue(0);
  final ModelNode queue=new ModelNode();
  queue.get(OP).set(ADD);
  queue.get(OP_ADDR).set(address).add(JMS_QUEUE,name);
  while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
    final Element element=Element.forName(reader.getLocalName());
switch (element) {
case ENTRY:
{
        final Location location=reader.getLocation();
        final String entry=readStringAttributeElement(reader,CommonAttributes.NAME);
        ENTRIES.parseAndAddParameterElement(entry,queue,location);
        break;
      }
case SELECTOR:
{
      if (queue.has(SELECTOR.getName())) {
        throw ParseUtils.duplicateNamedElement(reader,Element.SELECTOR.getLocalName());
      }
      handleElementText(reader,element,queue);
      break;
    }
case DURABLE:
{
    if (queue.has(DURABLE.getName())) {
      throw ParseUtils.duplicateNamedElement(reader,Element.DURABLE.getLocalName());
    }
    handleElementText(reader,element,queue);
    break;
  }
default :
{
  throw ParseUtils.unexpectedElement(reader);
}
}
}
updates.add(queue);
}
