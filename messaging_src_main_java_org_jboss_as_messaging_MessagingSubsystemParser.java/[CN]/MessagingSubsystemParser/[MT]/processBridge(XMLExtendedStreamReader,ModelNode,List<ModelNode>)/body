{
  requireSingleAttribute(reader,CommonAttributes.NAME);
  String name=reader.getAttributeValue(0);
  ModelNode bridgeAdd=org.jboss.as.controller.operations.common.Util.getEmptyOperation(ADD,address.clone().add(CommonAttributes.BRIDGE,name));
  EnumSet<Element> required=EnumSet.of(Element.QUEUE_NAME);
  Set<Element> seen=EnumSet.noneOf(Element.class);
  while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
    final Element element=Element.forName(reader.getLocalName());
    if (!seen.add(element)) {
      throw ParseUtils.duplicateNamedElement(reader,element.getLocalName());
    }
    required.remove(element);
switch (element) {
case QUEUE_NAME:
case HA:
case TRANSFORMER_CLASS_NAME:
case RETRY_INTERVAL_MULTIPLIER:
case FAILOVER_ON_SERVER_SHUTDOWN:
case USE_DUPLICATE_DETECTION:
case CONFIRMATION_WINDOW_SIZE:
case USER:
case PASSWORD:
      handleElementText(reader,element,bridgeAdd);
    break;
case FILTER:
{
    final Location location=reader.getLocation();
    String string=readStringAttributeElement(reader,CommonAttributes.STRING);
    FILTER.parseAndSetParameter(string,bridgeAdd,location);
    break;
  }
case RETRY_INTERVAL:
handleElementText(reader,element,"default",bridgeAdd);
break;
case FORWARDING_ADDRESS:
case RECONNECT_ATTEMPTS:
handleElementText(reader,element,"bridge",bridgeAdd);
break;
case STATIC_CONNECTORS:
if (seen.contains(Element.DISCOVERY_GROUP_REF)) {
throw new XMLStreamException(MESSAGES.illegalElement(STATIC_CONNECTORS,DISCOVERY_GROUP_REF),reader.getLocation());
}
processStaticConnectors(reader,bridgeAdd,false);
break;
case DISCOVERY_GROUP_REF:
{
if (seen.contains(Element.STATIC_CONNECTORS)) {
throw new XMLStreamException(MESSAGES.illegalElement(DISCOVERY_GROUP_REF,STATIC_CONNECTORS),reader.getLocation());
}
final Location location=reader.getLocation();
final String groupRef=readStringAttributeElement(reader,DISCOVERY_GROUP_NAME.getXmlName());
DISCOVERY_GROUP_NAME.parseAndSetParameter(groupRef,bridgeAdd,location);
break;
}
default :
{
throw ParseUtils.unexpectedElement(reader);
}
}
}
if (!seen.contains(Element.STATIC_CONNECTORS) && !seen.contains(Element.DISCOVERY_GROUP_REF)) {
throw new XMLStreamException(MESSAGES.required(Element.STATIC_CONNECTORS.getLocalName(),Element.DISCOVERY_GROUP_REF.getLocalName()),reader.getLocation());
}
if (!required.isEmpty()) {
missingRequired(reader,required);
}
updates.add(bridgeAdd);
}
