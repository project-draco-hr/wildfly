{
  Map<String,Object> params=new HashMap<String,Object>();
  while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
    int count=reader.getAttributeCount();
    String key=null;
    String value=null;
    for (int n=0; n < count; n++) {
      String attrName=reader.getAttributeLocalName(n);
      Attribute attribute=Attribute.forName(attrName);
switch (attribute) {
case KEY:
        key=reader.getAttributeValue(n);
      break;
case VALUE:
    value=reader.getAttributeValue(n);
  break;
default :
throw unexpectedAttribute(reader,n);
}
}
Element element=Element.forName(reader.getLocalName());
switch (element) {
case FACTORY_CLASS:
{
if (!generic) {
throw ParseUtils.unexpectedElement(reader);
}
spec.setFactoryClassName(reader.getElementText().trim());
break;
}
case PARAM:
{
params.put(key,value);
ParseUtils.requireNoContent(reader);
break;
}
default :
{
throw ParseUtils.unexpectedElement(reader);
}
}
}
spec.setParams(params);
}
