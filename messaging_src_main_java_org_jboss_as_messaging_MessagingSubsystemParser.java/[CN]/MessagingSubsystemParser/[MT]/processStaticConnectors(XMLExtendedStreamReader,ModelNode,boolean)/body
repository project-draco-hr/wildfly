{
  if (cluster) {
    int count=reader.getAttributeCount();
    for (int i=0; i < count; i++) {
      final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case ALLOW_DIRECT_CONNECTIONS_ONLY:
{
          final Location location=reader.getLocation();
          final String attrValue=reader.getAttributeValue(i);
          CommonAttributes.ALLOW_DIRECT_CONNECTIONS_ONLY.parseAndSetParameter(attrValue,addOperation,location);
          break;
        }
default :
{
        throw ParseUtils.unexpectedAttribute(reader,i);
      }
  }
}
}
 else {
requireNoAttributes(reader);
}
EnumSet<Element> required=EnumSet.of(Element.CONNECTOR_REF);
while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
final Element element=Element.forName(reader.getLocalName());
required.remove(element);
switch (element) {
case CONNECTOR_REF:
{
    handleElementText(reader,element,cluster ? "cluster-connection" : "bridge",addOperation);
    break;
  }
default :
{
  throw ParseUtils.unexpectedElement(reader);
}
}
}
if (!required.isEmpty()) {
missingRequired(reader,required);
}
}
