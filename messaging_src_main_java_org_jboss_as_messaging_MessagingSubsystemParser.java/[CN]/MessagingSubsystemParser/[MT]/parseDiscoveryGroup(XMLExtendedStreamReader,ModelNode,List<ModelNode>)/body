{
  String name=null;
  int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    final String attrValue=reader.getAttributeValue(i);
    final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case NAME:
{
        name=attrValue;
        break;
      }
default :
{
      throw ParseUtils.unexpectedAttribute(reader,i);
    }
}
}
if (name == null) {
ParseUtils.missingRequired(reader,Collections.singleton(Attribute.NAME));
}
ModelNode discoveryGroup=org.jboss.as.controller.operations.common.Util.getEmptyOperation(ADD,address.clone().add(CommonAttributes.DISCOVERY_GROUP,name));
EnumSet<Element> required=EnumSet.of(Element.GROUP_ADDRESS,Element.GROUP_PORT);
while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
final Element element=Element.forName(reader.getLocalName());
required.remove(element);
switch (element) {
case LOCAL_BIND_ADDRESS:
case GROUP_ADDRESS:
case GROUP_PORT:
case REFRESH_TIMEOUT:
case SOCKET_BINDING:
case INITIAL_WAIT_TIMEOUT:
  handleElementText(reader,element,discoveryGroup);
break;
default :
{
throw ParseUtils.unexpectedElement(reader);
}
}
}
if (!required.isEmpty()) {
missingRequired(reader,required);
}
updates.add(discoveryGroup);
}
