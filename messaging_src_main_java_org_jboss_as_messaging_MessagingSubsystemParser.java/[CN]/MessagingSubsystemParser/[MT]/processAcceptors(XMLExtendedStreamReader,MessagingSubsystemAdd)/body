{
  while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
    String name=null;
    String socketBinding=null;
    int serverId=0;
    int count=reader.getAttributeCount();
    for (int i=0; i < count; i++) {
      final String attrValue=reader.getAttributeValue(i);
      final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case NAME:
{
          name=attrValue;
          break;
        }
case SOCKET_BINDING:
{
        socketBinding=attrValue;
        break;
      }
case SERVER_ID:
{
      serverId=Integer.valueOf(attrValue);
      break;
    }
default :
{
    throw ParseUtils.unexpectedAttribute(reader,i);
  }
}
}
final Element element=Element.forName(reader.getLocalName());
switch (element) {
case ACCEPTOR:
{
final GenericAcceptorSpec acceptor=new GenericAcceptorSpec(name);
acceptor.setSocketBindingRef(socketBinding);
parseTransportConfigurationParams(reader,acceptor,true);
messagingSubsystemAdd.addAcceptor(acceptor);
break;
}
case NETTY_ACCEPTOR:
{
final NettyAcceptorSpec acceptor=new NettyAcceptorSpec(name);
acceptor.setSocketBindingRef(socketBinding);
parseTransportConfigurationParams(reader,acceptor,false);
messagingSubsystemAdd.addAcceptor(acceptor);
break;
}
case IN_VM_ACCEPTOR:
{
final InVMAcceptorSpec acceptor=new InVMAcceptorSpec(name);
acceptor.setServerId(serverId);
parseTransportConfigurationParams(reader,acceptor,false);
messagingSubsystemAdd.addAcceptor(acceptor);
break;
}
default :
{
throw ParseUtils.unexpectedElement(reader);
}
}
}
}
