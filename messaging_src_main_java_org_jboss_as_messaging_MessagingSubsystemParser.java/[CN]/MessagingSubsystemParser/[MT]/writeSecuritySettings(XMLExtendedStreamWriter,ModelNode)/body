{
  writer.writeStartElement(Element.SECURITY_SETTINGS.getLocalName());
  for (  Property matchRoles : node.asPropertyList()) {
    writer.writeStartElement(Element.SECURITY_SETTING.getLocalName());
    writer.writeAttribute(Attribute.MATCH.getLocalName(),matchRoles.getName());
    if (matchRoles.getValue().hasDefined(ROLE)) {
      ArrayList<String> send=new ArrayList<String>();
      ArrayList<String> consume=new ArrayList<String>();
      ArrayList<String> createDurableQueue=new ArrayList<String>();
      ArrayList<String> deleteDurableQueue=new ArrayList<String>();
      ArrayList<String> createNonDurableQueue=new ArrayList<String>();
      ArrayList<String> deleteNonDurableQueue=new ArrayList<String>();
      ArrayList<String> manageRoles=new ArrayList<String>();
      for (      Property rolePerms : matchRoles.getValue().get(ROLE).asPropertyList()) {
        final String role=rolePerms.getName();
        final ModelNode perms=rolePerms.getValue();
        if (perms.get(SecurityRoleAdd.SEND.getName()).asBoolean(false)) {
          send.add(role);
        }
        if (perms.get(SecurityRoleAdd.CONSUME.getName()).asBoolean(false)) {
          consume.add(role);
        }
        if (perms.get(SecurityRoleAdd.CREATE_DURABLE_QUEUE.getName()).asBoolean(false)) {
          createDurableQueue.add(role);
        }
        if (perms.get(SecurityRoleAdd.DELETE_DURABLE_QUEUE.getName()).asBoolean(false)) {
          deleteDurableQueue.add(role);
        }
        if (perms.get(SecurityRoleAdd.CREATE_NON_DURABLE_QUEUE.getName()).asBoolean(false)) {
          createNonDurableQueue.add(role);
        }
        if (perms.get(SecurityRoleAdd.DELETE_NON_DURABLE_QUEUE.getName()).asBoolean(false)) {
          deleteNonDurableQueue.add(role);
        }
        if (perms.get(SecurityRoleAdd.MANAGE.getName()).asBoolean(false)) {
          manageRoles.add(role);
        }
      }
      writePermission(writer,SEND_XML_NAME,send);
      writePermission(writer,CONSUME_XML_NAME,consume);
      writePermission(writer,CREATEDURABLEQUEUE_XML_NAME,createDurableQueue);
      writePermission(writer,DELETEDURABLEQUEUE_XML_NAME,deleteDurableQueue);
      writePermission(writer,CREATE_NON_DURABLE_QUEUE_XML_NAME,createNonDurableQueue);
      writePermission(writer,DELETE_NON_DURABLE_QUEUE_XML_NAME,deleteNonDurableQueue);
      writePermission(writer,MANAGE_XML_NAME,manageRoles);
    }
    writer.writeEndElement();
  }
  writer.writeEndElement();
}
