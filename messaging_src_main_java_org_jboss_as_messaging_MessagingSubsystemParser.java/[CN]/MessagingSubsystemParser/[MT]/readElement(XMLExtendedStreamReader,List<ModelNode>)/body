{
  final ModelNode address=new ModelNode();
  address.add(SUBSYSTEM,MessagingExtension.SUBSYSTEM_NAME);
  address.protect();
  final ModelNode operation=new ModelNode();
  operation.get(OP).set(ADD);
  operation.get(OP_ADDR).add(SUBSYSTEM,MessagingExtension.SUBSYSTEM_NAME);
  list.add(operation);
  EnumSet<Element> seen=EnumSet.noneOf(Element.class);
  int tag=reader.getEventType();
  String localName=null;
  do {
    tag=reader.nextTag();
    localName=reader.getLocalName();
    final Element element=Element.forName(reader.getLocalName());
    if (!seen.add(element)) {
      throw ParseUtils.duplicateNamedElement(reader,element.getLocalName());
    }
switch (element) {
case ACCEPTORS:
{
        final ModelNode acceptors=processAcceptors(reader);
        operation.get(ACCEPTOR).set(acceptors);
        break;
      }
case ADDRESS_SETTINGS:
{
      final ModelNode addressSettings=processAddressSettings(reader);
      operation.get(ADDRESS_SETTING).set(addressSettings);
      break;
    }
case BINDINGS_DIRECTORY:
{
    final ModelNode directory=parseDirectory(reader);
    operation.get(BINDINGS_DIRECTORY).set(directory);
    break;
  }
case BRIDGES:
unhandledElement(reader,element);
break;
case BROADCAST_GROUPS:
processBroadcastGroups(reader,address,list);
break;
case CLUSTER_CONNECTIONS:
unhandledElement(reader,element);
break;
case CONNECTORS:
{
final ModelNode connectors=processConnectors(reader);
operation.get(CONNECTOR).set(connectors);
break;
}
case CONNECTOR_SERVICES:
unhandledElement(reader,element);
break;
case DISCOVERY_GROUPS:
processDiscoveryGroups(reader,address,list);
break;
case DIVERTS:
parseDiverts(reader,address,list);
break;
case FILE_DEPLOYMENT_ENABLED:
unhandledElement(reader,element);
break;
case GROUPING_HANDLER:
processGroupingHandler(reader,address,list);
break;
case JOURNAL_DIRECTORY:
{
final ModelNode directory=parseDirectory(reader);
operation.get(JOURNAL_DIRECTORY).set(directory);
break;
}
case LARGE_MESSAGES_DIRECTORY:
{
final ModelNode dir=parseDirectory(reader);
operation.get(LARGE_MESSAGES_DIRECTORY).set(dir);
break;
}
case LIVE_CONNECTOR_REF:
{
Location location=reader.getLocation();
String string=readStringAttributeElement(reader,CommonAttributes.CONNECTOR_NAME);
LIVE_CONNECTOR_REF.parseAndSetParameter(string,operation,location);
break;
}
case PAGING_DIRECTORY:
{
final ModelNode directory=parseDirectory(reader);
operation.get(PAGING_DIRECTORY).set(directory);
break;
}
case REFRESH_TIMEOUT:
unhandledElement(reader,element);
break;
case REMOTING_INTERCEPTORS:
processRemotingInterceptors(reader,operation);
break;
case SECURITY_SETTINGS:
{
final ModelNode securitySettings=processSecuritySettings(reader);
operation.get(SECURITY_SETTING).set(securitySettings);
break;
}
case DEAD_LETTER_ADDRESS_NODE_NAME:
unhandledElement(reader,element);
break;
case EXPIRY_ADDRESS_NODE_NAME:
unhandledElement(reader,element);
break;
case REDELIVERY_DELAY_NODE_NAME:
unhandledElement(reader,element);
break;
case MAX_DELIVERY_ATTEMPTS:
unhandledElement(reader,element);
break;
case MAX_SIZE_BYTES_NODE_NAME:
unhandledElement(reader,element);
break;
case ADDRESS_FULL_MESSAGE_POLICY_NODE_NAME:
unhandledElement(reader,element);
break;
case PAGE_SIZE_BYTES_NODE_NAME:
unhandledElement(reader,element);
break;
case MESSAGE_COUNTER_HISTORY_DAY_LIMIT_NODE_NAME:
unhandledElement(reader,element);
break;
case LVQ_NODE_NAME:
unhandledElement(reader,element);
break;
case REDISTRIBUTION_DELAY_NODE_NAME:
unhandledElement(reader,element);
break;
case SEND_TO_DLA_ON_NO_ROUTE:
unhandledElement(reader,element);
break;
case CORE_QUEUES:
{
parseQueues(reader,address,list);
break;
}
case CONNECTION_FACTORIES:
{
processConnectionFactories(reader,address,list);
break;
}
case JMS_DESTINATIONS:
{
processJmsDestinations(reader,address,list);
break;
}
case SCHEDULED_THREAD_POOL_MAX_SIZE:
case THREAD_POOL_MAX_SIZE:
{
handleElementText(reader,element,"server",operation);
break;
}
case SUBSYSTEM:
break;
default :
if (SIMPLE_ROOT_RESOURCE_ELEMENTS.contains(element)) {
AttributeDefinition attributeDefinition=element.getDefinition();
if (attributeDefinition instanceof SimpleAttributeDefinition) {
handleElementText(reader,element,operation);
}
 else {
throw new UnsupportedOperationException("implement ListAttributeDefinition support");
}
}
 else {
throw ParseUtils.unexpectedElement(reader);
}
}
}
 while (reader.hasNext() && localName.equals(ModelDescriptionConstants.SUBSYSTEM) == false);
}
