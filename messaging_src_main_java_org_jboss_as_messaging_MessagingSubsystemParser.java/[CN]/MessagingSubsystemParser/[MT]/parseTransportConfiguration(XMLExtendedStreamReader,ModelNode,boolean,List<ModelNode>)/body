{
  while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
    Element element=Element.forName(reader.getLocalName());
switch (element) {
case FACTORY_CLASS:
{
        if (!generic) {
          throw ParseUtils.unexpectedElement(reader);
        }
        handleElementText(reader,element,operation);
        break;
      }
case PARAM:
{
      int count=reader.getAttributeCount();
      String key=null;
      String value=null;
      for (int n=0; n < count; n++) {
        String attrName=reader.getAttributeLocalName(n);
        Attribute attribute=Attribute.forName(attrName);
switch (attribute) {
case KEY:
          key=reader.getAttributeValue(n);
        break;
case VALUE:
      value=reader.getAttributeValue(n);
    break;
default :
  throw unexpectedAttribute(reader,n);
}
}
ModelNode addParam=new ModelNode();
addParam.get(OP).set(ADD);
ModelNode transportAddress=operation.get(OP_ADDR).clone();
addParam.get(OP_ADDR).set(transportAddress.add(CommonAttributes.PARAM,key));
TransportParamDefinition.VALUE.parseAndSetParameter(value,addParam,reader);
updates.add(addParam);
ParseUtils.requireNoContent(reader);
break;
}
default :
{
throw ParseUtils.unexpectedElement(reader);
}
}
}
}
