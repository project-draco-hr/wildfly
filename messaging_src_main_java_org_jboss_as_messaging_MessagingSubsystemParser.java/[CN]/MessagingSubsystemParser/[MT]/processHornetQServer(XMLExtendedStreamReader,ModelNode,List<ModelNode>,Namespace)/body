{
  String hqServerName=null;
  String elementName=null;
switch (namespace) {
case MESSAGING_1_0:
    requireNoAttributes(reader);
  elementName=ModelDescriptionConstants.SUBSYSTEM;
break;
default :
{
final int count=reader.getAttributeCount();
if (count > 0) {
  requireSingleAttribute(reader,Attribute.NAME.getLocalName());
  hqServerName=reader.getAttributeValue(0).trim();
}
elementName=CommonAttributes.HORNETQ_SERVER;
}
}
if (hqServerName == null || hqServerName.length() == 0) {
hqServerName="default";
}
final ModelNode address=subsystemAddress.clone();
address.add(HORNETQ_SERVER,hqServerName);
address.protect();
final ModelNode operation=new ModelNode();
operation.get(OP).set(ADD);
operation.get(OP_ADDR).set(address);
list.add(operation);
EnumSet<Element> seen=EnumSet.noneOf(Element.class);
int tag=reader.getEventType();
String localName=null;
do {
tag=reader.nextTag();
localName=reader.getLocalName();
final Element element=Element.forName(reader.getLocalName());
if (!seen.add(element)) {
throw ParseUtils.duplicateNamedElement(reader,element.getLocalName());
}
switch (element) {
case ACCEPTORS:
processAcceptors(reader,address,list);
break;
case ADDRESS_SETTINGS:
processAddressSettings(reader,address,list);
break;
case BINDINGS_DIRECTORY:
parseDirectory(reader,CommonAttributes.BINDINGS_DIRECTORY,address,list);
break;
case BRIDGES:
processBridges(reader,address,list);
break;
case BROADCAST_GROUPS:
processBroadcastGroups(reader,address,list);
break;
case CLUSTER_CONNECTIONS:
processClusterConnections(reader,address,list);
break;
case CONNECTORS:
processConnectors(reader,address,list);
break;
case CONNECTOR_SERVICES:
processConnectorServices(reader,address,list);
break;
case DISCOVERY_GROUPS:
processDiscoveryGroups(reader,address,list);
break;
case DIVERTS:
parseDiverts(reader,address,list);
break;
case FILE_DEPLOYMENT_ENABLED:
unhandledElement(reader,element);
break;
case GROUPING_HANDLER:
processGroupingHandler(reader,address,list);
break;
case JOURNAL_DIRECTORY:
parseDirectory(reader,CommonAttributes.JOURNAL_DIRECTORY,address,list);
break;
case LARGE_MESSAGES_DIRECTORY:
parseDirectory(reader,CommonAttributes.LARGE_MESSAGES_DIRECTORY,address,list);
break;
case LIVE_CONNECTOR_REF:
{
String string=readStringAttributeElement(reader,CommonAttributes.CONNECTOR_NAME);
LIVE_CONNECTOR_REF.parseAndSetParameter(string,operation,reader);
break;
}
case PAGING_DIRECTORY:
parseDirectory(reader,CommonAttributes.PAGING_DIRECTORY,address,list);
break;
case REMOTING_INTERCEPTORS:
processRemotingInterceptors(reader,operation);
break;
case SECURITY_DOMAIN:
handleElementText(reader,element,null,operation);
break;
case SECURITY_SETTINGS:
{
processSecuritySettings(reader,address,list);
break;
}
case CORE_QUEUES:
{
parseQueues(reader,address,list);
break;
}
case CONNECTION_FACTORIES:
{
processConnectionFactories(reader,address,list);
break;
}
case JMS_DESTINATIONS:
{
processJmsDestinations(reader,address,list);
break;
}
case SCHEDULED_THREAD_POOL_MAX_SIZE:
case THREAD_POOL_MAX_SIZE:
{
handleElementText(reader,element,"server",operation);
break;
}
case HORNETQ_SERVER:
if (namespace == Namespace.MESSAGING_1_0) {
throw unexpectedEndElement(reader);
}
break;
case SUBSYSTEM:
if (namespace != Namespace.MESSAGING_1_0) {
throw unexpectedEndElement(reader);
}
break;
default :
if (SIMPLE_ROOT_RESOURCE_ELEMENTS.contains(element)) {
AttributeDefinition attributeDefinition=element.getDefinition();
if (attributeDefinition instanceof SimpleAttributeDefinition) {
handleElementText(reader,element,operation);
}
 else {
throw MESSAGES.unsupportedElement(element.getLocalName());
}
}
 else {
throw ParseUtils.unexpectedElement(reader);
}
}
}
 while (reader.hasNext() && localName.equals(elementName) == false);
}
