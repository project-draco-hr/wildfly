{
  if (CommonAttributes.DISCOVERY_GROUP_NAME.isMarshallable(node)) {
    writer.writeStartElement(Element.DISCOVERY_GROUP_REF.getLocalName());
    CommonAttributes.DISCOVERY_GROUP_NAME.marshallAsAttribute(node,writer);
    writer.writeEndElement();
  }
  if (has(factory,CONNECTOR)) {
    writer.writeStartElement(Element.CONNECTORS.getLocalName());
    for (    Property connProp : factory.get(CONNECTOR).asPropertyList()) {
      writer.writeStartElement(Element.CONNECTOR_REF.getLocalName());
      writer.writeAttribute(Attribute.CONNECTOR_NAME.getLocalName(),connProp.getName());
      final ModelNode conn=connProp.getValue();
      if (conn.isDefined()) {
        writer.writeAttribute(Attribute.BACKUP_CONNECTOR_NAME.getLocalName(),connProp.getValue().asString());
      }
      writer.writeEndElement();
    }
    writer.writeEndElement();
  }
  JndiEntriesAttribute.CONNECTION_FACTORY.marshallAsElement(factory,writer);
  if (has(factory,TRANSACTION)) {
    writer.writeStartElement(Element.TRANSACTION.getLocalName());
    writeTransactionTypeAttribute(writer,Element.MODE,factory.get(TRANSACTION));
    writer.writeEndElement();
  }
  if (has(factory,INBOUND_CONFIG)) {
    final ModelNode inboundConfigs=factory.get(INBOUND_CONFIG);
    if (inboundConfigs.getType() == ModelType.LIST) {
      writer.writeStartElement(Element.INBOUND_CONFIG.getLocalName());
      for (      ModelNode config : inboundConfigs.asList()) {
        if (config.isDefined()) {
          CommonAttributes.USE_JNDI.marshallAsElement(config,writer);
          CommonAttributes.JNDI_PARAMS.marshallAsElement(config,writer);
          CommonAttributes.SETUP_ATTEMPTS.marshallAsElement(config,writer);
          CommonAttributes.SETUP_INTERVAL.marshallAsElement(config,writer);
          CommonAttributes.USE_LOCAL_TX.marshallAsElement(config,writer);
        }
      }
      writer.writeEndElement();
    }
  }
  CommonAttributes.DISCOVERY_INITIAL_WAIT_TIMEOUT.marshallAsElement(node,writer);
  CommonAttributes.CLIENT_FAILURE_CHECK_PERIOD.marshallAsElement(node,writer);
  CommonAttributes.CONNECTION_TTL.marshallAsElement(node,writer);
  CommonAttributes.CALL_TIMEOUT.marshallAsElement(node,writer);
  CommonAttributes.CONSUMER_WINDOW_SIZE.marshallAsElement(node,writer);
  CommonAttributes.CONSUMER_MAX_RATE.marshallAsElement(node,writer);
  CommonAttributes.CONFIRMATION_WINDOW_SIZE.marshallAsElement(node,writer);
  CommonAttributes.PRODUCER_WINDOW_SIZE.marshallAsElement(node,writer);
  CommonAttributes.PRODUCER_MAX_RATE.marshallAsElement(node,writer);
  CommonAttributes.CACHE_LARGE_MESSAGE_CLIENT.marshallAsElement(node,writer);
  CommonAttributes.MIN_LARGE_MESSAGE_SIZE.marshallAsElement(node,writer);
  CommonAttributes.CLIENT_ID.marshallAsElement(node,writer);
  CommonAttributes.DUPS_OK_BATCH_SIZE.marshallAsElement(node,writer);
  CommonAttributes.TRANSACTION_BATCH_SIZE.marshallAsElement(node,writer);
  CommonAttributes.BLOCK_ON_ACK.marshallAsElement(node,writer);
  CommonAttributes.BLOCK_ON_NON_DURABLE_SEND.marshallAsElement(node,writer);
  CommonAttributes.BLOCK_ON_DURABLE_SEND.marshallAsElement(node,writer);
  CommonAttributes.AUTO_GROUP.marshallAsElement(node,writer);
  CommonAttributes.PRE_ACK.marshallAsElement(node,writer);
  CommonAttributes.RETRY_INTERVAL_MULTIPLIER.marshallAsElement(node,writer);
  CommonAttributes.MAX_RETRY_INTERVAL.marshallAsElement(node,writer);
  CommonAttributes.CONNECTION_FACTORY_RECONNECT_ATTEMPTS.marshallAsElement(node,writer);
  CommonAttributes.FAILOVER_ON_INITIAL_CONNECTION.marshallAsElement(node,writer);
  CommonAttributes.FAILOVER_ON_SERVER_SHUTDOWN.marshallAsElement(node,writer);
  CommonAttributes.LOAD_BALANCING_CLASS_NAME.marshallAsElement(node,writer);
  CommonAttributes.USE_GLOBAL_POOLS.marshallAsElement(node,writer);
  CommonAttributes.CONNECTION_SCHEDULED_THREAD_POOL_MAX_SIZE.marshallAsElement(factory,writer);
  CommonAttributes.CONNECTION_THREAD_POOL_MAX_SIZE.marshallAsElement(factory,writer);
  CommonAttributes.GROUP_ID.marshallAsElement(node,writer);
  writer.writeEndElement();
}
