{
  String name=null;
  String socketBinding=null;
  int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    final String attrValue=reader.getAttributeValue(i);
    final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case NAME:
{
        name=attrValue;
        break;
      }
case SOCKET_BINDING:
{
      socketBinding=attrValue;
      break;
    }
default :
{
    throw ParseUtils.unexpectedAttribute(reader,i);
  }
}
}
if (name == null) {
ParseUtils.missingRequired(reader,Collections.singleton(Attribute.NAME));
}
ModelNode broadcastGroupAdd=org.jboss.as.controller.operations.common.Util.getEmptyOperation(ADD,address.clone().add(CommonAttributes.BROADCAST_GROUP,name));
if (socketBinding != null) broadcastGroupAdd.get(SOCKET_BINDING.getName()).set(socketBinding);
EnumSet<Element> required=EnumSet.of(Element.GROUP_ADDRESS,Element.GROUP_PORT);
while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
final Element element=Element.forName(reader.getLocalName());
required.remove(element);
switch (element) {
case LOCAL_BIND_ADDRESS:
case LOCAL_BIND_PORT:
case GROUP_ADDRESS:
case GROUP_PORT:
case BROADCAST_PERIOD:
handleElementText(reader,element,broadcastGroupAdd);
break;
case CONNECTOR_REF:
handleElementText(reader,element,"broadcast-group",broadcastGroupAdd);
break;
default :
{
throw ParseUtils.unexpectedElement(reader);
}
}
}
if (!required.isEmpty()) {
missingRequired(reader,required);
}
updates.add(broadcastGroupAdd);
}
