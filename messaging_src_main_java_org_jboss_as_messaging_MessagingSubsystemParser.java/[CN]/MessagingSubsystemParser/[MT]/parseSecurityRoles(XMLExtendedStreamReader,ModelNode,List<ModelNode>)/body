{
  final Map<String,Set<AttributeDefinition>> permsByRole=new HashMap<String,Set<AttributeDefinition>>();
  int tag=reader.getEventType();
  String localName=null;
  do {
    tag=reader.nextTag();
    localName=reader.getLocalName();
    final Element element=Element.forName(localName);
    if (element != Element.PERMISSION_ELEMENT_NAME) {
      break;
    }
    List<String> roles=null;
    String type=null;
    final int count=reader.getAttributeCount();
    for (int i=0; i < count; i++) {
      requireNoNamespaceAttribute(reader,i);
      final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case ROLES_ATTR_NAME:
        roles=reader.getListAttributeValue(i);
      break;
case TYPE_ATTR_NAME:
    type=reader.getAttributeValue(i);
  break;
default :
throw ParseUtils.unexpectedAttribute(reader,i);
}
}
for (String role : roles) {
role=role.trim();
Set<AttributeDefinition> perms=permsByRole.get(role);
if (perms == null) {
perms=new HashSet<AttributeDefinition>();
permsByRole.put(role,perms);
}
for (AttributeDefinition perm : SecurityRoleAdd.ROLE_ATTRIBUTES) {
if (perm.getXmlName().equals(type)) {
perms.add(perm);
}
}
}
reader.discardRemainder();
}
 while (reader.hasNext());
for (Map.Entry<String,Set<AttributeDefinition>> entry : permsByRole.entrySet()) {
final String role=entry.getKey();
final Set<AttributeDefinition> perms=entry.getValue();
final ModelNode addr=address.clone();
addr.add(ROLE,role);
final ModelNode operation=new ModelNode();
operation.get(OP).set(ADD);
operation.get(OP_ADDR).set(addr);
for (AttributeDefinition perm : SecurityRoleAdd.ROLE_ATTRIBUTES) {
operation.get(perm.getName()).set(perms.contains(perm));
}
operations.add(operation);
}
}
