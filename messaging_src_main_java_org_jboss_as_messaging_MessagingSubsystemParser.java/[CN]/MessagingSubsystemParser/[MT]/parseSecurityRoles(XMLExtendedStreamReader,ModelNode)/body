{
  ArrayList<String> send=new ArrayList<String>();
  ArrayList<String> consume=new ArrayList<String>();
  ArrayList<String> createDurableQueue=new ArrayList<String>();
  ArrayList<String> deleteDurableQueue=new ArrayList<String>();
  ArrayList<String> createNonDurableQueue=new ArrayList<String>();
  ArrayList<String> deleteNonDurableQueue=new ArrayList<String>();
  ArrayList<String> manageRoles=new ArrayList<String>();
  ArrayList<String> allRoles=new ArrayList<String>();
  int tag=reader.getEventType();
  String localName=null;
  do {
    tag=reader.nextTag();
    localName=reader.getLocalName();
    final Element element=Element.forName(localName);
    if (element != Element.PERMISSION_ELEMENT_NAME) {
      break;
    }
    List<String> roles=null;
    String type=null;
    final int count=reader.getAttributeCount();
    for (int i=0; i < count; i++) {
      requireNoNamespaceAttribute(reader,i);
      final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case ROLES_ATTR_NAME:
        roles=reader.getListAttributeValue(i);
      break;
case TYPE_ATTR_NAME:
    type=reader.getAttributeValue(i);
  break;
default :
throw ParseUtils.unexpectedAttribute(reader,i);
}
}
for (String role : roles) {
if (Attribute.SEND_NAME.getLocalName().equals(type)) {
send.add(role.trim());
}
 else if (Attribute.CONSUME_NAME.getLocalName().equals(type)) {
consume.add(role.trim());
}
 else if (Attribute.CREATEDURABLEQUEUE_NAME.getLocalName().equals(type)) {
createDurableQueue.add(role);
}
 else if (Attribute.DELETEDURABLEQUEUE_NAME.getLocalName().equals(type)) {
deleteDurableQueue.add(role);
}
 else if (Attribute.CREATE_NON_DURABLE_QUEUE_NAME.getLocalName().equals(type)) {
createNonDurableQueue.add(role);
}
 else if (Attribute.DELETE_NON_DURABLE_QUEUE_NAME.getLocalName().equals(type)) {
deleteNonDurableQueue.add(role);
}
 else if (Attribute.CREATETEMPQUEUE_NAME.getLocalName().equals(type)) {
createNonDurableQueue.add(role);
}
 else if (Attribute.DELETETEMPQUEUE_NAME.getLocalName().equals(type)) {
deleteNonDurableQueue.add(role);
}
 else if (Attribute.MANAGE_NAME.getLocalName().equals(type)) {
manageRoles.add(role);
}
if (!allRoles.contains(role.trim())) {
allRoles.add(role.trim());
}
}
reader.discardRemainder();
}
 while (reader.hasNext());
for (String role : allRoles) {
node.get(role,SEND_NAME).set(send.contains(role));
node.get(role,CONSUME_NAME).set(consume.contains(role));
node.get(role,CREATEDURABLEQUEUE_NAME).set(createDurableQueue.contains(role));
node.get(role,DELETEDURABLEQUEUE_NAME).set(deleteDurableQueue.contains(role));
node.get(role,CREATE_NON_DURABLE_QUEUE_NAME).set(createNonDurableQueue.contains(role));
node.get(role,DELETE_NON_DURABLE_QUEUE_NAME).set(deleteNonDurableQueue.contains(role));
node.get(role,MANAGE_NAME).set(manageRoles.contains(role));
}
}
