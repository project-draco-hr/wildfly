{
  final ModelNode address=new ModelNode();
  address.add("socket-binding-group","*");
  address.add("socket-binding","*");
  address.protect();
  final ModelNode operation=new ModelNode();
  operation.get(OP).set(READ_RESOURCE_DESCRIPTION_OPERATION);
  operation.get(OP_ADDR).set(address);
  final ModelNode result=managementClient.getControllerClient().execute(operation);
  Assert.assertTrue(result.hasDefined(RESULT));
  Assert.assertEquals(SUCCESS,result.get(OUTCOME).asString());
  final Collection<ModelNode> steps=result.get(RESULT).asList();
  Assert.assertFalse(steps.isEmpty());
  Assert.assertEquals("should only contain a single type",1,steps.size());
  for (  final ModelNode step : steps) {
    Assert.assertTrue(step.hasDefined(OP_ADDR));
    Assert.assertTrue(step.hasDefined(RESULT));
    Assert.assertEquals(SUCCESS,step.get(OUTCOME).asString());
    final ModelNode stepResult=step.get(RESULT);
    Assert.assertTrue(stepResult.hasDefined(DESCRIPTION));
    Assert.assertTrue(stepResult.hasDefined(ATTRIBUTES));
    Assert.assertTrue(stepResult.get(ModelDescriptionConstants.ATTRIBUTES).hasDefined(ModelDescriptionConstants.NAME));
    Assert.assertTrue(stepResult.get(ModelDescriptionConstants.ATTRIBUTES).hasDefined(ModelDescriptionConstants.INTERFACE));
    Assert.assertTrue(stepResult.get(ModelDescriptionConstants.ATTRIBUTES).hasDefined(ModelDescriptionConstants.PORT));
  }
}
