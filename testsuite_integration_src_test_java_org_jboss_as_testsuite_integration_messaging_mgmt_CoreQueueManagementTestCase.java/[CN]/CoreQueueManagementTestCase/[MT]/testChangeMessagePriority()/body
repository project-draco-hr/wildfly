{
  ClientProducer producer=session.createProducer(getQueueName());
  ClientMessage msgA=session.createMessage(ClientMessage.TEXT_TYPE,false);
  producer.send(msgA);
  producer.send(session.createMessage(ClientMessage.TEXT_TYPE,false));
  producer.send(session.createMessage(ClientMessage.TEXT_TYPE,false));
  Set<Integer> priorities=new HashSet<Integer>();
  ModelNode result=execute(getQueueOperation("list-messages"),true);
  Assert.assertEquals(3,result.asInt());
  for (  ModelNode node : result.asList()) {
    priorities.add(node.get("priority").asInt());
  }
  int newPriority=-1;
  for (int i=0; i < 10; i++) {
    if (!priorities.contains(i)) {
      newPriority=i;
      break;
    }
  }
  long id=findMessageID();
  ModelNode op=getQueueOperation("change-message-priority");
  op.get("message-id").set(id);
  op.get("new-priority").set(newPriority);
  result=execute(op,true);
  Assert.assertTrue(result.isDefined());
  Assert.assertTrue(result.asBoolean());
  result=execute(getQueueOperation("list-messages"),true);
  boolean found=false;
  for (  ModelNode node : result.asList()) {
    if (id == node.get("messageID").asLong()) {
      Assert.assertEquals(newPriority,node.get("priority").asInt());
      found=true;
      break;
    }
  }
  Assert.assertTrue(found);
  op=getQueueOperation("change-messages-priority");
  op.get("new-priority").set(newPriority);
  result=execute(op,true);
  Assert.assertTrue(result.isDefined());
  Assert.assertTrue(result.asInt() > 1 && result.asInt() < 4);
  result=execute(getQueueOperation("list-messages"),true);
  for (  ModelNode node : result.asList()) {
    Assert.assertEquals(newPriority,node.get("priority").asInt());
  }
}
