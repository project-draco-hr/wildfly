{
  final boolean addDependencies=LoggingRootResource.ADD_LOGGING_API_DEPENDENCIES.resolveModelAttribute(context,model).asBoolean();
  context.addStep(new AbstractDeploymentChainStep(){
    @Override protected void execute(    final DeploymentProcessorTarget processorTarget){
      if (addDependencies) {
        processorTarget.addDeploymentProcessor(LoggingExtension.SUBSYSTEM_NAME,Phase.DEPENDENCIES,Phase.DEPENDENCIES_LOGGING,new LoggingDependencyDeploymentProcessor());
      }
      processorTarget.addDeploymentProcessor(LoggingExtension.SUBSYSTEM_NAME,Phase.POST_MODULE,Phase.POST_MODULE_LOGGING_CONFIG,new LoggingConfigDeploymentProcessor(LoggingExtension.CONTEXT_SELECTOR));
      processorTarget.addDeploymentProcessor(LoggingExtension.SUBSYSTEM_NAME,Phase.POST_MODULE,Phase.POST_MODULE_LOGGING_PROFILE,new LoggingProfileDeploymentProcessor(LoggingExtension.CONTEXT_SELECTOR));
    }
  }
,Stage.RUNTIME);
  final Resource resource=context.readResource(PathAddress.EMPTY_ADDRESS);
  final ConfigurationPersistence configurationPersistence=ConfigurationPersistence.getOrCreateConfigurationPersistence();
  final LogContextConfiguration logContextConfiguration=configurationPersistence.getLogContextConfiguration();
  if (!resource.hasChild(RootLoggerResourceDefinition.ROOT_LOGGER_PATH)) {
    LoggingLogger.ROOT_LOGGER.tracef("Removing the root logger configuration.");
    logContextConfiguration.removeLoggerConfiguration(CommonAttributes.ROOT_LOGGER_NAME);
  }
  if (resource.hasChild(PathElement.pathElement(LoggerResourceDefinition.LOGGER))) {
    final Set<String> loggerNames=resource.getChildrenNames(LoggerResourceDefinition.LOGGER);
    final List<String> configuredLoggerNames=logContextConfiguration.getLoggerNames();
    configuredLoggerNames.remove(CommonAttributes.ROOT_LOGGER_NAME);
    configuredLoggerNames.removeAll(loggerNames);
    for (    String name : configuredLoggerNames) {
      LoggingLogger.ROOT_LOGGER.tracef("Removing logger configuration for '%s'",name);
      logContextConfiguration.removeLoggerConfiguration(name);
    }
  }
  final List<String> configuredHandlerNames=logContextConfiguration.getHandlerNames();
  configuredHandlerNames.removeAll(resource.getChildrenNames(AsyncHandlerResourceDefinition.ASYNC_HANDLER));
  configuredHandlerNames.removeAll(resource.getChildrenNames(ConsoleHandlerResourceDefinition.CONSOLE_HANDLER));
  configuredHandlerNames.removeAll(resource.getChildrenNames(CustomHandlerResourceDefinition.CUSTOM_HANDLER));
  configuredHandlerNames.removeAll(resource.getChildrenNames(FileHandlerResourceDefinition.FILE_HANDLER));
  configuredHandlerNames.removeAll(resource.getChildrenNames(PeriodicHandlerResourceDefinition.PERIODIC_ROTATING_FILE_HANDLER));
  configuredHandlerNames.removeAll(resource.getChildrenNames(SizeRotatingHandlerResourceDefinition.SIZE_ROTATING_FILE_HANDLER));
  for (  String name : configuredHandlerNames) {
    LoggingLogger.ROOT_LOGGER.tracef("Removing handler configuration for '%s'",name);
    logContextConfiguration.removeHandlerConfiguration(name);
  }
  LoggingOperations.addCommitStep(context,configurationPersistence);
  LoggingLogger.ROOT_LOGGER.trace("Logging subsystem has been added.");
}
