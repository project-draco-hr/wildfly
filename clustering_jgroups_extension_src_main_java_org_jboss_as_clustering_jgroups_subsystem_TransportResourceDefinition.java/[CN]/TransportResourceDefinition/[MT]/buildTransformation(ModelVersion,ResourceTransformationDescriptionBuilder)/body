{
  ResourceTransformationDescriptionBuilder builder=parent.addChildResource(WILDCARD_PATH);
  ProtocolResourceDefinition.addTransformations(version,builder);
  if (JGroupsModel.VERSION_3_0_0.requiresTransformation(version)) {
    builder.getAttributeBuilder().setValueConverter(new DefaultValueAttributeConverter(Attribute.SHARED.getDefinition()),Attribute.SHARED.getDefinition());
    builder.setCustomResourceTransformer(new ResourceTransformer(){
      @Override public void transformResource(      ResourceTransformationContext context,      PathAddress address,      Resource resource) throws OperationFailedException {
        PropertyResourceDefinition.PROPERTIES_RESOURCE_TRANSFORMER.transformResource(context,LEGACY_ADDRESS_TRANSFORMER.transform(address),resource);
      }
    }
);
    builder.addOperationTransformationOverride(ModelDescriptionConstants.ADD).setCustomOperationTransformer(new SimpleOperationTransformer(new org.jboss.as.clustering.controller.transform.OperationTransformer(){
      @Override public ModelNode transformOperation(      final ModelNode operation){
        operation.get(ModelDescriptionConstants.OP_ADDR).set(LEGACY_ADDRESS_TRANSFORMER.transform(Operations.getPathAddress(operation)).toModelNode());
        return PropertyResourceDefinition.PROPERTIES_ADD_OP_TRANSFORMER.transformOperation(operation);
      }
    }
)).inheritResourceAttributeDefinitions();
    builder.addOperationTransformationOverride(ModelDescriptionConstants.REMOVE).setCustomOperationTransformer(new SimpleRemoveOperationTransformer(LEGACY_ADDRESS_TRANSFORMER));
    builder.addOperationTransformationOverride(ModelDescriptionConstants.READ_ATTRIBUTE_OPERATION).setCustomOperationTransformer(new SimpleReadAttributeOperationTransformer(LEGACY_ADDRESS_TRANSFORMER));
    builder.addOperationTransformationOverride(ModelDescriptionConstants.DESCRIBE).setCustomOperationTransformer(new SimpleDescribeOperationTransformer(LEGACY_ADDRESS_TRANSFORMER));
    org.jboss.as.clustering.controller.transform.OperationTransformer getPropertyTransformer=new org.jboss.as.clustering.controller.transform.OperationTransformer(){
      @Override public ModelNode transformOperation(      ModelNode operation){
        if (operation.get(ModelDescriptionConstants.NAME).asString().equals(ProtocolResourceDefinition.Attribute.PROPERTIES.getDefinition().getName())) {
          String key=operation.get("key").asString();
          PathAddress address=TransportResourceDefinition.LEGACY_ADDRESS_TRANSFORMER.transform(Operations.getPathAddress(operation));
          ModelNode transformedOperation=Util.createOperation(ModelDescriptionConstants.READ_ATTRIBUTE_OPERATION,address.append(PropertyResourceDefinition.pathElement(key)));
          transformedOperation.get(ModelDescriptionConstants.NAME).set(PropertyResourceDefinition.VALUE.getName());
          return transformedOperation;
        }
        return operation;
      }
    }
;
    builder.addRawOperationTransformationOverride(MapOperations.MAP_GET_DEFINITION.getName(),new SimpleOperationTransformer(getPropertyTransformer));
    List<OperationTransformer> transformerChain=new LinkedList<>();
    transformerChain.add(new SimplePathOperationTransformer(LEGACY_ADDRESS_TRANSFORMER));
    transformerChain.add(PropertyResourceDefinition.PROPERTIES_OP_TRANSFORMER);
    ChainedOperationTransformer chainedTransformer=new ChainedOperationTransformer(transformerChain,false);
    builder.addRawOperationTransformationOverride(MapOperations.MAP_PUT_DEFINITION.getName(),chainedTransformer).addRawOperationTransformationOverride(MapOperations.MAP_REMOVE_DEFINITION.getName(),chainedTransformer).addRawOperationTransformationOverride(MapOperations.MAP_CLEAR_DEFINITION.getName(),chainedTransformer).addRawOperationTransformationOverride(ModelDescriptionConstants.WRITE_ATTRIBUTE_OPERATION,chainedTransformer).addRawOperationTransformationOverride(ModelDescriptionConstants.UNDEFINE_ATTRIBUTE_OPERATION,chainedTransformer);
    builder.rejectChildResource(ThreadPoolResourceDefinition.WILDCARD_PATH);
  }
 else {
    for (    ThreadPoolResourceDefinition pool : ThreadPoolResourceDefinition.values()) {
      pool.buildTransformation(version,parent);
    }
  }
  PropertyResourceDefinition.buildTransformation(version,builder);
}
