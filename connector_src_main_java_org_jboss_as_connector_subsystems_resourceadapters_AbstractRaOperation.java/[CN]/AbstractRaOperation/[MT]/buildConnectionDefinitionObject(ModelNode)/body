{
  List<CommonConnDef> connDefs=new ArrayList<CommonConnDef>();
  if (parentNode.hasDefined(CONNECTIONDEFINITIONS_NAME)) {
    for (    ModelNode conDefNode : parentNode.get(CONNECTIONDEFINITIONS_NAME).asList()) {
      Map<String,String> configProperties=null;
      if (conDefNode.hasDefined(CONFIG_PROPERTIES.getName())) {
        configProperties=new HashMap<String,String>(conDefNode.get(CONFIG_PROPERTIES.getName()).asList().size());
        for (        ModelNode property : conDefNode.get(CONFIG_PROPERTIES.getName()).asList()) {
          configProperties.put(property.asProperty().getName(),property.asProperty().getValue().asString());
        }
      }
      String className=getStringIfSetOrGetDefault(conDefNode,CLASS_NAME.getName(),null);
      String jndiName=getStringIfSetOrGetDefault(conDefNode,JNDINAME.getName(),null);
      String poolName=getStringIfSetOrGetDefault(conDefNode,POOL_NAME.getName(),null);
      boolean enabled=getBooleanIfSetOrGetDefault(conDefNode,ENABLED.getName(),Defaults.ENABLED);
      boolean useJavaContext=getBooleanIfSetOrGetDefault(conDefNode,USE_JAVA_CONTEXT.getName(),Defaults.USE_JAVA_CONTEXT);
      boolean useCcm=getBooleanIfSetOrGetDefault(conDefNode,USE_CCM.getName(),Defaults.USE_CCM);
      Integer maxPoolSize=getIntIfSetOrGetDefault(conDefNode,MAX_POOL_SIZE.getName(),Defaults.MAX_POOL_SIZE);
      Integer minPoolSize=getIntIfSetOrGetDefault(conDefNode,MIN_POOL_SIZE.getName(),Defaults.MIN_POOL_SIZE);
      boolean prefill=getBooleanIfSetOrGetDefault(conDefNode,POOL_PREFILL.getName(),Defaults.PREFILL);
      boolean useStrictMin=getBooleanIfSetOrGetDefault(conDefNode,POOL_USE_STRICT_MIN.getName(),Defaults.USE_STRICT_MIN);
      final FlushStrategy flushStrategy=conDefNode.hasDefined(POOL_FLUSH_STRATEGY.getName()) ? FlushStrategy.valueOf(conDefNode.get(POOL_FLUSH_STRATEGY.getName()).asString()) : Defaults.FLUSH_STRATEGY;
      Integer allocationRetry=getIntIfSetOrGetDefault(conDefNode,ALLOCATION_RETRY.getName(),null);
      Long allocationRetryWaitMillis=getLongIfSetOrGetDefault(conDefNode,ALLOCATION_RETRY_WAIT_MILLIS.getName(),null);
      Long blockingTimeoutMillis=getLongIfSetOrGetDefault(conDefNode,BLOCKING_TIMEOUT_WAIT_MILLIS.getName(),null);
      Long idleTimeoutMinutes=getLongIfSetOrGetDefault(conDefNode,IDLETIMEOUTMINUTES.getName(),null);
      Integer xaResourceTimeout=getIntIfSetOrGetDefault(conDefNode,XA_RESOURCE_TIMEOUT.getName(),null);
      CommonTimeOut timeOut=new CommonTimeOutImpl(blockingTimeoutMillis,idleTimeoutMinutes,allocationRetry,allocationRetryWaitMillis,xaResourceTimeout);
      CommonPool pool=new CommonPoolImpl(minPoolSize,maxPoolSize,prefill,useStrictMin,flushStrategy);
      String securityDomain=getStringIfSetOrGetDefault(conDefNode,SECURITY_DOMAIN.getName(),null);
      String securityDomainAndApplication=getStringIfSetOrGetDefault(conDefNode,SECURITY_DOMAIN_AND_APPLICATION.getName(),null);
      Boolean application=getBooleanIfSetOrGetDefault(conDefNode,APPLICATION.getName(),null);
      CommonSecurity security=null;
      if (securityDomain != null && securityDomainAndApplication != null && application != null) {
        if (application == null)         application=Defaults.APPLICATION_MANAGED_SECURITY;
        security=new CommonSecurityImpl(securityDomain,securityDomainAndApplication,application);
      }
      Long backgroundValidationMillis=getLongIfSetOrGetDefault(conDefNode,BACKGROUNDVALIDATIONMILLIS.getName(),null);
      boolean backgroundValidation=getBooleanIfSetOrGetDefault(conDefNode,BACKGROUNDVALIDATION.getName(),Defaults.BACKGROUND_VALIDATION);
      boolean useFastFail=getBooleanIfSetOrGetDefault(conDefNode,USE_FAST_FAIL.getName(),Defaults.USE_FAST_FAIl);
      CommonValidation validation=new CommonValidationImpl(backgroundValidation,backgroundValidationMillis,useFastFail);
      final String recoveryUsername=getStringIfSetOrGetDefault(conDefNode,RECOVERY_USERNAME.getName(),null);
      final String recoveryPassword=getStringIfSetOrGetDefault(conDefNode,RECOVERY_PASSWORD.getName(),null);
      final String recoverySecurityDomain=getStringIfSetOrGetDefault(conDefNode,RECOVERY_SECURITY_DOMAIN.getName(),null);
      final Credential credential=new CredentialImpl(recoveryUsername,recoveryPassword,recoverySecurityDomain);
      final Extension recoverPlugin=extractExtension(conDefNode,RECOVERLUGIN_CLASSNAME.getName(),RECOVERLUGIN_PROPERTIES.getName());
      final boolean noRecovery=getBooleanIfSetOrGetDefault(conDefNode,NO_RECOVERY.getName(),false);
      Recovery recovery=new Recovery(credential,recoverPlugin,noRecovery);
      CommonConnDef connectionDefinition=new CommonConnDefImpl(configProperties,className,jndiName,poolName,enabled,useJavaContext,useCcm,pool,timeOut,validation,security,recovery);
      connDefs.add(connectionDefinition);
    }
  }
  return connDefs;
}
