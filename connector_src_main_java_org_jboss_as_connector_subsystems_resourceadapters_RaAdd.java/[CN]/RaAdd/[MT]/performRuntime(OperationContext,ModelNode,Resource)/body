{
  final String name=context.getCurrentAddressValue();
  final String archiveOrModuleName;
  ModelNode model=resource.getModel();
  final boolean statsEnabled=STATISTICS_ENABLED.resolveModelAttribute(context,model).asBoolean();
  if (!model.hasDefined(ARCHIVE.getName()) && !model.hasDefined(MODULE.getName())) {
    throw ConnectorLogger.ROOT_LOGGER.archiveOrModuleRequired();
  }
  if (model.get(ARCHIVE.getName()).isDefined()) {
    archiveOrModuleName=model.get(ARCHIVE.getName()).asString();
  }
 else {
    archiveOrModuleName=model.get(MODULE.getName()).asString();
  }
  ModifiableResourceAdapter resourceAdapter=RaOperationUtil.buildResourceAdaptersObject(name,context,operation,archiveOrModuleName);
  List<ServiceController<?>> newControllers=new ArrayList<ServiceController<?>>();
  if (model.get(ARCHIVE.getName()).isDefined()) {
    RaOperationUtil.installRaServices(context,name,resourceAdapter,newControllers);
  }
 else {
    RaOperationUtil.installRaServicesAndDeployFromModule(context,name,resourceAdapter,archiveOrModuleName,newControllers);
    if (context.isBooting()) {
      context.addStep(new OperationStepHandler(){
        public void execute(        final OperationContext context,        ModelNode operation) throws OperationFailedException {
          ServiceName restartedServiceName=RaOperationUtil.restartIfPresent(context,archiveOrModuleName,name);
          if (restartedServiceName == null) {
            RaOperationUtil.activate(context,name,archiveOrModuleName);
          }
          context.completeStep(new OperationContext.RollbackHandler(){
            @Override public void handleRollback(            OperationContext context,            ModelNode operation){
              try {
                RaOperationUtil.removeIfActive(context,archiveOrModuleName,name);
              }
 catch (              OperationFailedException e) {
              }
            }
          }
);
        }
      }
,OperationContext.Stage.RUNTIME);
    }
  }
  ServiceRegistry registry=context.getServiceRegistry(true);
  final ServiceController<?> RaxmlController=registry.getService(ServiceName.of(ConnectorServices.RA_SERVICE,name));
  Activation raxml=(Activation)RaxmlController.getValue();
  ServiceName serviceName=ConnectorServices.getDeploymentServiceName(archiveOrModuleName,name);
  String bootStrapCtxName=DEFAULT_NAME;
  if (raxml.getBootstrapContext() != null && !raxml.getBootstrapContext().equals("undefined")) {
    bootStrapCtxName=raxml.getBootstrapContext();
  }
  ResourceAdapterStatisticsService raStatsService=new ResourceAdapterStatisticsService(context.getResourceRegistrationForUpdate(),name,statsEnabled);
  ServiceBuilder statsServiceBuilder=context.getServiceTarget().addService(ServiceName.of(ConnectorServices.RA_SERVICE,name).append(ConnectorServices.STATISTICS_SUFFIX),raStatsService);
  statsServiceBuilder.addDependency(ConnectorServices.BOOTSTRAP_CONTEXT_SERVICE.append(bootStrapCtxName),raStatsService.getBootstrapContextInjector()).addDependency(serviceName,raStatsService.getResourceAdapterDeploymentInjector()).setInitialMode(ServiceController.Mode.PASSIVE).install();
  PathElement peStats=PathElement.pathElement(Constants.STATISTICS_NAME,"extended");
  final Resource statsResource=new IronJacamarResource.IronJacamarRuntimeResource();
  resource.registerChild(peStats,statsResource);
}
