{
  final ModelNode address=operation.require(OP_ADDR);
  final String name=PathAddress.pathAddress(address).getLastElement().getValue();
  final String archiveOrModuleName;
  if (!model.hasDefined(ARCHIVE.getName()) && !model.hasDefined(MODULE.getName())) {
    throw ConnectorLogger.ROOT_LOGGER.archiveOrModuleRequired();
  }
  if (model.get(ARCHIVE.getName()).isDefined()) {
    archiveOrModuleName=model.get(ARCHIVE.getName()).asString();
  }
 else {
    archiveOrModuleName=model.get(MODULE.getName()).asString();
  }
  ModifiableResourceAdapter resourceAdapter=RaOperationUtil.buildResourceAdaptersObject(name,context,operation,archiveOrModuleName);
  if (model.get(ARCHIVE.getName()).isDefined()) {
    RaOperationUtil.installRaServices(context,verificationHandler,name,resourceAdapter,newControllers);
  }
 else {
    RaOperationUtil.installRaServicesAndDeployFromModule(context,verificationHandler,name,resourceAdapter,archiveOrModuleName,newControllers);
    if (context.isBooting()) {
      context.addStep(new OperationStepHandler(){
        public void execute(        final OperationContext context,        ModelNode operation) throws OperationFailedException {
          final ServiceVerificationHandler svh=new ServiceVerificationHandler();
          ServiceName restartedServiceName=RaOperationUtil.restartIfPresent(context,archiveOrModuleName,name,svh);
          if (restartedServiceName == null) {
            RaOperationUtil.activate(context,name,svh);
          }
          context.addStep(svh,OperationContext.Stage.VERIFY);
          context.completeStep(new OperationContext.RollbackHandler(){
            @Override public void handleRollback(            OperationContext context,            ModelNode operation){
              try {
                RaOperationUtil.removeIfActive(context,archiveOrModuleName,name);
              }
 catch (              OperationFailedException e) {
              }
            }
          }
);
        }
      }
,OperationContext.Stage.RUNTIME);
    }
  }
}
