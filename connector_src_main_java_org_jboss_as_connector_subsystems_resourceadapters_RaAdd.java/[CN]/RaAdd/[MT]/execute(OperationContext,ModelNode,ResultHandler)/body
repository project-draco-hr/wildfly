{
  final ModelNode subModel=context.getSubModel();
  populateModel(operation,subModel);
  final ModelNode address=operation.require(OP_ADDR);
  final String archive=PathAddress.pathAddress(address).getLastElement().getValue();
  operation.get(ARCHIVE).set(archive);
  final ModelNode compensating=Util.getResourceRemoveOperation(address);
  if (context.getRuntimeContext() != null) {
    context.getRuntimeContext().setRuntimeTask(new RuntimeTask(){
      @Override public void execute(      RuntimeTaskContext context) throws OperationFailedException {
        final ServiceTarget serviceTarget=context.getServiceTarget();
        ModifiableResourceAdapeters resourceAdapters=buildResourceAdaptersObject(operation);
        final ServiceController<?> raService=context.getServiceRegistry().getService(ConnectorServices.RESOURCEADAPTERS_SERVICE);
        if (raService == null) {
          serviceTarget.addService(ConnectorServices.RESOURCEADAPTERS_SERVICE,new ResourceAdaptersService(resourceAdapters)).setInitialMode(Mode.ACTIVE).install();
        }
 else {
          ((ModifiableResourceAdapeters)raService.getValue()).addAllResourceAdapters(resourceAdapters.getResourceAdapters());
        }
        resultHandler.handleResultComplete();
      }
    }
);
  }
 else {
    resultHandler.handleResultComplete();
  }
  return new BasicOperationResult(compensating);
}
