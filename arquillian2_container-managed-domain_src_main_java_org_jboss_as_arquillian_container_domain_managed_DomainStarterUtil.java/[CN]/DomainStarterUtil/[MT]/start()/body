{
  try {
    String jbossHomeKey="jboss.home";
    String jbossHomeDir=System.getProperty(jbossHomeKey);
    if (jbossHomeDir == null)     throw new IllegalStateException("Cannot find system property: " + jbossHomeKey);
    final String additionalJavaOpts=System.getProperty("jboss.options");
    File modulesJar=new File(jbossHomeDir + "/jboss-modules.jar");
    if (modulesJar.exists() == false)     throw new IllegalStateException("Cannot find: " + modulesJar);
    List<String> cmd=new ArrayList<String>();
    cmd.add("java");
    if (additionalJavaOpts != null) {
      for (      String opt : additionalJavaOpts.split("\\s+")) {
        cmd.add(opt);
      }
    }
    cmd.add("-Djboss.home.dir=" + jbossHomeDir);
    cmd.add("-Dorg.jboss.boot.log.file=" + jbossHomeDir + "/domain/log/process-controller/boot.log");
    cmd.add("-Dlogging.configuration=file:" + jbossHomeDir + "/domain/configuration/logging.properties");
    cmd.add("-jar");
    cmd.add(modulesJar.getAbsolutePath());
    cmd.add("-mp");
    cmd.add(jbossHomeDir + "/modules");
    cmd.add("-logmodule");
    cmd.add("org.jboss.logmanager");
    cmd.add("org.jboss.as.process-controller");
    cmd.add("-jboss-home");
    cmd.add(jbossHomeDir);
    cmd.add("-jvm");
    cmd.add("java");
    cmd.add("--");
    cmd.add("-Dorg.jboss.boot.log.file=" + jbossHomeDir + "/domain/log/host-controller/boot.log");
    cmd.add("-Dlogging.configuration=file:" + jbossHomeDir + "/domain/configuration/logging.properties");
    if (additionalJavaOpts != null) {
      for (      String opt : additionalJavaOpts.split("\\s+")) {
        cmd.add(opt);
      }
    }
    cmd.add("--");
    cmd.add("-default-jvm");
    cmd.add("java");
    log.info("Starting container with: " + cmd.toString());
    ProcessBuilder processBuilder=new ProcessBuilder(cmd);
    processBuilder.redirectErrorStream(true);
    process=processBuilder.start();
    new Thread(new ConsoleConsumer()).start();
    final Process proc=process;
    shutdownThread=new Thread(new Runnable(){
      @Override public void run(){
        if (proc != null) {
          proc.destroy();
          try {
            proc.waitFor();
          }
 catch (          InterruptedException e) {
            throw new RuntimeException(e);
          }
        }
      }
    }
);
    Runtime.getRuntime().addShutdownHook(shutdownThread);
    long timeout=this.timeout;
    final boolean[] testRunnerMBeansAvailable=new boolean[portOffsets.length];
    int available=0;
    while (timeout > 0 && available < portOffsets.length) {
      for (int i=0; i < portOffsets.length; i++) {
        if (!testRunnerMBeansAvailable[i]) {
          try {
            MBeanServerConnection mbeanServer=providers[i].getConnection();
            boolean isAvailable=mbeanServer != null && mbeanServer.isRegistered(OBJECT_NAME);
            if (isAvailable) {
              available++;
              testRunnerMBeansAvailable[i]=true;
            }
          }
 catch (          Exception ignore) {
          }
        }
      }
      if (available < portOffsets.length) {
        final long sleep=100;
        Thread.sleep(sleep);
        timeout-=sleep;
      }
    }
    if (available < portOffsets.length) {
      ArrayList<Integer> notStartedPorts=new ArrayList<Integer>();
      for (int i=0; i < testRunnerMBeansAvailable.length; i++) {
        if (!testRunnerMBeansAvailable[i]) {
          notStartedPorts.add(portOffsets[i]);
        }
      }
      throw new TimeoutException(String.format("Could not connect to the managed server's MBeanServer for servers with port offsets %s within [%d] ms",notStartedPorts.toString(),this.timeout));
    }
    log.info("All containers started");
  }
 catch (  Exception e) {
    throw new RuntimeException("Could not start container",e);
  }
}
