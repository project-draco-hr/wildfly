{
  try {
    String jbossHomeKey="jboss.home";
    String jbossHomeDir=System.getProperty(jbossHomeKey);
    if (jbossHomeDir == null)     throw new IllegalStateException("Cannot find system property: " + jbossHomeKey);
    final String additionalJavaOpts=System.getProperty("jboss.options");
    File modulesJar=new File(jbossHomeDir + "/jboss-modules.jar");
    if (modulesJar.exists() == false)     throw new IllegalStateException("Cannot find: " + modulesJar);
    List<String> cmd=new ArrayList<String>();
    cmd.add("java");
    if (additionalJavaOpts != null) {
      for (      String opt : additionalJavaOpts.split("\\s+")) {
        cmd.add(opt);
      }
    }
    cmd.add("-Djboss.home.dir=" + jbossHomeDir);
    cmd.add("-Dorg.jboss.boot.log.file=" + jbossHomeDir + "/domain/log/process-controller/boot.log");
    cmd.add("-Dlogging.configuration=file:" + jbossHomeDir + "/domain/configuration/logging.properties");
    cmd.add("-jar");
    cmd.add(modulesJar.getAbsolutePath());
    cmd.add("-mp");
    cmd.add(jbossHomeDir + "/modules");
    cmd.add("-logmodule");
    cmd.add("org.jboss.logmanager");
    cmd.add("org.jboss.as.process-controller");
    cmd.add("-jboss-home");
    cmd.add(jbossHomeDir);
    cmd.add("-jvm");
    cmd.add("java");
    cmd.add("--");
    cmd.add("-Dorg.jboss.boot.log.file=" + jbossHomeDir + "/domain/log/host-controller/boot.log");
    cmd.add("-Dlogging.configuration=file:" + jbossHomeDir + "/domain/configuration/logging.properties");
    if (additionalJavaOpts != null) {
      for (      String opt : additionalJavaOpts.split("\\s+")) {
        cmd.add(opt);
      }
    }
    cmd.add("--");
    cmd.add("-default-jvm");
    cmd.add("java");
    log.info("Starting container with: " + cmd.toString());
    ProcessBuilder processBuilder=new ProcessBuilder(cmd);
    processBuilder.redirectErrorStream(true);
    process=processBuilder.start();
    new Thread(new ConsoleConsumer()).start();
    final Process proc=process;
    shutdownThread=new Thread(new Runnable(){
      @Override public void run(){
        if (proc != null) {
          proc.destroy();
          try {
            proc.waitFor();
          }
 catch (          InterruptedException e) {
            throw new RuntimeException(e);
          }
        }
      }
    }
);
    Runtime.getRuntime().addShutdownHook(shutdownThread);
    domainClient=DomainClient.Factory.create(managementAddress,managementPort);
    long timeout=this.timeout;
    boolean serversAvailable=false;
    while (timeout > 0 && serversAvailable == false) {
      serversAvailable=areServersStarted();
      if (!serversAvailable) {
        Thread.sleep(100);
        timeout-=100;
      }
    }
    if (!serversAvailable) {
      throw new TimeoutException(String.format("Managed servers were not started within [%d] ms",timeout));
    }
    Map<ServerIdentity,MBeanServerConnection> connections=new HashMap<ServerIdentity,MBeanServerConnection>();
    for (    Map.Entry<ServerIdentity,ServerStatus> entry : serverStatuses.entrySet()) {
switch (entry.getValue()) {
case STARTED:
        connections.put(entry.getKey(),null);
    }
  }
  int available=0;
  int enabledCount=connections.size();
  while (timeout > 0 && available < enabledCount) {
    for (    Map.Entry<ServerIdentity,MBeanServerConnection> entry : connections.entrySet()) {
      if (entry.getValue() == null) {
        try {
          MBeanServerConnectionProvider provider=getMBeanServerConnectionProvider(entry.getKey());
          MBeanServerConnection mbeanServer=provider == null ? null : provider.getConnection();
          boolean isAvailable=mbeanServer != null && mbeanServer.isRegistered(OBJECT_NAME);
          if (isAvailable) {
            connections.put(entry.getKey(),mbeanServer);
          }
        }
 catch (        Exception ignore) {
        }
      }
    }
    if (available < enabledCount) {
      final long sleep=100;
      Thread.sleep(sleep);
      timeout-=sleep;
    }
  }
  if (available < enabledCount) {
    ArrayList<ServerIdentity> notStartedServers=new ArrayList<ServerIdentity>();
    for (    Map.Entry<ServerIdentity,MBeanServerConnection> entry : connections.entrySet()) {
      if (entry.getValue() == null) {
        notStartedServers.add(entry.getKey());
      }
    }
    throw new TimeoutException(String.format("Could not connect to the managed server's MBeanServer for servers with port offsets %s within [%d] ms",notStartedServers.toString(),this.timeout));
  }
  log.info("All containers started");
}
 catch (Exception e) {
  throw new RuntimeException("Could not start container",e);
}
}
