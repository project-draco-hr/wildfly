{
  if (this.listeners.putIfAbsent(service,listener) != null) {
    throw new IllegalArgumentException(service.toString());
  }
  try (Batch batch=this.batcher.createBatch()){
    this.register(this.group.getLocalNode(),service);
  }
   return new AbstractServiceProviderRegistration<T>(service,this){
    @Override public void close(){
      Node node=CacheServiceProviderRegistry.this.getGroup().getLocalNode();
      try (Batch batch=CacheServiceProviderRegistry.this.batcher.createBatch()){
        Set<Node> nodes=CacheServiceProviderRegistry.this.cache.getAdvancedCache().withFlags(Flag.FORCE_WRITE_LOCK).get(service);
        if ((nodes != null) && nodes.remove(node)) {
          Cache<T,Set<Node>> cache=CacheServiceProviderRegistry.this.cache.getAdvancedCache().withFlags(Flag.IGNORE_RETURN_VALUES);
          if (nodes.isEmpty()) {
            cache.remove(service);
          }
 else {
            cache.replace(service,nodes);
          }
        }
      }
  finally {
        CacheServiceProviderRegistry.this.listeners.remove(service);
      }
    }
  }
;
}
