{
  CanonicalPathHandler canonicalPathHandler=new CanonicalPathHandler();
  listener.setRootHandler(canonicalPathHandler);
  PathHandler pathHandler=new PathHandler();
  HttpHandler current=pathHandler;
  if (upgradeHandler != null) {
    upgradeHandler.setNonUpgradeHandler(current);
    current=upgradeHandler;
  }
  if (securePort > 0) {
    current=new SinglePortConfidentialityHandler(current,securePort);
  }
  current=new CacheHandler(new DirectBufferCache(1024,1024 * 10,1024 * 1000,BufferAllocator.BYTE_BUFFER_ALLOCATOR),current);
  current=new SimpleErrorPageHandler(current);
  canonicalPathHandler.setNext(current);
  ResourceHandlerDefinition consoleHandler=null;
  try {
    consoleHandler=consoleMode.createConsoleHandler(consoleSlot);
  }
 catch (  ModuleLoadException e) {
    ROOT_LOGGER.consoleModuleNotFound(consoleSlot == null ? "main" : consoleSlot);
  }
  try {
    pathHandler.addPrefixPath(ErrorContextHandler.ERROR_CONTEXT,ErrorContextHandler.createErrorContext(consoleSlot));
  }
 catch (  ModuleLoadException e) {
    ROOT_LOGGER.error(consoleSlot == null ? "main" : consoleSlot);
  }
  ManagementRootConsoleRedirectHandler rootConsoleRedirectHandler=new ManagementRootConsoleRedirectHandler(consoleHandler);
  DomainApiCheckHandler domainApiHandler=new DomainApiCheckHandler(modelController,controlledProcessStateService);
  pathHandler.addPrefixPath("/",rootConsoleRedirectHandler);
  if (consoleHandler != null) {
    HttpHandler readinessHandler=new RedirectReadinessHandler(securityRealm,consoleHandler.getHandler(),ErrorContextHandler.ERROR_CONTEXT);
    pathHandler.addPrefixPath(consoleHandler.getContext(),readinessHandler);
  }
  HttpHandler readinessHandler=new DmrFailureReadinessHandler(securityRealm,secureDomainAccess(domainApiHandler,securityRealm),ErrorContextHandler.ERROR_CONTEXT);
  pathHandler.addPrefixPath(DomainApiCheckHandler.PATH,readinessHandler);
  if (securityRealm != null) {
    pathHandler.addPrefixPath(LogoutHandler.PATH,new LogoutHandler(securityRealm.getName()));
  }
}
