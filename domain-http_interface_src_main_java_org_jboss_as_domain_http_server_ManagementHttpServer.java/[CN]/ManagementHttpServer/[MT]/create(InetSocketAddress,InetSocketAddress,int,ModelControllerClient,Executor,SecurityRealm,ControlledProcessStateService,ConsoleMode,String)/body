{
  Map<String,String> configuration=Collections.emptyMap();
  Authenticator auth=null;
  final CertAuth certAuthMode;
  if (securityRealm != null) {
    Set<AuthenticationMechanism> authenticationMechanisms=securityRealm.getSupportedAuthenticationMechanisms();
    if (authenticationMechanisms.contains(AuthenticationMechanism.DIGEST)) {
      Map<String,String> mechConfig=securityRealm.getMechanismConfig(AuthenticationMechanism.DIGEST);
      boolean plainTextDigest=true;
      if (mechConfig.containsKey(DIGEST_PLAIN_TEXT)) {
        plainTextDigest=Boolean.parseBoolean(mechConfig.get(DIGEST_PLAIN_TEXT));
      }
      auth=new DigestAuthenticator(securityRealm,plainTextDigest == false);
    }
 else     if (authenticationMechanisms.contains(AuthenticationMechanism.PLAIN)) {
      auth=new BasicAuthenticator(securityRealm);
    }
    if (authenticationMechanisms.contains(AuthenticationMechanism.CLIENT_CERT)) {
      if (auth == null) {
        certAuthMode=CertAuth.NEED;
        auth=new ClientCertAuthenticator(securityRealm);
      }
 else {
        certAuthMode=CertAuth.WANT;
      }
    }
 else {
      certAuthMode=CertAuth.NONE;
    }
    if (auth == null) {
      if (authenticationMechanisms.size() > 0) {
        auth=new FourZeroThreeAuthenticator();
      }
 else {
        auth=new AnonymousAuthenticator();
      }
    }
  }
 else {
    auth=new AnonymousAuthenticator();
    certAuthMode=CertAuth.NONE;
  }
  HttpServer httpServer=null;
  if (bindAddress != null) {
    httpServer=HttpServer.create(bindAddress,backlog,configuration);
    httpServer.setExecutor(executor);
  }
  HttpsServer secureHttpServer=null;
  if (secureBindAddress != null) {
    secureHttpServer=HttpsServer.create(secureBindAddress,backlog,configuration);
    final SSLContext context=securityRealm.getSSLContext();
    if (context != null) {
      secureHttpServer.setHttpsConfigurator(new HttpsConfigurator(context){
        @Override public void configure(        HttpsParameters params){
          SSLParameters sslparams=context.getDefaultSSLParameters();
switch (certAuthMode) {
case NEED:
            sslparams.setNeedClientAuth(true);
          break;
case WANT:
        sslparams.setWantClientAuth(true);
      break;
  }
  params.setSSLParameters(sslparams);
}
}
);
secureHttpServer.setExecutor(executor);
}
 else {
ROOT_LOGGER.sslConfigurationNotFound();
}
}
ManagementHttpServer managementHttpServer=new ManagementHttpServer(httpServer,secureHttpServer,securityRealm);
ResourceHandler consoleHandler=null;
try {
consoleHandler=consoleMode.createConsoleHandler(consoleSlot);
}
 catch (ModuleLoadException e) {
HttpServerLogger.ROOT_LOGGER.consoleModuleNotFound(consoleSlot == null ? "main" : consoleSlot);
}
managementHttpServer.addHandler(new RootHandler(consoleHandler));
managementHttpServer.addHandler(new DomainApiHandler(modelControllerClient,auth,controlledProcessStateService));
if (consoleHandler != null) {
managementHttpServer.addHandler(consoleHandler);
}
try {
managementHttpServer.addHandler(new ErrorHandler(consoleSlot));
}
 catch (ModuleLoadException e) {
throw new IOException("Unable to load resource handler",e);
}
managementHttpServer.addHandler(new LogoutHandler());
return managementHttpServer;
}
