{
  Map<String,String> configuration=new HashMap<String,String>(1);
  configuration.put("sun.net.httpserver.maxReqTime","15");
  HttpServer httpServer=null;
  if (bindAddress != null) {
    httpServer=HttpServer.create(bindAddress,backlog,configuration);
    httpServer.setExecutor(executor);
  }
  HttpServer secureHttpServer=null;
  if (secureBindAddress != null) {
    secureHttpServer=HttpsServer.create(secureBindAddress,backlog,configuration);
    SSLContext context=securityRealm.getSSLContext();
    ((HttpsServer)secureHttpServer).setHttpsConfigurator(new HttpsConfigurator(context){
      @Override public void configure(      HttpsParameters params){
        super.configure(params);
{
          if (true)           return;
          System.out.println(" * SSLContext * ");
          SSLContext sslContext=getSSLContext();
          SSLParameters sslParams=sslContext.getDefaultSSLParameters();
          String[] cipherSuites=sslParams.getCipherSuites();
          for (          String current : cipherSuites) {
            System.out.println("Cipher Suite - " + current);
          }
          System.out.println("Need Client Auth " + sslParams.getNeedClientAuth());
          String[] protocols=sslParams.getProtocols();
          for (          String current : protocols) {
            System.out.println("Protocol " + current);
          }
          System.out.println("Want Client Auth " + sslParams.getWantClientAuth());
        }
        System.out.println(" * HTTPSParameters * ");
{
          System.out.println("Client Address " + params.getClientAddress());
          String[] cipherSuites=params.getCipherSuites();
          if (cipherSuites != null) {
            for (            String current : cipherSuites) {
              System.out.println("Cipher Suite - " + current);
            }
          }
          System.out.println("Need Client Auth " + params.getNeedClientAuth());
          String[] protocols=params.getProtocols();
          if (protocols != null) {
            for (            String current : protocols) {
              System.out.println("Protocol " + current);
            }
          }
          System.out.println("Want Client Auth " + params.getWantClientAuth());
        }
      }
    }
);
    secureHttpServer.setExecutor(executor);
  }
  ManagementHttpServer managementHttpServer=new ManagementHttpServer(httpServer,secureHttpServer,securityRealm);
  managementHttpServer.addHandler(new RootHandler());
  managementHttpServer.addHandler(new DomainApiHandler(modelControllerClient));
  try {
    if (showConsole) {
      managementHttpServer.addHandler(new ConsoleHandler());
    }
 else {
      managementHttpServer.addHandler(new NoConsoleForSlaveDcHandler());
    }
    managementHttpServer.addHandler(new ErrorHandler());
  }
 catch (  ModuleLoadException e) {
    throw new IOException("Unable to load resource handler",e);
  }
  return managementHttpServer;
}
