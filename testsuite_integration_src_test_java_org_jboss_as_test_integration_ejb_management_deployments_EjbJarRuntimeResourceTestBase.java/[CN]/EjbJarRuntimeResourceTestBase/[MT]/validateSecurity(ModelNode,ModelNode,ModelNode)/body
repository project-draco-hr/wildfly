{
  assertTrue(resourceDescription.get(ATTRIBUTES,SECURITY_DOMAIN.getName()).isDefined());
  assertEquals(ModelType.STRING,resourceDescription.get(ATTRIBUTES,SECURITY_DOMAIN.getName(),DESCRIPTION).getType());
  assertEquals(ModelType.STRING,resourceDescription.get(ATTRIBUTES,SECURITY_DOMAIN.getName(),TYPE).asType());
  assertTrue(resource.get(SECURITY_DOMAIN.getName()).isDefined());
  assertEquals("other",resource.get(SECURITY_DOMAIN.getName()).asString());
  assertTrue(resourceDescription.get(ATTRIBUTES,RUN_AS_ROLE.getName()).isDefined());
  assertEquals(ModelType.STRING,resourceDescription.get(ATTRIBUTES,RUN_AS_ROLE.getName(),DESCRIPTION).getType());
  assertEquals(ModelType.STRING,resourceDescription.get(ATTRIBUTES,RUN_AS_ROLE.getName(),TYPE).asType());
  assertTrue(resource.get(RUN_AS_ROLE.getName()).isDefined());
  assertEquals("Role3",resource.get(RUN_AS_ROLE.getName()).asString());
  assertTrue(resourceDescription.get(ATTRIBUTES,DECLARED_ROLES.getName()).isDefined());
  assertEquals(ModelType.STRING,resourceDescription.get(ATTRIBUTES,DECLARED_ROLES.getName(),DESCRIPTION).getType());
  assertEquals(ModelType.LIST,resourceDescription.get(ATTRIBUTES,DECLARED_ROLES.getName(),TYPE).asType());
  assertEquals(ModelType.STRING,resourceDescription.get(ATTRIBUTES,DECLARED_ROLES.getName(),VALUE_TYPE).asType());
  assertTrue(resource.get(DECLARED_ROLES.getName()).isDefined());
  assertEquals(ModelType.LIST,resource.get(DECLARED_ROLES.getName()).getType());
  final List<ModelNode> roles=resource.get(DECLARED_ROLES.getName()).asList();
  for (int i=1; i < 4; i++) {
    assertTrue(roles.contains(new ModelNode().set("Role" + i)));
  }
  assertEquals(3,roles.size());
}
