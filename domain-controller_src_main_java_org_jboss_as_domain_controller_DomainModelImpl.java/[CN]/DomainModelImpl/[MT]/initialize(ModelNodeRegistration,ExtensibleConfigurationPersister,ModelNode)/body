{
  root.registerOperationHandler(READ_RESOURCE_OPERATION,GlobalOperationHandlers.READ_RESOURCE,CommonProviders.READ_RESOURCE_PROVIDER,true);
  root.registerOperationHandler(READ_ATTRIBUTE_OPERATION,GlobalOperationHandlers.READ_ATTRIBUTE,CommonProviders.READ_ATTRIBUTE_PROVIDER,true);
  root.registerOperationHandler(READ_RESOURCE_DESCRIPTION_OPERATION,GlobalOperationHandlers.READ_RESOURCE_DESCRIPTION,CommonProviders.READ_RESOURCE_DESCRIPTION_PROVIDER,true);
  root.registerOperationHandler(READ_CHILDREN_NAMES_OPERATION,GlobalOperationHandlers.READ_CHILDREN_NAMES,CommonProviders.READ_CHILDREN_NAMES_PROVIDER,true);
  root.registerOperationHandler(READ_OPERATION_NAMES_OPERATION,GlobalOperationHandlers.READ_OPERATION_NAMES,CommonProviders.READ_OPERATION_NAMES_PROVIDER,true);
  root.registerOperationHandler(READ_OPERATION_DESCRIPTION_OPERATION,GlobalOperationHandlers.READ_OPERATION_DESCRIPTION,CommonProviders.READ_OPERATION_PROVIDER,true);
  root.registerOperationHandler(WRITE_ATTRIBUTE_OPERATION,GlobalOperationHandlers.WRITE_ATTRIBUTE,CommonProviders.WRITE_ATTRIBUTE_PROVIDER,true);
  root.registerOperationHandler(NamespaceAddHandler.OPERATION_NAME,NamespaceAddHandler.INSTANCE,NamespaceAddHandler.INSTANCE,false);
  root.registerOperationHandler(NamespaceRemoveHandler.OPERATION_NAME,NamespaceRemoveHandler.INSTANCE,NamespaceRemoveHandler.INSTANCE,false);
  root.registerOperationHandler(SchemaLocationAddHandler.OPERATION_NAME,SchemaLocationAddHandler.INSTANCE,SchemaLocationAddHandler.INSTANCE,false);
  root.registerOperationHandler(SchemaLocationRemoveHandler.OPERATION_NAME,SchemaLocationRemoveHandler.INSTANCE,SchemaLocationRemoveHandler.INSTANCE,false);
  root.registerOperationHandler(SystemPropertyAddHandler.OPERATION_NAME,SystemPropertyAddHandler.INSTANCE,SystemPropertyAddHandler.INSTANCE,false);
  root.registerOperationHandler(SystemPropertyRemoveHandler.OPERATION_NAME,SystemPropertyRemoveHandler.INSTANCE,SystemPropertyRemoveHandler.INSTANCE,false);
  final ModelNodeRegistration interfaces=root.registerSubModel(PathElement.pathElement(INTERFACE),CommonProviders.NAMED_INTERFACE_PROVIDER);
  interfaces.registerOperationHandler(ADD,InterfaceAddHandler.NAMED_INSTANCE,InterfaceAddHandler.NAMED_INSTANCE,false);
  interfaces.registerOperationHandler(REMOVE,InterfaceAddHandler.NAMED_INSTANCE,InterfaceAddHandler.NAMED_INSTANCE,false);
  final ModelNodeRegistration profile=root.registerSubModel(PathElement.pathElement(PROFILE),DomainDescriptionProviders.PROFILE);
  profile.registerOperationHandler(ADD,ProfileAddHandler.INSTANCE,DomainDescriptionProviders.PROFILE_ADD,false);
  profile.registerOperationHandler(REMOVE,ProfileRemoveHandler.INSTANCE,DomainDescriptionProviders.PROFILE_REMOVE,false);
  profile.registerOperationHandler(DESCRIBE,ProfileDescribeHandler.INSTANCE,DomainDescriptionProviders.PROFILE_DESCRIBE,false);
  final ModelNodeRegistration paths=root.registerSubModel(PathElement.pathElement(PATH),DomainDescriptionProviders.PATH_DESCRIPTION);
  paths.registerOperationHandler(ADD,PathAddHandler.NAMED_INSTANCE,DomainDescriptionProviders.PATH_ADD,false);
  paths.registerOperationHandler(REMOVE,PathRemoveHandler.INSTANCE,DomainDescriptionProviders.PATH_REMOVE,false);
  final ModelNodeRegistration socketBindingGroup=root.registerSubModel(PathElement.pathElement(SOCKET_BINDING_GROUP),DomainDescriptionProviders.SOCKET_BINDING_GROUP);
  socketBindingGroup.registerOperationHandler(ADD,SocketBindingGroupAddHandler.INSTANCE,DomainDescriptionProviders.SOCKET_BINDING_GROUP,false);
  final ModelNodeRegistration socketBindings=socketBindingGroup.registerSubModel(PathElement.pathElement(SOCKET_BINDING),DomainDescriptionProviders.SOCKET_BINDING);
  socketBindings.registerOperationHandler(ADD,SocketBindingAddHandler.INSTANCE,DomainDescriptionProviders.SOCKET_BINDING_ADD,false);
  socketBindings.registerOperationHandler(REMOVE,SocketBindingRemoveHandler.INSTANCE,DomainDescriptionProviders.SOCKET_BINDING_REMOVE,false);
  final ModelNodeRegistration serverGroups=root.registerSubModel(PathElement.pathElement(SERVER_GROUP),DomainDescriptionProviders.SERVER_GROUP);
  serverGroups.registerOperationHandler(ADD,ServerGroupAddHandler.INSTANCE,DomainDescriptionProviders.SERVER_GROUP_ADD,false);
  serverGroups.registerOperationHandler(REMOVE,ServerGroupRemoveHandler.INSTANCE,DomainDescriptionProviders.SERVER_GROUP_REMOVE,false);
  serverGroups.registerReadWriteAttribute(SOCKET_BINDING_GROUP,null,WriteAttributeHandlers.WriteAttributeOperationHandler.INSTANCE,Storage.CONFIGURATION);
  serverGroups.registerReadWriteAttribute(SOCKET_BINDING_PORT_OFFSET,null,new WriteAttributeHandlers.IntRangeValidatingHandler(1),Storage.CONFIGURATION);
  final ModelNodeRegistration groupVMs=serverGroups.registerSubModel(PathElement.pathElement(JVM),CommonProviders.JVM_PROVIDER);
  JVMHandlers.register(groupVMs);
  final ModelNodeRegistration deployments=root.registerSubModel(PathElement.pathElement(DEPLOYMENT),ServerDescriptionProviders.DEPLOYMENT_PROVIDER);
  final ModelNodeRegistration extensions=root.registerSubModel(PathElement.pathElement(EXTENSION),CommonProviders.EXTENSION_PROVIDER);
  final ExtensionContext extensionContext=new ExtensionContextImpl(profile,deployments,configurationPersister);
  final ExtensionAddHandler addExtensionHandler=new ExtensionAddHandler(extensionContext);
  extensions.registerOperationHandler(ExtensionAddHandler.OPERATION_NAME,addExtensionHandler,addExtensionHandler,false);
  extensions.registerOperationHandler(ExtensionRemoveHandler.OPERATION_NAME,ExtensionRemoveHandler.INSTANCE,ExtensionRemoveHandler.INSTANCE,false);
  if (model != null && model.hasDefined(EXTENSION)) {
    for (    Property prop : model.get(EXTENSION).asPropertyList()) {
      try {
        String module=prop.getValue().get(ExtensionDescription.MODULE).asString();
        for (        Extension extension : Module.loadServiceFromCallerModuleLoader(ModuleIdentifier.fromString(module),Extension.class)) {
          extension.initialize(extensionContext);
        }
      }
 catch (      ModuleLoadException e) {
        throw new RuntimeException(e);
      }
    }
  }
}
