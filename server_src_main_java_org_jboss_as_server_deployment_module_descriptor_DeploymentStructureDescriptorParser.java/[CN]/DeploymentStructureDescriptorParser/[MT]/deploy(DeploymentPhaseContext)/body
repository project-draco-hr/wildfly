{
  final DeploymentUnit deploymentUnit=phaseContext.getDeploymentUnit();
  final ResourceRoot resourceRoot=deploymentUnit.getAttachment(Attachments.DEPLOYMENT_ROOT);
  final ServiceModuleLoader moduleLoader=deploymentUnit.getAttachment(Attachments.SERVICE_MODULE_LOADER);
  VirtualFile deploymentFile=null;
  for (  final String loc : DEPLOYMENT_STRUCTURE_DESCRIPTOR_LOCATIONS) {
    final VirtualFile file=resourceRoot.getRoot().getChild(loc);
    if (file.exists()) {
      deploymentFile=file;
      break;
    }
  }
  if (deploymentFile == null) {
    return;
  }
  if (deploymentUnit.getParent() != null) {
    log.warnf("%s in subdeployment ignored. jboss-deployment-structure.xml is only parsed for top level deployments.",deploymentFile.getPathName());
    return;
  }
  try {
    final ParseResult result=parse(deploymentFile.getPhysicalFile(),deploymentUnit,moduleLoader);
    final ModuleSpecification moduleSpec=deploymentUnit.getAttachment(Attachments.MODULE_SPECIFICATION);
    if (result.getEarSubDeploymentsIsolated() != null) {
      moduleSpec.setSubDeploymentModulesIsolated(result.getEarSubDeploymentsIsolated());
    }
    final ModuleStructureSpec rootDeploymentSpecification=result.getRootDeploymentSpecification();
    if (rootDeploymentSpecification != null) {
      final Map<VirtualFile,ResourceRoot> resourceRoots=resourceRoots(deploymentUnit);
      moduleSpec.addUserDependencies(rootDeploymentSpecification.getModuleDependencies());
      moduleSpec.addExclusions(rootDeploymentSpecification.getExclusions());
      moduleSpec.addAliases(rootDeploymentSpecification.getAliases());
      moduleSpec.addModuleSystemDependencies(rootDeploymentSpecification.getSytemDependencies());
      for (      final ResourceRoot additionalResourceRoot : rootDeploymentSpecification.getResourceRoots()) {
        final ResourceRoot existingRoot=resourceRoots.get(additionalResourceRoot.getRoot());
        if (existingRoot != null) {
          existingRoot.merge(additionalResourceRoot);
        }
 else {
          deploymentUnit.addToAttachmentList(Attachments.RESOURCE_ROOTS,additionalResourceRoot);
        }
      }
      for (      final String classFileTransformer : rootDeploymentSpecification.getClassFileTransformers()) {
        moduleSpec.addClassFileTransformer(classFileTransformer);
      }
    }
    final List<DeploymentUnit> subDeployments=deploymentUnit.getAttachmentList(Attachments.SUB_DEPLOYMENTS);
    final Map<String,DeploymentUnit> subDeploymentMap=new HashMap<String,DeploymentUnit>();
    for (    final DeploymentUnit subDeployment : subDeployments) {
      final ResourceRoot subDeploymentRoot=subDeployment.getAttachment(Attachments.DEPLOYMENT_ROOT);
      final String path=subDeploymentRoot.getRoot().getPathNameRelativeTo(resourceRoot.getRoot());
      subDeploymentMap.put(path,subDeployment);
    }
    for (    final Entry<String,ModuleStructureSpec> subDeploymentResult : result.getSubDeploymentSpecifications().entrySet()) {
      final String path=subDeploymentResult.getKey();
      final ModuleStructureSpec spec=subDeploymentResult.getValue();
      if (!subDeploymentMap.containsKey(path)) {
        throw subDeploymentNotFound(path,subDeploymentMap.keySet());
      }
      final DeploymentUnit subDeployment=subDeploymentMap.get(path);
      final ModuleSpecification subModuleSpec=subDeployment.getAttachment(Attachments.MODULE_SPECIFICATION);
      final Map<VirtualFile,ResourceRoot> resourceRoots=resourceRoots(subDeployment);
      subModuleSpec.addUserDependencies(spec.getModuleDependencies());
      subModuleSpec.addExclusions(spec.getExclusions());
      subModuleSpec.addAliases(spec.getAliases());
      subModuleSpec.addModuleSystemDependencies(spec.getSytemDependencies());
      for (      final ResourceRoot additionalResourceRoot : spec.getResourceRoots()) {
        final ResourceRoot existingRoot=resourceRoots.get(additionalResourceRoot.getRoot());
        if (existingRoot != null) {
          existingRoot.merge(additionalResourceRoot);
        }
 else {
          subDeployment.addToAttachmentList(Attachments.RESOURCE_ROOTS,additionalResourceRoot);
        }
      }
      for (      final String classFileTransformer : spec.getClassFileTransformers()) {
        subModuleSpec.addClassFileTransformer(classFileTransformer);
      }
      subModuleSpec.setLocalLast(spec.isLocalLast());
    }
    for (    final ModuleStructureSpec additionalModule : result.getAdditionalModules()) {
      final AdditionalModuleSpecification additional=new AdditionalModuleSpecification(additionalModule.getModuleIdentifier(),additionalModule.getResourceRoots());
      additional.addAliases(additionalModule.getAliases());
      additional.addSystemDependencies(additionalModule.getModuleDependencies());
      deploymentUnit.addToAttachmentList(Attachments.ADDITIONAL_MODULES,additional);
    }
  }
 catch (  IOException e) {
    throw new DeploymentUnitProcessingException(e);
  }
}
