{
  final ModelNode configuration=new ModelNode();
  requireNoAttributes(reader);
  final EnumSet<Element> required=EnumSet.of(Element.MODIFY_SOAP_ADDRESS,Element.WEBSERVICE_HOST);
  final EnumSet<Element> encountered=EnumSet.noneOf(Element.class);
  while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
switch (Namespace.forUri(reader.getNamespaceURI())) {
case WEBSERVICES_1_0:
{
        final Element element=Element.forName(reader.getLocalName());
        required.remove(element);
        if (!encountered.add(element)) {
          throw unexpectedElement(reader);
        }
switch (element) {
case WEBSERVICE_HOST:
{
            configuration.get(WEBSERVICE_HOST).set(parseElementNoAttributes(reader));
            break;
          }
case MODIFY_SOAP_ADDRESS:
{
          boolean b=Boolean.parseBoolean(parseElementNoAttributes(reader));
          configuration.get(MODIFY_SOAP_ADDRESS).set(b);
          break;
        }
case WEBSERVICE_SECURE_PORT:
{
        int port=Integer.valueOf(parseElementNoAttributes(reader));
        configuration.get(WEBSERVICE_SECURE_PORT).set(port);
        break;
      }
case WEBSERVICE_PORT:
{
      int port=Integer.valueOf(parseElementNoAttributes(reader));
      configuration.get(WEBSERVICE_PORT).set(port);
      break;
    }
default :
{
    throw unexpectedElement(reader);
  }
}
break;
}
default :
{
throw unexpectedElement(reader);
}
}
}
if (!required.isEmpty()) {
throw missingRequiredElement(reader,required);
}
return configuration;
}
