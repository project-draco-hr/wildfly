{
  bootOperationBuilder.validateNotAlreadyBuilt();
  List<ModelNode> bootOperations=bootOperationBuilder.build();
  KernelServicesImpl kernelServices=KernelServicesImpl.create(mainSubsystemName,additionalInit,cloneExtensionRegistry(additionalInit),bootOperations,testParser,mainExtension,null,legacyControllerInitializers.size() > 0,true);
  SubsystemTestDelegate.this.kernelServices.add(kernelServices);
  validateDescriptionProviders(additionalInit,kernelServices);
  ImmutableManagementResourceRegistration subsystemReg=kernelServices.getRootRegistration().getSubModel(PathAddress.pathAddress(PathElement.pathElement(SUBSYSTEM,mainSubsystemName)));
  ModelTestUtils.validateModelDescriptions(PathAddress.EMPTY_ADDRESS,subsystemReg);
  for (  Map.Entry<ModelVersion,LegacyKernelServiceInitializerImpl> entry : legacyControllerInitializers.entrySet()) {
    LegacyKernelServiceInitializerImpl legacyInitializer=entry.getValue();
    List<ModelNode> transformedBootOperations=new ArrayList<ModelNode>();
    for (    ModelNode op : bootOperations) {
      TransformedOperation transformedOp=kernelServices.transformOperation(entry.getKey(),op);
      if (transformedOp.getTransformedOperation() != null) {
        if (!transformedOp.rejectOperation(SUCCESS)) {
          transformedBootOperations.add(transformedOp.getTransformedOperation());
        }
 else {
          System.out.println(transformedOp.getFailureDescription());
        }
      }
    }
    KernelServicesImpl legacyServices=legacyInitializer.install(transformedBootOperations);
    kernelServices.addLegacyKernelService(entry.getKey(),legacyServices);
  }
  return kernelServices;
}
