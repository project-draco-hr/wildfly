{
  ValidationConfiguration arbitraryDescriptors=additionalInit.getModelValidationConfiguration();
  ModelNode address=new ModelNode();
  address.setEmptyList();
  address.add("subsystem",mainSubsystemName);
  ModelNode op=new ModelNode();
  op.get(OP).set("read-resource-description");
  op.get(OP_ADDR).set(address);
  op.get("recursive").set(true);
  op.get("inherited").set(false);
  op.get("operations").set(true);
  op.get("include-aliases").set(true);
  ModelNode result=kernelServices.executeOperation(op);
  if (result.hasDefined(FAILURE_DESCRIPTION)) {
    throw new RuntimeException(result.get(FAILURE_DESCRIPTION).toString());
  }
  ModelNode model=result.get(RESULT);
  ModelDescriptionValidator validator=new ModelDescriptionValidator(address,model,arbitraryDescriptors);
  List<ModelDescriptionValidator.ValidationFailure> validationMessages=validator.validateResource();
  if (validationMessages.size() > 0) {
    final StringBuilder builder=new StringBuilder("VALIDATION ERRORS IN MODEL:");
    for (    ModelDescriptionValidator.ValidationFailure failure : validationMessages) {
      builder.append(failure);
      builder.append("\n");
    }
    if (arbitraryDescriptors != null) {
      Assert.fail("Failed due to validation errors in the model. Please fix :-) " + builder.toString());
    }
  }
}
