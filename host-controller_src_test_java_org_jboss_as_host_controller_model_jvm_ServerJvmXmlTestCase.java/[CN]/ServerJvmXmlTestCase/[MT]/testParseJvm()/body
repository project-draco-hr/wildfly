{
  String original=readResource("jvms.xml");
  Parser parser=createParser(new JvmXmlReaderAdapter(Namespace.DOMAIN_1_3),Namespace.DOMAIN_1_3,"jvms");
  parser.installParsedOperations(original);
  compareXml(original,parser.getPersistedXml(),true);
  ModelNode model=readModel(true);
  Assert.assertEquals(2,model.get(JVM).keys().size());
  ModelNode empty=model.get(JVM,"empty");
  Assert.assertTrue(empty.isDefined());
  Assert.assertTrue(empty.keys().size() > 1);
  for (  String key : empty.keys()) {
    Assert.assertFalse(empty.get(key).isDefined());
  }
  ModelNode full=model.get(JVM,"full");
  Assert.assertEquals("agentLib",full.get("agent-lib").asString());
  Assert.assertEquals("agentPath",full.get("agent-path").asString());
  Assert.assertEquals(true,full.get("debug-enabled").asBoolean());
  Assert.assertEquals("debugOptions",full.get("debug-options").asString());
  Assert.assertEquals(true,full.get("env-classpath-ignored").asBoolean());
  Assert.assertEquals("heapSize",full.get("heap-size").asString());
  Assert.assertEquals("javaAgent",full.get("java-agent").asString());
  Assert.assertEquals("javaHome",full.get("java-home").asString());
  Assert.assertEquals("maxHeapSize",full.get("max-heap-size").asString());
  Assert.assertEquals("maxPermGenSize",full.get("max-permgen-size").asString());
  Assert.assertEquals("stackSize",full.get("stack-size").asString());
  Assert.assertEquals("SUN",full.get("type").asString());
  List<ModelNode> options=full.get("jvm-options").asList();
  Assert.assertEquals(3,options.size());
  Assert.assertEquals("option1",options.get(0).asString());
  Assert.assertEquals("option2",options.get(1).asString());
  Assert.assertEquals("option3",options.get(2).asString());
  List<ModelNode> environment=full.get("environment-variables").asList();
  Assert.assertEquals(2,environment.size());
  Assert.assertEquals("name1",environment.get(0).asProperty().getName());
  Assert.assertEquals("value1",environment.get(0).asProperty().getValue().asString());
  Assert.assertEquals("name2",environment.get(1).asProperty().getName());
  Assert.assertEquals("value2",environment.get(1).asProperty().getValue().asString());
}
