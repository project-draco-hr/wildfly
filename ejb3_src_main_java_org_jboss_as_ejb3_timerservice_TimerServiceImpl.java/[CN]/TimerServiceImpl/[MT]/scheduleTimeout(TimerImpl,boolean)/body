{
synchronized (scheduledTimerFutures) {
    if (!newTimer && !scheduledTimerFutures.containsKey(timer.getId())) {
      return;
    }
    Date nextExpiration=timer.getNextExpiration();
    if (nextExpiration == null) {
      ROOT_LOGGER.nextExpirationIsNull(timer);
      return;
    }
    final TimerTask<?> timerTask=timer.getTimerTask();
    long delay=nextExpiration.getTime() - System.currentTimeMillis();
    if (delay < 0) {
      delay=0;
    }
    long intervalDuration=timer.getInterval();
    final Task task=new Task(timerTask,ejbComponentInjectedValue.getValue().getControlPoint());
    if (intervalDuration > 0) {
      ROOT_LOGGER.debug("Scheduling timer " + timer + " at fixed rate, starting at "+ delay+ " milliseconds from now with repeated interval="+ intervalDuration);
      this.timerInjectedValue.getValue().scheduleAtFixedRate(task,delay,intervalDuration);
      this.scheduledTimerFutures.put(timer.getId(),task);
    }
 else {
      ROOT_LOGGER.debug("Scheduling a single action timer " + timer + " starting at "+ delay+ " milliseconds from now");
      this.timerInjectedValue.getValue().schedule(task,delay);
      this.scheduledTimerFutures.put(timer.getId(),task);
    }
  }
}
