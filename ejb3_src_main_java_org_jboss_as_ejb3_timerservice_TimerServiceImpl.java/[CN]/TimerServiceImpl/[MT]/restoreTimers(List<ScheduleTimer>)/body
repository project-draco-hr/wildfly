{
  List<TimerImpl> restorableTimers=this.getActivePersistentTimers();
  final List<ScheduleTimer> newAutoTimers=new LinkedList<ScheduleTimer>(autoTimers);
  ROOT_LOGGER.debug("Found " + restorableTimers.size() + " active persistentTimers for timedObjectId: "+ getInvoker().getTimedObjectId());
  for (  final TimerImpl activeTimer : restorableTimers) {
    if (activeTimer.isAutoTimer()) {
      CalendarTimer calendarTimer=(CalendarTimer)activeTimer;
      boolean found=false;
      ListIterator<ScheduleTimer> it=newAutoTimers.listIterator();
      while (it.hasNext()) {
        ScheduleTimer timer=it.next();
        final String methodName=timer.getMethod().getName();
        final String[] params=new String[timer.getMethod().getParameterTypes().length];
        for (int i=0; i < timer.getMethod().getParameterTypes().length; ++i) {
          params[i]=timer.getMethod().getParameterTypes()[i].getName();
        }
        if (doesTimeoutMethodMatch(calendarTimer.getTimeoutMethod(),methodName,params)) {
          if (this.doesScheduleMatch(calendarTimer.getScheduleExpression(),timer.getScheduleExpression()) && timer.getTimerConfig().isPersistent()) {
            it.remove();
            found=true;
            break;
          }
        }
      }
      if (!found) {
        activeTimer.setTimerState(TimerState.CANCELED);
      }
 else {
        startTimer(activeTimer);
        ROOT_LOGGER.debug("Started timer: " + activeTimer);
      }
      this.persistTimer(activeTimer,false);
    }
 else     if (!ineligibleTimerStates.contains(activeTimer.getState())) {
      startTimer(activeTimer);
    }
    ROOT_LOGGER.debug("Started timer: " + activeTimer);
  }
  for (  ScheduleTimer timer : newAutoTimers) {
    this.loadAutoTimer(timer.getScheduleExpression(),timer.getTimerConfig(),timer.getMethod());
  }
}
