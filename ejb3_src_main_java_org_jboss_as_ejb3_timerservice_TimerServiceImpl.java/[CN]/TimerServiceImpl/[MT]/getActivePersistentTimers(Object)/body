{
  final String timedObjectId=this.getInvoker().getTimedObjectId();
  if (timerPersistence == null) {
    return Collections.emptyList();
  }
  final List<TimerEntity> persistedTimers;
  if (primaryKey == null) {
    persistedTimers=timerPersistence.getValue().loadActiveTimers(timedObjectId);
  }
 else {
    persistedTimers=timerPersistence.getValue().loadActiveTimers(timedObjectId,primaryKey);
  }
  final List<TimerImpl> activeTimers=new ArrayList<TimerImpl>();
  for (  final TimerEntity persistedTimer : persistedTimers) {
    if (ineligibleTimerStates.contains(persistedTimer.getTimerState())) {
      continue;
    }
    TimerImpl activeTimer;
    if (persistedTimer.isCalendarTimer()) {
      final CalendarTimerEntity calendarTimerEntity=(CalendarTimerEntity)persistedTimer;
      activeTimer=new CalendarTimer(calendarTimerEntity,this);
    }
 else {
      activeTimer=new TimerImpl(persistedTimer,this);
    }
    activeTimers.add(activeTimer);
  }
  return activeTimers;
}
