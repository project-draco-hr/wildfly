{
  if (timer == null) {
    return;
  }
  if (!timer.persistent) {
switch (timer.getState()) {
case EXPIRED:
      nonPersistentTimers.remove(timer.getId());
    break;
case CANCELED:
  if (transactionActive()) {
    registerSynchronization(new NonPersistentTimerRemoveSynchronization(timer.getId()));
  }
 else {
    nonPersistentTimers.remove(timer.getId());
  }
}
}
 else {
final TimerEntity timerEntity=timer.getPersistentState();
try {
if (timerPersistence == null) {
  ROOT_LOGGER.timerPersistenceNotEnable();
  return;
}
timerPersistence.getValue().persistTimer(timerEntity);
}
 catch (Throwable t) {
this.setRollbackOnly();
throw new RuntimeException(t);
}
}
}
