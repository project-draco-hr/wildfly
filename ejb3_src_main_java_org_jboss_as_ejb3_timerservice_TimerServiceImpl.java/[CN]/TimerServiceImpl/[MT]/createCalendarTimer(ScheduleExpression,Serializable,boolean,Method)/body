{
  if (this.isLifecycleCallbackInvocation() && !this.isSingletonBeanInvocation()) {
    throw EjbLogger.ROOT_LOGGER.failToCreateTimerDoLifecycle();
  }
  if (schedule == null) {
    throw EjbLogger.ROOT_LOGGER.scheduleIsNull();
  }
  UUID uuid=UUID.randomUUID();
  TimerImpl timer=CalendarTimer.builder().setAutoTimer(timeoutMethod != null).setScheduleExprSecond(schedule.getSecond()).setScheduleExprMinute(schedule.getMinute()).setScheduleExprHour(schedule.getHour()).setScheduleExprDayOfWeek(schedule.getDayOfWeek()).setScheduleExprDayOfMonth(schedule.getDayOfMonth()).setScheduleExprMonth(schedule.getMonth()).setScheduleExprYear(schedule.getYear()).setScheduleExprStartDate(schedule.getStart()).setScheduleExprEndDate(schedule.getEnd()).setScheduleExprTimezone(schedule.getTimezone()).setTimeoutMethod(timeoutMethod).setTimerState(TimerState.CREATED).setId(uuid.toString()).setPersistent(persistent).setPrimaryKey(currentPrimaryKey()).setTimedObjectId(getInvoker().getTimedObjectId()).setInfo(info).setNewTimer(true).build(this);
  this.persistTimer(timer,true);
  this.startTimer(timer);
  return timer;
}
