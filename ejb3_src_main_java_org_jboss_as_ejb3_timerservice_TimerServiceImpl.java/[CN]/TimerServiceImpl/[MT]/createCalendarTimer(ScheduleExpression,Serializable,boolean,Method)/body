{
  if (this.isLifecycleCallbackInvocation() && !this.isSingletonBeanInvocation()) {
    throw MESSAGES.failToCreateTimerDoLifecycle();
  }
  if (schedule == null) {
    throw MESSAGES.scheduleIsNull();
  }
  CalendarBasedTimeout calendarTimeout=new CalendarBasedTimeout(schedule);
  UUID uuid=UUID.randomUUID();
  TimerImpl timer=new CalendarTimer(uuid.toString(),this,calendarTimeout,info,persistent,timeoutMethod,currentPrimaryKey());
  if (persistent) {
    this.persistTimer(timer);
  }
  this.startTimer(timer);
  this.addTimer(timer);
  return timer;
}
