{
  boolean ha=LegacyConnectionFactoryDefinition.HA.resolveModelAttribute(context,model).asBoolean();
  String factoryTypeStr=LegacyConnectionFactoryDefinition.FACTORY_TYPE.resolveModelAttribute(context,model).asString();
  JMSFactoryType factoryType=LegacyConnectionFactoryDefinition.HornetQConnectionFactoryType.valueOf(factoryTypeStr).getType();
  final HornetQConnectionFactory incompleteCF;
  if (ha) {
    incompleteCF=HornetQJMSClient.createConnectionFactoryWithHA(factoryType);
  }
 else {
    incompleteCF=HornetQJMSClient.createConnectionFactoryWithoutHA(factoryType);
  }
  incompleteCF.setAutoGroup(AUTO_GROUP.resolveModelAttribute(context,model).asBoolean());
  incompleteCF.setBlockOnAcknowledge(BLOCK_ON_ACKNOWLEDGE.resolveModelAttribute(context,model).asBoolean());
  incompleteCF.setBlockOnDurableSend(BLOCK_ON_DURABLE_SEND.resolveModelAttribute(context,model).asBoolean());
  incompleteCF.setBlockOnNonDurableSend(BLOCK_ON_NON_DURABLE_SEND.resolveModelAttribute(context,model).asBoolean());
  incompleteCF.setCacheLargeMessagesClient(CACHE_LARGE_MESSAGE_CLIENT.resolveModelAttribute(context,model).asBoolean());
  incompleteCF.setCallFailoverTimeout(CALL_FAILOVER_TIMEOUT.resolveModelAttribute(context,model).asLong());
  incompleteCF.setCallTimeout(CALL_TIMEOUT.resolveModelAttribute(context,model).asLong());
  incompleteCF.setClientFailureCheckPeriod(CLIENT_FAILURE_CHECK_PERIOD.resolveModelAttribute(context,model).asLong());
  final ModelNode clientID=CLIENT_ID.resolveModelAttribute(context,model);
  if (clientID.isDefined()) {
    incompleteCF.setClientID(clientID.asString());
  }
  incompleteCF.setCompressLargeMessage(COMPRESS_LARGE_MESSAGES.resolveModelAttribute(context,model).asBoolean());
  incompleteCF.setConfirmationWindowSize(CONFIRMATION_WINDOW_SIZE.resolveModelAttribute(context,model).asInt());
  final ModelNode connectionLoadBalancingClassName=CONNECTION_LOAD_BALANCING_CLASS_NAME.resolveModelAttribute(context,model);
  if (connectionLoadBalancingClassName.isDefined()) {
    incompleteCF.setConnectionLoadBalancingPolicyClassName(connectionLoadBalancingClassName.asString());
  }
  incompleteCF.setConnectionTTL(CONNECTION_TTL.resolveModelAttribute(context,model).asLong());
  incompleteCF.setConsumerMaxRate(CONSUMER_MAX_RATE.resolveModelAttribute(context,model).asInt());
  incompleteCF.setConsumerWindowSize(CONSUMER_WINDOW_SIZE.resolveModelAttribute(context,model).asInt());
  incompleteCF.setConfirmationWindowSize(CONFIRMATION_WINDOW_SIZE.resolveModelAttribute(context,model).asInt());
  incompleteCF.setDupsOKBatchSize(DUPS_OK_BATCH_SIZE.resolveModelAttribute(context,model).asInt());
  incompleteCF.setFailoverOnInitialConnection(FAILOVER_ON_INITIAL_CONNECTION.resolveModelAttribute(context,model).asBoolean());
  final ModelNode groupID=GROUP_ID.resolveModelAttribute(context,model);
  if (groupID.isDefined()) {
    incompleteCF.setGroupID(groupID.asString());
  }
  incompleteCF.setInitialConnectAttempts(INITIAL_CONNECT_ATTEMPTS.resolveModelAttribute(context,model).asInt());
  incompleteCF.setInitialMessagePacketSize(INITIAL_MESSAGE_PACKET_SIZE.resolveModelAttribute(context,model).asInt());
  incompleteCF.setMaxRetryInterval(MAX_RETRY_INTERVAL.resolveModelAttribute(context,model).asLong());
  incompleteCF.setMinLargeMessageSize(MIN_LARGE_MESSAGE_SIZE.resolveModelAttribute(context,model).asInt());
  incompleteCF.setPreAcknowledge(PRE_ACKNOWLEDGE.resolveModelAttribute(context,model).asBoolean());
  incompleteCF.setProducerMaxRate(PRODUCER_MAX_RATE.resolveModelAttribute(context,model).asInt());
  incompleteCF.setProducerWindowSize(PRODUCER_WINDOW_SIZE.resolveModelAttribute(context,model).asInt());
  incompleteCF.setReconnectAttempts(RECONNECT_ATTEMPTS.resolveModelAttribute(context,model).asInt());
  incompleteCF.setRetryInterval(RETRY_INTERVAL.resolveModelAttribute(context,model).asLong());
  incompleteCF.setRetryIntervalMultiplier(RETRY_INTERVAL_MULTIPLIER.resolveModelAttribute(context,model).asDouble());
  incompleteCF.setScheduledThreadPoolMaxSize(SCHEDULED_THREAD_POOL_MAX_SIZE.resolveModelAttribute(context,model).asInt());
  incompleteCF.setThreadPoolMaxSize(THREAD_POOL_MAX_SIZE.resolveModelAttribute(context,model).asInt());
  incompleteCF.setTransactionBatchSize(TRANSACTION_BATCH_SIZE.resolveModelAttribute(context,model).asInt());
  incompleteCF.setUseGlobalPools(USE_GLOBAL_POOLS.resolveModelAttribute(context,model).asBoolean());
  return incompleteCF;
}
