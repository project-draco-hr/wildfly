{
  final SubsystemRegistration subsystem=context.registerSubsystem(SUBSYSTEM_NAME,CURRENT_MODEL_VERSION);
  subsystem.registerXMLElementWriter(MessagingXMLWriter.INSTANCE);
  boolean registerRuntimeOnly=context.isRuntimeOnlyRegistrationValid();
  final ManagementResourceRegistration rootRegistration=subsystem.registerSubsystemModel(MessagingSubsystemRootResourceDefinition.INSTANCE);
  rootRegistration.registerOperationHandler(GenericSubsystemDescribeHandler.DEFINITION,GenericSubsystemDescribeHandler.INSTANCE);
  final ManagementResourceRegistration serverRegistration=rootRegistration.registerSubModel(HornetQServerResourceDefinition.INSTANCE);
  serverRegistration.registerSubModel(AddressSettingDefinition.INSTANCE);
  serverRegistration.registerSubModel(BroadcastGroupDefinition.INSTANCE);
  serverRegistration.registerSubModel(DiscoveryGroupDefinition.INSTANCE);
  serverRegistration.registerSubModel(DivertDefinition.INSTANCE);
  serverRegistration.registerSubModel(QueueDefinition.INSTANCE);
  serverRegistration.registerSubModel(HTTPAcceptorDefinition.INSTANCE);
  serverRegistration.registerSubModel(GenericTransportDefinition.ACCEPTOR_INSTANCE);
  serverRegistration.registerSubModel(RemoteTransportDefinition.ACCEPTOR_INSTANCE);
  serverRegistration.registerSubModel(InVMTransportDefinition.ACCEPTOR_INSTANCE);
  serverRegistration.registerSubModel(HTTPConnectorDefinition.INSTANCE);
  serverRegistration.registerSubModel(GenericTransportDefinition.CONNECTOR_INSTANCE);
  serverRegistration.registerSubModel(RemoteTransportDefinition.CONNECTOR_INSTANCE);
  serverRegistration.registerSubModel(InVMTransportDefinition.CONNECTOR_INSTANCE);
  serverRegistration.registerSubModel(BridgeDefinition.INSTANCE);
  serverRegistration.registerSubModel(ClusterConnectionDefinition.INSTANCE);
  serverRegistration.registerSubModel(GroupingHandlerDefinition.INSTANCE);
  serverRegistration.registerSubModel(ConnectorServiceDefinition.INSTANCE);
  for (  final String path : PathDefinition.PATHS.keySet()) {
    ManagementResourceRegistration binding=serverRegistration.registerSubModel(new PathDefinition(pathElement(ModelDescriptionConstants.PATH,path)));
    if (context.getProcessType().isServer()) {
      final ResolvePathHandler resolvePathHandler=ResolvePathHandler.Builder.of(context.getPathManager()).setPathAttribute(PathDefinition.PATHS.get(path)).setRelativeToAttribute(PathDefinition.RELATIVE_TO).build();
      binding.registerOperationHandler(resolvePathHandler.getOperationDefinition(),resolvePathHandler);
    }
  }
  serverRegistration.registerSubModel(ConnectionFactoryDefinition.INSTANCE);
  serverRegistration.registerSubModel(PooledConnectionFactoryDefinition.INSTANCE);
  serverRegistration.registerSubModel(JMSQueueDefinition.INSTANCE);
  serverRegistration.registerSubModel(JMSTopicDefinition.INSTANCE);
  serverRegistration.registerSubModel(SecuritySettingDefinition.INSTANCE);
  rootRegistration.registerSubModel(JMSBridgeDefinition.INSTANCE);
  if (context.isRegisterTransformers()) {
    MessagingTransformers.registerTransformers(subsystem);
  }
}
