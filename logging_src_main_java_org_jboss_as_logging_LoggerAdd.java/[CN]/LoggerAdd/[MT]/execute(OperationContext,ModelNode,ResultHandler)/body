{
  final PathAddress address=PathAddress.pathAddress(operation.require(OP_ADDR));
  final String name=address.getLastElement().getValue();
  final ModelNode compensatingOperation=new ModelNode();
  compensatingOperation.get(OP_ADDR).set(operation.require(OP_ADDR));
  compensatingOperation.get(OP).set(REMOVE);
  final String level=operation.require(CommonAttributes.LEVEL).asString();
  final ModelNode handlers=operation.hasDefined(CommonAttributes.HANDLERS) ? operation.get(CommonAttributes.HANDLERS) : new ModelNode();
  final ModelNode subModel=context.getSubModel();
  subModel.get(CommonAttributes.LEVEL).set(level);
  subModel.get(CommonAttributes.HANDLERS).set(handlers);
  if (context.getRuntimeContext() != null) {
    context.getRuntimeContext().setRuntimeTask(new RuntimeTask(){
      public void execute(      RuntimeTaskContext context) throws OperationFailedException {
        final ServiceTarget target=context.getServiceTarget();
        final String loggerName=name;
        try {
          final LoggerService service=new LoggerService(loggerName);
          service.setLevel(Level.parse(level));
          target.addService(LogServices.loggerName(loggerName),service).setInitialMode(ServiceController.Mode.ACTIVE).install();
        }
 catch (        Throwable t) {
          throw new OperationFailedException(new ModelNode().set(t.getLocalizedMessage()));
        }
        try {
          if (handlers.isDefined()) {
            LogServices.installLoggerHandlers(target,loggerName,handlers);
          }
        }
 catch (        Throwable t) {
          throw new OperationFailedException(new ModelNode().set(t.getLocalizedMessage()));
        }
        resultHandler.handleResultComplete();
      }
    }
);
  }
 else {
    resultHandler.handleResultComplete();
  }
  return new BasicOperationResult(compensatingOperation);
}
