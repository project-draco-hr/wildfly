{
  setDomainConfigDir("standard");
  TestProcessHandlerFactory processHandlerFactory=new TestProcessHandlerFactory(false,true);
  QueuedNewConnectionListener newConnectionListener=new QueuedNewConnectionListener();
  final TestProcessManager pm=TestProcessManager.create(processHandlerFactory,InetAddress.getLocalHost(),0,newConnectionListener);
  newConnectionListener.assertWaitForConnection("ServerManager");
  MockServerManagerProcess sm=assertGetServerManager(processHandlerFactory);
  sm.addServerToPm("Server:server-one",pm.getPort());
  sm.startServerInPm("Server:server-one");
  newConnectionListener.assertWaitForConnection("Server:server-one");
  assertReadServerCommand(sm,"Server:server-one",ServerManagerProtocolCommand.SERVER_AVAILABLE);
  ServerModel cfg=getServer("standard","server-one");
  sm.sendMessageToServer("Server:server-one",ServerManagerProtocolCommand.START_SERVER,cfg);
  assertReadServerCommand(sm,"Server:server-one",ServerManagerProtocolCommand.SERVER_STARTED);
  sm.sendMessageToServer("Server:server-one",ServerManagerProtocolCommand.STOP_SERVER);
  assertReadServerCommand(sm,"Server:server-one",ServerManagerProtocolCommand.SERVER_STOPPED);
  new Thread(new Runnable(){
    public void run(){
      pm.shutdown();
    }
  }
).start();
  assertReadPmCommand(sm,org.jboss.as.process.Command.SHUTDOWN_SERVERS.toString());
  sm.sendServersShutdownToProcessManager();
  assertReadPmCommand(sm,org.jboss.as.process.Command.SHUTDOWN.toString());
  sm.stop();
}
