{
  setDomainConfigDir("standard");
  TestProcessHandlerFactory processHandlerFactory=new TestProcessHandlerFactory(false,true);
  QueuedNewConnectionListener newConnectionListener=new QueuedNewConnectionListener();
  final TestProcessManager pm=TestProcessManager.create(processHandlerFactory,InetAddress.getLocalHost(),0,newConnectionListener);
  newConnectionListener.assertWaitForConnection("ServerManager");
  MockServerManagerProcess sm=assertGetServerManager(processHandlerFactory);
  sm.addServerToPm("Server:server-one",pm.getPort());
  sm.startServerInPm("Server:server-one");
  newConnectionListener.assertWaitForConnection("Server:server-one");
  assertReadServerCommand(sm,"Server:server-one",ServerToServerManagerProtocolCommand.SERVER_AVAILABLE);
  ServerModel cfg=getServer("standard","server-one");
  sm.sendMessageToServer("Server:server-one",ServerManagerToServerProtocolCommand.START_SERVER,cfg);
  assertReadServerCommand(sm,"Server:server-one",ServerToServerManagerProtocolCommand.SERVER_STARTED);
  sm.crashServerManager(1);
  sm.stop();
  newConnectionListener.assertWaitForConnection("ServerManager");
  sm=assertGetServerManager(processHandlerFactory);
  sm.sendReconnectServersToProcessManager();
  Command<ServerToServerManagerProtocolCommand> cmd=assertReadServerCommand(sm,"Server:server-one",ServerToServerManagerProtocolCommand.SERVER_RECONNECT_STATUS);
  ServerState state=ServerManagerProtocolUtils.unmarshallCommandData(ServerState.class,cmd);
  Assert.assertSame(ServerState.STARTED,state);
  TestServerProcess proc1=processHandlerFactory.getProcessHandler("Server:server-one").getTestServerProcess();
  new Thread(new Runnable(){
    public void run(){
      pm.shutdown();
    }
  }
).start();
  sm.waitForShutdownCommand();
  proc1.awaitShutdown();
  sm.stop();
}
