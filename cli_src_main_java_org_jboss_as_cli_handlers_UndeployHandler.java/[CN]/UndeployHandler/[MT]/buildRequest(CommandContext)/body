{
  ModelNode composite=new ModelNode();
  composite.get("operation").set("composite");
  composite.get("address").setEmptyList();
  ModelNode steps=composite.get("steps");
  final ParsedArguments args=ctx.getParsedArguments();
  final String name=this.name.getValue(args);
  if (name == null) {
    throw new OperationFormatException("Required argument name are missing.");
  }
  ModelControllerClient client=ctx.getModelControllerClient();
  DefaultOperationRequestBuilder builder;
  boolean keepContent=this.keepContent.isPresent(args);
  if (ctx.isDomainMode()) {
    final List<String> serverGroups;
    if (allRelevantServerGroups.isPresent(args)) {
      if (keepContent) {
        serverGroups=Util.getAllEnabledServerGroups(name,client);
      }
 else {
        serverGroups=Util.getAllReferencingServerGroups(name,client);
      }
    }
 else {
      final String serverGroupsStr=this.serverGroups.getValue(args);
      if (serverGroupsStr == null) {
        throw new OperationFormatException("Either --all-server-groups or --server-groups must be specified.");
      }
 else {
        serverGroups=Arrays.asList(serverGroupsStr.split(","));
      }
    }
    for (    String group : serverGroups) {
      ModelNode groupStep=Util.configureDeploymentOperation(DEPLOYMENT_UNDEPLOY_OPERATION,name,group);
      steps.add(groupStep);
    }
    if (!keepContent) {
      for (      String group : serverGroups) {
        ModelNode groupStep=Util.configureDeploymentOperation(DEPLOYMENT_REMOVE_OPERATION,name,group);
        steps.add(groupStep);
      }
    }
  }
 else   if (Util.isDeployedAndEnabledInStandalone(name,client)) {
    builder=new DefaultOperationRequestBuilder();
    builder.setOperationName("undeploy");
    builder.addNode("deployment",name);
    steps.add(builder.buildRequest());
  }
  if (!keepContent) {
    builder=new DefaultOperationRequestBuilder();
    builder.setOperationName("remove");
    builder.addNode("deployment",name);
    steps.add(builder.buildRequest());
  }
  return composite;
}
