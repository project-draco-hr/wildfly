{
  super(ctx,"undeploy",true);
  final DefaultOperationRequestAddress requiredAddress=new DefaultOperationRequestAddress();
  requiredAddress.toNodeType(Util.DEPLOYMENT);
  addRequiredPath(requiredAddress);
  l=new ArgumentWithoutValue(this,"-l");
  l.setExclusive(true);
  name=new ArgumentWithValue(this,new CommandLineCompleter(){
    @Override public int complete(    CommandContext ctx,    String buffer,    int cursor,    List<String> candidates){
      ParsedCommandLine args=ctx.getParsedCommandLine();
      try {
        if (path.isPresent(args)) {
          return -1;
        }
      }
 catch (      CommandFormatException e) {
        return -1;
      }
      int nextCharIndex=0;
      while (nextCharIndex < buffer.length()) {
        if (!Character.isWhitespace(buffer.charAt(nextCharIndex))) {
          break;
        }
        ++nextCharIndex;
      }
      if (ctx.getModelControllerClient() != null) {
        List<String> deployments=Util.getDeployments(ctx.getModelControllerClient());
        if (deployments.isEmpty()) {
          return -1;
        }
        String opBuffer=buffer.substring(nextCharIndex).trim();
        if (opBuffer.isEmpty()) {
          candidates.addAll(deployments);
        }
 else {
          for (          String name : deployments) {
            if (name.startsWith(opBuffer)) {
              candidates.add(name);
            }
          }
          Collections.sort(candidates);
        }
        return nextCharIndex;
      }
 else {
        return -1;
      }
    }
  }
,0,"--name");
  name.addCantAppearAfter(l);
  allRelevantServerGroups=new ArgumentWithoutValue(this,"--all-relevant-server-groups"){
    @Override public boolean canAppearNext(    CommandContext ctx) throws CommandFormatException {
      if (!ctx.isDomainMode()) {
        return false;
      }
      return super.canAppearNext(ctx);
    }
  }
;
  allRelevantServerGroups.addRequiredPreceding(name);
  serverGroups=new ArgumentWithValue(this,new CommaSeparatedCompleter(){
    @Override protected Collection<String> getAllCandidates(    CommandContext ctx){
      final String deploymentName=name.getValue(ctx.getParsedCommandLine());
      final List<String> allGroups;
      try {
        allGroups=Util.getServerGroupsReferencingDeployment(deploymentName,ctx.getModelControllerClient());
      }
 catch (      CommandLineException e) {
        e.printStackTrace();
        return Collections.emptyList();
      }
      return allGroups;
    }
  }
,"--server-groups"){
    @Override public boolean canAppearNext(    CommandContext ctx) throws CommandFormatException {
      if (!ctx.isDomainMode()) {
        return false;
      }
      return super.canAppearNext(ctx);
    }
  }
;
  serverGroups.addRequiredPreceding(name);
  serverGroups.addCantAppearAfter(allRelevantServerGroups);
  allRelevantServerGroups.addCantAppearAfter(serverGroups);
  keepContent=new ArgumentWithoutValue(this,"--keep-content");
  keepContent.addRequiredPreceding(name);
  final FilenameTabCompleter pathCompleter=Util.isWindows() ? new WindowsFilenameTabCompleter(ctx) : new DefaultFilenameTabCompleter(ctx);
  path=new ArgumentWithValue(this,pathCompleter,"--path"){
    @Override public String getValue(    ParsedCommandLine args){
      String value=super.getValue(args);
      if (value != null) {
        if (value.length() >= 0 && value.charAt(0) == '"' && value.charAt(value.length() - 1) == '"') {
          value=value.substring(1,value.length() - 1);
        }
        value=pathCompleter.translatePath(value);
      }
      return value;
    }
  }
;
  path.addCantAppearAfter(l);
  script=new ArgumentWithValue(this,"--script");
  script.addRequiredPreceding(path);
}
