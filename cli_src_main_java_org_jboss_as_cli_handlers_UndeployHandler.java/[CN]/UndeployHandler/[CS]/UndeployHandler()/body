{
  super("undeploy",true);
  SimpleArgumentTabCompleter argsCompleter=(SimpleArgumentTabCompleter)this.getArgumentCompleter();
  l=new ArgumentWithoutValue("-l");
  l.setExclusive(true);
  argsCompleter.addArgument(l);
  name=new ArgumentWithValue(false,new CommandLineCompleter(){
    @Override public int complete(    CommandContext ctx,    String buffer,    int cursor,    List<String> candidates){
      int nextCharIndex=0;
      while (nextCharIndex < buffer.length()) {
        if (!Character.isWhitespace(buffer.charAt(nextCharIndex))) {
          break;
        }
        ++nextCharIndex;
      }
      if (ctx.getModelControllerClient() != null) {
        List<String> deployments=Util.getDeployments(ctx.getModelControllerClient());
        if (deployments.isEmpty()) {
          return -1;
        }
        String opBuffer=buffer.substring(nextCharIndex).trim();
        if (opBuffer.isEmpty()) {
          candidates.addAll(deployments);
        }
 else {
          for (          String name : deployments) {
            if (name.startsWith(opBuffer)) {
              candidates.add(name);
            }
          }
          Collections.sort(candidates);
        }
        return nextCharIndex;
      }
 else {
        return -1;
      }
    }
  }
,0,"--name");
  name.addCantAppearAfter(l);
  argsCompleter.addArgument(name);
  allRelevantServerGroups=new ArgumentWithoutValue("--all-relevant-server-groups"){
    @Override public boolean canAppearNext(    CommandContext ctx){
      if (!ctx.isDomainMode()) {
        return false;
      }
      return super.canAppearNext(ctx);
    }
  }
;
  argsCompleter.addArgument(allRelevantServerGroups);
  allRelevantServerGroups.addRequiredPreceding(name);
  serverGroups=new ArgumentWithValue(false,new CommandLineCompleter(){
    @Override public int complete(    CommandContext ctx,    String buffer,    int cursor,    List<String> candidates){
      if (buffer.isEmpty()) {
        candidates.addAll(Util.getServerGroups(ctx.getModelControllerClient()));
        Collections.sort(candidates);
        return 0;
      }
      final List<String> allGroups;
      allGroups=Util.getServerGroups(ctx.getModelControllerClient());
      final String[] groups=buffer.split(",+");
      final String chunk;
      final int lastGroupIndex;
      if (buffer.charAt(buffer.length() - 1) == ',') {
        lastGroupIndex=groups.length;
        chunk=null;
      }
 else {
        lastGroupIndex=groups.length - 1;
        chunk=groups[groups.length - 1];
      }
      for (int i=0; i < lastGroupIndex; ++i) {
        allGroups.remove(groups[i]);
      }
      final int result;
      if (chunk == null) {
        candidates.addAll(allGroups);
        result=buffer.length();
      }
 else {
        for (        String group : allGroups) {
          if (group.startsWith(chunk)) {
            candidates.add(group);
          }
        }
        result=buffer.lastIndexOf(',') + 1;
      }
      Collections.sort(candidates);
      return result;
    }
  }
,"--server-groups"){
    @Override public boolean canAppearNext(    CommandContext ctx){
      if (!ctx.isDomainMode()) {
        return false;
      }
      return super.canAppearNext(ctx);
    }
  }
;
  serverGroups.addRequiredPreceding(name);
  argsCompleter.addArgument(serverGroups);
  serverGroups.addCantAppearAfter(allRelevantServerGroups);
  allRelevantServerGroups.addCantAppearAfter(serverGroups);
  keepContent=new ArgumentWithoutValue("--keep-content");
  argsCompleter.addArgument(keepContent);
  keepContent.addRequiredPreceding(name);
}
