{
  final PathAddress address=PathAddress.pathAddress(operation.require(OP_ADDR));
  final String name=address.getLastElement().getValue();
  final ModelNode model=Resource.Tools.readModel(context.readResource(PathAddress.EMPTY_ADDRESS));
  if (model.get(READ_ONLY.getName()).asBoolean(false)) {
    throw ControllerMessages.MESSAGES.cannotRemoveReadOnlyPath(name);
  }
  context.removeResource(PathAddress.EMPTY_ADDRESS);
  if (services) {
    context.addStep(new OperationStepHandler(){
      public void execute(      OperationContext context,      ModelNode operation) throws OperationFailedException {
        final PathEventContextImpl pathEventContext=pathManager.checkRestartRequired(context,name,Event.REMOVED);
        if (pathEventContext.isInstallServices()) {
          pathManager.removePathEntry(name,true);
          pathManager.removePathService(context,name);
        }
        context.completeStep(new OperationContext.RollbackHandler(){
          @Override public void handleRollback(          OperationContext context,          ModelNode operation){
            try {
              final String path=PathAddHandler.getPathValue(context,PATH_SPECIFIED,model);
              final String relativeTo=PathAddHandler.getPathValue(context,RELATIVE_TO,model);
              if (pathEventContext.isInstallServices()) {
                pathManager.addPathEntry(name,path,relativeTo,false);
                final ServiceTarget target=context.getServiceTarget();
                if (relativeTo == null) {
                  pathManager.addAbsolutePathService(target,name,path,null);
                }
 else {
                  pathManager.addRelativePathService(target,name,path,false,relativeTo,null);
                }
              }
 else {
                context.revertRestartRequired();
              }
            }
 catch (            Exception e) {
              MGMT_OP_LOGGER.errorRevertingOperation(e,getClass().getSimpleName(),operation.require(ModelDescriptionConstants.OP).asString(),PathAddress.pathAddress(operation.get(ModelDescriptionConstants.OP_ADDR)));
            }
          }
        }
);
      }
    }
,OperationContext.Stage.RUNTIME);
  }
  context.stepCompleted();
}
