{
  final Map<String,TransportConfiguration> connectors=new HashMap<String,TransportConfiguration>();
  if (params.hasDefined(CONNECTOR)) {
    for (    final Property property : params.get(CONNECTOR).asPropertyList()) {
      final String connectorName=property.getName();
      final ModelNode config=property.getValue();
      final Map<String,Object> parameters=getParameters(context,config);
      final String clazz=FACTORY_CLASS.resolveModelAttribute(context,config).asString();
      connectors.put(connectorName,new TransportConfiguration(clazz,parameters,connectorName));
    }
  }
  if (params.hasDefined(REMOTE_CONNECTOR)) {
    for (    final Property property : params.get(REMOTE_CONNECTOR).asPropertyList()) {
      final String connectorName=property.getName();
      final ModelNode config=property.getValue();
      final Map<String,Object> parameters=getParameters(context,config);
      final String binding=config.get(RemoteTransportDefinition.SOCKET_BINDING.getName()).asString();
      parameters.put(RemoteTransportDefinition.SOCKET_BINDING.getName(),binding);
      bindings.add(binding);
      connectors.put(connectorName,new TransportConfiguration(NettyConnectorFactory.class.getName(),parameters,connectorName));
    }
  }
  if (params.hasDefined(IN_VM_CONNECTOR)) {
    for (    final Property property : params.get(IN_VM_CONNECTOR).asPropertyList()) {
      final String connectorName=property.getName();
      final ModelNode config=property.getValue();
      final Map<String,Object> parameters=getParameters(context,config);
      parameters.put(InVMTransportDefinition.SERVER_ID.getName(),InVMTransportDefinition.SERVER_ID.resolveModelAttribute(context,config).asInt());
      connectors.put(connectorName,new TransportConfiguration(InVMConnectorFactory.class.getName(),parameters,connectorName));
    }
  }
  if (params.hasDefined(SERVLET_CONNECTOR)) {
    final String serverName=configuration.getName();
    for (    final Property property : params.get(SERVLET_CONNECTOR).asPropertyList()) {
      final String connectorName=property.getName();
      final ModelNode config=property.getValue();
      final Map<String,Object> parameters=getParameters(context,config);
      parameters.put(USE_SERVLET,true);
      parameters.put(SERVLET_PATH,ServletConnectorService.getServletPath(serverName,connectorName));
      final String binding=config.get(ServletConnectorDefinition.SOCKET_BINDING.getName()).asString();
      parameters.put(ServletConnectorDefinition.SOCKET_BINDING.getName(),binding);
      bindings.add(binding);
      connectors.put(connectorName,new TransportConfiguration(NettyConnectorFactory.class.getName(),parameters,connectorName));
      String acceptorName=connectorName + "-" + ACCEPTOR;
      final Map<String,Object> acceptorParams=new HashMap<String,Object>();
      acceptorParams.put(USE_INVM,true);
      acceptorParams.put(HOST,ServletConnectorService.getServletEndpoint(serverName,connectorName));
      TransportConfiguration httpAcceptor=new TransportConfiguration(NettyAcceptorFactory.class.getName(),acceptorParams,acceptorName);
      configuration.getAcceptorConfigurations().add(httpAcceptor);
    }
  }
  configuration.setConnectorConfigurations(connectors);
}
