{
  final Map<String,TransportConfiguration> connectors=new HashMap<String,TransportConfiguration>();
  if (params.hasDefined(CONNECTOR)) {
    for (    final Property property : params.get(CONNECTOR).asPropertyList()) {
      final String connectorName=property.getName();
      final ModelNode config=property.getValue();
      final Map<String,Object> parameters=getParameters(context,config);
      final String clazz=FACTORY_CLASS.resolveModelAttribute(context,config).asString();
      connectors.put(connectorName,new TransportConfiguration(clazz,parameters,connectorName));
    }
  }
  if (params.hasDefined(REMOTE_CONNECTOR)) {
    for (    final Property property : params.get(REMOTE_CONNECTOR).asPropertyList()) {
      final String connectorName=property.getName();
      final ModelNode config=property.getValue();
      final Map<String,Object> parameters=getParameters(context,config);
      final String binding=config.get(RemoteTransportDefinition.SOCKET_BINDING.getName()).asString();
      parameters.put(RemoteTransportDefinition.SOCKET_BINDING.getName(),binding);
      bindings.add(binding);
      connectors.put(connectorName,new TransportConfiguration(NettyConnectorFactory.class.getName(),parameters,connectorName));
    }
  }
  if (params.hasDefined(IN_VM_CONNECTOR)) {
    for (    final Property property : params.get(IN_VM_CONNECTOR).asPropertyList()) {
      final String connectorName=property.getName();
      final ModelNode config=property.getValue();
      final Map<String,Object> parameters=getParameters(context,config);
      parameters.put(InVMTransportDefinition.SERVER_ID.getName(),config.get(InVMTransportDefinition.SERVER_ID.getName()).asInt());
      connectors.put(connectorName,new TransportConfiguration(InVMConnectorFactory.class.getName(),parameters,connectorName));
    }
  }
  configuration.setConnectorConfigurations(connectors);
}
