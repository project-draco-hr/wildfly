{
  final Map<String,TransportConfiguration> acceptors=new HashMap<String,TransportConfiguration>();
  if (params.hasDefined(ACCEPTOR)) {
    for (    final Property property : params.get(ACCEPTOR).asPropertyList()) {
      final String acceptorName=property.getName();
      final ModelNode config=property.getValue();
      final Map<String,Object> parameters=getParameters(config);
      final String clazz=config.get(FACTORY_CLASS.getName()).asString();
      acceptors.put(acceptorName,new TransportConfiguration(clazz,parameters,acceptorName));
    }
  }
  if (params.hasDefined(REMOTE_ACCEPTOR)) {
    for (    final Property property : params.get(REMOTE_ACCEPTOR).asPropertyList()) {
      final String acceptorName=property.getName();
      final ModelNode config=property.getValue();
      final Map<String,Object> parameters=getParameters(config);
      final String binding=config.get(RemoteAcceptorDefinition.SOCKET_BINDING.getName()).asString();
      parameters.put(RemoteAcceptorDefinition.SOCKET_BINDING.getName(),binding);
      bindings.add(binding);
      acceptors.put(acceptorName,new TransportConfiguration(NettyAcceptorFactory.class.getName(),parameters,acceptorName));
    }
  }
  if (params.hasDefined(IN_VM_ACCEPTOR)) {
    for (    final Property property : params.get(IN_VM_ACCEPTOR).asPropertyList()) {
      final String acceptorName=property.getName();
      final ModelNode config=property.getValue();
      final Map<String,Object> parameters=getParameters(config);
      parameters.put(InVMAcceptorDefinition.SERVER_ID.getName(),config.get(InVMAcceptorDefinition.SERVER_ID.getName()).asInt());
      acceptors.put(acceptorName,new TransportConfiguration(InVMAcceptorFactory.class.getName(),parameters,acceptorName));
    }
  }
  configuration.setAcceptorConfigurations(new HashSet<TransportConfiguration>(acceptors.values()));
}
