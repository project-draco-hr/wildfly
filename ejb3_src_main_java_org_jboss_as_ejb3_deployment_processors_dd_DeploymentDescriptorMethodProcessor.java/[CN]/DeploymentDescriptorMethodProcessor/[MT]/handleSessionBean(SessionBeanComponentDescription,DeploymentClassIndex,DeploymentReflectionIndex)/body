{
  if (component.getDescriptorData() == null) {
    return;
  }
  final ClassIndex componentClass=classIndex.classIndex(component.getComponentClassName());
  final SessionBeanMetaData metaData=component.getDescriptorData();
  AroundInvokesMetaData aroundInvokes=metaData.getAroundInvokes();
  if (aroundInvokes != null) {
    for (    AroundInvokeMetaData aroundInvoke : aroundInvokes) {
      final InterceptorClassDescription.Builder builder=InterceptorClassDescription.builder();
      String methodName=aroundInvoke.getMethodName();
      MethodIdentifier methodIdentifier=MethodIdentifier.getIdentifier(Object.class,methodName,InvocationContext.class);
      builder.setAroundInvoke(methodIdentifier);
      if (aroundInvoke.getClassName() == null || aroundInvoke.getClassName().isEmpty()) {
        final String className=ClassReflectionIndexUtil.findRequiredMethod(reflectionIndex,reflectionIndex.getClassIndex(componentClass.getModuleClass()),methodIdentifier).getDeclaringClass().getName();
        component.addInterceptorMethodOverride(className,builder.build());
      }
 else {
        component.addInterceptorMethodOverride(aroundInvoke.getClassName(),builder.build());
      }
    }
  }
  LifecycleCallbacksMetaData postConstructs=metaData.getPostConstructs();
  if (postConstructs != null) {
    for (    LifecycleCallbackMetaData postConstruct : postConstructs) {
      final InterceptorClassDescription.Builder builder=InterceptorClassDescription.builder();
      String methodName=postConstruct.getMethodName();
      MethodIdentifier methodIdentifier=MethodIdentifier.getIdentifier(void.class,methodName);
      builder.setPostConstruct(methodIdentifier);
      if (postConstruct.getClassName() == null || postConstruct.getClassName().isEmpty()) {
        final String className=ClassReflectionIndexUtil.findRequiredMethod(reflectionIndex,reflectionIndex.getClassIndex(componentClass.getModuleClass()),methodIdentifier).getDeclaringClass().getName();
        component.addInterceptorMethodOverride(className,builder.build());
      }
 else {
        component.addInterceptorMethodOverride(postConstruct.getClassName(),builder.build());
      }
    }
  }
  LifecycleCallbacksMetaData preDestroys=metaData.getPreDestroys();
  if (preDestroys != null) {
    for (    LifecycleCallbackMetaData preDestroy : preDestroys) {
      final InterceptorClassDescription.Builder builder=InterceptorClassDescription.builder();
      String methodName=preDestroy.getMethodName();
      MethodIdentifier methodIdentifier=MethodIdentifier.getIdentifier(void.class,methodName);
      builder.setPreDestroy(methodIdentifier);
      if (preDestroy.getClassName() == null || preDestroy.getClassName().isEmpty()) {
        final String className=ClassReflectionIndexUtil.findRequiredMethod(reflectionIndex,reflectionIndex.getClassIndex(componentClass.getModuleClass()),methodIdentifier).getDeclaringClass().getName();
        component.addInterceptorMethodOverride(className,builder.build());
      }
 else {
        component.addInterceptorMethodOverride(preDestroy.getClassName(),builder.build());
      }
    }
  }
}
