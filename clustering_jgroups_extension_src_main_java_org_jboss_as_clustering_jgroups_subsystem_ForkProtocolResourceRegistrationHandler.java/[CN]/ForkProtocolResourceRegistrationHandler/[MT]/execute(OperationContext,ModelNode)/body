{
  ManagementResourceRegistration registration=context.getResourceRegistrationForUpdate();
  String protocolName=context.getCurrentAddressValue();
  ModuleIdentifier module=ModelNodes.asModuleIdentifier(ProtocolResourceDefinition.MODULE.resolveModelAttribute(context,operation));
  Class<? extends Protocol> protocolClass=ProtocolResourceRegistrationHandler.findProtocolClass(context,protocolName,module);
  final Map<String,Attribute> attributes=ProtocolMetricsHandler.findProtocolAttributes(protocolClass);
  OverrideDescriptionProvider provider=new OverrideDescriptionProvider(){
    @Override public Map<String,ModelNode> getAttributeOverrideDescriptions(    Locale locale){
      Map<String,ModelNode> result=new HashMap<>();
      for (      Attribute attribute : attributes.values()) {
        ModelNode value=new ModelNode();
        value.get(ModelDescriptionConstants.DESCRIPTION).set(attribute.getDescription());
        result.put(attribute.getName(),value);
      }
      return result;
    }
    @Override public Map<String,ModelNode> getChildTypeOverrideDescriptions(    Locale locale){
      return Collections.emptyMap();
    }
  }
;
  ManagementResourceRegistration protocolRegistration=registration.registerOverrideModel(protocolName,provider);
  ProtocolMetricsHandler handler=new ProtocolMetricsHandler(this);
  for (  Attribute attribute : attributes.values()) {
    String name=attribute.getName();
    FieldType type=FieldType.valueOf(attribute.getType());
    protocolRegistration.registerMetric(new SimpleAttributeDefinitionBuilder(name,type.getModelType()).setStorageRuntime().build(),handler);
  }
  context.stepCompleted();
}
