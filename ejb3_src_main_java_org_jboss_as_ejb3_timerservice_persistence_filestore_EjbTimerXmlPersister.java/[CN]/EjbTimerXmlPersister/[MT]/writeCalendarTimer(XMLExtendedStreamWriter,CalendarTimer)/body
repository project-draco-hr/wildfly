{
  String info=null;
  String primaryKey=null;
  if (timer.getInfo() != null) {
    try {
      Marshaller marshaller=factory.createMarshaller(configuration);
      ByteArrayOutputStream out=new ByteArrayOutputStream();
      marshaller.start(new OutputStreamByteOutput(out));
      marshaller.writeObject(timer.getInfo());
      marshaller.finish();
      marshaller.flush();
      info=Base64.getEncoder().encodeToString(out.toByteArray());
    }
 catch (    Exception e) {
      EjbLogger.EJB3_TIMER_LOGGER.failedToPersistTimer(timer,e);
      return;
    }
  }
  if (timer.getPrimaryKey() != null) {
    try {
      Marshaller marshaller=factory.createMarshaller(configuration);
      ByteArrayOutputStream out=new ByteArrayOutputStream();
      marshaller.start(new OutputStreamByteOutput(out));
      marshaller.writeObject(timer.getPrimaryKey());
      marshaller.finish();
      marshaller.flush();
      primaryKey=Base64.getEncoder().encodeToString(out.toByteArray());
    }
 catch (    Exception e) {
      EjbLogger.EJB3_TIMER_LOGGER.failedToPersistTimer(timer,e);
      return;
    }
  }
  writer.writeStartElement(CALENDAR_TIMER);
  writer.writeAttribute(TIMED_OBJECT_ID,timer.getTimedObjectId());
  writer.writeAttribute(TIMER_ID,timer.getId());
  if (timer.getInitialExpiration() != null) {
    writer.writeAttribute(INITIAL_DATE,Long.toString(timer.getInitialExpiration().getTime()));
  }
  if (timer.getNextExpiration() != null) {
    writer.writeAttribute(NEXT_DATE,Long.toString(timer.getNextExpiration().getTime()));
  }
  writer.writeAttribute(TIMER_STATE,timer.getState().name());
  writer.writeAttribute(SCHEDULE_EXPR_SECOND,timer.getScheduleExpression().getSecond());
  writer.writeAttribute(SCHEDULE_EXPR_MINUTE,timer.getScheduleExpression().getMinute());
  writer.writeAttribute(SCHEDULE_EXPR_HOUR,timer.getScheduleExpression().getHour());
  writer.writeAttribute(SCHEDULE_EXPR_DAY_OF_WEEK,timer.getScheduleExpression().getDayOfWeek());
  writer.writeAttribute(SCHEDULE_EXPR_DAY_OF_MONTH,timer.getScheduleExpression().getDayOfMonth());
  writer.writeAttribute(SCHEDULE_EXPR_MONTH,timer.getScheduleExpression().getMonth());
  writer.writeAttribute(SCHEDULE_EXPR_YEAR,timer.getScheduleExpression().getYear());
  if (timer.getScheduleExpression().getStart() != null) {
    writer.writeAttribute(SCHEDULE_EXPR_START_DATE,Long.toString(timer.getScheduleExpression().getStart().getTime()));
  }
  if (timer.getScheduleExpression().getEnd() != null) {
    writer.writeAttribute(SCHEDULE_EXPR_END_DATE,Long.toString(timer.getScheduleExpression().getEnd().getTime()));
  }
  if (timer.getScheduleExpression().getTimezone() != null) {
    writer.writeAttribute(SCHEDULE_EXPR_TIMEZONE,timer.getScheduleExpression().getTimezone());
  }
  if (info != null) {
    writer.writeStartElement(INFO);
    writer.writeCharacters(info);
    writer.writeEndElement();
  }
  if (primaryKey != null) {
    writer.writeStartElement(PRIMARY_KEY);
    writer.writeCharacters(primaryKey);
    writer.writeEndElement();
  }
  if (timer.isAutoTimer()) {
    writer.writeStartElement(TIMEOUT_METHOD);
    writer.writeAttribute(DECLARING_CLASS,timer.getTimeoutMethod().getDeclaringClass().getName());
    writer.writeAttribute(NAME,timer.getTimeoutMethod().getName());
    for (    Class<?> param : timer.getTimeoutMethod().getParameterTypes()) {
      writer.writeStartElement(PARAMETER);
      writer.writeAttribute(TYPE,param.getName());
      writer.writeEndElement();
    }
    writer.writeEndElement();
  }
  writer.writeEndElement();
}
