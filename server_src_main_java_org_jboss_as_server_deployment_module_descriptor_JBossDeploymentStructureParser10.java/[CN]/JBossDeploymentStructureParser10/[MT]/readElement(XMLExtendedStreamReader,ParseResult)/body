{
  final int count=reader.getAttributeCount();
  if (count != 0) {
    throw unexpectedContent(reader);
  }
  boolean deploymentVisited=false;
  while (reader.hasNext()) {
switch (reader.nextTag()) {
case XMLStreamConstants.END_ELEMENT:
{
        return;
      }
case XMLStreamConstants.START_ELEMENT:
{
      final Element element=Element.of(reader.getName());
switch (element) {
case EAR_SUBDEPLOYMENTS_ISOLATED:
        String value=reader.getElementText();
      if (value == null || value.isEmpty()) {
        result.setEarSubDeploymentsIsolated(true);
      }
 else {
        result.setEarSubDeploymentsIsolated(Boolean.valueOf(value));
      }
    break;
case DEPLOYMENT:
  if (deploymentVisited) {
    throw unexpectedContent(reader);
  }
deploymentVisited=true;
parseDeployment(reader,result);
break;
case SUB_DEPLOYMENT:
parseSubDeployment(reader,result);
break;
case MODULE:
parseModule(reader,result);
break;
default :
throw unexpectedContent(reader);
}
break;
}
default :
{
throw unexpectedContent(reader);
}
}
}
throw endOfDocument(reader.getLocation());
}
