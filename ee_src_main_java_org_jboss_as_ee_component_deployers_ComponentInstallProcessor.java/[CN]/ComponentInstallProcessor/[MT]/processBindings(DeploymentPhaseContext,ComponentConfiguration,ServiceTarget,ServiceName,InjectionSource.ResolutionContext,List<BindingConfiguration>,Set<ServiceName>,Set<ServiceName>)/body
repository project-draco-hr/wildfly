{
  for (  BindingConfiguration bindingConfiguration : bindings) {
    if (bindingConfiguration.getName().startsWith("java:comp") || !bindingConfiguration.getName().startsWith("java:")) {
      final String bindingName=bindingConfiguration.getName().startsWith("java:comp") ? bindingConfiguration.getName() : "java:comp/env/" + bindingConfiguration.getName();
      final ContextNames.BindInfo bindInfo=ContextNames.bindInfoForEnvEntry(configuration.getApplicationName(),configuration.getModuleName(),configuration.getComponentName(),configuration.getComponentDescription().getNamingMode() == ComponentNamingMode.CREATE,bindingName);
      if (bound.contains(bindInfo.getBinderServiceName())) {
        continue;
      }
      bound.add(bindInfo.getBinderServiceName());
      try {
        final BinderService service=new BinderService(bindInfo.getBindName(),bindingConfiguration.getSource());
        dependencies.add(bindInfo.getBinderServiceName());
        ServiceBuilder<ManagedReferenceFactory> serviceBuilder=serviceTarget.addService(bindInfo.getBinderServiceName(),service);
        bindingConfiguration.getSource().getResourceValue(resolutionContext,serviceBuilder,phaseContext,service.getManagedObjectInjector());
        serviceBuilder.addDependency(bindInfo.getParentContextServiceName(),ServiceBasedNamingStore.class,service.getNamingStoreInjector());
        serviceBuilder.install();
      }
 catch (      DuplicateServiceException e) {
        ServiceController<ManagedReferenceFactory> registered=(ServiceController<ManagedReferenceFactory>)CurrentServiceContainer.getServiceContainer().getService(bindInfo.getBinderServiceName());
        if (registered == null)         throw e;
        BinderService service=(BinderService)registered.getService();
        if (!service.getSource().equals(bindingConfiguration.getSource()))         throw new IllegalArgumentException("Incompatible conflicting binding at " + bindingName + " source: "+ bindingConfiguration.getSource());
      }
catch (      CircularDependencyException e) {
        throw new IllegalArgumentException("Circular dependency installing " + bindingName);
      }
    }
  }
}
