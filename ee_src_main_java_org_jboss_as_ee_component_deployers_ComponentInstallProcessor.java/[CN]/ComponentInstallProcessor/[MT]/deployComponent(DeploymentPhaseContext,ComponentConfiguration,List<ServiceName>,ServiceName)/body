{
  final DeploymentUnit deploymentUnit=phaseContext.getDeploymentUnit();
  final ServiceTarget serviceTarget=phaseContext.getServiceTarget();
  final String applicationName=configuration.getApplicationName();
  final String moduleName=configuration.getModuleName();
  final String componentName=configuration.getComponentName();
  final EEApplicationClasses applicationClasses=deploymentUnit.getAttachment(Attachments.EE_APPLICATION_CLASSES_DESCRIPTION);
  final Module module=deploymentUnit.getAttachment(org.jboss.as.server.deployment.Attachments.MODULE);
  final ServiceName createServiceName=configuration.getComponentDescription().getCreateServiceName();
  final ServiceName startServiceName=configuration.getComponentDescription().getStartServiceName();
  final BasicComponentCreateService createService=configuration.getComponentCreateServiceFactory().constructService(configuration);
  final ServiceBuilder<Component> createBuilder=serviceTarget.addService(createServiceName,createService);
  createBuilder.addDependency(deploymentUnit.getServiceName(),DeploymentUnit.class,createService.getDeploymentUnitInjector());
  final ComponentStartService startService=new ComponentStartService();
  final ServiceBuilder<Component> startBuilder=serviceTarget.addService(startServiceName,startService);
  deploymentUnit.addToAttachmentList(org.jboss.as.server.deployment.Attachments.DEPLOYMENT_COMPLETE_SERVICES,startServiceName);
  for (  DependencyConfigurator configurator : configuration.getCreateDependencies()) {
    configurator.configureDependency(createBuilder,createService);
  }
  for (  DependencyConfigurator configurator : configuration.getStartDependencies()) {
    configurator.configureDependency(startBuilder,startService);
  }
  startBuilder.addDependency(createServiceName,BasicComponent.class,startService.getComponentInjector());
  Services.addServerExecutorDependency(startBuilder,startService.getExecutorInjector(),false);
  startBuilder.addDependency(bindingDependencyService);
  final ServiceName contextServiceName;
  if (configuration.getComponentDescription().getNamingMode() == ComponentNamingMode.CREATE) {
    final NamingStoreService contextService=new NamingStoreService();
    contextServiceName=configuration.getComponentDescription().getContextServiceName();
    serviceTarget.addService(contextServiceName,contextService).install();
  }
 else {
    contextServiceName=configuration.getComponentDescription().getContextServiceName();
  }
  final InjectionSource.ResolutionContext resolutionContext=new InjectionSource.ResolutionContext(configuration.getComponentDescription().getNamingMode() == ComponentNamingMode.USE_MODULE,configuration.getComponentName(),configuration.getModuleName(),configuration.getApplicationName());
  for (  ViewConfiguration viewConfiguration : configuration.getViews()) {
    final ServiceName serviceName=viewConfiguration.getViewServiceName();
    final ViewService viewService=new ViewService(viewConfiguration);
    final ServiceBuilder<ComponentView> componentViewServiceBuilder=serviceTarget.addService(serviceName,viewService);
    componentViewServiceBuilder.addDependency(createServiceName,Component.class,viewService.getComponentInjector());
    for (    final DependencyConfigurator<ViewService> depConfig : viewConfiguration.getDependencies()) {
      depConfig.configureDependency(componentViewServiceBuilder,viewService);
    }
    componentViewServiceBuilder.install();
    startBuilder.addDependency(serviceName);
    for (    BindingConfiguration bindingConfiguration : viewConfiguration.getBindingConfigurations()) {
      final String bindingName=bindingConfiguration.getName();
      final ContextNames.BindInfo bindInfo=ContextNames.bindInfoFor(applicationName,moduleName,componentName,bindingName);
      final BinderService service=new BinderService(bindInfo.getBindName(),bindingConfiguration.getSource());
      dependencies.add(bindInfo.getBinderServiceName());
      ServiceBuilder<ManagedReferenceFactory> serviceBuilder=serviceTarget.addService(bindInfo.getBinderServiceName(),service);
      bindingConfiguration.getSource().getResourceValue(resolutionContext,serviceBuilder,phaseContext,service.getManagedObjectInjector());
      serviceBuilder.addDependency(bindInfo.getParentContextServiceName(),ServiceBasedNamingStore.class,service.getNamingStoreInjector());
      serviceBuilder.install();
    }
  }
  if (configuration.getComponentDescription().getNamingMode() == ComponentNamingMode.CREATE) {
    final Set<ServiceName> bound=new HashSet<ServiceName>();
    processBindings(phaseContext,configuration,serviceTarget,contextServiceName,resolutionContext,configuration.getComponentDescription().getBindingConfigurations(),dependencies,bound);
    if (!MetadataCompleteMarker.isMetadataComplete(phaseContext.getDeploymentUnit())) {
      new ClassDescriptionTraversal(configuration.getComponentClass(),applicationClasses){
        @Override protected void handle(        final Class<?> clazz,        final EEModuleClassDescription classDescription) throws DeploymentUnitProcessingException {
          if (classDescription != null) {
            processBindings(phaseContext,configuration,serviceTarget,contextServiceName,resolutionContext,classDescription.getBindingConfigurations(),dependencies,bound);
          }
        }
      }
.run();
      for (      InterceptorDescription interceptor : configuration.getComponentDescription().getAllInterceptors()) {
        final Class<?> interceptorClass;
        try {
          interceptorClass=module.getClassLoader().loadClass(interceptor.getInterceptorClassName());
        }
 catch (        ClassNotFoundException e) {
          throw MESSAGES.cannotLoadInterceptor(e,interceptor.getInterceptorClassName(),configuration.getComponentClass());
        }
        if (interceptorClass != null) {
          new ClassDescriptionTraversal(interceptorClass,applicationClasses){
            @Override protected void handle(            final Class<?> clazz,            final EEModuleClassDescription classDescription) throws DeploymentUnitProcessingException {
              if (classDescription != null) {
                processBindings(phaseContext,configuration,serviceTarget,contextServiceName,resolutionContext,classDescription.getBindingConfigurations(),dependencies,bound);
              }
            }
          }
.run();
        }
      }
    }
  }
  createBuilder.install();
  startBuilder.install();
}
