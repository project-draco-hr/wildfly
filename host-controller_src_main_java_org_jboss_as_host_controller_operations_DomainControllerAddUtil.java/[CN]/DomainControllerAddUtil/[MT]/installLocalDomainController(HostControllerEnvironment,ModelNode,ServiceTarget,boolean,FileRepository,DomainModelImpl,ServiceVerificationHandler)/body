{
  final List<ServiceController<?>> controllers=new ArrayList<ServiceController<?>>();
  final String hostName=host.get(NAME).asString();
  final String mgmtNetwork=host.get(MANAGEMENT_INTERFACE,NATIVE_INTERFACE,INTERFACE).asString();
  final int mgmtPort=host.get(MANAGEMENT_INTERFACE,NATIVE_INTERFACE,PORT).asInt();
  final boolean backupDomainFiles=environment.isBackupDomainFiles();
  final boolean useCachedDc=environment.isUseCachedDc();
  controllers.add(serviceTarget.addService(HostRegistryService.SERVICE_NAME,new HostRegistryService()).addListener(verificationHandler).install());
  final File configDir=environment.getDomainConfigurationDir();
  final ConfigurationFile configurationFile=environment.getDomainConfigurationFile();
  final ExtensibleConfigurationPersister domainConfigurationPersister=createDomainConfigurationPersister(configDir,configurationFile,isSlave);
  ContentRepository contentRepository=new DomainContentRepository(environment.getDomainDeploymentDir());
  final DomainControllerService dcService=new DomainControllerService(domainConfigurationPersister,hostName,mgmtPort,contentRepository,fileRepository,backupDomainFiles,useCachedDc,domainModel);
  ServiceBuilder<DomainController> builder=serviceTarget.addService(DomainController.SERVICE_NAME,dcService);
  if (isSlave) {
    builder.addDependency(MasterDomainControllerClient.SERVICE_NAME,MasterDomainControllerClient.class,dcService.getMasterDomainControllerClientInjector());
  }
  controllers.add(builder.addDependency(HOST_CONTROLLER_SERVICE_NAME_BASE.append("executor"),ScheduledExecutorService.class,dcService.getScheduledExecutorServiceInjector()).addDependency(HostController.SERVICE_NAME,LocalHostModel.class,dcService.getHostControllerServiceInjector()).addDependency(NetworkInterfaceService.JBOSS_NETWORK_INTERFACE.append(mgmtNetwork),NetworkInterfaceBinding.class,dcService.getInterfaceInjector()).addDependency(HostRegistryService.SERVICE_NAME,HostRegistryService.class,dcService.getHostRegistryInjector()).addListener(verificationHandler).install());
  RemotingServices.installDomainControllerManagementChannelServices(serviceTarget,new ModelControllerOperationHandlerService(),DomainController.SERVICE_NAME,NetworkInterfaceService.JBOSS_NETWORK_INTERFACE.append(mgmtNetwork),mgmtPort,controllers);
  if (!isSlave) {
    RemotingServices.installChannelServices(serviceTarget,new MasterDomainControllerOperationHandlerService(),DomainController.SERVICE_NAME,"domain",controllers);
  }
  return controllers;
}
