{
  MBeanServerConnection connection=setupAndGetConnection(new MBeanInfoAdditionalInitialization(ProcessType.DOMAIN_SERVER,new TestExtension()));
  ObjectName name=createObjectName(LEGACY_DOMAIN + ":subsystem=test");
  checkAttributeValues(connection,name,1,null,2,BigInteger.valueOf(3),BigDecimal.valueOf(4),false,new byte[]{5,6},7.0,"8",Collections.singletonList(9),10,ModelType.INT,"key1",11,"key2",12);
  Assert.assertNull(connection.getAttribute(name,"complex"));
  try {
    connection.setAttribute(name,new Attribute("roInt",101));
    Assert.fail("roInt not writable");
  }
 catch (  Exception expected) {
  }
  try {
    connection.setAttribute(name,new Attribute("int",102));
    Assert.fail("int not writable");
  }
 catch (  Exception expected) {
  }
  try {
    connection.setAttribute(name,new Attribute("undefinedInt",103));
    Assert.fail("undefinedInt not writable");
  }
 catch (  Exception expected) {
  }
  try {
    connection.setAttribute(name,new Attribute("bigdec",BigDecimal.valueOf(105)));
    Assert.fail("bigdec not writable");
  }
 catch (  Exception expected) {
  }
  try {
    connection.setAttribute(name,new Attribute("boolean",Boolean.TRUE));
    Assert.fail("boolean not writable");
  }
 catch (  Exception expected) {
  }
  try {
    connection.setAttribute(name,new Attribute("bytes",new byte[]{106,107}));
    Assert.fail("bytes not writable");
  }
 catch (  Exception expected) {
  }
  try {
    connection.setAttribute(name,new Attribute("double",108.0));
    Assert.fail("double not writable");
  }
 catch (  Exception expected) {
  }
  try {
    connection.setAttribute(name,new Attribute("string","109"));
    Assert.fail("string not writable");
  }
 catch (  Exception expected) {
  }
  try {
    connection.setAttribute(name,new Attribute("list",new Integer[]{110}));
    Assert.fail("list not writable");
  }
 catch (  Exception expected) {
  }
  try {
    connection.setAttribute(name,new Attribute("long",111L));
    Assert.fail("long not writable");
  }
 catch (  Exception expected) {
  }
  try {
    connection.setAttribute(name,new Attribute("type",ModelType.STRING.toString()));
    Assert.fail("type not writable");
  }
 catch (  Exception expected) {
  }
  try {
    Map<String,Integer> map=new HashMap<>();
    map.put("keyA",112);
    map.put("keyB",113);
    connection.setAttribute(name,new Attribute("map",map));
    Assert.fail("map not writable");
  }
 catch (  Exception expected) {
  }
  MBeanInfo info=connection.getMBeanInfo(name);
  CompositeType complexType=assertCast(CompositeType.class,findAttribute(info.getAttributes(),"complex").getOpenType());
  try {
    connection.setAttribute(name,new Attribute("complex",createComplexData(connection,complexType,1,BigDecimal.valueOf(2.0))));
    Assert.fail("Complex not writable");
  }
 catch (  Exception expected) {
  }
  checkAttributeValues(connection,name,1,null,2,BigInteger.valueOf(3),BigDecimal.valueOf(4),false,new byte[]{5,6},7.0,"8",Collections.singletonList(9),10,ModelType.INT,"key1",11,"key2",12);
  Assert.assertNull(connection.getAttribute(name,"complex"));
}
