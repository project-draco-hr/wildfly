{
  MBeanServerConnection connection=setupAndGetConnection(new MBeanInfoAdditionalInitialization(TYPE_STANDALONE,new TestExtension(true)));
  MBeanInfo info=connection.getMBeanInfo(EXPR_ROOT_NAME);
  Assert.assertNotNull(info);
  for (  MBeanAttributeInfo attr : info.getAttributes()) {
    Assert.assertFalse(attr.getName().contains("-"));
  }
  for (  MBeanOperationInfo op : info.getOperations()) {
    Assert.assertFalse(op.getName().contains("-"));
    for (    MBeanParameterInfo param : op.getSignature()) {
      Assert.assertFalse(param.getName().contains("-"));
    }
  }
  info=connection.getMBeanInfo(createObjectName(EXPR_DOMAIN + ":subsystem=jmx"));
  Assert.assertNotNull(info);
  Assert.assertEquals("The configuration of the JMX subsystem.",info.getDescription());
  info=connection.getMBeanInfo(createObjectName(EXPR_DOMAIN + ":subsystem=test"));
  Assert.assertNotNull(info);
  Assert.assertEquals("A test subsystem",info.getDescription());
  checkMBeanInfoAttributes(info,true,true);
  MBeanOperationInfo[] operations=info.getOperations();
  Assert.assertEquals(3,operations.length);
  OpenMBeanOperationInfo op=findOperation(operations,VoidOperationNoParams.OPERATION_JMX_NAME);
  Assert.assertEquals(VoidOperationNoParams.OPERATION_JMX_NAME,op.getName());
  Assert.assertEquals("Test1",op.getDescription());
  Assert.assertEquals(0,op.getSignature().length);
  Assert.assertEquals(Void.class.getName(),op.getReturnType());
  op=findOperation(operations,IntOperationWithParams.OPERATION_JMX_NAME);
  Assert.assertEquals(IntOperationWithParams.OPERATION_JMX_NAME,op.getName());
  Assert.assertEquals("Test2",op.getDescription());
  Assert.assertEquals(String.class.getName(),op.getReturnType());
  Assert.assertEquals(5,op.getSignature().length);
  Assert.assertEquals("param1",op.getSignature()[0].getName());
  Assert.assertEquals("Param1",op.getSignature()[0].getDescription());
  Assert.assertEquals(String.class.getName(),op.getSignature()[0].getType());
  Assert.assertEquals("param2",op.getSignature()[1].getName());
  Assert.assertEquals("Param2",op.getSignature()[1].getDescription());
  Assert.assertEquals(String[].class.getName(),op.getSignature()[1].getType());
  Assert.assertEquals("param3",op.getSignature()[2].getName());
  Assert.assertEquals("Param3",op.getSignature()[2].getDescription());
  Assert.assertEquals(TabularData.class.getName(),op.getSignature()[2].getType());
  assertMapType(assertCast(OpenMBeanParameterInfo.class,op.getSignature()[2]).getOpenType(),SimpleType.STRING,SimpleType.STRING);
  Assert.assertEquals("param4",op.getSignature()[3].getName());
  Assert.assertEquals("Param4",op.getSignature()[3].getDescription());
  Assert.assertEquals(String.class.getName(),op.getSignature()[3].getType());
  OpenMBeanParameterInfo parameterInfo=assertCast(OpenMBeanParameterInfo.class,op.getSignature()[3]);
  Assert.assertNull(parameterInfo.getDefaultValue());
  Assert.assertNull(parameterInfo.getMinValue());
  Assert.assertNull(parameterInfo.getMaxValue());
  Assert.assertEquals("param5",op.getSignature()[4].getName());
  Assert.assertEquals("Param5",op.getSignature()[4].getDescription());
  Assert.assertEquals(String.class.getName(),op.getSignature()[4].getType());
  parameterInfo=assertCast(OpenMBeanParameterInfo.class,op.getSignature()[4]);
  Assert.assertNull(parameterInfo.getDefaultValue());
  Assert.assertNull(parameterInfo.getLegalValues());
  Assert.assertNull(parameterInfo.getDefaultValue());
  Assert.assertNull(parameterInfo.getLegalValues());
  op=findOperation(operations,ComplexOperation.OPERATION_NAME);
  Assert.assertEquals(ComplexOperation.OPERATION_NAME,op.getName());
  Assert.assertEquals("Test3",op.getDescription());
  checkComplexTypeInfo(assertCast(CompositeType.class,op.getReturnOpenType()),true);
  Assert.assertEquals(1,op.getSignature().length);
  checkComplexTypeInfo(assertCast(CompositeType.class,assertCast(OpenMBeanParameterInfo.class,op.getSignature()[0]).getOpenType()),true);
}
