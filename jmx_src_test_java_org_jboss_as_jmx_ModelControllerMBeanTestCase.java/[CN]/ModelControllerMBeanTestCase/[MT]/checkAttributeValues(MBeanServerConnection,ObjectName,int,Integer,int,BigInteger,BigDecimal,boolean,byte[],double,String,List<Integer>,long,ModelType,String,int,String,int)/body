{
  Assert.assertEquals(roInt,assertCast(Integer.class,connection.getAttribute(name,"roInt")).intValue());
  if (undefinedInt == null) {
    Assert.assertNull(connection.getAttribute(name,"undefinedInt"));
  }
 else {
    Assert.assertEquals(undefinedInt,assertCast(Integer.class,connection.getAttribute(name,"undefinedInt")));
  }
  Assert.assertEquals(i,assertCast(Integer.class,connection.getAttribute(name,"int")).intValue());
  Assert.assertEquals(bigDecimal,assertCast(BigDecimal.class,connection.getAttribute(name,"bigdec")));
  Assert.assertEquals(bool,assertCast(Boolean.class,connection.getAttribute(name,"boolean")).booleanValue());
  assertEqualByteArray(assertCast(byte[].class,connection.getAttribute(name,"bytes")),bytes);
  Assert.assertEquals(dbl,assertCast(Double.class,connection.getAttribute(name,"double")));
  Assert.assertEquals(s,assertCast(String.class,connection.getAttribute(name,"string")));
  Integer[] listValue=assertCast(Integer[].class,connection.getAttribute(name,"list"));
  Assert.assertEquals(list.size(),listValue.length);
  for (int ctr=0; ctr < list.size(); ctr++) {
    Assert.assertEquals(list.get(ctr),listValue[ctr]);
  }
  Assert.assertEquals(lng,assertCast(Long.class,connection.getAttribute(name,"long")).longValue());
  Assert.assertEquals(type,ModelType.valueOf(assertCast(String.class,connection.getAttribute(name,"type"))));
  TabularData tabularData=assertCast(TabularData.class,connection.getAttribute(name,"map"));
  Assert.assertEquals(2,tabularData.size());
  Assert.assertEquals(tblValue1,assertCast(Integer.class,tabularData.get(new Object[]{tblKey1}).get("value")).intValue());
  Assert.assertEquals(tblValue2,assertCast(Integer.class,tabularData.get(new Object[]{tblKey2}).get("value")).intValue());
}
