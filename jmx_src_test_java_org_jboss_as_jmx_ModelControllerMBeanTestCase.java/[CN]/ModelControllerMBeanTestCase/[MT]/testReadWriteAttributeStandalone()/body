{
  MBeanServerConnection connection=setupAndGetConnection(new MBeanInfoAdditionalInitialization(ProcessType.STANDALONE_SERVER,new TestExtension()));
  ObjectName name=createObjectName(LEGACY_DOMAIN + ":subsystem=test");
  checkAttributeValues(connection,name,1,null,2,BigInteger.valueOf(3),BigDecimal.valueOf(4),false,new byte[]{5,6},7.0,"8",Collections.singletonList(Integer.valueOf(9)),10,ModelType.INT,"key1",11,"key2",12);
  Assert.assertNull(connection.getAttribute(name,"complex"));
  try {
    connection.setAttribute(name,new Attribute("roInt",101));
    Assert.fail("roInt not writable");
  }
 catch (  Exception expected) {
  }
  connection.setAttribute(name,new Attribute("int",102));
  connection.setAttribute(name,new Attribute("undefinedInt",103));
  connection.setAttribute(name,new Attribute("bigint",BigInteger.valueOf(104)));
  connection.setAttribute(name,new Attribute("bigdec",BigDecimal.valueOf(105)));
  connection.setAttribute(name,new Attribute("boolean",Boolean.TRUE));
  connection.setAttribute(name,new Attribute("bytes",new byte[]{106,107}));
  connection.setAttribute(name,new Attribute("double",108.0));
  connection.setAttribute(name,new Attribute("string","109"));
  connection.setAttribute(name,new Attribute("list",new Integer[]{110}));
  connection.setAttribute(name,new Attribute("long",111L));
  connection.setAttribute(name,new Attribute("type",ModelType.STRING.toString()));
  Map<String,Integer> map=new HashMap<String,Integer>();
  map.put("keyA",112);
  map.put("keyB",113);
  connection.setAttribute(name,new Attribute("map",map));
  MBeanInfo info=connection.getMBeanInfo(name);
  CompositeType complexType=assertCast(CompositeType.class,findAttribute(info.getAttributes(),"complex").getOpenType());
  connection.setAttribute(name,new Attribute("complex",createComplexData(connection,complexType,1,BigDecimal.valueOf(2.0))));
  checkAttributeValues(connection,name,1,103,102,BigInteger.valueOf(104),BigDecimal.valueOf(105),true,new byte[]{106,107},108.0,"109",Collections.singletonList(Integer.valueOf(110)),111,ModelType.STRING,"keyA",112,"keyB",113);
  CompositeData compositeData=assertCast(CompositeData.class,connection.getAttribute(name,"complex"));
  Assert.assertEquals(Integer.valueOf(1),compositeData.get("int-value"));
  Assert.assertEquals(BigDecimal.valueOf(2.0),compositeData.get("bigdecimal-value"));
}
