{
  MBeanServerConnection connection=setupAndGetConnection(new MBeanInfoAdditionalInitialization(new TestExtension()));
  ObjectName name=createObjectName(Constants.DOMAIN + ":subsystem=test");
  Assert.assertEquals(1,assertCast(Integer.class,connection.getAttribute(name,"roInt")).intValue());
  Assert.assertNull(connection.getAttribute(name,"undefinedInt"));
  Assert.assertEquals(2,assertCast(Integer.class,connection.getAttribute(name,"int")).intValue());
  Assert.assertEquals(BigDecimal.valueOf(4),assertCast(BigDecimal.class,connection.getAttribute(name,"bigdec")));
  Assert.assertFalse(assertCast(Boolean.class,connection.getAttribute(name,"boolean")));
  assertEqualByteArray(assertCast(byte[].class,connection.getAttribute(name,"bytes")),5,6);
  Assert.assertEquals(7.0,assertCast(Double.class,connection.getAttribute(name,"double")));
  Assert.assertEquals("8",assertCast(String.class,connection.getAttribute(name,"string")));
  Integer[] list=assertCast(Integer[].class,connection.getAttribute(name,"list"));
  Assert.assertEquals(1,list.length);
  Assert.assertEquals(Integer.valueOf(9),list[0]);
  Assert.assertEquals(10,assertCast(Long.class,connection.getAttribute(name,"long")).longValue());
  Assert.assertEquals(ModelType.INT,ModelType.valueOf(assertCast(String.class,connection.getAttribute(name,"type"))));
  TabularData tabularData=assertCast(TabularData.class,connection.getAttribute(name,"map"));
  Assert.assertEquals(2,tabularData.size());
  Assert.assertEquals(11,assertCast(Integer.class,tabularData.get(new Object[]{"key1"}).get("value")).intValue());
  Assert.assertEquals(12,assertCast(Integer.class,tabularData.get(new Object[]{"key2"}).get("value")).intValue());
  Assert.assertNull(connection.getAttribute(name,"complex"));
  try {
    connection.setAttribute(name,new Attribute("roInt",101));
    Assert.fail("roInt not writable");
  }
 catch (  Exception expected) {
  }
  connection.setAttribute(name,new Attribute("int",102));
  connection.setAttribute(name,new Attribute("undefinedInt",103));
  connection.setAttribute(name,new Attribute("bigdec",BigDecimal.valueOf(105)));
  connection.setAttribute(name,new Attribute("boolean",Boolean.TRUE));
  connection.setAttribute(name,new Attribute("bytes",new byte[]{106,107}));
  connection.setAttribute(name,new Attribute("double",108.0));
  connection.setAttribute(name,new Attribute("string","109"));
  connection.setAttribute(name,new Attribute("list",new Integer[]{110}));
  connection.setAttribute(name,new Attribute("long",111L));
  connection.setAttribute(name,new Attribute("type",ModelType.STRING.toString()));
  Map<String,Integer> map=new HashMap<String,Integer>();
  map.put("keyA",112);
  map.put("keyB",113);
  connection.setAttribute(name,new Attribute("map",map));
  MBeanInfo info=connection.getMBeanInfo(name);
  CompositeType complexType=assertCast(CompositeType.class,findAttribute(info.getAttributes(),"complex").getOpenType());
  connection.setAttribute(name,new Attribute("complex",createComplexData(connection,complexType,1,BigDecimal.valueOf(2.0))));
  Assert.assertEquals(102,assertCast(Integer.class,connection.getAttribute(name,"int")).intValue());
  Assert.assertEquals(103,assertCast(Integer.class,connection.getAttribute(name,"undefinedInt")).intValue());
  Assert.assertEquals(BigDecimal.valueOf(105),assertCast(BigDecimal.class,connection.getAttribute(name,"bigdec")));
  Assert.assertTrue(assertCast(Boolean.class,connection.getAttribute(name,"boolean")));
  assertEqualByteArray(assertCast(byte[].class,connection.getAttribute(name,"bytes")),106,107);
  Assert.assertEquals(108.0,assertCast(Double.class,connection.getAttribute(name,"double")));
  Assert.assertEquals("109",assertCast(String.class,connection.getAttribute(name,"string")));
  list=assertCast(Integer[].class,connection.getAttribute(name,"list"));
  Assert.assertEquals(1,list.length);
  Assert.assertEquals(Integer.valueOf(110),list[0]);
  Assert.assertEquals(111,assertCast(Long.class,connection.getAttribute(name,"long")).longValue());
  Assert.assertEquals(ModelType.STRING,ModelType.valueOf(assertCast(String.class,connection.getAttribute(name,"type"))));
  tabularData=assertCast(TabularData.class,connection.getAttribute(name,"map"));
  Assert.assertEquals(2,tabularData.size());
  Assert.assertEquals(112,assertCast(Integer.class,tabularData.get(new Object[]{"keyA"}).get("value")).intValue());
  Assert.assertEquals(113,assertCast(Integer.class,tabularData.get(new Object[]{"keyB"}).get("value")).intValue());
  CompositeData compositeData=assertCast(CompositeData.class,connection.getAttribute(name,"complex"));
  Assert.assertEquals(Integer.valueOf(1),compositeData.get("int-value"));
  Assert.assertEquals(BigDecimal.valueOf(2.0),compositeData.get("bigdecimal-value"));
}
