{
  MBeanServerConnection connection=setupAndGetConnection(new MBeanInfoAdditionalInitialization(TYPE_STANDALONE,new TestExtension(true)));
  ObjectName name=createObjectName(EXPR_DOMAIN + ":subsystem=test");
  checkAttributeValues(connection,name,"1",null,"2","3","4","false",new byte[]{5,6},"7.0","8",Collections.singletonList("9"),"10",ModelType.INT.toString(),"key1","11","key2","12");
  Assert.assertNull(connection.getAttribute(name,"complex"));
  try {
    connection.setAttribute(name,new Attribute("roInt",101));
    Assert.fail("roInt not writable");
  }
 catch (  Exception expected) {
  }
  connection.setAttribute(name,new Attribute("int","${should.not.exist!!!!!:102}"));
  connection.setAttribute(name,new Attribute("undefinedInt","${should.not.exist!!!!!:103}"));
  connection.setAttribute(name,new Attribute("bigint","${should.not.exist!!!!!:104}"));
  connection.setAttribute(name,new Attribute("bigdec","${should.not.exist!!!!!:105}"));
  connection.setAttribute(name,new Attribute("boolean","${should.not.exist!!!!!:true}"));
  connection.setAttribute(name,new Attribute("bytes",new byte[]{106,107}));
  connection.setAttribute(name,new Attribute("double","${should.not.exist!!!!!:108.0}"));
  connection.setAttribute(name,new Attribute("string","${should.not.exist!!!!!:109}"));
  connection.setAttribute(name,new Attribute("list",new String[]{"${should.not.exist!!!!!:110}"}));
  connection.setAttribute(name,new Attribute("long","${should.not.exist!!!!!:111}"));
  connection.setAttribute(name,new Attribute("type","${should.not.exist!!!!!:STRING}"));
  Map<String,String> map=new HashMap<String,String>();
  map.put("keyA","${should.not.exist!!!!!:112}");
  map.put("keyB","${should.not.exist!!!!!:113}");
  connection.setAttribute(name,new Attribute("map",map));
  MBeanInfo info=connection.getMBeanInfo(name);
  CompositeType complexType=assertCast(CompositeType.class,findAttribute(info.getAttributes(),"complex").getOpenType());
  connection.setAttribute(name,new Attribute("complex",createComplexData(connection,complexType,"${should.not.exist!!!!!:1}","${should.not.exist!!!!!:2.0}")));
  checkAttributeValues(connection,name,"1","${should.not.exist!!!!!:103}","${should.not.exist!!!!!:102}","${should.not.exist!!!!!:104}","${should.not.exist!!!!!:105}","${should.not.exist!!!!!:true}",new byte[]{106,107},"${should.not.exist!!!!!:108.0}","${should.not.exist!!!!!:109}",Collections.singletonList("${should.not.exist!!!!!:110}"),"${should.not.exist!!!!!:111}","${should.not.exist!!!!!:STRING}","keyA","${should.not.exist!!!!!:112}","keyB","${should.not.exist!!!!!:113}");
  CompositeData compositeData=assertCast(CompositeData.class,connection.getAttribute(name,"complex"));
  Assert.assertEquals("${should.not.exist!!!!!:1}",compositeData.get("int-value"));
  Assert.assertEquals("${should.not.exist!!!!!:2.0}",compositeData.get("bigdecimal-value"));
}
