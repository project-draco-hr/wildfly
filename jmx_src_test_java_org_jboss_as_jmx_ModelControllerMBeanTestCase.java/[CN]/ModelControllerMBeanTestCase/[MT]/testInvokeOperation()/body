{
  MBeanServerConnection connection=setupAndGetConnection(new MBeanInfoAdditionalInitialization(new TestExtension()));
  ObjectName name=createObjectName(Constants.DOMAIN + ":subsystem=test");
  VoidOperationNoParams.INSTANCE.invoked=false;
  Assert.assertNull(connection.invoke(name,VoidOperationNoParams.OPERATION_JMX_NAME,new Object[0],new String[0]));
  Assert.assertTrue(VoidOperationNoParams.INSTANCE.invoked);
  VoidOperationNoParams.INSTANCE.invoked=false;
  Assert.assertNull(connection.invoke(name,VoidOperationNoParams.OPERATION_JMX_NAME,null,null));
  Assert.assertTrue(VoidOperationNoParams.INSTANCE.invoked);
  String result=assertCast(String.class,connection.invoke(name,IntOperationWithParams.OPERATION_JMX_NAME,new Object[]{100L,new String[]{"A"},Collections.singletonMap("test",3)},new String[]{Long.class.getName(),String[].class.getName(),Map.class.getName()}));
  Assert.assertEquals("A105",result);
  MBeanInfo info=connection.getMBeanInfo(name);
  CompositeType complexType=assertCast(CompositeType.class,findAttribute(info.getAttributes(),"complex").getOpenType());
  CompositeData complexData=createComplexData(connection,complexType,5,BigDecimal.valueOf(10));
  Assert.assertEquals(complexData,assertCast(CompositeData.class,connection.invoke(name,ComplexOperation.OPERATION_NAME,new Object[]{complexData},new String[]{CompositeData.class.getName()})));
}
