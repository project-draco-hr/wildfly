{
  Assert.assertEquals(roInt,assertCast(String.class,connection.getAttribute(name,"roInt")));
  if (undefinedInt == null) {
    Assert.assertNull(connection.getAttribute(name,"undefinedInt"));
  }
 else {
    Assert.assertEquals(undefinedInt,assertCast(String.class,connection.getAttribute(name,"undefinedInt")));
  }
  Assert.assertEquals(i,assertCast(String.class,connection.getAttribute(name,"int")));
  Assert.assertEquals(bigInt,assertCast(String.class,connection.getAttribute(name,"bigint")));
  Assert.assertEquals(bigDecimal,assertCast(String.class,connection.getAttribute(name,"bigdec")));
  Assert.assertEquals(bool,assertCast(String.class,connection.getAttribute(name,"boolean")));
  assertEqualByteArray(bytes,assertCast(byte[].class,connection.getAttribute(name,"bytes")));
  Assert.assertEquals(dbl,assertCast(String.class,connection.getAttribute(name,"double")));
  Assert.assertEquals(s,assertCast(String.class,connection.getAttribute(name,"string")));
  String[] listValue=assertCast(String[].class,connection.getAttribute(name,"list"));
  Assert.assertEquals(list.size(),listValue.length);
  for (int ctr=0; ctr < list.size(); ctr++) {
    Assert.assertEquals(list.get(ctr),listValue[ctr]);
  }
  Assert.assertEquals(lng,assertCast(String.class,connection.getAttribute(name,"long")));
  Assert.assertEquals(type,assertCast(String.class,connection.getAttribute(name,"type")));
  TabularData tabularData=assertCast(TabularData.class,connection.getAttribute(name,"map"));
  Assert.assertEquals(2,tabularData.size());
  Assert.assertEquals(tblValue1,assertCast(String.class,tabularData.get(new Object[]{tblKey1}).get("value")));
  Assert.assertEquals(tblValue2,assertCast(String.class,tabularData.get(new Object[]{tblKey2}).get("value")));
}
