{
  MBeanAttributeInfo[] attributes=info.getAttributes();
  Assert.assertEquals(14,attributes.length);
  assertAttributeDescription(attributes[0],"roInt",expressions ? String.class.getName() : Integer.class.getName(),"A read-only int",true,false);
  assertAttributeDescription(attributes[1],"undefinedInt",expressions ? String.class.getName() : Integer.class.getName(),"A read-only int",true,writable);
  assertAttributeDescription(attributes[2],"int",expressions ? String.class.getName() : Integer.class.getName(),"A int",true,writable);
  assertAttributeDescription(attributes[3],"bigint",expressions ? String.class.getName() : BigInteger.class.getName(),"A big int",true,writable);
  assertAttributeDescription(attributes[4],"bigdec",expressions ? String.class.getName() : BigDecimal.class.getName(),"A big dec",true,writable);
  assertAttributeDescription(attributes[5],"boolean",expressions ? String.class.getName() : Boolean.class.getName(),"A boolean",true,writable);
  assertAttributeDescription(attributes[6],"bytes",byte[].class.getName(),"A bytes",true,writable);
  assertAttributeDescription(attributes[7],"double",expressions ? String.class.getName() : Double.class.getName(),"A double",true,writable);
  assertAttributeDescription(attributes[8],"string",expressions ? String.class.getName() : String.class.getName(),"A string",true,writable);
  assertAttributeDescription(attributes[9],"list",expressions ? String[].class.getName() : Integer[].class.getName(),"A list",true,writable);
  assertAttributeDescription(attributes[10],"long",expressions ? String.class.getName() : Long.class.getName(),"A long",true,writable);
  assertAttributeDescription(attributes[11],"type",String.class.getName(),"A type",true,writable);
  assertAttributeDescription(attributes[12],"map",TabularData.class.getName(),"A map",true,writable);
  assertMapType(assertCast(OpenMBeanAttributeInfo.class,attributes[12]).getOpenType(),SimpleType.STRING,expressions ? SimpleType.STRING : SimpleType.INTEGER);
  checkComplexTypeInfo(assertCast(CompositeType.class,assertCast(OpenMBeanAttributeInfo.class,attributes[13]).getOpenType()),expressions);
}
