{
  this.entity=entity;
  this.fieldName=fieldName;
  fieldType=loadFieldType(entity,fieldName);
  columnName=fieldName;
  jdbcType=Integer.MIN_VALUE;
  sqlType=null;
  readOnly=entity.isReadOnly();
  readTimeOut=entity.getReadTimeOut();
  genIndex=false;
  unknownPkField=false;
  autoIncrement=false;
  relationTableField=false;
  checkDirtyAfterGet=CHECK_DIRTY_AFTER_GET_NOT_PRESENT;
  stateFactory=null;
  String pkFieldName=entity.getPrimaryKeyFieldName();
  if (pkFieldName != null) {
    primaryKeyField=null;
    if (pkFieldName.equals(fieldName)) {
      if (!entity.getPrimaryKeyClass().equals(fieldType)) {
        throw new RuntimeException("primkey-field must be the same type as prim-key-class");
      }
      primaryKeyMember=true;
    }
 else {
      primaryKeyMember=false;
    }
  }
 else {
    Field[] fields=entity.getPrimaryKeyClass().getFields();
    boolean pkMember=false;
    Field pkField=null;
    for (int i=0; i < fields.length; i++) {
      final Field field=fields[i];
      if (field.getName().equals(fieldName)) {
        if (!field.getType().equals(fieldType)) {
          throw new RuntimeException("Field " + fieldName + " in prim-key-class must be of the same type.");
        }
        if (pkField != null) {
          if (field.getDeclaringClass().equals(entity.getPrimaryKeyClass())) {
            pkField=field;
          }
          Logger.getLogger(getClass().getName() + '.' + entity.getName()).warn("PK field " + fieldName + " was found more than once in class hierarchy of "+ entity.getPrimaryKeyClass()+ ". Will use the one from "+ pkField.getDeclaringClass().getName());
        }
 else {
          pkField=field;
        }
        pkMember=true;
      }
    }
    primaryKeyMember=pkMember;
    primaryKeyField=pkField;
  }
  notNull=fieldType.isPrimitive() || primaryKeyMember;
}
