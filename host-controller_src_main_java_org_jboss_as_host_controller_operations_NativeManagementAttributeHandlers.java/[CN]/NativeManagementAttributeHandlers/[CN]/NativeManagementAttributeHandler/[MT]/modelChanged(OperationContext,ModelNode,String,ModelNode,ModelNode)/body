{
  final Resource resource=context.readResource(PathAddress.EMPTY_ADDRESS);
  final ModelNode subModel=resource.getModel();
  if (!newValue.equals(currentValue)) {
    context.addStep(new OperationStepHandler(){
      @Override public void execute(      final OperationContext context,      final ModelNode operation) throws OperationFailedException {
        final String interfaceName=subModel.require(INTERFACE).asString();
        final int port=subModel.require(ModelDescriptionConstants.PORT).asInt();
        context.removeService(RemotingServices.AUTHENTICATION_PROVIDER);
        context.removeService(RemotingServices.OPTION_MAP);
        context.removeService(RemotingServices.serverServiceName(RemotingServices.MANAGEMENT_CHANNEL,port));
        final ServiceTarget serviceTarget=context.getServiceTarget();
        ServiceName realmSvcName=null;
        if (subModel.hasDefined(SECURITY_REALM)) {
          realmSvcName=SecurityRealmService.BASE_SERVICE_NAME.append(subModel.require(SECURITY_REALM).asString());
        }
        hostControllerInfo.setNativeManagementInterface(interfaceName);
        hostControllerInfo.setNativeManagementPort(port);
        hostControllerInfo.setNativeManagementSecurityRealm(realmSvcName == null ? null : realmSvcName.getSimpleName());
        List<ServiceController<?>> list=new ArrayList<ServiceController<?>>();
        final ServiceVerificationHandler verificationHandler=new ServiceVerificationHandler();
        RemotingServices.installDomainConnectorServices(serviceTarget,getNativeManagementNetworkInterfaceBinding(),port,realmSvcName,verificationHandler,list);
        context.addStep(verificationHandler,OperationContext.Stage.VERIFY);
        context.completeStep();
      }
    }
,OperationContext.Stage.RUNTIME);
  }
  context.completeStep();
}
