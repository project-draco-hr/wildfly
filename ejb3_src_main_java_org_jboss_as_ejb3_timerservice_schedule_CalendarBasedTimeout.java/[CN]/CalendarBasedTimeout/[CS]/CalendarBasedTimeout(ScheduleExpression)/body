{
  if (schedule == null) {
    throw EJB3_TIMER_LOGGER.invalidScheduleExpression(this.getClass().getName());
  }
  this.nullCheckScheduleAttributes(schedule);
  this.scheduleExpression=this.clone(schedule);
  this.second=new Second(schedule.getSecond());
  this.minute=new Minute(schedule.getMinute());
  this.hour=new Hour(schedule.getHour());
  this.dayOfWeek=new DayOfWeek(schedule.getDayOfWeek());
  this.dayOfMonth=new DayOfMonth(schedule.getDayOfMonth());
  this.month=new Month(schedule.getMonth());
  this.year=new Year(schedule.getYear());
  String timezoneId=schedule.getTimezone();
  if (timezoneId != null && !(timezoneId=timezoneId.trim()).isEmpty()) {
    String[] availableTimeZoneIDs=TimeZone.getAvailableIDs();
    if (availableTimeZoneIDs != null && Arrays.asList(availableTimeZoneIDs).contains(timezoneId)) {
      this.timezone=TimeZone.getTimeZone(timezoneId);
    }
 else {
      this.timezone=TimeZone.getDefault();
      EJB3_TIMER_LOGGER.unknownTimezoneId(timezoneId,this.timezone.getID());
    }
  }
 else {
    this.timezone=TimeZone.getDefault();
  }
  setFirstTimeout();
}
