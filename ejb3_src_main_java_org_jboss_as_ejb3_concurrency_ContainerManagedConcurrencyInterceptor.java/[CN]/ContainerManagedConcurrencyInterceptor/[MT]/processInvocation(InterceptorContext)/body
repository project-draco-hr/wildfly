{
  final InvocationContext invocationContext=context.getInvocationContext();
  LockableComponent lockableComponent=this.getLockableComponent();
  Method method=invocationContext.getMethod();
  if (method == null) {
    throw EjbLogger.ROOT_LOGGER.invocationNotApplicableForMethodInvocation(invocationContext);
  }
  Method invokedMethod=viewMethodToComponentMethodMap.get(method);
  if (invokedMethod == null) {
    invokedMethod=method;
  }
  Lock lock=getLock(lockableComponent,invokedMethod);
  AccessTimeoutDetails defaultAccessTimeout=lockableComponent.getDefaultAccessTimeout();
  long time=defaultAccessTimeout.getValue();
  TimeUnit unit=defaultAccessTimeout.getTimeUnit();
  AccessTimeoutDetails accessTimeoutOnMethod=lockableComponent.getAccessTimeout(invokedMethod);
  if (accessTimeoutOnMethod != null) {
    if (accessTimeoutOnMethod.getValue() < 0) {
      if (ROOT_LOGGER.isDebugEnabled()) {
        ROOT_LOGGER.debug("Ignoring a negative @AccessTimeout value: " + accessTimeoutOnMethod.getValue() + " and timeout unit: "+ accessTimeoutOnMethod.getTimeUnit().name()+ ". Will default to timeout value: "+ defaultAccessTimeout.getValue()+ " and timeout unit: "+ defaultAccessTimeout.getTimeUnit().name());
      }
    }
 else {
      time=accessTimeoutOnMethod.getValue();
      unit=accessTimeoutOnMethod.getTimeUnit();
    }
  }
  boolean success=lock.tryLock(time,unit);
  if (!success) {
    throw EjbLogger.ROOT_LOGGER.concurrentAccessTimeoutException(lockableComponent.getComponentName(),time + unit.name());
  }
  try {
    return invocationContext.proceed();
  }
  finally {
    lock.unlock();
  }
}
