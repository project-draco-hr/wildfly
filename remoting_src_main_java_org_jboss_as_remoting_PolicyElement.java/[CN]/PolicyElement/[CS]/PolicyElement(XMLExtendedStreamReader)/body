{
  if (reader.getAttributeCount() > 0) {
    throw ParseUtils.unexpectedAttribute(reader,0);
  }
  final EnumSet<Element> visited=EnumSet.noneOf(Element.class);
  while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
switch (Namespace.forUri(reader.getNamespaceURI())) {
case REMOTING_1_0:
{
        final Element element=Element.forName(reader.getLocalName());
        if (visited.contains(element)) {
          throw ParseUtils.unexpectedElement(reader);
        }
        visited.add(element);
switch (element) {
case FORWARD_SECRECY:
{
            forwardSecrecy=Boolean.valueOf(ParseUtils.readBooleanAttributeElement(reader,"value"));
            break;
          }
case NO_ACTIVE:
{
          noActive=Boolean.valueOf(ParseUtils.readBooleanAttributeElement(reader,"value"));
          break;
        }
case NO_ANONYMOUS:
{
        noAnonymous=Boolean.valueOf(ParseUtils.readBooleanAttributeElement(reader,"value"));
        break;
      }
case NO_DICTIONARY:
{
      noDictionary=Boolean.valueOf(ParseUtils.readBooleanAttributeElement(reader,"value"));
      break;
    }
case NO_PLAINTEXT:
{
    noPlainText=Boolean.valueOf(ParseUtils.readBooleanAttributeElement(reader,"value"));
    break;
  }
case PASS_CREDENTIALS:
{
  passCredentials=Boolean.valueOf(ParseUtils.readBooleanAttributeElement(reader,"value"));
  break;
}
default :
throw ParseUtils.unexpectedElement(reader);
}
break;
}
default :
throw ParseUtils.unexpectedElement(reader);
}
}
}
