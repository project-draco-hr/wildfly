{
  BundleContext context=bundle.getBundleContext();
  ServiceReference<HttpService> sref=FrameworkUtils.waitForServiceReference(context,HttpService.class);
  HttpService httpService=context.getService(sref);
  try {
    assertNotAvailable("/servlet1");
    assertNotAvailable("/servlet2");
    final HttpContext defaultContext=httpService.createDefaultHttpContext();
    HttpContext httpContext=new HttpContext(){
      @Override public boolean handleSecurity(      HttpServletRequest request,      HttpServletResponse response) throws IOException {
        String value=request.getParameter("param");
        if (!"allow".equals(value)) {
          throw new SecurityException("Not allowed");
        }
        return defaultContext.handleSecurity(request,response);
      }
      @Override public URL getResource(      String name){
        return defaultContext.getResource(name);
      }
      @Override public String getMimeType(      String name){
        return defaultContext.getMimeType(name);
      }
    }
;
    httpService.registerServlet("/servlet1",new HttpServiceServlet(bundle),null,httpContext);
    httpService.registerServlet("/servlet2",new HttpServiceServlet(bundle),null,httpContext);
    Assert.assertEquals("Hello: allow",performCall("/servlet1?test=param&param=allow"));
    try {
      performCall("/servlet1?test=param&param=deny");
      Assert.fail("IOException expected");
    }
 catch (    IOException ex) {
    }
    Assert.assertEquals("Hello: allow",performCall("/servlet2?test=param&param=allow"));
    try {
      performCall("/servlet2?test=param&param=deny");
      Assert.fail("IOException expected");
    }
 catch (    IOException ex) {
    }
    httpService.unregister("/servlet1");
    httpService.unregister("/servlet2");
  }
  finally {
    context.ungetService(sref);
  }
}
