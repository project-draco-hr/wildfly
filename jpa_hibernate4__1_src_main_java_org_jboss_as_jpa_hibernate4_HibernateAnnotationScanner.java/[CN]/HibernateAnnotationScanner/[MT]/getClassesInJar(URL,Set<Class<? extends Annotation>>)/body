{
  if (jarToScan == null) {
    throw JPA_LOGGER.nullVar("jarToScan");
  }
  JPA_LOGGER.tracef("getClassesInJar url=%s annotations=%s",jarToScan.getPath(),annotationsToLookFor);
  PersistenceUnitMetadata pu=PERSISTENCE_UNIT_METADATA_TLS.get();
  if (pu == null) {
    throw JPA_LOGGER.missingPersistenceUnitMetadata();
  }
  if (pu.getAnnotationIndex() != null) {
    Index index=getJarFileIndex(jarToScan,pu);
    if (index == null) {
      JPA_LOGGER.tracef("No classes to scan for annotations in jar '%s' (jars with classes '%s')",jarToScan,pu.getAnnotationIndex().keySet());
      return new HashSet<Class<?>>();
    }
    if (annotationsToLookFor == null) {
      throw JPA_LOGGER.nullVar("annotationsToLookFor");
    }
    if (annotationsToLookFor.size() == 0) {
      throw JPA_LOGGER.emptyParameter("annotationsToLookFor");
    }
    Set<Class<?>> result=new HashSet<Class<?>>();
    for (    Class<? extends Annotation> annClass : annotationsToLookFor) {
      DotName annotation=DotName.createSimple(annClass.getName());
      List<AnnotationInstance> classesWithAnnotation=index.getAnnotations(annotation);
      Set<Class<?>> classesForAnnotation=new HashSet<Class<?>>();
      for (      AnnotationInstance annotationInstance : classesWithAnnotation) {
        if (annotationInstance.target() instanceof ClassInfo) {
          String className=annotationInstance.target().toString();
          try {
            JPA_LOGGER.tracef("getClassesInJar found class %s with annotation %s",className,annClass.getName());
            Class<?> clazz=pu.getNewTempClassLoader().loadClass(className);
            result.add(clazz);
            classesForAnnotation.add(clazz);
          }
 catch (          ClassNotFoundException e) {
            JPA_LOGGER.cannotLoadEntityClass(e,className);
          }
catch (          NoClassDefFoundError e) {
            JPA_LOGGER.cannotLoadEntityClass(e,className);
          }
        }
      }
      cacheClasses(pu,jarToScan,annClass,classesForAnnotation);
    }
    return result;
  }
 else {
    return getCachedClasses(pu,jarToScan,annotationsToLookFor);
  }
}
