{
  final ModelNode operationAddress=address.clone();
  operationAddress.add(MANAGEMENT_INTERFACE,http ? HTTP_INTERFACE : NATIVE_INTERFACE);
  final ModelNode addOp=Util.getEmptyOperation(ADD,operationAddress);
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    final String value=reader.getAttributeValue(i);
    if (!isNoNamespaceAttribute(reader,i)) {
      throw unexpectedAttribute(reader,i);
    }
 else {
      final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case SECURITY_REALM:
{
          if (http) {
            HttpManagementResourceDefinition.SECURITY_REALM.parseAndSetParameter(value,addOp,reader);
          }
 else {
            NativeManagementResourceDefinition.SECURITY_REALM.parseAndSetParameter(value,addOp,reader);
          }
          break;
        }
default :
      throw unexpectedAttribute(reader,i);
  }
}
}
while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
requireNamespace(reader,expectedNs);
final Element element=Element.forName(reader.getLocalName());
switch (element) {
case SOCKET:
  if (http) {
    parseHttpManagementSocket(reader,addOp);
  }
 else {
    parseNativeManagementSocket(reader,addOp);
  }
break;
case SOCKET_BINDING:
if (http) {
parseHttpManagementSocketBinding(reader,addOp);
}
 else {
parseNativeManagementSocketBinding(reader,addOp);
}
break;
default :
throw unexpectedElement(reader);
}
}
list.add(addOp);
}
