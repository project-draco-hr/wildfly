{
  final Set<String> uniqueBindingNames=new HashSet<String>();
  ModelNode op=Util.getEmptyOperation(ADD,null);
  String socketBindingGroupName=null;
  final EnumSet<Attribute> required=EnumSet.of(Attribute.NAME,Attribute.DEFAULT_INTERFACE);
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    final String value=reader.getAttributeValue(i);
    if (!isNoNamespaceAttribute(reader,i)) {
      throw unexpectedAttribute(reader,i);
    }
    final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case NAME:
{
        socketBindingGroupName=value;
        required.remove(attribute);
        break;
      }
case DEFAULT_INTERFACE:
{
      SocketBindingGroupResourceDefinition.DEFAULT_INTERFACE.parseAndSetParameter(value,op,reader);
      required.remove(attribute);
      if (op.get(SocketBindingGroupResourceDefinition.DEFAULT_INTERFACE.getName()).getType() != ModelType.EXPRESSION && !interfaces.contains(value)) {
        throw ControllerLogger.ROOT_LOGGER.unknownInterface(value,Attribute.DEFAULT_INTERFACE.getLocalName(),Element.INTERFACES.getLocalName(),reader.getLocation());
      }
      break;
    }
case PORT_OFFSET:
{
    SocketBindingGroupResourceDefinition.PORT_OFFSET.parseAndSetParameter(value,op,reader);
    break;
  }
default :
throw ParseUtils.unexpectedAttribute(reader,i);
}
}
if (!required.isEmpty()) {
throw missingRequired(reader,required);
}
ModelNode groupAddress=address.clone().add(SOCKET_BINDING_GROUP,socketBindingGroupName);
op.get(OP_ADDR).set(groupAddress);
updates.add(op);
while (reader.nextTag() != END_ELEMENT) {
requireNamespace(reader,expectedNs);
final Element element=Element.forName(reader.getLocalName());
switch (element) {
case SOCKET_BINDING:
{
final String bindingName=parseSocketBinding(reader,interfaces,groupAddress,updates);
if (!uniqueBindingNames.add(bindingName)) {
  throw ControllerLogger.ROOT_LOGGER.alreadyDeclared(Element.SOCKET_BINDING.getLocalName(),bindingName,Element.SOCKET_BINDING_GROUP.getLocalName(),socketBindingGroupName,reader.getLocation());
}
break;
}
default :
throw unexpectedElement(reader);
}
}
}
