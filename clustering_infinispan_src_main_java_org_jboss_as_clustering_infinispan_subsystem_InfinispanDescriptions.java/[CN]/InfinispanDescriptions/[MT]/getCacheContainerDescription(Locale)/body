{
  ResourceBundle resources=getResources(locale);
  String keyPrefix="infinispan.container";
  final ModelNode container=createDescription(resources,keyPrefix);
  for (  AttributeDefinition attr : CommonAttributes.CACHE_CONTAINER_ATTRIBUTES) {
    attr.addResourceAttributeDescription(resources,keyPrefix,container);
  }
  ALIAS.addResourceAttributeDescription(resources,keyPrefix,container).get(ModelDescriptionConstants.VALUE_TYPE).set(ModelType.STRING);
  container.get(CHILDREN,ModelKeys.SINGLETON,DESCRIPTION).set(resources.getString(keyPrefix + ".singleton"));
  container.get(CHILDREN,ModelKeys.SINGLETON,MIN_OCCURS).set(0);
  container.get(CHILDREN,ModelKeys.SINGLETON,MAX_OCCURS).set(1);
  container.get(CHILDREN,ModelKeys.SINGLETON,ALLOWED).setEmptyList().add("transport");
  container.get(CHILDREN,ModelKeys.SINGLETON,MODEL_DESCRIPTION);
  container.get(CHILDREN,ModelKeys.LOCAL_CACHE,DESCRIPTION).set(resources.getString(keyPrefix + ".local-cache"));
  container.get(CHILDREN,ModelKeys.LOCAL_CACHE,MIN_OCCURS).set(0);
  container.get(CHILDREN,ModelKeys.LOCAL_CACHE,MAX_OCCURS).set(Integer.MAX_VALUE);
  container.get(CHILDREN,ModelKeys.LOCAL_CACHE,MODEL_DESCRIPTION);
  container.get(CHILDREN,ModelKeys.INVALIDATION_CACHE,DESCRIPTION).set(resources.getString(keyPrefix + ".invalidation-cache"));
  container.get(CHILDREN,ModelKeys.INVALIDATION_CACHE,MIN_OCCURS).set(0);
  container.get(CHILDREN,ModelKeys.INVALIDATION_CACHE,MAX_OCCURS).set(Integer.MAX_VALUE);
  container.get(CHILDREN,ModelKeys.INVALIDATION_CACHE,MODEL_DESCRIPTION);
  container.get(CHILDREN,ModelKeys.REPLICATED_CACHE,DESCRIPTION).set(resources.getString(keyPrefix + ".replicated-cache"));
  container.get(CHILDREN,ModelKeys.REPLICATED_CACHE,MIN_OCCURS).set(0);
  container.get(CHILDREN,ModelKeys.REPLICATED_CACHE,MAX_OCCURS).set(Integer.MAX_VALUE);
  container.get(CHILDREN,ModelKeys.REPLICATED_CACHE,MODEL_DESCRIPTION);
  container.get(CHILDREN,ModelKeys.DISTRIBUTED_CACHE,DESCRIPTION).set(resources.getString(keyPrefix + ".distributed-cache"));
  container.get(CHILDREN,ModelKeys.DISTRIBUTED_CACHE,MIN_OCCURS).set(0);
  container.get(CHILDREN,ModelKeys.DISTRIBUTED_CACHE,MAX_OCCURS).set(Integer.MAX_VALUE);
  container.get(CHILDREN,ModelKeys.DISTRIBUTED_CACHE,MODEL_DESCRIPTION);
  return container;
}
