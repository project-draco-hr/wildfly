{
  ResourceBundle resources=getResources(locale);
  ModelNode description=createCacheContainerOperationDescription(ModelDescriptionConstants.ADD,resources);
  description.get(ModelDescriptionConstants.REQUEST_PROPERTIES,ModelKeys.DEFAULT_CACHE,ModelDescriptionConstants.TYPE).set(ModelType.STRING);
  description.get(ModelDescriptionConstants.REQUEST_PROPERTIES,ModelKeys.DEFAULT_CACHE,ModelDescriptionConstants.DESCRIPTION).set(resources.getString("infinispan.container.default-cache"));
  description.get(ModelDescriptionConstants.REQUEST_PROPERTIES,ModelKeys.LISTENER_EXECUTOR,ModelDescriptionConstants.TYPE).set(ModelType.STRING);
  description.get(ModelDescriptionConstants.REQUEST_PROPERTIES,ModelKeys.LISTENER_EXECUTOR,ModelDescriptionConstants.DESCRIPTION).set(resources.getString("infinispan.container.listener-executor"));
  description.get(ModelDescriptionConstants.REQUEST_PROPERTIES,ModelKeys.LISTENER_EXECUTOR,ModelDescriptionConstants.REQUIRED).set(false);
  description.get(ModelDescriptionConstants.REQUEST_PROPERTIES,ModelKeys.EVICTION_EXECUTOR,ModelDescriptionConstants.TYPE).set(ModelType.STRING);
  description.get(ModelDescriptionConstants.REQUEST_PROPERTIES,ModelKeys.EVICTION_EXECUTOR,ModelDescriptionConstants.DESCRIPTION).set(resources.getString("infinispan.container.eviction-executor"));
  description.get(ModelDescriptionConstants.REQUEST_PROPERTIES,ModelKeys.EVICTION_EXECUTOR,ModelDescriptionConstants.REQUIRED).set(false);
  description.get(ModelDescriptionConstants.REQUEST_PROPERTIES,ModelKeys.REPLICATION_QUEUE_EXECUTOR,ModelDescriptionConstants.TYPE).set(ModelType.STRING);
  description.get(ModelDescriptionConstants.REQUEST_PROPERTIES,ModelKeys.REPLICATION_QUEUE_EXECUTOR,ModelDescriptionConstants.DESCRIPTION).set(resources.getString("infinispan.container.replication-queue-executor"));
  description.get(ModelDescriptionConstants.REQUEST_PROPERTIES,ModelKeys.REPLICATION_QUEUE_EXECUTOR,ModelDescriptionConstants.REQUIRED).set(false);
  description.get(ModelDescriptionConstants.REQUEST_PROPERTIES,ModelKeys.JNDI_NAME,ModelDescriptionConstants.TYPE).set(ModelType.STRING);
  description.get(ModelDescriptionConstants.REQUEST_PROPERTIES,ModelKeys.JNDI_NAME,ModelDescriptionConstants.DESCRIPTION).set(resources.getString("infinispan.container.jndi-name"));
  description.get(ModelDescriptionConstants.REQUEST_PROPERTIES,ModelKeys.JNDI_NAME,ModelDescriptionConstants.REQUIRED).set(false);
  description.get(ModelDescriptionConstants.REQUEST_PROPERTIES,ModelKeys.ALIAS,ModelDescriptionConstants.TYPE).set(ModelType.LIST);
  description.get(ModelDescriptionConstants.REQUEST_PROPERTIES,ModelKeys.ALIAS,ModelDescriptionConstants.VALUE_TYPE).set(ModelType.STRING);
  description.get(ModelDescriptionConstants.REQUEST_PROPERTIES,ModelKeys.ALIAS,ModelDescriptionConstants.DESCRIPTION).set(resources.getString("infinispan.container.alias"));
  description.get(ModelDescriptionConstants.REQUEST_PROPERTIES,ModelKeys.ALIAS,ModelDescriptionConstants.REQUIRED).set(false);
  description.get(ModelDescriptionConstants.REQUEST_PROPERTIES,ModelKeys.TRANSPORT,ModelDescriptionConstants.TYPE).set(ModelType.OBJECT);
  description.get(ModelDescriptionConstants.REQUEST_PROPERTIES,ModelKeys.TRANSPORT,ModelDescriptionConstants.DESCRIPTION).set(resources.getString("infinispan.container.transport"));
  description.get(ModelDescriptionConstants.REQUEST_PROPERTIES,ModelKeys.TRANSPORT,ModelDescriptionConstants.REQUIRED).set(false);
  description.get(ModelDescriptionConstants.REQUEST_PROPERTIES,ModelKeys.CACHE,ModelDescriptionConstants.TYPE).set(ModelType.LIST);
  description.get(ModelDescriptionConstants.REQUEST_PROPERTIES,ModelKeys.CACHE,ModelDescriptionConstants.VALUE_TYPE).set(ModelType.OBJECT);
  description.get(ModelDescriptionConstants.REQUEST_PROPERTIES,ModelKeys.CACHE,ModelDescriptionConstants.DESCRIPTION).set(resources.getString("infinispan.container.cache"));
  return description;
}
