{
  ModelNode requestProperties=operation.get(ModelDescriptionConstants.REQUEST_PROPERTIES);
  addNode(requestProperties,ModelKeys.START,resources.getString(keyPrefix + ".start"),ModelType.STRING,false);
  addNode(requestProperties,ModelKeys.BATCHING,resources.getString(keyPrefix + ".batching"),ModelType.STRING,false);
  addNode(requestProperties,ModelKeys.INDEXING,resources.getString(keyPrefix + ".indexing"),ModelType.STRING,false);
  String lockingPrefix=keyPrefix + ".locking";
  ModelNode locking=addNode(requestProperties,ModelKeys.LOCKING,resources.getString(lockingPrefix),ModelType.OBJECT,false).get(ModelDescriptionConstants.VALUE_TYPE);
  addNode(locking,ModelKeys.ISOLATION,resources.getString(lockingPrefix + ".isolation"),ModelType.STRING,false);
  addNode(locking,ModelKeys.STRIPING,resources.getString(lockingPrefix + ".striping"),ModelType.BOOLEAN,false);
  addNode(locking,ModelKeys.ACQUIRE_TIMEOUT,resources.getString(lockingPrefix + ".acquire-timeout"),ModelType.LONG,false);
  addNode(locking,ModelKeys.CONCURRENCY_LEVEL,resources.getString(lockingPrefix + ".concurrency-level"),ModelType.INT,false);
  String transactionPrefix=keyPrefix + ".transaction";
  ModelNode transaction=addNode(requestProperties,ModelKeys.TRANSACTION,resources.getString(transactionPrefix),ModelType.OBJECT,false).get(ModelDescriptionConstants.VALUE_TYPE);
  addNode(transaction,ModelKeys.MODE,resources.getString(transactionPrefix + ".mode"),ModelType.STRING,false);
  addNode(transaction,ModelKeys.STOP_TIMEOUT,resources.getString(transactionPrefix + ".stop-timeout"),ModelType.INT,false);
  addNode(transaction,ModelKeys.EAGER_LOCKING,resources.getString(transactionPrefix + ".eager-locking"),ModelType.STRING,false);
  String evictionPrefix=keyPrefix + ".eviction";
  ModelNode eviction=addNode(requestProperties,ModelKeys.EVICTION,resources.getString(evictionPrefix),ModelType.OBJECT,false).get(ModelDescriptionConstants.VALUE_TYPE);
  addNode(eviction,ModelKeys.STRATEGY,resources.getString(evictionPrefix + ".strategy"),ModelType.STRING,false);
  addNode(eviction,ModelKeys.MAX_ENTRIES,resources.getString(evictionPrefix + ".max-entries"),ModelType.INT,false);
  String expirationPrefix=keyPrefix + ".expiration";
  ModelNode expiration=addNode(requestProperties,ModelKeys.EXPIRATION,resources.getString(expirationPrefix),ModelType.OBJECT,false).get(ModelDescriptionConstants.VALUE_TYPE);
  addNode(expiration,ModelKeys.MAX_IDLE,resources.getString(expirationPrefix + ".max-idle"),ModelType.LONG,false);
  addNode(expiration,ModelKeys.LIFESPAN,resources.getString(expirationPrefix + ".lifespan"),ModelType.LONG,false);
  addNode(expiration,ModelKeys.INTERVAL,resources.getString(expirationPrefix + ".interval"),ModelType.LONG,false);
  String storePrefix=keyPrefix + ".store";
  ModelNode store=addNode(requestProperties,ModelKeys.STORE,resources.getString(storePrefix),ModelType.OBJECT,false).get(ModelDescriptionConstants.VALUE_TYPE);
  addNode(store,ModelKeys.SHARED,resources.getString(storePrefix + ".shared"),ModelType.BOOLEAN,false);
  addNode(store,ModelKeys.PRELOAD,resources.getString(storePrefix + ".preload"),ModelType.BOOLEAN,false);
  addNode(store,ModelKeys.PASSIVATION,resources.getString(storePrefix + ".passivation"),ModelType.BOOLEAN,false);
  addNode(store,ModelKeys.FETCH_STATE,resources.getString(storePrefix + ".fetch-state"),ModelType.BOOLEAN,false);
  addNode(store,ModelKeys.PURGE,resources.getString(storePrefix + ".purge"),ModelType.BOOLEAN,false);
  addNode(store,ModelKeys.SINGLETON,resources.getString(storePrefix + ".singleton"),ModelType.BOOLEAN,false);
  addNode(store,ModelKeys.PROPERTY,resources.getString(storePrefix + ".property"),ModelType.LIST,false).get(ModelDescriptionConstants.VALUE_TYPE).set(ModelType.PROPERTY);
  String fileStorePrefix=keyPrefix + ".file-store";
  ModelNode fileStore=addNode(requestProperties,ModelKeys.FILE_STORE,resources.getString(fileStorePrefix),ModelType.OBJECT,false).get(ModelDescriptionConstants.VALUE_TYPE);
  addNode(fileStore,ModelKeys.SHARED,resources.getString(storePrefix + ".shared"),ModelType.BOOLEAN,false);
  addNode(fileStore,ModelKeys.PRELOAD,resources.getString(storePrefix + ".preload"),ModelType.BOOLEAN,false);
  addNode(fileStore,ModelKeys.PASSIVATION,resources.getString(storePrefix + ".passivation"),ModelType.BOOLEAN,false);
  addNode(fileStore,ModelKeys.FETCH_STATE,resources.getString(storePrefix + ".fetch-state"),ModelType.BOOLEAN,false);
  addNode(fileStore,ModelKeys.PURGE,resources.getString(storePrefix + ".purge"),ModelType.BOOLEAN,false);
  addNode(fileStore,ModelKeys.SINGLETON,resources.getString(storePrefix + ".singleton"),ModelType.BOOLEAN,false);
  addNode(fileStore,ModelKeys.PROPERTY,resources.getString(storePrefix + ".property"),ModelType.LIST,false).get(ModelDescriptionConstants.VALUE_TYPE).set(ModelType.PROPERTY);
  addNode(fileStore,ModelKeys.RELATIVE_TO,resources.getString(fileStorePrefix + ".relative-to"),ModelType.BOOLEAN,false);
  addNode(fileStore,ModelKeys.PATH,resources.getString(fileStorePrefix + ".path"),ModelType.BOOLEAN,false);
  String jdbcStorePrefix=keyPrefix + ".jdbc-store";
  ModelNode jdbcStore=addNode(requestProperties,ModelKeys.JDBC_STORE,resources.getString(jdbcStorePrefix),ModelType.OBJECT,false).get(ModelDescriptionConstants.VALUE_TYPE);
  addNode(jdbcStore,ModelKeys.SHARED,resources.getString(storePrefix + ".shared"),ModelType.BOOLEAN,false);
  addNode(jdbcStore,ModelKeys.PRELOAD,resources.getString(storePrefix + ".preload"),ModelType.BOOLEAN,false);
  addNode(jdbcStore,ModelKeys.PASSIVATION,resources.getString(storePrefix + ".passivation"),ModelType.BOOLEAN,false);
  addNode(jdbcStore,ModelKeys.FETCH_STATE,resources.getString(storePrefix + ".fetch-state"),ModelType.BOOLEAN,false);
  addNode(jdbcStore,ModelKeys.PURGE,resources.getString(storePrefix + ".purge"),ModelType.BOOLEAN,false);
  addNode(jdbcStore,ModelKeys.SINGLETON,resources.getString(storePrefix + ".singleton"),ModelType.BOOLEAN,false);
  addNode(jdbcStore,ModelKeys.PROPERTY,resources.getString(storePrefix + ".property"),ModelType.LIST,false).get(ModelDescriptionConstants.VALUE_TYPE).set(ModelType.PROPERTY);
  addNode(jdbcStore,ModelKeys.DATASOURCE,resources.getString(jdbcStorePrefix + ".datasource"),ModelType.STRING,true);
  String remoteStorePrefix=keyPrefix + ".remote-store";
  ModelNode remoteStore=addNode(requestProperties,ModelKeys.REMOTE_STORE,resources.getString(remoteStorePrefix),ModelType.OBJECT,false).get(ModelDescriptionConstants.VALUE_TYPE);
  addNode(remoteStore,ModelKeys.SHARED,resources.getString(storePrefix + ".shared"),ModelType.BOOLEAN,false);
  addNode(remoteStore,ModelKeys.PRELOAD,resources.getString(storePrefix + ".preload"),ModelType.BOOLEAN,false);
  addNode(remoteStore,ModelKeys.PASSIVATION,resources.getString(storePrefix + ".passivation"),ModelType.BOOLEAN,false);
  addNode(remoteStore,ModelKeys.FETCH_STATE,resources.getString(storePrefix + ".fetch-state"),ModelType.BOOLEAN,false);
  addNode(remoteStore,ModelKeys.PURGE,resources.getString(storePrefix + ".purge"),ModelType.BOOLEAN,false);
  addNode(remoteStore,ModelKeys.SINGLETON,resources.getString(storePrefix + ".singleton"),ModelType.BOOLEAN,false);
  addNode(remoteStore,ModelKeys.PROPERTY,resources.getString(storePrefix + ".property"),ModelType.LIST,false).get(ModelDescriptionConstants.VALUE_TYPE).set(ModelType.PROPERTY);
  addNode(remoteStore,ModelKeys.REMOTE_SERVER,resources.getString(remoteStorePrefix + ".remote-server"),ModelType.LIST,true).get(ModelDescriptionConstants.VALUE_TYPE).set(ModelType.STRING);
}
