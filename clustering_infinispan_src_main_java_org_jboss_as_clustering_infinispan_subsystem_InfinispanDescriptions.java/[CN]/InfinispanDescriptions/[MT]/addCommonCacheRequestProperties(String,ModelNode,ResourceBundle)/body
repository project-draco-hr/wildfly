{
  ModelNode requestProperties=operation.get(ModelDescriptionConstants.REQUEST_PROPERTIES);
  addNode(requestProperties,ModelKeys.START,resources.getString(keyPrefix + ".start"),ModelType.STRING,false);
  addNode(requestProperties,ModelKeys.BATCHING,resources.getString(keyPrefix + ".batching"),ModelType.STRING,false);
  addNode(requestProperties,ModelKeys.INDEXING,resources.getString(keyPrefix + ".indexing"),ModelType.STRING,false);
  String lockingPrefix=keyPrefix + "." + "locking";
  ModelNode locking=addNode(requestProperties,ModelKeys.LOCKING,resources.getString(lockingPrefix),ModelType.OBJECT,false).get(ModelDescriptionConstants.VALUE_TYPE);
  for (  AttributeDefinition attr : CommonAttributes.LOCKING_ATTRIBUTES) {
    addNode(locking,attr.getName(),resources.getString(lockingPrefix + "." + attr.getName()),attr.getType(),!attr.isAllowNull());
  }
  String transactionPrefix=keyPrefix + "." + "transaction";
  ModelNode transaction=addNode(requestProperties,ModelKeys.TRANSACTION,resources.getString(transactionPrefix),ModelType.OBJECT,false).get(ModelDescriptionConstants.VALUE_TYPE);
  for (  AttributeDefinition attr : CommonAttributes.TRANSACTION_ATTRIBUTES) {
    addNode(transaction,attr.getName(),resources.getString(transactionPrefix + "." + attr.getName()),attr.getType(),!attr.isAllowNull());
  }
  String evictionPrefix=keyPrefix + "." + "eviction";
  ModelNode eviction=addNode(requestProperties,ModelKeys.EVICTION,resources.getString(evictionPrefix),ModelType.OBJECT,false).get(ModelDescriptionConstants.VALUE_TYPE);
  for (  AttributeDefinition attr : CommonAttributes.EVICTION_ATTRIBUTES) {
    addNode(eviction,attr.getName(),resources.getString(evictionPrefix + "." + attr.getName()),attr.getType(),!attr.isAllowNull());
  }
  String expirationPrefix=keyPrefix + ".expiration";
  ModelNode expiration=addNode(requestProperties,ModelKeys.EXPIRATION,resources.getString(expirationPrefix),ModelType.OBJECT,false).get(ModelDescriptionConstants.VALUE_TYPE);
  for (  AttributeDefinition attr : CommonAttributes.EXPIRATION_ATTRIBUTES) {
    addNode(expiration,attr.getName(),resources.getString(expirationPrefix + "." + attr.getName()),attr.getType(),!attr.isAllowNull());
  }
  String storePrefix=keyPrefix + "." + "store";
  ModelNode store=addNode(requestProperties,ModelKeys.STORE,resources.getString(storePrefix),ModelType.OBJECT,false).get(ModelDescriptionConstants.VALUE_TYPE);
  for (  AttributeDefinition attr : CommonAttributes.STORE_ATTRIBUTES) {
    addNode(store,attr.getName(),resources.getString(storePrefix + "." + attr.getName()),attr.getType(),!attr.isAllowNull());
  }
  addNode(store,ModelKeys.PROPERTY,resources.getString(storePrefix + ".property"),ModelType.LIST,false).get(ModelDescriptionConstants.VALUE_TYPE).set(ModelType.PROPERTY);
  String fileStorePrefix=keyPrefix + "." + "file-store";
  ModelNode fileStore=addNode(requestProperties,ModelKeys.FILE_STORE,resources.getString(fileStorePrefix),ModelType.OBJECT,false).get(ModelDescriptionConstants.VALUE_TYPE);
  for (  AttributeDefinition attr : CommonAttributes.STORE_ATTRIBUTES) {
    addNode(fileStore,attr.getName(),resources.getString(storePrefix + "." + attr.getName()),attr.getType(),!attr.isAllowNull());
  }
  addNode(fileStore,ModelKeys.PROPERTY,resources.getString(storePrefix + ".property"),ModelType.LIST,false).get(ModelDescriptionConstants.VALUE_TYPE).set(ModelType.PROPERTY);
  addNode(fileStore,ModelKeys.RELATIVE_TO,resources.getString(fileStorePrefix + ".relative-to"),ModelType.BOOLEAN,false);
  addNode(fileStore,ModelKeys.PATH,resources.getString(fileStorePrefix + ".path"),ModelType.BOOLEAN,false);
  String jdbcStorePrefix=keyPrefix + ".jdbc-store";
  ModelNode jdbcStore=addNode(requestProperties,ModelKeys.JDBC_STORE,resources.getString(jdbcStorePrefix),ModelType.OBJECT,false).get(ModelDescriptionConstants.VALUE_TYPE);
  for (  AttributeDefinition attr : CommonAttributes.STORE_ATTRIBUTES) {
    addNode(jdbcStore,attr.getName(),resources.getString(storePrefix + "." + attr.getName()),attr.getType(),!attr.isAllowNull());
  }
  addNode(jdbcStore,ModelKeys.PROPERTY,resources.getString(storePrefix + ".property"),ModelType.LIST,false).get(ModelDescriptionConstants.VALUE_TYPE).set(ModelType.PROPERTY);
  addNode(jdbcStore,ModelKeys.DATASOURCE,resources.getString(jdbcStorePrefix + ".datasource"),ModelType.STRING,true);
  String remoteStorePrefix=keyPrefix + ".remote-store";
  ModelNode remoteStore=addNode(requestProperties,ModelKeys.REMOTE_STORE,resources.getString(remoteStorePrefix),ModelType.OBJECT,false).get(ModelDescriptionConstants.VALUE_TYPE);
  for (  AttributeDefinition attr : CommonAttributes.STORE_ATTRIBUTES) {
    addNode(remoteStore,attr.getName(),resources.getString(storePrefix + "." + attr.getName()),attr.getType(),!attr.isAllowNull());
  }
  addNode(remoteStore,ModelKeys.PROPERTY,resources.getString(storePrefix + ".property"),ModelType.LIST,false).get(ModelDescriptionConstants.VALUE_TYPE).set(ModelType.PROPERTY);
  addNode(remoteStore,ModelKeys.REMOTE_SERVER,resources.getString(remoteStorePrefix + ".remote-server"),ModelType.LIST,true).get(ModelDescriptionConstants.VALUE_TYPE).set(ModelType.STRING);
}
