{
  final ServiceTarget serviceTarget=serviceContainer;
  serviceTarget.addListener(ServiceListener.Inheritance.ALL,new AbstractServiceListener<Object>(){
    @Override public void transition(    final ServiceController<? extends Object> controller,    final ServiceController.Transition transition){
      if (transition == ServiceController.Transition.STARTING_to_START_FAILED) {
        log.errorf(controller.getStartException(),"Service [%s] failed.",controller.getName());
      }
    }
  }
);
  final ProcessControllerConnectionService processControllerClient=new ProcessControllerConnectionService(environment,authCode);
  serviceTarget.addService(ProcessControllerConnectionService.SERVICE_NAME,processControllerClient).install();
  final ServiceName threadFactoryServiceName=SERVICE_NAME_BASE.append("thread-factory");
  final ServiceName executorServiceName=SERVICE_NAME_BASE.append("executor");
  serviceTarget.addService(threadFactoryServiceName,new ThreadFactoryService()).install();
  final HostControllerExecutorService executorService=new HostControllerExecutorService();
  serviceTarget.addService(executorServiceName,executorService).addDependency(threadFactoryServiceName,ThreadFactory.class,executorService.threadFactoryValue).install();
  AbsolutePathService.addService(HostControllerEnvironment.HOME_DIR,environment.getHomeDir().getAbsolutePath(),serviceTarget);
  AbsolutePathService.addService(HostControllerEnvironment.DOMAIN_CONFIG_DIR,environment.getDomainConfigurationDir().getAbsolutePath(),serviceTarget);
  DomainModelControllerService.addService(serviceTarget,environment,new ControlledProcessState(false));
}
