{
  SubsystemState stateService=new SubsystemState();
  List<OperationStepHandler> addedSteps=new ArrayList<OperationStepHandler>();
  OperationContext context=mockOperationContext(stateService,addedSteps,OperationContext.ResultAction.KEEP);
  ModelNode op=getAddOperation("PropertyX","hi");
  Assert.assertEquals("Precondition",0,addedSteps.size());
  OSGiFrameworkPropertyAdd.INSTANCE.execute(context,op);
  Assert.assertEquals(1,addedSteps.size());
  Assert.assertNull("Precondition",stateService.getProperties().get("PropertyX"));
  addedSteps.get(0).execute(context,op);
  Assert.assertEquals("hi",stateService.getProperties().get("PropertyX"));
  OSGiFrameworkPropertyRemove.INSTANCE.execute(context,op);
  Assert.assertEquals("Actual remove added as async step",2,addedSteps.size());
  Mockito.when(context.completeStep()).thenReturn(OperationContext.ResultAction.ROLLBACK);
  addedSteps.get(1).execute(context,op);
  Assert.assertEquals("Property should have been kept as the operation was rolled back","hi",stateService.getProperties().get("PropertyX"));
  Mockito.when(context.completeStep()).thenReturn(OperationContext.ResultAction.KEEP);
  addedSteps.get(1).execute(context,op);
  Assert.assertNull("Property should have been removed",stateService.getProperties().get("PropertyX"));
}
