{
  final Handler handler;
  final ModuleLoader moduleLoader=Module.forClass(CustomHandlerService.class).getModuleLoader();
  final ModuleIdentifier id=ModuleIdentifier.create(moduleName);
  try {
    final Class<?> handlerClass=Class.forName(className,false,moduleLoader.loadModule(id).getClassLoader());
    if (Handler.class.isAssignableFrom(handlerClass)) {
      handler=(Handler)handlerClass.newInstance();
    }
 else {
      throw new StartException(String.format("%s %s is not a valid %s.",CUSTOM_HANDLER,className,Handler.class.getName()));
    }
  }
 catch (  ClassNotFoundException e) {
    throw new StartException(String.format("Class %s could not be found.",className),e);
  }
catch (  ModuleLoadException e) {
    throw new StartException(String.format("Could not load module %s.",moduleName),e);
  }
catch (  InstantiationException e) {
    throw new StartException(String.format("Could not instantiate %s.",className),e);
  }
catch (  IllegalAccessException e) {
    throw new StartException(String.format("Could not access %s.",className),e);
  }
  formatterSpec.apply(handler);
  if (level != null)   handler.setLevel(level);
  try {
    handler.setEncoding(encoding);
  }
 catch (  UnsupportedEncodingException e) {
    throw new StartException(e);
  }
  setProperties(handler,properties);
  value=handler;
}
