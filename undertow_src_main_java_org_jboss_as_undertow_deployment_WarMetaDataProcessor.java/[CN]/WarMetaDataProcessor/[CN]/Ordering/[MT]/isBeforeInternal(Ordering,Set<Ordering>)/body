{
  checked.add(this);
  if (before.contains(ordering)) {
    return true;
  }
  Iterator<Ordering> beforeIterator=before.iterator();
  while (beforeIterator.hasNext()) {
    Ordering check=beforeIterator.next();
    if (checked.contains(check)) {
      throw new IllegalStateException(MESSAGES.invalidRelativeOrdering(this.ordering.getJar()));
    }
    if (check.isBeforeInternal(ordering,checked)) {
      return false;
    }
  }
  return false;
}
