{
  TransformersSubRegistration domain=registry.getDomainRegistration(modelVersion);
  if (modelVersion == VERSION_1_2 || modelVersion == VERSION_1_3) {
    domain.registerSubResource(JSF_EXTENSION,IGNORED_EXTENSIONS);
    final String slotAttributeName="default-jsf-impl-slot";
    final String slotDefaultValue="main";
    registry.registerSubsystemTransformers(JSF_SUBSYSTEM,IGNORED_SUBSYSTEMS,new ResourceTransformer(){
      @Override public void transformResource(      ResourceTransformationContext context,      PathAddress address,      Resource resource) throws OperationFailedException {
        ModelNode model=resource.getModel();
        if (model.hasDefined(slotAttributeName)) {
          ModelNode slot=model.get(slotAttributeName);
          if (!slotDefaultValue.equals(slot.asString())) {
            context.getLogger().logWarning(address,slotAttributeName,MESSAGES.invalidJSFSlotValue(slot.asString()));
          }
        }
        Set<String> attributes=new HashSet<String>();
        for (        Property prop : resource.getModel().asPropertyList()) {
          attributes.add(prop.getName());
        }
        attributes.remove(slotAttributeName);
        if (!attributes.isEmpty()) {
          context.getLogger().logWarning(address,ControllerMessages.MESSAGES.attributesAreNotUnderstoodAndWillBeIgnored(),attributes);
        }
      }
    }
);
    TransformersSubRegistration jsfSubsystem=domain.registerSubResource(PathElement.pathElement(SUBSYSTEM,JSF_SUBSYSTEM));
    jsfSubsystem.registerOperationTransformer(WRITE_ATTRIBUTE_OPERATION,new OperationTransformer(){
      @Override public TransformedOperation transformOperation(      TransformationContext context,      PathAddress address,      ModelNode operation) throws OperationFailedException {
        final String name=operation.require(NAME).asString();
        final ModelNode value=operation.get(ModelDescriptionConstants.VALUE);
        if (!slotAttributeName.equals(name)) {
          context.getLogger().logWarning(address,ControllerMessages.MESSAGES.attributesAreNotUnderstoodAndWillBeIgnored(),name);
          return DISCARD.transformOperation(context,address,operation);
        }
        if (value.isDefined() && value.equals(slotDefaultValue)) {
          return DISCARD.transformOperation(context,address,operation);
        }
 else {
          OperationRejectionPolicy rejectionPolicy=new OperationRejectionPolicy(){
            @Override public boolean rejectOperation(            ModelNode preparedResult){
              return true;
            }
            @Override public String getFailureDescription(){
              return MESSAGES.invalidJSFSlotValue(value.asString());
            }
          }
;
          return new TransformedOperation(operation,rejectionPolicy,OperationResultTransformer.ORIGINAL_RESULT);
        }
      }
    }
);
    jsfSubsystem.registerOperationTransformer(UNDEFINE_ATTRIBUTE_OPERATION,new OperationTransformer(){
      @Override public TransformedOperation transformOperation(      TransformationContext context,      PathAddress address,      ModelNode operation) throws OperationFailedException {
        String attributeName=operation.require(NAME).asString();
        if (!slotAttributeName.equals(attributeName)) {
          return DEFAULT.transformOperation(context,address,operation);
        }
 else {
          context.getLogger().logWarning(address,ControllerMessages.MESSAGES.attributesAreNotUnderstoodAndWillBeIgnored(),attributeName);
          return DISCARD.transformOperation(context,address,operation);
        }
      }
    }
);
    PathsTransformers.registerTransformers120(domain);
    DeploymentTransformers.registerTransformers120(domain);
    SystemPropertyTransformers.registerTransformers120(domain);
    SocketBindingGroupTransformers.registerTransformers120(domain);
    ServerGroupTransformers.registerTransformers120(domain);
    domain.registerSubResource(PathElement.pathElement(INTERFACE),AddNameFromAddressResourceTransformer.INSTANCE);
    domain.registerSubResource(PathElement.pathElement(PATH),AddNameFromAddressResourceTransformer.INSTANCE);
  }
 else   if (modelVersion == VERSION_1_4) {
    domain.registerSubResource(PathElement.pathElement(INTERFACE),AddNameFromAddressResourceTransformer.INSTANCE);
    domain.registerSubResource(PathElement.pathElement(PATH),AddNameFromAddressResourceTransformer.INSTANCE);
  }
}
