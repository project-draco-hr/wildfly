{
  final ServiceName mailSessionServiceName=MailSessionAdd.MAIL_SESSION_SERVICE_NAME.append("MailSessionDefinition",moduleDescription.getApplicationName(),moduleDescription.getModuleName(),jndiName);
  final ServiceBuilder<?> mailSessionServiceBuilder=serviceTarget.addService(mailSessionServiceName,mailSessionService);
  final ContextNames.BindInfo bindInfo=ContextNames.bindInfoForEnvEntry(context.getApplicationName(),context.getModuleName(),context.getComponentName(),!context.isCompUsesModule(),jndiName);
  final MailSessionManagedReferenceFactory referenceFactoryService=new MailSessionManagedReferenceFactory(mailSessionService);
  final BinderService binderService=new BinderService(bindInfo.getBindName(),this);
  final ServiceBuilder<?> binderBuilder=serviceTarget.addService(bindInfo.getBinderServiceName(),binderService).addInjection(binderService.getManagedObjectInjector(),referenceFactoryService).addDependency(bindInfo.getParentContextServiceName(),ServiceBasedNamingStore.class,binderService.getNamingStoreInjector()).addListener(new AbstractServiceListener<Object>(){
    public void transition(    final ServiceController<? extends Object> controller,    final ServiceController.Transition transition){
switch (transition) {
case STARTING_to_UP:
{
          MailLogger.ROOT_LOGGER.boundMailSession(jndiName);
          break;
        }
case START_REQUESTED_to_DOWN:
{
        MailLogger.ROOT_LOGGER.unboundMailSession(jndiName);
        break;
      }
case REMOVING_to_REMOVED:
{
      MailLogger.ROOT_LOGGER.debugf("Removed Mail Session [%s]",jndiName);
      break;
    }
}
}
}
);
mailSessionServiceBuilder.setInitialMode(ServiceController.Mode.ACTIVE).install();
binderBuilder.setInitialMode(ServiceController.Mode.ACTIVE).install();
valueSourceServiceBuilder.addDependency(bindInfo.getBinderServiceName(),ManagedReferenceFactory.class,injector);
}
