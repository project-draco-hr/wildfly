{
  ModelVersion oldVersion=ModelVersion.create(1,0,0);
  KernelServicesBuilder builder=createKernelServicesBuilder(null).setSubsystemXml(SUBSYSTEM_XML_1_0_1);
  builder.createLegacyKernelServicesBuilder(null,oldVersion).setExtensionClassName(ConfigAdminExtension.class.getName()).addMavenResourceURL("org.jboss.as:jboss-as-configadmin:" + mavenVersion);
  KernelServices mainServices=builder.build();
  KernelServices legacyServices=mainServices.getLegacyServices(oldVersion);
  Assert.assertNotNull(legacyServices);
  checkSubsystemModelTransformation(mainServices,oldVersion);
  ModelNode op=Util.getEmptyOperation(ModelConstants.UPDATE,new ModelNode().add(ModelDescriptionConstants.SUBSYSTEM,ConfigAdminExtension.SUBSYSTEM_NAME).add(ModelConstants.CONFIGURATION,"Pid1"));
  op.get(ModelConstants.ENTRIES).get("test123").set("testing123");
  op.get(ModelConstants.ENTRIES).get("test456").set("testingabc");
  mainServices.executeForResult(op);
  TransformedOperation transformedOp=mainServices.transformOperation(oldVersion,op);
  checkResultAndGetContents(mainServices.executeOperation(oldVersion,transformedOp));
  checkSubsystemModelTransformation(mainServices,oldVersion);
  ModelNode pid1=legacyServices.readWholeModel().get(ModelDescriptionConstants.SUBSYSTEM,ConfigAdminExtension.SUBSYSTEM_NAME,ModelConstants.CONFIGURATION,"Pid1");
  Assert.assertTrue(pid1.hasDefined(ModelConstants.ENTRIES));
  ModelNode entries=pid1.get(ModelConstants.ENTRIES);
  Assert.assertEquals(2,entries.keys().size());
  Assert.assertEquals("testing123",entries.get("test123").asString());
  Assert.assertEquals("testingabc",entries.get("test456").asString());
}
