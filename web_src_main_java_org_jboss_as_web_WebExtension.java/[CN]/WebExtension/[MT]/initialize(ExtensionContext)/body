{
  log.debugf("Activating Web Extension");
  final SubsystemRegistration subsystem=context.registerSubsystem(SUBSYSTEM_NAME);
  final ManagementResourceRegistration registration=subsystem.registerSubsystemModel(WebSubsystemDescriptionProviders.SUBSYSTEM);
  registration.registerOperationHandler(ADD,WebSubsystemAdd.INSTANCE,WebSubsystemAdd.INSTANCE,false);
  registration.registerOperationHandler(DESCRIBE,WebSubsystemDescribe.INSTANCE,WebSubsystemDescribe.INSTANCE,false,OperationEntry.EntryType.PRIVATE);
  registration.registerOperationHandler(REMOVE,ReloadRequiredRemoveStepHandler.INSTANCE,WebSubsystemDescriptionProviders.SUBSYSTEM_REMOVE,false);
  subsystem.registerXMLElementWriter(WebSubsystemParser.getInstance());
  final ManagementResourceRegistration connectors=registration.registerSubModel(connectorPath,WebSubsystemDescriptionProviders.CONNECTOR);
  connectors.registerOperationHandler(ADD,WebConnectorAdd.INSTANCE,WebConnectorAdd.INSTANCE,false);
  connectors.registerOperationHandler(REMOVE,WebConnectorRemove.INSTANCE,WebConnectorRemove.INSTANCE,false);
  for (  final String attributeName : WebConnectorMetrics.ATTRIBUTES) {
    connectors.registerMetric(attributeName,WebConnectorMetrics.INSTANCE);
  }
  connectors.registerReadWriteAttribute(Constants.PROTOCOL,null,new WriteAttributeHandlers.StringLengthValidatingHandler(1,true),Storage.CONFIGURATION);
  connectors.registerReadWriteAttribute(Constants.SCHEME,null,new WriteAttributeHandlers.StringLengthValidatingHandler(1,true),Storage.CONFIGURATION);
  connectors.registerReadWriteAttribute(Constants.SOCKET_BINDING,null,new WriteAttributeHandlers.StringLengthValidatingHandler(1),Storage.CONFIGURATION);
  connectors.registerReadWriteAttribute(Constants.ENABLE_LOOKUPS,null,new WriteAttributeHandlers.ModelTypeValidatingHandler(ModelType.BOOLEAN,true),Storage.CONFIGURATION);
  connectors.registerReadWriteAttribute(Constants.PROXY_NAME,null,new WriteAttributeHandlers.StringLengthValidatingHandler(1),Storage.CONFIGURATION);
  connectors.registerReadWriteAttribute(Constants.PROXY_PORT,null,new WriteAttributeHandlers.IntRangeValidatingHandler(1,true),Storage.CONFIGURATION);
  connectors.registerReadWriteAttribute(Constants.MAX_POST_SIZE,null,new WriteAttributeHandlers.IntRangeValidatingHandler(1024,true),Storage.CONFIGURATION);
  connectors.registerReadWriteAttribute(Constants.MAX_SAVE_POST_SIZE,null,new WriteAttributeHandlers.IntRangeValidatingHandler(0,true),Storage.CONFIGURATION);
  connectors.registerReadWriteAttribute(Constants.ENABLED,null,new WriteAttributeHandlers.ModelTypeValidatingHandler(ModelType.BOOLEAN,true),Storage.CONFIGURATION);
  connectors.registerReadWriteAttribute(Constants.EXECUTOR,null,new WriteAttributeHandlers.StringLengthValidatingHandler(1,true),Storage.CONFIGURATION);
  connectors.registerReadWriteAttribute(Constants.MAX_CONNECTIONS,null,new WriteAttributeHandlers.StringLengthValidatingHandler(1,true),Storage.CONFIGURATION);
  connectors.registerReadWriteAttribute(Constants.VIRTUAL_SERVER,null,new WriteAttributeHandlers.ListValidatatingHandler(new StringLengthValidator(1,false),true),Storage.CONFIGURATION);
  final ManagementResourceRegistration ssl=connectors.registerSubModel(sslPath,WebSubsystemDescriptionProviders.SSL);
  ssl.registerOperationHandler(ADD,WebSSLAdd.INSTANCE,WebSSLAdd.INSTANCE,true);
  ssl.registerOperationHandler(REMOVE,WebSSLRemove.INSTANCE,WebSSLRemove.INSTANCE,true);
  ssl.registerReadWriteAttribute(Constants.KEY_ALIAS,null,new WriteAttributeHandlers.StringLengthValidatingHandler(1,true),Storage.CONFIGURATION);
  ssl.registerReadWriteAttribute(Constants.PASSWORD,null,new WriteAttributeHandlers.StringLengthValidatingHandler(1,true),Storage.CONFIGURATION);
  ssl.registerReadWriteAttribute(Constants.CERTIFICATE_KEY_FILE,null,new WriteAttributeHandlers.StringLengthValidatingHandler(1,true),Storage.CONFIGURATION);
  ssl.registerReadWriteAttribute(Constants.CIPHER_SUITE,null,new WriteAttributeHandlers.StringLengthValidatingHandler(1,true),Storage.CONFIGURATION);
  ssl.registerReadWriteAttribute(Constants.PROTOCOL,null,new WriteAttributeHandlers.StringLengthValidatingHandler(1,true),Storage.CONFIGURATION);
  ssl.registerReadWriteAttribute(Constants.VERIFY_CLIENT,null,new WriteAttributeHandlers.StringLengthValidatingHandler(1,true),Storage.CONFIGURATION);
  ssl.registerReadWriteAttribute(Constants.VERIFY_DEPTH,null,new WriteAttributeHandlers.IntRangeValidatingHandler(1,true),Storage.CONFIGURATION);
  ssl.registerReadWriteAttribute(Constants.CERTIFICATE_FILE,null,new WriteAttributeHandlers.StringLengthValidatingHandler(1,true),Storage.CONFIGURATION);
  ssl.registerReadWriteAttribute(Constants.CA_CERTIFICATE_FILE,null,new WriteAttributeHandlers.StringLengthValidatingHandler(1,true),Storage.CONFIGURATION);
  ssl.registerReadWriteAttribute(Constants.CA_REVOCATION_URL,null,new WriteAttributeHandlers.StringLengthValidatingHandler(1,true),Storage.CONFIGURATION);
  ssl.registerReadWriteAttribute(Constants.SESSION_CACHE_SIZE,null,new WriteAttributeHandlers.IntRangeValidatingHandler(0,true),Storage.CONFIGURATION);
  ssl.registerReadWriteAttribute(Constants.SESSION_TIMEOUT,null,new WriteAttributeHandlers.IntRangeValidatingHandler(0,true),Storage.CONFIGURATION);
  final ManagementResourceRegistration hosts=registration.registerSubModel(hostPath,WebSubsystemDescriptionProviders.VIRTUAL_SERVER);
  hosts.registerOperationHandler(ADD,WebVirtualHostAdd.INSTANCE,WebVirtualHostAdd.INSTANCE,false);
  hosts.registerOperationHandler(REMOVE,WebVirtualHostRemove.INSTANCE,WebVirtualHostRemove.INSTANCE,false);
  hosts.registerReadWriteAttribute(Constants.ALIAS,null,new WriteAttributeHandlers.ListValidatatingHandler(new StringLengthValidator(1,false),true),Storage.CONFIGURATION);
  hosts.registerReadWriteAttribute(Constants.ENABLE_WELCOME_ROOT,null,new WriteAttributeHandlers.ModelTypeValidatingHandler(ModelType.BOOLEAN,true),Storage.CONFIGURATION);
  hosts.registerReadWriteAttribute(Constants.DEFAULT_WEB_MODULE,null,new WriteAttributeHandlers.StringLengthValidatingHandler(1,true),Storage.CONFIGURATION);
  final ManagementResourceRegistration accesslog=hosts.registerSubModel(accesslogPath,WebSubsystemDescriptionProviders.ACCESS_LOG);
  accesslog.registerOperationHandler(ADD,WebAccessLogAdd.INSTANCE,WebAccessLogAdd.INSTANCE,true);
  accesslog.registerOperationHandler(REMOVE,WebAccessLogRemove.INSTANCE,WebAccessLogRemove.INSTANCE,true);
  final ManagementResourceRegistration directory=accesslog.registerSubModel(directoryPath,WebSubsystemDescriptionProviders.DIRECTORY);
  directory.registerReadWriteAttribute(Constants.RELATIVE_TO,null,new WriteAttributeHandlers.StringLengthValidatingHandler(1,true),Storage.CONFIGURATION);
  directory.registerReadWriteAttribute(Constants.PATH,null,new WriteAttributeHandlers.StringLengthValidatingHandler(1,true),Storage.CONFIGURATION);
  accesslog.registerReadWriteAttribute(Constants.PATTERN,null,new WriteAttributeHandlers.StringLengthValidatingHandler(1,true),Storage.CONFIGURATION);
  accesslog.registerReadWriteAttribute(Constants.RESOLVE_HOSTS,null,new WriteAttributeHandlers.ModelTypeValidatingHandler(ModelType.BOOLEAN,true),Storage.CONFIGURATION);
  accesslog.registerReadWriteAttribute(Constants.EXTENDED,null,new WriteAttributeHandlers.ModelTypeValidatingHandler(ModelType.BOOLEAN,true),Storage.CONFIGURATION);
  accesslog.registerReadWriteAttribute(Constants.PREFIX,null,new WriteAttributeHandlers.StringLengthValidatingHandler(1,true),Storage.CONFIGURATION);
  accesslog.registerReadWriteAttribute(Constants.ROTATE,null,new WriteAttributeHandlers.StringLengthValidatingHandler(1,true),Storage.CONFIGURATION);
  final ManagementResourceRegistration sso=hosts.registerSubModel(ssoPath,WebSubsystemDescriptionProviders.SSO);
  sso.registerOperationHandler(ADD,WebSSOAdd.INSTANCE,WebSSOAdd.INSTANCE,false);
  sso.registerOperationHandler(REMOVE,WebSSORemove.INSTANCE,WebSSORemove.INSTANCE,false);
  sso.registerReadWriteAttribute(Constants.CACHE_CONTAINER,null,new WriteAttributeHandlers.StringLengthValidatingHandler(1,true),Storage.CONFIGURATION);
  sso.registerReadWriteAttribute(Constants.DOMAIN,null,new WriteAttributeHandlers.StringLengthValidatingHandler(1,true),Storage.CONFIGURATION);
  sso.registerReadWriteAttribute(Constants.REAUTHENTICATE,null,new WriteAttributeHandlers.ModelTypeValidatingHandler(ModelType.BOOLEAN,true),Storage.CONFIGURATION);
  final ManagementResourceRegistration rewrite=hosts.registerSubModel(rewritePath,WebSubsystemDescriptionProviders.REWRITE);
  rewrite.registerOperationHandler(ADD,WebReWriteAdd.INSTANCE,WebReWriteAdd.INSTANCE,false);
  rewrite.registerOperationHandler(REMOVE,WebReWriteRemove.INSTANCE,WebReWriteRemove.INSTANCE,false);
  final ManagementResourceRegistration rewritecondition=rewrite.registerSubModel(rewritecondPath,WebSubsystemDescriptionProviders.REWRITECOND);
  rewritecondition.registerOperationHandler(ADD,WebReWriteConditionAdd.INSTANCE,WebReWriteConditionAdd.INSTANCE,false);
  rewritecondition.registerOperationHandler(REMOVE,WebReWriteConditionRemove.INSTANCE,WebReWriteConditionRemove.INSTANCE,false);
  rewritecondition.registerReadWriteAttribute(Constants.TEST,null,new WriteAttributeHandlers.StringLengthValidatingHandler(1,true),Storage.CONFIGURATION);
  rewritecondition.registerReadWriteAttribute(Constants.PATTERN,null,new WriteAttributeHandlers.StringLengthValidatingHandler(1,true),Storage.CONFIGURATION);
  rewritecondition.registerReadWriteAttribute(Constants.FLAGS,null,new WriteAttributeHandlers.StringLengthValidatingHandler(1,true),Storage.CONFIGURATION);
  rewrite.registerReadWriteAttribute(Constants.CONDITION,null,new WriteAttributeHandlers.StringLengthValidatingHandler(1,true),Storage.CONFIGURATION);
  rewrite.registerReadWriteAttribute(Constants.PATTERN,null,new WriteAttributeHandlers.StringLengthValidatingHandler(1,true),Storage.CONFIGURATION);
  rewrite.registerReadWriteAttribute(Constants.SUBSTITUTION,null,new WriteAttributeHandlers.StringLengthValidatingHandler(1,true),Storage.CONFIGURATION);
  rewrite.registerReadWriteAttribute(Constants.FLAGS,null,new WriteAttributeHandlers.StringLengthValidatingHandler(1,true),Storage.CONFIGURATION);
  final ManagementResourceRegistration jsp=registration.registerSubModel(jspconfigurationPath,WebSubsystemDescriptionProviders.JSP_CONFIGURATION);
  WebConfigurationHandlerUtils.initJSPAttributes(jsp);
  final ManagementResourceRegistration resources=registration.registerSubModel(resourcesPath,WebSubsystemDescriptionProviders.STATIC_RESOURCES);
  WebConfigurationHandlerUtils.initResourcesAttribtues(resources);
  final ManagementResourceRegistration container=registration.registerSubModel(containerPath,WebSubsystemDescriptionProviders.CONTAINER);
  container.registerOperationHandler("add-mime",MimeMappingAdd.INSTANCE,MimeMappingAdd.INSTANCE,false);
  container.registerOperationHandler("remove-mime",MimeMappingRemove.INSTANCE,MimeMappingRemove.INSTANCE,false);
  container.registerReadWriteAttribute(Constants.WELCOME_FILE,null,new WriteAttributeHandlers.ListValidatatingHandler(new StringLengthValidator(1,false),true),Storage.CONFIGURATION);
  final ManagementResourceRegistration deployments=subsystem.registerDeploymentModel(WebSubsystemDescriptionProviders.DEPLOYMENT);
  final ManagementResourceRegistration servlets=deployments.registerSubModel(PathElement.pathElement("servlet"),WebSubsystemDescriptionProviders.SERVLET);
  ServletDeploymentStats.register(servlets);
}
