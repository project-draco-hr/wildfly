{
  final TransformersSubRegistration transformers=registration.registerModelTransformers(ModelVersion.create(1,1,0),new AbstractSubsystemTransformer(SUBSYSTEM_NAME){
    @Override protected ModelNode transformModel(    TransformationContext context,    ModelNode model){
      if (model.hasDefined(Constants.CONNECTOR)) {
        for (        String name : model.get(Constants.CONNECTOR).keys()) {
          swap(model.get(Constants.CONNECTOR,name),SSL_PATH,SSL_ALIAS);
        }
      }
      if (model.hasDefined(Constants.VIRTUAL_SERVER)) {
        for (        String name : model.get(Constants.VIRTUAL_SERVER).keys()) {
          ModelNode virtualServer=model.get(Constants.VIRTUAL_SERVER,name);
          swap(virtualServer,SSO_PATH,SSO_ALIAS);
          swap(virtualServer,ACCESS_LOG_PATH,ACCESS_LOG_ALIAS);
          ModelNode accessLog=virtualServer.get(ACCESS_LOG_ALIAS.getKey(),ACCESS_LOG_ALIAS.getValue());
          swap(accessLog,DIRECTORY_PATH,DIRECTORY_ALIAS);
        }
      }
      return model;
    }
    private void swap(    ModelNode parent,    PathElement original,    PathElement old){
      if (parent.hasDefined(original.getKey()) && parent.get(original.getKey()).hasDefined(original.getValue())) {
        ModelNode sslConfig=parent.get(original.getKey(),original.getValue());
        parent.get(old.getKey(),old.getValue()).set(sslConfig.clone());
        parent.get(original.getKey()).remove(original.getValue());
        if (parent.get(original.getKey()).asList().isEmpty()) {
          parent.remove(original.getKey());
        }
      }
    }
  }
);
  transformers.registerSubResource(VALVE_PATH,true);
  TransformersSubRegistration connectors=transformers.registerSubResource(CONNECTOR_PATH);
  connectors.registerOperationTransformer(ADD,new OperationTransformer(){
    @Override public TransformedOperation transformOperation(    final TransformationContext context,    final PathAddress address,    final ModelNode operation) throws OperationFailedException {
      final boolean hasDefinedVirtualServer=operation.hasDefined(Constants.VIRTUAL_SERVER);
      return new TransformedOperation(operation,new OperationResultTransformer(){
        @Override public ModelNode transformResult(        ModelNode result){
          if (!hasDefinedVirtualServer) {
            return result;
          }
          if (result.get(OUTCOME).asString().equals(FAILED)) {
            result.get(FAILURE_DESCRIPTION).set(WebMessages.MESSAGES.transformationVersion_1_1_0_JBPAPP_9314());
          }
          return result;
        }
      }
);
    }
  }
);
  connectors.registerOperationTransformer(WRITE_ATTRIBUTE_OPERATION,new OperationTransformer(){
    @Override public TransformedOperation transformOperation(    final TransformationContext context,    final PathAddress address,    final ModelNode operation) throws OperationFailedException {
      final boolean isVirtualServer=operation.get(NAME).asString().equals(Constants.VIRTUAL_SERVER);
      return new TransformedOperation(operation,new OperationResultTransformer(){
        @Override public ModelNode transformResult(        ModelNode result){
          if (!isVirtualServer) {
            return result;
          }
          if (result.get(OUTCOME).asString().equals(FAILED)) {
            result.get(FAILURE_DESCRIPTION).set(WebMessages.MESSAGES.transformationVersion_1_1_0_JBPAPP_9314());
          }
          return result;
        }
      }
);
    }
  }
);
  TransformersSubRegistration ssl=connectors.registerSubResource(SSL_PATH,AliasOperationTransformer.replaceLastElement(SSL_ALIAS));
  TransformersSubRegistration virtualServer=transformers.registerSubResource(HOST_PATH);
  TransformersSubRegistration sso=virtualServer.registerSubResource(SSO_PATH,AliasOperationTransformer.replaceLastElement(SSO_ALIAS));
  TransformersSubRegistration accessLog=virtualServer.registerSubResource(ACCESS_LOG_PATH,AliasOperationTransformer.replaceLastElement(ACCESS_LOG_ALIAS));
  TransformersSubRegistration accessLogDir=accessLog.registerSubResource(DIRECTORY_PATH,AliasOperationTransformer.create(new AddressTransformer(){
    @Override public PathAddress transformAddress(    PathAddress address){
      PathAddress copy=PathAddress.EMPTY_ADDRESS;
      for (      PathElement element : address) {
        if (element.getKey().equals(Constants.CONFIGURATION)) {
          copy=copy.append(ACCESS_LOG_ALIAS);
        }
 else         if (element.getKey().equals(Constants.SETTING)) {
          copy=copy.append(DIRECTORY_ALIAS);
        }
 else {
          copy=copy.append(element);
        }
      }
      return copy;
    }
  }
));
}
