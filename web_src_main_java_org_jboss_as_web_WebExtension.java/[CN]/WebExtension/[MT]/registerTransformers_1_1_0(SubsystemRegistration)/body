{
  final TransformersSubRegistration transformers=registration.registerModelTransformers(ModelVersion.create(1,1,0),new AbstractSubsystemTransformer(SUBSYSTEM_NAME){
    @Override protected ModelNode transformModel(    TransformationContext context,    ModelNode model){
      if (model.hasDefined(Constants.CONNECTOR)) {
        for (        String name : model.get(Constants.CONNECTOR).keys()) {
          swap(model.get(Constants.CONNECTOR,name),SSL_PATH,SSL_ALIAS);
        }
      }
      if (model.hasDefined(Constants.VIRTUAL_SERVER)) {
        for (        String name : model.get(Constants.VIRTUAL_SERVER).keys()) {
          ModelNode virtualServer=model.get(Constants.VIRTUAL_SERVER,name);
          swap(virtualServer,SSO_PATH,SSO_ALIAS);
          swap(virtualServer,ACCESS_LOG_PATH,ACCESS_LOG_ALIAS);
          swap(virtualServer.get(ACCESS_LOG_ALIAS.getKey(),ACCESS_LOG_ALIAS.getValue()),DIRECTORY_PATH,DIRECTORY_ALIAS);
        }
      }
      return model;
    }
    private void swap(    ModelNode parent,    PathElement original,    PathElement old){
      if (parent.hasDefined(original.getKey()) && parent.get(original.getKey()).hasDefined(original.getValue())) {
        ModelNode sslConfig=parent.get(original.getKey()).remove(original.getValue());
        parent.get(old.getKey(),old.getValue()).set(sslConfig);
      }
    }
  }
);
  TransformersSubRegistration connectors=transformers.registerSubResource(CONNECTOR_PATH);
  connectors.registerOperationTransformer(ADD,new OperationTransformer(){
    @Override public TransformedOperation transformOperation(    TransformationContext context,    PathAddress address,    ModelNode operation) throws OperationFailedException {
      if (operation.hasDefined(Constants.VIRTUAL_SERVER)) {
        throw WebMessages.MESSAGES.transformationVersion_1_1_0_JBPAPP_9314();
      }
      return new TransformedOperation(operation,TransformedOperation.ORIGINAL_RESULT);
    }
  }
);
  TransformersSubRegistration ssl=connectors.registerSubResource(SSL_PATH,AliasOperationTransformer.replaceLastElement(SSL_ALIAS));
  TransformersSubRegistration virtualServer=transformers.registerSubResource(HOST_PATH);
  TransformersSubRegistration sso=virtualServer.registerSubResource(SSO_PATH,AliasOperationTransformer.replaceLastElement(SSO_ALIAS));
  TransformersSubRegistration accessLog=virtualServer.registerSubResource(ACCESS_LOG_PATH,AliasOperationTransformer.replaceLastElement(ACCESS_LOG_ALIAS));
  TransformersSubRegistration accessLogDir=accessLog.registerSubResource(DIRECTORY_PATH,AliasOperationTransformer.create(new AddressTransformer(){
    @Override public PathAddress transformAddress(    PathAddress address){
      PathAddress copy=PathAddress.EMPTY_ADDRESS;
      for (      PathElement element : address) {
        if (element.getKey().equals(Constants.CONFIGURATION)) {
          copy=copy.append(ACCESS_LOG_ALIAS);
        }
 else         if (element.getKey().equals(Constants.SETTING)) {
          copy=copy.append(DIRECTORY_ALIAS);
        }
 else {
          copy=copy.append(element);
        }
      }
      return copy;
    }
  }
));
}
