{
  final int defaultRedirectPort=443;
  final ResourceTransformationDescriptionBuilder subsystemRoot=TransformationDescriptionBuilder.Factory.createSubsystemInstance();
  subsystemRoot.discardChildResource(VALVE_PATH);
  subsystemRoot.addChildResource(JSP_CONFIGURATION_PATH).getAttributeBuilder().addRejectCheck(RejectAttributeChecker.SIMPLE_EXPRESSIONS,WebJSPDefinition.JSP_ATTRIBUTES);
  subsystemRoot.addChildResource(STATIC_RESOURCES_PATH).getAttributeBuilder().addRejectCheck(RejectAttributeChecker.SIMPLE_EXPRESSIONS,WebStaticResources.STATIC_ATTRIBUTES);
  subsystemRoot.addChildResource(CONTAINER_PATH).getAttributeBuilder().addRejectCheck(RejectAttributeChecker.SIMPLE_EXPRESSIONS,WebContainerDefinition.CONTAINER_ATTRIBUTES);
  final ResourceTransformationDescriptionBuilder connectorBuilder=subsystemRoot.addChildResource(CONNECTOR_PATH);
  connectorBuilder.getAttributeBuilder().addRejectCheck(RejectAttributeChecker.SIMPLE_EXPRESSIONS,WebConnectorDefinition.CONNECTOR_ATTRIBUTES).addRejectCheck(new RejectAttributeChecker.DefaultRejectAttributeChecker(){
    @Override protected boolean rejectAttribute(    PathAddress address,    String attributeName,    ModelNode attributeValue,    TransformationContext context){
      return attributeValue.isDefined();
    }
    @Override public String getRejectionLogMessage(    Map<String,ModelNode> attributes){
      return WebMessages.MESSAGES.transformationVersion_1_1_0_JBPAPP_9314();
    }
  }
,Constants.VIRTUAL_SERVER).setValueConverter(new AttributeConverter.DefaultAttributeConverter(){
    @Override protected void convertAttribute(    PathAddress address,    String attributeName,    ModelNode attributeValue,    TransformationContext context){
      if (!attributeValue.isDefined()) {
        attributeValue.set(defaultRedirectPort);
      }
    }
  }
,WebConnectorDefinition.REDIRECT_PORT.getName()).end().addOperationTransformationOverride(UNDEFINE_ATTRIBUTE_OPERATION).inheritResourceAttributeDefinitions().setCustomOperationTransformer(new OperationTransformer(){
    @Override public TransformedOperation transformOperation(    TransformationContext context,    PathAddress address,    ModelNode operation) throws OperationFailedException {
      final String attributeName=operation.require(NAME).asString();
      if (WebConnectorDefinition.REDIRECT_PORT.getName().equals(attributeName)) {
        final ModelNode transformed=new ModelNode();
        transformed.get(OP).set(WRITE_ATTRIBUTE_OPERATION);
        transformed.get(OP_ADDR).set(address.toModelNode());
        transformed.get(NAME).set(attributeName);
        transformed.get(VALUE).set(defaultRedirectPort);
        return new TransformedOperation(transformed,OperationResultTransformer.ORIGINAL_RESULT);
      }
      return new TransformedOperation(operation,OperationResultTransformer.ORIGINAL_RESULT);
    }
  }
);
  connectorBuilder.addChildRedirection(SSL_PATH,SSL_ALIAS).getAttributeBuilder().addRejectCheck(RejectAttributeChecker.SIMPLE_EXPRESSIONS,WebSSLDefinition.SSL_ATTRIBUTES).end();
  final ResourceTransformationDescriptionBuilder hostBuilder=subsystemRoot.addChildResource(HOST_PATH).getAttributeBuilder().addRejectCheck(RejectAttributeChecker.SIMPLE_EXPRESSIONS,WebVirtualHostDefinition.DEFAULT_WEB_MODULE).end();
  final ResourceTransformationDescriptionBuilder rewriteBuilder=hostBuilder.addChildResource(REWRITE_PATH).getAttributeBuilder().addRejectCheck(RejectAttributeChecker.SIMPLE_EXPRESSIONS,WebReWriteDefinition.FLAGS,WebReWriteDefinition.PATTERN,WebReWriteDefinition.SUBSTITUTION).end();
  rewriteBuilder.addChildResource(REWRITECOND_PATH).getAttributeBuilder().addRejectCheck(RejectAttributeChecker.SIMPLE_EXPRESSIONS,WebReWriteConditionDefinition.ATTRIBUTES);
  hostBuilder.addChildRedirection(SSO_PATH,SSO_ALIAS).getAttributeBuilder().addRejectCheck(RejectAttributeChecker.SIMPLE_EXPRESSIONS,WebSSODefinition.SSO_ATTRIBUTES).end();
  final ResourceTransformationDescriptionBuilder accessLogBuilder=hostBuilder.addChildRedirection(ACCESS_LOG_PATH,ACCESS_LOG_ALIAS).getAttributeBuilder().addRejectCheck(RejectAttributeChecker.SIMPLE_EXPRESSIONS,WebAccessLogDefinition.ACCESS_LOG_ATTRIBUTES).end();
  accessLogBuilder.addChildRedirection(DIRECTORY_PATH,DIRECTORY_ALIAS);
  TransformationDescription.Tools.register(subsystemRoot.build(),registration,ModelVersion.create(1,1,0));
}
