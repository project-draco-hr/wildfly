{
  final int defaultRedirectPort=443;
  final TransformersSubRegistration transformers=registration.registerModelTransformers(ModelVersion.create(1,1,0),ResourceTransformer.DEFAULT);
  transformers.registerSubResource(VALVE_PATH,true);
  rejectExpressions(transformers,JSP_CONFIGURATION_PATH,WebJSPDefinition.ATTRIBUTES_MAP.keySet());
  rejectExpressions(transformers,STATIC_RESOURCES_PATH,WebStaticResources.STATIC_ATTRIBUTES);
  final RejectExpressionValuesChainedTransformer reject=new RejectExpressionValuesChainedTransformer(WebConnectorDefinition.CONNECTOR_ATTRIBUTES);
  final TransformersSubRegistration connectors=transformers.registerSubResource(CONNECTOR_PATH,new ChainedResourceTransformer(reject));
  connectors.registerOperationTransformer(ADD,new ChainedOperationTransformer(new OperationTransformer(){
    @Override public TransformedOperation transformOperation(    final TransformationContext context,    final PathAddress address,    final ModelNode operation) throws OperationFailedException {
      final ModelNode transformedOperation;
      if (!operation.hasDefined(WebConnectorDefinition.REDIRECT_PORT.getName())) {
        transformedOperation=operation.clone();
        transformedOperation.get(WebConnectorDefinition.REDIRECT_PORT.getName()).set(defaultRedirectPort);
      }
 else {
        transformedOperation=operation;
      }
      final boolean hasDefinedVirtualServer=operation.hasDefined(Constants.VIRTUAL_SERVER);
      return new TransformedOperation(operation,new OperationRejectionPolicy(){
        @Override public boolean rejectOperation(        ModelNode preparedResult){
          return hasDefinedVirtualServer;
        }
        @Override public String getFailureDescription(){
          return WebMessages.MESSAGES.transformationVersion_1_1_0_JBPAPP_9314();
        }
      }
,OperationResultTransformer.ORIGINAL_RESULT);
    }
  }
,reject));
  connectors.registerOperationTransformer(WRITE_ATTRIBUTE_OPERATION,new ChainedOperationTransformer(new OperationTransformer(){
    @Override public TransformedOperation transformOperation(    final TransformationContext context,    final PathAddress address,    final ModelNode operation) throws OperationFailedException {
      final String attributeName=operation.get(NAME).asString();
      final ModelNode transformedOperation;
      if (WebConnectorDefinition.REDIRECT_PORT.getName().equals(attributeName) && !operation.hasDefined(VALUE)) {
        transformedOperation=operation.clone();
        transformedOperation.get(VALUE).set(defaultRedirectPort);
      }
 else {
        transformedOperation=operation;
      }
      final boolean isVirtualServer=operation.get(NAME).asString().equals(Constants.VIRTUAL_SERVER);
      return new TransformedOperation(operation,new OperationRejectionPolicy(){
        @Override public boolean rejectOperation(        ModelNode preparedResult){
          return isVirtualServer;
        }
        @Override public String getFailureDescription(){
          return WebMessages.MESSAGES.transformationVersion_1_1_0_JBPAPP_9314();
        }
      }
,OperationResultTransformer.ORIGINAL_RESULT);
    }
  }
,reject.getWriteAttributeTransformer()));
  final TransformersSubRegistration virtualHost=rejectExpressions(transformers,HOST_PATH,WebVirtualHostDefinition.DEFAULT_WEB_MODULE);
  rejectExpressions(virtualHost,SSL_PATH,WebSSLDefinition.SSL_ATTRIBUTES);
  rejectExpressions(virtualHost,ACCESS_LOG_PATH,WebAccessLogDefinition.ACCESS_LOG_ATTRIBUTES);
  final TransformersSubRegistration rewritePath=rejectExpressions(virtualHost,REWRITE_PATH,WebReWriteDefinition.FLAGS,WebReWriteDefinition.PATTERN,WebReWriteDefinition.SUBSTITUTION);
  rejectExpressions(rewritePath,REWRITECOND_PATH,WebReWriteConditionDefinition.FLAGS,WebReWriteConditionDefinition.PATTERN);
  rejectExpressions(virtualHost,SSO_PATH,WebSSODefinition.SSO_ATTRIBUTES);
  TransformersSubRegistration ssl=connectors.registerSubResource(SSL_PATH,AliasOperationTransformer.replaceLastElement(SSL_ALIAS));
  TransformersSubRegistration virtualServer=transformers.registerSubResource(HOST_PATH);
  TransformersSubRegistration sso=virtualServer.registerSubResource(SSO_PATH,AliasOperationTransformer.replaceLastElement(SSO_ALIAS));
  TransformersSubRegistration accessLog=virtualServer.registerSubResource(ACCESS_LOG_PATH,AliasOperationTransformer.replaceLastElement(ACCESS_LOG_ALIAS));
  TransformersSubRegistration accessLogDir=accessLog.registerSubResource(DIRECTORY_PATH,AliasOperationTransformer.create(new AddressTransformer(){
    @Override public PathAddress transformAddress(    PathAddress address){
      PathAddress copy=PathAddress.EMPTY_ADDRESS;
      for (      PathElement element : address) {
        if (element.getKey().equals(Constants.CONFIGURATION)) {
          copy=copy.append(ACCESS_LOG_ALIAS);
        }
 else         if (element.getKey().equals(Constants.SETTING)) {
          copy=copy.append(DIRECTORY_ALIAS);
        }
 else {
          copy=copy.append(element);
        }
      }
      return copy;
    }
  }
));
}
