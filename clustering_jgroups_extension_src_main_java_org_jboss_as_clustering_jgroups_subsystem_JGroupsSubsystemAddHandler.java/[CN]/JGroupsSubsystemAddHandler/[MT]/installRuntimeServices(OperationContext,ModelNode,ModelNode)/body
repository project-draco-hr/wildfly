{
  ServiceTarget target=context.getServiceTarget();
  ProtocolDefaultsService.build(target).setInitialMode(ON_DEMAND).install();
  String defaultChannel=ModelNodes.asString(JGroupsSubsystemResourceDefinition.DEFAULT_CHANNEL.resolveModelAttribute(context,model));
  if ((defaultChannel != null) && !defaultChannel.equals(ChannelService.DEFAULT)) {
    new AliasServiceBuilder<>(ChannelService.getServiceName(ChannelService.DEFAULT),ChannelService.getServiceName(defaultChannel),Channel.class).build(target).install();
    new AliasServiceBuilder<>(ConnectedChannelService.getServiceName(ChannelService.DEFAULT),ConnectedChannelService.getServiceName(defaultChannel),Channel.class).build(target).install();
    new AliasServiceBuilder<>(ChannelService.getFactoryServiceName(ChannelService.DEFAULT),ChannelService.getFactoryServiceName(defaultChannel),ChannelFactory.class).build(target).install();
    for (    GroupServiceInstaller installer : ServiceLoader.load(ClusteredGroupServiceInstaller.class,ClusteredGroupServiceInstaller.class.getClassLoader())) {
      Iterator<ServiceName> names=installer.getServiceNames(defaultChannel).iterator();
      for (      ServiceName name : installer.getServiceNames(ChannelService.DEFAULT)) {
        new AliasServiceBuilder<>(name,names.next(),Object.class).build(target).install();
      }
    }
  }
  String defaultStack=ModelNodes.asString(JGroupsSubsystemResourceDefinition.DEFAULT_STACK.resolveModelAttribute(context,model));
  if ((defaultStack != null) && !defaultStack.equals(ChannelFactoryService.DEFAULT)) {
    new AliasServiceBuilder<>(ChannelFactoryService.getServiceName(ChannelFactoryService.DEFAULT),ChannelFactoryService.getServiceName(defaultStack),ChannelFactory.class).build(target).install();
  }
}
