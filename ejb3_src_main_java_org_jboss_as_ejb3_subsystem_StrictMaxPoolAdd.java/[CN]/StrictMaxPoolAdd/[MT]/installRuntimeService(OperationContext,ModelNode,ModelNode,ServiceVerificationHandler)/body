{
  final String poolName=PathAddress.pathAddress(operation.get(ModelDescriptionConstants.ADDRESS)).getLastElement().getValue();
  final int maxPoolSize=StrictMaxPoolResourceDefinition.MAX_POOL_SIZE.resolveModelAttribute(context,strictMaxPoolModel).asInt();
  final Derive derive=StrictMaxPoolResourceDefinition.parseDeriveSize(context,strictMaxPoolModel);
  final long timeout=StrictMaxPoolResourceDefinition.INSTANCE_ACQUISITION_TIMEOUT.resolveModelAttribute(context,strictMaxPoolModel).asLong();
  final String unit=StrictMaxPoolResourceDefinition.INSTANCE_ACQUISITION_TIMEOUT_UNIT.resolveModelAttribute(context,strictMaxPoolModel).asString();
  final StrictMaxPoolConfigService poolConfigService=new StrictMaxPoolConfigService(poolName,maxPoolSize,derive,timeout,TimeUnit.valueOf(unit));
  final ServiceName serviceName=StrictMaxPoolConfigService.EJB_POOL_CONFIG_BASE_SERVICE_NAME.append(poolName);
  ServiceBuilder<PoolConfig> svcBuilder=context.getServiceTarget().addService(serviceName,poolConfigService);
  if (verificationHandler != null) {
    svcBuilder.addListener(verificationHandler);
  }
  if (context.hasOptionalCapability(IO_MAX_THREADS_RUNTIME_CAPABILITY_NAME,null,null)) {
    ServiceName name=context.getCapabilityServiceName(IO_MAX_THREADS_RUNTIME_CAPABILITY_NAME,Integer.class);
    svcBuilder.addDependency(name,Integer.class,poolConfigService.getMaxThreadsInjector());
  }
  return svcBuilder.install();
}
