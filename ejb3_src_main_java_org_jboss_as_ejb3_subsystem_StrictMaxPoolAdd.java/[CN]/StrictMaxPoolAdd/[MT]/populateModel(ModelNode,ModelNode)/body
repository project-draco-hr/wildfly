{
  final String poolName=PathAddress.pathAddress(operation.get(ModelDescriptionConstants.ADDRESS)).getLastElement().getValue();
  strictMaxPoolModel.get(EJB3SubsystemModel.NAME).set(poolName);
  if (operation.hasDefined(EJB3SubsystemModel.MAX_POOL_SIZE)) {
    int maxPoolSize=operation.get(EJB3SubsystemModel.MAX_POOL_SIZE).asInt();
    if (maxPoolSize <= 0) {
      throw new IllegalArgumentException("Invalid value: " + maxPoolSize + " for "+ EJB3SubsystemModel.MAX_POOL_SIZE);
    }
    strictMaxPoolModel.get(EJB3SubsystemModel.MAX_POOL_SIZE).set(maxPoolSize);
  }
  if (operation.hasDefined(INSTANCE_ACQUISITION_TIMEOUT)) {
    long instanceAcquisitionTimeout=operation.get(INSTANCE_ACQUISITION_TIMEOUT).asLong();
    if (instanceAcquisitionTimeout <= 0) {
      throw new IllegalArgumentException("Invalid value: " + instanceAcquisitionTimeout + " for "+ INSTANCE_ACQUISITION_TIMEOUT);
    }
    strictMaxPoolModel.get(INSTANCE_ACQUISITION_TIMEOUT).set(instanceAcquisitionTimeout);
  }
  if (operation.hasDefined(INSTANCE_ACQUISITION_TIMEOUT_UNIT)) {
    String instanceAcquisitionTimeoutUnit=operation.get(INSTANCE_ACQUISITION_TIMEOUT_UNIT).asString();
    if (!this.isValidTimeoutUnit(instanceAcquisitionTimeoutUnit)) {
      throw new IllegalArgumentException("Invalid value: " + instanceAcquisitionTimeoutUnit + " for "+ INSTANCE_ACQUISITION_TIMEOUT_UNIT);
    }
    strictMaxPoolModel.get(INSTANCE_ACQUISITION_TIMEOUT_UNIT).set(instanceAcquisitionTimeoutUnit.trim().toUpperCase(Locale.ENGLISH));
  }
}
