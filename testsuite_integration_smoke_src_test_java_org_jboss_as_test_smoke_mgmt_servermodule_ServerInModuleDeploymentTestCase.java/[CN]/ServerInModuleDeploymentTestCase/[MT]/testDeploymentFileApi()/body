{
  final JavaArchive archive=ShrinkWrapUtils.createJavaArchive("servermodule/test-deployment.sar",Simple.class.getPackage());
  final JavaArchive archive2=ShrinkWrapUtils.createJavaArchive("servermodule/test-deployment.sar",Simple.class.getPackage());
  archive2.addAsManifestResource(new File(getClass().getResource("/servermodule/test-deployment.sar/marker.txt").toURI()));
  final ModelControllerClient client=managementClient.getControllerClient();
  final ServerDeploymentManager manager=ServerDeploymentManager.Factory.create(client);
  testDeployments(client,false,new DeploymentExecutor(){
    @Override public void initialDeploy() throws IOException {
      Future<?> future=manager.execute(manager.newDeploymentPlan().add("test-deployment.sar",exportArchive(archive)).deploy("test-deployment.sar").build());
      awaitDeploymentExecution(future);
    }
    @Override public void fullReplace() throws IOException {
      Future<?> future=manager.execute(manager.newDeploymentPlan().replace("test-deployment.sar",exportArchive(archive2)).build());
      awaitDeploymentExecution(future);
    }
    @Override public void undeploy(){
      Future<?> future=manager.execute(manager.newDeploymentPlan().undeploy("test-deployment.sar").remove("test-deployment.sar").build());
      awaitDeploymentExecution(future);
    }
    private File exportArchive(    JavaArchive archive){
      final File dir=new File("target/archives");
      dir.mkdirs();
      final File file=new File(dir,"test-deployment.sar");
      if (file.exists()) {
        file.delete();
      }
      archive.as(ZipExporter.class).exportTo(file,true);
      return file;
    }
  }
);
}
