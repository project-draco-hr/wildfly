{
  final String ref=PatchUtils.readRef(getCumulativeLink());
  final List<String> patches=PatchUtils.readRefs(getCumulativeRefs(ref));
  return new PatchInfo(){
    @Override public String getVersion(){
      return AbstractPatchableTarget.this.getVersion();
    }
    @Override public String getCumulativeID(){
      return ref;
    }
    @Override public List<String> getPatchIDs(){
      return patches;
    }
    @Override public File[] getPatchingPath(){
      throw new IllegalStateException();
    }
    @Override public File[] getModulePath(){
      final List<File> path=new ArrayList<File>();
      for (      final String patch : patches) {
        path.add(getModulePatchDirectory(patch));
      }
      if (!BASE.equals(ref)) {
        path.add(getModulePatchDirectory(ref));
      }
      path.add(getModulesBase());
      return path.toArray(new File[path.size()]);
    }
    @Override public File[] getBundlePath(){
      final List<File> path=new ArrayList<File>();
      for (      final String patch : patches) {
        path.add(getBundlesPatchDirectory(patch));
      }
      if (!BASE.equals(ref)) {
        path.add(getBundlesPatchDirectory(ref));
      }
      path.add(getBundlesBase());
      return path.toArray(new File[path.size()]);
    }
  }
;
}
