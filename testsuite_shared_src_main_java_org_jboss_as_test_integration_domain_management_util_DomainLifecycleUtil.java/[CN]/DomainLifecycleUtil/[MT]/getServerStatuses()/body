{
  Map<ServerIdentity,ControlledProcessState.State> result=new HashMap<ServerIdentity,ControlledProcessState.State>();
  ModelNode op=new ModelNode();
  op.get("operation").set("read-children-names");
  op.get("child-type").set("server-config");
  op.get("address").add("host",configuration.getHostName());
  ModelNode opResult=executeForResult(new OperationBuilder(op).build());
  Set<String> servers=new HashSet<String>();
  for (  ModelNode server : opResult.asList()) {
    servers.add(server.asString());
  }
  for (  String server : servers) {
    ModelNode address=new ModelNode();
    address.add("host",configuration.getHostName());
    address.add("server-config",server);
    String group=readAttribute("group",address).resolve().asString();
    if (!readAttribute("auto-start",address).resolve().asBoolean()) {
      continue;
    }
    final ServerIdentity id=new ServerIdentity(configuration.getHostName(),group,server);
    if (!readAttribute("status",address).asString().equals("STARTED")) {
      result.put(id,ControlledProcessState.State.STARTING);
      continue;
    }
    address=new ModelNode();
    address.add("host",configuration.getHostName());
    address.add("server",server);
    ControlledProcessState.State status=Enum.valueOf(ControlledProcessState.State.class,readAttribute("server-state",address).asString().toUpperCase(Locale.ENGLISH));
    result.put(id,status);
  }
  return result;
}
