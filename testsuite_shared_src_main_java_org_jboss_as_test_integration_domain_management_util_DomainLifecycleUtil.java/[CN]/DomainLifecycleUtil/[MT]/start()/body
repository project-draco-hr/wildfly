{
  try {
    configuration.validate();
    final String address=NetworkUtils.formatPossibleIpv6Address(configuration.getHostControllerManagementAddress());
    final int port=configuration.getHostControllerManagementPort();
    final URI connectionURI=new URI("remote://" + address + ":"+ port);
    connection=clientConfiguration.createConnection(connectionURI,getCallbackHandler());
    String jbossHomeDir=configuration.getJbossHome();
    final List<String> additionalJavaOpts=new ArrayList<String>();
    final String jbossOptions=System.getProperty("jboss.options");
    if (jbossOptions != null) {
      Collections.addAll(additionalJavaOpts,jbossOptions.split("\\s+"));
    }
    if (configuration.getJavaVmArguments() != null) {
      Collections.addAll(additionalJavaOpts,configuration.getJavaVmArguments().split("\\s+"));
    }
    File modulesJar=new File(jbossHomeDir + File.separatorChar + "jboss-modules.jar");
    if (!modulesJar.exists())     throw new IllegalStateException("Cannot find: " + modulesJar);
    String javaHome=configuration.getJavaHome();
    String java=(javaHome != null) ? javaHome + File.separatorChar + "bin"+ File.separatorChar+ "java" : "java";
    String controllerJavaHome=configuration.getControllerJavaHome();
    String controllerJava=(controllerJavaHome != null) ? controllerJavaHome + File.separatorChar + "bin"+ File.separatorChar+ "java" : "java";
    File domainDir=configuration.getDomainDirectory() != null ? new File(configuration.getDomainDirectory()) : new File(new File(jbossHomeDir),"domain");
    String domainPath=domainDir.getAbsolutePath();
    final String modulePath;
    if (configuration.getModulePath() != null && !configuration.getModulePath().isEmpty()) {
      modulePath=configuration.getModulePath();
    }
 else {
      modulePath=jbossHomeDir + File.separatorChar + "modules";
    }
    File usersFile=new File(domainPath + "/configuration/mgmt-users.properties");
    FileOutputStream fos=new FileOutputStream(usersFile);
    PrintWriter pw=new PrintWriter(fos);
    pw.println("slave=" + new UsernamePasswordHashUtil().generateHashedHexURP("slave","ManagementRealm","slave_user_password".toCharArray()));
    pw.close();
    fos.close();
    File appUsersProps=new File(domainPath + "/configuration/application-users.properties");
    fos=new FileOutputStream(usersFile);
    pw=new PrintWriter(appUsersProps);
    pw.println("# Application users");
    pw.close();
    fos.close();
    File appRolesProps=new File(domainPath + "/configuration/application-roles.properties");
    fos=new FileOutputStream(usersFile);
    pw=new PrintWriter(appRolesProps);
    pw.println("# Application users");
    pw.close();
    fos.close();
    List<String> cmd=new ArrayList<String>();
    cmd.add(controllerJava);
    cmd.addAll(additionalJavaOpts);
    TestSuiteEnvironment.getIpv6Args(cmd);
    cmd.add("-Djboss.home.dir=" + jbossHomeDir);
    cmd.add("-Dorg.jboss.boot.log.file=" + domainPath + "/log/process-controller.log");
    cmd.add("-Dlogging.configuration=file:" + jbossHomeDir + "/domain/configuration/logging.properties");
    cmd.add("-jar");
    cmd.add(modulesJar.getAbsolutePath());
    cmd.add("-mp");
    cmd.add(modulePath);
    cmd.add("org.jboss.as.process-controller");
    cmd.add("-jboss-home");
    cmd.add(jbossHomeDir);
    cmd.add("-jvm");
    cmd.add(controllerJava);
    cmd.add("--");
    cmd.add("-Dorg.jboss.boot.log.file=" + domainPath + "/log/host-controller.log");
    cmd.add("-Dlogging.configuration=file:" + jbossHomeDir + "/domain/configuration/logging.properties");
    TestSuiteEnvironment.getIpv6Args(cmd);
    cmd.addAll(additionalJavaOpts);
    cmd.add("--");
    cmd.add("-default-jvm");
    cmd.add(java);
    if (configuration.getHostCommandLineProperties() != null) {
      Collections.addAll(cmd,configuration.getHostCommandLineProperties().split("\\s+"));
    }
    if (configuration.isAdminOnly()) {
      cmd.add("--admin-only");
    }
    String domainDirectory=configuration.getDomainDirectory();
    if (domainDirectory != null) {
      cmd.add("-Djboss.domain.base.dir=" + domainDirectory);
    }
 else {
      domainDirectory=domainPath;
    }
    if (configuration.getDomainConfigFile() != null) {
      String name=copyConfigFile(new File(configuration.getDomainConfigFile()),new File(domainDirectory,"configuration"));
      if (configuration.isReadOnlyDomain()) {
        cmd.add("--read-only-domain-config=" + name);
      }
 else {
        cmd.add("--domain-config=" + name);
      }
    }
    if (configuration.getHostConfigFile() != null) {
      String name=copyConfigFile(new File(configuration.getHostConfigFile()),new File(domainDirectory,"configuration"));
      if (configuration.isReadOnlyHost()) {
        cmd.add("--read-only-host-config=" + name);
      }
 else {
        cmd.add("--host-config=" + name);
      }
    }
    if (configuration.getHostControllerManagementAddress() != null) {
      cmd.add("--interprocess-hc-address");
      cmd.add(configuration.getHostControllerManagementAddress());
      cmd.add("--pc-address");
      cmd.add(configuration.getHostControllerManagementAddress());
    }
    final String workingDir=configuration.getDomainDirectory();
    final ProcessWrapper wrapper=new ProcessWrapper(configuration.getHostName(),cmd,Collections.<String,String>emptyMap(),workingDir);
    wrapper.start();
    process=wrapper;
    long start=System.currentTimeMillis();
    if (configuration.isAdminOnly()) {
      awaitHostController(start);
      log.info("HostController started in " + (System.currentTimeMillis() - start) + " ms");
    }
 else {
      TimeUnit.SECONDS.sleep(2);
      awaitServers(start);
      log.info("All servers started in " + (System.currentTimeMillis() - start) + " ms");
    }
  }
 catch (  Exception e) {
    throw new RuntimeException("Could not start container",e);
  }
}
