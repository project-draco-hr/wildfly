{
  List<PersistenceProvider> providerList=persistenceProviderDeploymentHolder != null ? persistenceProviderDeploymentHolder.getProviders() : null;
  if (providerList != null) {
    for (    PersistenceProvider persistenceProvider : providerList) {
      if (persistenceProvider.getClass().getName().equals(pu.getPersistenceProviderClassName())) {
        JPA_LOGGER.tracef("deployment %s is using %s",deploymentUnit.getName(),pu.getPersistenceProviderClassName());
        return persistenceProvider;
      }
    }
  }
  String configuredPersistenceProviderModule=pu.getProperties().getProperty(Configuration.PROVIDER_MODULE);
  String persistenceProviderClassName=pu.getPersistenceProviderClassName();
  if (persistenceProviderClassName == null) {
    persistenceProviderClassName=Configuration.PROVIDER_CLASS_DEFAULT;
  }
  if (configuredPersistenceProviderModule != null) {
    try {
      List<PersistenceProvider> providers=PersistenceProviderLoader.loadProviderModuleByName(configuredPersistenceProviderModule);
      PersistenceProviderDeploymentHolder.savePersistenceProviderInDeploymentUnit(deploymentUnit,providers,null);
      PersistenceProvider provider=getProviderByName(pu,providers);
      if (provider != null) {
        return provider;
      }
    }
 catch (    ModuleLoadException e) {
      throw JpaMessages.MESSAGES.cannotLoadPersistenceProviderModule(e,configuredPersistenceProviderModule,persistenceProviderClassName);
    }
  }
  String providerNameDerivedFromClassName=Configuration.getProviderModuleNameFromProviderClassName(persistenceProviderClassName);
  PersistenceProvider provider=getProviderByName(pu);
  if (provider == null && providerNameDerivedFromClassName != null) {
    try {
      List<PersistenceProvider> providers=PersistenceProviderLoader.loadProviderModuleByName(providerNameDerivedFromClassName);
      PersistenceProviderDeploymentHolder.savePersistenceProviderInDeploymentUnit(deploymentUnit,providers,null);
      provider=getProviderByName(pu,providers);
    }
 catch (    ModuleLoadException e) {
      throw JpaMessages.MESSAGES.cannotLoadPersistenceProviderModule(e,providerNameDerivedFromClassName,persistenceProviderClassName);
    }
  }
  if (provider == null)   throw JpaMessages.MESSAGES.persistenceProviderNotFound(persistenceProviderClassName);
  return provider;
}
