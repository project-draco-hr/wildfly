{
  ROOT_LOGGER.activatingSubsystem();
  ServiceTarget target=context.getServiceTarget();
  new ProtocolDefaultsBuilder().build(target).install();
  String defaultChannel=ModelNodes.asString(DEFAULT_CHANNEL.getDefinition().resolveModelAttribute(context,model),GroupServiceNameFactory.DEFAULT_GROUP);
  if (!defaultChannel.equals(GroupServiceNameFactory.DEFAULT_GROUP)) {
    for (    ChannelServiceNameFactory factory : ChannelServiceName.values()) {
      new AliasServiceBuilder<>(factory.getServiceName(),factory.getServiceName(defaultChannel),Object.class).build(target).install();
    }
    new BinderServiceBuilder<>(JGroupsBindingFactory.createChannelBinding(GroupServiceNameFactory.DEFAULT_GROUP),ChannelServiceName.CHANNEL.getServiceName(defaultChannel),Channel.class).build(target).install();
    new AliasServiceBuilder<>(ProtocolStackServiceName.CHANNEL_FACTORY.getServiceName(GroupServiceNameFactory.DEFAULT_GROUP),ProtocolStackServiceName.CHANNEL_FACTORY.getServiceName(defaultChannel),ChannelFactory.class).build(target).install();
    new BinderServiceBuilder<>(JGroupsBindingFactory.createChannelFactoryBinding(GroupServiceNameFactory.DEFAULT_GROUP),ProtocolStackServiceName.CHANNEL_FACTORY.getServiceName(defaultChannel),ChannelFactory.class).build(target).install();
    for (    GroupBuilderProvider provider : ServiceLoader.load(DistributedGroupBuilderProvider.class,DistributedGroupBuilderProvider.class.getClassLoader())) {
      Iterator<Builder<?>> groupBuilders=provider.getBuilders(defaultChannel,null).iterator();
      for (      Builder<?> groupBuilder : provider.getBuilders(GroupServiceNameFactory.DEFAULT_GROUP,null)) {
        new AliasServiceBuilder<>(groupBuilder.getServiceName(),groupBuilders.next().getServiceName(),Object.class).build(target).install();
      }
    }
  }
}
