{
  String name=brNode.getAttribute("name");
  String queueName=XMLConfigurationUtil.getString(brNode,"queue-name",null,Validators.NOT_NULL_OR_EMPTY);
  String forwardingAddress=XMLConfigurationUtil.getString(brNode,"forwarding-address",null,Validators.NO_CHECK);
  String transformerClassName=XMLConfigurationUtil.getString(brNode,"transformer-class-name",null,Validators.NO_CHECK);
  long retryInterval=XMLConfigurationUtil.getLong(brNode,"retry-interval",HornetQClient.DEFAULT_RETRY_INTERVAL,Validators.GT_ZERO);
  int confirmationWindowSize=XMLConfigurationUtil.getInteger(brNode,"confirmation-window-size",FileConfiguration.DEFAULT_CONFIRMATION_WINDOW_SIZE,Validators.GT_ZERO);
  double retryIntervalMultiplier=XMLConfigurationUtil.getDouble(brNode,"retry-interval-multiplier",HornetQClient.DEFAULT_RETRY_INTERVAL_MULTIPLIER,Validators.GT_ZERO);
  int reconnectAttempts=XMLConfigurationUtil.getInteger(brNode,"reconnect-attempts",ConfigurationImpl.DEFAULT_BRIDGE_RECONNECT_ATTEMPTS,Validators.MINUS_ONE_OR_GE_ZERO);
  boolean failoverOnServerShutdown=XMLConfigurationUtil.getBoolean(brNode,"failover-on-server-shutdown",HornetQClient.DEFAULT_FAILOVER_ON_SERVER_SHUTDOWN);
  boolean useDuplicateDetection=XMLConfigurationUtil.getBoolean(brNode,"use-duplicate-detection",ConfigurationImpl.DEFAULT_BRIDGE_DUPLICATE_DETECTION);
  String user=XMLConfigurationUtil.getString(brNode,"user",ConfigurationImpl.DEFAULT_CLUSTER_USER,Validators.NO_CHECK);
  String password=XMLConfigurationUtil.getString(brNode,"password",ConfigurationImpl.DEFAULT_CLUSTER_PASSWORD,Validators.NO_CHECK);
  String filterString=null;
  Pair<String,String> connectorPair=null;
  String discoveryGroupName=null;
  NodeList children=brNode.getChildNodes();
  for (int j=0; j < children.getLength(); j++) {
    Node child=children.item(j);
    if (child.getNodeName().equals("filter")) {
      filterString=child.getAttributes().getNamedItem("string").getNodeValue();
    }
 else     if (child.getNodeName().equals("discovery-group-ref")) {
      discoveryGroupName=child.getAttributes().getNamedItem("discovery-group-name").getNodeValue();
    }
 else     if (child.getNodeName().equals("connector-ref")) {
      String connectorName=child.getAttributes().getNamedItem("connector-name").getNodeValue();
      Node backupNode=child.getAttributes().getNamedItem("backup-connector-name");
      String backupConnectorName=null;
      if (backupNode != null) {
        backupConnectorName=backupNode.getNodeValue();
      }
      connectorPair=new Pair<String,String>(connectorName,backupConnectorName);
    }
  }
  BridgeConfiguration config;
  if (connectorPair != null) {
    config=new BridgeConfiguration(name,queueName,forwardingAddress,filterString,transformerClassName,retryInterval,retryIntervalMultiplier,reconnectAttempts,failoverOnServerShutdown,useDuplicateDetection,confirmationWindowSize,HornetQClient.DEFAULT_CLIENT_FAILURE_CHECK_PERIOD,connectorPair,user,password);
  }
 else {
    config=new BridgeConfiguration(name,queueName,forwardingAddress,filterString,transformerClassName,retryInterval,retryIntervalMultiplier,reconnectAttempts,failoverOnServerShutdown,useDuplicateDetection,confirmationWindowSize,HornetQClient.DEFAULT_CLIENT_FAILURE_CHECK_PERIOD,discoveryGroupName,user,password);
  }
  mainConfig.getBridgeConfigurations().add(config);
}
