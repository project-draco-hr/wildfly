{
  super(reader);
  System.out.println("Begin " + reader.getLocation() + reader.getLocalName());
  int tag=reader.getEventType();
  String localName=null;
  do {
    tag=reader.nextTag();
    localName=reader.getLocalName();
    final org.jboss.as.messaging.Element element=org.jboss.as.messaging.Element.forName(reader.getLocalName());
    System.out.println(localName + " -> " + element+ ", event="+ StaxEvent.tagToEvent(tag));
switch (element) {
case ACCEPTORS:
      AcceptorsElement acceptors=new AcceptorsElement(reader,config);
    break;
case ADDRESS_SETTINGS:
  AddressSettingsElement ase=new AddressSettingsElement(reader,config);
break;
case ASYNC_CONNECTION_EXECUTION_ENABLED:
break;
case BACKUP:
break;
case BACKUP_CONNECTOR_REF:
break;
case BINDINGS_DIRECTORY:
{
String text=reader.getElementText();
if (text != null && text.length() > 0) {
config.setBindingsDirectory(text);
}
}
break;
case BROADCAST_PERIOD:
break;
case CLUSTERED:
{
String text=reader.getElementText();
if (text != null && text.length() > 0) {
config.setClustered(Boolean.getBoolean(text));
}
}
break;
case CLUSTER_PASSWORD:
break;
case CLUSTER_USER:
break;
case CONNECTION_TTL_OVERRIDE:
break;
case CONNECTORS:
ConnectorsElement connectors=new ConnectorsElement(reader,config);
break;
case CONNECTOR_REF:
break;
case CREATE_BINDINGS_DIR:
break;
case CREATE_JOURNAL_DIR:
break;
case FILE_DEPLOYMENT_ENABLED:
break;
case GROUP_ADDRESS:
break;
case GROUP_PORT:
break;
case GROUPING_HANDLER:
break;
case ID_CACHE_SIZE:
break;
case JMX_DOMAIN:
break;
case JMX_MANAGEMENT_ENABLED:
break;
case JOURNAL_BUFFER_SIZE:
break;
case JOURNAL_BUFFER_TIMEOUT:
break;
case JOURNAL_COMPACT_MIN_FILES:
break;
case JOURNAL_COMPACT_PERCENTAGE:
break;
case JOURNAL_DIRECTORY:
{
String text=reader.getElementText();
if (text != null && text.length() > 0) {
config.setJournalDirectory(text);
}
}
break;
case JOURNAL_MIN_FILES:
{
String text=reader.getElementText();
if (text != null && text.length() > 0) {
config.setJournalMinFiles(Integer.valueOf(text));
}
}
break;
case JOURNAL_SYNC_NON_TRANSACTIONAL:
break;
case JOURNAL_SYNC_TRANSACTIONAL:
break;
case JOURNAL_TYPE:
break;
case JOURNAL_FILE_SIZE:
break;
case JOURNAL_MAX_IO:
break;
case LARGE_MESSAGES_DIRECTORY:
{
String text=reader.getElementText();
if (text != null && text.length() > 0) {
config.setLargeMessagesDirectory(text);
}
}
break;
case LOCAL_BIND_ADDRESS:
break;
case LOCAL_BIND_PORT:
break;
case LOG_JOURNAL_WRITE_RATE:
break;
case MANAGEMENT_ADDRESS:
break;
case MANAGEMENT_NOTIFICATION_ADDRESS:
break;
case MEMORY_MEASURE_INTERVAL:
break;
case MEMORY_WARNING_THRESHOLD:
break;
case MESSAGE_COUNTER_ENABLED:
break;
case MESSAGE_COUNTER_MAX_DAY_HISTORY:
break;
case MESSAGE_COUNTER_SAMPLE_PERIOD:
break;
case MESSAGE_EXPIRY_SCAN_PERIOD:
break;
case MESSAGE_EXPIRY_THREAD_PRIORITY:
break;
case PAGING_DIRECTORY:
{
String text=reader.getElementText();
if (text != null && text.length() > 0) {
config.setPagingDirectory(text);
}
}
break;
case PERF_BLAST_PAGES:
break;
case PERSIST_DELIVERY_COUNT_BEFORE_DELIVERY:
break;
case PERSIST_ID_CACHE:
break;
case PERSISTENCE_ENABLED:
break;
case REFRESH_TIMEOUT:
break;
case REMOTING_INTERCEPTORS:
break;
case RUN_SYNC_SPEED_TEST:
break;
case SECURITY_ENABLED:
break;
case SECURITY_INVALIDATION_INTERVAL:
break;
case SECURITY_SETTINGS:
SecuritySettingsElement sse=new SecuritySettingsElement(reader,config);
break;
case SERVER_DUMP_INTERVAL:
break;
case SHARED_STORE:
break;
case TRANSACTION_TIMEOUT:
break;
case TRANSACTION_TIMEOUT_SCAN_PERIOD:
break;
case WILD_CARD_ROUTING_ENABLED:
break;
case DEAD_LETTER_ADDRESS_NODE_NAME:
break;
case EXPIRY_ADDRESS_NODE_NAME:
break;
case REDELIVERY_DELAY_NODE_NAME:
break;
case MAX_DELIVERY_ATTEMPTS:
break;
case MAX_SIZE_BYTES_NODE_NAME:
break;
case ADDRESS_FULL_MESSAGE_POLICY_NODE_NAME:
break;
case PAGE_SIZE_BYTES_NODE_NAME:
break;
case MESSAGE_COUNTER_HISTORY_DAY_LIMIT_NODE_NAME:
break;
case LVQ_NODE_NAME:
break;
case REDISTRIBUTION_DELAY_NODE_NAME:
break;
case SEND_TO_DLA_ON_NO_ROUTE:
break;
case SUBSYSTEM:
break;
default :
throw unexpectedElement(reader);
}
}
 while (reader.hasNext() && localName.equals("subsystem") == false);
System.out.println("End messaging:subsystem, " + reader.getLocalName() + ", hasNext: "+ reader.hasNext());
}
