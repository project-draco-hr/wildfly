{
  String initialContextFactory=INITIAL_CONTEXT_FACTORY.resolveModelAttribute(context,model).asString();
  String url=URL.resolveModelAttribute(context,model).asString();
  ModelNode searchDnNode=SEARCH_DN.resolveModelAttribute(context,model);
  String searchDn=searchDnNode.isDefined() ? searchDnNode.asString() : null;
  ModelNode searchCredentialNode=SEARCH_CREDENTIAL.resolveModelAttribute(context,model);
  String searchCredential=searchCredentialNode.isDefined() ? searchCredentialNode.asString() : null;
  ReferralHandling referralHandling=ReferralHandling.valueOf(REFERRALS.resolveModelAttribute(context,model).asString());
  final Set<URI> handlesReferralsForSet;
  ModelNode handlesReferralsFor=HANDLES_REFERRALS_FOR.resolveModelAttribute(context,model);
  if (handlesReferralsFor.isDefined()) {
    List<ModelNode> list=handlesReferralsFor.asList();
    handlesReferralsForSet=new HashSet<URI>(list.size());
    for (    ModelNode current : list) {
      try {
        handlesReferralsForSet.add(new URI(current.asString()));
      }
 catch (      URISyntaxException e) {
        throw new OperationFailedException(e);
      }
    }
  }
 else {
    handlesReferralsForSet=Collections.emptySet();
  }
  return connectionManagerService.setConfiguration(initialContextFactory,url,searchDn,searchCredential,referralHandling,handlesReferralsForSet);
}
