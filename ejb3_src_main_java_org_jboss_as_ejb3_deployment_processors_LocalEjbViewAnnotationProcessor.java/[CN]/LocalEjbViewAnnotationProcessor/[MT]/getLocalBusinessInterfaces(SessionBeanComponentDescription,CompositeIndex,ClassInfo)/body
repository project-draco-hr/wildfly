{
  Map<DotName,List<AnnotationInstance>> annotationsOnBean=sessionBeanClass.annotations();
  List<AnnotationInstance> ejbLocalAnnotations=annotationsOnBean.get(LOCAL);
  if (ejbLocalAnnotations == null || ejbLocalAnnotations.isEmpty()) {
    Collection<String> localInterfaces=this.getLocalInterfacesFromInterfaceAnnotations(sessionBeanClass,compositeIndex);
    if (!localInterfaces.isEmpty()) {
      return localInterfaces;
    }
    String defaultLocalBusinessInterface=this.getDefaultLocalInterface(sessionBeanClass,compositeIndex);
    if (defaultLocalBusinessInterface != null) {
      logger.debug("Session bean class: " + sessionBeanClass + " has no explicit local business interfaces, marking "+ defaultLocalBusinessInterface+ " as the (implicit) default local business interface");
      return Collections.singleton(defaultLocalBusinessInterface);
    }
    return Collections.emptySet();
  }
  if (ejbLocalAnnotations.size() > 1) {
    throw new RuntimeException("@Local appears more than once in EJB class: " + sessionBeanClass.name());
  }
  AnnotationInstance ejbLocalAnnotation=ejbLocalAnnotations.get(0);
  AnnotationTarget target=ejbLocalAnnotation.target();
  if (target instanceof ClassInfo == false) {
    throw new RuntimeException("@Local should only appear on a class. Target: " + target + " is not a class");
  }
  AnnotationValue ejbLocalAnnValue=ejbLocalAnnotation.value();
  if (ejbLocalAnnValue == null) {
    Set<DotName> interfaces=getPotentialBusinessInterfaces(sessionBeanClass);
    if (interfaces.size() != 1)     throw new DeploymentUnitProcessingException("Bean " + description + " specifies @Local, but does not implement 1 interface");
    return Collections.singleton(interfaces.iterator().next().toString());
  }
  final Collection<String> localBusinessInterfaces=new HashSet<String>();
  Type[] localInterfaceTypes=ejbLocalAnnValue.asClassArray();
  for (  Type localInterface : localInterfaceTypes) {
    localBusinessInterfaces.add(localInterface.name().toString());
  }
  return localBusinessInterfaces;
}
