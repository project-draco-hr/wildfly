{
  for (int i=0; i < reader.getAttributeCount(); i++) {
    String value=reader.getAttributeValue(i);
    Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case TYPE:
{
        try {
          targetClass.getClassLoader().loadClass(org.jgroups.conf.ProtocolConfiguration.protocol_prefix + '.' + value).asSubclass(targetClass).newInstance();
          protocol.get(ModelKeys.TYPE).set(value);
        }
 catch (        Exception e) {
          throw ParseUtils.invalidAttributeValue(reader,i);
        }
        break;
      }
case SHARED:
{
      protocol.get(ModelKeys.SHARED).set(Boolean.parseBoolean(value));
      break;
    }
case SOCKET_BINDING:
{
    protocol.get(ModelKeys.SOCKET_BINDING).set(value);
    break;
  }
case DIAGNOSTICS_SOCKET_BINDING:
{
  protocol.get(ModelKeys.DIAGNOSTICS_SOCKET_BINDING).set(value);
  break;
}
case DEFAULT_EXECUTOR:
{
protocol.get(ModelKeys.DEFAULT_EXECUTOR).set(value);
break;
}
case OOB_EXECUTOR:
{
protocol.get(ModelKeys.OOB_EXECUTOR).set(value);
break;
}
case TIMER_EXECUTOR:
{
protocol.get(ModelKeys.TIMER_EXECUTOR).set(value);
break;
}
case THREAD_FACTORY:
{
protocol.get(ModelKeys.THREAD_FACTORY).set(value);
break;
}
case SITE:
{
protocol.get(ModelKeys.SITE).setExpression(value);
break;
}
case RACK:
{
protocol.get(ModelKeys.RACK).setExpression(value);
break;
}
case MACHINE:
{
protocol.get(ModelKeys.MACHINE).setExpression(value);
break;
}
default :
{
throw ParseUtils.unexpectedAttribute(reader,i);
}
}
}
if (!protocol.hasDefined(ModelKeys.TYPE)) {
throw ParseUtils.missingRequired(reader,Collections.singleton(Attribute.TYPE));
}
while (reader.hasNext() && (reader.nextTag() != XMLStreamConstants.END_ELEMENT)) {
if (Element.forName(reader.getLocalName()) != Element.PROPERTY) {
throw ParseUtils.unexpectedElement(reader);
}
int attributes=reader.getAttributeCount();
String property=null;
for (int i=0; i < attributes; i++) {
String value=reader.getAttributeValue(i);
Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case NAME:
{
property=value;
break;
}
default :
{
throw ParseUtils.unexpectedAttribute(reader,i);
}
}
}
if (property == null) {
throw ParseUtils.missingRequired(reader,Collections.singleton(Attribute.NAME));
}
String value=reader.getElementText();
protocol.get(ModelKeys.PROPERTY).add(property,value);
}
}
