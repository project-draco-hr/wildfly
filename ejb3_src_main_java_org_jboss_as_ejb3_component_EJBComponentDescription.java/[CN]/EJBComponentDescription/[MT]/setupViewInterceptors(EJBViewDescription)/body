{
  view.getConfigurators().add(new ViewConfigurator(){
    @Override public void configure(    DeploymentPhaseContext context,    ComponentConfiguration componentConfiguration,    ViewDescription description,    ViewConfiguration viewConfiguration) throws DeploymentUnitProcessingException {
      viewConfiguration.addViewInterceptor(LoggingInterceptor.FACTORY,InterceptorOrder.View.EJB_EXCEPTION_LOGGING_INTERCEPTOR);
      viewConfiguration.addViewInterceptor(new ImmediateInterceptorFactory(new TCCLInterceptor(componentConfiguration.getModuleClassLoader())),InterceptorOrder.View.TCCL_INTERCEPTOR);
      if (view.getMethodIntf() == MethodIntf.LOCAL && EJBLocalObject.class.isAssignableFrom(viewConfiguration.getViewClass())) {
        viewConfiguration.addViewInterceptor(EjbExceptionTransformingInterceptorFactories.LOCAL_INSTANCE,InterceptorOrder.View.REMOTE_EXCEPTION_TRANSFORMER);
      }
 else       if (view.getMethodIntf() == MethodIntf.LOCAL_HOME) {
        viewConfiguration.addViewInterceptor(EjbExceptionTransformingInterceptorFactories.LOCAL_INSTANCE,InterceptorOrder.View.REMOTE_EXCEPTION_TRANSFORMER);
      }
      final List<SetupAction> ejbSetupActions=context.getDeploymentUnit().getAttachmentList(Attachments.OTHER_EE_SETUP_ACTIONS);
      if (!ejbSetupActions.isEmpty()) {
        viewConfiguration.addViewInterceptor(AdditionalSetupInterceptor.factory(ejbSetupActions),InterceptorOrder.View.EE_SETUP);
      }
    }
  }
);
  this.addCurrentInvocationContextFactory(view);
  this.setupSecurityInterceptors(view);
  this.setupRemoteViewInterceptors(view);
  view.getConfigurators().addFirst(new NamespaceViewConfigurator());
}
