{
  final HashMap<Integer,InterceptorFactory> interceptorFactories=new HashMap<>(2);
  final Set<String> roles=new HashSet<>();
  interceptorFactories.put(InterceptorOrder.View.SECURITY_CONTEXT,SecurityDomainInterceptorFactory.INSTANCE);
  interceptorFactories.put(InterceptorOrder.View.POLICY_CONTEXT,new ImmediateInterceptorFactory(new PolicyContextIdInterceptor(policyContextID)));
  if (runAsPrincipal != null) {
    interceptorFactories.put(InterceptorOrder.View.RUN_AS_PRINCIPAL,new ImmediateInterceptorFactory(new RunAsPrincipalInterceptor(runAsPrincipal)));
    final Set<String> extraRoles=securityRoles.getSecurityRoleNamesByPrincipal(runAsPrincipal);
    if (!extraRoles.isEmpty()) {
      interceptorFactories.put(InterceptorOrder.View.EXTRA_PRINCIPAL_ROLES,new ImmediateInterceptorFactory(new RoleAddingInterceptor("ejb",RoleMapper.constant(Roles.fromSet(extraRoles)))));
      roles.addAll(extraRoles);
    }
  }
  if (runAsRole != null) {
    interceptorFactories.put(InterceptorOrder.View.RUN_AS_ROLE,new ImmediateInterceptorFactory(new RoleAddingInterceptor("ejb",RoleMapper.constant(Roles.fromSet(Collections.singleton(runAsRole))))));
    roles.add(runAsRole);
  }
  if (!roles.isEmpty()) {
    interceptorFactories.put(InterceptorOrder.View.SECURITY_IDENTITY_OUTFLOW,new IdentityOutflowInterceptorFactory("ejb",RoleMapper.constant(Roles.fromSet(roles))));
  }
 else {
    interceptorFactories.put(InterceptorOrder.View.SECURITY_IDENTITY_OUTFLOW,IdentityOutflowInterceptorFactory.INSTANCE);
  }
  RoleMapper.constant(Roles.fromSet(getDeclaredRoles()));
  return interceptorFactories;
}
