{
  super(componentName,componentClassName,ejbJarDescription.getEEModuleDescription(),deploymentUnitServiceName);
  this.descriptorData=descriptorData;
  if (ejbJarDescription.isWar()) {
    setNamingMode(ComponentNamingMode.USE_MODULE);
  }
 else {
    setNamingMode(ComponentNamingMode.CREATE);
  }
  getConfigurators().addFirst(new NamespaceConfigurator());
  getConfigurators().add(new EjbJarConfigurationConfigurator());
  this.addDependency(EJBUtilities.SERVICE_NAME,ServiceBuilder.DependencyType.REQUIRED);
  this.addCurrentInvocationContextFactory();
  this.addRemoteTransactionsRepositoryDependency();
  this.transactionAttributes=new ApplicableMethodInformation<TransactionAttributeType>(componentName,TransactionAttributeType.REQUIRED);
  this.transactionTimeouts=new ApplicableMethodInformation<Integer>(componentName,null);
  this.descriptorMethodPermissions=new ApplicableMethodInformation<EJBMethodSecurityAttribute>(componentName,null);
  this.annotationMethodPermissions=new ApplicableMethodInformation<EJBMethodSecurityAttribute>(componentName,null);
  addDependency(deploymentUnitServiceName.append(ModuleDeployment.SERVICE_NAME),ServiceBuilder.DependencyType.REQUIRED);
  getConfigurators().add(new ComponentConfigurator(){
    @Override public void configure(    final DeploymentPhaseContext context,    final ComponentDescription description,    final ComponentConfiguration configuration) throws DeploymentUnitProcessingException {
      if (description.getNamingMode() == ComponentNamingMode.CREATE) {
        description.getBindingConfigurations().add(new BindingConfiguration("java:comp/env",new ContextInjectionSource("env","java:comp/env")));
      }
      final List<SetupAction> ejbSetupActions=context.getDeploymentUnit().getAttachmentList(Attachments.OTHER_EE_SETUP_ACTIONS);
      if (description.isTimerServiceApplicable()) {
        if (!ejbSetupActions.isEmpty()) {
          configuration.addTimeoutViewInterceptor(AdditionalSetupInterceptor.factory(ejbSetupActions),InterceptorOrder.View.EE_SETUP);
        }
        configuration.addTimeoutViewInterceptor(new ImmediateInterceptorFactory(new TCCLInterceptor(configuration.getModuleClassLoader())),InterceptorOrder.View.TCCL_INTERCEPTOR);
        configuration.addTimeoutViewInterceptor(configuration.getNamespaceContextInterceptorFactory(),InterceptorOrder.View.JNDI_NAMESPACE_INTERCEPTOR);
        configuration.addTimeoutViewInterceptor(CurrentInvocationContextInterceptor.FACTORY,InterceptorOrder.View.INVOCATION_CONTEXT_INTERCEPTOR);
        if (isSecurityEnabled()) {
          configuration.addTimeoutViewInterceptor(new SecurityContextInterceptorFactory(),InterceptorOrder.View.SECURITY_CONTEXT);
        }
        for (        final Method method : configuration.getClassIndex().getClassMethods()) {
          configuration.addTimeoutViewInterceptor(method,new ImmediateInterceptorFactory(new ComponentDispatcherInterceptor(method)),InterceptorOrder.View.COMPONENT_DISPATCHER);
        }
      }
      if (!ejbSetupActions.isEmpty()) {
        configuration.getStartDependencies().add(new DependencyConfigurator<ComponentStartService>(){
          @Override public void configureDependency(          final ServiceBuilder<?> serviceBuilder,          final ComponentStartService service) throws DeploymentUnitProcessingException {
            for (            final SetupAction setupAction : ejbSetupActions) {
              serviceBuilder.addDependencies(setupAction.dependencies());
            }
          }
        }
);
      }
    }
  }
);
}
