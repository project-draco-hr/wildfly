{
  super(componentName,componentClassName,ejbJarDescription.getEEModuleDescription(),deploymentUnitServiceName);
  if (ejbJarDescription.isWar()) {
    setNamingMode(ComponentNamingMode.USE_MODULE);
  }
 else {
    setNamingMode(ComponentNamingMode.CREATE);
  }
  getConfigurators().addFirst(new NamespaceConfigurator());
  getConfigurators().add(new EjbJarConfigurationConfigurator());
  this.addDependency(EJBUtilities.SERVICE_NAME,ServiceBuilder.DependencyType.REQUIRED);
  this.addCurrentInvocationContextFactory();
  this.addRemoteTransactionsRepositoryDependency();
  this.transactionAttributes=new ApplicableMethodInformation<TransactionAttributeType>(componentName,TransactionAttributeType.REQUIRED);
  this.transactionTimeouts=new ApplicableMethodInformation<TransactionTimeout>(componentName,null);
  this.methodPermissions=new ApplicableMethodInformation<EJBMethodSecurityAttribute>(componentName,null);
  getConfigurators().add(new ComponentConfigurator(){
    @Override public void configure(    final DeploymentPhaseContext context,    final ComponentDescription description,    final ComponentConfiguration configuration) throws DeploymentUnitProcessingException {
      if (description.isTimerServiceApplicable()) {
        configuration.addTimeoutViewInterceptor(new ImmediateInterceptorFactory(new TCCLInterceptor(configuration.getModuleClassLoder())),InterceptorOrder.View.TCCL_INTERCEPTOR);
        configuration.addTimeoutViewInterceptor(configuration.getNamespaceContextInterceptorFactory(),InterceptorOrder.View.JNDI_NAMESPACE_INTERCEPTOR);
        configuration.addTimeoutViewInterceptor(CurrentInvocationContextInterceptor.FACTORY,InterceptorOrder.View.INVOCATION_CONTEXT_INTERCEPTOR);
        if (isSecurityEnabled()) {
          configuration.addTimeoutViewInterceptor(new SecurityContextInterceptorFactory(),InterceptorOrder.View.SECURITY_CONTEXT);
        }
        for (        final Method method : configuration.getClassIndex().getClassMethods()) {
          configuration.addTimeoutViewInterceptor(method,new ImmediateInterceptorFactory(new ComponentDispatcherInterceptor(method)),InterceptorOrder.View.COMPONENT_DISPATCHER);
        }
      }
    }
  }
);
}
