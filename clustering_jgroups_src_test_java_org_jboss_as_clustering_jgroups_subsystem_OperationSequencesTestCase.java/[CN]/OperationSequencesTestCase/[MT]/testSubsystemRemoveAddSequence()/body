{
  ServiceName maximal=ServiceName.of("jboss","jgroups","stack","maximal");
  ServiceName defaults=ServiceName.of("jboss","jgroups","defaults");
  ServiceName defaultStack=ServiceName.of("jboss","jgroups","stack");
  String subsystemXml=getSubsystemXml();
  KernelServices servicesA=createKernelServicesBuilder(null).setSubsystemXml(subsystemXml).build();
  Assert.assertTrue("jboss.jgroups.stack.maximal MSC service not present",isMSCServicePresent(servicesA,maximal));
  Assert.assertTrue("jboss.jgroups.defaults MSC service not present",isMSCServicePresent(servicesA,defaults));
  Assert.assertTrue("jboss.jgroups.stack MSC service not present",isMSCServicePresent(servicesA,defaultStack));
  ModelNode result=servicesA.executeOperation(removeSubsystemOp);
  Assert.assertEquals("failure description: " + result.get(FAILURE_DESCRIPTION).toString(),SUCCESS,result.get(OUTCOME).asString());
  Assert.assertFalse("jboss.jgroups.stack.maximal MSC service present",isMSCServicePresent(servicesA,maximal));
  Assert.assertFalse("jboss.jgroups.defaults MSC service present",isMSCServicePresent(servicesA,defaults));
  Assert.assertFalse("jboss.jgroups.stack MSC service present",isMSCServicePresent(servicesA,defaultStack));
  result=servicesA.executeOperation(addSubsystemOp);
  Assert.assertEquals("failure description: " + result.get(FAILURE_DESCRIPTION).toString(),SUCCESS,result.get(OUTCOME).asString());
  Assert.assertTrue("jboss.jgroups.defaults MSC service not present",isMSCServicePresent(servicesA,defaults));
  Assert.assertTrue("jboss.jgroups.stack MSC service not present",isMSCServicePresent(servicesA,defaultStack));
  result=servicesA.executeOperation(removeSubsystemOp);
  Assert.assertEquals("failure description: " + result.get(FAILURE_DESCRIPTION).toString(),SUCCESS,result.get(OUTCOME).asString());
}
