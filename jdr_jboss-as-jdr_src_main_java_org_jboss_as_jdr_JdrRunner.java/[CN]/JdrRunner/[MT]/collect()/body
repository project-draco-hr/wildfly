{
  try {
    this.env.setZip(new JdrZipFile(new JdrEnvironment(this.env)));
  }
 catch (  Exception e) {
    ROOT_LOGGER.error(ROOT_LOGGER.couldNotCreateZipfile(),e);
    throw new OperationFailedException(JdrLogger.ROOT_LOGGER.couldNotCreateZipfile());
  }
  List<JdrCommand> commands=new ArrayList<JdrCommand>();
  ByteArrayOutputStream versionStream=new ByteArrayOutputStream();
  PrintWriter versionWriter=new PrintWriter(new OutputStreamWriter(versionStream));
  versionWriter.println("JDR: " + Namespace.CURRENT.getUriString());
  try {
    InputStream is=this.getClass().getClassLoader().getResourceAsStream("plugins.properties");
    Properties plugins=new Properties();
    plugins.load(is);
    for (    String pluginName : plugins.stringPropertyNames()) {
      Class pluginClass=Class.forName(pluginName);
      JdrPlugin plugin=(JdrPlugin)pluginClass.newInstance();
      commands.addAll(plugin.getCommands());
      versionWriter.println(plugin.getPluginId());
    }
    versionWriter.close();
    this.env.getZip().add(new ByteArrayInputStream(versionStream.toByteArray()),"version.txt");
  }
 catch (  Exception e) {
    ROOT_LOGGER.error(ROOT_LOGGER.couldNotConfigureJDR(),e);
    throw new OperationFailedException(ROOT_LOGGER.couldNotConfigureJDR());
  }
  if (commands.size() < 1) {
    ROOT_LOGGER.error(JdrLogger.ROOT_LOGGER.noCommandsToRun());
    throw new OperationFailedException(JdrLogger.ROOT_LOGGER.noCommandsToRun());
  }
  JdrReport report=new JdrReport();
  StringBuilder skips=new StringBuilder();
  report.setStartTime();
  for (  JdrCommand command : commands) {
    command.setEnvironment(new JdrEnvironment(this.env));
    try {
      command.execute();
    }
 catch (    Throwable t) {
      String message="Skipping command " + command.toString();
      ROOT_LOGGER.debugf(message);
      skips.append(message);
      PrintWriter pw=new PrintWriter(new StringWriter());
      t.printStackTrace(pw);
      skips.append(pw.toString());
      pw.close();
    }
  }
  try {
    this.env.getZip().addLog(skips.toString(),"skips.log");
  }
 catch (  Exception e) {
    ROOT_LOGGER.debugf(e,"Could not add skipped commands log to jdr zip file.");
  }
  try {
    this.env.getZip().close();
  }
 catch (  Exception e) {
    ROOT_LOGGER.debugf(e,"Could not close zip file.");
  }
  report.setEndTime();
  report.setLocation(this.env.getZip().name());
  try {
    ctx.terminateSession();
  }
 catch (  Exception e) {
  }
  return report;
}
