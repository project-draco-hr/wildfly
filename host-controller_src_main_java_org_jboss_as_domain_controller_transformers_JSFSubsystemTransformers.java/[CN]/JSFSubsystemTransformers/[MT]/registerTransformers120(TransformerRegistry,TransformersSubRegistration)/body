{
  registry.registerSubsystemTransformers(JSF_SUBSYSTEM,IGNORED_SUBSYSTEMS,new ResourceTransformer(){
    @Override public void transformResource(    ResourceTransformationContext context,    PathAddress address,    Resource resource) throws OperationFailedException {
      ModelNode model=resource.getModel();
      if (model.hasDefined(SLOT_ATTRIBUTE_NAME)) {
        ModelNode slot=model.get(SLOT_ATTRIBUTE_NAME);
        if (!SLOT_DEFAULT_VALUE.equals(slot.asString())) {
          context.getLogger().logWarning(address,SLOT_ATTRIBUTE_NAME,MESSAGES.invalidJSFSlotValue(slot.asString()));
        }
      }
      Set<String> attributes=new HashSet<String>();
      for (      Property prop : resource.getModel().asPropertyList()) {
        attributes.add(prop.getName());
      }
      attributes.remove(SLOT_ATTRIBUTE_NAME);
      if (!attributes.isEmpty()) {
        context.getLogger().logWarning(address,ControllerMessages.MESSAGES.attributesAreNotUnderstoodAndWillBeIgnored(),attributes);
      }
    }
  }
);
  TransformersSubRegistration jsfSubsystem=parent.registerSubResource(PathElement.pathElement(SUBSYSTEM,JSF_SUBSYSTEM));
  jsfSubsystem.registerOperationTransformer(WRITE_ATTRIBUTE_OPERATION,new OperationTransformer(){
    @Override public TransformedOperation transformOperation(    TransformationContext context,    PathAddress address,    ModelNode operation) throws OperationFailedException {
      final String name=operation.require(NAME).asString();
      final ModelNode value=operation.get(ModelDescriptionConstants.VALUE);
      if (!SLOT_ATTRIBUTE_NAME.equals(name)) {
        context.getLogger().logWarning(address,ControllerMessages.MESSAGES.attributesAreNotUnderstoodAndWillBeIgnored(),name);
        return DISCARD.transformOperation(context,address,operation);
      }
      if (value.isDefined() && value.equals(SLOT_DEFAULT_VALUE)) {
        return DISCARD.transformOperation(context,address,operation);
      }
 else {
        OperationRejectionPolicy rejectionPolicy=new OperationRejectionPolicy(){
          @Override public boolean rejectOperation(          ModelNode preparedResult){
            return true;
          }
          @Override public String getFailureDescription(){
            return MESSAGES.invalidJSFSlotValue(value.asString());
          }
        }
;
        return new TransformedOperation(operation,rejectionPolicy,OperationResultTransformer.ORIGINAL_RESULT);
      }
    }
  }
);
  jsfSubsystem.registerOperationTransformer(UNDEFINE_ATTRIBUTE_OPERATION,new OperationTransformer(){
    @Override public TransformedOperation transformOperation(    TransformationContext context,    PathAddress address,    ModelNode operation) throws OperationFailedException {
      String attributeName=operation.require(NAME).asString();
      if (!SLOT_ATTRIBUTE_NAME.equals(attributeName)) {
        return DEFAULT.transformOperation(context,address,operation);
      }
 else {
        context.getLogger().logWarning(address,ControllerMessages.MESSAGES.attributesAreNotUnderstoodAndWillBeIgnored(),attributeName);
        return DISCARD.transformOperation(context,address,operation);
      }
    }
  }
);
}
