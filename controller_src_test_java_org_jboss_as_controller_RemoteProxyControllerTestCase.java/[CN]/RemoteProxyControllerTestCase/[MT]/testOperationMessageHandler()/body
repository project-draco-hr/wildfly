{
  final CountDownLatch executeLatch=new CountDownLatch(1);
  final MockModelController controller=new MockModelController(){
    @Override public ModelNode execute(    ModelNode operation,    OperationMessageHandler handler,    OperationTransactionControl control,    OperationAttachments attachments){
      this.operation=operation;
      handler.handleReport(MessageSeverity.INFO,"Test1");
      handler.handleReport(MessageSeverity.INFO,"Test2");
      control.operationPrepared(new OperationTransaction(){
        @Override public void rollback(){
        }
        @Override public void commit(){
        }
      }
,new ModelNode());
      executeLatch.countDown();
      return new ModelNode();
    }
  }
;
  final NewRemoteProxyController proxyController=setupProxyHandlers(controller);
  ModelNode operation=new ModelNode();
  operation.get("test").set("123");
  final BlockingQueue<String> messages=new LinkedBlockingQueue<String>();
  proxyController.execute(operation,new OperationMessageHandler(){
    @Override public void handleReport(    MessageSeverity severity,    String message){
      if (severity == MessageSeverity.INFO && message.startsWith("Test")) {
        messages.add(message);
      }
    }
  }
,NoopProxyOperationControl.INSTANCE,null);
  executeLatch.await();
  assertEquals("123",controller.getOperation().get("test").asString());
  assertEquals("Test1",messages.take());
  assertEquals("Test2",messages.take());
}
