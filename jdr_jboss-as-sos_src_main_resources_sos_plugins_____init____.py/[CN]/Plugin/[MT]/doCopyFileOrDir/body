def doCopyFileOrDir(self, srcpath, dest=None, sub=None):
    'Copy file or directory to the destination tree. If a directory, then\n        everything below it is recursively copied. A list of copied files are\n        saved for use later in preparing a report.  sub can be used to rename\n        the destination of the file, sub should be a two-tuple of (old,new).\n        For example if you passed in ("etc","configurations") for use against\n        /etc/my_file.conf the file would end up at\n        /configurations/my_file.conf.\n        '
    if self.cInfo['cmdlineopts'].profiler:
        start_time = time()
    if self._path_in_path_list(srcpath, self.forbiddenPaths):
        self.soslog.debug(('%s is in the forbidden path list' % srcpath))
        return ''
    if (not os.path.exists(srcpath)):
        self.soslog.debug(('file or directory %s does not exist' % srcpath))
        return
    if (not dest):
        dest = srcpath
    if sub:
        (old, new) = sub
        dest = srcpath.replace(old, new)
    if os.path.islink(srcpath):
        self.copy_symlink(srcpath, sub=sub)
        return
    elif os.path.isdir(srcpath):
        self.copy_dir(srcpath, sub=sub)
        return
    self.soslog.debug(('copying file %s to %s' % (srcpath, dest)))
    try:
        self.archive.add_file(srcpath, dest)
        self.copiedFiles.append({'srcpath': srcpath, 'dstpath': dest, 'symlink': 'no', })
        if self.cInfo['cmdlineopts'].profiler:
            time_passed = (time() - start_time)
            self.proflog.debug(('copied: %-75s time: %f' % (srcpath, time_passed)))
    except Exception as e:
        self.soslog.error(('Unable to copy %s to %s' % (srcpath, dest)))
        self.soslog.error(traceback.format_exc())
