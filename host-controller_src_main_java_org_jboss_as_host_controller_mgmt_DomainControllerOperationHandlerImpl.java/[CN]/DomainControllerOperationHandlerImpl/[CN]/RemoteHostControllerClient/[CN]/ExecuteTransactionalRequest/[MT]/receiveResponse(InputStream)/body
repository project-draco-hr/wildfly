{
  try {
    LOOP:     while (true) {
      int command=input.read();
switch (command) {
case ModelControllerClientProtocol.PARAM_HANDLE_RESULT_FRAGMENT:
{
          expectHeader(input,ModelControllerClientProtocol.PARAM_LOCATION);
          int length=StreamUtils.readInt(input);
          String[] location=new String[length];
          for (int i=0; i < length; i++) {
            location[i]=StreamUtils.readUTFZBytes(input);
          }
          expectHeader(input,ModelControllerClientProtocol.PARAM_OPERATION);
          ModelNode node=readNode(input);
          handler.handleResultFragment(location,node);
          break;
        }
case ModelControllerClientProtocol.PARAM_HANDLE_CANCELLATION:
{
        handler.handleCancellation();
        break LOOP;
      }
case ModelControllerClientProtocol.PARAM_HANDLE_RESULT_FAILED:
{
      expectHeader(input,ModelControllerClientProtocol.PARAM_OPERATION);
      ModelNode node=readNode(input);
      handler.handleFailed(node);
      break LOOP;
    }
case ModelControllerClientProtocol.PARAM_HANDLE_RESULT_COMPLETE:
{
    expectHeader(input,ModelControllerClientProtocol.PARAM_OPERATION);
    ModelNode node=readNode(input);
    handler.handleResultComplete();
    break LOOP;
  }
case ModelControllerClientProtocol.PARAM_REQUEST_ID:
{
  result.setAsynchronousId(StreamUtils.readInt(input));
  break;
}
default :
{
throw new IllegalStateException("Unknown response code " + command);
}
}
}
}
 catch (Exception e) {
handler.handleFailed(new ModelNode().set(e.toString()));
}
return null;
}
