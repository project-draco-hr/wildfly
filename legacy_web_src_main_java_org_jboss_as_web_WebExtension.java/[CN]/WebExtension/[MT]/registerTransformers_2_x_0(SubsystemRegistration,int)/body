{
  final ResourceTransformationDescriptionBuilder subsystemRoot=TransformationDescriptionBuilder.Factory.createSubsystemInstance();
  subsystemRoot.getAttributeBuilder().addRejectCheck(RejectAttributeChecker.DEFINED,WebDefinition.DEFAULT_SESSION_TIMEOUT).setDiscard(new DiscardAttributeChecker.DiscardAttributeValueChecker(false,true,new ModelNode(30)),WebDefinition.DEFAULT_SESSION_TIMEOUT).end();
  final ResourceTransformationDescriptionBuilder hostBuilder=subsystemRoot.addChildResource(HOST_PATH);
  final ResourceTransformationDescriptionBuilder ssoBuilder=hostBuilder.addChildResource(SSO_PATH);
  ssoBuilder.getAttributeBuilder().addRejectCheck(RejectAttributeChecker.DEFINED,WebSSODefinition.HTTP_ONLY).setDiscard(new DiscardAttributeChecker.DiscardAttributeValueChecker(false,true,new ModelNode(true)),WebSSODefinition.HTTP_ONLY).end();
  if (minor == 0) {
    final ResourceTransformationDescriptionBuilder connectorBuilder=subsystemRoot.addChildResource(CONNECTOR_PATH);
    connectorBuilder.getAttributeBuilder().addRejectCheck(RejectAttributeChecker.DEFINED,WebConnectorDefinition.PROXY_BINDING,WebConnectorDefinition.REDIRECT_BINDING).setDiscard(DiscardAttributeChecker.UNDEFINED,WebSSLDefinition.SSL_PROTOCOL,WebConnectorDefinition.PROXY_BINDING,WebConnectorDefinition.REDIRECT_BINDING).end();
    connectorBuilder.addChildResource(SSL_PATH).getAttributeBuilder().addRejectCheck(RejectAttributeChecker.UNDEFINED,WebSSLDefinition.CIPHER_SUITE).end();
  }
  TransformationDescription.Tools.register(subsystemRoot.build(),registration,ModelVersion.create(2,minor,0));
}
