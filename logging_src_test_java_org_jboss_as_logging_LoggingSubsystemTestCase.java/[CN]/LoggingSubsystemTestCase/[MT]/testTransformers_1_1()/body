{
  final String subsystemXml=getSubsystemXml();
  final ModelVersion modelVersion=ModelVersion.create(1,1,0);
  final KernelServicesBuilder builder=createKernelServicesBuilder(LoggingTestEnvironment.getManagementInstance()).setSubsystemXml(subsystemXml);
  builder.createLegacyKernelServicesBuilder(LoggingTestEnvironment.getManagementInstance(),modelVersion).addMavenResourceURL("org.jboss.as:jboss-as-logging:7.1.2.Final");
  KernelServices mainServices=builder.build();
  Assert.assertTrue(mainServices.isSuccessfulBoot());
  Assert.assertTrue(mainServices.getLegacyServices(modelVersion).isSuccessfulBoot());
  final ModelNode legacyModel=checkSubsystemModelTransformation(mainServices,modelVersion);
  final PathAddress consoleAddress=createConsoleHandlerAddress("CONSOLE");
  final ModelNode consoleHandler=legacyModel.get(consoleAddress.getElement(0).getKey(),consoleAddress.getElement(0).getValue(),consoleAddress.getElement(1).getKey(),consoleAddress.getElement(1).getValue());
  String formatPattern=consoleHandler.get(CommonAttributes.FORMATTER.getName()).asString();
  Assert.assertFalse("Pattern (" + formatPattern + ") contains a color attribute not supported in legacy models.",COLOR_PATTERN.matcher(formatPattern).find());
  ModelNode op=Operations.createWriteAttributeOperation(consoleAddress.toModelNode(),CommonAttributes.FORMATTER,"%K{level}" + formatPattern);
  executeTransformOperation(mainServices,modelVersion,op);
  validateLegacyFormatter(mainServices,modelVersion,consoleAddress.toModelNode());
  op=Operations.createOperation(AbstractHandlerDefinition.UPDATE_OPERATION_NAME,consoleAddress.toModelNode());
  op.get(CommonAttributes.FORMATTER.getName()).set("%K{level}" + formatPattern);
  executeTransformOperation(mainServices,modelVersion,op);
  validateLegacyFormatter(mainServices,modelVersion,consoleAddress.toModelNode());
  final String filterExpression="not(match(\"ARJUNA\\\\d\"))";
  op=Operations.createWriteAttributeOperation(consoleAddress.toModelNode(),CommonAttributes.FILTER_SPEC,filterExpression);
  executeTransformOperation(mainServices,modelVersion,op);
  validateLegacyFilter(mainServices,modelVersion,consoleAddress.toModelNode(),filterExpression);
  op=Operations.createOperation(AbstractHandlerDefinition.UPDATE_OPERATION_NAME,consoleAddress.toModelNode());
  op.get(CommonAttributes.FILTER_SPEC.getName()).set(filterExpression);
  executeTransformOperation(mainServices,modelVersion,op);
  validateLegacyFilter(mainServices,modelVersion,consoleAddress.toModelNode(),filterExpression);
  final PathAddress loggerAddress=createLoggerAddress("org.jboss.as.logging");
  op=Operations.createReadResourceOperation(loggerAddress.toModelNode());
  if (!Operations.successful(mainServices.executeOperation(op))) {
    op=Operations.createAddOperation(loggerAddress.toModelNode());
    executeTransformOperation(mainServices,modelVersion,op);
  }
  op=Operations.createWriteAttributeOperation(loggerAddress.toModelNode(),CommonAttributes.FILTER_SPEC,filterExpression);
  executeTransformOperation(mainServices,modelVersion,op);
  validateLegacyFilter(mainServices,modelVersion,loggerAddress.toModelNode(),filterExpression);
}
