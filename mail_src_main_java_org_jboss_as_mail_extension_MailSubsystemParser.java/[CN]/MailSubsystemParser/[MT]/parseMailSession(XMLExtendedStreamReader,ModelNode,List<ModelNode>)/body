{
  log.debug("parsing mail session");
  String jndiName=null;
  Boolean debug=null;
  for (int i=0; i < reader.getAttributeCount(); i++) {
    Attribute attr=Attribute.forName(reader.getAttributeLocalName(i));
    String value=reader.getAttributeValue(i);
    if (attr == Attribute.JNDI_NAME) {
      jndiName=value;
      log.tracef("jndi name: %s",jndiName);
    }
    if (attr == Attribute.DEBUG) {
      debug=Boolean.parseBoolean(value.trim());
    }
  }
  if (jndiName == null) {
    throw ParseUtils.missingRequired(reader,Collections.singleton(Attribute.JNDI_NAME));
  }
  ModelNode op=new ModelNode();
  op.get(OP).set(ADD);
  op.get(OP_ADDR).set(subsystemAddr.clone()).add(ModelKeys.MAIL_SESSION,jndiName);
  if (debug != null) {
    op.get(ModelKeys.DEBUG).set(debug);
  }
  op.get(ModelKeys.JNDI_NAME).set(jndiName);
  while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
switch (Namespace.forUri(reader.getNamespaceURI())) {
case MAIL_1_0:
{
        final Element element=Element.forName(reader.getLocalName());
switch (element) {
case SMTP_SERVER:
{
            op.get(ModelKeys.SMTP_SERVER).set(parseServerConfig(reader));
            break;
          }
case POP3_SERVER:
{
          op.get(ModelKeys.POP3_SERVER).set(parseServerConfig(reader));
          break;
        }
case IMAP_SERVER:
{
        op.get(ModelKeys.IMAP_SERVER).set(parseServerConfig(reader));
        break;
      }
default :
{
      reader.handleAny(list);
      break;
    }
}
break;
}
default :
{
throw unexpectedElement(reader);
}
}
}
list.add(op);
}
