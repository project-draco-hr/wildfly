{
  final ModelNode operation=Util.createAddOperation(parent);
  list.add(operation);
  String name=null;
  for (int i=0; i < reader.getAttributeCount(); i++) {
    Attribute attr=Attribute.forName(reader.getAttributeLocalName(i));
    String value=reader.getAttributeValue(i);
    if (attr == Attribute.OUTBOUND_SOCKET_BINDING_REF) {
      OUTBOUND_SOCKET_BINDING_REF_OPTIONAL.parseAndSetParameter(value,operation,reader);
    }
 else     if (attr == Attribute.SSL) {
      SSL.parseAndSetParameter(value,operation,reader);
    }
 else     if (attr == Attribute.TLS) {
      TLS.parseAndSetParameter(value,operation,reader);
    }
 else     if (attr == Attribute.NAME) {
      name=value;
    }
 else {
      throw ParseUtils.unexpectedAttribute(reader,i);
    }
  }
  while (reader.nextTag() != END_ELEMENT) {
    if ("property".equals(reader.getLocalName())) {
      final String[] array=requireAttributes(reader,org.jboss.as.controller.parsing.Attribute.NAME.getLocalName(),org.jboss.as.controller.parsing.Attribute.VALUE.getLocalName());
      MailServerDefinition.PROPERTIES.parseAndAddParameterElement(array[0],array[1],operation,reader);
    }
 else {
      throw ParseUtils.unexpectedElement(reader);
    }
  }
  if (name == null) {
    throw ParseUtils.missingRequired(reader,EnumSet.of(Attribute.NAME));
  }
  PathAddress address=parent.append(MailSubsystemModel.CUSTOM,name);
  operation.get(OP_ADDR).set(address.toModelNode());
  parseLogin(reader,operation);
}
