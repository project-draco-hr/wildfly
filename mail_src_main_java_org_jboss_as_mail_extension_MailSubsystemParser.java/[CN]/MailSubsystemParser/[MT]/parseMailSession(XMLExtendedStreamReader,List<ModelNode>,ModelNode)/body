{
  String jndiName=null;
  final ModelNode operation=new ModelNode();
  for (int i=0; i < reader.getAttributeCount(); i++) {
    Attribute attr=Attribute.forName(reader.getAttributeLocalName(i));
    String value=reader.getAttributeValue(i);
    if (attr == Attribute.JNDI_NAME) {
      log.tracef("jndi name: %s",value);
      jndiName=value;
      JNDI_NAME.parseAndSetParameter(value,operation,reader);
    }
    if (attr == Attribute.DEBUG) {
      DEBUG.parseAndSetParameter(value,operation,reader);
    }
    if (attr == Attribute.FROM) {
      FROM.parseAndSetParameter(value,operation,reader);
    }
  }
  if (jndiName == null) {
    throw ParseUtils.missingRequired(reader,EnumSet.of(Attribute.JNDI_NAME));
  }
  final ModelNode dsAddress=parent.clone();
  dsAddress.add(MAIL_SESSION,jndiName);
  dsAddress.protect();
  operation.get(OP_ADDR).set(dsAddress);
  operation.get(OP).set(ADD);
  list.add(operation);
  while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
switch (Namespace.forUri(reader.getNamespaceURI())) {
case MAIL_1_0:
{
        final Element element=Element.forName(reader.getLocalName());
switch (element) {
case SMTP_SERVER:
{
            parseServerConfig(reader,SMTP,dsAddress,list);
            break;
          }
case POP3_SERVER:
{
          parseServerConfig(reader,POP3,dsAddress,list);
          break;
        }
case IMAP_SERVER:
{
        parseServerConfig(reader,IMAP,dsAddress,list);
        break;
      }
default :
{
      reader.handleAny(list);
      break;
    }
}
break;
}
default :
{
throw unexpectedElement(reader);
}
}
}
}
