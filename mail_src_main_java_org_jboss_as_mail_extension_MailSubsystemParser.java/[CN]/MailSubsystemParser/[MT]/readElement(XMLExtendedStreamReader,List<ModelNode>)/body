{
  final ModelNode address=new ModelNode();
  address.add(ModelDescriptionConstants.SUBSYSTEM,MailExtension.SUBSYSTEM_NAME);
  address.protect();
  final ModelNode subsystem=new ModelNode();
  subsystem.get(OP).set(ADD);
  subsystem.get(OP_ADDR).set(address);
  list.add(subsystem);
  List<MailSessionConfig> sessionConfigList=new LinkedList<MailSessionConfig>();
  while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
switch (Namespace.forUri(reader.getNamespaceURI())) {
case MAIL_1_0:
{
        final Element element=Element.forName(reader.getLocalName());
switch (element) {
case MAIL_SESSION:
{
            sessionConfigList.add(parseMailSession(reader,list));
            break;
          }
default :
{
          reader.handleAny(list);
          break;
        }
    }
    break;
  }
default :
{
  throw unexpectedElement(reader);
}
}
}
for (MailSessionConfig c : sessionConfigList) {
final ModelNode dsAddress=address.clone();
dsAddress.add(ModelKeys.MAIL_SESSION,c.getJndiName());
dsAddress.protect();
final ModelNode operation=new ModelNode();
operation.get(OP_ADDR).set(dsAddress);
operation.get(OP).set(ADD);
Util.fillFrom(operation,c);
list.add(operation);
}
log.tracef("parsing done, config is: %s",sessionConfigList);
log.tracef("list is: %s",list);
}
