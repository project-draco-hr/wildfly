{
  final ModelNode fullModel=Resource.Tools.readModel(context.readResource(PathAddress.EMPTY_ADDRESS));
  SessionCookieConfig config=SessionCookieDefinition.INSTANCE.getConfig(context,fullModel.get(SessionCookieDefinition.INSTANCE.getPathElement().getKeyValuePair()));
  DevelopmentModeInfo devMode=DevelopmentModeDefinition.INSTANCE.getConfig(context,fullModel.get(SessionCookieDefinition.INSTANCE.getPathElement().getKeyValuePair()));
  final boolean allowNonStandardWrappers=ServletContainerDefinition.ALLOW_NON_STANDARD_WRAPPERS.resolveModelAttribute(context,model).asBoolean();
  final ModelNode bufferCacheValue=ServletContainerDefinition.DEFAULT_BUFFER_CACHE.resolveModelAttribute(context,model);
  final String bufferCache=bufferCacheValue.isDefined() ? bufferCacheValue.asString() : null;
  JSPConfig jspConfig=JspDefinition.INSTANCE.getConfig(context,fullModel.get(JspDefinition.INSTANCE.getPathElement().getKeyValuePair()),devMode != null);
  final ServletContainerService container=new ServletContainerService(devMode,allowNonStandardWrappers,config,jspConfig);
  final ServiceTarget target=context.getServiceTarget();
  final ServiceBuilder<ServletContainerService> builder=target.addService(UndertowService.SERVLET_CONTAINER.append(name),container);
  if (bufferCache != null) {
    builder.addDependency(BufferCacheService.SERVICE_NAME.append(bufferCache),DirectBufferCache.class,container.getBufferCacheInjectedValue());
  }
  newControllers.add(builder.setInitialMode(ServiceController.Mode.ON_DEMAND).install());
}
