{
  final ModelNode fullModel=Resource.Tools.readModel(context.readResource(PathAddress.EMPTY_ADDRESS));
  final SessionCookieConfig config=SessionCookieDefinition.INSTANCE.getConfig(context,fullModel.get(SessionCookieDefinition.INSTANCE.getPathElement().getKeyValuePair()));
  final boolean persistentSessions=PersistentSessionsDefinition.isEnabled(context,fullModel.get(PersistentSessionsDefinition.INSTANCE.getPathElement().getKeyValuePair()));
  final boolean allowNonStandardWrappers=ServletContainerDefinition.ALLOW_NON_STANDARD_WRAPPERS.resolveModelAttribute(context,model).asBoolean();
  final String bufferCache=ServletContainerDefinition.DEFAULT_BUFFER_CACHE.resolveModelAttribute(context,model).asString();
  JSPConfig jspConfig=JspDefinition.INSTANCE.getConfig(context,fullModel.get(JspDefinition.INSTANCE.getPathElement().getKeyValuePair()));
  final String stackTracesString=ServletContainerDefinition.STACK_TRACE_ON_ERROR.resolveModelAttribute(context,model).asString();
  final ModelNode defaultEncodingValue=ServletContainerDefinition.DEFAULT_ENCODING.resolveModelAttribute(context,model);
  final String defaultEncoding=defaultEncodingValue.isDefined() ? defaultEncodingValue.asString() : null;
  final boolean useListenerEncoding=ServletContainerDefinition.USE_LISTENER_ENCODING.resolveModelAttribute(context,model).asBoolean();
  final boolean ignoreFlush=ServletContainerDefinition.IGNORE_FLUSH.resolveModelAttribute(context,model).asBoolean();
  final boolean eagerFilterInit=ServletContainerDefinition.EAGER_FILTER_INIT.resolveModelAttribute(context,model).asBoolean();
  final ServletContainerService container=new ServletContainerService(allowNonStandardWrappers,ServletStackTraces.valueOf(stackTracesString.toUpperCase().replace('-','_')),config,jspConfig,defaultEncoding,useListenerEncoding,ignoreFlush,eagerFilterInit);
  final ServiceTarget target=context.getServiceTarget();
  final ServiceBuilder<ServletContainerService> builder=target.addService(UndertowService.SERVLET_CONTAINER.append(name),container);
  if (bufferCache != null) {
    builder.addDependency(BufferCacheService.SERVICE_NAME.append(bufferCache),DirectBufferCache.class,container.getBufferCacheInjectedValue());
  }
  if (persistentSessions) {
    builder.addDependency(AbstractPersistentSessionManager.SERVICE_NAME,SessionPersistenceManager.class,container.getSessionPersistenceManagerInjectedValue());
  }
  newControllers.add(builder.setInitialMode(ServiceController.Mode.ON_DEMAND).install());
}
