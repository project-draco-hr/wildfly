{
  final ModelNode fullModel=Resource.Tools.readModel(context.readResource(PathAddress.EMPTY_ADDRESS),2);
  final SessionCookieConfig config=SessionCookieDefinition.INSTANCE.getConfig(context,fullModel.get(SessionCookieDefinition.INSTANCE.getPathElement().getKeyValuePair()));
  final boolean persistentSessions=PersistentSessionsDefinition.isEnabled(context,fullModel.get(PersistentSessionsDefinition.INSTANCE.getPathElement().getKeyValuePair()));
  final boolean allowNonStandardWrappers=ServletContainerDefinition.ALLOW_NON_STANDARD_WRAPPERS.resolveModelAttribute(context,model).asBoolean();
  final boolean proactiveAuth=ServletContainerDefinition.PROACTIVE_AUTHENTICATION.resolveModelAttribute(context,model).asBoolean();
  final String bufferCache=ServletContainerDefinition.DEFAULT_BUFFER_CACHE.resolveModelAttribute(context,model).asString();
  JSPConfig jspConfig=JspDefinition.INSTANCE.getConfig(context,fullModel.get(JspDefinition.INSTANCE.getPathElement().getKeyValuePair()));
  final String stackTracesString=ServletContainerDefinition.STACK_TRACE_ON_ERROR.resolveModelAttribute(context,model).asString();
  final ModelNode defaultEncodingValue=ServletContainerDefinition.DEFAULT_ENCODING.resolveModelAttribute(context,model);
  final String defaultEncoding=defaultEncodingValue.isDefined() ? defaultEncodingValue.asString() : null;
  final boolean useListenerEncoding=ServletContainerDefinition.USE_LISTENER_ENCODING.resolveModelAttribute(context,model).asBoolean();
  final boolean ignoreFlush=ServletContainerDefinition.IGNORE_FLUSH.resolveModelAttribute(context,model).asBoolean();
  final boolean eagerFilterInit=ServletContainerDefinition.EAGER_FILTER_INIT.resolveModelAttribute(context,model).asBoolean();
  final boolean disableCachingForSecuredPages=ServletContainerDefinition.DISABLE_CACHING_FOR_SECURED_PAGES.resolveModelAttribute(context,model).asBoolean();
  Boolean directoryListingEnabled=null;
  if (model.hasDefined(Constants.DIRECTORY_LISTING)) {
    directoryListingEnabled=ServletContainerDefinition.DIRECTORY_LISTING.resolveModelAttribute(context,model).asBoolean();
  }
  final int sessionTimeout=ServletContainerDefinition.DEFAULT_SESSION_TIMEOUT.resolveModelAttribute(context,model).asInt();
  WebsocketsDefinition.WebSocketInfo info=WebsocketsDefinition.INSTANCE.getConfig(context,model);
  final Map<String,String> mimeMappings=new HashMap<>();
  if (fullModel.hasDefined(Constants.MIME_MAPPING)) {
    for (    final Property mapping : fullModel.get(Constants.MIME_MAPPING).asPropertyList()) {
      mimeMappings.put(mapping.getName(),MimeMappingDefinition.VALUE.resolveModelAttribute(context,mapping.getValue()).asString());
    }
  }
  List<String> welcomeFiles=new ArrayList<>();
  if (fullModel.hasDefined(Constants.WELCOME_FILE)) {
    for (    final Property welcome : fullModel.get(Constants.WELCOME_FILE).asPropertyList()) {
      welcomeFiles.add(welcome.getName());
    }
  }
  final ServletContainerService container=new ServletContainerService(allowNonStandardWrappers,ServletStackTraces.valueOf(stackTracesString.toUpperCase().replace('-','_')),config,jspConfig,defaultEncoding,useListenerEncoding,ignoreFlush,eagerFilterInit,sessionTimeout,disableCachingForSecuredPages,info != null,info != null && info.isDispatchToWorker(),mimeMappings,welcomeFiles,directoryListingEnabled,proactiveAuth);
  final ServiceTarget target=context.getServiceTarget();
  final ServiceBuilder<ServletContainerService> builder=target.addService(UndertowService.SERVLET_CONTAINER.append(name),container);
  if (bufferCache != null) {
    builder.addDependency(BufferCacheService.SERVICE_NAME.append(bufferCache),DirectBufferCache.class,container.getBufferCacheInjectedValue());
  }
  if (persistentSessions) {
    builder.addDependency(AbstractPersistentSessionManager.SERVICE_NAME,SessionPersistenceManager.class,container.getSessionPersistenceManagerInjectedValue());
  }
  if (info != null) {
    builder.addDependency(IOServices.WORKER.append(info.getWorker()),XnioWorker.class,container.getWebsocketsWorker());
    builder.addDependency(IOServices.BUFFER_POOL.append(info.getBufferPool()),Pool.class,(InjectedValue)container.getWebsocketsBufferPool());
  }
  builder.setInitialMode(ServiceController.Mode.ON_DEMAND).install();
}
