{
  writer.writeStartElement(Element.TRANSPORT.getLocalName());
  writeProtocolAttributes(writer,property);
  ModelNode transport=property.getValue();
  writeAttribute(writer,transport,TransportResourceDefinition.SHARED);
  writeAttribute(writer,transport,TransportResourceDefinition.DIAGNOSTICS_SOCKET_BINDING);
  writeAttribute(writer,transport,TransportResourceDefinition.DEFAULT_EXECUTOR);
  writeAttribute(writer,transport,TransportResourceDefinition.OOB_EXECUTOR);
  writeAttribute(writer,transport,TransportResourceDefinition.TIMER_EXECUTOR);
  writeAttribute(writer,transport,TransportResourceDefinition.THREAD_FACTORY);
  writeAttribute(writer,transport,TransportResourceDefinition.MACHINE);
  writeAttribute(writer,transport,TransportResourceDefinition.RACK);
  writeAttribute(writer,transport,TransportResourceDefinition.SITE);
  writeElement(writer,transport,ProtocolResourceDefinition.PROPERTIES);
  if (transport.hasDefined(ThreadPoolResourceDefinition.WILDCARD_PATH.getKey())) {
    writeThreadPoolElements(Element.DEFAULT_THREAD_POOL,ThreadPoolResourceDefinition.DEFAULT,writer,transport);
    writeThreadPoolElements(Element.INTERNAL_THREAD_POOL,ThreadPoolResourceDefinition.INTERNAL,writer,transport);
    writeThreadPoolElements(Element.OOB_THREAD_POOL,ThreadPoolResourceDefinition.OOB,writer,transport);
    writeThreadPoolElements(Element.TIMER_THREAD_POOL,ThreadPoolResourceDefinition.TIMER,writer,transport);
  }
  writer.writeEndElement();
}
