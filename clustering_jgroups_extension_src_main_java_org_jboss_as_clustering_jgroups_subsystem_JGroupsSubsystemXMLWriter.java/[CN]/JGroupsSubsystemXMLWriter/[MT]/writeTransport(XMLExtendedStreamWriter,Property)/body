{
  writer.writeStartElement(Element.TRANSPORT.getLocalName());
  writeProtocolAttributes(writer,property);
  ModelNode transport=property.getValue();
  TransportResourceDefinition.SHARED.marshallAsAttribute(transport,writer);
  TransportResourceDefinition.DIAGNOSTICS_SOCKET_BINDING.marshallAsAttribute(transport,writer);
  TransportResourceDefinition.DEFAULT_EXECUTOR.marshallAsAttribute(transport,writer);
  TransportResourceDefinition.OOB_EXECUTOR.marshallAsAttribute(transport,writer);
  TransportResourceDefinition.TIMER_EXECUTOR.marshallAsAttribute(transport,writer);
  TransportResourceDefinition.THREAD_FACTORY.marshallAsAttribute(transport,writer);
  TransportResourceDefinition.MACHINE.marshallAsAttribute(transport,writer);
  TransportResourceDefinition.RACK.marshallAsAttribute(transport,writer);
  TransportResourceDefinition.SITE.marshallAsAttribute(transport,writer);
  writeProtocolProperties(writer,transport);
  if (transport.hasDefined(ThreadPoolResourceDefinition.WILDCARD_PATH.getKey())) {
    writeThreadPoolElements(Element.DEFAULT_THREAD_POOL,ThreadPoolResourceDefinition.DEFAULT,writer,transport);
    writeThreadPoolElements(Element.INTERNAL_THREAD_POOL,ThreadPoolResourceDefinition.INTERNAL,writer,transport);
    writeThreadPoolElements(Element.OOB_THREAD_POOL,ThreadPoolResourceDefinition.OOB,writer,transport);
    writeThreadPoolElements(Element.TIMER_THREAD_POOL,ThreadPoolResourceDefinition.TIMER,writer,transport);
  }
  writer.writeEndElement();
}
