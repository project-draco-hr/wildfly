{
  final String patchId=PATCH_ID.resolveModelAttribute(context,operation).asString();
  final boolean overrideAll=OVERRIDE_ALL.resolveModelAttribute(context,operation).asBoolean();
  context.acquireControllerLock();
  final PatchInfoService service=(PatchInfoService)context.getServiceRegistry(false).getRequiredService(PatchInfoService.NAME).getValue();
  if (service.requiresReload()) {
    throw MESSAGES.serverRequiresReload();
  }
  final PatchInfo info=service.getPatchInfo();
  final DirectoryStructure structure=service.getStructure();
  final PatchingTaskRunner taskRunner=new PatchingTaskRunner(info,structure);
  try {
    final PatchingResult result=taskRunner.rollback(patchId,overrideAll);
    context.completeStep(new OperationContext.ResultHandler(){
      @Override public void handleResult(      OperationContext.ResultAction resultAction,      OperationContext context,      ModelNode operation){
        if (resultAction == OperationContext.ResultAction.KEEP) {
          result.commit();
          service.reloadRequired();
          context.reloadRequired();
        }
 else {
          result.rollback();
        }
      }
    }
);
  }
 catch (  PatchingException e) {
    if (e.hasConflicts()) {
    }
    throw new OperationFailedException(e.getMessage(),e);
  }
 finally {
  }
}
