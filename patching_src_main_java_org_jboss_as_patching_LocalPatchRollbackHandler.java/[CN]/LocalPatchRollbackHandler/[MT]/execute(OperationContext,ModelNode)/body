{
  final String patchId=operation.require(PATCH_ID).asString();
  final boolean overrideAll=operation.get(OVERRIDE_ALL).asBoolean(false);
  context.acquireControllerLock();
  final PatchInfoService service=(PatchInfoService)context.getServiceRegistry(false).getRequiredService(PatchInfoService.NAME).getValue();
  final PatchInfo info=service.getPatchInfo();
  final DirectoryStructure structure=service.getStructure();
  final PatchingTaskRunner taskRunner=new PatchingTaskRunner(info,structure);
  try {
    final PatchingResult result=taskRunner.rollback(patchId,overrideAll);
    if (result.hasFailures()) {
      final ModelNode failureDescription=context.getFailureDescription();
      failureDescription.get("content-items").set("TODO");
      context.completeStep(OperationContext.ResultHandler.NOOP_RESULT_HANDLER);
      return;
    }
    context.completeStep(OperationContext.RollbackHandler.NOOP_ROLLBACK_HANDLER);
  }
 catch (  PatchingException e) {
    throw new OperationFailedException(e.getMessage(),e);
  }
 finally {
  }
}
