{
  log.info("++++ Starting testSessionLifecycle ++++");
  String warname=String.valueOf(++testId);
  this.startManagers(warname,1800,1);
  SetAttributesRequestHandler setHandler=new SetAttributesRequestHandler(getAttributeMap(),false);
  log.info("initial request");
  SessionTestUtil.invokeRequest(managers[0],setHandler,null);
  String sessionId=setHandler.getSessionId();
  WeakReference<Session> session0A=new WeakReference<Session>(managers[0].findSession(sessionId));
  SessionTestUtil.cleanupPipeline(managers[0]);
  assertNotNull(session0A.get());
  setHandler=new SetAttributesRequestHandler(getAttributeMap(),false);
  log.info("Modify attribute request");
  SessionTestUtil.invokeRequest(managers[0],setHandler,sessionId);
  SessionTestUtil.cleanupPipeline(managers[0]);
  System.gc();
  System.runFinalization();
  assertEquals(1,Attribute.attributeCount());
  Thread.sleep(1100);
  log.info("passivate node 0");
  managers[0].backgroundProcess();
  log.info("passivate node 1");
  managers[1].backgroundProcess();
  System.gc();
  System.runFinalization();
  assertEquals(0,Attribute.attributeCount());
  assertNull(session0A.get());
  RemoveAttributesRequestHandler removeHandler=new RemoveAttributesRequestHandler(KEYS,false);
  log.info("remove request");
  SessionTestUtil.invokeRequest(managers[0],removeHandler,sessionId);
  WeakReference<Session> session0B=new WeakReference<Session>(managers[0].findSession(sessionId));
  SessionTestUtil.cleanupPipeline(managers[0]);
  System.gc();
  System.runFinalization();
  assertEquals(0,Attribute.attributeCount());
  assertNotNull(session0B.get());
  setHandler=new SetAttributesRequestHandler(getAttributeMap(),false);
  log.info("failover request");
  SessionTestUtil.invokeRequest(managers[1],setHandler,sessionId);
  WeakReference<Session> session1A=new WeakReference<Session>(managers[1].findSession(sessionId));
  SessionTestUtil.cleanupPipeline(managers[1]);
  assertNotNull(session1A.get());
  assertEquals(1,Attribute.attributeCount());
  Thread.sleep(1100);
  log.info("passivate node 0");
  managers[0].backgroundProcess();
  log.info("passivate node 1");
  managers[1].backgroundProcess();
  System.gc();
  System.runFinalization();
  assertEquals(0,Attribute.attributeCount());
  assertNull(session0B.get());
  assertNull(session1A.get());
  BasicRequestHandler getHandler=new BasicRequestHandler(KEYS,false);
  log.info("activate node 1");
  SessionTestUtil.invokeRequest(managers[1],getHandler,sessionId);
  WeakReference<Session> session1B=new WeakReference<Session>(managers[1].findSession(sessionId));
  SessionTestUtil.cleanupPipeline(managers[1]);
  assertNotNull(session1B.get());
  assertEquals(1,Attribute.attributeCount());
  getHandler=new BasicRequestHandler(KEYS,false);
  log.info("fail back request");
  SessionTestUtil.invokeRequest(managers[0],getHandler,sessionId);
  WeakReference<Session> session0C=new WeakReference<Session>(managers[0].findSession(sessionId));
  SessionTestUtil.cleanupPipeline(managers[0]);
  assertNotNull(session0C.get());
  assertEquals(2,Attribute.attributeCount());
  InvalidateSessionRequestHandler invalidateHandler=new InvalidateSessionRequestHandler(KEYS,false);
  log.info("invalidate request");
  SessionTestUtil.invokeRequest(managers[0],invalidateHandler,sessionId);
  SessionTestUtil.cleanupPipeline(managers[0]);
  System.gc();
  System.runFinalization();
  assertEquals(0,Attribute.attributeCount());
  assertNull(session1B.get());
  assertNull(session0C.get());
}
