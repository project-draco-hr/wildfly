{
  final PathAddress address=PathAddress.pathAddress(operation.get(OP_ADDR));
  final String name=address.getLastElement().getValue();
  if (context.getProcessType().isServer() && !context.isBooting() && name.equals("ejb")) {
    Resource rootResource=context.readResourceFromRoot(PathAddress.EMPTY_ADDRESS);
    PathElement ejbPath=PathElement.pathElement(ModelDescriptionConstants.SUBSYSTEM,"ejb3");
    if (rootResource.hasChild(ejbPath) && rootResource.getChild(ejbPath).hasChild(PathElement.pathElement("service","remote"))) {
      context.addStep(new OperationStepHandler(){
        @Override public void execute(        final OperationContext context,        final ModelNode operation) throws OperationFailedException {
          context.reloadRequired();
          context.completeStep(OperationContext.RollbackHandler.REVERT_RELOAD_REQUIRED_ROLLBACK_HANDLER);
        }
      }
,OperationContext.Stage.RUNTIME);
      return Collections.emptyList();
    }
  }
  final ServiceTarget target=context.getServiceTarget();
  final String defaultCache=ModelNodes.asString(CacheContainerResourceDefinition.DEFAULT_CACHE.resolveModelAttribute(context,containerModel));
  final String jndiName=ModelNodes.asString(CacheContainerResourceDefinition.JNDI_NAME.resolveModelAttribute(context,containerModel));
  final String listenerExecutor=ModelNodes.asString(CacheContainerResourceDefinition.LISTENER_EXECUTOR.resolveModelAttribute(context,containerModel));
  final String evictionExecutor=ModelNodes.asString(CacheContainerResourceDefinition.EVICTION_EXECUTOR.resolveModelAttribute(context,containerModel));
  final String replicationQueueExecutor=ModelNodes.asString(CacheContainerResourceDefinition.REPLICATION_QUEUE_EXECUTOR.resolveModelAttribute(context,containerModel));
  final ServiceController.Mode initialMode=StartMode.valueOf(CacheContainerResourceDefinition.START.resolveModelAttribute(context,containerModel).asString()).getMode();
  final boolean statistics=CacheContainerResourceDefinition.STATISTICS_ENABLED.resolveModelAttribute(context,containerModel).asBoolean();
  ServiceName[] aliases=null;
  if (containerModel.hasDefined(CacheContainerResourceDefinition.ALIASES.getName())) {
    List<ModelNode> list=operation.get(CacheContainerResourceDefinition.ALIASES.getName()).asList();
    aliases=new ServiceName[list.size()];
    for (int i=0; i < list.size(); i++) {
      aliases[i]=EmbeddedCacheManagerService.getServiceName(list.get(i).asString());
    }
  }
  final ModuleIdentifier module=ModelNodes.asModuleIdentifier(CacheContainerResourceDefinition.MODULE.resolveModelAttribute(context,containerModel));
  Transport transportConfig=null;
  String transportExecutor=null;
  Collection<ServiceController<?>> controllers=new LinkedList<>();
  InjectedValueServiceBuilder builder=new InjectedValueServiceBuilder(target);
  if (containerModel.hasDefined(TransportResourceDefinition.PATH.getKey())) {
    ModelNode transport=containerModel.get(TransportResourceDefinition.PATH.getKeyValuePair());
    if (transport.isDefined()) {
      transportConfig=new Transport(TransportResourceDefinition.LOCK_TIMEOUT.resolveModelAttribute(context,transport).asLong());
      String channel=ModelNodes.asString(TransportResourceDefinition.CHANNEL.resolveModelAttribute(context,transport));
      transportExecutor=ModelNodes.asString(TransportResourceDefinition.EXECUTOR.resolveModelAttribute(context,transport));
      if (!name.equals(channel)) {
        controllers.add(new BinderServiceBuilder(target).build(ChannelService.createChannelBinding(name),ChannelService.getServiceName(name),Channel.class).install());
        controllers.add(ChannelService.build(target,name).setInitialMode(ON_DEMAND).install());
        if (channel == null) {
          PathAddress jgroupsAddress=address.subAddress(0,address.size() - 2).append(JGroupsSubsystemResourceDefinition.PATH);
          ModelNode jgroupsModel=context.readResourceFromRoot(jgroupsAddress).getModel();
          channel=ModelNodes.asString(JGroupsSubsystemResourceDefinition.DEFAULT_CHANNEL.resolveModelAttribute(context,jgroupsModel));
        }
        controllers.add(new InjectedValueServiceBuilder(target).build(ChannelService.getFactoryServiceName(name),ChannelFactoryService.getServiceName(channel),ChannelFactory.class).install());
        for (        GroupServiceInstaller installer : ServiceLoader.load(ClusteredGroupServiceInstaller.class,ClusteredGroupServiceInstaller.class.getClassLoader())) {
          log.debugf("Installing %s for cache container %s",installer.getClass().getSimpleName(),name);
          Iterator<ServiceName> serviceNames=installer.getServiceNames(channel).iterator();
          for (          ServiceName serviceName : installer.getServiceNames(name)) {
            controllers.add(builder.build(serviceName,serviceNames.next(),Object.class).install());
          }
        }
      }
    }
  }
  if (transportConfig == null) {
    for (    GroupServiceInstaller installer : ServiceLoader.load(LocalGroupServiceInstaller.class,LocalGroupServiceInstaller.class.getClassLoader())) {
      log.debugf("Installing %s for cache container %s",installer.getClass().getSimpleName(),name);
      controllers.addAll(installer.install(target,name,module));
    }
  }
  controllers.add(installContainerConfigurationService(target,name,defaultCache,statistics,module,transportConfig,transportExecutor,listenerExecutor,evictionExecutor,replicationQueueExecutor,verificationHandler));
  controllers.add(installContainerService(target,name,aliases,transportConfig,initialMode,verificationHandler));
  controllers.add(installJndiService(target,name,jndiName,verificationHandler));
  controllers.add(installKeyAffinityServiceFactoryService(target,name,verificationHandler));
  if ((defaultCache != null) && !defaultCache.equals(CacheContainer.DEFAULT_CACHE_ALIAS)) {
    Class<? extends CacheServiceInstaller> installerClass=(transportConfig != null) ? ClusteredCacheServiceInstaller.class : LocalCacheServiceInstaller.class;
    for (    CacheServiceInstaller installer : ServiceLoader.load(installerClass,installerClass.getClassLoader())) {
      controllers.addAll(installer.install(target,name,CacheContainer.DEFAULT_CACHE_ALIAS));
    }
  }
  log.debugf("%s cache container installed",name);
  return controllers;
}
