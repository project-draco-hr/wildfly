{
  TransformersSubRegistration reg=parent.registerSubResource(SystemPropertyResourceDefinition.PATH,new ResourceTransformer(){
    @Override public void transformResource(    ResourceTransformationContext context,    PathAddress address,    Resource resource) throws OperationFailedException {
      ModelNode model=resource.getModel();
      if (!model.hasDefined(BOOT_TIME)) {
        model.get(BOOT_TIME).set(true);
      }
      final ResourceTransformationContext childContext=context.addTransformedResource(PathAddress.EMPTY_ADDRESS,resource);
      childContext.processChildren(resource);
    }
  }
);
  reg.registerOperationTransformer(ADD,new OperationTransformer(){
    @Override public TransformedOperation transformOperation(    TransformationContext context,    PathAddress address,    ModelNode operation) throws OperationFailedException {
      ModelNode transformed=operation.clone();
      if (!transformed.hasDefined(BOOT_TIME)) {
        transformed.get(BOOT_TIME).set(true);
      }
      return new TransformedOperation(transformed,OperationResultTransformer.ORIGINAL_RESULT);
    }
  }
);
  OperationTransformer forceTrue=new OperationTransformer(){
    @Override public TransformedOperation transformOperation(    TransformationContext context,    PathAddress address,    ModelNode operation) throws OperationFailedException {
      ModelNode transformed=operation;
      if (transformed.get(NAME).equals(BOOT_TIME) || transformed.get(NAME).equals(BOOT_TIME)) {
        transformed=transformed.clone();
        if (!transformed.get(VALUE).isDefined()) {
          transformed.get(VALUE).set(true);
        }
      }
      return new TransformedOperation(transformed,OperationResultTransformer.ORIGINAL_RESULT);
    }
  }
;
  reg.registerOperationTransformer(WRITE_ATTRIBUTE_OPERATION,forceTrue);
  reg.registerOperationTransformer(UNDEFINE_ATTRIBUTE_OPERATION,forceTrue);
  return reg;
}
