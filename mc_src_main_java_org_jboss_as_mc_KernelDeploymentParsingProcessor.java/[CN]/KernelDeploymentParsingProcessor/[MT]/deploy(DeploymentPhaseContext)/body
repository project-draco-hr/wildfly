{
  final VirtualFile deploymentRoot=phaseContext.getAttachment(Attachments.DEPLOYMENT_ROOT).getRoot();
  if (deploymentRoot == null || deploymentRoot.exists() == false)   return;
  final String deploymentRootName=deploymentRoot.getName();
  VirtualFile beansXmlFile=null;
  if (deploymentRootName.endsWith(".jar")) {
    beansXmlFile=deploymentRoot.getChild("META-INF/jboss-beans.xml");
  }
 else   if (deploymentRootName.endsWith("jboss-beans.xml")) {
    beansXmlFile=deploymentRoot;
  }
  if (beansXmlFile == null || beansXmlFile.exists() == false)   return;
  InputStream xmlStream=null;
  try {
    xmlStream=beansXmlFile.openStream();
    final XMLStreamReader reader=inputFactory.createXMLStreamReader(xmlStream);
    final ParseResult<KernelDeploymentXmlDescriptor> result=new ParseResult<KernelDeploymentXmlDescriptor>();
    xmlMapper.parseDocument(result,reader);
    final KernelDeploymentXmlDescriptor xmlDescriptor=result.getResult();
    if (xmlDescriptor != null)     phaseContext.putAttachment(KernelDeploymentXmlDescriptor.ATTACHMENT_KEY,xmlDescriptor);
 else     throw new DeploymentUnitProcessingException("Failed to parse MC beans xml [" + beansXmlFile + "]");
  }
 catch (  Exception e) {
    throw new DeploymentUnitProcessingException("Failed to parse MC beans xml [" + beansXmlFile + "]",e);
  }
 finally {
    VFSUtils.safeClose(xmlStream);
  }
}
