{
  this.serverName=serverName;
  this.domainModel=domainModel;
  this.hostModel=hostModel;
  this.environment=environment;
  this.expressionResolver=expressionResolver;
  this.serverModel=resolveExpressions(hostModel.require(SERVER_CONFIG).require(serverName));
  final String serverGroupName=serverModel.require(GROUP).asString();
  this.serverGroup=resolveExpressions(domainModel.require(SERVER_GROUP).require(serverGroupName));
  String serverVMName=null;
  ModelNode serverVM=null;
  if (serverModel.hasDefined(JVM)) {
    for (    final String jvm : serverModel.get(JVM).keys()) {
      serverVMName=jvm;
      serverVM=serverModel.get(JVM,jvm);
      break;
    }
  }
  String groupVMName=null;
  ModelNode groupVM=null;
  if (serverGroup.hasDefined(JVM)) {
    for (    final String jvm : serverGroup.get(JVM).keys()) {
      groupVMName=jvm;
      groupVM=serverGroup.get(JVM,jvm);
      break;
    }
  }
  this.managementSubsystemEndpoint=serverGroup.get(ServerGroupResourceDefinition.MANAGEMENT_SUBSYSTEM_ENDPOINT.getName()).asBoolean(false);
  if (managementSubsystemEndpoint) {
    final String profileName=serverGroup.get(PROFILE).asString();
    final ModelNode profile=domainModel.get(PROFILE,profileName);
    if (profile.hasDefined(SUBSYSTEM) && profile.hasDefined("remoting")) {
      endpointConfig.set(profile.get(SUBSYSTEM,"remoting"));
    }
  }
  final String jvmName=serverVMName != null ? serverVMName : groupVMName;
  final ModelNode hostVM=jvmName != null ? hostModel.get(JVM,jvmName) : null;
  this.jvmElement=new JvmElement(jvmName,resolveExpressions(hostVM),resolveExpressions(groupVM),resolveExpressions(serverVM));
}
