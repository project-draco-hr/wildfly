{
  AsyncBeanCancelRemoteInterface bean=(AsyncBeanCancelRemoteInterface)remoteContext.lookup(ARCHIVE_NAME + "/" + AsyncBean.class.getSimpleName()+ "!"+ AsyncBeanCancelRemoteInterface.class.getName());
  AsyncBeanSynchronizeSingletonRemote singleton=(AsyncBeanSynchronizeSingletonRemote)remoteContext.lookup(ARCHIVE_NAME + "/" + AsyncBeanSynchronizeSingleton.class.getSimpleName()+ "!"+ AsyncBeanSynchronizeSingletonRemote.class.getName());
  singleton.reset();
  final Future<String> future=bean.asyncRemoteCancelMethod();
  singleton.latchAwaitSeconds(WAIT_TIME_S);
  Assert.assertFalse("isDone() was expected to return false because the method is still active",future.isDone());
  Assert.assertFalse("isCancelled() was expected to return false because the method is still active",future.isCancelled());
  boolean wasCanceled=future.cancel(true);
  if (wasCanceled) {
    Assert.assertTrue("isDone() was expected to return true after a call to cancel() with mayBeInterrupting = true, returned true",future.isDone());
    Assert.assertTrue("isCancelled() was expected to return true after a call to cancel() returned true",future.isCancelled());
  }
  String result=future.get();
  Assert.assertFalse(wasCanceled);
  Assert.assertEquals("false;true",result);
}
