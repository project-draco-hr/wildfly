{
  final boolean registerRuntimeOnly=context.isRuntimeOnlyRegistrationValid();
  final SubsystemRegistration subsystem=context.registerSubsystem(SUBSYSTEM_NAME,MANAGEMENT_API_MAJOR_VERSION,MANAGEMENT_API_MINOR_VERSION);
  subsystem.registerXMLElementWriter(EJB3Subsystem12Parser.INSTANCE);
  final ManagementResourceRegistration subsystemRegistration=subsystem.registerSubsystemModel(EJB3SubsystemRootResourceDefinition.INSTANCE);
  subsystemRegistration.registerOperationHandler(DESCRIBE,GenericSubsystemDescribeHandler.INSTANCE,GenericSubsystemDescribeHandler.INSTANCE,false,OperationEntry.EntryType.PRIVATE);
  subsystemRegistration.registerSubModel(EJB3RemoteResourceDefinition.INSTANCE);
  subsystemRegistration.registerSubModel(EJB3AsyncResourceDefinition.INSTANCE);
  subsystemRegistration.registerSubModel(StrictMaxPoolResourceDefinition.INSTANCE);
  subsystemRegistration.registerSubModel(CacheFactoryResourceDefinition.INSTANCE);
  subsystemRegistration.registerSubModel(FilePassivationStoreResourceDefinition.INSTANCE);
  subsystemRegistration.registerSubModel(ClusterPassivationStoreResourceDefinition.INSTANCE);
  subsystemRegistration.registerSubModel(TimerServiceResourceDefinition.INSTANCE);
  subsystemRegistration.registerSubModel(UnboundedQueueThreadPoolResourceDefinition.create(EJB3SubsystemModel.THREAD_POOL,new EJB3ThreadFactoryResolver(),EJB3SubsystemModel.BASE_THREAD_POOL_SERVICE_NAME,registerRuntimeOnly));
  subsystemRegistration.registerSubModel(EJB3IIOPResourceDefinition.INSTANCE);
  if (registerRuntimeOnly) {
    ResourceDefinition deploymentsDef=new SimpleResourceDefinition(PathElement.pathElement(ModelDescriptionConstants.SUBSYSTEM,SUBSYSTEM_NAME),getResourceDescriptionResolver("deployed"));
    final ManagementResourceRegistration deploymentsRegistration=subsystem.registerDeploymentModel(deploymentsDef);
    deploymentsRegistration.registerSubModel(EntityBeanResourceDefinition.INSTANCE);
    deploymentsRegistration.registerSubModel(MessageDrivenBeanResourceDefinition.INSTANCE);
    deploymentsRegistration.registerSubModel(SingletonBeanDeploymentResourceDefinition.INSTANCE);
    deploymentsRegistration.registerSubModel(StatelessSessionBeanDeploymentResourceDefinition.INSTANCE);
    deploymentsRegistration.registerSubModel(StatefulSessionBeanDeploymentResourceDefinition.INSTANCE);
  }
}
