{
  ModelNode timerService=new ModelNode();
  requireNoAttributes(reader);
  while (reader.hasNext() && reader.nextTag() != XMLStreamReader.END_ELEMENT) {
switch (Element.forName(reader.getLocalName())) {
case THREAD_POOL:
{
        final int count=reader.getAttributeCount();
        Integer coreThreads=null;
        for (int i=0; i < count; i++) {
          requireNoNamespaceAttribute(reader,i);
          final String value=reader.getAttributeValue(i);
          final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case CORE_THREADS:
            if (coreThreads != null) {
              throw unexpectedAttribute(reader,i);
            }
          coreThreads=Integer.valueOf(value);
        break;
default :
      unexpectedAttribute(reader,i);
  }
}
if (coreThreads == null) {
  missingRequired(reader,Collections.singleton(Attribute.CORE_THREADS));
}
timerService.get(CommonAttributes.THREAD_POOL).get(CommonAttributes.CORE_THREADS).set(coreThreads.intValue());
requireNoContent(reader);
break;
}
case DATA_STORE:
{
final int count=reader.getAttributeCount();
String path=null;
String relativeTo=null;
for (int i=0; i < count; i++) {
requireNoNamespaceAttribute(reader,i);
final String value=reader.getAttributeValue(i);
final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case PATH:
  if (path != null) {
    throw unexpectedAttribute(reader,i);
  }
path=value;
break;
case RELATIVE_TO:
if (relativeTo != null) {
throw unexpectedAttribute(reader,i);
}
relativeTo=value;
break;
default :
unexpectedAttribute(reader,i);
}
}
if (path == null) {
missingRequired(reader,Collections.singleton(Attribute.PATH));
}
timerService.get(CommonAttributes.TIMER_DATA_STORE_LOCATION).get(CommonAttributes.PATH).set(path);
if (relativeTo != null) {
timerService.get(CommonAttributes.TIMER_DATA_STORE_LOCATION).get(CommonAttributes.RELATIVE_TO).set(relativeTo);
}
requireNoContent(reader);
break;
}
default :
{
unexpectedElement(reader);
}
}
}
return timerService;
}
