{
  final RuntimeAnnotationInformation<LockType> lockData=MethodAnnotationAggregator.runtimeAnnotationInformation(componentClass,applicationClasses,deploymentReflectionIndex,Lock.class);
  for (  Map.Entry<String,List<LockType>> entry : lockData.getClassAnnotations().entrySet()) {
    if (!entry.getValue().isEmpty()) {
      componentConfiguration.setBeanLevelLockType(entry.getKey(),entry.getValue().get(0));
    }
  }
  for (  Map.Entry<Method,List<LockType>> entry : lockData.getMethodAnnotations().entrySet()) {
    if (!entry.getValue().isEmpty()) {
      componentConfiguration.setLockType(entry.getValue().get(0),MethodIdentifier.getIdentifierForMethod(entry.getKey()));
    }
  }
  final RuntimeAnnotationInformation<AccessTimeoutDetails> accessTimeout=MethodAnnotationAggregator.runtimeAnnotationInformation(componentClass,applicationClasses,deploymentReflectionIndex,AccessTimeout.class);
  for (  Map.Entry<String,List<AccessTimeoutDetails>> entry : accessTimeout.getClassAnnotations().entrySet()) {
    if (!entry.getValue().isEmpty()) {
      componentConfiguration.setBeanLevelAccessTimeout(entry.getKey(),entry.getValue().get(0));
    }
  }
  for (  Map.Entry<Method,List<AccessTimeoutDetails>> entry : accessTimeout.getMethodAnnotations().entrySet()) {
    if (!entry.getValue().isEmpty()) {
      componentConfiguration.setAccessTimeout(entry.getValue().get(0),MethodIdentifier.getIdentifierForMethod(entry.getKey()));
    }
  }
}
