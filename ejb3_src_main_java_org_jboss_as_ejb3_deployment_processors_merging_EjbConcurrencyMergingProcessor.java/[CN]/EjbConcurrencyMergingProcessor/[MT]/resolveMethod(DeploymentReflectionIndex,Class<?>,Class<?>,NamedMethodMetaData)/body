{
  if (currentClass == null) {
    throw EjbLogger.ROOT_LOGGER.failToFindMethodWithParameterTypes(componentClass.getName(),methodData.getMethodName(),methodData.getMethodParams());
  }
  final ClassReflectionIndex<?> classIndex=index.getClassIndex(currentClass);
  if (methodData.getMethodParams() == null) {
    final Collection<Method> methods=classIndex.getAllMethods(methodData.getMethodName());
    if (methods.isEmpty()) {
      return resolveMethod(index,currentClass.getSuperclass(),componentClass,methodData);
    }
 else     if (methods.size() > 1) {
      throw EjbLogger.ROOT_LOGGER.multipleMethodReferencedInEjbJarXml(methodData.getMethodName(),currentClass.getName());
    }
    return methods.iterator().next();
  }
 else {
    final Collection<Method> methods=classIndex.getAllMethods(methodData.getMethodName(),methodData.getMethodParams().size());
    for (    final Method method : methods) {
      boolean match=true;
      for (int i=0; i < method.getParameterTypes().length; ++i) {
        if (!method.getParameterTypes()[i].getName().equals(methodData.getMethodParams().get(i))) {
          match=false;
          break;
        }
      }
      if (match) {
        return method;
      }
    }
  }
  return resolveMethod(index,currentClass.getSuperclass(),componentClass,methodData);
}
