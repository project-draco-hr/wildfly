{
  GlobalOperationHandlers.registerGlobalOperations(resourceRegistration,ProcessType.STANDALONE_SERVER);
  if (serverEnvironment != null) {
    resourceRegistration.registerOperationHandler(ValidateOperationHandler.DEFINITION,ValidateOperationHandler.INSTANCE);
  }
 else {
    resourceRegistration.registerOperationHandler(ValidateOperationHandler.DEFINITION,ValidateOperationHandler.INSTANCE);
  }
  resourceRegistration.registerOperationHandler(CompositeOperationHandler.DEFINITION,CompositeOperationHandler.INSTANCE,false);
  XmlMarshallingHandler xmh=new XmlMarshallingHandler(extensibleConfigurationPersister);
  resourceRegistration.registerOperationHandler(XmlMarshallingHandler.DEFINITION,xmh);
  resourceRegistration.registerOperationHandler(NamespaceAddHandler.DEFINITION,NamespaceAddHandler.INSTANCE);
  resourceRegistration.registerOperationHandler(NamespaceRemoveHandler.DEFINITION,NamespaceRemoveHandler.INSTANCE);
  resourceRegistration.registerOperationHandler(SchemaLocationAddHandler.DEFINITION,SchemaLocationAddHandler.INSTANCE);
  resourceRegistration.registerOperationHandler(SchemaLocationRemoveHandler.DEFINITION,SchemaLocationRemoveHandler.INSTANCE);
  resourceRegistration.registerOperationHandler(ValidateAddressOperationHandler.DEFINITION,ValidateAddressOperationHandler.INSTANCE,false);
  DeploymentUploadBytesHandler.register(resourceRegistration,contentRepository);
  DeploymentUploadURLHandler.register(resourceRegistration,contentRepository);
  DeploymentUploadStreamAttachmentHandler.register(resourceRegistration,contentRepository);
  resourceRegistration.registerOperationHandler(DeploymentAttributes.REPLACE_DEPLOYMENT_DEFINITION,DeploymentReplaceHandler.create(contentRepository,vaultReader));
  resourceRegistration.registerOperationHandler(DeploymentAttributes.FULL_REPLACE_DEPLOYMENT_DEFINITION,DeploymentFullReplaceHandler.create(contentRepository,vaultReader));
  if (!isDomain) {
    SnapshotDeleteHandler snapshotDelete=new SnapshotDeleteHandler(extensibleConfigurationPersister);
    resourceRegistration.registerOperationHandler(SnapshotDeleteHandler.DEFINITION,snapshotDelete);
    SnapshotListHandler snapshotList=new SnapshotListHandler(extensibleConfigurationPersister);
    resourceRegistration.registerOperationHandler(SnapshotListHandler.DEFINITION,snapshotList);
    SnapshotTakeHandler snapshotTake=new SnapshotTakeHandler(extensibleConfigurationPersister);
    resourceRegistration.registerOperationHandler(SnapshotTakeHandler.DEFINITION,snapshotTake);
  }
  resourceRegistration.registerOperationHandler(ServerRestartRequiredHandler.DEFINITION,ServerRestartRequiredHandler.INSTANCE);
  resourceRegistration.registerOperationHandler(ResolveExpressionHandler.DEFINITION,ResolveExpressionHandler.INSTANCE,false);
  resourceRegistration.registerOperationHandler(SpecifiedInterfaceResolveHandler.DEFINITION,SpecifiedInterfaceResolveHandler.INSTANCE);
  resourceRegistration.registerOperationHandler(WhoAmIOperation.DEFINITION,WhoAmIOperation.createOperation(authorizer),true);
  resourceRegistration.registerOperationHandler(RootResourceHack.DEFINITION,RootResourceHack.INSTANCE);
  if (isDomain) {
    final ServerDomainProcessReloadHandler reloadHandler=new ServerDomainProcessReloadHandler(Services.JBOSS_AS,runningModeControl,processState,operationIDUpdater);
    resourceRegistration.registerOperationHandler(ServerDomainProcessReloadHandler.DOMAIN_DEFINITION,reloadHandler,false);
    resourceRegistration.registerOperationHandler(SetServerGroupHostHandler.DEFINITION,SetServerGroupHostHandler.INSTANCE);
  }
 else {
    final ServerProcessReloadHandler reloadHandler=new ServerProcessReloadHandler(Services.JBOSS_AS,runningModeControl,processState);
    resourceRegistration.registerOperationHandler(ServerProcessReloadHandler.DEFINITION,reloadHandler,false);
  }
  if (serverEnvironment != null) {
    if (serverEnvironment.getLaunchType() == ServerEnvironment.LaunchType.STANDALONE) {
      ServerShutdownHandler serverShutdownHandler=new ServerShutdownHandler(processState);
      resourceRegistration.registerOperationHandler(ServerShutdownHandler.DEFINITION,serverShutdownHandler);
    }
    resourceRegistration.registerSubModel(ServerEnvironmentResourceDescription.of(serverEnvironment));
  }
}
