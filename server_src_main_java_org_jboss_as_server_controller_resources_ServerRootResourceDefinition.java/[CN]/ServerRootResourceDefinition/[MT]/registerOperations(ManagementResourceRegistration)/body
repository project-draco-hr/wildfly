{
  resourceRegistration.registerOperationHandler(READ_RESOURCE_OPERATION,GlobalOperationHandlers.READ_RESOURCE,CommonProviders.READ_RESOURCE_PROVIDER,true,runtimeOnlyFlag);
  resourceRegistration.registerOperationHandler(READ_ATTRIBUTE_OPERATION,GlobalOperationHandlers.READ_ATTRIBUTE,CommonProviders.READ_ATTRIBUTE_PROVIDER,true,runtimeOnlyFlag);
  resourceRegistration.registerOperationHandler(READ_RESOURCE_DESCRIPTION_OPERATION,GlobalOperationHandlers.READ_RESOURCE_DESCRIPTION,CommonProviders.READ_RESOURCE_DESCRIPTION_PROVIDER,true,runtimeOnlyFlag);
  resourceRegistration.registerOperationHandler(READ_CHILDREN_NAMES_OPERATION,GlobalOperationHandlers.READ_CHILDREN_NAMES,CommonProviders.READ_CHILDREN_NAMES_PROVIDER,true,runtimeOnlyFlag);
  resourceRegistration.registerOperationHandler(READ_CHILDREN_TYPES_OPERATION,GlobalOperationHandlers.READ_CHILDREN_TYPES,CommonProviders.READ_CHILDREN_TYPES_PROVIDER,true,runtimeOnlyFlag);
  resourceRegistration.registerOperationHandler(READ_CHILDREN_RESOURCES_OPERATION,GlobalOperationHandlers.READ_CHILDREN_RESOURCES,CommonProviders.READ_CHILDREN_RESOURCES_PROVIDER,true,runtimeOnlyFlag);
  resourceRegistration.registerOperationHandler(READ_OPERATION_NAMES_OPERATION,GlobalOperationHandlers.READ_OPERATION_NAMES,CommonProviders.READ_OPERATION_NAMES_PROVIDER,true,runtimeOnlyFlag);
  resourceRegistration.registerOperationHandler(READ_OPERATION_DESCRIPTION_OPERATION,GlobalOperationHandlers.READ_OPERATION_DESCRIPTION,CommonProviders.READ_OPERATION_PROVIDER,true,runtimeOnlyFlag);
  resourceRegistration.registerOperationHandler(UNDEFINE_ATTRIBUTE_OPERATION,GlobalOperationHandlers.UNDEFINE_ATTRIBUTE,CommonProviders.UNDEFINE_ATTRIBUTE_PROVIDER,true);
  resourceRegistration.registerOperationHandler(WRITE_ATTRIBUTE_OPERATION,GlobalOperationHandlers.WRITE_ATTRIBUTE,CommonProviders.WRITE_ATTRIBUTE_PROVIDER,true);
  if (serverEnvironment != null) {
    resourceRegistration.registerOperationHandler(ValidateOperationHandler.OPERATION_NAME,ValidateOperationHandler.INSTANCE,ValidateOperationHandler.INSTANCE);
  }
 else {
    resourceRegistration.registerOperationHandler(ValidateOperationHandler.OPERATION_NAME,ValidateOperationHandler.INSTANCE,ValidateOperationHandler.INSTANCE,false,runtimeOnlyFlag);
  }
  resourceRegistration.registerOperationHandler(CompositeOperationHandler.NAME,CompositeOperationHandler.INSTANCE,CompositeOperationHandler.INSTANCE,false,EntryType.PRIVATE);
  XmlMarshallingHandler xmh=new XmlMarshallingHandler(extensibleConfigurationPersister);
  resourceRegistration.registerOperationHandler(XmlMarshallingHandler.OPERATION_NAME,xmh,xmh,false,runtimeOnlyFlag);
  resourceRegistration.registerOperationHandler(NamespaceAddHandler.OPERATION_NAME,NamespaceAddHandler.INSTANCE,NamespaceAddHandler.INSTANCE,false);
  resourceRegistration.registerOperationHandler(NamespaceRemoveHandler.OPERATION_NAME,NamespaceRemoveHandler.INSTANCE,NamespaceRemoveHandler.INSTANCE,false);
  resourceRegistration.registerOperationHandler(SchemaLocationAddHandler.OPERATION_NAME,SchemaLocationAddHandler.INSTANCE,SchemaLocationAddHandler.INSTANCE,false);
  resourceRegistration.registerOperationHandler(SchemaLocationRemoveHandler.OPERATION_NAME,SchemaLocationRemoveHandler.INSTANCE,SchemaLocationRemoveHandler.INSTANCE,false);
  resourceRegistration.registerOperationHandler(ValidateAddressOperationHandler.OPERATION_NAME,ValidateAddressOperationHandler.INSTANCE,ValidateAddressOperationHandler.INSTANCE,false,EnumSet.of(OperationEntry.Flag.READ_ONLY));
  DeploymentUploadBytesHandler.register(resourceRegistration,contentRepository);
  DeploymentUploadURLHandler.register(resourceRegistration,contentRepository);
  DeploymentUploadStreamAttachmentHandler.register(resourceRegistration,contentRepository);
  resourceRegistration.registerOperationHandler(DeploymentAttributes.REPLACE_DEPLOYMENT_DEFINITION,DeploymentReplaceHandler.create(contentRepository,vaultReader));
  resourceRegistration.registerOperationHandler(DeploymentAttributes.FULL_REPLACE_DEPLOYMENT_DEFINITION,DeploymentFullReplaceHandler.create(contentRepository,vaultReader));
  if (!isDomain) {
    SnapshotDeleteHandler snapshotDelete=new SnapshotDeleteHandler(extensibleConfigurationPersister);
    resourceRegistration.registerOperationHandler(SnapshotDeleteHandler.OPERATION_NAME,snapshotDelete,snapshotDelete,false);
    SnapshotListHandler snapshotList=new SnapshotListHandler(extensibleConfigurationPersister);
    resourceRegistration.registerOperationHandler(SnapshotListHandler.OPERATION_NAME,snapshotList,snapshotList,false);
    SnapshotTakeHandler snapshotTake=new SnapshotTakeHandler(extensibleConfigurationPersister);
    resourceRegistration.registerOperationHandler(SnapshotTakeHandler.OPERATION_NAME,snapshotTake,snapshotTake,false);
  }
  resourceRegistration.registerOperationHandler(ServerRestartRequiredHandler.OPERATION_NAME,ServerRestartRequiredHandler.INSTANCE,ServerRestartRequiredHandler.INSTANCE,false);
  resourceRegistration.registerOperationHandler(ResolveExpressionHandler.OPERATION_NAME,ResolveExpressionHandler.INSTANCE,ResolveExpressionHandler.INSTANCE,EnumSet.of(OperationEntry.Flag.READ_ONLY,OperationEntry.Flag.RUNTIME_ONLY));
  resourceRegistration.registerOperationHandler(SpecifiedInterfaceResolveHandler.OPERATION_NAME,SpecifiedInterfaceResolveHandler.INSTANCE,SpecifiedInterfaceResolveHandler.INSTANCE,runtimeOnlyFlag);
  resourceRegistration.registerOperationHandler(WhoAmIOperation.OPERATION_NAME,WhoAmIOperation.INSTANCE,WhoAmIOperation.INSTANCE,true);
  resourceRegistration.registerOperationHandler(RootResourceHack.NAME,RootResourceHack.INSTANCE,RootResourceHack.INSTANCE,false,OperationEntry.EntryType.PRIVATE,runtimeOnlyFlag);
  if (serverEnvironment != null) {
    if (serverEnvironment.getLaunchType() != ServerEnvironment.LaunchType.DOMAIN) {
      ServerProcessReloadHandler reloadHandler=new ServerProcessReloadHandler(Services.JBOSS_AS,runningModeControl,processState,ServerDescriptions.getResourceDescriptionResolver("server"));
      resourceRegistration.registerOperationHandler(ProcessReloadHandler.OPERATION_NAME,reloadHandler,reloadHandler);
    }
    if (serverEnvironment.getLaunchType() == ServerEnvironment.LaunchType.STANDALONE) {
      ServerShutdownHandler serverShutdownHandler=new ServerShutdownHandler(processState);
      resourceRegistration.registerOperationHandler(ServerShutdownHandler.OPERATION_NAME,serverShutdownHandler,serverShutdownHandler);
    }
    resourceRegistration.registerSubModel(ServerEnvironmentResourceDescription.of(serverEnvironment));
  }
}
