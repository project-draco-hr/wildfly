{
  final DeploymentUnit deploymentUnit=phaseContext.getDeploymentUnit();
  final EEModuleDescription module=deploymentUnit.getAttachment(Attachments.EE_MODULE_DESCRIPTION);
  final EEApplicationClasses applicationClasses=deploymentUnit.getAttachment(Attachments.EE_APPLICATION_CLASSES_DESCRIPTION);
  if (!DeploymentTypeMarker.isType(DeploymentType.WAR,deploymentUnit)) {
    return;
  }
  if (!WeldDeploymentMarker.isPartOfWeldDeployment(deploymentUnit)) {
    return;
  }
  WarMetaData warMetaData=deploymentUnit.getAttachment(WarMetaData.ATTACHMENT_KEY);
  if (warMetaData == null) {
    WeldLogger.DEPLOYMENT_LOGGER.debug("Not installing Weld web tier integration as no war metadata found");
    return;
  }
  JBossWebMetaData webMetaData=warMetaData.getMergedJBossWebMetaData();
  if (webMetaData == null) {
    WeldLogger.DEPLOYMENT_LOGGER.debug("Not installing Weld web tier integration as no merged web metadata found");
    return;
  }
  List<ListenerMetaData> listeners=webMetaData.getListeners();
  if (listeners == null) {
    listeners=new ArrayList<ListenerMetaData>();
    webMetaData.setListeners(listeners);
  }
 else {
    final ListIterator<ListenerMetaData> iterator=listeners.listIterator();
    while (iterator.hasNext()) {
      final ListenerMetaData listener=iterator.next();
      if (listener.getListenerClass().trim().equals(WELD_SERVLET_LISTENER)) {
        WeldLogger.DEPLOYMENT_LOGGER.debugf("Removing weld servlet listener %s from web config, as it is not needed in EE6 environments",WELD_SERVLET_LISTENER);
        iterator.remove();
        break;
      }
    }
  }
  listeners.add(0,WBL);
  listeners.add(1,JIL);
  final WebComponentDescription componentDescription=new WebComponentDescription(JSP_LISTENER,JSP_LISTENER,module,deploymentUnit.getServiceName(),applicationClasses);
  module.addComponent(componentDescription);
  final Map<String,ComponentInstantiator> instantiators=deploymentUnit.getAttachment(WebAttachments.WEB_COMPONENT_INSTANTIATORS);
  instantiators.put(JSP_LISTENER,new WebComponentInstantiator(deploymentUnit,componentDescription));
  FiltersMetaData filters=webMetaData.getFilters();
  if (filters == null) {
    filters=new FiltersMetaData();
    webMetaData.setFilters(filters);
  }
  filters.add(CPF);
  List<FilterMappingMetaData> filterMappings=webMetaData.getFilterMappings();
  if (filterMappings == null) {
    filterMappings=new ArrayList<FilterMappingMetaData>();
    webMetaData.setFilterMappings(filterMappings);
  }
  filterMappings.add(CPFM);
}
