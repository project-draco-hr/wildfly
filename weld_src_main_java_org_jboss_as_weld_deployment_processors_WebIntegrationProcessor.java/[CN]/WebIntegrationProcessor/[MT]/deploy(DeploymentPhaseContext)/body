{
  final DeploymentUnit deploymentUnit=phaseContext.getDeploymentUnit();
  final EEModuleDescription module=deploymentUnit.getAttachment(Attachments.EE_MODULE_DESCRIPTION);
  final EEApplicationClasses applicationClasses=deploymentUnit.getAttachment(Attachments.EE_APPLICATION_CLASSES_DESCRIPTION);
  if (!DeploymentTypeMarker.isType(DeploymentType.WAR,deploymentUnit)) {
    return;
  }
  if (!WeldDeploymentMarker.isWeldDeployment(deploymentUnit)) {
    return;
  }
  WarMetaData warMetaData=deploymentUnit.getAttachment(WarMetaData.ATTACHMENT_KEY);
  if (warMetaData == null) {
    WeldLogger.DEPLOYMENT_LOGGER.debug("Not installing Weld web tier integration as no war metadata found");
    return;
  }
  JBossWebMetaData webMetaData=warMetaData.getMergedJBossWebMetaData();
  if (webMetaData == null) {
    WeldLogger.DEPLOYMENT_LOGGER.debug("Not installing Weld web tier integration as no merged web metadata found");
    return;
  }
  List<ListenerMetaData> listeners=webMetaData.getListeners();
  if (listeners == null) {
    listeners=new ArrayList<ListenerMetaData>();
    webMetaData.setListeners(listeners);
  }
 else {
    final ListIterator<ListenerMetaData> iterator=listeners.listIterator();
    while (iterator.hasNext()) {
      final ListenerMetaData listener=iterator.next();
      if (listener.getListenerClass().trim().equals(WELD_SERVLET_LISTENER)) {
        WeldLogger.DEPLOYMENT_LOGGER.debugf("Removing weld servlet listener %s from web config, as it is not needed in EE6 environments",WELD_SERVLET_LISTENER);
        iterator.remove();
        break;
      }
    }
  }
  listeners.add(0,INITIAL_LISTENER_METADATA);
  listeners.add(TERMINAL_LISTENER_MEDATADA);
  registerAsComponent(WELD_INITIAL_LISTENER,module,deploymentUnit,applicationClasses);
  registerAsComponent(WELD_TERMINAL_LISTENER,module,deploymentUnit,applicationClasses);
  deploymentUnit.addToAttachmentList(ExpressionFactoryWrapper.ATTACHMENT_KEY,WeldJspExpressionFactoryWrapper.INSTANCE);
  if (webMetaData.getContextParams() == null) {
    webMetaData.setContextParams(new ArrayList<ParamValueMetaData>());
  }
  final List<ParamValueMetaData> contextParams=webMetaData.getContextParams();
  setupWeldContextIgnores(contextParams,InitParameters.CONTEXT_IGNORE_FORWARD);
  setupWeldContextIgnores(contextParams,InitParameters.CONTEXT_IGNORE_INCLUDE);
  if (webMetaData.getFilterMappings() != null) {
    boolean filterMappingFound=false;
    for (    FilterMappingMetaData mapping : webMetaData.getFilterMappings()) {
      if (CONVERSATION_FILTER_NAME.equals(mapping.getFilterName())) {
        filterMappingFound=true;
        break;
      }
    }
    if (filterMappingFound) {
      boolean filterFound=false;
      if (webMetaData.getFilters() == null) {
        webMetaData.setFilters(new FiltersMetaData());
      }
      for (      FilterMetaData filter : webMetaData.getFilters()) {
        if (CONVERSATION_FILTER_CLASS.equals(filter.getFilterClass())) {
          filterFound=true;
          break;
        }
      }
      if (!filterFound) {
        webMetaData.getFilters().add(conversationFilterMetadata);
        registerAsComponent(CONVERSATION_FILTER_CLASS,module,deploymentUnit,applicationClasses);
        webMetaData.getContextParams().add(CONVERSATION_FILTER_INITIALIZED);
      }
    }
  }
}
