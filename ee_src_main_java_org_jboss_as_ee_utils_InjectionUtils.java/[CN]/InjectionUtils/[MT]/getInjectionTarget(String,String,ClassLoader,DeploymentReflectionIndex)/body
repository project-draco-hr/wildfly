{
  final Class<?> injectionTargetClass;
  try {
    injectionTargetClass=classLoader.loadClass(injectionTargetClassName);
  }
 catch (  ClassNotFoundException e) {
    throw MESSAGES.cannotLoad(e,injectionTargetClassName);
  }
  final ClassReflectionIndex<?> index=deploymentReflectionIndex.getClassIndex(injectionTargetClass);
  String methodName="set" + injectionTargetName.substring(0,1).toUpperCase(Locale.ENGLISH) + injectionTargetName.substring(1);
  boolean methodFound=false;
  Method method=null;
  Field field=null;
  Class<?> current=injectionTargetClass;
  while (current != Object.class && current != null && !methodFound) {
    final Collection<Method> methods=index.getAllMethods(methodName);
    for (    Method m : methods) {
      if (m.getParameterTypes().length == 1) {
        if (m.isBridge() || m.isSynthetic()) {
          continue;
        }
        if (methodFound) {
          throw MESSAGES.multipleSetterMethodsFound(injectionTargetName,injectionTargetClassName);
        }
        methodFound=true;
        method=m;
      }
    }
    current=current.getSuperclass();
  }
  if (method == null) {
    current=injectionTargetClass;
    while (current != Object.class && current != null && field == null) {
      field=index.getField(injectionTargetName);
      if (field != null) {
        break;
      }
      current=current.getSuperclass();
    }
  }
  if (field == null && method == null) {
    throw MESSAGES.cannotResolveInjectionPoint(injectionTargetName,injectionTargetClassName);
  }
  return field != null ? field : method;
}
