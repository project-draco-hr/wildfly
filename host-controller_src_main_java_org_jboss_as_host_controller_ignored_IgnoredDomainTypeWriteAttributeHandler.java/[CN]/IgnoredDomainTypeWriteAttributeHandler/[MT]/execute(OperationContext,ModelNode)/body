{
  final String attribute=operation.require(ModelDescriptionConstants.NAME).asString();
  ModelNode value=operation.get(ModelDescriptionConstants.VALUE);
  ModelNode mockOp=new ModelNode();
  mockOp.get(attribute).set(value);
  IgnoreDomainResourceTypeResource resource=IgnoreDomainResourceTypeResource.class.cast(context.readResourceForUpdate(PathAddress.EMPTY_ADDRESS));
  if (IgnoredDomainTypeResourceDefinition.NAMES.getName().equals(attribute)) {
    IgnoredDomainTypeResourceDefinition.NAMES.validateOperation(mockOp);
    resource.setNames(value);
  }
 else   if (IgnoredDomainTypeResourceDefinition.WILDCARD.getName().equals(attribute)) {
    IgnoredDomainTypeResourceDefinition.WILDCARD.validateOperation(mockOp);
    ModelNode wildcardNode=IgnoredDomainTypeResourceDefinition.WILDCARD.resolveModelAttribute(context,mockOp);
    Boolean wildcard=wildcardNode.isDefined() ? wildcardNode.asBoolean() : null;
    resource.setWildcard(wildcard);
  }
  boolean booting=context.isBooting();
  if (!booting) {
    context.reloadRequired();
  }
  if (context.completeStep() == OperationContext.ResultAction.KEEP) {
    if (booting) {
      resource.publish();
    }
  }
 else   if (!booting) {
    context.revertReloadRequired();
  }
}
