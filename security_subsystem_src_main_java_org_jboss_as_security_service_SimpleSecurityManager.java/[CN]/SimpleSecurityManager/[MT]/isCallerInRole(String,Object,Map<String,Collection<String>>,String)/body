{
  final SecurityContext securityContext=doPrivileged(securityContext());
  if (securityContext == null) {
    return false;
  }
  final EJBResource resource=new EJBResource(new HashMap<String,Object>());
  resource.setEjbName(ejbName);
  resource.setPolicyContextID(PolicyContext.getContextID());
  resource.setCallerRunAsIdentity(securityContext.getIncomingRunAs());
  resource.setCallerSubject(securityContext.getUtil().getSubject());
  Principal userPrincipal=securityContext.getUtil().getUserPrincipal();
  resource.setPrincipal(userPrincipal);
  if (roleLinks != null) {
    final Set<SecurityRoleRef> roleRefs=new HashSet<SecurityRoleRef>();
    for (    String key : roleLinks.keySet()) {
      Collection<String> values=roleLinks.get(key);
      if (values != null) {
        for (        String value : values)         roleRefs.add(new SecurityRoleRef(key,value));
      }
    }
    resource.setSecurityRoleReferences(roleRefs);
  }
  try {
    AbstractEJBAuthorizationHelper helper=SecurityHelperFactory.getEJBAuthorizationHelper(securityContext);
    for (    String roleName : roleNames) {
      if (helper.isCallerInRole(resource,roleName)) {
        return true;
      }
    }
    return false;
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}
