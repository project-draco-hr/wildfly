{
  Connection connection;
  final ReconnectHandler reconnectHandler;
  OptionMap channelCreationOptions=OptionMap.EMPTY;
  final EJBClientConfiguration ejbClientConfiguration=this.clusterContext.getEJBClientContext().getEJBClientConfiguration();
  try {
    if (ejbClientConfiguration != null) {
      final EJBClientConfiguration.ClusterConfiguration clusterConfiguration=ejbClientConfiguration.getClusterConfiguration(clusterContext.getClusterName());
      if (clusterConfiguration == null) {
        final OptionMap connectionCreationOptions=OptionMap.EMPTY;
        final CallbackHandler callbackHandler=ejbClientConfiguration.getCallbackHandler();
        final IoFuture<Connection> futureConnection=NetworkUtil.connect(endpoint,destinationHost,destinationPort,null,connectionCreationOptions,callbackHandler,null);
        connection=IoFutureHelper.get(futureConnection,5000,TimeUnit.MILLISECONDS);
        reconnectHandler=new ClusterNodeReconnectHandler(destinationHost,destinationPort,connectionCreationOptions,callbackHandler,channelCreationOptions,5000);
      }
 else {
        final EJBClientConfiguration.ClusterNodeConfiguration clusterNodeConfiguration=clusterConfiguration.getNodeConfiguration(this.getNodeName());
        channelCreationOptions=clusterNodeConfiguration == null ? clusterConfiguration.getChannelCreationOptions() : clusterNodeConfiguration.getChannelCreationOptions();
        final OptionMap connectionCreationOptions=clusterNodeConfiguration == null ? clusterConfiguration.getConnectionCreationOptions() : clusterNodeConfiguration.getConnectionCreationOptions();
        final CallbackHandler callbackHandler=clusterNodeConfiguration == null ? clusterConfiguration.getCallbackHandler() : clusterNodeConfiguration.getCallbackHandler();
        final IoFuture<Connection> futureConnection=NetworkUtil.connect(endpoint,destinationHost,destinationPort,null,connectionCreationOptions,callbackHandler,null);
        final long timeout=clusterNodeConfiguration == null ? clusterConfiguration.getConnectionTimeout() : clusterNodeConfiguration.getConnectionTimeout();
        connection=IoFutureHelper.get(futureConnection,timeout,TimeUnit.MILLISECONDS);
        reconnectHandler=new ClusterNodeReconnectHandler(destinationHost,destinationPort,connectionCreationOptions,callbackHandler,channelCreationOptions,timeout);
      }
    }
 else {
      final OptionMap connectionCreationOptions=OptionMap.EMPTY;
      final CallbackHandler callbackHandler=new AnonymousCallbackHandler();
      final IoFuture<Connection> futureConnection=NetworkUtil.connect(endpoint,destinationHost,destinationPort,null,connectionCreationOptions,callbackHandler,null);
      connection=IoFutureHelper.get(futureConnection,5000,TimeUnit.MILLISECONDS);
      reconnectHandler=new ClusterNodeReconnectHandler(destinationHost,destinationPort,connectionCreationOptions,callbackHandler,channelCreationOptions,5000);
    }
  }
 catch (  Exception e) {
    logger.info("Could not create a connection for cluster node " + this.nodeName + " in cluster "+ clusterContext.getClusterName(),e);
    return null;
  }
  return new RemotingConnectionEJBReceiver(connection,reconnectHandler,channelCreationOptions);
}
