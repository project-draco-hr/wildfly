{
  final Map<String,String> connectionProperties=Collections.emptyMap();
  final String connectionUrl=ModelNodeUtil.getResolvedStringIfSetOrGetDefault(operationContext,dataSourceNode,CONNECTION_URL);
  final String driverClass=ModelNodeUtil.getResolvedStringIfSetOrGetDefault(operationContext,dataSourceNode,DRIVER_CLASS);
  final String dataSourceClass=ModelNodeUtil.getResolvedStringIfSetOrGetDefault(operationContext,dataSourceNode,DATASOURCE_CLASS);
  final String jndiName=ModelNodeUtil.getResolvedStringIfSetOrGetDefault(operationContext,dataSourceNode,JNDI_NAME);
  final String driver=ModelNodeUtil.getResolvedStringIfSetOrGetDefault(operationContext,dataSourceNode,DATASOURCE_DRIVER);
  final String newConnectionSql=ModelNodeUtil.getResolvedStringIfSetOrGetDefault(operationContext,dataSourceNode,NEW_CONNECTION_SQL);
  final String poolName=dsName;
  final String urlDelimiter=ModelNodeUtil.getResolvedStringIfSetOrGetDefault(operationContext,dataSourceNode,URL_DELIMITER);
  final String urlSelectorStrategyClassName=ModelNodeUtil.getResolvedStringIfSetOrGetDefault(operationContext,dataSourceNode,URL_SELECTOR_STRATEGY_CLASS_NAME);
  final boolean useJavaContext=ModelNodeUtil.getBooleanIfSetOrGetDefault(operationContext,dataSourceNode,USE_JAVA_CONTEXT);
  final boolean enabled=ModelNodeUtil.getBooleanIfSetOrGetDefault(operationContext,dataSourceNode,ENABLED);
  final boolean connectable=ModelNodeUtil.getBooleanIfSetOrGetDefault(operationContext,dataSourceNode,CONNECTABLE);
  final Boolean tracking=ModelNodeUtil.getBooleanIfSetOrGetDefault(operationContext,dataSourceNode,TRACKING);
  final Boolean enlistmentTrace=ModelNodeUtil.getBooleanIfSetOrGetDefault(operationContext,dataSourceNode,ENLISTMENT_TRACE);
  final String mcp=ModelNodeUtil.getResolvedStringIfSetOrGetDefault(operationContext,dataSourceNode,MCP);
  final boolean jta=ModelNodeUtil.getBooleanIfSetOrGetDefault(operationContext,dataSourceNode,JTA);
  final Integer maxPoolSize=ModelNodeUtil.getIntIfSetOrGetDefault(operationContext,dataSourceNode,MAX_POOL_SIZE);
  final Integer minPoolSize=ModelNodeUtil.getIntIfSetOrGetDefault(operationContext,dataSourceNode,MIN_POOL_SIZE);
  final Integer initialPoolSize=ModelNodeUtil.getIntIfSetOrGetDefault(operationContext,dataSourceNode,INITIAL_POOL_SIZE);
  final boolean prefill=ModelNodeUtil.getBooleanIfSetOrGetDefault(operationContext,dataSourceNode,POOL_PREFILL);
  final boolean fair=ModelNodeUtil.getBooleanIfSetOrGetDefault(operationContext,dataSourceNode,POOL_FAIR);
  final boolean useStrictMin=ModelNodeUtil.getBooleanIfSetOrGetDefault(operationContext,dataSourceNode,POOL_USE_STRICT_MIN);
  final String flushStrategyString=ModelNodeUtil.getResolvedStringIfSetOrGetDefault(operationContext,dataSourceNode,POOL_FLUSH_STRATEGY);
  final FlushStrategy flushStrategy=FlushStrategy.forName(flushStrategyString);
  final Boolean allowMultipleUsers=ModelNodeUtil.getBooleanIfSetOrGetDefault(operationContext,dataSourceNode,ALLOW_MULTIPLE_USERS);
  Extension incrementer=ModelNodeUtil.extractExtension(operationContext,dataSourceNode,CAPACITY_INCREMENTER_CLASS,CAPACITY_INCREMENTER_PROPERTIES);
  Extension decrementer=ModelNodeUtil.extractExtension(operationContext,dataSourceNode,CAPACITY_DECREMENTER_CLASS,CAPACITY_DECREMENTER_PROPERTIES);
  final Capacity capacity=new Capacity(incrementer,decrementer);
  final Extension connectionListener=ModelNodeUtil.extractExtension(operationContext,dataSourceNode,CONNECTION_LISTENER_CLASS,CONNECTION_LISTENER_PROPERTIES);
  final DsPool pool=new DsPoolImpl(minPoolSize,initialPoolSize,maxPoolSize,prefill,useStrictMin,flushStrategy,allowMultipleUsers,capacity,fair,connectionListener);
  final String username=ModelNodeUtil.getResolvedStringIfSetOrGetDefault(operationContext,dataSourceNode,USERNAME);
  final String password=ModelNodeUtil.getResolvedStringIfSetOrGetDefault(operationContext,dataSourceNode,PASSWORD);
  final String securityDomain=ModelNodeUtil.getResolvedStringIfSetOrGetDefault(operationContext,dataSourceNode,SECURITY_DOMAIN);
  final Extension reauthPlugin=ModelNodeUtil.extractExtension(operationContext,dataSourceNode,REAUTH_PLUGIN_CLASSNAME,REAUTHPLUGIN_PROPERTIES);
  final DsSecurity security=new DsSecurityImpl(username,password,securityDomain,reauthPlugin);
  final boolean sharePreparedStatements=ModelNodeUtil.getBooleanIfSetOrGetDefault(operationContext,dataSourceNode,SHARE_PREPARED_STATEMENTS);
  final Long preparedStatementsCacheSize=ModelNodeUtil.getLongIfSetOrGetDefault(operationContext,dataSourceNode,PREPARED_STATEMENTS_CACHE_SIZE);
  final String trackStatementsString=ModelNodeUtil.getResolvedStringIfSetOrGetDefault(operationContext,dataSourceNode,TRACK_STATEMENTS);
  final Statement.TrackStatementsEnum trackStatements=Statement.TrackStatementsEnum.valueOf(trackStatementsString.toUpperCase(Locale.ENGLISH));
  final Statement statement=new StatementImpl(sharePreparedStatements,preparedStatementsCacheSize,trackStatements);
  final Integer allocationRetry=ModelNodeUtil.getIntIfSetOrGetDefault(operationContext,dataSourceNode,ALLOCATION_RETRY);
  final Long allocationRetryWaitMillis=ModelNodeUtil.getLongIfSetOrGetDefault(operationContext,dataSourceNode,ALLOCATION_RETRY_WAIT_MILLIS);
  final Long blockingTimeoutMillis=ModelNodeUtil.getLongIfSetOrGetDefault(operationContext,dataSourceNode,BLOCKING_TIMEOUT_WAIT_MILLIS);
  final Long idleTimeoutMinutes=ModelNodeUtil.getLongIfSetOrGetDefault(operationContext,dataSourceNode,IDLETIMEOUTMINUTES);
  final Long queryTimeout=ModelNodeUtil.getLongIfSetOrGetDefault(operationContext,dataSourceNode,QUERY_TIMEOUT);
  final Integer xaResourceTimeout=ModelNodeUtil.getIntIfSetOrGetDefault(operationContext,dataSourceNode,XA_RESOURCE_TIMEOUT);
  final Long useTryLock=ModelNodeUtil.getLongIfSetOrGetDefault(operationContext,dataSourceNode,USE_TRY_LOCK);
  final boolean setTxQueryTimeout=ModelNodeUtil.getBooleanIfSetOrGetDefault(operationContext,dataSourceNode,SET_TX_QUERY_TIMEOUT);
  final TimeOut timeOut=new TimeOutImpl(blockingTimeoutMillis,idleTimeoutMinutes,allocationRetry,allocationRetryWaitMillis,xaResourceTimeout,setTxQueryTimeout,queryTimeout,useTryLock);
  final String transactionIsolationString=ModelNodeUtil.getResolvedStringIfSetOrGetDefault(operationContext,dataSourceNode,TRANSACTION_ISOLATION);
  TransactionIsolation transactionIsolation=null;
  if (transactionIsolationString != null) {
    transactionIsolation=TransactionIsolation.forName(transactionIsolationString);
    if (transactionIsolation == null) {
      transactionIsolation=TransactionIsolation.customLevel(transactionIsolationString);
    }
  }
  final String checkValidConnectionSql=ModelNodeUtil.getResolvedStringIfSetOrGetDefault(operationContext,dataSourceNode,CHECK_VALID_CONNECTION_SQL);
  final Extension exceptionSorter=ModelNodeUtil.extractExtension(operationContext,dataSourceNode,EXCEPTION_SORTER_CLASSNAME,EXCEPTION_SORTER_PROPERTIES);
  final Extension staleConnectionChecker=ModelNodeUtil.extractExtension(operationContext,dataSourceNode,STALE_CONNECTION_CHECKER_CLASSNAME,STALE_CONNECTION_CHECKER_PROPERTIES);
  final Extension validConnectionChecker=ModelNodeUtil.extractExtension(operationContext,dataSourceNode,VALID_CONNECTION_CHECKER_CLASSNAME,VALID_CONNECTION_CHECKER_PROPERTIES);
  Long backgroundValidationMillis=ModelNodeUtil.getLongIfSetOrGetDefault(operationContext,dataSourceNode,BACKGROUNDVALIDATIONMILLIS);
  final Boolean backgroundValidation=ModelNodeUtil.getBooleanIfSetOrGetDefault(operationContext,dataSourceNode,BACKGROUNDVALIDATION);
  boolean useFastFail=ModelNodeUtil.getBooleanIfSetOrGetDefault(operationContext,dataSourceNode,USE_FAST_FAIL);
  final Boolean validateOnMatch=ModelNodeUtil.getBooleanIfSetOrGetDefault(operationContext,dataSourceNode,VALIDATE_ON_MATCH);
  final boolean spy=ModelNodeUtil.getBooleanIfSetOrGetDefault(operationContext,dataSourceNode,SPY);
  final boolean useCcm=ModelNodeUtil.getBooleanIfSetOrGetDefault(operationContext,dataSourceNode,USE_CCM);
  final Validation validation=new ValidationImpl(backgroundValidation,backgroundValidationMillis,useFastFail,validConnectionChecker,checkValidConnectionSql,validateOnMatch,staleConnectionChecker,exceptionSorter);
  return new ModifiableDataSource(connectionUrl,driverClass,dataSourceClass,driver,transactionIsolation,connectionProperties,timeOut,security,statement,validation,urlDelimiter,urlSelectorStrategyClassName,newConnectionSql,useJavaContext,poolName,enabled,jndiName,spy,useCcm,jta,connectable,tracking,mcp,enlistmentTrace,pool);
}
