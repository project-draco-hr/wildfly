{
  final Map<String,String> connectionProperties=Collections.emptyMap();
  final String connectionUrl=getStringIfSetOrGetDefault(dataSourceNode,CONNECTION_URL,null);
  final String driverClass=getStringIfSetOrGetDefault(dataSourceNode,DRIVER_CLASS,null);
  final String dataSourceClass=getStringIfSetOrGetDefault(dataSourceNode,DATASOURCE_CLASS,null);
  final String jndiName=getStringIfSetOrGetDefault(dataSourceNode,JNDINAME,null);
  final String driver=getStringIfSetOrGetDefault(dataSourceNode,DATASOURCE_DRIVER,null);
  final String newConnectionSql=getStringIfSetOrGetDefault(dataSourceNode,NEW_CONNECTION_SQL,null);
  final String poolName=dsName;
  final String urlDelimiter=getStringIfSetOrGetDefault(dataSourceNode,URL_DELIMITER,null);
  final String urlSelectorStrategyClassName=getStringIfSetOrGetDefault(dataSourceNode,URL_SELECTOR_STRATEGY_CLASS_NAME,null);
  final boolean useJavaContext=getBooleanIfSetOrGetDefault(dataSourceNode,USE_JAVA_CONTEXT,Defaults.USE_JAVA_CONTEXT);
  final boolean enabled=getBooleanIfSetOrGetDefault(dataSourceNode,ENABLED,Defaults.ENABLED);
  final boolean jta=getBooleanIfSetOrGetDefault(dataSourceNode,JTA,Defaults.JTA);
  final Integer maxPoolSize=getIntIfSetOrGetDefault(dataSourceNode,MAX_POOL_SIZE,Defaults.MAX_POOL_SIZE);
  final Integer minPoolSize=getIntIfSetOrGetDefault(dataSourceNode,MIN_POOL_SIZE,Defaults.MIN_POOL_SIZE);
  final boolean prefill=getBooleanIfSetOrGetDefault(dataSourceNode,POOL_PREFILL,Defaults.PREFILL);
  final boolean useStrictMin=getBooleanIfSetOrGetDefault(dataSourceNode,POOL_USE_STRICT_MIN,Defaults.USE_STRICT_MIN);
  final FlushStrategy flushStrategy=dataSourceNode.hasDefined(POOL_FLUSH_STRATEGY.getName()) ? FlushStrategy.forName(dataSourceNode.get(POOL_FLUSH_STRATEGY.getName()).asString()) : Defaults.FLUSH_STRATEGY;
  final CommonPool pool=new CommonPoolImpl(minPoolSize,maxPoolSize,prefill,useStrictMin,flushStrategy);
  final String username=getStringIfSetOrGetDefault(dataSourceNode,USERNAME,null);
  final String password=getResolvedStringIfSetOrGetDefault(operationContext,dataSourceNode,PASSWORD,null);
  final String securityDomain=getStringIfSetOrGetDefault(dataSourceNode,SECURITY_DOMAIN,null);
  final Extension reauthPlugin=extractExtension(dataSourceNode,REAUTHPLUGIN_CLASSNAME,REAUTHPLUGIN_PROPERTIES);
  final DsSecurity security=new DsSecurityImpl(username,password,securityDomain,reauthPlugin);
  final boolean sharePreparedStatements=getBooleanIfSetOrGetDefault(dataSourceNode,SHAREPREPAREDSTATEMENTS,Defaults.SHARE_PREPARED_STATEMENTS);
  final Long preparedStatementsCacheSize=getLongIfSetOrGetDefault(dataSourceNode,PREPAREDSTATEMENTSCACHESIZE,null);
  final Statement.TrackStatementsEnum trackStatements=dataSourceNode.hasDefined(TRACKSTATEMENTS.getName()) ? Statement.TrackStatementsEnum.valueOf(dataSourceNode.get(TRACKSTATEMENTS.getName()).asString()) : Defaults.TRACK_STATEMENTS;
  final Statement statement=new StatementImpl(sharePreparedStatements,preparedStatementsCacheSize,trackStatements);
  final Integer allocationRetry=getIntIfSetOrGetDefault(dataSourceNode,ALLOCATION_RETRY,null);
  final Long allocationRetryWaitMillis=getLongIfSetOrGetDefault(dataSourceNode,ALLOCATION_RETRY_WAIT_MILLIS,null);
  final Long blockingTimeoutMillis=getLongIfSetOrGetDefault(dataSourceNode,BLOCKING_TIMEOUT_WAIT_MILLIS,null);
  final Long idleTimeoutMinutes=getLongIfSetOrGetDefault(dataSourceNode,IDLETIMEOUTMINUTES,null);
  final Long queryTimeout=getLongIfSetOrGetDefault(dataSourceNode,QUERYTIMEOUT,null);
  final Integer xaResourceTimeout=getIntIfSetOrGetDefault(dataSourceNode,XA_RESOURCE_TIMEOUT,null);
  final Long useTryLock=getLongIfSetOrGetDefault(dataSourceNode,USETRYLOCK,null);
  final boolean setTxQuertTimeout=getBooleanIfSetOrGetDefault(dataSourceNode,SETTXQUERYTIMEOUT,Defaults.SET_TX_QUERY_TIMEOUT);
  final TimeOut timeOut=new TimeOutImpl(blockingTimeoutMillis,idleTimeoutMinutes,allocationRetry,allocationRetryWaitMillis,xaResourceTimeout,setTxQuertTimeout,queryTimeout,useTryLock);
  final TransactionIsolation transactionIsolation=dataSourceNode.hasDefined(TRANSACTION_ISOLATION.getName()) ? TransactionIsolation.valueOf(dataSourceNode.get(TRANSACTION_ISOLATION.getName()).asString()) : null;
  final String checkValidConnectionSql=getStringIfSetOrGetDefault(dataSourceNode,CHECKVALIDCONNECTIONSQL,null);
  final Extension exceptionSorter=extractExtension(dataSourceNode,EXCEPTIONSORTERCLASSNAME,EXCEPTIONSORTER_PROPERTIES);
  final Extension staleConnectionChecker=extractExtension(dataSourceNode,STALECONNECTIONCHECKERCLASSNAME,STALECONNECTIONCHECKER_PROPERTIES);
  final Extension validConnectionChecker=extractExtension(dataSourceNode,VALIDCONNECTIONCHECKERCLASSNAME,VALIDCONNECTIONCHECKER_PROPERTIES);
  Long backgroundValidationMillis=getLongIfSetOrGetDefault(dataSourceNode,BACKGROUNDVALIDATIONMILLIS,null);
  final boolean backgroundValidation=getBooleanIfSetOrGetDefault(dataSourceNode,BACKGROUNDVALIDATION,Defaults.BACKGROUND_VALIDATION);
  boolean useFastFail=getBooleanIfSetOrGetDefault(dataSourceNode,USE_FAST_FAIL,Defaults.USE_FAST_FAIl);
  final boolean validateOnMatch=getBooleanIfSetOrGetDefault(dataSourceNode,VALIDATEONMATCH,Defaults.VALIDATE_ON_MATCH);
  final boolean spy=getBooleanIfSetOrGetDefault(dataSourceNode,SPY,Defaults.SPY);
  final boolean useCcm=getBooleanIfSetOrGetDefault(dataSourceNode,USE_CCM,Defaults.USE_CCM);
  final Validation validation=new ValidationImpl(backgroundValidation,backgroundValidationMillis,useFastFail,validConnectionChecker,checkValidConnectionSql,validateOnMatch,staleConnectionChecker,exceptionSorter);
  return new ModifiableDataSource(connectionUrl,driverClass,dataSourceClass,driver,transactionIsolation,connectionProperties,timeOut,security,statement,validation,urlDelimiter,urlSelectorStrategyClassName,newConnectionSql,useJavaContext,poolName,enabled,jndiName,spy,useCcm,jta,pool);
}
