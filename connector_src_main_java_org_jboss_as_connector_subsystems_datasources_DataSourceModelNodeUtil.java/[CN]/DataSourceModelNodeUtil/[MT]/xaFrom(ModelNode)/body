{
  final Map<String,String> xaDataSourceProperty=new HashMap<String,String>(dataSourceNode.get(XADATASOURCEPROPERTIES).asList().size());
  for (  ModelNode property : dataSourceNode.get(XADATASOURCEPROPERTIES).asList()) {
    xaDataSourceProperty.put(property.asProperty().getName(),property.asString());
  }
  final String xaDataSourceClass=getStringIfSetOrGetDefault(dataSourceNode,XADATASOURCECLASS,null);
  final String jndiName=getStringIfSetOrGetDefault(dataSourceNode,JNDINAME,null);
  final String module=getStringIfSetOrGetDefault(dataSourceNode,MODULE,null);
  final String newConnectionSql=getStringIfSetOrGetDefault(dataSourceNode,NEW_CONNECTION_SQL,null);
  final String poolName=getStringIfSetOrGetDefault(dataSourceNode,POOLNAME,null);
  final String urlDelimiter=getStringIfSetOrGetDefault(dataSourceNode,URL_DELIMITER,null);
  final String urlSelectorStrategyClassName=getStringIfSetOrGetDefault(dataSourceNode,URL_SELECTOR_STRATEGY_CLASS_NAME,null);
  final boolean useJavaContext=getBooleanIfSetOrGetDefault(dataSourceNode,USE_JAVA_CONTEXT,false);
  final boolean enabled=getBooleanIfSetOrGetDefault(dataSourceNode,ENABLED,false);
  final Integer maxPoolSize=getIntIfSetOrGetDefault(dataSourceNode,MAX_POOL_SIZE,null);
  final Integer minPoolSize=getIntIfSetOrGetDefault(dataSourceNode,MIN_POOL_SIZE,null);
  final boolean prefill=getBooleanIfSetOrGetDefault(dataSourceNode,POOL_PREFILL,false);
  final boolean useStrictMin=getBooleanIfSetOrGetDefault(dataSourceNode,POOL_USE_STRICT_MIN,false);
  final boolean interleaving=getBooleanIfSetOrGetDefault(dataSourceNode,INTERLIVING,false);
  final boolean noTxSeparatePool=getBooleanIfSetOrGetDefault(dataSourceNode,NOTXSEPARATEPOOL,false);
  final boolean padXid=getBooleanIfSetOrGetDefault(dataSourceNode,PAD_XID,false);
  final boolean isSameRmOverride=getBooleanIfSetOrGetDefault(dataSourceNode,SAME_RM_OVERRIDE,false);
  final boolean wrapXaDataSource=getBooleanIfSetOrGetDefault(dataSourceNode,WRAP_XA_DATASOURCE,false);
  final CommonXaPool xaPool=new CommonXaPoolImpl(minPoolSize,maxPoolSize,prefill,useStrictMin,isSameRmOverride,interleaving,padXid,wrapXaDataSource,noTxSeparatePool);
  final String username=getStringIfSetOrGetDefault(dataSourceNode,USERNAME,null);
  final String password=getStringIfSetOrGetDefault(dataSourceNode,PASSWORD,null);
  final String securityDomain=getStringIfSetOrGetDefault(dataSourceNode,SECURITY_DOMAIN,null);
  final DsSecurity security=new DsSecurityImpl(username,password,securityDomain);
  final boolean sharePreparedStatements=dataSourceNode.hasDefined(SHAREPREPAREDSTATEMENTS) ? dataSourceNode.get(SHAREPREPAREDSTATEMENTS).asBoolean() : false;
  final Long preparedStatementsCacheSize=dataSourceNode.get(PREPAREDSTATEMENTSCACHESIZE).asLong();
  final Statement.TrackStatementsEnum trackStatements=Statement.TrackStatementsEnum.valueOf(dataSourceNode.get(TRACKSTATEMENTS).asString());
  final Statement statement=new StatementImpl(sharePreparedStatements,preparedStatementsCacheSize,trackStatements);
  final Integer allocationRetry=getIntIfSetOrGetDefault(dataSourceNode,ALLOCATION_RETRY,null);
  final Long allocationRetryWaitMillis=getLongIfSetOrGetDefault(dataSourceNode,ALLOCATION_RETRY_WAIT_MILLIS,null);
  final Long blockingTimeoutMillis=getLongIfSetOrGetDefault(dataSourceNode,BLOCKING_TIMEOUT_WAIT_MILLIS,null);
  final Long idleTimeoutMinutes=getLongIfSetOrGetDefault(dataSourceNode,IDLETIMEOUTMINUTES,null);
  final Long queryTimeout=getLongIfSetOrGetDefault(dataSourceNode,QUERYTIMEOUT,null);
  final Integer xaResourceTimeout=getIntIfSetOrGetDefault(dataSourceNode,XA_RESOURCE_TIMEOUT,null);
  final Long useTryLock=getLongIfSetOrGetDefault(dataSourceNode,USETRYLOCK,null);
  final boolean setTxQuertTimeout=getBooleanIfSetOrGetDefault(dataSourceNode,SETTXQUERYTIMEOUT,false);
  final TimeOut timeOut=new TimeOutImpl(blockingTimeoutMillis,idleTimeoutMinutes,allocationRetry,allocationRetryWaitMillis,xaResourceTimeout,setTxQuertTimeout,queryTimeout,useTryLock);
  final TransactionIsolation transactionIsolation=dataSourceNode.hasDefined(TRANSACTION_ISOLOATION) ? TransactionIsolation.valueOf(dataSourceNode.get(TRANSACTION_ISOLOATION).asString()) : null;
  final String checkValidConnectionSql=getStringIfSetOrGetDefault(dataSourceNode,CHECKVALIDCONNECTIONSQL,null);
  final JdbcAdapterExtension exceptionSorter=extractJdbcAdapterExtension(dataSourceNode,EXCEPTIONSORTERCLASSNAME,EXCEPTIONSORTER_PROPERTIES);
  final JdbcAdapterExtension staleConnectionChecker=extractJdbcAdapterExtension(dataSourceNode,STALECONNECTIONCHECKERCLASSNAME,STALECONNECTIONCHECKER_PROPERTIES);
  final JdbcAdapterExtension validConnectionChecker=extractJdbcAdapterExtension(dataSourceNode,VALIDCONNECTIONCHECKERCLASSNAME,VALIDCONNECTIONCHECKER_PROPERTIES);
  final Long backgroundValidationMinutes=getLongIfSetOrGetDefault(dataSourceNode,BACKGROUNDVALIDATIONMINUTES,null);
  final boolean backgroundValidation=getBooleanIfSetOrGetDefault(dataSourceNode,BACKGROUNDVALIDATION,false);
  final boolean useFastFail=getBooleanIfSetOrGetDefault(dataSourceNode,USE_FAST_FAIL,false);
  final boolean validateOnMatch=getBooleanIfSetOrGetDefault(dataSourceNode,VALIDATEONMATCH,false);
  final boolean spy=getBooleanIfSetOrGetDefault(dataSourceNode,SPY,false);
  final Validation validation=new ValidationImpl(backgroundValidation,backgroundValidationMinutes,useFastFail,validConnectionChecker,checkValidConnectionSql,validateOnMatch,staleConnectionChecker,exceptionSorter);
  return new XADataSourceImpl(transactionIsolation,timeOut,security,statement,validation,urlDelimiter,urlSelectorStrategyClassName,useJavaContext,poolName,enabled,jndiName,spy,xaDataSourceProperty,xaDataSourceClass,module,newConnectionSql,xaPool);
}
