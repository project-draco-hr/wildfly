{
  List<Property> propertyList=dataSourceNode.get(XADATASOURCE_PROPERTIES.getName()).asPropertyList();
  final Map<String,String> xaDataSourceProperty=new HashMap<String,String>(propertyList.size());
  for (  Property property : propertyList) {
    xaDataSourceProperty.put(property.getName(),property.getValue().asString());
  }
  final String xaDataSourceClass=getStringIfSetOrGetDefault(dataSourceNode,XADATASOURCECLASS,null);
  final String jndiName=getStringIfSetOrGetDefault(dataSourceNode,JNDINAME,null);
  final String module=getStringIfSetOrGetDefault(dataSourceNode,DATASOURCE_DRIVER,null);
  final String newConnectionSql=getStringIfSetOrGetDefault(dataSourceNode,NEW_CONNECTION_SQL,null);
  final String poolName=getStringIfSetOrGetDefault(dataSourceNode,POOLNAME,null);
  final String urlDelimiter=getStringIfSetOrGetDefault(dataSourceNode,URL_DELIMITER,null);
  final String urlSelectorStrategyClassName=getStringIfSetOrGetDefault(dataSourceNode,URL_SELECTOR_STRATEGY_CLASS_NAME,null);
  final boolean useJavaContext=getBooleanIfSetOrGetDefault(dataSourceNode,USE_JAVA_CONTEXT,false);
  final boolean enabled=getBooleanIfSetOrGetDefault(dataSourceNode,ENABLED,true);
  final Integer maxPoolSize=getIntIfSetOrGetDefault(dataSourceNode,MAX_POOL_SIZE,null);
  final Integer minPoolSize=getIntIfSetOrGetDefault(dataSourceNode,MIN_POOL_SIZE,null);
  final boolean prefill=getBooleanIfSetOrGetDefault(dataSourceNode,POOL_PREFILL,false);
  final boolean useStrictMin=getBooleanIfSetOrGetDefault(dataSourceNode,POOL_USE_STRICT_MIN,false);
  final boolean interleaving=getBooleanIfSetOrGetDefault(dataSourceNode,INTERLEAVING,false);
  final boolean noTxSeparatePool=getBooleanIfSetOrGetDefault(dataSourceNode,NOTXSEPARATEPOOL,false);
  final boolean padXid=getBooleanIfSetOrGetDefault(dataSourceNode,PAD_XID,false);
  final boolean isSameRmOverride=getBooleanIfSetOrGetDefault(dataSourceNode,SAME_RM_OVERRIDE,false);
  final boolean wrapXaDataSource=getBooleanIfSetOrGetDefault(dataSourceNode,WRAP_XA_RESOURCE,true);
  final FlushStrategy flushStrategy=dataSourceNode.hasDefined(POOL_FLUSH_STRATEGY.getName()) ? FlushStrategy.forName(dataSourceNode.get(POOL_FLUSH_STRATEGY.getName()).asString()) : FlushStrategy.FAILING_CONNECTION_ONLY;
  final CommonXaPool xaPool=new CommonXaPoolImpl(minPoolSize,maxPoolSize,prefill,useStrictMin,flushStrategy,isSameRmOverride,interleaving,padXid,wrapXaDataSource,noTxSeparatePool);
  final String username=getStringIfSetOrGetDefault(dataSourceNode,USERNAME,null);
  final String password=getStringIfSetOrGetDefault(dataSourceNode,PASSWORD,null);
  final String securityDomain=getStringIfSetOrGetDefault(dataSourceNode,SECURITY_DOMAIN,null);
  final Extension reauthPlugin=extractExtension(dataSourceNode,REAUTHPLUGIN_CLASSNAME,REAUTHPLUGIN_PROPERTIES);
  final DsSecurity security=new DsSecurityImpl(username,password,securityDomain,reauthPlugin);
  final boolean sharePreparedStatements=dataSourceNode.hasDefined(SHAREPREPAREDSTATEMENTS.getName()) ? dataSourceNode.get(SHAREPREPAREDSTATEMENTS.getName()).asBoolean() : false;
  final Long preparedStatementsCacheSize=getLongIfSetOrGetDefault(dataSourceNode,PREPAREDSTATEMENTSCACHESIZE,null);
  final Statement.TrackStatementsEnum trackStatements=dataSourceNode.hasDefined(TRACKSTATEMENTS.getName()) ? Statement.TrackStatementsEnum.valueOf(dataSourceNode.get(TRACKSTATEMENTS.getName()).asString()) : Statement.TrackStatementsEnum.NOWARN;
  final Statement statement=new StatementImpl(sharePreparedStatements,preparedStatementsCacheSize,trackStatements);
  final Integer allocationRetry=getIntIfSetOrGetDefault(dataSourceNode,ALLOCATION_RETRY,null);
  final Long allocationRetryWaitMillis=getLongIfSetOrGetDefault(dataSourceNode,ALLOCATION_RETRY_WAIT_MILLIS,null);
  final Long blockingTimeoutMillis=getLongIfSetOrGetDefault(dataSourceNode,BLOCKING_TIMEOUT_WAIT_MILLIS,null);
  final Long idleTimeoutMinutes=getLongIfSetOrGetDefault(dataSourceNode,IDLETIMEOUTMINUTES,null);
  final Long queryTimeout=getLongIfSetOrGetDefault(dataSourceNode,QUERYTIMEOUT,null);
  final Integer xaResourceTimeout=getIntIfSetOrGetDefault(dataSourceNode,XA_RESOURCE_TIMEOUT,null);
  final Long useTryLock=getLongIfSetOrGetDefault(dataSourceNode,USETRYLOCK,null);
  final boolean setTxQuertTimeout=getBooleanIfSetOrGetDefault(dataSourceNode,SETTXQUERYTIMEOUT,false);
  final TimeOut timeOut=new TimeOutImpl(blockingTimeoutMillis,idleTimeoutMinutes,allocationRetry,allocationRetryWaitMillis,xaResourceTimeout,setTxQuertTimeout,queryTimeout,useTryLock);
  final TransactionIsolation transactionIsolation=dataSourceNode.hasDefined(TRANSACTION_ISOLATION.getName()) ? TransactionIsolation.valueOf(dataSourceNode.get(TRANSACTION_ISOLATION.getName()).asString()) : null;
  final String checkValidConnectionSql=getStringIfSetOrGetDefault(dataSourceNode,CHECKVALIDCONNECTIONSQL,null);
  final Extension exceptionSorter=extractExtension(dataSourceNode,EXCEPTIONSORTERCLASSNAME,EXCEPTIONSORTER_PROPERTIES);
  final Extension staleConnectionChecker=extractExtension(dataSourceNode,STALECONNECTIONCHECKERCLASSNAME,STALECONNECTIONCHECKER_PROPERTIES);
  final Extension validConnectionChecker=extractExtension(dataSourceNode,VALIDCONNECTIONCHECKERCLASSNAME,VALIDCONNECTIONCHECKER_PROPERTIES);
  Long backgroundValidationMillis=getLongIfSetOrGetDefault(dataSourceNode,BACKGROUNDVALIDATIONMILLIS,null);
  final boolean backgroundValidation=getBooleanIfSetOrGetDefault(dataSourceNode,BACKGROUNDVALIDATION,false);
  boolean useFastFail=getBooleanIfSetOrGetDefault(dataSourceNode,USE_FAST_FAIL,false);
  final boolean validateOnMatch=getBooleanIfSetOrGetDefault(dataSourceNode,VALIDATEONMATCH,false);
  final boolean spy=getBooleanIfSetOrGetDefault(dataSourceNode,SPY,false);
  final boolean useCcm=getBooleanIfSetOrGetDefault(dataSourceNode,USE_CCM,true);
  final Validation validation=new ValidationImpl(backgroundValidation,backgroundValidationMillis,useFastFail,validConnectionChecker,checkValidConnectionSql,validateOnMatch,staleConnectionChecker,exceptionSorter);
  final String recoveryUsername=getStringIfSetOrGetDefault(dataSourceNode,RECOVERY_USERNAME,null);
  final String recoveryPassword=getStringIfSetOrGetDefault(dataSourceNode,RECOVERY_PASSWORD,null);
  final String recoverySecurityDomain=getStringIfSetOrGetDefault(dataSourceNode,RECOVERY_SECURITY_DOMAIN,null);
  final Credential credential=new CredentialImpl(recoveryUsername,recoveryPassword,recoverySecurityDomain);
  final Extension recoverPlugin=extractExtension(dataSourceNode,RECOVERLUGIN_CLASSNAME,RECOVERLUGIN_PROPERTIES);
  final boolean noRecovery=getBooleanIfSetOrGetDefault(dataSourceNode,NO_RECOVERY,false);
  Recovery recovery=new Recovery(credential,recoverPlugin,noRecovery);
  return new XADataSourceImpl(transactionIsolation,timeOut,security,statement,validation,urlDelimiter,urlSelectorStrategyClassName,useJavaContext,poolName,enabled,jndiName,spy,useCcm,xaDataSourceProperty,xaDataSourceClass,module,newConnectionSql,xaPool,recovery);
}
