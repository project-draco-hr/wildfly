{
  for (  Map.Entry<String,String> entry : dataSource.getConnectionProperties().entrySet()) {
    dataSourceModel.get(CONNECTION_PROPERTIES,entry.getKey()).set(entry.getValue());
  }
  setStringIfNotNull(dataSourceModel,CONNECTION_URL,dataSource.getConnectionUrl());
  setStringIfNotNull(dataSourceModel,DRIVER_CLASS,dataSource.getDriverClass());
  setStringIfNotNull(dataSourceModel,JNDINAME,dataSource.getJndiName());
  setStringIfNotNull(dataSourceModel,MODULE,dataSource.getModule());
  setStringIfNotNull(dataSourceModel,NEW_CONNECTION_SQL,dataSource.getNewConnectionSql());
  setStringIfNotNull(dataSourceModel,POOLNAME,dataSource.getPoolName());
  setStringIfNotNull(dataSourceModel,URL_DELIMITER,dataSource.getUrlDelimiter());
  setStringIfNotNull(dataSourceModel,URL_SELECTOR_STRATEGY_CLASS_NAME,dataSource.getUrlSelectorStrategyClassName());
  setBooleanIfNotNull(dataSourceModel,USE_JAVA_CONTEXT,dataSource.isUseJavaContext());
  setBooleanIfNotNull(dataSourceModel,ENABLED,dataSource.isEnabled());
  CommonPool pool=dataSource.getPool();
  if (pool != null) {
    setIntegerIfNotNull(dataSourceModel,MAX_POOL_SIZE,pool.getMaxPoolSize());
    setIntegerIfNotNull(dataSourceModel,MIN_POOL_SIZE,pool.getMinPoolSize());
    setBooleanIfNotNull(dataSourceModel,POOL_PREFILL,pool.isPrefill());
    setBooleanIfNotNull(dataSourceModel,POOL_USE_STRICT_MIN,pool.isUseStrictMin());
  }
  DsSecurity security=dataSource.getSecurity();
  if (security != null) {
    setStringIfNotNull(dataSourceModel,USERNAME,security.getUserName());
    setStringIfNotNull(dataSourceModel,PASSWORD,security.getPassword());
    setStringIfNotNull(dataSourceModel,SECURITY_DOMAIN,security.getSecurityDomain());
  }
  Statement statement=dataSource.getStatement();
  if (statement != null) {
    setLongIfNotNull(dataSourceModel,PREPAREDSTATEMENTSCACHESIZE,statement.getPreparedStatementsCacheSize());
    setBooleanIfNotNull(dataSourceModel,SHAREPREPAREDSTATEMENTS,statement.isSharePreparedStatements());
    if (statement.getTrackStatements() != null) {
      setStringIfNotNull(dataSourceModel,TRACKSTATEMENTS,statement.getTrackStatements().name());
    }
  }
  TimeOut timeout=dataSource.getTimeOut();
  if (timeout != null) {
    setIntegerIfNotNull(dataSourceModel,ALLOCATION_RETRY,timeout.getAllocationRetry());
    setLongIfNotNull(dataSourceModel,ALLOCATION_RETRY_WAIT_MILLIS,timeout.getAllocationRetryWaitMillis());
    setLongIfNotNull(dataSourceModel,BLOCKING_TIMEOUT_WAIT_MILLIS,timeout.getBlockingTimeoutMillis());
    setLongIfNotNull(dataSourceModel,IDLETIMEOUTMINUTES,timeout.getIdleTimeoutMinutes());
    setLongIfNotNull(dataSourceModel,QUERYTIMEOUT,timeout.getQueryTimeout());
    setLongIfNotNull(dataSourceModel,USETRYLOCK,timeout.getUseTryLock());
    setBooleanIfNotNull(dataSourceModel,SETTXQUERYTIMEOUT,timeout.isSetTxQueryTimeout());
  }
  if (dataSource.getTransactionIsolation() != null) {
    setStringIfNotNull(dataSourceModel,TRANSACTION_ISOLOATION,dataSource.getTransactionIsolation().name());
  }
  if (dataSource.isSpy()) {
    setBooleanIfNotNull(dataSourceModel,SPY,dataSource.isSpy());
  }
  Validation validation=dataSource.getValidation();
  if (validation != null) {
    setStringIfNotNull(dataSourceModel,CHECKVALIDCONNECTIONSQL,validation.getCheckValidConnectionSql());
    setExtensionIfNotNull(dataSourceModel,EXCEPTIONSORTERCLASSNAME,EXCEPTIONSORTER_PROPERTIES,validation.getExceptionSorter());
    setExtensionIfNotNull(dataSourceModel,STALECONNECTIONCHECKERCLASSNAME,STALECONNECTIONCHECKER_PROPERTIES,validation.getStaleConnectionChecker());
    setExtensionIfNotNull(dataSourceModel,VALIDCONNECTIONCHECKERCLASSNAME,VALIDCONNECTIONCHECKER_PROPERTIES,validation.getValidConnectionChecker());
    setLongIfNotNull(dataSourceModel,BACKGROUNDVALIDATIONMINUTES,validation.getBackgroundValidationMinutes());
    setBooleanIfNotNull(dataSourceModel,BACKGROUNDVALIDATION,validation.isBackgroundValidation());
    setBooleanIfNotNull(dataSourceModel,USE_FAST_FAIL,validation.isUseFastFail());
    setBooleanIfNotNull(dataSourceModel,VALIDATEONMATCH,validation.isValidateOnMatch());
  }
}
