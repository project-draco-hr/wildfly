{
  for (  Map.Entry<String,String> entry : xaDataSource.getXaDataSourceProperty().entrySet()) {
    xaDataSourceModel.get(XADATASOURCEPROPERTIES).add(entry.getKey(),entry.getValue());
  }
  setStringIfNotNull(xaDataSourceModel,XADATASOURCECLASS,xaDataSource.getXaDataSourceClass());
  setStringIfNotNull(xaDataSourceModel,JNDINAME,xaDataSource.getJndiName());
  setStringIfNotNull(xaDataSourceModel,DATASOURCE_DRIVER,xaDataSource.getDriver());
  setStringIfNotNull(xaDataSourceModel,NEW_CONNECTION_SQL,xaDataSource.getNewConnectionSql());
  setStringIfNotNull(xaDataSourceModel,POOLNAME,xaDataSource.getPoolName());
  setStringIfNotNull(xaDataSourceModel,URL_DELIMITER,xaDataSource.getUrlDelimiter());
  setStringIfNotNull(xaDataSourceModel,URL_SELECTOR_STRATEGY_CLASS_NAME,xaDataSource.getUrlSelectorStrategyClassName());
  setBooleanIfNotNull(xaDataSourceModel,USE_JAVA_CONTEXT,xaDataSource.isUseJavaContext());
  setBooleanIfNotNull(xaDataSourceModel,ENABLED,xaDataSource.isEnabled());
  final CommonXaPool pool=xaDataSource.getXaPool();
  if (pool != null) {
    setIntegerIfNotNull(xaDataSourceModel,MAX_POOL_SIZE,pool.getMaxPoolSize());
    setIntegerIfNotNull(xaDataSourceModel,MIN_POOL_SIZE,pool.getMinPoolSize());
    setBooleanIfNotNull(xaDataSourceModel,POOL_PREFILL,pool.isPrefill());
    setBooleanIfNotNull(xaDataSourceModel,POOL_USE_STRICT_MIN,pool.isUseStrictMin());
    if (pool.getFlushStrategy() != null) {
      setStringIfNotNull(xaDataSourceModel,FLUSH_STRATEGY,pool.getFlushStrategy().getName());
    }
    setBooleanIfNotNull(xaDataSourceModel,INTERLIVING,pool.isInterleaving());
    setBooleanIfNotNull(xaDataSourceModel,NOTXSEPARATEPOOL,pool.isNoTxSeparatePool());
    setBooleanIfNotNull(xaDataSourceModel,PAD_XID,pool.isPadXid());
    setBooleanIfNotNull(xaDataSourceModel,SAME_RM_OVERRIDE,pool.isSameRmOverride());
    setBooleanIfNotNull(xaDataSourceModel,WRAP_XA_DATASOURCE,pool.isWrapXaDataSource());
  }
  final DsSecurity security=xaDataSource.getSecurity();
  if (security != null) {
    setStringIfNotNull(xaDataSourceModel,USERNAME,security.getUserName());
    setStringIfNotNull(xaDataSourceModel,PASSWORD,security.getPassword());
    setStringIfNotNull(xaDataSourceModel,SECURITY_DOMAIN,security.getSecurityDomain());
    setExtensionIfNotNull(xaDataSourceModel,REAUTHPLUGIN_CLASSNAME,REAUTHPLUGIN_PROPERTIES,security.getReauthPlugin());
  }
  final Statement statement=xaDataSource.getStatement();
  if (statement != null) {
    setLongIfNotNull(xaDataSourceModel,PREPAREDSTATEMENTSCACHESIZE,statement.getPreparedStatementsCacheSize());
    setBooleanIfNotNull(xaDataSourceModel,SHAREPREPAREDSTATEMENTS,statement.isSharePreparedStatements());
    if (statement.getTrackStatements() != null) {
      setStringIfNotNull(xaDataSourceModel,TRACKSTATEMENTS,statement.getTrackStatements().name());
    }
  }
  final TimeOut timeout=xaDataSource.getTimeOut();
  if (timeout != null) {
    setIntegerIfNotNull(xaDataSourceModel,ALLOCATION_RETRY,timeout.getAllocationRetry());
    setLongIfNotNull(xaDataSourceModel,ALLOCATION_RETRY_WAIT_MILLIS,timeout.getAllocationRetryWaitMillis());
    setLongIfNotNull(xaDataSourceModel,BLOCKING_TIMEOUT_WAIT_MILLIS,timeout.getBlockingTimeoutMillis());
    setLongIfNotNull(xaDataSourceModel,IDLETIMEOUTMINUTES,timeout.getIdleTimeoutMinutes());
    setLongIfNotNull(xaDataSourceModel,QUERYTIMEOUT,timeout.getQueryTimeout());
    setLongIfNotNull(xaDataSourceModel,USETRYLOCK,timeout.getUseTryLock());
    setBooleanIfTrue(xaDataSourceModel,SETTXQUERYTIMEOUT,timeout.isSetTxQueryTimeout());
    setIntegerIfNotNull(xaDataSourceModel,XA_RESOURCE_TIMEOUT,timeout.getXaResourceTimeout());
  }
  if (xaDataSource.getTransactionIsolation() != null) {
    setStringIfNotNull(xaDataSourceModel,TRANSACTION_ISOLOATION,xaDataSource.getTransactionIsolation().name());
  }
  if (xaDataSource.isSpy()) {
    setBooleanIfNotNull(xaDataSourceModel,SPY,xaDataSource.isSpy());
  }
  if (xaDataSource.isUseCcm()) {
    setBooleanIfNotNull(xaDataSourceModel,USE_CCM,xaDataSource.isUseCcm());
  }
  final Validation validation=xaDataSource.getValidation();
  if (xaDataSource.getValidation() != null) {
    setStringIfNotNull(xaDataSourceModel,CHECKVALIDCONNECTIONSQL,validation.getCheckValidConnectionSql());
    setExtensionIfNotNull(xaDataSourceModel,EXCEPTIONSORTERCLASSNAME,EXCEPTIONSORTER_PROPERTIES,validation.getExceptionSorter());
    setExtensionIfNotNull(xaDataSourceModel,STALECONNECTIONCHECKERCLASSNAME,STALECONNECTIONCHECKER_PROPERTIES,validation.getStaleConnectionChecker());
    setExtensionIfNotNull(xaDataSourceModel,VALIDCONNECTIONCHECKERCLASSNAME,VALIDCONNECTIONCHECKER_PROPERTIES,validation.getValidConnectionChecker());
    setLongIfNotNull(xaDataSourceModel,BACKGROUNDVALIDATIONMINUTES,validation.getBackgroundValidationMinutes());
    setBooleanIfNotNull(xaDataSourceModel,BACKGROUNDVALIDATION,validation.isBackgroundValidation());
    setBooleanIfNotNull(xaDataSourceModel,USE_FAST_FAIL,validation.isUseFastFail());
    setBooleanIfNotNull(xaDataSourceModel,VALIDATEONMATCH,validation.isValidateOnMatch());
  }
  if (xaDataSource.getRecovery() != null) {
    final Recovery recovery=xaDataSource.getRecovery();
    setStringIfNotNull(xaDataSourceModel,RECOVERY_USERNAME,recovery.getCredential() != null ? recovery.getCredential().getUserName() : null);
    setStringIfNotNull(xaDataSourceModel,RECOVERY_PASSWORD,recovery.getCredential() != null ? recovery.getCredential().getPassword() : null);
    setStringIfNotNull(xaDataSourceModel,RECOVERY_SECURITY_DOMAIN,recovery.getCredential() != null ? recovery.getCredential().getSecurityDomain() : null);
    setExtensionIfNotNull(xaDataSourceModel,RECOVERLUGIN_CLASSNAME,RECOVERLUGIN_PROPERTIES,recovery.getRecoverPlugin());
    setBooleanIfNotNull(xaDataSourceModel,NO_RECOVERY,recovery.getNoRecovery());
  }
}
