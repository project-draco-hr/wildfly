{
  RequestParamArgWithValue username=new RequestParamArgWithValue("user-name",this,"--username");
  username.addRequiredPreceding(lastRequired);
  RequestParamArgWithValue password=new RequestParamArgWithValue("password",this,"--password");
  password.addRequiredPreceding(lastRequired);
  RequestParamArgWithoutValue useJavaContext=new RequestParamArgWithoutValue("use-java-context",this);
  useJavaContext.addRequiredPreceding(lastRequired);
  RequestParamArgWithValue maxPoolSize=new RequestParamArgWithValue("max-pool-size",this);
  maxPoolSize.addRequiredPreceding(lastRequired);
  RequestParamArgWithValue minPoolSize=new RequestParamArgWithValue("min-pool-size",this);
  minPoolSize.addRequiredPreceding(lastRequired);
  RequestParamArgWithValue disabled=new RequestParamArgWithValue("enabled",this,"--disabled"){
    @Override public boolean isValueRequired(){
      return false;
    }
    @Override public void set(    ParsedOperationRequest args,    ModelNode request) throws CommandFormatException {
      if (isPresent(args)) {
        setValue(request,"enabled","false");
      }
    }
  }
;
  disabled.addRequiredPreceding(lastRequired);
  RequestParamArgWithValue newConnectionSql=new RequestParamArgWithValue("new-connection-sql",this);
  newConnectionSql.addRequiredPreceding(lastRequired);
  RequestParamArgWithValue urlDelimiter=new RequestParamArgWithValue("url-delimiter",this);
  urlDelimiter.addRequiredPreceding(lastRequired);
  RequestParamArgWithValue urlSelectorStrategyClass=new RequestParamArgWithValue("url-selector-strategy-class-name",this,"--url-selector-strategy-class");
  urlSelectorStrategyClass.addRequiredPreceding(lastRequired);
  RequestParamArgWithoutValue poolPrefill=new RequestParamArgWithoutValue("pool-prefill",this);
  poolPrefill.addRequiredPreceding(lastRequired);
  RequestParamArgWithoutValue poolUseStrictMin=new RequestParamArgWithoutValue("pool-use-strict-min",this);
  poolUseStrictMin.addRequiredPreceding(lastRequired);
  RequestParamArgWithValue flushStrategy=new RequestParamArgWithValue("flush-strategy",this,new SimpleTabCompleter(new String[]{"FAILING_CONNECTION_ONLY","IDLE_CONNECTIONS","ENTIRE_POOL"}));
  flushStrategy.addRequiredPreceding(lastRequired);
  RequestParamArgWithValue securityDomain=new RequestParamArgWithValue("security-domain",this);
  securityDomain.addRequiredPreceding(lastRequired);
  RequestParamArgWithValue reauthPluginClass=new RequestParamArgWithValue("reauth-plugin-class-name",this);
  reauthPluginClass.addRequiredPreceding(lastRequired);
  RequestParamArgWithValue reauthPluginProps=new RequestParamPropertiesArg("reauth-plugin-properties",this);
  reauthPluginProps.addRequiredPreceding(reauthPluginClass);
  RequestParamArgWithoutValue sharePreparedStatements=new RequestParamArgWithoutValue("share-prepared-statements",this);
  sharePreparedStatements.addRequiredPreceding(lastRequired);
  RequestParamArgWithValue psCacheSize=new RequestParamArgWithValue("prepared-statements-cacheSize",this,"--prepared-statements-cache-size");
  psCacheSize.addRequiredPreceding(lastRequired);
  RequestParamArgWithValue trackStatements=new RequestParamArgWithValue("track-statements",this,new SimpleTabCompleter(new String[]{"FALSE","NOWARN","TRUE"}));
  trackStatements.addRequiredPreceding(lastRequired);
  RequestParamArgWithValue allocationRetry=new RequestParamArgWithValue("allocation-retry",this);
  allocationRetry.addRequiredPreceding(lastRequired);
  RequestParamArgWithValue allocationRetryWait=new RequestParamArgWithValue("allocation-retry-wait-millis",this);
  allocationRetryWait.addRequiredPreceding(lastRequired);
  RequestParamArgWithValue blockingTimeoutWait=new RequestParamArgWithValue("blocking-timeout-wait-millis",this);
  blockingTimeoutWait.addRequiredPreceding(lastRequired);
  RequestParamArgWithValue idleTimeout=new RequestParamArgWithValue("idle-timeout-minutes",this);
  idleTimeout.addRequiredPreceding(lastRequired);
  RequestParamArgWithValue queryTimeout=new RequestParamArgWithValue("query-timeout",this);
  queryTimeout.addRequiredPreceding(lastRequired);
  RequestParamArgWithValue useTryLock=new RequestParamArgWithValue("use-try-lock",this);
  useTryLock.addRequiredPreceding(lastRequired);
  RequestParamArgWithValue setTxQueryTimeout=new RequestParamArgWithValue("set-tx-query-timeout",this);
  setTxQueryTimeout.addRequiredPreceding(lastRequired);
  RequestParamArgWithValue txIsolation=new RequestParamArgWithValue("transaction-isolation",this,new SimpleTabCompleter(new String[]{"TRANSACTION_READ_UNCOMMITTED","TRANSACTION_READ_COMMITTED","TRANSACTION_REPEATABLE_READ","TRANSACTION_SERIALIZABLE","TRANSACTION_NONE"}));
  txIsolation.addRequiredPreceding(lastRequired);
  RequestParamArgWithValue checkValidConnectionSql=new RequestParamArgWithValue("check-valid-connection-sql",this);
  checkValidConnectionSql.addRequiredPreceding(lastRequired);
  RequestParamArgWithValue exceptionSorterClass=new RequestParamArgWithValue("exception-sorter-class-name",this,"--exception-sorter-class");
  exceptionSorterClass.addRequiredPreceding(lastRequired);
  RequestParamArgWithValue exceptionSorterProps=new RequestParamPropertiesArg("exception-sorter-properties",this);
  exceptionSorterProps.addRequiredPreceding(exceptionSorterClass);
  RequestParamArgWithValue staleConnectionCheckerClass=new RequestParamArgWithValue("stale-connection-checker-class-name",this,"--stale-connection-checker-class");
  staleConnectionCheckerClass.addRequiredPreceding(lastRequired);
  RequestParamArgWithValue staleConnectionCheckerProps=new RequestParamPropertiesArg("stale-connection-checker-properties",this);
  staleConnectionCheckerProps.addRequiredPreceding(staleConnectionCheckerClass);
  RequestParamArgWithValue validConnectionCheckerClass=new RequestParamArgWithValue("valid-connection-checker-class-name",this,"--valid-connection-checker-class");
  validConnectionCheckerClass.addRequiredPreceding(lastRequired);
  RequestParamArgWithValue validConnectionCheckerProps=new RequestParamPropertiesArg("valid-connection-checker-properties",this);
  validConnectionCheckerProps.addRequiredPreceding(validConnectionCheckerClass);
  RequestParamArgWithoutValue backgroundValidation=new RequestParamArgWithoutValue("background-validation",this);
  backgroundValidation.addRequiredPreceding(lastRequired);
  RequestParamArgWithValue backgroundValidationMins=new RequestParamArgWithValue("background-validation-minutes",this);
  backgroundValidationMins.addRequiredPreceding(lastRequired);
  RequestParamArgWithoutValue useFastFail=new RequestParamArgWithoutValue("use-fast-fail",this);
  useFastFail.addRequiredPreceding(lastRequired);
  RequestParamArgWithoutValue validateOnMatch=new RequestParamArgWithoutValue("validate-on-match",this);
  validateOnMatch.addRequiredPreceding(lastRequired);
  RequestParamArgWithoutValue spy=new RequestParamArgWithoutValue("spy",this);
  spy.addRequiredPreceding(lastRequired);
  RequestParamArgWithoutValue useCCM=new RequestParamArgWithoutValue("use-ccm",this);
  useCCM.addRequiredPreceding(lastRequired);
}
