{
  int firstCharIndex=0;
  while (firstCharIndex < buffer.length()) {
    if (!Character.isWhitespace(buffer.charAt(firstCharIndex))) {
      break;
    }
    ++firstCharIndex;
  }
  int result=buffer.length();
  String chunk=null;
  CommandLineCompleter valueCompleter=null;
  if (firstCharIndex != result) {
    if (Character.isWhitespace(buffer.charAt(buffer.length() - 1))) {
      int lastNonWS=buffer.length() - 1;
      while (lastNonWS > 0 && Character.isWhitespace(buffer.charAt(lastNonWS))) {
        --lastNonWS;
      }
      if (lastNonWS > 0 && buffer.charAt(lastNonWS) == '=') {
        String argName=buffer.substring(firstCharIndex,lastNonWS - 1);
        for (        CommandArgument arg : allArgs) {
          if (argName.equals(arg.getDefaultName())) {
            valueCompleter=arg.getValueCompleter();
            if (valueCompleter == null) {
              return -1;
            }
            break;
          }
        }
      }
    }
 else {
      int i=buffer.length() - 1;
      while (i >= 0) {
        char ch=buffer.charAt(i);
        if (Character.isWhitespace(ch)) {
          break;
        }
        if (ch == '=') {
          result=i + 1;
          chunk=buffer.substring(result);
        }
        --i;
      }
      if (chunk == null) {
        result=i + 1;
        chunk=buffer.substring(result);
        if (buffer.charAt(result) != '-') {
          DefaultParsedArguments parsedArgs=new DefaultParsedArguments();
          parsedArgs.parse(buffer.substring(firstCharIndex,result));
          for (          CommandArgument arg : allArgs) {
            if (arg.isAvailable(ctx) && arg.getIndex() >= 0 && arg.canAppearNext(parsedArgs)) {
              valueCompleter=arg.getValueCompleter();
              break;
            }
          }
          if (valueCompleter == null) {
            return -1;
          }
        }
      }
 else {
        if (buffer.charAt(i + 1) != '-') {
          result=i + 1;
          chunk=buffer.substring(result);
          DefaultParsedArguments parsedArgs=new DefaultParsedArguments();
          parsedArgs.parse(buffer.substring(firstCharIndex,result));
          for (          CommandArgument arg : allArgs) {
            if (arg.isAvailable(ctx) && arg.getIndex() >= 0 && arg.canAppearNext(parsedArgs)) {
              valueCompleter=arg.getValueCompleter();
              break;
            }
          }
        }
 else {
          String argName=buffer.substring(i + 1,result - 1);
          for (          CommandArgument arg : allArgs) {
            if (argName.equals(arg.getDefaultName())) {
              valueCompleter=arg.getValueCompleter();
              break;
            }
          }
        }
        if (valueCompleter == null) {
          return -1;
        }
      }
    }
  }
  if (valueCompleter != null) {
    int valueResult=valueCompleter.complete(ctx,chunk == null ? "" : chunk,0,candidates);
    if (valueResult < 0) {
      return valueResult;
    }
 else {
      return result + valueResult;
    }
  }
  DefaultParsedArguments parsedArgs=new DefaultParsedArguments();
  int charLength=buffer.length() - firstCharIndex;
  if (charLength == 1 && buffer.charAt(firstCharIndex) == '-' || charLength == 2 && '-' == buffer.charAt(firstCharIndex) && '-' == buffer.charAt(firstCharIndex + 1)) {
    parsedArgs.parse("");
  }
 else {
    parsedArgs.parse(buffer.substring(firstCharIndex,result));
  }
  for (  CommandArgument arg : allArgs) {
    if (arg.isAvailable(ctx) && arg.canAppearNext(parsedArgs)) {
      if (arg.getIndex() >= 0) {
        CommandLineCompleter valCompl=arg.getValueCompleter();
        if (valCompl != null) {
          valCompl.complete(ctx,chunk == null ? "" : chunk,cursor,candidates);
        }
      }
 else {
        String argName=arg.getDefaultName();
        if (chunk == null) {
          if (arg.isValueRequired()) {
            argName+='=';
          }
          candidates.add(argName);
        }
 else         if (argName.startsWith(chunk)) {
          if (arg.isValueRequired()) {
            argName+='=';
          }
          candidates.add(argName);
        }
      }
    }
  }
  Collections.sort(candidates);
  return result;
}
