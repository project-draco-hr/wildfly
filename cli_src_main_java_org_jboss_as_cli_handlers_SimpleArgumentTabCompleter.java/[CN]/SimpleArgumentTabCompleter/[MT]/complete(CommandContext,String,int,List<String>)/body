{
  int firstCharIndex=0;
  while (firstCharIndex < buffer.length()) {
    if (!Character.isWhitespace(buffer.charAt(firstCharIndex))) {
      break;
    }
    ++firstCharIndex;
  }
  int result=buffer.length();
  String chunk=null;
  CommandLineCompleter valueCompleter=null;
  if (firstCharIndex != result) {
    results.reset();
    try {
      CommandLineParser.parse(buffer,new CommandLineParser.CallbackHandler(){
        @Override public void argument(        String name,        int nameStart,        String value,        int valueStart,        int end){
          results.argName=name;
          results.argValue=value;
          results.nameStart=nameStart;
          results.valueStart=valueStart;
          results.endIndex=end;
        }
      }
);
    }
 catch (    CommandLineException e) {
      return -1;
    }
    if (results.argValue != null) {
      if (results.argValue.isEmpty()) {
        chunk=null;
        result=results.valueStart;
        if (results.argName != null) {
          ctx.setArgumentsString(buffer.substring(0,results.nameStart));
          for (          CommandArgument arg : allArgs) {
            if (results.argName.equals(arg.getDefaultName())) {
              valueCompleter=arg.getValueCompleter();
              break;
            }
          }
        }
 else {
          ctx.setArgumentsString(buffer.substring(0,results.valueStart));
          for (          CommandArgument arg : allArgs) {
            if (arg.getIndex() >= 0 && arg.canAppearNext(ctx)) {
              valueCompleter=arg.getValueCompleter();
              break;
            }
          }
        }
        if (valueCompleter == null) {
          return -1;
        }
      }
 else {
        if (results.endIndex < buffer.length()) {
          chunk=null;
        }
 else {
          chunk=results.argValue;
          result=results.valueStart;
          if (results.argName != null) {
            ctx.setArgumentsString(buffer.substring(0,results.nameStart));
            for (            CommandArgument arg : allArgs) {
              if (results.argName.equals(arg.getDefaultName())) {
                valueCompleter=arg.getValueCompleter();
                break;
              }
            }
          }
 else {
            ctx.setArgumentsString(buffer.substring(0,results.valueStart));
            for (            CommandArgument arg : allArgs) {
              if (arg.getIndex() >= 0 && arg.canAppearNext(ctx)) {
                valueCompleter=arg.getValueCompleter();
                break;
              }
            }
          }
          if (valueCompleter == null) {
            return -1;
          }
        }
      }
    }
 else {
      if (results.endIndex < buffer.length()) {
        chunk=null;
      }
 else {
        chunk=results.argName;
        if (results.argName != null) {
          result=results.nameStart;
        }
      }
    }
  }
  if (valueCompleter != null) {
    int valueResult=valueCompleter.complete(ctx,chunk == null ? "" : chunk,cursor,candidates);
    if (valueResult < 0) {
      return valueResult;
    }
 else {
      return result + valueResult;
    }
  }
  int charLength=buffer.length() - firstCharIndex;
  if (charLength == 1 && buffer.charAt(firstCharIndex) == '-' || charLength == 2 && '-' == buffer.charAt(firstCharIndex) && '-' == buffer.charAt(firstCharIndex + 1)) {
    ctx.setArgumentsString("");
  }
 else {
    ctx.setArgumentsString(buffer.substring(firstCharIndex,result));
  }
  for (  CommandArgument arg : allArgs) {
    if (arg.canAppearNext(ctx)) {
      if (arg.getIndex() >= 0) {
        CommandLineCompleter valCompl=arg.getValueCompleter();
        if (valCompl != null) {
          valCompl.complete(ctx,chunk == null ? "" : chunk,cursor,candidates);
        }
      }
 else {
        String argName=arg.getDefaultName();
        if (chunk == null) {
          if (arg.isValueRequired()) {
            argName+='=';
          }
          candidates.add(argName);
        }
 else         if (argName.startsWith(chunk)) {
          if (arg.isValueRequired()) {
            argName+='=';
          }
          candidates.add(argName);
        }
      }
    }
  }
  Collections.sort(candidates);
  return result;
}
