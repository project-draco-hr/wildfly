{
  final ModelNode archiveValidationOperation=new ModelNode();
  archiveValidationOperation.get(OP).set(ADD);
  final ModelNode archiveValidationAddress=parentOperation.clone();
  archiveValidationAddress.add(ARCHIVE_VALIDATION,ARCHIVE_VALIDATION);
  archiveValidationAddress.protect();
  archiveValidationOperation.get(OP_ADDR).set(archiveValidationAddress);
  final int cnt=reader.getAttributeCount();
  for (int i=0; i < cnt; i++) {
    final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case ENABLED:
{
        String value=rawAttributeText(reader,ArchiveValidationParameters.ARCHIVE_VALIDATION_ENABLED.getAttribute().getXmlName());
        ArchiveValidationParameters.ARCHIVE_VALIDATION_ENABLED.getAttribute().parseAndSetParameter(value,archiveValidationOperation,reader);
        break;
      }
case FAIL_ON_ERROR:
{
      String value=rawAttributeText(reader,ArchiveValidationParameters.ARCHIVE_VALIDATION_FAIL_ON_ERROR.getAttribute().getXmlName());
      ArchiveValidationParameters.ARCHIVE_VALIDATION_FAIL_ON_ERROR.getAttribute().parseAndSetParameter(value,archiveValidationOperation,reader);
      break;
    }
case FAIL_ON_WARN:
{
    String value=rawAttributeText(reader,ArchiveValidationParameters.ARCHIVE_VALIDATION_FAIL_ON_WARN.getAttribute().getXmlName());
    ArchiveValidationParameters.ARCHIVE_VALIDATION_FAIL_ON_WARN.getAttribute().parseAndSetParameter(value,archiveValidationOperation,reader);
    break;
  }
default :
{
  throw unexpectedAttribute(reader,i);
}
}
}
requireNoContent(reader);
return archiveValidationOperation;
}
