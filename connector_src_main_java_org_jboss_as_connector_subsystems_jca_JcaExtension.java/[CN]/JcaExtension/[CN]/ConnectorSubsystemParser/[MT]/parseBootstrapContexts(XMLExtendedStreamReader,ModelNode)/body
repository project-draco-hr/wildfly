{
  ModelNode bootstrapContextOperation=null;
  while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
    final Element element=Element.forName(reader.getLocalName());
switch (element) {
case BOOTSTRAP_CONTEXT:
{
        bootstrapContextOperation=new ModelNode();
        bootstrapContextOperation.get(OP).set(ADD);
        final int cnt=reader.getAttributeCount();
        String name=null;
        String wmName=null;
        for (int i=0; i < cnt; i++) {
          final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case NAME:
{
              final Location location=reader.getLocation();
              name=rawAttributeText(reader,BootstrapContextAdd.BootstrapCtxParameters.NAME.getAttribute().getXmlName());
              BootstrapContextAdd.BootstrapCtxParameters.NAME.getAttribute().parseAndSetParameter(name,bootstrapContextOperation,location);
              break;
            }
case WORKMANAGER:
{
            final Location location=reader.getLocation();
            wmName=rawAttributeText(reader,BootstrapContextAdd.BootstrapCtxParameters.WORKMANAGER.getAttribute().getXmlName());
            BootstrapContextAdd.BootstrapCtxParameters.WORKMANAGER.getAttribute().parseAndSetParameter(wmName,bootstrapContextOperation,location);
            break;
          }
default :
{
          throw unexpectedAttribute(reader,i);
        }
    }
  }
  if (name == null) {
    if (DEFAULT_NAME.equals(wmName)) {
      name=DEFAULT_NAME;
    }
 else {
      throw new XMLStreamException("name attribute is mandatory for workmanager element");
    }
  }
  final ModelNode bootStrapCOntextAddress=parentAddress.clone();
  bootStrapCOntextAddress.add(BOOTSTRAP_CONTEXT,name);
  bootStrapCOntextAddress.protect();
  bootstrapContextOperation.get(OP_ADDR).set(bootStrapCOntextAddress);
  requireNoContent(reader);
  break;
}
default :
{
throw unexpectedElement(reader);
}
}
}
return bootstrapContextOperation;
}
