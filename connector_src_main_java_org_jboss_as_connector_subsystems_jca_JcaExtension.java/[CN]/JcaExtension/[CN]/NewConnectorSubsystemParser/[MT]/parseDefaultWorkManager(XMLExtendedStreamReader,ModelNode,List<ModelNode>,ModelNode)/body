{
  while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
    final Element element=Element.forName(reader.getLocalName());
switch (element) {
case LONG_RUNNING_THREADS:
{
        final ModelNode op=new ModelNode();
        op.get(OP).set(ADD);
        final ModelNode address=parentAddress.clone();
        address.add(DEFAULT_WORKMANAGER_THREADS,LONG_RUNNING_THREADS);
        address.protect();
        op.get(OP_ADDR).set(address);
        list.add(op);
        String name=(new NewThreadsParser()).readXmlElements(reader,list,address);
        node.get(DEFAULT_WORKMANAGER_LONG_RUNNING_THREAD_POOL).set(name);
        break;
      }
case SHORT_RUNNING_THREADS:
{
      final ModelNode op=new ModelNode();
      list.add(op);
      op.get(OP).set(ADD);
      final ModelNode address=parentAddress.clone();
      address.add(DEFAULT_WORKMANAGER_THREADS,SHORT_RUNNING_THREADS);
      address.protect();
      op.get(OP_ADDR).set(address);
      String name=(new NewThreadsParser()).readXmlElements(reader,list,address);
      node.get(DEFAULT_WORKMANAGER_SHORT_RUNNING_THREAD_POOL).set(name);
      break;
    }
default :
  throw unexpectedElement(reader);
}
}
requireNoContent(reader);
}
