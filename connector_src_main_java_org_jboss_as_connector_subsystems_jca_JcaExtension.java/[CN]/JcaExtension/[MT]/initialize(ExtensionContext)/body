{
  ROOT_LOGGER.debugf("Initializing Connector Extension");
  final boolean registerRuntimeOnly=context.isRuntimeOnlyRegistrationValid();
  final SubsystemRegistration subsystem=context.registerSubsystem(SUBSYSTEM_NAME,1,0);
  final ManagementResourceRegistration registration=subsystem.registerSubsystemModel(JcaSubsystemProviders.SUBSYSTEM);
  registration.registerOperationHandler(ADD,JcaSubsystemAdd.INSTANCE,JcaSubsystemProviders.SUBSYSTEM_ADD_DESC,false);
  registration.registerOperationHandler(REMOVE,ReloadRequiredRemoveStepHandler.INSTANCE,JcaSubsystemProviders.SUBSYSTEM_REMOVE_DESC,false);
  registration.registerOperationHandler(DESCRIBE,GenericSubsystemDescribeHandler.INSTANCE,GenericSubsystemDescribeHandler.INSTANCE,false,OperationEntry.EntryType.PRIVATE);
  final ManagementResourceRegistration archiveValidation=registration.registerSubModel(PathElement.pathElement(ARCHIVE_VALIDATION,ARCHIVE_VALIDATION),JcaSubsystemProviders.ARCHIVE_VALIDATION_DESC);
  archiveValidation.registerOperationHandler(ADD,ArchiveValidationAdd.INSTANCE,JcaSubsystemProviders.ADD_ARCHIVE_VALIDATION_DESC,false);
  archiveValidation.registerOperationHandler(REMOVE,ReloadRequiredRemoveStepHandler.INSTANCE,JcaSubsystemProviders.REMOVE_ARCHIVE_VALIDATION_DESC,false);
  for (  final ArchiveValidationAdd.ArchiveValidationParameters parameter : ArchiveValidationAdd.ArchiveValidationParameters.values()) {
    archiveValidation.registerReadWriteAttribute(parameter.getAttribute().getName(),null,new ReloadRequiredWriteAttributeHandler(),AttributeAccess.Storage.CONFIGURATION);
  }
  final ManagementResourceRegistration beanValidation=registration.registerSubModel(PathElement.pathElement(BEAN_VALIDATION,BEAN_VALIDATION),JcaSubsystemProviders.BEAN_VALIDATION_DESC);
  beanValidation.registerOperationHandler(ADD,BeanValidationAdd.INSTANCE,JcaSubsystemProviders.ADD_BEAN_VALIDATION_DESC,false);
  beanValidation.registerOperationHandler(REMOVE,ReloadRequiredRemoveStepHandler.INSTANCE,JcaSubsystemProviders.REMOVE_BEAN_VALIDATION_DESC,false);
  for (  final BeanValidationAdd.BeanValidationParameters parameter : BeanValidationAdd.BeanValidationParameters.values()) {
    beanValidation.registerReadWriteAttribute(parameter.getAttribute().getName(),null,new ReloadRequiredWriteAttributeHandler(),AttributeAccess.Storage.CONFIGURATION);
  }
  final ManagementResourceRegistration cachedConnectionManager=registration.registerSubModel(PathElement.pathElement(CACHED_CONNECTION_MANAGER,CACHED_CONNECTION_MANAGER),JcaSubsystemProviders.CACHED_CONNECTION_MANAGER_DESC);
  cachedConnectionManager.registerOperationHandler(ADD,CachedConnectionManagerAdd.INSTANCE,JcaSubsystemProviders.ADD_CACHED_CONNECTION_MANAGER_DESC,false);
  cachedConnectionManager.registerOperationHandler(REMOVE,ReloadRequiredRemoveStepHandler.INSTANCE,JcaSubsystemProviders.REMOVE_CACHED_CONNECTION_MANAGER_DESC,false);
  for (  final CachedConnectionManagerAdd.CcmParameters parameter : CachedConnectionManagerAdd.CcmParameters.values()) {
    cachedConnectionManager.registerReadWriteAttribute(parameter.getAttribute().getName(),null,new ReloadRequiredWriteAttributeHandler(),AttributeAccess.Storage.CONFIGURATION);
  }
  final ManagementResourceRegistration workManager=registration.registerSubModel(PathElement.pathElement(WORKMANAGER),JcaSubsystemProviders.WORKMANAGER_DESC);
  workManager.registerOperationHandler(ADD,WorkManagerAdd.INSTANCE,JcaSubsystemProviders.ADD_WORKMANAGER_DESC,false);
  workManager.registerOperationHandler(REMOVE,ReloadRequiredRemoveStepHandler.INSTANCE,JcaSubsystemProviders.REMOVE_WORKMANAGER_DESC,false);
  for (  final WorkManagerAdd.WmParameters parameter : WorkManagerAdd.WmParameters.values()) {
    workManager.registerReadWriteAttribute(parameter.getAttribute().getName(),null,new ReloadRequiredWriteAttributeHandler(),AttributeAccess.Storage.CONFIGURATION);
  }
  workManager.registerSubModel(BoundedQueueThreadPoolResourceDefinition.create(true,WORKMANAGER_SHORT_RUNNING,registerRuntimeOnly));
  workManager.registerSubModel(BoundedQueueThreadPoolResourceDefinition.create(true,WORKMANAGER_LONG_RUNNING,registerRuntimeOnly));
  final ManagementResourceRegistration bootstrapContext=registration.registerSubModel(PathElement.pathElement(BOOTSTRAP_CONTEXT),JcaSubsystemProviders.BOOTSTRAP_CONTEXT_DESC);
  bootstrapContext.registerOperationHandler(ADD,BootstrapContextAdd.INSTANCE,JcaSubsystemProviders.ADD_BOOTSTRAP_CONTEXT_DESC,false);
  bootstrapContext.registerOperationHandler(REMOVE,ReloadRequiredRemoveStepHandler.INSTANCE,JcaSubsystemProviders.REMOVE_BOOTSTRAP_CONTEXT_DESC,false);
  for (  final BootstrapContextAdd.BootstrapCtxParameters parameter : BootstrapContextAdd.BootstrapCtxParameters.values()) {
    bootstrapContext.registerReadWriteAttribute(parameter.getAttribute().getName(),null,new ReloadRequiredWriteAttributeHandler(),AttributeAccess.Storage.CONFIGURATION);
  }
  subsystem.registerXMLElementWriter(ConnectorSubsystemParser.INSTANCE);
}
