{
  ROOT_LOGGER.debugf("Initializing Connector Extension");
  final boolean registerRuntimeOnly=context.isRuntimeOnlyRegistrationValid();
  final SubsystemRegistration subsystem=context.registerSubsystem(SUBSYSTEM_NAME,MANAGEMENT_API_MAJOR_VERSION,MANAGEMENT_API_MINOR_VERSION,MANAGEMENT_API_MICRO_VERSION);
  final ManagementResourceRegistration registration=subsystem.registerSubsystemModel(JcaSubsystemRootDefinition.INSTANCE);
  registration.registerOperationHandler(DESCRIBE,GenericSubsystemDescribeHandler.INSTANCE,GenericSubsystemDescribeHandler.INSTANCE,false,OperationEntry.EntryType.PRIVATE);
  final ManagementResourceRegistration archiveValidation=registration.registerSubModel(JcaArchiveValidationDefinition.INSTANCE);
  final ManagementResourceRegistration beanValidation=registration.registerSubModel(PathElement.pathElement(BEAN_VALIDATION,BEAN_VALIDATION),JcaSubsystemProviders.BEAN_VALIDATION_DESC);
  beanValidation.registerOperationHandler(ADD,BeanValidationAdd.INSTANCE,JcaSubsystemProviders.ADD_BEAN_VALIDATION_DESC,false);
  beanValidation.registerOperationHandler(REMOVE,ReloadRequiredRemoveStepHandler.INSTANCE,JcaSubsystemProviders.REMOVE_BEAN_VALIDATION_DESC,false);
  for (  final BeanValidationAdd.BeanValidationParameters parameter : BeanValidationAdd.BeanValidationParameters.values()) {
    beanValidation.registerReadWriteAttribute(parameter.getAttribute(),null,JcaAttributeWriteHandler.INSTANCE);
  }
  final ManagementResourceRegistration cachedConnectionManager=registration.registerSubModel(PathElement.pathElement(CACHED_CONNECTION_MANAGER,CACHED_CONNECTION_MANAGER),JcaSubsystemProviders.CACHED_CONNECTION_MANAGER_DESC);
  cachedConnectionManager.registerOperationHandler(ADD,CachedConnectionManagerAdd.INSTANCE,JcaSubsystemProviders.ADD_CACHED_CONNECTION_MANAGER_DESC,false);
  cachedConnectionManager.registerOperationHandler(REMOVE,ReloadRequiredRemoveStepHandler.INSTANCE,JcaSubsystemProviders.REMOVE_CACHED_CONNECTION_MANAGER_DESC,false);
  for (  final CachedConnectionManagerAdd.CcmParameters parameter : CachedConnectionManagerAdd.CcmParameters.values()) {
    if (parameter != CachedConnectionManagerAdd.CcmParameters.INSTALL) {
      cachedConnectionManager.registerReadWriteAttribute(parameter.getAttribute(),null,JcaAttributeWriteHandler.INSTANCE);
    }
 else {
      cachedConnectionManager.registerReadWriteAttribute(parameter.getAttribute(),null,new ReloadRequiredWriteAttributeHandler());
    }
  }
  final ManagementResourceRegistration workManager=registration.registerSubModel(PathElement.pathElement(WORKMANAGER),JcaSubsystemProviders.WORKMANAGER_DESC);
  workManager.registerOperationHandler(ADD,WorkManagerAdd.INSTANCE,JcaSubsystemProviders.ADD_WORKMANAGER_DESC,false);
  workManager.registerOperationHandler(REMOVE,ReloadRequiredRemoveStepHandler.INSTANCE,JcaSubsystemProviders.REMOVE_WORKMANAGER_DESC,false);
  for (  final WorkManagerAdd.WmParameters parameter : WorkManagerAdd.WmParameters.values()) {
    workManager.registerReadWriteAttribute(parameter.getAttribute(),null,new ReloadRequiredWriteAttributeHandler());
  }
  workManager.registerSubModel(BoundedQueueThreadPoolResourceDefinition.create(WORKMANAGER_SHORT_RUNNING,ThreadsServices.STANDARD_THREAD_FACTORY_RESOLVER,ThreadsServices.STANDARD_HANDOFF_EXECUTOR_RESOLVER,ThreadsServices.EXECUTOR.append(WORKMANAGER_SHORT_RUNNING),registerRuntimeOnly));
  workManager.registerSubModel(BoundedQueueThreadPoolResourceDefinition.create(WORKMANAGER_LONG_RUNNING,ThreadsServices.STANDARD_THREAD_FACTORY_RESOLVER,ThreadsServices.STANDARD_HANDOFF_EXECUTOR_RESOLVER,ThreadsServices.EXECUTOR.append(WORKMANAGER_LONG_RUNNING),registerRuntimeOnly));
  final ManagementResourceRegistration bootstrapContext=registration.registerSubModel(PathElement.pathElement(BOOTSTRAP_CONTEXT),JcaSubsystemProviders.BOOTSTRAP_CONTEXT_DESC);
  bootstrapContext.registerOperationHandler(ADD,BootstrapContextAdd.INSTANCE,JcaSubsystemProviders.ADD_BOOTSTRAP_CONTEXT_DESC,false);
  bootstrapContext.registerOperationHandler(REMOVE,ReloadRequiredRemoveStepHandler.INSTANCE,JcaSubsystemProviders.REMOVE_BOOTSTRAP_CONTEXT_DESC,false);
  for (  final BootstrapContextAdd.BootstrapCtxParameters parameter : BootstrapContextAdd.BootstrapCtxParameters.values()) {
    bootstrapContext.registerReadWriteAttribute(parameter.getAttribute(),null,new ReloadRequiredWriteAttributeHandler());
  }
  subsystem.registerXMLElementWriter(ConnectorSubsystemParser.INSTANCE);
}
