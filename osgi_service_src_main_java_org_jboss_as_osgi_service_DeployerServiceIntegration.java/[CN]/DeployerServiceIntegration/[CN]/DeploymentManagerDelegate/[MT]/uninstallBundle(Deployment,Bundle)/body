{
  try {
    String contextName=DeploymentHolderService.getContextName(dep);
    ServiceName serviceName=BundleInstallService.getServiceName(contextName);
    ServiceController<?> controller=serviceContainer.getService(serviceName);
    if (controller == null) {
      BundleManagement bundleManager=injectedBundleManager.getValue();
      bundleManager.uninstallBundle(dep);
      return;
    }
    final CountDownLatch latch=new CountDownLatch(1);
    controller.addListener(new AbstractServiceListener<Object>(){
      @Override public void listenerAdded(      ServiceController<? extends Object> controller){
        if (controller.getState() == State.REMOVED)         serviceRemoved(controller);
 else         if (controller.getState() == State.START_FAILED)         serviceFailed(controller,controller.getStartException());
      }
      @Override public void serviceRemoved(      ServiceController<? extends Object> controller){
        log.tracef("Service removed: %s",controller.getName());
        controller.removeListener(this);
        latch.countDown();
      }
      @Override public void serviceFailed(      ServiceController<? extends Object> controller,      StartException reason){
        log.tracef(reason,"Service failed: %s",controller.getName());
        controller.removeListener(this);
        latch.countDown();
      }
    }
);
    DeploymentPlanBuilder builder=deploymentManager.newDeploymentPlan();
    builder=builder.undeploy(contextName).remove(contextName);
    DeploymentPlan plan=builder.build();
    DeploymentAction removeAction=builder.getLastAction();
    executeDeploymentPlan(plan,removeAction);
    latch.await(10,TimeUnit.SECONDS);
    if (controller.getState() == State.START_FAILED)     throw controller.getStartException();
    if (controller.getState() != State.REMOVED)     throw new BundleException("BundleInstallService not removed: " + serviceName);
  }
 catch (  RuntimeException rte) {
    throw rte;
  }
catch (  BundleException ex) {
    throw ex;
  }
catch (  Exception ex) {
    throw new BundleException("Cannot undeploy bundle: " + dep,ex);
  }
}
