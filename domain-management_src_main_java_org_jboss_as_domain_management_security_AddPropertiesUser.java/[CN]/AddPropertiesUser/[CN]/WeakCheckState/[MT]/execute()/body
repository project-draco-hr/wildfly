{
  State retryState=values.nonInteractive ? null : new PromptNewUserState(values);
  if (Arrays.equals(values.userName.toCharArray(),values.password)) {
    return new ErrorState(MESSAGES.usernamePasswordMatch(),retryState);
  }
  for (  char currentChar : values.userName.toCharArray()) {
    if ((Character.isLetter(currentChar) || Character.isDigit(currentChar)) == false) {
      return new ErrorState(MESSAGES.usernameNotAlphaNumeric(),retryState);
    }
  }
  boolean weakUserName=false;
  for (  String current : badUsernames) {
    if (current.equals(values.userName.toLowerCase())) {
      weakUserName=true;
      break;
    }
  }
  State addState=new AddUser(values);
  final State continuingState;
  if (values.nonInteractive) {
    continuingState=addState;
  }
 else {
    String message=MESSAGES.aboutToAddUser(values.userName,values.realm);
    String prompt=MESSAGES.isCorrectPrompt();
    continuingState=new ConfirmationChoice(message,prompt,addState,new PromptNewUserState(values));
  }
  if (weakUserName && values.nonInteractive == false) {
    String message=MESSAGES.usernameEasyToGuess(values.userName);
    String prompt=MESSAGES.sureToAddUser(values.userName);
    State noState=new PromptNewUserState(values);
    return new ConfirmationChoice(message,prompt,continuingState,noState);
  }
  return continuingState;
}
