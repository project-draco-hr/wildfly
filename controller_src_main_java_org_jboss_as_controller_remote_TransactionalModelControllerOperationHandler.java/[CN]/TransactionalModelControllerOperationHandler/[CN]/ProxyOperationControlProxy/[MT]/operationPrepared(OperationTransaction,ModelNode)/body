{
  try {
    new OperationStatusRequest(executeRequestContext.getBatchId(),result){
      @Override protected byte getRequestCode(){
        return ModelControllerProtocol.OPERATION_PREPARED_REQUEST;
      }
      @Override protected void writeRequest(      final int protocolVersion,      final FlushableDataOutput output) throws IOException {
        executeRequestContext.setActiveTX(transaction);
        activeTransactions.put(executeRequestContext.getBatchId(),executeRequestContext);
        super.writeRequest(protocolVersion,output);
      }
      protected ManagementResponseHandler<Void> getResponseHandler(){
        return new ManagementResponseHandler<Void>(){
          @Override protected Void readResponse(          DataInput input) throws IOException {
            return null;
          }
        }
;
      }
    }
.executeForResult(executorService,getChannelStrategy(executeRequestContext.getChannel()));
    executeRequestContext.setPreparedOrFailed();
  }
 catch (  Exception e) {
    executeRequestContext.setError(e.getMessage());
    throw new RuntimeException(e);
  }
  try {
    executeRequestContext.awaitTxCompleted();
  }
 catch (  InterruptedException e) {
    executeRequestContext.setError("Interrupted while waiting for request");
    Thread.currentThread().interrupt();
  }
}
