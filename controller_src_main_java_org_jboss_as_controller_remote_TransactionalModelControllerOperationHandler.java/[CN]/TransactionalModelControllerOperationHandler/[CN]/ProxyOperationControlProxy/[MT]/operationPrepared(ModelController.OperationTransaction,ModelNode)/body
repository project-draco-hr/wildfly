{
  try {
    prepared=true;
    executeRequest(new OperationStatusRequest(result){
      @Override public byte getOperationType(){
        return ModelControllerProtocol.OPERATION_PREPARED_REQUEST;
      }
      @Override protected void sendRequest(      ActiveOperation.ResultHandler<Void> resultHandler,      ManagementRequestContext<ExecuteRequestContext> context,      FlushableDataOutput output) throws IOException {
        executeRequestContext.setActiveTX(transaction);
        super.sendRequest(resultHandler,context,output);
      }
      @Override public void handleRequest(      DataInput input,      ActiveOperation.ResultHandler<Void> resultHandler,      ManagementRequestContext<ExecuteRequestContext> context) throws IOException {
      }
    }
);
  }
 catch (  Exception e) {
    executeRequestContext.handleFailed(e);
    throw new RuntimeException(e);
  }
  try {
    executeRequestContext.awaitTxCompleted();
  }
 catch (  InterruptedException e) {
    executeRequestContext.handleFailed(e);
    Thread.currentThread().interrupt();
  }
}
