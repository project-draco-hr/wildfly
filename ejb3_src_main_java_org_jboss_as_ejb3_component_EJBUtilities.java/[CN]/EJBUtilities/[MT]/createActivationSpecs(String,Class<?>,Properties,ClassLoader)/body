{
  try {
    ActivationSpec as=null;
    boolean raFound=false;
    String packageName=knownRar.get(resourceAdapterName);
    if (packageName != null) {
      raFound=true;
    }
    if (!raFound) {
      for (      String id : getMdr().getResourceAdapters()) {
        if (getMdr().getRoot(id).getName().indexOf(resourceAdapterName) != -1) {
          if (!raFound) {
            ResourceAdapter ra=getMdr().getResourceAdapter(id).getResourceadapter();
            if (ra instanceof ResourceAdapter1516 && ((ResourceAdapter1516)ra).getInboundResourceadapter() != null) {
              String className=((ResourceAdapter1516)ra).getResourceadapterClass();
              if (className.lastIndexOf(".") != -1)               packageName=className.substring(0,className.lastIndexOf("."));
 else               packageName="";
              raFound=true;
            }
          }
 else {
            throw new IllegalStateException("found more than one RA registered as " + resourceAdapterName);
          }
        }
      }
    }
    if (!raFound) {
      throw new IllegalStateException("Not found RA registered as " + resourceAdapterName);
    }
    Set<String> ids=getResourceAdapterRepository().getResourceAdapters(messageListenerInterface);
    List<MessageListener> listeners=null;
    boolean found=false;
    for (    String id : ids) {
      if (id.startsWith(packageName)) {
        if (!found) {
          listeners=getResourceAdapterRepository().getMessageListeners(id);
          found=true;
        }
 else {
          throw new IllegalStateException("found more than one RA registered " + resourceAdapterName);
        }
      }
    }
    if (found) {
      MessageListener listener=listeners.get(0);
      as=listener.getActivation().createInstance();
      PropertyEditors.mapJavaBeanProperties(as,beanProps);
    }
    return as;
  }
 catch (  IllegalAccessException e) {
    throw new RuntimeException(e);
  }
catch (  ResourceException e) {
    throw new RuntimeException(e);
  }
catch (  InstantiationException e) {
    throw new RuntimeException(e);
  }
catch (  NotFoundException e) {
    throw new RuntimeException(e);
  }
catch (  IntrospectionException e) {
    throw new RuntimeException(e);
  }
catch (  org.jboss.jca.core.spi.mdr.NotFoundException e) {
    throw new RuntimeException(e);
  }
}
