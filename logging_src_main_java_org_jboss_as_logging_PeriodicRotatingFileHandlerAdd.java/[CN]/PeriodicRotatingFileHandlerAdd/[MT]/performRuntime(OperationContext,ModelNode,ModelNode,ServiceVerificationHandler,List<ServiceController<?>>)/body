{
  final PathAddress address=PathAddress.pathAddress(operation.get(OP_ADDR));
  final String name=address.getLastElement().getValue();
  final ServiceTarget serviceTarget=context.getServiceTarget();
  try {
    final PeriodicRotatingFileHandlerService service=new PeriodicRotatingFileHandlerService();
    final ServiceBuilder<Handler> serviceBuilder=serviceTarget.addService(LogServices.handlerName(name),service);
    if (operation.hasDefined(FILE)) {
      final HandlerFileService fileService=new HandlerFileService(operation.get(FILE,PATH).asString());
      final ServiceBuilder<?> fileBuilder=serviceTarget.addService(LogServices.handlerFileName(name),fileService);
      if (operation.get(FILE).hasDefined(CommonAttributes.RELATIVE_TO)) {
        fileBuilder.addDependency(AbstractPathService.pathNameOf(operation.get(FILE,RELATIVE_TO).asString()),String.class,fileService.getRelativeToInjector());
      }
      fileBuilder.setInitialMode(ServiceController.Mode.ACTIVE).install();
      serviceBuilder.addDependency(LogServices.handlerFileName(name),String.class,service.getFileNameInjector());
    }
    if (operation.hasDefined(LEVEL))     service.setLevel(Level.parse(operation.get(LEVEL).asString()));
    final Boolean autoFlush=operation.get(AUTOFLUSH).asBoolean();
    if (autoFlush != null)     service.setAutoflush(autoFlush.booleanValue());
    if (operation.hasDefined(SUFFIX))     service.setSuffix(operation.get(SUFFIX).asString());
    if (operation.hasDefined(ENCODING))     service.setEncoding(operation.get(ENCODING).asString());
    if (operation.hasDefined(FORMATTER))     service.setFormatterSpec(createFormatterSpec(operation));
    serviceBuilder.addListener(verificationHandler);
    serviceBuilder.setInitialMode(ServiceController.Mode.ACTIVE);
    newControllers.add(serviceBuilder.install());
  }
 catch (  Throwable t) {
    throw new OperationFailedException(new ModelNode().set(t.getLocalizedMessage()));
  }
}
