{
  boolean mappingRequired=false;
  String domain=null;
  String defaultPrincipal=null;
  List<String> defaultGroups=null;
  Map<String,String> userMappings=null;
  Map<String,String> groupMappings=null;
  boolean userMappingEnabled=false;
  while (reader.hasNext()) {
switch (reader.nextTag()) {
case END_ELEMENT:
{
        if (WorkManager.Tag.forName(reader.getLocalName()) == WorkManager.Tag.SECURITY) {
          return new WorkManagerSecurityImpl(mappingRequired,domain,defaultPrincipal,defaultGroups,userMappings,groupMappings);
        }
 else {
          if (WorkManagerSecurity.Tag.forName(reader.getLocalName()) == WorkManagerSecurity.Tag.UNKNOWN) {
            throw new ParserException(bundle.unexpectedEndTag(reader.getLocalName()));
          }
        }
        break;
      }
case START_ELEMENT:
{
switch (WorkManagerSecurity.Tag.forName(reader.getLocalName())) {
case DEFAULT_GROUPS:
case MAPPINGS:
{
          break;
        }
case MAPPING_REQUIRED:
{
        String value=rawElementText(reader);
        WM_SECURITY_MAPPING_REQUIRED.parseAndSetParameter(value,operation,reader);
        break;
      }
case DOMAIN:
{
      String value=rawElementText(reader);
      WM_SECURITY_DOMAIN.parseAndSetParameter(value,operation,reader);
      break;
    }
case DEFAULT_PRINCIPAL:
{
    String value=rawElementText(reader);
    WM_SECURITY_DEFAULT_PRINCIPAL.parseAndSetParameter(value,operation,reader);
    break;
  }
case GROUP:
{
  String value=rawElementText(reader);
  operation.get(WM_SECURITY_DEFAULT_GROUPS.getName()).add(WM_SECURITY_DEFAULT_GROUP.parse(value,reader));
  break;
}
case USERS:
{
userMappingEnabled=true;
break;
}
case GROUPS:
{
userMappingEnabled=false;
break;
}
case MAP:
{
if (userMappingEnabled) {
String from=rawAttributeText(reader,WorkManagerSecurity.Attribute.FROM.getLocalName());
if (from == null || from.trim().equals("")) throw new ParserException(bundle.requiredAttributeMissing(WorkManagerSecurity.Attribute.FROM.getLocalName(),reader.getLocalName()));
String to=rawAttributeText(reader,WorkManagerSecurity.Attribute.TO.getLocalName());
if (to == null || to.trim().equals("")) throw new ParserException(bundle.requiredAttributeMissing(WorkManagerSecurity.Attribute.TO.getLocalName(),reader.getLocalName()));
ModelNode object=new ModelNode();
WM_SECURITY_MAPPING_FROM.parseAndSetParameter(from,object,reader);
WM_SECURITY_MAPPING_TO.parseAndSetParameter(to,object,reader);
operation.get(WM_SECURITY_MAPPING_USERS.getName()).add(object);
}
 else {
String from=rawAttributeText(reader,WorkManagerSecurity.Attribute.FROM.getLocalName());
if (from == null || from.trim().equals("")) throw new ParserException(bundle.requiredAttributeMissing(WorkManagerSecurity.Attribute.FROM.getLocalName(),reader.getLocalName()));
String to=rawAttributeText(reader,WorkManagerSecurity.Attribute.TO.getLocalName());
if (to == null || to.trim().equals("")) throw new ParserException(bundle.requiredAttributeMissing(WorkManagerSecurity.Attribute.TO.getLocalName(),reader.getLocalName()));
ModelNode object=new ModelNode();
WM_SECURITY_MAPPING_FROM.parseAndSetParameter(from,object,reader);
WM_SECURITY_MAPPING_TO.parseAndSetParameter(to,object,reader);
operation.get(WM_SECURITY_MAPPING_GROUPS.getName()).add(object);
}
break;
}
default :
throw new ParserException(bundle.unexpectedElement(reader.getLocalName()));
}
break;
}
}
}
throw new ParserException(bundle.unexpectedEndOfDocument());
}
