{
  final ModelNode raAddress=parentAddress.clone();
  final ModelNode operation=new ModelNode();
  operation.get(OP).set(ADD);
  String archiveOrModuleName=null;
  HashMap<String,ModelNode> configPropertiesOperations=new HashMap<String,ModelNode>();
  HashMap<String,ModelNode> connectionDefinitionsOperations=new HashMap<String,ModelNode>();
  HashMap<String,HashMap<String,ModelNode>> cfConfigPropertiesOperations=new HashMap<String,HashMap<String,ModelNode>>();
  HashMap<String,ModelNode> adminObjectsOperations=new HashMap<String,ModelNode>();
  HashMap<String,HashMap<String,ModelNode>> aoConfigPropertiesOperations=new HashMap<String,HashMap<String,ModelNode>>();
  boolean archiveOrModuleMatched=false;
  boolean txSupportMatched=false;
  boolean isXa=false;
  while (reader.hasNext()) {
switch (reader.nextTag()) {
case END_ELEMENT:
{
        if (ResourceAdapters.Tag.forName(reader.getLocalName()) == ResourceAdapters.Tag.RESOURCE_ADAPTER) {
          if (archiveOrModuleName != null) {
            Integer identifier=ConnectorServices.getResourceIdentifier(archiveOrModuleName);
            if (identifier != null && identifier != 0) {
              archiveOrModuleName=archiveOrModuleName + ConnectorServices.RA_SERVICE_NAME_SEPARATOR + identifier;
            }
            raAddress.add(RESOURCEADAPTER_NAME,archiveOrModuleName);
            raAddress.protect();
            operation.get(OP_ADDR).set(raAddress);
            list.add(operation);
            for (            Map.Entry<String,ModelNode> entry : configPropertiesOperations.entrySet()) {
              final ModelNode env=raAddress.clone();
              env.add(CONFIG_PROPERTIES.getName(),entry.getKey());
              env.protect();
              entry.getValue().get(OP_ADDR).set(env);
              list.add(entry.getValue());
            }
            for (            Map.Entry<String,ModelNode> entry : connectionDefinitionsOperations.entrySet()) {
              final ModelNode env=raAddress.clone();
              env.add(CONNECTIONDEFINITIONS_NAME,entry.getKey());
              env.protect();
              entry.getValue().get(OP_ADDR).set(env);
              list.add(entry.getValue());
              final HashMap<String,ModelNode> properties=cfConfigPropertiesOperations.get(entry.getKey());
              if (properties != null) {
                for (                Map.Entry<String,ModelNode> configEntry : properties.entrySet()) {
                  final ModelNode configEnv=env.clone();
                  configEnv.add(CONFIG_PROPERTIES.getName(),configEntry.getKey());
                  configEnv.protect();
                  configEntry.getValue().get(OP_ADDR).set(configEnv);
                  list.add(configEntry.getValue());
                }
              }
            }
            for (            Map.Entry<String,ModelNode> entry : adminObjectsOperations.entrySet()) {
              final ModelNode env=raAddress.clone();
              env.add(ADMIN_OBJECTS_NAME,entry.getKey());
              env.protect();
              entry.getValue().get(OP_ADDR).set(env);
              list.add(entry.getValue());
              final HashMap<String,ModelNode> aoProperties=aoConfigPropertiesOperations.get(entry.getKey());
              if (aoProperties != null) {
                for (                Map.Entry<String,ModelNode> configEntry : aoProperties.entrySet()) {
                  final ModelNode configEnv=env.clone();
                  configEnv.add(CONFIG_PROPERTIES.getName(),configEntry.getKey());
                  configEnv.protect();
                  configEntry.getValue().get(OP_ADDR).set(configEnv);
                  list.add(configEntry.getValue());
                }
              }
            }
            return;
          }
 else {
            throw new ParserException(bundle.requiredElementMissing(ARCHIVE.getName(),RESOURCEADAPTER_NAME));
          }
        }
 else {
          if (AS7ResourceAdapterTags.forName(reader.getLocalName()) == AS7ResourceAdapterTags.UNKNOWN) {
            throw new ParserException(bundle.unexpectedEndTag(reader.getLocalName()));
          }
        }
        break;
      }
case START_ELEMENT:
{
switch (AS7ResourceAdapterTags.forName(reader.getLocalName())) {
case ADMIN_OBJECTS:
case CONNECTION_DEFINITIONS:
case BEAN_VALIDATION_GROUPS:
{
          break;
        }
case ADMIN_OBJECT:
{
        parseAdminObjects(reader,adminObjectsOperations,aoConfigPropertiesOperations);
        break;
      }
case CONNECTION_DEFINITION:
{
      parseConnectionDefinitions(reader,connectionDefinitionsOperations,cfConfigPropertiesOperations,isXa);
      break;
    }
case BEAN_VALIDATION_GROUP:
{
    String value=rawElementText(reader);
    operation.get(BEANVALIDATION_GROUPS.getName()).add(BEANVALIDATIONGROUP.parse(value,reader));
    break;
  }
case BOOTSTRAP_CONTEXT:
{
  String value=rawElementText(reader);
  BOOTSTRAP_CONTEXT.parseAndSetParameter(value,operation,reader);
  break;
}
case CONFIG_PROPERTY:
{
parseConfigProperties(reader,configPropertiesOperations);
break;
}
case TRANSACTION_SUPPORT:
{
if (txSupportMatched) {
throw new ParserException(bundle.unexpectedElement(TRANSACTION_SUPPORT.getXmlName()));
}
String value=rawElementText(reader);
TRANSACTION_SUPPORT.parseAndSetParameter(value,operation,reader);
isXa=value != null && TransactionSupportEnum.valueOf(value) == TransactionSupportEnum.XATransaction;
txSupportMatched=true;
break;
}
case ARCHIVE:
{
if (archiveOrModuleMatched) {
throw new ParserException(bundle.unexpectedElement(ARCHIVE.getXmlName()));
}
archiveOrModuleName=rawElementText(reader);
ARCHIVE.parseAndSetParameter(archiveOrModuleName,operation,reader);
archiveOrModuleMatched=true;
break;
}
case MODULE:
{
String moduleId=rawAttributeText(reader,"id");
String moduleSlot=rawAttributeText(reader,"slot","main");
archiveOrModuleName=moduleId + ":" + moduleSlot;
MODULE.parseAndSetParameter(archiveOrModuleName,operation,reader);
if (archiveOrModuleMatched) {
throw new ParserException(bundle.unexpectedElement(MODULE.getXmlName()));
}
archiveOrModuleMatched=true;
break;
}
default :
throw new ParserException(bundle.unexpectedElement(reader.getLocalName()));
}
break;
}
}
}
throw new ParserException(bundle.unexpectedEndOfDocument());
}
