{
  final ModelNode raAddress=parentAddress.clone();
  final ModelNode operation=new ModelNode();
  operation.get(OP).set(ADD);
  String archiveName=null;
  HashMap<String,ModelNode> configPropertiesOperations=new HashMap<String,ModelNode>();
  HashMap<String,ModelNode> connectionDefinitionsOperations=new HashMap<String,ModelNode>();
  HashMap<String,HashMap<String,ModelNode>> cfConfigPropertiesOperations=new HashMap<String,HashMap<String,ModelNode>>();
  HashMap<String,ModelNode> adminObjectsOperations=new HashMap<String,ModelNode>();
  HashMap<String,HashMap<String,ModelNode>> aoConfigPropertiesOperations=new HashMap<String,HashMap<String,ModelNode>>();
  while (reader.hasNext()) {
switch (reader.nextTag()) {
case END_ELEMENT:
{
        if (ResourceAdapters.Tag.forName(reader.getLocalName()) == ResourceAdapters.Tag.RESOURCE_ADAPTER) {
          if (archiveName != null) {
            raAddress.add(RESOURCEADAPTER_NAME,archiveName);
            raAddress.protect();
            operation.get(OP_ADDR).set(raAddress);
            list.add(operation);
            for (            Map.Entry<String,ModelNode> entry : configPropertiesOperations.entrySet()) {
              final ModelNode env=raAddress.clone();
              env.add(CONFIG_PROPERTIES.getName(),entry.getKey());
              env.protect();
              entry.getValue().get(OP_ADDR).set(env);
              list.add(entry.getValue());
            }
            for (            Map.Entry<String,ModelNode> entry : connectionDefinitionsOperations.entrySet()) {
              final ModelNode env=raAddress.clone();
              env.add(CONNECTIONDEFINITIONS_NAME,entry.getKey());
              env.protect();
              entry.getValue().get(OP_ADDR).set(env);
              list.add(entry.getValue());
              for (              Map.Entry<String,ModelNode> configEntry : cfConfigPropertiesOperations.get(entry.getKey()).entrySet()) {
                final ModelNode configEnv=env.clone();
                configEnv.add(CONFIG_PROPERTIES.getName(),configEntry.getKey());
                configEnv.protect();
                configEntry.getValue().get(OP_ADDR).set(configEnv);
                list.add(configEntry.getValue());
              }
            }
            for (            Map.Entry<String,ModelNode> entry : adminObjectsOperations.entrySet()) {
              final ModelNode env=raAddress.clone();
              env.add(ADMIN_OBJECTS_NAME,entry.getKey());
              env.protect();
              entry.getValue().get(OP_ADDR).set(env);
              list.add(entry.getValue());
              for (              Map.Entry<String,ModelNode> configEntry : aoConfigPropertiesOperations.get(entry.getKey()).entrySet()) {
                final ModelNode configEnv=env.clone();
                configEnv.add(CONFIG_PROPERTIES.getName(),configEntry.getKey());
                configEnv.protect();
                configEntry.getValue().get(OP_ADDR).set(configEnv);
                list.add(configEntry.getValue());
              }
            }
            return;
          }
 else {
            throw new ParserException(bundle.requiredElementMissing(ARCHIVE.getName(),RESOURCEADAPTER_NAME));
          }
        }
 else {
          if (ResourceAdapter.Tag.forName(reader.getLocalName()) == ResourceAdapter.Tag.UNKNOWN) {
            throw new ParserException(bundle.unexpectedEndTag(reader.getLocalName()));
          }
        }
        break;
      }
case START_ELEMENT:
{
switch (ResourceAdapter.Tag.forName(reader.getLocalName())) {
case ADMIN_OBJECTS:
case CONNECTION_DEFINITIONS:
case BEAN_VALIDATION_GROUPS:
{
          break;
        }
case ADMIN_OBJECT:
{
        parseAdminObjects(reader,adminObjectsOperations,aoConfigPropertiesOperations);
        break;
      }
case CONNECTION_DEFINITION:
{
      parseConnectionDefinitions(reader,connectionDefinitionsOperations,cfConfigPropertiesOperations);
      break;
    }
case BEAN_VALIDATION_GROUP:
{
    final Location location=reader.getLocation();
    String value=rawElementText(reader);
    BEANVALIDATIONGROUPS.parseAndSetParameter(value,operation,location);
    break;
  }
case BOOTSTRAP_CONTEXT:
{
  final Location location=reader.getLocation();
  String value=rawElementText(reader);
  BOOTSTRAPCONTEXT.parseAndSetParameter(value,operation,location);
  break;
}
case CONFIG_PROPERTY:
{
parseConfigProperties(reader,configPropertiesOperations);
break;
}
case TRANSACTION_SUPPORT:
{
final Location location=reader.getLocation();
String value=rawElementText(reader);
TRANSACTIONSUPPORT.parseAndSetParameter(value,operation,location);
break;
}
case ARCHIVE:
{
final Location location=reader.getLocation();
archiveName=rawElementText(reader);
ARCHIVE.parseAndSetParameter(archiveName,operation,location);
break;
}
default :
throw new ParserException(bundle.unexpectedElement(reader.getLocalName()));
}
break;
}
}
}
throw new ParserException(bundle.unexpectedEndOfDocument());
}
