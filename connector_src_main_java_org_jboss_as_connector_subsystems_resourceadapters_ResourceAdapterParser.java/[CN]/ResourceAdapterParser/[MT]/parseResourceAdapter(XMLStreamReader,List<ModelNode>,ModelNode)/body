{
  final ModelNode raAddress=parentAddress.clone();
  final ModelNode operation=new ModelNode();
  operation.get(OP).set(ADD);
  String archiveName=null;
  while (reader.hasNext()) {
switch (reader.nextTag()) {
case END_ELEMENT:
{
        if (ResourceAdapters.Tag.forName(reader.getLocalName()) == ResourceAdapters.Tag.RESOURCE_ADAPTER) {
          if (archiveName != null) {
            raAddress.add(RESOURCEADAPTER,archiveName);
            raAddress.protect();
            operation.get(OP_ADDR).set(raAddress);
            list.add(operation);
            return;
          }
 else {
            throw new ParserException(bundle.requiredElementMissing(ARCHIVE,RESOURCEADAPTER));
          }
        }
 else {
          if (ResourceAdapter.Tag.forName(reader.getLocalName()) == ResourceAdapter.Tag.UNKNOWN) {
            throw new ParserException(bundle.unexpectedEndTag(reader.getLocalName()));
          }
        }
        break;
      }
case START_ELEMENT:
{
switch (ResourceAdapter.Tag.forName(reader.getLocalName())) {
case ADMIN_OBJECTS:
case CONNECTION_DEFINITIONS:
case BEAN_VALIDATION_GROUPS:
{
          break;
        }
case ADMIN_OBJECT:
{
        parseAdminObjects(reader,operation);
        break;
      }
case CONNECTION_DEFINITION:
{
      parseConnectionDefinitions(reader,operation);
      break;
    }
case BEAN_VALIDATION_GROUP:
{
    operation.get(BEANVALIDATIONGROUPS).add(elementAsString(reader));
    break;
  }
case BOOTSTRAP_CONTEXT:
{
  operation.get(BOOTSTRAPCONTEXT).set(elementAsString(reader));
  break;
}
case CONFIG_PROPERTY:
{
operation.get(CONFIG_PROPERTIES,attributeAsString(reader,"name")).set(elementAsString(reader));
break;
}
case TRANSACTION_SUPPORT:
{
operation.get(TRANSACTIONSUPPORT).set(elementAsString(reader));
break;
}
case ARCHIVE:
{
archiveName=elementAsString(reader);
operation.get(ARCHIVE).set(archiveName);
break;
}
default :
throw new ParserException(bundle.unexpectedElement(reader.getLocalName()));
}
break;
}
}
}
throw new ParserException(bundle.unexpectedEndOfDocument());
}
