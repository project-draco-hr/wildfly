{
  parse("/profile=default/subsystem=threads/thread-factory=mytf:do{ name1 = value1 ; name2=value2 }");
  assertTrue(handler.hasAddress());
  assertTrue(handler.hasOperationName());
  assertFalse(handler.hasProperties());
  assertFalse(handler.endsOnAddressOperationNameSeparator());
  assertFalse(handler.endsOnPropertyListStart());
  assertFalse(handler.endsOnPropertySeparator());
  assertFalse(handler.endsOnPropertyValueSeparator());
  assertFalse(handler.endsOnNodeSeparator());
  assertFalse(handler.endsOnNodeTypeNameSeparator());
  assertFalse(handler.endsOnSeparator());
  assertFalse(handler.endsOnHeaderListStart());
  assertTrue(handler.isRequestComplete());
  assertTrue(handler.hasHeaders());
  final List<ParsedOperationRequestHeader> headers=handler.getHeaders();
  assertEquals(2,headers.size());
  ParsedOperationRequestHeader header=headers.get(0);
  assertEquals("name1",header.getName());
  ModelNode node=new ModelNode();
  node.get("name1").set("value1");
  ModelNode headersNode=new ModelNode();
  header.addTo(ctx,headersNode);
  assertEquals(node,headersNode);
  header=headers.get(1);
  assertEquals("name2",header.getName());
  node=new ModelNode();
  node.get("name2").set("value2");
  headersNode=new ModelNode();
  header.addTo(ctx,headersNode);
  assertEquals(node,headersNode);
}
