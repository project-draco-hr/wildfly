{
  parse("/profile=default/subsystem=threads/thread-factory=mytf:do{ rollout in-series " + "groupA(rolling-to-servers=true,max-failure-percentage=20) ^ groupB, groupC," + "groupD(rolling-to-servers=true,max-failed-servers=1) ^ groupE");
  assertTrue(handler.hasAddress());
  assertTrue(handler.hasOperationName());
  assertFalse(handler.hasProperties());
  assertFalse(handler.endsOnAddressOperationNameSeparator());
  assertFalse(handler.endsOnPropertyListStart());
  assertFalse(handler.endsOnPropertySeparator());
  assertFalse(handler.endsOnPropertyValueSeparator());
  assertFalse(handler.endsOnNodeSeparator());
  assertFalse(handler.endsOnNodeTypeNameSeparator());
  assertTrue(handler.endsOnSeparator());
  assertTrue(handler.endsOnHeaderListStart());
  assertFalse(handler.isRequestComplete());
  assertTrue(handler.hasHeaders());
  final List<OperationRequestHeader> headers=handler.getHeaders();
  assertEquals(1,headers.size());
  final OperationRequestHeader header=headers.get(0);
  assertTrue(header instanceof RolloutPlanHeader);
  final ModelNode node=new ModelNode();
  final ModelNode inSeries=node.get(Util.ROLLOUT_PLAN).get(Util.IN_SERIES);
  ModelNode concurrent=new ModelNode();
  ModelNode cg=concurrent.get(Util.CONCURRENT_GROUPS);
  ModelNode sg=new ModelNode();
  ModelNode group=new ModelNode();
  ModelNode groupProps=group.get("groupA");
  groupProps.get("rolling-to-servers").set("true");
  groupProps.get("max-failure-percentage").set("20");
  sg.get(Util.SERVER_GROUP).set(group);
  cg.add().set(sg);
  sg=new ModelNode();
  group=new ModelNode();
  group.get("groupB");
  sg.get(Util.SERVER_GROUP).set(group);
  cg.add().set(sg);
  inSeries.add().set(concurrent);
  sg=new ModelNode();
  group=new ModelNode();
  group.get("groupC");
  sg.get(Util.SERVER_GROUP).set(group);
  inSeries.add().set(sg);
  concurrent=new ModelNode();
  cg=concurrent.get(Util.CONCURRENT_GROUPS);
  sg=new ModelNode();
  group=new ModelNode();
  groupProps=group.get("groupD");
  groupProps.get("rolling-to-servers").set("true");
  groupProps.get("max-failed-servers").set("1");
  sg.get(Util.SERVER_GROUP).set(group);
  cg.add().set(sg);
  sg=new ModelNode();
  group=new ModelNode();
  group.get("groupE");
  sg.get(Util.SERVER_GROUP).set(group);
  cg.add().set(sg);
  inSeries.add().set(concurrent);
  assertEquals(node,header.toModelNode());
}
