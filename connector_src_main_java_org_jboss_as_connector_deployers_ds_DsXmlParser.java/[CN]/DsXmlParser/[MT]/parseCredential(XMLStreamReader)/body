{
  String userName=null;
  String password=null;
  String securityDomain=null;
  while (reader.hasNext()) {
switch (reader.nextTag()) {
case END_ELEMENT:
{
        if (DataSource.Tag.forName(reader.getLocalName()) == DataSource.Tag.SECURITY || Recovery.Tag.forName(reader.getLocalName()) == Recovery.Tag.RECOVER_CREDENTIAL) {
          return new CredentialImpl(userName,password,securityDomain);
        }
 else {
          if (Credential.Tag.forName(reader.getLocalName()) == Credential.Tag.UNKNOWN) {
            throw new ParserException(bundle.unexpectedEndTag(reader.getLocalName()));
          }
        }
        break;
      }
case START_ELEMENT:
{
switch (Credential.Tag.forName(reader.getLocalName())) {
case PASSWORD:
{
          password=elementAsString(reader);
          if (propertyResolver != null && password != null) {
            String resolvedPassword=propertyResolver.resolve(password);
            if (resolvedPassword != null)             password=resolvedPassword;
          }
          break;
        }
case USER_NAME:
{
        userName=elementAsString(reader);
        break;
      }
case SECURITY_DOMAIN:
{
      securityDomain=elementAsString(reader);
      break;
    }
default :
  throw new ParserException(bundle.unexpectedElement(reader.getLocalName()));
}
break;
}
}
}
throw new ParserException(bundle.unexpectedEndOfDocument());
}
