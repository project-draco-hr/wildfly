{
  String userName=null;
  String password=null;
  String securityDomain=null;
  Extension reauthPlugin=null;
  while (reader.hasNext()) {
switch (reader.nextTag()) {
case END_ELEMENT:
{
        if (DataSource.Tag.forName(reader.getLocalName()) == DataSource.Tag.SECURITY) {
          return new DsSecurityImpl(userName,password,securityDomain,reauthPlugin);
        }
 else {
          if (DsSecurity.Tag.forName(reader.getLocalName()) == DsSecurity.Tag.UNKNOWN) {
            throw new ParserException(bundle.unexpectedEndTag(reader.getLocalName()));
          }
        }
        break;
      }
case START_ELEMENT:
{
      DsSecurity.Tag tag=DsSecurity.Tag.forName(reader.getLocalName());
switch (tag) {
case PASSWORD:
{
          password=elementAsString(reader);
          boolean resolved=false;
          if (propertyReplacer != null && password != null && password.trim().length() != 0) {
            String resolvedPassword=propertyReplacer.replaceProperties(password);
            if (resolvedPassword != null) {
              password=resolvedPassword;
              resolved=true;
            }
          }
          if (!resolved && propertyResolver != null && password != null && password.trim().length() != 0) {
            String resolvedPassword=propertyResolver.resolve(password);
            if (resolvedPassword != null) {
              password=resolvedPassword;
            }
          }
          break;
        }
case USER_NAME:
{
        userName=elementAsString(reader);
        break;
      }
case SECURITY_DOMAIN:
{
      securityDomain=elementAsString(reader);
      break;
    }
case REAUTH_PLUGIN:
{
    reauthPlugin=parseExtension(reader,tag.getLocalName());
    break;
  }
default :
throw new ParserException(bundle.unexpectedElement(reader.getLocalName()));
}
break;
}
}
}
throw new ParserException(bundle.unexpectedEndOfDocument());
}
