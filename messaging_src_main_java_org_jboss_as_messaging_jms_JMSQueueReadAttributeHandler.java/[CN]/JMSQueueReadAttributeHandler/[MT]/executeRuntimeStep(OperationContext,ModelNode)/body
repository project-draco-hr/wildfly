{
  validator.validate(operation);
  final String attributeName=operation.require(ModelDescriptionConstants.NAME).asString();
  JMSQueueControl control=getControl(context,operation);
  if (control == null) {
    ManagementUtil.rollbackOperationWithNoHandler(context,operation);
    return;
  }
  if (CommonAttributes.MESSAGE_COUNT.getName().equals(attributeName)) {
    try {
      context.getResult().set(control.getMessageCount());
    }
 catch (    RuntimeException e) {
      throw e;
    }
catch (    Exception e) {
      throw new RuntimeException(e);
    }
  }
 else   if (CommonAttributes.SCHEDULED_COUNT.getName().equals(attributeName)) {
    context.getResult().set(control.getScheduledCount());
  }
 else   if (CommonAttributes.CONSUMER_COUNT.getName().equals(attributeName)) {
    context.getResult().set(control.getConsumerCount());
  }
 else   if (CommonAttributes.DELIVERING_COUNT.getName().equals(attributeName)) {
    context.getResult().set(control.getDeliveringCount());
  }
 else   if (CommonAttributes.MESSAGES_ADDED.getName().equals(attributeName)) {
    context.getResult().set(control.getMessagesAdded());
  }
 else   if (JMSQueueDefinition.QUEUE_ADDRESS.getName().equals(attributeName)) {
    context.getResult().set(control.getAddress());
  }
 else   if (JMSQueueDefinition.EXPIRY_ADDRESS.getName().equals(attributeName)) {
    context.getResult().set(control.getExpiryAddress());
  }
 else   if (JMSQueueDefinition.DEAD_LETTER_ADDRESS.getName().equals(attributeName)) {
    context.getResult().set(control.getDeadLetterAddress());
  }
 else   if (CommonAttributes.PAUSED.getName().equals(attributeName)) {
    try {
      context.getResult().set(control.isPaused());
    }
 catch (    RuntimeException e) {
      throw e;
    }
catch (    Exception e) {
      throw new RuntimeException(e);
    }
  }
 else   if (CommonAttributes.TEMPORARY.getName().equals(attributeName)) {
    context.getResult().set(control.isTemporary());
  }
 else {
    throw MESSAGES.unsupportedAttribute(attributeName);
  }
  context.completeStep();
}
