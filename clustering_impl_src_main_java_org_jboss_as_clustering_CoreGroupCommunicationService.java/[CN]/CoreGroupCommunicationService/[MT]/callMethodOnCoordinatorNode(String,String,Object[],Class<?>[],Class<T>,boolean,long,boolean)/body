{
  boolean trace=this.log.isTraceEnabled();
  MethodCall m=new MethodCall(serviceName + "." + methodName,args,types);
  if (trace) {
    this.log.trace("callMethodOnCoordinatorNode(false), objName=" + serviceName + ", methodName="+ methodName);
  }
  if (returnType == null) {
    @SuppressWarnings("unchecked") Class<T> unchecked=(Class<T>)void.class;
    returnType=unchecked;
  }
  if (this.isCurrentNodeCoordinator()) {
    if (excludeSelf) {
      return null;
    }
 else     if (this.directlyInvokeLocal) {
      return invokeDirectly(serviceName,methodName,args,types,returnType,null,null);
    }
  }
  Address coord=this.groupView.coordinator;
  RequestOptions opt=new RequestOptions(Request.GET_ALL,methodTimeout);
  if (unordered) {
    opt.setFlags(Message.OOB);
  }
  try {
    return returnType.cast(this.dispatcher.callRemoteMethod(coord,m,opt));
  }
 catch (  Exception e) {
    throw e;
  }
catch (  Error e) {
    throw e;
  }
catch (  Throwable e) {
    throw new RuntimeException("Caught raw Throwable on remote invocation",e);
  }
}
