{
  final List<ModelNode> updates=new ArrayList<ModelNode>();
  ModelNode op=new ModelNode();
  op.get(OP).set(ADD);
  op.get(OP_ADDR).add(SUBSYSTEM,"security");
  op.get(OP_ADDR).add(SECURITY_DOMAIN,getSecurityDomainName());
  updates.add(op);
  op=new ModelNode();
  op.get(OP).set(ADD);
  op.get(OP_ADDR).add(SUBSYSTEM,"security");
  op.get(OP_ADDR).add(SECURITY_DOMAIN,getSecurityDomainName());
  op.get(OP_ADDR).add(AUTHENTICATION,CLASSIC);
  ModelNode loginModule=op.get(LOGIN_MODULES).add();
  loginModule.get(CODE).set(getLoginModuleName());
  if (!isRequired()) {
    loginModule.get(FLAG).set("optional");
  }
 else {
    loginModule.get(FLAG).set("required");
  }
  loginModule.get(MODULE_OPTIONS).add("password-stacking","useFirstPass");
  Map<String,String> options=getModuleOptions();
  Set<String> keys=options.keySet();
  for (  String key : keys) {
    loginModule.get(MODULE_OPTIONS).add(key,options.get(key));
  }
  op.get(OPERATION_HEADERS).get(ALLOW_RESOURCE_SERVICE_RESTART).set(true);
  updates.add(op);
  applyUpdates(managementClient.getControllerClient(),updates);
}
