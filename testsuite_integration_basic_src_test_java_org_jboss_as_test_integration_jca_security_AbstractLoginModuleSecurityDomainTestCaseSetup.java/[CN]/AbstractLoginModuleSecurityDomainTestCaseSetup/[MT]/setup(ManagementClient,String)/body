{
  final ModelNode compositeOp=new ModelNode();
  compositeOp.get(OP).set(COMPOSITE);
  compositeOp.get(OP_ADDR).setEmptyList();
  ModelNode steps=compositeOp.get(STEPS);
  PathAddress address=PathAddress.pathAddress().append(SUBSYSTEM,"security").append(SECURITY_DOMAIN,getSecurityDomainName());
  steps.add(Util.createAddOperation(address));
  address=address.append(Constants.AUTHENTICATION,Constants.CLASSIC);
  steps.add(Util.createAddOperation(address));
  ModelNode loginModule=Util.createAddOperation(address.append(LOGIN_MODULE,getLoginModuleName()));
  loginModule.get(CODE).set(getLoginModuleName());
  if (!isRequired()) {
    loginModule.get(FLAG).set("optional");
  }
 else {
    loginModule.get(FLAG).set("required");
  }
  loginModule.get(MODULE_OPTIONS).add("password-stacking","useFirstPass");
  Map<String,String> options=getModuleOptions();
  Set<String> keys=options.keySet();
  for (  String key : keys) {
    loginModule.get(MODULE_OPTIONS).add(key,options.get(key));
  }
  loginModule.get(OPERATION_HEADERS).get(ALLOW_RESOURCE_SERVICE_RESTART).set(true);
  steps.add(loginModule);
  applyUpdates(managementClient.getControllerClient(),Arrays.asList(compositeOp));
}
