{
  final ExecuteRequestContext executeRequestContext=context.getAttachment();
  executeRequestContext.getControl().operationPrepared(new OperationTransaction(){
    @Override public void rollback(){
      done(false);
    }
    @Override public void commit(){
      done(true);
    }
    private void done(    boolean commit){
      final byte status=commit ? ModelControllerProtocol.PARAM_COMMIT : ModelControllerProtocol.PARAM_ROLLBACK;
      final ActiveOperation<Void,ExecuteRequestContext> activeOperation=RemoteProxyController.this.getActiveOperation(context.getOperationId());
      try {
        RemoteProxyController.this.executeRequest(new AbstractManagementRequest<Void,ExecuteRequestContext>(){
          @Override public byte getOperationType(){
            return ModelControllerProtocol.COMPLETE_TX_REQUEST;
          }
          @Override protected void sendRequest(          ActiveOperation.ResultHandler<Void> resultHandler,          ManagementRequestContext<ExecuteRequestContext> executeRequestContextManagementRequestContext,          FlushableDataOutput output) throws IOException {
            output.write(status);
          }
          @Override public void handleRequest(          DataInput input,          ActiveOperation.ResultHandler<Void> resultHandler,          ManagementRequestContext<ExecuteRequestContext> executeRequestContextManagementRequestContext) throws IOException {
          }
        }
,channel,activeOperation);
      }
 catch (      Exception e) {
        resultHandler.failed(e);
      }
      try {
        activeOperation.getResult().await();
      }
 catch (      InterruptedException e) {
        Thread.currentThread().interrupt();
        throw MESSAGES.transactionTimeout(commit ? "commit" : "rollback");
      }
    }
  }
,response);
}
