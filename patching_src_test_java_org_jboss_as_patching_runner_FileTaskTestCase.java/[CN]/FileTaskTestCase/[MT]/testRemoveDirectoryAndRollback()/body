{
  PatchInfo info=new LocalPatchInfo(randomString(),PatchInfo.BASE,Collections.<String>emptyList(),env);
  File test=mkdir(env.getInstalledImage().getJbossHome(),"test");
  String one="one";
  String two="two";
  File fileOne=touch(test,one);
  touch(fileOne);
  dump(fileOne,randomString());
  File fileTwo=touch(test,two);
  touch(fileTwo);
  dump(fileTwo,randomString());
  File subDirOne=mkdir(test,"sub");
  File subOne=touch(subDirOne,one);
  touch(subOne);
  dump(subOne,randomString());
  File subTwo=touch(subDirOne,two);
  touch(subTwo);
  dump(subTwo,randomString());
  byte[] existingHash=hashFile(test);
  ContentModification fileRemoved=new ContentModification(new MiscContentItem("test",new String[0],NO_CONTENT),existingHash,REMOVE);
  Patch patch=PatchBuilder.create().setPatchId(randomString()).setDescription(randomString()).setOneOffType(info.getVersion()).addContentModification(fileRemoved).build();
  File patchDir=mkdir(tempDir,patch.getPatchId());
  createPatchXMLFile(patchDir,patch);
  File zippedPatch=createZippedPatchFile(patchDir,patch.getPatchId());
  PatchingResult result=executePatch(info,zippedPatch);
  assertFalse(test.exists());
  result=rollback(result.getPatchInfo(),patch.getPatchId());
  assertTrue(test.exists());
  assertTrue(fileOne.isFile());
  assertTrue(fileTwo.isFile());
  assertTrue(subOne.isFile());
  assertTrue(subTwo.isFile());
}
