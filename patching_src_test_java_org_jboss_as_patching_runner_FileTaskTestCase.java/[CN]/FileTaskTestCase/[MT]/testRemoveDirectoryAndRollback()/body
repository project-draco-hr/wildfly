{
  File test=mkdir(env.getInstalledImage().getJbossHome(),"test");
  String one="one";
  String two="two";
  File fileOne=touch(test,one);
  touch(fileOne);
  dump(fileOne,randomString());
  File fileTwo=touch(test,two);
  touch(fileTwo);
  dump(fileTwo,randomString());
  File subDirOne=mkdir(test,"sub");
  File subOne=touch(subDirOne,one);
  touch(subOne);
  dump(subOne,randomString());
  File subTwo=touch(subDirOne,two);
  touch(subTwo);
  dump(subTwo,randomString());
  byte[] existingHash=hashFile(test);
  String patchID="patchID";
  ContentModification dirRemoved=ContentModificationUtils.removeMisc(test);
  Patch patch=PatchBuilder.create().setPatchId(patchID).setDescription(randomString()).oneOffPatchIdentity(productConfig.getProductName(),productConfig.getProductVersion()).getParent().addContentModification(dirRemoved).build();
  File patchDir=mkdir(tempDir,patch.getPatchId());
  createPatchXMLFile(patchDir,patch);
  File zippedPatch=createZippedPatchFile(patchDir,patch.getPatchId());
  Identity identityBeforePatch=loadInstalledIdentity().getIdentity();
  PatchingResult result=executePatch(zippedPatch);
  assertPatchHasBeenApplied(result,patch);
  assertFalse(test.exists());
  result=rollback(patch.getPatchId());
  assertPatchHasBeenRolledBack(result,identityBeforePatch);
  assertTrue(test.exists());
  assertTrue(fileOne.isFile());
  assertTrue(fileTwo.isFile());
  assertTrue(subOne.isFile());
  assertTrue(subTwo.isFile());
}
