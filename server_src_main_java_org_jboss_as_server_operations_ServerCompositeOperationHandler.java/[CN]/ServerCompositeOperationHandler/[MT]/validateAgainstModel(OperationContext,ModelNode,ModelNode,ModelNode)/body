{
  final ModelNode testModel=context.getSubModel().clone();
  final OperationContext testContext=new OperationContext(){
    @Override public ModelNode getSubModel() throws IllegalArgumentException {
      return testModel;
    }
    @Override public ModelNodeRegistration getRegistry(){
      return context.getRegistry();
    }
    @Override public ModelController getController(){
      return context.getController();
    }
    public RuntimeOperationContext getRuntimeContext(){
      return null;
    }
  }
;
  final AtomicBoolean done=new AtomicBoolean(false);
  final ResultHandler testHandler=new ResultHandler(){
    @Override public void handleResultFragment(    final String[] location,    final ModelNode result){
synchronized (testResult) {
        testResult.get(location).set(result);
      }
    }
    @Override public void handleResultComplete(){
synchronized (done) {
        done.set(true);
      }
    }
    @Override public void handleFailed(    final ModelNode failureDescription){
synchronized (done) {
        testFailure.set(failureDescription);
        done.set(true);
      }
    }
    @Override public void handleCancellation(){
synchronized (done) {
        done.set(true);
      }
    }
  }
;
  super.execute(testContext,operation,testHandler);
synchronized (done) {
    while (!done.get()) {
      try {
        done.wait();
      }
 catch (      final InterruptedException e) {
        testFailure.set(e.getLocalizedMessage());
        Thread.currentThread().interrupt();
      }
    }
  }
}
