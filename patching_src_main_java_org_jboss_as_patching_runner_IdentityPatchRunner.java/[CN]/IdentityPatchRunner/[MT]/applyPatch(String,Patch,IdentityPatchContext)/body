{
  final List<String> invalidation;
  final Identity identity=patch.getIdentity();
  final Patch.PatchType patchType=identity.getPatchType();
  final InstallationManager.InstallationModification modification=context.getModification();
  if (patchType == Patch.PatchType.ONE_OFF) {
    invalidation=Collections.emptyList();
    final Identity.IdentityOneOffPatch oneOffPatch=identity.forType(Patch.PatchType.ONE_OFF,Identity.IdentityOneOffPatch.class);
    if (!modification.getCumulativeID().equals(oneOffPatch.getCumulativePatchId())) {
      throw PatchMessages.MESSAGES.doesNotApply(oneOffPatch.getCumulativePatchId(),modification.getCumulativeID());
    }
  }
 else {
    invalidation=new ArrayList<String>(modification.getPatchIDs());
    if (!Constants.BASE.equals(modification.getCumulativeID())) {
      invalidation.add(modification.getCumulativeID());
    }
  }
  for (  final String rollback : invalidation) {
    rollback(rollback,context);
  }
  if (patchType == Patch.PatchType.UPGRADE) {
    final String releasePatchID=modification.getReleasePatchID();
    if (!Constants.BASE.equals(releasePatchID)) {
      portForward(modification.getReleasePatchID(),context);
    }
  }
  for (  final PatchElement element : patch.getElements()) {
    final IdentityPatchContext.PatchEntry target=context.resolveForElement(element);
    final PatchElementProvider provider=element.getProvider();
    final Patch.PatchType elementPatchType=provider.getPatchType();
    final String elementPatchId=element.getId();
    if (target.isApplied(elementPatchId)) {
      throw PatchMessages.MESSAGES.alreadyApplied(elementPatchId);
    }
    checkUpgradeConditions(provider,target);
    if (elementPatchType == Patch.PatchType.ONE_OFF) {
      PatchElementProvider.OneOffPatchTarget oneOffPatch=provider.forType(Patch.PatchType.ONE_OFF,PatchElementProvider.OneOffPatchTarget.class);
      if (!target.getCumulativeID().equals(oneOffPatch.getCumulativePatchId())) {
        throw PatchMessages.MESSAGES.doesNotApply(oneOffPatch.getCumulativePatchId(),target.getCumulativeID());
      }
    }
    apply(elementPatchId,element.getModifications(),target.getDefinitions());
    target.apply(elementPatchId,elementPatchType);
  }
  final IdentityPatchContext.PatchEntry identityEntry=context.getIdentityEntry();
  apply(patchId,patch.getModifications(),identityEntry.getDefinitions());
  identityEntry.apply(patchId,patchType);
  if (patchType == Patch.PatchType.UPGRADE) {
    final Identity.IdentityUpgrade upgrade=identity.forType(Patch.PatchType.UPGRADE,Identity.IdentityUpgrade.class);
    identityEntry.setResultingVersion(upgrade.getResultingVersion());
  }
  final IdentityApplyCallback callback=new IdentityApplyCallback(patch,identityEntry.getDirectoryStructure());
  try {
    return executeTasks(context,callback);
  }
 catch (  Exception e) {
    callback.operationCancelled();
    throw rethrowException(e);
  }
}
