{
  final List<String> rollbacks;
  final Patch.PatchType patchType=patch.getPatchType();
  if (patchType == Patch.PatchType.CUMULATIVE) {
    rollbacks=context.getModification().getPatchIDs();
  }
 else {
    rollbacks=Collections.emptyList();
  }
  for (  final String rollback : rollbacks) {
    rollback(rollback,context);
  }
  for (  final PatchElement element : patch.getElements()) {
    final IdentityPatchContext.PatchEntry target=context.resolveForElement(element);
    final String elementPatchId=element.getId();
    checkApplied(elementPatchId,target);
    apply(elementPatchId,element.getModifications(),target.getModifications());
    target.apply(elementPatchId,patchType);
  }
  final IdentityPatchContext.PatchEntry identity=context.getIdentityEntry();
  apply(patchId,patch.getModifications(),identity.getModifications());
  identity.apply(patchId,patchType);
  if (patchType == Patch.PatchType.CUMULATIVE) {
    identity.setResultingVersion(patch.getResultingVersion());
  }
  final IdentityApplyCallback callback=new IdentityApplyCallback(patch,identity.getDirectoryStructure());
  try {
    return executeTasks(context,callback);
  }
 catch (  Exception e) {
    e.printStackTrace();
    callback.rollback();
    throw rethrowException(e);
  }
}
