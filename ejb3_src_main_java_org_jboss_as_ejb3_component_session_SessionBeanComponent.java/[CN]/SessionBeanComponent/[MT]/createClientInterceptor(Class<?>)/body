{
  return new Interceptor(){
    @Override public Object processInvocation(    InterceptorContext context) throws Exception {
      final Method method=context.getMethod();
      if (SessionBeanComponent.this.getComponentClass().equals(view)) {
        if (!SessionBeanComponent.this.isInvocationAllowed(method)) {
          throw new javax.ejb.EJBException("Cannot invoke method " + method + " on nointerface view of bean "+ SessionBeanComponent.this.getComponentName());
        }
      }
      context.putPrivateData(Component.class,SessionBeanComponent.this);
      try {
        if (isAsynchronous(method)) {
          return invokeAsynchronous(method,context);
        }
        return context.proceed();
      }
  finally {
        context.putPrivateData(Component.class,null);
      }
    }
  }
;
}
