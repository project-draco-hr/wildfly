{
  values.setGroups(ROLES);
  values.getOptions().setDisable(true);
  values.setUserName("Omar.Ulmer");
  AddUserState addUserState=new AddUserState(consoleMock,values);
  AssertConsoleBuilder consoleBuilder=new AssertConsoleBuilder().expectedDisplayText(MESSAGES.addedUser(values.getUserName(),values.getUserFiles().get(0).getCanonicalPath())).expectedDisplayText(AddUser.NEW_LINE).expectedDisplayText(MESSAGES.addedGroups(values.getUserName(),values.getGroups(),values.getGroupFiles().get(0).getCanonicalPath())).expectedDisplayText(AddUser.NEW_LINE);
  consoleMock.setResponses(consoleBuilder);
  addUserState.update(values);
  assertNull("The user is disabled, the user line must start with #",getPasswordFromUserProperty(values.getUserName()));
  assertNull("The user is disabled, the roles line must start with #",getRolesFromRoleProperty(values.getUserName()));
  assertRolePropertyFile(values.getUserName(),true);
  assertUserPropertyFile(values.getUserName(),true);
  consoleBuilder.validate();
  int roleFileLineNumber=countLineNumberRoleFile();
  int userFileLineNumber=countLineNumberUserFile();
  values.getOptions().setDisable(false);
  consoleBuilder=new AssertConsoleBuilder().expectedDisplayText(MESSAGES.addedUser(values.getUserName(),values.getUserFiles().get(0).getCanonicalPath())).expectedDisplayText(AddUser.NEW_LINE).expectedDisplayText(MESSAGES.addedGroups(values.getUserName(),values.getGroups(),values.getGroupFiles().get(0).getCanonicalPath())).expectedDisplayText(AddUser.NEW_LINE);
  consoleMock.setResponses(consoleBuilder);
  addUserState=new AddUserState(consoleMock,values);
  addUserState.update(values);
  assertRolePropertyFile(values.getUserName());
  assertUserPropertyFile(values.getUserName());
  assertEquals("Enabling a role just uncomment the line and must not create a new one",roleFileLineNumber,countLineNumberRoleFile());
  assertEquals("Enabling a user just uncomment the line and must not create a new one",userFileLineNumber,countLineNumberUserFile());
  consoleBuilder.validate();
}
