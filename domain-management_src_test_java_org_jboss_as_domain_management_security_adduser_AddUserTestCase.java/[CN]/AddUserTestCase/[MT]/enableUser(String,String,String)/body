{
  values.setUserName(userName);
  values.setPassword(password);
  values.setGroups(groups);
  values.getOptions().setDisable(false);
  values.getOptions().setEnableDisableMode(true);
  final String expectedPassword;
  if (password == null) {
    expectedPassword=getPassword(values.getUserName());
  }
 else {
    try {
      expectedPassword=new UsernamePasswordHashUtil().generateHashedHexURP(values.getUserName(),values.getRealm(),password.toCharArray());
    }
 catch (    NoSuchAlgorithmException e) {
      throw new RuntimeException("",e);
    }
  }
  final String expectedGroups;
  if (groups == null) {
    expectedGroups=getRoles(values.getUserName());
  }
 else {
    expectedGroups=groups;
  }
  int previousRoleFileLineNumber=countLineNumberRoleFile();
  int previousUserFileLineNumber=countLineNumberUserFile();
  AssertConsoleBuilder consoleBuilder=buildAddUserGroupAssertConsole();
  AddUserState addUserState=new AddUserState(consoleMock,values);
  addUserState.update(values);
  assertEnableDisableUser(expectedPassword,expectedGroups,previousRoleFileLineNumber,previousUserFileLineNumber,consoleBuilder);
}
