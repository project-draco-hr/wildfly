{
  super(reader);
  final Namespace ns=Namespace.forUri(reader.getNamespaceURI());
  for (  NamespacePrefix namespacePrefix : ParseUtils.readNamespaces(reader)) {
    namespaces.put(namespacePrefix.getPrefix(),namespacePrefix);
  }
  int cnt=reader.getAttributeCount();
  for (int i=0; i < cnt; i++) {
    if (reader.getAttributeNamespace(i).equals(XMLConstants.W3C_XML_SCHEMA_INSTANCE_NS_URI) && reader.getAttributeLocalName(i).equals("schemaLocation")) {
      schemaLocation=reader.getAttributeValue(i);
      break;
    }
  }
  while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
    String namespace=reader.getNamespaceURI();
    if (ns == Namespace.forUri(namespace)) {
      String localPart=reader.getLocalName();
      ParseResult<AbstractModelElement<?>> result=new ParseResult<AbstractModelElement<?>>();
      reader.handleAny(result);
      AbstractModelElement<?> child=result.getResult();
      QName qname=new QName(ns.getUriString(),localPart);
      children.put(qname,child);
    }
 else {
      throw ParseUtils.unexpectedElement(reader);
    }
  }
}
