{
  final Resource resource=context.createResource(PathAddress.EMPTY_ADDRESS);
  final ModelNode model=resource.getModel();
  PathAddress address=PathAddress.pathAddress(operation.get(OP_ADDR));
  final String name=address.getLastElement().getValue();
  pathAttribute.validateAndSet(operation,model);
  RELATIVE_TO.validateAndSet(operation,model);
  if (services) {
    final String path=getPathValue(context,PATH_SPECIFIED,model);
    final String relativeTo=getPathValue(context,RELATIVE_TO,model);
    final PathEventContextImpl pathEventContext=pathManager.checkRestartRequired(context,name,Event.ADDED);
    if (pathEventContext.isInstallServices()) {
      pathManager.addPathEntry(name,path,relativeTo,false);
    }
    context.addStep(new OperationStepHandler(){
      public void execute(      final OperationContext context,      final ModelNode operation) throws OperationFailedException {
        final ServiceController<?> legacyService;
        if (pathEventContext.isInstallServices()) {
          final ServiceVerificationHandler verificationHandler=new ServiceVerificationHandler();
          final ServiceTarget target=context.getServiceTarget();
          if (relativeTo == null) {
            legacyService=pathManager.addAbsolutePathService(target,name,path,verificationHandler);
          }
 else {
            legacyService=pathManager.addRelativePathService(target,name,path,false,relativeTo,verificationHandler);
          }
          context.addStep(verificationHandler,OperationContext.Stage.VERIFY);
        }
 else {
          legacyService=null;
        }
        context.completeStep(new OperationContext.RollbackHandler(){
          public void handleRollback(          OperationContext context,          ModelNode operation){
            pathManager.removePathService(context,name);
            if (pathEventContext.isInstallServices()) {
              if (legacyService != null) {
                context.removeService(legacyService.getName());
              }
            }
 else {
              pathEventContext.revert();
            }
          }
        }
);
      }
    }
,OperationContext.Stage.RUNTIME);
    context.completeStep(new OperationContext.RollbackHandler(){
      public void handleRollback(      OperationContext context,      ModelNode operation){
        if (pathEventContext.isInstallServices()) {
          try {
            pathManager.removePathEntry(name,false);
          }
 catch (          OperationFailedException e) {
            throw new RuntimeException(e);
          }
        }
      }
    }
);
  }
 else {
    context.completeStep(OperationContext.RollbackHandler.NOOP_ROLLBACK_HANDLER);
  }
}
