{
  ModelNode targetNode=new ModelNode();
  targetNode.get(Constants.ACTIVATION).set("lazy");
  OperationContext context=Mockito.mock(OperationContext.class);
  Resource resource=Mockito.mock(Resource.class);
  Mockito.when(resource.getModel()).thenReturn(targetNode);
  Mockito.when(context.readResourceForUpdate(PathAddress.EMPTY_ADDRESS)).thenReturn(resource);
  final List<OperationStepHandler> addedSteps=new ArrayList<OperationStepHandler>();
  Mockito.doAnswer(new Answer<Void>(){
    @Override public Void answer(    InvocationOnMock invocation) throws Throwable {
      addedSteps.add((OperationStepHandler)invocation.getArguments()[0]);
      return null;
    }
  }
).when(context).addStep((OperationStepHandler)Mockito.any(),Mockito.eq(Stage.RUNTIME));
  ActivationAttributeHandler handler=new ActivationAttributeHandler();
  ModelNode operation=new ModelNode();
  operation.get(ModelDescriptionConstants.VALUE).set(Activation.EAGER.toString().toLowerCase());
  Assert.assertEquals("Precondition",0,addedSteps.size());
  handler.execute(context,operation);
  Mockito.verify(context).completeStep();
  Assert.assertEquals(Activation.EAGER.toString().toLowerCase(),targetNode.get(Constants.ACTIVATION).asString());
  ServiceRegistry registry=Mockito.mock(ServiceRegistry.class);
  ServiceController svcCtrl=Mockito.mock(ServiceController.class);
  Mockito.when(registry.getRequiredService(Services.FRAMEWORK_ACTIVE)).thenReturn(svcCtrl);
  OperationContext context2=Mockito.mock(OperationContext.class);
  Mockito.when(context2.getServiceRegistry(true)).thenReturn(registry);
  Assert.assertEquals(1,addedSteps.size());
  addedSteps.get(0).execute(context2,operation);
  Mockito.verify(svcCtrl).setMode(Mode.ACTIVE);
  Mockito.verify(context2).completeStep();
}
