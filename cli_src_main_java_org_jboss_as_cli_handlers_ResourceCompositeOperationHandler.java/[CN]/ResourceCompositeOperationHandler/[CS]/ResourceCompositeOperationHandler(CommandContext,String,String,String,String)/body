{
  super(ctx,command,true);
  if (command == null) {
    throw new IllegalArgumentException("Command name can't be null.");
  }
  if (operations == null || operations.length == 0) {
    throw new IllegalArgumentException("There must be at least one operation.");
  }
  ops=operations;
  this.idProperty=idProperty;
  addRequiredPath(nodeType);
  profile=new ArgumentWithValue(this,new DefaultCompleter(new CandidatesProvider(){
    @Override public List<String> getAllCandidates(    CommandContext ctx){
      return Util.getNodeNames(ctx.getModelControllerClient(),null,Util.PROFILE);
    }
  }
),"--profile"){
    @Override public boolean canAppearNext(    CommandContext ctx) throws CommandFormatException {
      if (!isDependsOnProfile()) {
        return false;
      }
      if (!ctx.isDomainMode()) {
        return false;
      }
      return super.canAppearNext(ctx);
    }
  }
;
  name=new ArgumentWithValue(this,new DefaultCompleter(new DefaultCompleter.CandidatesProvider(){
    @Override public List<String> getAllCandidates(    CommandContext ctx){
      ModelControllerClient client=ctx.getModelControllerClient();
      if (client == null) {
        return Collections.emptyList();
      }
      DefaultOperationRequestAddress address=new DefaultOperationRequestAddress();
      if (isDependsOnProfile() && ctx.isDomainMode()) {
        final String profileName=profile.getValue(ctx.getParsedCommandLine());
        if (profile == null) {
          return Collections.emptyList();
        }
        address.toNode(Util.PROFILE,profileName);
      }
      for (      OperationRequestAddress.Node node : getRequiredAddress()) {
        address.toNode(node.getType(),node.getName());
      }
      return Util.getNodeNames(ctx.getModelControllerClient(),address,getRequiredType());
    }
  }
),(idProperty == null ? "--name" : "--" + idProperty)){
    @Override public boolean canAppearNext(    CommandContext ctx) throws CommandFormatException {
      if (isDependsOnProfile() && ctx.isDomainMode() && !profile.isValueComplete(ctx.getParsedCommandLine())) {
        return false;
      }
      return super.canAppearNext(ctx);
    }
  }
;
  name.addCantAppearAfter(helpArg);
  helpArg.addCantAppearAfter(name);
  staticArgs.put(helpArg.getFullName(),helpArg);
  staticArgs.put(profile.getFullName(),profile);
  staticArgs.put(name.getFullName(),name);
  final RequirementSetBuilder reqBuilder=AccessRequirementBuilder.Factory.create(ctx).any();
  final RequirementSetBuilder domainReq=this.isDependsOnProfile() ? reqBuilder.domain().all() : null;
  final RequirementSetBuilder standaloneReq=reqBuilder.standalone().all();
  for (  String op : ops) {
    if (domainReq != null) {
      domainReq.profileOperation(nodeType + "=?",op);
    }
    standaloneReq.operation(nodeType + "=?",op);
  }
  this.accessRequirement=reqBuilder.build();
}
