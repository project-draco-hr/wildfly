{
  final String name=ResourceCompositeOperationHandler.this.name.getValue(ctx.getParsedCommandLine(),true);
  final ModelNode composite=new ModelNode();
  composite.get(Util.OPERATION).set(Util.COMPOSITE);
  composite.get(Util.ADDRESS).setEmptyList();
  final ModelNode steps=composite.get(Util.STEPS);
  final ParsedCommandLine parsedArgs=ctx.getParsedCommandLine();
  ModelNode address=new ModelNode();
  if (isDependsOnProfile() && ctx.isDomainMode()) {
    final String profile=ResourceCompositeOperationHandler.this.profile.getValue(parsedArgs);
    if (profile == null) {
      throw new OperationFormatException("Required argument --profile is missing.");
    }
    address.add(Util.PROFILE,profile);
  }
  for (  OperationRequestAddress.Node node : getRequiredAddress()) {
    address.add(node.getType(),node.getName());
  }
  address.add(getRequiredType(),name);
  for (  String opName : this.ops) {
    final ModelNode req=new ModelNode();
    req.get(Util.OPERATION).set(opName);
    req.get(Util.ADDRESS).set(address);
    Map<String,ArgumentWithValue> opArgs;
    try {
      opArgs=getOperationArguments(ctx,opName);
    }
 catch (    CommandFormatException e) {
      throw e;
    }
catch (    CommandLineException e) {
      throw new CommandFormatException("Failed to read " + opName + " arguments.",e);
    }
    for (    ArgumentWithValue arg : opArgs.values()) {
      final String argName=arg.getFullName();
      final String propName;
      if (argName.charAt(1) == '-') {
        propName=argName.substring(2);
      }
 else {
        propName=argName.substring(1);
      }
      final String valueString=arg.getValue(parsedArgs);
      if (valueString != null) {
        ModelNode nodeValue=arg.getValueConverter().fromString(valueString);
        req.get(propName).set(nodeValue);
      }
    }
    steps.add(req);
  }
  return composite;
}
