{
  final ModelNode address=buildOperationAddress(ctx);
  final ModelNode composite=new ModelNode();
  composite.get(Util.OPERATION).set(Util.COMPOSITE);
  composite.get(Util.ADDRESS).setEmptyList();
  final ModelNode steps=composite.get(Util.STEPS);
  final ParsedCommandLine parsedArgs=ctx.getParsedCommandLine();
  for (  String opName : this.ops) {
    final ModelNode req=new ModelNode();
    req.get(Util.OPERATION).set(opName);
    req.get(Util.ADDRESS).set(address);
    Map<String,ArgumentWithValue> opArgs;
    try {
      opArgs=getOperationArguments(ctx,opName);
    }
 catch (    CommandFormatException e) {
      throw e;
    }
catch (    CommandLineException e) {
      throw new CommandFormatException("Failed to read " + opName + " arguments.",e);
    }
    for (    ArgumentWithValue arg : opArgs.values()) {
      final String argName=arg.getFullName();
      final String propName;
      if (argName.charAt(1) == '-') {
        propName=argName.substring(2);
      }
 else {
        propName=argName.substring(1);
      }
      final String valueString=arg.getValue(parsedArgs);
      if (valueString != null) {
        ModelNode nodeValue=arg.getValueConverter().fromString(ctx,valueString);
        req.get(propName).set(nodeValue);
      }
    }
    steps.add(req);
  }
  return composite;
}
