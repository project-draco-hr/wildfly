{
  Map<String,ArgumentWithValue> args=opArgs.get(opName);
  if (args != null) {
    return args;
  }
  final ModelNode descr=getOperationDescription(ctx,opName);
  if (descr.has(Util.REQUEST_PROPERTIES)) {
    args=new HashMap<String,ArgumentWithValue>();
    final List<Property> propList=descr.get(Util.REQUEST_PROPERTIES).asPropertyList();
    for (    Property prop : propList) {
      final ModelNode propDescr=prop.getValue();
      ModelType type=null;
      CommandLineCompleter valueCompleter=null;
      ArgumentValueConverter valueConverter=null;
      if (propConverters != null) {
        valueConverter=propConverters.get(prop.getName());
      }
      if (valueCompleters != null) {
        valueCompleter=valueCompleters.get(prop.getName());
      }
      if (valueConverter == null) {
        valueConverter=ArgumentValueConverter.DEFAULT;
        if (propDescr.has(Util.TYPE)) {
          type=propDescr.get(Util.TYPE).asType();
          if (ModelType.BOOLEAN == type) {
            if (valueCompleter == null) {
              valueCompleter=SimpleTabCompleter.BOOLEAN;
            }
          }
 else           if (prop.getName().endsWith("properties")) {
            valueConverter=ArgumentValueConverter.PROPERTIES;
          }
 else           if (ModelType.LIST == type) {
            if (propDescr.hasDefined(Util.VALUE_TYPE) && propDescr.get(Util.VALUE_TYPE).asType() == ModelType.PROPERTY) {
              valueConverter=ArgumentValueConverter.PROPERTIES;
            }
 else {
              valueConverter=ArgumentValueConverter.LIST;
            }
          }
 else           if (ModelType.OBJECT == type) {
            valueConverter=ArgumentValueConverter.OBJECT;
          }
        }
      }
      final ArgumentWithValue arg=new ArgumentWithValue(ResourceCompositeOperationHandler.this,valueCompleter,valueConverter,"--" + prop.getName());
      args.put(arg.getFullName(),arg);
    }
  }
 else {
    args=Collections.emptyMap();
  }
  opArgs.put(opName,args);
  return args;
}
