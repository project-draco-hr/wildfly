{
  requireNoAttributes(reader);
  boolean hasLocal=false;
  boolean hasRemote=false;
  while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
    requireNamespace(reader,expectedNs);
    final Element element=Element.forName(reader.getLocalName());
switch (element) {
case LOCAL:
{
        if (hasLocal) {
          throw new XMLStreamException("Child " + element.getLocalName() + " of element "+ Element.DOMAIN_CONTROLLER.getLocalName()+ " already declared",reader.getLocation());
        }
 else         if (hasRemote) {
          throw new XMLStreamException("Child " + Element.REMOTE.getLocalName() + " of element "+ Element.DOMAIN_CONTROLLER.getLocalName()+ " already declared",reader.getLocation());
        }
        requireNoAttributes(reader);
        requireNoContent(reader);
        hasLocal=true;
        break;
      }
case REMOTE:
{
      if (hasRemote) {
        throw new XMLStreamException("Child " + element.getLocalName() + " of element "+ Element.DOMAIN_CONTROLLER.getLocalName()+ " already declared",reader.getLocation());
      }
 else       if (hasLocal) {
        throw new XMLStreamException("Child " + Element.LOCAL.getLocalName() + " of element "+ Element.DOMAIN_CONTROLLER.getLocalName()+ " already declared",reader.getLocation());
      }
      parseRemoteDomainController(reader,address,list);
      hasRemote=true;
      break;
    }
default :
  throw unexpectedElement(reader);
}
}
if (!hasLocal && !hasRemote) {
throw new XMLStreamException("Either a " + Element.REMOTE.getLocalName() + " or "+ Element.LOCAL.getLocalName()+ " domain controller configuration must be declared.",reader.getLocation());
}
if (hasLocal) {
final ModelNode update=new ModelNode();
update.get(OP_ADDR).set(address);
update.get(OP).set("write-local-domain-controller");
list.add(update);
}
}
