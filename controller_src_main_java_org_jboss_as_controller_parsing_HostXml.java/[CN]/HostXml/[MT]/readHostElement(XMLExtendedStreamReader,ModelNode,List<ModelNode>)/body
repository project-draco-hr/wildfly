{
  parseNamespaces(reader,address,list);
  String hostName=null;
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
switch (Namespace.forUri(reader.getAttributeNamespace(i))) {
case NONE:
{
        final String value=reader.getAttributeValue(i);
        final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case NAME:
{
            hostName=value;
            break;
          }
default :
        throw unexpectedAttribute(reader,i);
    }
    break;
  }
case XML_SCHEMA_INSTANCE:
{
switch (Attribute.forName(reader.getAttributeLocalName(i))) {
case SCHEMA_LOCATION:
{
      parseSchemaLocations(reader,address,list,i);
      break;
    }
case NO_NAMESPACE_SCHEMA_LOCATION:
{
    break;
  }
default :
{
  throw unexpectedAttribute(reader,i);
}
}
break;
}
default :
throw unexpectedAttribute(reader,i);
}
}
if (hostName == null) {
hostName=getDefaultName();
}
setHostName(address,list,hostName);
Element element=nextElement(reader);
if (element == Element.EXTENSIONS) {
parseExtensions(reader,address,list);
element=nextElement(reader);
}
if (element == Element.PATHS) {
parsePaths(reader,address,list,true);
element=nextElement(reader);
}
if (element == Element.SYSTEM_PROPERTIES) {
parseSystemProperties(reader,address,list,false);
element=nextElement(reader);
}
if (element == Element.MANAGEMENT_INTERFACES) {
parseManagement(reader,address,list);
element=nextElement(reader);
}
if (element == Element.DOMAIN_CONTROLLER) {
parseDomainController(reader,address,list);
element=nextElement(reader);
}
final Set<String> interfaceNames=new HashSet<String>();
if (element == Element.INTERFACES) {
parseInterfaces(reader,interfaceNames,address,list,true);
element=nextElement(reader);
}
if (element == Element.JVMS) {
parseJvms(reader,address,list);
element=nextElement(reader);
}
if (element == Element.SERVERS) {
parseServers(reader,address,list);
element=nextElement(reader);
}
}
