{
  if (ModelVersion.compare(ModelVersion.create(1,4,0),modelVersion) > 0) {
    return;
  }
  KernelServicesBuilder builder=createKernelServicesBuilder(TestModelType.DOMAIN).setModelInitializer(new ModelInitializer(){
    @Override public void populateModel(    Resource rootResource){
      Resource management=Resource.Factory.create();
      rootResource.registerChild(PathElement.pathElement(ModelDescriptionConstants.CORE_SERVICE,ModelDescriptionConstants.MANAGEMENT),management);
      management.registerChild(PathElement.pathElement(ModelDescriptionConstants.ACCESS,ModelDescriptionConstants.AUTHORIZATION),AccessAuthorizationResourceDefinition.createResource(null));
    }
  }
,null).setXmlResource("domain-transform-rbac-provider.xml");
  builder.createLegacyKernelServicesBuilder(modelVersion,testControllerVersion).addOperationValidationExclude("write-attribute",PathAddress.pathAddress(CoreManagementResourceDefinition.PATH_ELEMENT,AccessAuthorizationResourceDefinition.PATH_ELEMENT)).skipReverseControllerCheck();
  KernelServices mainServices=builder.build();
  Assert.assertTrue(mainServices.isSuccessfulBoot());
  KernelServices legacyServices=mainServices.getLegacyServices(modelVersion);
  Assert.assertFalse(legacyServices.isSuccessfulBoot());
}
