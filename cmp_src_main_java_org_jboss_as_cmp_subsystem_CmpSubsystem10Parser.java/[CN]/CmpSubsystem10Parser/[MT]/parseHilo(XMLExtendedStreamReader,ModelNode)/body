{
  String name=null;
  int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    requireNoNamespaceAttribute(reader,i);
    final String value=reader.getAttributeValue(i);
    final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case NAME:
{
        name=value;
        break;
      }
default :
    throw unexpectedAttribute(reader,i);
}
}
if (name == null) {
throw missingRequired(reader,Collections.singleton(Attribute.NAME));
}
final ModelNode op=new ModelNode();
op.get(OP).set(ADD);
final ModelNode address=parentAddress.clone();
address.add(HILO_KEY_GENERATOR,name);
address.protect();
op.get(OP_ADDR).set(address);
while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
final String value=reader.getElementText();
switch (Element.forName(reader.getLocalName())) {
case BLOCK_SIZE:
{
    op.get(CmpConstants.BLOCK_SIZE).set(Long.parseLong(value));
    break;
  }
case CREATE_TABLE:
{
  op.get(CmpConstants.CREATE_TABLE).set(Boolean.parseBoolean(value));
  break;
}
case CREATE_TABLE_DDL:
{
op.get(CmpConstants.CREATE_TABLE_DDL).set(value);
break;
}
case DATA_SOURCE:
{
op.get(CmpConstants.DATA_SOURCE).set(value);
break;
}
case DROP_TABLE:
{
op.get(DROP_TABLE).set(Boolean.parseBoolean(value));
break;
}
case ID_COLUMN:
{
op.get(ID_COLUMN).set(value);
break;
}
case SELECT_HI_DDL:
{
op.get(CmpConstants.SELECT_HI_DDL).set(value);
break;
}
case SEQUENCE_COLUMN:
{
op.get(CmpConstants.SEQUENCE_COLUMN).set(value);
break;
}
case SEQUENCE_NAME:
{
op.get(CmpConstants.SEQUENCE_NAME).set(value);
break;
}
case TABLE_NAME:
{
op.get(CmpConstants.TABLE_NAME).set(value);
break;
}
default :
{
throw unexpectedElement(reader);
}
}
}
return op;
}
