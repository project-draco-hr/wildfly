{
  String name=null;
  int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    requireNoNamespaceAttribute(reader,i);
    final String value=reader.getAttributeValue(i);
    final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case NAME:
{
        name=value;
        break;
      }
default :
    throw unexpectedAttribute(reader,i);
}
}
if (name == null) {
throw missingRequired(reader,Collections.singleton(Attribute.NAME));
}
final ModelNode op=new ModelNode();
op.get(OP).set(ADD);
final ModelNode address=parentAddress.clone();
address.add(HILO_KEY_GENERATOR,name);
address.protect();
op.get(OP_ADDR).set(address);
final EnumSet<Element> required=EnumSet.of(Element.DATA_SOURCE,Element.TABLE_NAME,Element.ID_COLUMN,Element.SEQUENCE_COLUMN,Element.SEQUENCE_NAME);
while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
final String value=reader.getElementText();
final String tag=reader.getLocalName();
final Element element=Element.forName(tag);
required.remove(element);
SimpleAttributeDefinition attribute=HiLoKeyGeneratorResourceDescription.ATTRIBUTE_MAP.get(tag);
if (attribute == null) {
  throw unexpectedElement(reader);
}
attribute.parseAndSetParameter(value,op,reader);
}
if (!required.isEmpty()) {
throw missingRequiredElement(reader,required);
}
return op;
}
