{
  if (context instanceof NewBootOperationContext) {
    final NewBootOperationContext updateContext=(NewBootOperationContext)context;
    logger.info("Activating EE subsystem");
    updateContext.addDeploymentProcessor(Phase.STRUCTURE,Phase.STRUCTURE_EAR_DEPLOYMENT_INIT,new EarInitializationProcessor());
    updateContext.addDeploymentProcessor(Phase.STRUCTURE,Phase.STRUCTURE_EAR_APP_XML_PARSE,new EarMetaDataParsingProcessor());
    updateContext.addDeploymentProcessor(Phase.STRUCTURE,Phase.STRUCTURE_EAR_JBOSS_APP_XML_PARSE,new JBossAppMetaDataParsingProcessor());
    updateContext.addDeploymentProcessor(Phase.STRUCTURE,Phase.STRUCTURE_EAR,new EarStructureProcessor());
    updateContext.addDeploymentProcessor(Phase.PARSE,Phase.PARSE_BEAN_LIEFCYCLE_ANNOTATION,new LifecycleAnnotationParsingProcessor());
    updateContext.addDeploymentProcessor(Phase.PARSE,Phase.PARSE_BEAN_INTERCEPTOR_ANNOTATION,new InterceptorAnnotationParsingProcessor());
    updateContext.addDeploymentProcessor(Phase.PARSE,Phase.PARSE_BEAN_RESOURCE_INJECTION_ANNOTATION,new ResourceInjectionAnnotationParsingProcessor());
    updateContext.addDeploymentProcessor(Phase.INSTALL,Phase.INSTALL_MODULE_CONTEXT,new ModuleContextProcessor());
    updateContext.addDeploymentProcessor(Phase.INSTALL,Phase.INSTALL_APP_CONTEXT,new ApplicationContextProcessor());
    updateContext.addDeploymentProcessor(Phase.INSTALL,Phase.INSTALL_EE_COMPONENT,new ComponentInstallProcessor());
  }
  final ModelNode compensatingOperation=new ModelNode();
  compensatingOperation.get(OP).set(REMOVE);
  compensatingOperation.get(OP_ADDR).set(operation.require(OP_ADDR));
  context.getSubModel().setEmptyObject();
  resultHandler.handleResultComplete(compensatingOperation);
  return Cancellable.NULL;
}
