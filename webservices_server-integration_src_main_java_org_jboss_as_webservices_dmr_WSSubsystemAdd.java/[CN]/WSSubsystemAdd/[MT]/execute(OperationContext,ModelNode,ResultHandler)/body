{
  configValidator.validate(operation);
  final ModelNode subModel=context.getSubModel();
  populateSubModel(operation,subModel);
  if (context instanceof BootOperationContext) {
    final BootOperationContext updateContext=(BootOperationContext)context;
    context.getRuntimeContext().setRuntimeTask(new RuntimeTask(){
      @Override public void execute(      RuntimeTaskContext context) throws OperationFailedException {
        log.info("Activating WebServices Extension");
        ModuleClassLoaderProvider.register();
        WSServices.saveContainerRegistry(context.getServiceRegistry());
        ServiceTarget serviceTarget=context.getServiceTarget();
        ServerConfigImpl serverConfig=createServerConfig(operation);
        ServerConfigService.install(serviceTarget,serverConfig);
        ModelUpdateService.install(serviceTarget);
        EndpointRegistryService.install(serviceTarget);
        WSDeploymentActivator.activate(updateContext);
        resultHandler.handleResultComplete();
      }
    }
);
    updateContext.addDeploymentProcessor(Phase.PARSE,Phase.PARSE_WEB_SERVICE_INJECTION_ANNOTATION,new WebServiceRefAnnotationParsingProcessor());
    updateContext.addDeploymentProcessor(Phase.PARSE,Phase.PARSE_RESOURCE_INJECTION_WEBSERVICE_CONTEXT_ANNOTATION,new WebServiceContextResourceProcessor());
  }
 else {
    resultHandler.handleResultComplete();
  }
  final ModelNode compensatingOperation=Util.getResourceRemoveOperation(operation.require(OP_ADDR));
  return new BasicOperationResult(compensatingOperation);
}
