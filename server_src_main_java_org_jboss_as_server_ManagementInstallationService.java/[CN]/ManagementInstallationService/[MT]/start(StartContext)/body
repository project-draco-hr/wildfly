{
  ServiceTarget target=context.getController().getServiceContainer().subTarget();
  ServerModel serverModel=serverControllerValue.getValue().getServerModel();
  ManagementElement managementElement=serverModel.getManagementElement();
  if (managementElement != null) {
    final ManagementCommunicationService managementCommunicationService=new ManagementCommunicationService();
    target.addService(ManagementCommunicationService.SERVICE_NAME,managementCommunicationService).addDependency(NetworkInterfaceService.JBOSS_NETWORK_INTERFACE.append(managementElement.getInterfaceName()),NetworkInterfaceBinding.class,managementCommunicationService.getInterfaceInjector()).addInjection(managementCommunicationService.getPortInjector(),managementElement.getPort()).addInjection(managementCommunicationService.getExecutorServiceInjector(),Executors.newCachedThreadPool()).addInjection(managementCommunicationService.getThreadFactoryInjector(),Executors.defaultThreadFactory()).setInitialMode(ServiceController.Mode.ACTIVE).install();
    ServerControllerOperationHandler clientOperationHandler=new ServerControllerOperationHandler();
    target.addService(ServerControllerOperationHandler.SERVICE_NAME,clientOperationHandler).addDependency(Services.JBOSS_SERVER_CONTROLLER,ServerController.class,clientOperationHandler.getServerControllerInjector()).addDependency(ManagementCommunicationService.SERVICE_NAME,ManagementCommunicationService.class,new ManagementCommunicationServiceInjector(clientOperationHandler)).addDependency(ServerDeploymentRepository.SERVICE_NAME,ServerDeploymentRepository.class,clientOperationHandler.getDeploymentRepositoryInjector()).addDependency(ServerDeploymentManager.SERVICE_NAME_LOCAL,ServerDeploymentManager.class,clientOperationHandler.getDeploymentManagerInjector()).addInjection(clientOperationHandler.getExecutorValue(),Executors.newCachedThreadPool()).setInitialMode(ServiceController.Mode.ACTIVE).install();
    ServerDeploymentManagerImpl.addService(serverModel,context.getController().getServiceContainer(),target);
  }
}
