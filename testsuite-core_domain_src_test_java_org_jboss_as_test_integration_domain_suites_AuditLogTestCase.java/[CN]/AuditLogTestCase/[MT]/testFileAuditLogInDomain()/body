{
  Assert.assertFalse(masterAuditLog.exists());
  Assert.assertFalse(masterServerAuditLog.exists());
  Assert.assertFalse(slaveAuditLog.exists());
  Assert.assertFalse(slaveServerAuditLog.exists());
  ModelNode op=Util.getWriteAttributeOperation(masterCoreLogggerAddress,ENABLED,new ModelNode(true));
  masterLifecycleUtil.executeForResult(op);
  Assert.assertTrue(masterAuditLog.exists());
  Assert.assertFalse(masterServerAuditLog.exists());
  Assert.assertFalse(slaveAuditLog.exists());
  Assert.assertFalse(slaveServerAuditLog.exists());
  op=Util.getWriteAttributeOperation(slaveCoreLogggerAddress,ENABLED,new ModelNode(true));
  slaveLifecycleUtil.executeForResult(op);
  Assert.assertTrue(masterAuditLog.exists());
  Assert.assertFalse(masterServerAuditLog.exists());
  Assert.assertTrue(slaveAuditLog.exists());
  Assert.assertFalse(slaveServerAuditLog.exists());
  op=Util.getWriteAttributeOperation(masterServerLoggerAddress,ENABLED,new ModelNode(true));
  masterLifecycleUtil.executeForResult(op);
  Assert.assertTrue(masterAuditLog.exists());
  Assert.assertTrue(masterServerAuditLog.exists());
  Assert.assertTrue(slaveAuditLog.exists());
  Assert.assertFalse(slaveServerAuditLog.exists());
  op=Util.getWriteAttributeOperation(slaveServerLoggerAddress,ENABLED,new ModelNode(true));
  slaveLifecycleUtil.executeForResult(op);
  Assert.assertTrue(masterAuditLog.exists());
  Assert.assertTrue(masterServerAuditLog.exists());
  Assert.assertTrue(slaveAuditLog.exists());
  Assert.assertTrue(slaveServerAuditLog.exists());
  masterAuditLog.delete();
  slaveAuditLog.delete();
  masterServerAuditLog.delete();
  slaveServerAuditLog.delete();
  String propertyName="test" + System.currentTimeMillis();
  ModelNode addOp=Util.createAddOperation(PathAddress.pathAddress(SYSTEM_PROPERTY,propertyName));
  addOp.get(VALUE).set("abc");
  masterLifecycleUtil.executeForResult(addOp);
  Assert.assertTrue(masterAuditLog.exists());
  Assert.assertTrue(masterServerAuditLog.exists());
  Assert.assertTrue(slaveAuditLog.exists());
  Assert.assertTrue(slaveServerAuditLog.exists());
  ModelNode masterRecord=readFile(masterAuditLog,1).get(0);
  Assert.assertTrue(masterRecord.get(JsonAuditLogItemFormatter.DOMAIN_UUID).isDefined());
  String domainUUID=masterRecord.get(JsonAuditLogItemFormatter.DOMAIN_UUID).asString();
  ModelNode masterOp=getOp(masterRecord);
  compareOpsWithoutHeaders(addOp,masterOp);
  Assert.assertFalse(masterOp.get(OPERATION_HEADERS,DOMAIN_UUID).isDefined());
  ModelNode masterServerRecord=readFile(masterServerAuditLog,1).get(0);
  Assert.assertEquals(domainUUID,masterServerRecord.get(JsonAuditLogItemFormatter.DOMAIN_UUID).asString());
  ModelNode masterServerOp=getOp(masterServerRecord);
  Assert.assertEquals(domainUUID,masterServerOp.get(OPERATION_HEADERS,DOMAIN_UUID).asString());
  compareOpsWithoutHeaders(addOp,masterServerOp,BOOT_TIME);
  boolean mainThree=false;
  boolean otherTwo=false;
  boolean domainCopy=false;
  List<ModelNode> slaveRecords=readFile(slaveAuditLog,3);
  for (  ModelNode slaveRecord : slaveRecords) {
    Assert.assertEquals(domainUUID,slaveRecord.get(JsonAuditLogItemFormatter.DOMAIN_UUID).asString());
    ModelNode slaveOp=getOp(slaveRecord);
    Assert.assertEquals(domainUUID,slaveOp.get(OPERATION_HEADERS,DOMAIN_UUID).asString());
    ModelNode addOpClone=addOp.clone();
    String address=slaveOp.get(OP_ADDR).asString();
    if (address.contains("main-three")) {
      Assert.assertFalse(mainThree);
      mainThree=true;
      addOpClone.get(OP_ADDR).set(PathAddress.pathAddress(PathElement.pathElement(HOST,"slave"),PathElement.pathElement(SERVER,"main-three"),PathElement.pathElement(SYSTEM_PROPERTY,propertyName)).toModelNode());
    }
 else     if (address.contains("other-two")) {
      Assert.assertFalse(otherTwo);
      otherTwo=true;
      addOpClone.get(OP_ADDR).set(PathAddress.pathAddress(PathElement.pathElement(HOST,"slave"),PathElement.pathElement(SERVER,"other-two"),PathElement.pathElement(SYSTEM_PROPERTY,propertyName)).toModelNode());
    }
 else {
      Assert.assertFalse(domainCopy);
      domainCopy=true;
    }
    compareOpsWithoutHeaders(addOpClone,slaveOp,BOOT_TIME);
  }
  Assert.assertTrue(mainThree);
  Assert.assertTrue(otherTwo);
  Assert.assertTrue(domainCopy);
  ModelNode slaveServerRecord=readFile(slaveServerAuditLog,1).get(0);
  Assert.assertEquals(domainUUID,slaveServerRecord.get(JsonAuditLogItemFormatter.DOMAIN_UUID).asString());
  ModelNode slaveServerOp=getOp(slaveServerRecord);
  Assert.assertEquals(domainUUID,slaveServerOp.get(OPERATION_HEADERS,DOMAIN_UUID).asString());
  compareOpsWithoutHeaders(addOp,slaveServerOp,BOOT_TIME);
}
