{
  ModelControllerClient client=getClientForUser(userName);
  ModelNode address=new ModelNode();
  address.setEmptyList().add(CORE_SERVICE,MANAGEMENT).add(ACCESS,AUTHORIZATION);
  validateOperation(client,readResource(address),mgmtAuthorizationExpectation);
  address.setEmptyList().add(CORE_SERVICE,MANAGEMENT).add(ACCESS,AUTHORIZATION);
  validateOperation(client,readAttribute(address,PROVIDER),mgmtAuthorizationExpectation);
  address.setEmptyList().add(CORE_SERVICE,MANAGEMENT).add(ACCESS,AUTHORIZATION);
  validateOperation(client,writeAttribute(address,PROVIDER,new ModelNode("simple")),mgmtAuthorizationExpectation);
  address.setEmptyList().add(CORE_SERVICE,MANAGEMENT).add(ACCESS,AUDIT);
  validateOperation(client,readResource(address),auditLogExpectation);
  address.setEmptyList().add(CORE_SERVICE,MANAGEMENT).add(ACCESS,AUDIT).add(LOGGER,AUDIT_LOG);
  validateOperation(client,readResource(address),auditLogExpectation);
  address.setEmptyList().add(CORE_SERVICE,MANAGEMENT).add(ACCESS,AUDIT).add(LOGGER,AUDIT_LOG);
  validateOperation(client,readAttribute(address,ENABLED),auditLogExpectation);
  address.setEmptyList().add(CORE_SERVICE,MANAGEMENT).add(ACCESS,AUDIT).add(LOGGER,AUDIT_LOG);
  validateOperation(client,writeAttribute(address,ENABLED,new ModelNode(true)),auditLogExpectation);
  address.setEmptyList().add(CORE_SERVICE,MANAGEMENT).add(SECURITY_REALM,"ManagementRealm");
  validateOperation(client,readResource(address),securityRealmExpectation);
  address.setEmptyList().add(CORE_SERVICE,MANAGEMENT).add(SECURITY_REALM,"ManagementRealm");
  validateOperation(client,readAttribute(address,MAP_GROUPS_TO_ROLES),securityRealmExpectation);
  address.setEmptyList().add(CORE_SERVICE,MANAGEMENT).add(SECURITY_REALM,"ManagementRealm");
  validateOperation(client,writeAttribute(address,MAP_GROUPS_TO_ROLES,new ModelNode(true)),securityRealmExpectation);
  address.setEmptyList().add(SUBSYSTEM,"security").add("security-domain","other");
  validateOperation(client,readResource(address),securityDomainExpectation);
  address.setEmptyList().add(SUBSYSTEM,"security").add("security-domain","other");
  validateOperation(client,readAttribute(address,"cache-type"),securityDomainExpectation);
  address.setEmptyList().add(SUBSYSTEM,"security").add("security-domain","other");
  validateOperation(client,writeAttribute(address,"cache-type",new ModelNode("infinispan")),securityDomainExpectation);
  address.setEmptyList().add(SUBSYSTEM,"datasources").add("data-source","ExampleDS");
  validateOperation(client,readResource(address),datasourceWithPlainPasswordExpectation);
  address.setEmptyList().add(SUBSYSTEM,"datasources").add("data-source","ExampleDS");
  validateOperation(client,readAttribute(address,"password"),datasourceWithPlainPasswordExpectation);
  address.setEmptyList().add(SUBSYSTEM,"datasources").add("data-source","ExampleDS");
  validateOperation(client,writeAttribute(address,"password",new ModelNode("new-password")),datasourceWithPlainPasswordExpectation);
  address.setEmptyList().add(SUBSYSTEM,"datasources").add("data-source","MaskedDS");
  validateOperation(client,readResource(address),datasourceWithMaskedPasswordExpectation);
  address.setEmptyList().add(SUBSYSTEM,"datasources").add("data-source","MaskedDS");
  validateOperation(client,readAttribute(address,"password"),datasourceWithMaskedPasswordExpectation);
  address.setEmptyList().add(SUBSYSTEM,"datasources").add("data-source","MaskedDS");
  validateOperation(client,writeAttribute(address,"password",new ModelNode("new-password")),datasourceWithMaskedPasswordExpectation);
}
