{
  if (cache.hasDefined(LockingResourceDefinition.PATH.getKey())) {
    writer.writeStartElement(Element.LOCKING.getLocalName());
    ModelNode locking=cache.get(LockingResourceDefinition.PATH.getKeyValuePair());
    writeAttribute(writer,locking,LockingResourceDefinition.ISOLATION);
    writeAttribute(writer,locking,LockingResourceDefinition.STRIPING);
    writeAttribute(writer,locking,LockingResourceDefinition.ACQUIRE_TIMEOUT);
    writeAttribute(writer,locking,LockingResourceDefinition.CONCURRENCY_LEVEL);
    writer.writeEndElement();
  }
  if (cache.hasDefined(TransactionResourceDefinition.PATH.getKey())) {
    writer.writeStartElement(Element.TRANSACTION.getLocalName());
    ModelNode transaction=cache.get(TransactionResourceDefinition.PATH.getKeyValuePair());
    writeAttribute(writer,transaction,TransactionResourceDefinition.STOP_TIMEOUT);
    writeAttribute(writer,transaction,TransactionResourceDefinition.MODE);
    writeAttribute(writer,transaction,TransactionResourceDefinition.LOCKING);
    writer.writeEndElement();
  }
  if (cache.hasDefined(EvictionResourceDefinition.PATH.getKey())) {
    writer.writeStartElement(Element.EVICTION.getLocalName());
    ModelNode eviction=cache.get(EvictionResourceDefinition.PATH.getKeyValuePair());
    writeAttribute(writer,eviction,EvictionResourceDefinition.STRATEGY);
    writeAttribute(writer,eviction,EvictionResourceDefinition.MAX_ENTRIES);
    writer.writeEndElement();
  }
  if (cache.hasDefined(ExpirationResourceDefinition.PATH.getKey())) {
    writer.writeStartElement(Element.EXPIRATION.getLocalName());
    ModelNode expiration=cache.get(ExpirationResourceDefinition.PATH.getKeyValuePair());
    writeAttribute(writer,expiration,ExpirationResourceDefinition.MAX_IDLE);
    writeAttribute(writer,expiration,ExpirationResourceDefinition.LIFESPAN);
    writeAttribute(writer,expiration,ExpirationResourceDefinition.INTERVAL);
    writer.writeEndElement();
  }
  if (cache.hasDefined(CustomStoreResourceDefinition.PATH.getKey())) {
    ModelNode store=cache.get(CustomStoreResourceDefinition.PATH.getKeyValuePair());
    writer.writeStartElement(Element.STORE.getLocalName());
    writeAttribute(writer,store,CustomStoreResourceDefinition.CLASS);
    writeStoreAttributes(writer,store);
    writeStoreElements(writer,store);
    writer.writeEndElement();
  }
  if (cache.hasDefined(FileStoreResourceDefinition.PATH.getKey())) {
    ModelNode store=cache.get(FileStoreResourceDefinition.PATH.getKeyValuePair());
    writer.writeStartElement(Element.FILE_STORE.getLocalName());
    writeStoreAttributes(writer,store);
    writeAttribute(writer,store,FileStoreResourceDefinition.RELATIVE_TO);
    writeAttribute(writer,store,FileStoreResourceDefinition.RELATIVE_PATH);
    writeStoreElements(writer,store);
    writer.writeEndElement();
  }
  if (cache.hasDefined(StringKeyedJDBCStoreResourceDefinition.PATH.getKey())) {
    ModelNode store=cache.get(StringKeyedJDBCStoreResourceDefinition.PATH.getKeyValuePair());
    writer.writeStartElement(Element.STRING_KEYED_JDBC_STORE.getLocalName());
    writeJDBCStoreAttributes(writer,store);
    writeStoreElements(writer,store);
    writeJDBCStoreTable(writer,Element.STRING_KEYED_TABLE,store,ModelKeys.STRING_KEYED_TABLE);
    writer.writeEndElement();
  }
  if (cache.hasDefined(BinaryKeyedJDBCStoreResourceDefinition.PATH.getKey())) {
    ModelNode store=cache.get(BinaryKeyedJDBCStoreResourceDefinition.PATH.getKeyValuePair());
    writer.writeStartElement(Element.BINARY_KEYED_JDBC_STORE.getLocalName());
    writeJDBCStoreAttributes(writer,store);
    writeStoreElements(writer,store);
    writeJDBCStoreTable(writer,Element.BINARY_KEYED_TABLE,store,ModelKeys.BINARY_KEYED_TABLE);
    writer.writeEndElement();
  }
  if (cache.hasDefined(MixedKeyedJDBCStoreResourceDefinition.PATH.getKey())) {
    ModelNode store=cache.get(MixedKeyedJDBCStoreResourceDefinition.PATH.getKeyValuePair());
    writer.writeStartElement(Element.MIXED_KEYED_JDBC_STORE.getLocalName());
    writeJDBCStoreAttributes(writer,store);
    writeStoreElements(writer,store);
    writeJDBCStoreTable(writer,Element.BINARY_KEYED_TABLE,store,ModelKeys.BINARY_KEYED_TABLE);
    writeJDBCStoreTable(writer,Element.STRING_KEYED_TABLE,store,ModelKeys.STRING_KEYED_TABLE);
    writer.writeEndElement();
  }
  if (cache.hasDefined(RemoteStoreResourceDefinition.PATH.getKey())) {
    ModelNode store=cache.get(RemoteStoreResourceDefinition.PATH.getKeyValuePair());
    writer.writeStartElement(Element.REMOTE_STORE.getLocalName());
    writeStoreAttributes(writer,store);
    writeAttribute(writer,store,RemoteStoreResourceDefinition.CACHE);
    writeAttribute(writer,store,RemoteStoreResourceDefinition.SOCKET_TIMEOUT);
    writeAttribute(writer,store,RemoteStoreResourceDefinition.TCP_NO_DELAY);
    writeStoreElements(writer,store);
    for (    ModelNode remoteServer : store.get(ModelKeys.REMOTE_SERVERS).asList()) {
      writer.writeStartElement(Element.REMOTE_SERVER.getLocalName());
      writeAttribute(writer,remoteServer,RemoteStoreResourceDefinition.OUTBOUND_SOCKET_BINDING);
      writer.writeEndElement();
    }
    writer.writeEndElement();
  }
  if (cache.get(ModelKeys.INDEXING).isDefined() || cache.get(ModelKeys.INDEXING_PROPERTIES).isDefined()) {
    writer.writeStartElement(Element.INDEXING.getLocalName());
    writeAttribute(writer,cache,CacheResourceDefinition.INDEXING);
    writeElement(writer,cache,CacheResourceDefinition.INDEXING_PROPERTIES);
    writer.writeEndElement();
  }
  if (cache.hasDefined(StateTransferResourceDefinition.PATH.getKey())) {
    ModelNode stateTransfer=cache.get(StateTransferResourceDefinition.PATH.getKeyValuePair());
    writer.writeStartElement(Element.STATE_TRANSFER.getLocalName());
    writeAttribute(writer,stateTransfer,StateTransferResourceDefinition.ENABLED);
    writeAttribute(writer,stateTransfer,StateTransferResourceDefinition.TIMEOUT);
    writeAttribute(writer,stateTransfer,StateTransferResourceDefinition.CHUNK_SIZE);
    writer.writeEndElement();
  }
  if (cache.hasDefined(BackupSiteResourceDefinition.WILDCARD_PATH.getKey())) {
    writer.writeStartElement(Element.BACKUPS.getLocalName());
    for (    Property property : cache.get(BackupSiteResourceDefinition.WILDCARD_PATH.getKey()).asPropertyList()) {
      writer.writeStartElement(Element.BACKUP.getLocalName());
      writer.writeAttribute(Attribute.SITE.getLocalName(),property.getName());
      ModelNode backup=property.getValue();
      writeAttribute(writer,backup,BackupSiteResourceDefinition.FAILURE_POLICY);
      writeAttribute(writer,backup,BackupSiteResourceDefinition.STRATEGY);
      writeAttribute(writer,backup,BackupSiteResourceDefinition.REPLICATION_TIMEOUT);
      writeAttribute(writer,backup,BackupSiteResourceDefinition.ENABLED);
      if (backup.hasDefined(ModelKeys.TAKE_BACKUP_OFFLINE_AFTER_FAILURES) || backup.hasDefined(ModelKeys.TAKE_BACKUP_OFFLINE_MIN_WAIT)) {
        writer.writeStartElement(Element.TAKE_OFFLINE.getLocalName());
        writeAttribute(writer,backup,BackupSiteResourceDefinition.TAKE_OFFLINE_AFTER_FAILURES);
        writeAttribute(writer,backup,BackupSiteResourceDefinition.TAKE_OFFLINE_MIN_WAIT);
        writer.writeEndElement();
      }
      writer.writeEndElement();
    }
    writer.writeEndElement();
  }
  if (cache.hasDefined(BackupForResourceDefinition.PATH.getKey())) {
    ModelNode backupFor=cache.get(BackupForResourceDefinition.PATH.getKeyValuePair());
    writer.writeStartElement(Element.BACKUP_FOR.getLocalName());
    writeAttribute(writer,backupFor,BackupForResourceDefinition.REMOTE_CACHE);
    writeAttribute(writer,backupFor,BackupForResourceDefinition.REMOTE_SITE);
    writer.writeEndElement();
  }
}
