{
  if (cache.hasDefined(LockingResourceDefinition.PATH.getKeyValuePair())) {
    ModelNode locking=cache.get(LockingResourceDefinition.PATH.getKeyValuePair());
    Set<LockingResourceDefinition.Attribute> attributes=EnumSet.allOf(LockingResourceDefinition.Attribute.class);
    if (hasDefined(locking,attributes)) {
      writer.writeStartElement(XMLElement.LOCKING.getLocalName());
      writeAttributes(writer,locking,attributes);
      writer.writeEndElement();
    }
  }
  if (cache.hasDefined(TransactionResourceDefinition.PATH.getKeyValuePair())) {
    ModelNode transaction=cache.get(TransactionResourceDefinition.PATH.getKeyValuePair());
    Set<TransactionResourceDefinition.Attribute> attributes=EnumSet.allOf(TransactionResourceDefinition.Attribute.class);
    if (hasDefined(transaction,attributes)) {
      writer.writeStartElement(XMLElement.TRANSACTION.getLocalName());
      writeAttributes(writer,transaction,attributes);
      writer.writeEndElement();
    }
  }
  if (cache.hasDefined(EvictionResourceDefinition.PATH.getKeyValuePair())) {
    ModelNode eviction=cache.get(EvictionResourceDefinition.PATH.getKeyValuePair());
    Set<EvictionResourceDefinition.Attribute> attributes=EnumSet.allOf(EvictionResourceDefinition.Attribute.class);
    if (hasDefined(eviction,attributes)) {
      writer.writeStartElement(XMLElement.EVICTION.getLocalName());
      writeAttributes(writer,eviction,attributes);
      writer.writeEndElement();
    }
  }
  if (cache.hasDefined(ExpirationResourceDefinition.PATH.getKeyValuePair())) {
    ModelNode expiration=cache.get(ExpirationResourceDefinition.PATH.getKeyValuePair());
    Set<ExpirationResourceDefinition.Attribute> attributes=EnumSet.allOf(ExpirationResourceDefinition.Attribute.class);
    if (hasDefined(expiration,attributes)) {
      writer.writeStartElement(XMLElement.EXPIRATION.getLocalName());
      writeAttributes(writer,expiration,attributes);
      writer.writeEndElement();
    }
  }
  Set<StoreResourceDefinition.Attribute> storeAttributes=EnumSet.complementOf(EnumSet.of(StoreResourceDefinition.Attribute.PROPERTIES));
  if (cache.hasDefined(CustomStoreResourceDefinition.PATH.getKeyValuePair())) {
    ModelNode store=cache.get(CustomStoreResourceDefinition.PATH.getKeyValuePair());
    writer.writeStartElement(XMLElement.STORE.getLocalName());
    writeAttributes(writer,store,CustomStoreResourceDefinition.Attribute.class);
    writeAttributes(writer,store,JDBCStoreResourceDefinition.Attribute.class);
    writeAttributes(writer,store,storeAttributes);
    writeStoreElements(writer,store);
    writer.writeEndElement();
  }
  if (cache.hasDefined(FileStoreResourceDefinition.PATH.getKeyValuePair())) {
    ModelNode store=cache.get(FileStoreResourceDefinition.PATH.getKeyValuePair());
    writer.writeStartElement(XMLElement.FILE_STORE.getLocalName());
    writeAttributes(writer,store,FileStoreResourceDefinition.Attribute.class);
    writeAttributes(writer,store,storeAttributes);
    writeStoreElements(writer,store);
    writer.writeEndElement();
  }
  if (cache.hasDefined(BinaryKeyedJDBCStoreResourceDefinition.PATH.getKeyValuePair())) {
    ModelNode store=cache.get(BinaryKeyedJDBCStoreResourceDefinition.PATH.getKeyValuePair());
    writer.writeStartElement(XMLElement.BINARY_KEYED_JDBC_STORE.getLocalName());
    writeAttributes(writer,store,JDBCStoreResourceDefinition.Attribute.class);
    writeAttributes(writer,store,storeAttributes);
    writeStoreElements(writer,store);
    writeJDBCStoreTable(writer,XMLElement.BINARY_KEYED_TABLE,store,BinaryTableResourceDefinition.PATH,BinaryTableResourceDefinition.Attribute.PREFIX);
    writer.writeEndElement();
  }
  if (cache.hasDefined(StringKeyedJDBCStoreResourceDefinition.PATH.getKeyValuePair())) {
    ModelNode store=cache.get(StringKeyedJDBCStoreResourceDefinition.PATH.getKeyValuePair());
    writer.writeStartElement(XMLElement.STRING_KEYED_JDBC_STORE.getLocalName());
    writeAttributes(writer,store,JDBCStoreResourceDefinition.Attribute.class);
    writeAttributes(writer,store,storeAttributes);
    writeStoreElements(writer,store);
    writeJDBCStoreTable(writer,XMLElement.STRING_KEYED_TABLE,store,StringTableResourceDefinition.PATH,StringTableResourceDefinition.Attribute.PREFIX);
    writer.writeEndElement();
  }
  if (cache.hasDefined(MixedKeyedJDBCStoreResourceDefinition.PATH.getKeyValuePair())) {
    ModelNode store=cache.get(MixedKeyedJDBCStoreResourceDefinition.PATH.getKeyValuePair());
    writer.writeStartElement(XMLElement.MIXED_KEYED_JDBC_STORE.getLocalName());
    writeAttributes(writer,store,JDBCStoreResourceDefinition.Attribute.class);
    writeAttributes(writer,store,storeAttributes);
    writeStoreElements(writer,store);
    writeJDBCStoreTable(writer,XMLElement.BINARY_KEYED_TABLE,store,BinaryTableResourceDefinition.PATH,BinaryTableResourceDefinition.Attribute.PREFIX);
    writeJDBCStoreTable(writer,XMLElement.STRING_KEYED_TABLE,store,StringTableResourceDefinition.PATH,StringTableResourceDefinition.Attribute.PREFIX);
    writer.writeEndElement();
  }
  if (cache.hasDefined(RemoteStoreResourceDefinition.PATH.getKeyValuePair())) {
    ModelNode store=cache.get(RemoteStoreResourceDefinition.PATH.getKeyValuePair());
    writer.writeStartElement(XMLElement.REMOTE_STORE.getLocalName());
    writeAttributes(writer,store,RemoteStoreResourceDefinition.Attribute.class);
    writeAttributes(writer,store,storeAttributes);
    writeStoreElements(writer,store);
    writer.writeEndElement();
  }
  if (cache.hasDefined(IndexingResourceDefinition.PATH.getKeyValuePair())) {
    ModelNode indexing=cache.get(IndexingResourceDefinition.PATH.getKeyValuePair());
    if (hasDefined(indexing,EnumSet.allOf(IndexingResourceDefinition.Attribute.class))) {
      writer.writeStartElement(XMLElement.INDEXING.getLocalName());
      writeAttributes(writer,indexing,EnumSet.complementOf(EnumSet.of(IndexingResourceDefinition.Attribute.PROPERTIES)));
      writeElement(writer,indexing,IndexingResourceDefinition.Attribute.PROPERTIES);
      writer.writeEndElement();
    }
  }
  if (cache.hasDefined(StateTransferResourceDefinition.PATH.getKeyValuePair())) {
    ModelNode stateTransfer=cache.get(StateTransferResourceDefinition.PATH.getKeyValuePair());
    EnumSet<StateTransferResourceDefinition.Attribute> attributes=EnumSet.allOf(StateTransferResourceDefinition.Attribute.class);
    if (hasDefined(stateTransfer,attributes)) {
      writer.writeStartElement(XMLElement.STATE_TRANSFER.getLocalName());
      writeAttributes(writer,stateTransfer,attributes);
      writer.writeEndElement();
    }
  }
  if (cache.hasDefined(BackupsResourceDefinition.PATH.getKeyValuePair())) {
    ModelNode backups=cache.get(BackupsResourceDefinition.PATH.getKeyValuePair());
    if (backups.hasDefined(BackupResourceDefinition.WILDCARD_PATH.getKey())) {
      writer.writeStartElement(XMLElement.BACKUPS.getLocalName());
      for (      Property property : backups.get(BackupResourceDefinition.WILDCARD_PATH.getKey()).asPropertyList()) {
        writer.writeStartElement(XMLElement.BACKUP.getLocalName());
        writer.writeAttribute(XMLAttribute.SITE.getLocalName(),property.getName());
        ModelNode backup=property.getValue();
        EnumSet<BackupResourceDefinition.Attribute> takeOfflineAttributes=EnumSet.of(BackupResourceDefinition.Attribute.TAKE_OFFLINE_AFTER_FAILURES,BackupResourceDefinition.Attribute.TAKE_OFFLINE_MIN_WAIT);
        writeAttributes(writer,backup,EnumSet.complementOf(takeOfflineAttributes));
        if (hasDefined(backup,takeOfflineAttributes)) {
          writer.writeStartElement(XMLElement.TAKE_OFFLINE.getLocalName());
          writeAttributes(writer,backup,takeOfflineAttributes);
          writer.writeEndElement();
        }
        writer.writeEndElement();
      }
      writer.writeEndElement();
    }
  }
  if (cache.hasDefined(BackupForResourceDefinition.PATH.getKeyValuePair())) {
    ModelNode backupFor=cache.get(BackupForResourceDefinition.PATH.getKeyValuePair());
    Set<BackupForResourceDefinition.Attribute> attributes=EnumSet.allOf(BackupForResourceDefinition.Attribute.class);
    if (hasDefined(backupFor,attributes)) {
      writer.writeStartElement(XMLElement.BACKUP_FOR.getLocalName());
      writeAttributes(writer,backupFor,attributes);
      writer.writeEndElement();
    }
  }
}
