{
  if (cache.hasDefined(LockingResourceDefinition.PATH.getKey())) {
    writer.writeStartElement(Element.LOCKING.getLocalName());
    ModelNode locking=cache.get(LockingResourceDefinition.PATH.getKeyValuePair());
    LockingResourceDefinition.ISOLATION.marshallAsAttribute(locking,writer);
    LockingResourceDefinition.STRIPING.marshallAsAttribute(locking,writer);
    LockingResourceDefinition.ACQUIRE_TIMEOUT.marshallAsAttribute(locking,writer);
    LockingResourceDefinition.CONCURRENCY_LEVEL.marshallAsAttribute(locking,writer);
    writer.writeEndElement();
  }
  if (cache.hasDefined(TransactionResourceDefinition.PATH.getKey())) {
    writer.writeStartElement(Element.TRANSACTION.getLocalName());
    ModelNode transaction=cache.get(TransactionResourceDefinition.PATH.getKeyValuePair());
    TransactionResourceDefinition.STOP_TIMEOUT.marshallAsAttribute(transaction,writer);
    TransactionResourceDefinition.MODE.marshallAsAttribute(transaction,writer);
    TransactionResourceDefinition.LOCKING.marshallAsAttribute(transaction,writer);
    writer.writeEndElement();
  }
  if (cache.hasDefined(EvictionResourceDefinition.PATH.getKey())) {
    writer.writeStartElement(Element.EVICTION.getLocalName());
    ModelNode eviction=cache.get(EvictionResourceDefinition.PATH.getKeyValuePair());
    EvictionResourceDefinition.STRATEGY.marshallAsAttribute(eviction,writer);
    EvictionResourceDefinition.MAX_ENTRIES.marshallAsAttribute(eviction,writer);
    writer.writeEndElement();
  }
  if (cache.hasDefined(ExpirationResourceDefinition.PATH.getKey())) {
    writer.writeStartElement(Element.EXPIRATION.getLocalName());
    ModelNode expiration=cache.get(ExpirationResourceDefinition.PATH.getKeyValuePair());
    ExpirationResourceDefinition.MAX_IDLE.marshallAsAttribute(expiration,writer);
    ExpirationResourceDefinition.LIFESPAN.marshallAsAttribute(expiration,writer);
    ExpirationResourceDefinition.INTERVAL.marshallAsAttribute(expiration,writer);
    writer.writeEndElement();
  }
  if (cache.hasDefined(StateTransferResourceDefinition.PATH.getKey())) {
    ModelNode stateTransfer=cache.get(StateTransferResourceDefinition.PATH.getKeyValuePair());
    writer.writeStartElement(Element.STATE_TRANSFER.getLocalName());
    StateTransferResourceDefinition.ENABLED.marshallAsAttribute(stateTransfer,writer);
    StateTransferResourceDefinition.TIMEOUT.marshallAsAttribute(stateTransfer,writer);
    StateTransferResourceDefinition.CHUNK_SIZE.marshallAsAttribute(stateTransfer,writer);
    writer.writeEndElement();
  }
  if (cache.hasDefined(CustomStoreResourceDefinition.PATH.getKey())) {
    ModelNode store=cache.get(CustomStoreResourceDefinition.PATH.getKeyValuePair());
    writer.writeStartElement(Element.STORE.getLocalName());
    CustomStoreResourceDefinition.CLASS.marshallAsAttribute(store,writer);
    writeStoreAttributes(writer,store);
    writeStoreElements(writer,store);
    writer.writeEndElement();
  }
  if (cache.hasDefined(FileStoreResourceDefinition.PATH.getKey())) {
    ModelNode store=cache.get(FileStoreResourceDefinition.PATH.getKeyValuePair());
    writer.writeStartElement(Element.FILE_STORE.getLocalName());
    writeStoreAttributes(writer,store);
    FileStoreResourceDefinition.RELATIVE_TO.marshallAsAttribute(store,writer);
    FileStoreResourceDefinition.RELATIVE_PATH.marshallAsAttribute(store,writer);
    writeStoreElements(writer,store);
    writer.writeEndElement();
  }
  if (cache.hasDefined(StringKeyedJDBCStoreResourceDefinition.PATH.getKey())) {
    ModelNode store=cache.get(StringKeyedJDBCStoreResourceDefinition.PATH.getKeyValuePair());
    writer.writeStartElement(Element.STRING_KEYED_JDBC_STORE.getLocalName());
    writeJDBCStoreAttributes(writer,store);
    writeStoreElements(writer,store);
    writeJDBCStoreTable(writer,Element.STRING_KEYED_TABLE,store,ModelKeys.STRING_KEYED_TABLE);
    writer.writeEndElement();
  }
  if (cache.hasDefined(BinaryKeyedJDBCStoreResourceDefinition.PATH.getKey())) {
    ModelNode store=cache.get(BinaryKeyedJDBCStoreResourceDefinition.PATH.getKeyValuePair());
    writer.writeStartElement(Element.BINARY_KEYED_JDBC_STORE.getLocalName());
    writeJDBCStoreAttributes(writer,store);
    writeStoreElements(writer,store);
    writeJDBCStoreTable(writer,Element.BINARY_KEYED_TABLE,store,ModelKeys.BINARY_KEYED_TABLE);
    writer.writeEndElement();
  }
  if (cache.hasDefined(MixedKeyedJDBCStoreResourceDefinition.PATH.getKey())) {
    ModelNode store=cache.get(MixedKeyedJDBCStoreResourceDefinition.PATH.getKeyValuePair());
    writer.writeStartElement(Element.MIXED_KEYED_JDBC_STORE.getLocalName());
    writeJDBCStoreAttributes(writer,store);
    writeStoreElements(writer,store);
    writeJDBCStoreTable(writer,Element.STRING_KEYED_TABLE,store,ModelKeys.STRING_KEYED_TABLE);
    writeJDBCStoreTable(writer,Element.BINARY_KEYED_TABLE,store,ModelKeys.BINARY_KEYED_TABLE);
    writer.writeEndElement();
  }
  if (cache.hasDefined(RemoteStoreResourceDefinition.PATH.getKey())) {
    ModelNode store=cache.get(RemoteStoreResourceDefinition.PATH.getKeyValuePair());
    writer.writeStartElement(Element.REMOTE_STORE.getLocalName());
    writeStoreAttributes(writer,store);
    RemoteStoreResourceDefinition.CACHE.marshallAsAttribute(store,writer);
    RemoteStoreResourceDefinition.SOCKET_TIMEOUT.marshallAsAttribute(store,writer);
    RemoteStoreResourceDefinition.TCP_NO_DELAY.marshallAsAttribute(store,writer);
    writeStoreElements(writer,store);
    for (    ModelNode remoteServer : store.get(ModelKeys.REMOTE_SERVERS).asList()) {
      writer.writeStartElement(Element.REMOTE_SERVER.getLocalName());
      RemoteStoreResourceDefinition.OUTBOUND_SOCKET_BINDING.marshallAsAttribute(remoteServer,writer);
      writer.writeEndElement();
    }
    writer.writeEndElement();
  }
  if (cache.get(ModelKeys.INDEXING).isDefined() || cache.get(ModelKeys.INDEXING_PROPERTIES).isDefined()) {
    writer.writeStartElement(Element.INDEXING.getLocalName());
    CacheResourceDefinition.INDEXING.marshallAsAttribute(cache,writer);
    CacheResourceDefinition.INDEXING_PROPERTIES.marshallAsElement(cache,writer);
    writer.writeEndElement();
  }
  if (cache.hasDefined(BackupSiteResourceDefinition.WILDCARD_PATH.getKey())) {
    writer.writeStartElement(Element.BACKUPS.getLocalName());
    for (    Property property : cache.get(BackupSiteResourceDefinition.WILDCARD_PATH.getKey()).asPropertyList()) {
      writer.writeStartElement(Element.BACKUP.getLocalName());
      writer.writeAttribute(Attribute.SITE.getLocalName(),property.getName());
      ModelNode backup=property.getValue();
      BackupSiteResourceDefinition.FAILURE_POLICY.marshallAsAttribute(backup,writer);
      BackupSiteResourceDefinition.STRATEGY.marshallAsAttribute(backup,writer);
      BackupSiteResourceDefinition.REPLICATION_TIMEOUT.marshallAsAttribute(backup,writer);
      BackupSiteResourceDefinition.ENABLED.marshallAsAttribute(backup,writer);
      if (backup.hasDefined(ModelKeys.TAKE_BACKUP_OFFLINE_AFTER_FAILURES) || backup.hasDefined(ModelKeys.TAKE_BACKUP_OFFLINE_MIN_WAIT)) {
        writer.writeStartElement(Element.TAKE_OFFLINE.getLocalName());
        BackupSiteResourceDefinition.TAKE_OFFLINE_AFTER_FAILURES.marshallAsAttribute(backup,writer);
        BackupSiteResourceDefinition.TAKE_OFFLINE_MIN_WAIT.marshallAsAttribute(backup,writer);
        writer.writeEndElement();
      }
      writer.writeEndElement();
    }
    writer.writeEndElement();
  }
  if (cache.hasDefined(BackupForResourceDefinition.PATH.getKey())) {
    ModelNode backupFor=cache.get(BackupForResourceDefinition.PATH.getKeyValuePair());
    writer.writeStartElement(Element.BACKUP_FOR.getLocalName());
    BackupForResourceDefinition.REMOTE_CACHE.marshallAsAttribute(backupFor,writer);
    BackupForResourceDefinition.REMOTE_SITE.marshallAsAttribute(backupFor,writer);
    writer.writeEndElement();
  }
}
