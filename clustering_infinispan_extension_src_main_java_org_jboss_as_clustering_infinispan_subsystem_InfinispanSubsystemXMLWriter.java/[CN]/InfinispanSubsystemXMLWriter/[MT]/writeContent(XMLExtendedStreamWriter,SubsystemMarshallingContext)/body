{
  context.startSubsystemElement(InfinispanSchema.CURRENT.getNamespaceUri(),false);
  ModelNode model=context.getModelNode();
  if (model.isDefined()) {
    if (model.hasDefined(CacheContainerResourceDefinition.WILDCARD_PATH.getKey())) {
      for (      Property entry : model.get(CacheContainerResourceDefinition.WILDCARD_PATH.getKey()).asPropertyList()) {
        String containerName=entry.getName();
        ModelNode container=entry.getValue();
        writer.writeStartElement(XMLElement.CACHE_CONTAINER.getLocalName());
        writer.writeAttribute(XMLAttribute.NAME.getLocalName(),containerName);
        writeAttributes(writer,container,EnumSet.allOf(CacheContainerResourceDefinition.Attribute.class));
        writeAttributes(writer,container,EnumSet.allOf(CacheContainerResourceDefinition.ExecutorAttribute.class));
        if (container.hasDefined(JGroupsTransportResourceDefinition.PATH.getKeyValuePair())) {
          writer.writeStartElement(XMLElement.TRANSPORT.getLocalName());
          ModelNode transport=container.get(JGroupsTransportResourceDefinition.PATH.getKeyValuePair());
          writeAttributes(writer,transport,EnumSet.allOf(JGroupsTransportResourceDefinition.Attribute.class));
          writeAttributes(writer,transport,EnumSet.allOf(JGroupsTransportResourceDefinition.ExecutorAttribute.class));
          writer.writeEndElement();
        }
        if (container.hasDefined(ThreadPoolResourceDefinition.WILDCARD_PATH.getKey())) {
          writeThreadPoolElements(XMLElement.ASYNC_OPERATIONS_THREAD_POOL,ThreadPoolResourceDefinition.ASYNC_OPERATIONS,writer,container);
          writeThreadPoolElements(XMLElement.LISTENER_THREAD_POOL,ThreadPoolResourceDefinition.LISTENER,writer,container);
          writeThreadPoolElements(XMLElement.PERSISTENCE_THREAD_POOL,ThreadPoolResourceDefinition.PERSISTENCE,writer,container);
          writeThreadPoolElements(XMLElement.STATE_TRANSFER_THREAD_POOL,ThreadPoolResourceDefinition.STATE_TRANSFER,writer,container);
          writeThreadPoolElements(XMLElement.TRANSPORT_THREAD_POOL,ThreadPoolResourceDefinition.TRANSPORT,writer,container);
          writeScheduledThreadPoolElements(XMLElement.EXPIRATION_THREAD_POOL,ScheduledThreadPoolResourceDefinition.EXPIRATION,writer,container);
        }
        if (container.hasDefined(LocalCacheResourceDefinition.WILDCARD_PATH.getKey())) {
          for (          Property property : container.get(LocalCacheResourceDefinition.WILDCARD_PATH.getKey()).asPropertyList()) {
            ModelNode cache=property.getValue();
            writer.writeStartElement(XMLElement.LOCAL_CACHE.getLocalName());
            writeCacheAttributes(writer,property.getName(),cache);
            writeCacheElements(writer,cache);
            writer.writeEndElement();
          }
        }
        if (container.hasDefined(InvalidationCacheResourceDefinition.WILDCARD_PATH.getKey())) {
          for (          Property property : container.get(InvalidationCacheResourceDefinition.WILDCARD_PATH.getKey()).asPropertyList()) {
            ModelNode cache=property.getValue();
            writer.writeStartElement(XMLElement.INVALIDATION_CACHE.getLocalName());
            writeClusteredCacheAttributes(writer,property.getName(),cache);
            writeCacheElements(writer,cache);
            writer.writeEndElement();
          }
        }
        if (container.hasDefined(ReplicatedCacheResourceDefinition.WILDCARD_PATH.getKey())) {
          for (          Property property : container.get(ReplicatedCacheResourceDefinition.WILDCARD_PATH.getKey()).asPropertyList()) {
            ModelNode cache=property.getValue();
            writer.writeStartElement(XMLElement.REPLICATED_CACHE.getLocalName());
            writeClusteredCacheAttributes(writer,property.getName(),cache);
            writeCacheElements(writer,cache);
            writer.writeEndElement();
          }
        }
        if (container.hasDefined(DistributedCacheResourceDefinition.WILDCARD_PATH.getKey())) {
          for (          Property property : container.get(DistributedCacheResourceDefinition.WILDCARD_PATH.getKey()).asPropertyList()) {
            ModelNode cache=property.getValue();
            writer.writeStartElement(XMLElement.DISTRIBUTED_CACHE.getLocalName());
            writeClusteredCacheAttributes(writer,property.getName(),cache);
            writeAttributes(writer,cache,EnumSet.allOf(DistributedCacheResourceDefinition.Attribute.class));
            writeCacheElements(writer,cache);
            writer.writeEndElement();
          }
        }
        writer.writeEndElement();
      }
    }
  }
  writer.writeEndElement();
}
