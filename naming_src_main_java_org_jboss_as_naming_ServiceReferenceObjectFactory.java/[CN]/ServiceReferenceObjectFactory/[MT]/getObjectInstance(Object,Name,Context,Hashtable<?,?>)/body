{
  final Reference reference=(Reference)obj;
  final ServiceNameRefAdr nameAdr=(ServiceNameRefAdr)reference.get("srof");
  if (nameAdr == null) {
    throw new NamingException("Invalid context reference.  Not a 'srof' reference.");
  }
  final ServiceName serviceName=(ServiceName)nameAdr.getContent();
  final ServiceController<?> controller;
  try {
    controller=serviceRegistry.getRequiredService(serviceName);
  }
 catch (  ServiceNotFoundException e) {
    throw new NamingException("Could not resolve service " + serviceName);
  }
  ServiceReferenceListener listener=new ServiceReferenceListener();
  controller.addListener(listener);
synchronized (listener) {
    while (!listener.finished) {
      try {
        listener.wait();
      }
 catch (      InterruptedException e) {
        throw new NamingException("Thread interrupted while retrieving service reference for service " + serviceName);
      }
    }
  }
switch (listener.getState()) {
case UP:
    return getObjectInstance(listener.getValue(),obj,name,nameCtx,environment);
case START_FAILED:
  throw new NamingException("Could not resolve service reference to " + serviceName + " in factory "+ getClass().getName()+ ". Service was in state START_FAILED.");
case REMOVED:
throw new NamingException("Could not resolve service reference to " + serviceName + " in factory "+ getClass().getName()+ ". Service was in state START_FAILED.");
}
throw new NamingException("Could not resolve service reference to " + serviceName + " in factory "+ getClass().getName()+ ". This is a bug in ServiceReferenceObjectFactory. State was"+ listener.getState());
}
