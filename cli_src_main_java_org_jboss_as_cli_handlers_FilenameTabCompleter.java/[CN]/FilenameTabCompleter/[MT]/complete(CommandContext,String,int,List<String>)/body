{
  if (cursor > 0 && cursor <= buffer.length()) {
    buffer=buffer.substring(cursor);
  }
  String translated;
  if (replaceSeparator) {
    translated=buffer.replace('/',File.separatorChar);
  }
 else {
    translated=buffer;
  }
  if (translated.startsWith("~" + File.separator)) {
    translated=System.getProperty("user.home") + translated.substring(1);
  }
 else   if (translated.startsWith("~")) {
    translated=new File(System.getProperty("user.home")).getParentFile().getAbsolutePath();
  }
 else   if (!(translated.startsWith(File.separator))) {
    translated=new File("").getAbsolutePath() + File.separator + translated;
  }
  final File f=new File(translated);
  final File dir;
  if (translated.endsWith(File.separator)) {
    dir=f;
  }
 else {
    dir=f.getParentFile();
  }
  final File[] entries=(dir == null) ? new File[0] : dir.listFiles();
  int result=matchFiles(buffer,translated,entries,candidates);
  if (result == -1) {
    return -1;
  }
  int correction=0;
  if (buffer.length() > 0) {
    final int lastSeparator=buffer.lastIndexOf(SEPARATOR);
    if (lastSeparator > 0) {
      final String path=buffer.substring(0,lastSeparator);
      final String escaped=Util.escapeString(path,ESCAPE_SELECTOR);
      correction=escaped.length() - path.length();
    }
  }
  if (candidates.size() == 1) {
    candidates.set(0,Util.escapeString(candidates.get(0),ESCAPE_SELECTOR));
  }
 else {
    Util.sortAndEscape(candidates,ESCAPE_SELECTOR);
  }
  return cursor + result + correction;
}
