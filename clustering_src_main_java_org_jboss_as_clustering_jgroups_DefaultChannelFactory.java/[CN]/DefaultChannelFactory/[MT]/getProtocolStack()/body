{
  List<org.jgroups.conf.ProtocolConfiguration> configs=new ArrayList<org.jgroups.conf.ProtocolConfiguration>(this.configuration.getProtocols().size() + 1);
  TransportConfiguration transport=this.configuration.getTransport();
  org.jgroups.conf.ProtocolConfiguration config=this.createProtocol(this.configuration.getTransport());
  Map<String,String> properties=config.getProperties();
  if (transport.isShared() && !transport.getProperties().containsKey(Global.SINGLETON_NAME)) {
    properties.put(Global.SINGLETON_NAME,this.name);
  }
  SocketBinding socketBinding=transport.getSocketBinding();
  if (socketBinding != null) {
    properties.put("bind_addr",socketBinding.getSocketAddress().getAddress().getHostAddress());
    this.configureServerSocket(config,"bind_port",socketBinding);
    this.configureMulticastSocket(config,"mcast_addr","mcast_port",socketBinding);
  }
  SocketBinding diagnosticsSocketBinding=transport.getDiagnosticsSocketBinding();
  boolean diagnostics=(diagnosticsSocketBinding != null);
  properties.put("enable_diagnostics",String.valueOf(diagnostics));
  if (diagnostics) {
    this.configureMulticastSocket(config,"diagnostics_addr","diagnostics_port",diagnosticsSocketBinding);
  }
  configs.add(config);
  for (  ProtocolConfiguration protocol : this.configuration.getProtocols()) {
    config=this.createProtocol(protocol);
    socketBinding=protocol.getSocketBinding();
    if (socketBinding != null) {
      this.configureServerSocket(config,"start_port",socketBinding);
      this.configureMulticastSocket(config,"mcast_addr","mcast_port",socketBinding);
    }
    configs.add(config);
  }
  return configs;
}
