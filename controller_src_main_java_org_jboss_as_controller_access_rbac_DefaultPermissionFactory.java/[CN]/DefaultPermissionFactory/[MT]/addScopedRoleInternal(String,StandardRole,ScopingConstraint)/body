{
  ManagementPermissionCollection baseCollection=permissionsByRole.get(getOfficialForm(base));
  int constraintIndex=getConstraintIndex(scopingConstraint.getFactory());
  Map<Action.ActionEffect,ManagementPermission> monitorPermissions=new HashMap<Action.ActionEffect,ManagementPermission>();
  ManagementPermissionCollection monitorCollection=permissionsByRole.get(getOfficialForm(StandardRole.MONITOR));
  Enumeration<Permission> monitorEnumeration=monitorCollection.elements();
  while (monitorEnumeration.hasMoreElements()) {
    ManagementPermission monitorPerm=(ManagementPermission)monitorEnumeration.nextElement();
    monitorPermissions.put(monitorPerm.getActionEffect(),monitorPerm);
  }
  ManagementPermissionCollection scopedPermissions=null;
  Enumeration<Permission> permissionEnumeration=baseCollection.elements();
  while (permissionEnumeration.hasMoreElements()) {
    ManagementPermission basePerm=(ManagementPermission)permissionEnumeration.nextElement();
    Action.ActionEffect actionEffect=basePerm.getActionEffect();
    CombinationManagementPermission combinedPermission=new CombinationManagementPermission(CombinationPolicy.PERMISSIVE,actionEffect);
    if (scopedPermissions == null) {
      scopedPermissions=(ManagementPermissionCollection)combinedPermission.newPermissionCollection();
    }
    ManagementPermission scopedPerm=basePerm.createScopedPermission(scopingConstraint.getStandardConstraint(),constraintIndex);
    combinedPermission.addUnderlyingPermission(scopedPerm);
    ManagementPermission monitorPerm=monitorPermissions.get(actionEffect);
    if (monitorPerm != null) {
      combinedPermission.addUnderlyingPermission(monitorPerm.createScopedPermission(scopingConstraint.getOutofScopeReadConstraint(),constraintIndex));
    }
    scopedPermissions.add(combinedPermission);
  }
  permissionsByRole.put(officialForm,scopedPermissions);
}
