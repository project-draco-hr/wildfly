{
  final DeploymentUnit deploymentUnit=context.getDeploymentUnit();
  final String topLevelName;
  if (!RequestControllerActivationMarker.isRequestControllerEnabled(deploymentUnit)) {
    return;
  }
  if (deploymentUnit.getParent() == null) {
    ControlPointService.install(context.getServiceTarget(),deploymentUnit.getName(),ENTRY_POINT_NAME);
    topLevelName=deploymentUnit.getName();
  }
 else {
    topLevelName=deploymentUnit.getParent().getName();
  }
  for (  ComponentDescription component : deploymentUnit.getAttachment(Attachments.EE_MODULE_DESCRIPTION).getComponentDescriptions()) {
    if (component instanceof EJBComponentDescription) {
      component.getConfigurators().add(new ComponentConfigurator(){
        @Override public void configure(        DeploymentPhaseContext context,        ComponentDescription description,        ComponentConfiguration configuration){
          EjbRemoteSuspendInterceptor interceptor=null;
          ImmediateInterceptorFactory factory=null;
          for (          ViewConfiguration view : configuration.getViews()) {
            EJBViewConfiguration ejbView=(EJBViewConfiguration)view;
            if (INTERFACES.contains(ejbView.getMethodIntf())) {
              if (factory == null) {
                interceptor=new EjbRemoteSuspendInterceptor();
                factory=new ImmediateInterceptorFactory(interceptor);
              }
              view.addViewInterceptor(factory,InterceptorOrder.View.SHUTDOWN_INTERCEPTOR);
            }
          }
          if (interceptor != null) {
            configuration.getCreateDependencies().add(new DependencyConfigurator<EJBComponentCreateService>(){
              @Override public void configureDependency(              ServiceBuilder<?> serviceBuilder,              EJBComponentCreateService service){
                serviceBuilder.addDependency(ControlPointService.serviceName(topLevelName,ENTRY_POINT_NAME),ControlPoint.class,service.getControlPointInjector());
              }
            }
);
          }
        }
      }
);
    }
  }
}
