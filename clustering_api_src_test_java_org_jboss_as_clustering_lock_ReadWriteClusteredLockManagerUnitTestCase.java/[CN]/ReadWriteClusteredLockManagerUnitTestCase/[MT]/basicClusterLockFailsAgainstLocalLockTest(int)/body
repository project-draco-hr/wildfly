{
  int viewPos=viewSize == 1 ? 0 : 1;
  TesteeSet<NonGloballyExclusiveClusterLockSupport> testeeSet=getTesteeSet(node1,viewPos,viewSize);
  NonGloballyExclusiveClusterLockSupport testee=testeeSet.impl;
  GroupRpcDispatcher rpcDispatcher=testee.getGroupRpcDispatcher();
  LocalLockHandler handler=testee.getLocalHandler();
  List<RemoteLockResponse> rspList=new ArrayList<RemoteLockResponse>();
  for (int i=0; i < viewSize - 1; i++) {
    rspList.add(new RemoteLockResponse(null,RemoteLockResponse.Flag.OK));
  }
  when(rpcDispatcher.getMethodCallTimeout()).thenReturn(60000l);
  when(rpcDispatcher.<RemoteLockResponse>callMethodOnCluster(eq("test"),eq("remoteLock"),eqLockParams(node1,2000000),aryEq(AbstractClusterLockSupport.REMOTE_LOCK_TYPES),eq(true),eq(NULL_FILTER),anyInt(),eq(false))).thenReturn(rspList);
  doThrow(new TimeoutException(node1)).when(handler).lockFromCluster(eq("test"),eq(node1),anyLong());
  when((List<Object>)rpcDispatcher.callMethodOnCluster(eq("test"),eq("releaseRemoteLock"),aryEq(new Object[]{"test",node1}),aryEq(AbstractClusterLockSupport.RELEASE_REMOTE_LOCK_TYPES),eq(true))).thenReturn(new ArrayList<Object>());
  assertFalse(testee.lock("test",10));
}
