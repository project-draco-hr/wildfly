{
  final String lookup=NamingBindingResourceDefinition.LOOKUP.resolveModelAttribute(context,model).asString();
  final ServiceTarget serviceTarget=context.getServiceTarget();
  final ContextNames.BindInfo bindInfo=ContextNames.bindInfoFor(name);
  final BinderService binderService=new BinderService(name);
  binderService.getManagedObjectInjector().inject(new ContextListAndJndiViewManagedReferenceFactory(){
    @Override public ManagedReference getReference(){
      try {
        final Object value=new InitialContext().lookup(lookup);
        return new ImmediateManagedReference(value);
      }
 catch (      Exception e) {
        throw new RuntimeException(e);
      }
    }
    @Override public String getInstanceClassName(){
      final Object value=getReference().getInstance();
      return value != null ? value.getClass().getName() : ContextListManagedReferenceFactory.DEFAULT_INSTANCE_CLASS_NAME;
    }
    @Override public String getJndiViewInstanceValue(){
      return String.valueOf(getReference().getInstance());
    }
  }
);
  ServiceBuilder<ManagedReferenceFactory> builder=serviceTarget.addService(bindInfo.getBinderServiceName(),binderService).addDependency(bindInfo.getParentContextServiceName(),ServiceBasedNamingStore.class,binderService.getNamingStoreInjector());
  if (verificationHandler != null) {
    builder.addListener(verificationHandler);
  }
  if (newControllers != null) {
    newControllers.add(builder.install());
  }
 else {
    builder.install();
  }
}
