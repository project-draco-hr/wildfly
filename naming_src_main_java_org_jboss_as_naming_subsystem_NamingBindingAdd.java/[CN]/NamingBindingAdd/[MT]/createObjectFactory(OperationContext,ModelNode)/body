{
  final ModuleIdentifier moduleID=ModuleIdentifier.fromString(NamingBindingResourceDefinition.MODULE.resolveModelAttribute(context,model).asString());
  final String className=NamingBindingResourceDefinition.CLASS.resolveModelAttribute(context,model).asString();
  final Module module;
  try {
    module=Module.getBootModuleLoader().loadModule(moduleID);
  }
 catch (  ModuleLoadException e) {
    throw NamingLogger.ROOT_LOGGER.couldNotLoadModule(moduleID);
  }
  final ObjectFactory objectFactoryClassInstance;
  final ClassLoader cl=WildFlySecurityManager.getCurrentContextClassLoaderPrivileged();
  try {
    WildFlySecurityManager.setCurrentContextClassLoaderPrivileged(module.getClassLoader());
    final Class<?> clazz=module.getClassLoader().loadClass(className);
    objectFactoryClassInstance=(ObjectFactory)clazz.newInstance();
  }
 catch (  ClassNotFoundException e) {
    throw NamingLogger.ROOT_LOGGER.couldNotLoadClassFromModule(className,moduleID);
  }
catch (  InstantiationException e) {
    throw NamingLogger.ROOT_LOGGER.couldNotInstantiateClassInstanceFromModule(className,moduleID);
  }
catch (  IllegalAccessException e) {
    throw NamingLogger.ROOT_LOGGER.couldNotInstantiateClassInstanceFromModule(className,moduleID);
  }
catch (  ClassCastException e) {
    throw NamingLogger.ROOT_LOGGER.notAnInstanceOfObjectFactory(className,moduleID);
  }
 finally {
    WildFlySecurityManager.setCurrentContextClassLoaderPrivileged(cl);
  }
  return objectFactoryClassInstance;
}
