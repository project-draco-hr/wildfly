{
  final ModuleIdentifier moduleID=ModuleIdentifier.fromString(NamingBindingResourceDefinition.MODULE.resolveModelAttribute(context,model).asString());
  final String className=NamingBindingResourceDefinition.CLASS.resolveModelAttribute(context,model).asString();
  final Module module;
  try {
    module=Module.getBootModuleLoader().loadModule(moduleID);
  }
 catch (  ModuleLoadException e) {
    throw NamingMessages.MESSAGES.couldNotLoadModule(moduleID);
  }
  final ObjectFactory objectFactoryClassInstance;
  final ClassLoader cl=SecurityActions.getContextClassLoader();
  try {
    SecurityActions.setContextClassLoader(module.getClassLoader());
    final Class<?> clazz=module.getClassLoader().loadClass(className);
    objectFactoryClassInstance=(ObjectFactory)clazz.newInstance();
  }
 catch (  ClassNotFoundException e) {
    throw NamingMessages.MESSAGES.couldNotLoadClassFromModule(className,moduleID);
  }
catch (  InstantiationException e) {
    throw NamingMessages.MESSAGES.couldNotInstantiateClassInstanceFromModule(className,moduleID);
  }
catch (  IllegalAccessException e) {
    throw NamingMessages.MESSAGES.couldNotInstantiateClassInstanceFromModule(className,moduleID);
  }
catch (  ClassCastException e) {
    throw NamingMessages.MESSAGES.notAnInstanceOfObjectFactory(className,moduleID);
  }
 finally {
    SecurityActions.setContextClassLoader(cl);
  }
  final ServiceTarget serviceTarget=context.getServiceTarget();
  final ContextNames.BindInfo bindInfo=ContextNames.bindInfoFor(name);
  final Hashtable<String,String> environment=getObjectFactoryEnvironment(context,model);
  final BinderService binderService=new BinderService(name,objectFactoryClassInstance);
  binderService.getManagedObjectInjector().inject(new ManagedReferenceFactory(){
    @Override public ManagedReference getReference(){
      try {
        final Object value=objectFactoryClassInstance.getObjectInstance(name,null,null,environment);
        return new ValueManagedReference(new ImmediateValue<Object>(value));
      }
 catch (      Exception e) {
        throw new RuntimeException(e);
      }
    }
  }
);
  ServiceBuilder<ManagedReferenceFactory> builder=serviceTarget.addService(bindInfo.getBinderServiceName(),binderService).addDependency(bindInfo.getParentContextServiceName(),ServiceBasedNamingStore.class,binderService.getNamingStoreInjector());
  if (verificationHandler != null) {
    builder.addListener(verificationHandler);
  }
  if (newControllers != null) {
    newControllers.add(builder.install());
  }
 else {
    builder.install();
  }
}
