{
  Class<?> loaded=findLoadedClass(name);
  if (loaded != null) {
    return loaded;
  }
  if (name.startsWith("javax.")) {
    return Class.forName(name,resolve,delegate);
  }
  InputStream resource=delegate.getResourceAsStream(name.replace('.','/') + ".class");
  if (resource == null) {
    throw new ClassNotFoundException(name);
  }
  final int lastIdx=name.lastIndexOf('.');
  if (lastIdx != -1) {
    final String packageName=name.substring(0,lastIdx);
synchronized (this) {
      Package pkg=findLoadedPackage(packageName);
      if (pkg == null) {
        Manifest manifest=readManifestFile();
        if (manifest != null) {
          final Attributes mainAttribute=manifest.getMainAttributes();
          final Attributes entryAttribute=manifest.getAttributes(packageName);
          URL url="true".equals(getDefinedAttribute(Attributes.Name.SEALED,entryAttribute,mainAttribute)) ? delegate.getResource(name.replace('.','/') + ".class") : null;
          definePackage(packageName,getDefinedAttribute(Attributes.Name.SPECIFICATION_TITLE,entryAttribute,mainAttribute),getDefinedAttribute(Attributes.Name.SPECIFICATION_VERSION,entryAttribute,mainAttribute),getDefinedAttribute(Attributes.Name.SPECIFICATION_VENDOR,entryAttribute,mainAttribute),getDefinedAttribute(Attributes.Name.IMPLEMENTATION_TITLE,entryAttribute,mainAttribute),getDefinedAttribute(Attributes.Name.IMPLEMENTATION_VERSION,entryAttribute,mainAttribute),getDefinedAttribute(Attributes.Name.IMPLEMENTATION_VENDOR,entryAttribute,mainAttribute),url);
        }
 else {
          definePackage(packageName,null,null,null,null,null,null,null);
        }
      }
    }
  }
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  try {
    byte[] buffer=new byte[1024];
    for (int i=0; (i=resource.read(buffer,0,buffer.length)) != -1; ) {
      baos.write(buffer,0,i);
    }
    buffer=baos.toByteArray();
    return defineClass(name,buffer,0,buffer.length);
  }
 catch (  IOException e) {
    throw new ClassNotFoundException(name,e);
  }
 finally {
    try {
      resource.close();
    }
 catch (    IOException e) {
    }
  }
}
