{
  ClassInfo klass=beanClass;
  while (klass != null) {
    Map<DotName,List<AnnotationInstance>> annotationsOnBean=klass.annotations();
    if (annotationsOnBean == null || annotationsOnBean.isEmpty()) {
      klass=getSuperClass(klass,index);
      continue;
    }
    final List<AnnotationInstance> rolesAllowedAnnotations=annotationsOnBean.get(ROLES_ALLOWED_DOT_NAME);
    if (rolesAllowedAnnotations == null || rolesAllowedAnnotations.isEmpty()) {
      klass=getSuperClass(klass,index);
      continue;
    }
    for (    final AnnotationInstance rolesAllowedAnnotation : rolesAllowedAnnotations) {
      final AnnotationTarget target=rolesAllowedAnnotation.target();
      final String[] roles=rolesAllowedAnnotation.value().asStringArray();
      if (target instanceof ClassInfo) {
      }
 else       if (target instanceof MethodInfo) {
      }
    }
    klass=this.getSuperClass(klass,index);
  }
}
