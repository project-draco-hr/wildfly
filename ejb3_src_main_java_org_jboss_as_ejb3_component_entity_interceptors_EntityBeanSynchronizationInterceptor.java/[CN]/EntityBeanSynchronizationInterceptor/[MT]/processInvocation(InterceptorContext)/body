{
  final EntityBeanComponent component=getComponent(context,EntityBeanComponent.class);
  final EntityBeanComponentInstance instance=(EntityBeanComponentInstance)context.getPrivateData(ComponentInstance.class);
  if (instance.getPrimaryKey() == null) {
    return context.proceed();
  }
  final TransactionSynchronizationRegistry transactionSynchronizationRegistry=component.getTransactionSynchronizationRegistry();
  if (log.isTraceEnabled()) {
    log.trace("Trying to acquire lock: " + lock + " for entity bean "+ instance+ " during invocation: "+ context);
  }
  lock.pushOwner(getLockOwner(transactionSynchronizationRegistry));
  try {
    lock.lock();
synchronized (lock) {
      if (log.isTraceEnabled()) {
        log.trace("Acquired lock: " + lock + " for entity bean instance: "+ instance+ " during invocation: "+ context);
      }
      Object currentTransactionKey=null;
      try {
        currentTransactionKey=transactionSynchronizationRegistry.getTransactionKey();
        if (!instance.isSynchronizeRegistered()) {
          component.getCache().reference(instance);
          if (currentTransactionKey != null) {
            final Synchronization entitySynchronization=new EntityBeanSynchronization(instance);
            transactionSynchronizationRegistry.registerInterposedSynchronization(entitySynchronization);
            if (log.isTraceEnabled()) {
              log.trace("Registered tx synchronization: " + entitySynchronization + " for tx: "+ currentTransactionKey+ " associated with entity component instance: "+ instance);
            }
          }
          instance.setSynchronizationRegistered(true);
        }
        return context.proceed();
      }
  finally {
        if (currentTransactionKey == null) {
          instance.store();
          releaseInstance(instance,true);
        }
      }
    }
  }
  finally {
    lock.popOwner();
  }
}
