{
  try {
    CurrentSynchronizationCallback.set(CurrentSynchronizationCallback.CallbackType.BEFORE_COMPLETION);
synchronized (threadLock) {
      try {
        if (!componentInstance.isRemoved() && !componentInstance.isDiscarded()) {
          componentInstance.store();
        }
      }
 catch (      Throwable t) {
        lock.pushOwner(lockOwner);
        try {
          handleThrowableInTxSync(componentInstance,t);
        }
  finally {
          lock.popOwner();
        }
      }
 finally {
        int status=Status.STATUS_MARKED_ROLLBACK;
        try {
          status=this.componentInstance.getComponent().getTransactionManager().getStatus();
        }
 catch (        Exception e) {
          EJB3_LOGGER.getTxManagerStatusFailed(e);
        }
        lock.pushOwner(lockOwner);
        try {
          final boolean success=status != Status.STATUS_MARKED_ROLLBACK && status != Status.STATUS_ROLLEDBACK && status != Status.STATUS_ROLLING_BACK;
          releaseInstance(componentInstance,success);
        }
 catch (        Exception e) {
          EJB3_LOGGER.exceptionReleasingEntity(e);
        }
 finally {
          lock.popOwner();
        }
      }
    }
  }
  finally {
    CurrentSynchronizationCallback.clear();
  }
}
