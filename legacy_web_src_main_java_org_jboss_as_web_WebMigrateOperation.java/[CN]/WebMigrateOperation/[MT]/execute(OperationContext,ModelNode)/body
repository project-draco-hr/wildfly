{
  if (!describe && context.getRunningMode() != RunningMode.ADMIN_ONLY) {
    throw WebLogger.ROOT_LOGGER.migrateOperationAllowedOnlyInAdminOnly();
  }
  final List<String> warnings=new ArrayList<>();
  final ModelNode legacyModelAddOps=new ModelNode();
  final Map<PathAddress,ModelNode> sortedMigrationOperations=new TreeMap<>(new Comparator<PathAddress>(){
    @Override public int compare(    PathAddress o1,    PathAddress o2){
      final int compare=Integer.compare(o1.size(),o2.size());
      if (compare != 0) {
        return compare;
      }
      return o1.toString().compareTo(o2.toString());
    }
  }
);
  describeLegacyWebResources(context,legacyModelAddOps);
  addExtension(context,sortedMigrationOperations,describe,UNDERTOW_EXTENSION);
  addExtension(context,sortedMigrationOperations,describe,IO_EXTENSION);
  context.addStep(new OperationStepHandler(){
    @Override public void execute(    OperationContext context,    ModelNode operation) throws OperationFailedException {
      addDefaultResources(sortedMigrationOperations,legacyModelAddOps,warnings);
      createIoSubsystem(context,sortedMigrationOperations);
      createWelcomeContentHandler(sortedMigrationOperations);
      transformResources(context,legacyModelAddOps,sortedMigrationOperations,warnings);
      LinkedHashMap<PathAddress,ModelNode> orderedMigrationOperations=new LinkedHashMap<>(sortedMigrationOperations);
      removeWebSubsystem(orderedMigrationOperations,context.getProcessType() == ProcessType.STANDALONE_SERVER);
      fixAddressesForDomainMode(pathAddress(operation.get(ADDRESS)),orderedMigrationOperations);
      if (describe) {
        final Collection<ModelNode> values=orderedMigrationOperations.values();
        ModelNode result=new ModelNode();
        if (!warnings.isEmpty()) {
          ModelNode rw=new ModelNode().setEmptyList();
          for (          String warning : warnings) {
            rw.add(warning);
          }
          result.get(MIGRATION_WARNINGS).set(rw);
        }
        result.get(MIGRATION_OPERATIONS).set(values);
        context.getResult().set(result);
      }
 else {
        final Map<PathAddress,ModelNode> migrateOpResponses=migrateSubsystems(context,orderedMigrationOperations);
        context.completeStep(new OperationContext.ResultHandler(){
          @Override public void handleResult(          OperationContext.ResultAction resultAction,          OperationContext context,          ModelNode operation){
            final ModelNode result=new ModelNode();
            ModelNode rw=new ModelNode().setEmptyList();
            for (            String warning : warnings) {
              rw.add(warning);
            }
            result.get(MIGRATION_WARNINGS).set(rw);
            if (resultAction == OperationContext.ResultAction.ROLLBACK) {
              for (              Map.Entry<PathAddress,ModelNode> entry : migrateOpResponses.entrySet()) {
                if (entry.getValue().hasDefined(FAILURE_DESCRIPTION)) {
                  ModelNode desc=new ModelNode();
                  desc.get(OP).set(orderedMigrationOperations.get(entry.getKey()));
                  desc.get(RESULT).set(entry.getValue());
                  result.get(MIGRATION_ERROR).set(desc);
                  break;
                }
              }
              context.getFailureDescription().set(new ModelNode(WebLogger.ROOT_LOGGER.migrationFailed()));
            }
            context.getResult().set(result);
          }
        }
);
      }
    }
  }
,MODEL);
}
