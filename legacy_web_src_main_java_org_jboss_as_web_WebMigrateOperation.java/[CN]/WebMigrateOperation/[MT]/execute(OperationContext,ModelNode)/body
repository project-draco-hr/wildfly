{
  if (!describe && context.getRunningMode() != RunningMode.ADMIN_ONLY) {
    throw WebLogger.ROOT_LOGGER.migrateOperationAllowedOnlyInAdminOnly();
  }
  final ModelNode legacyModelAddOps=new ModelNode();
  final Map<PathAddress,ModelNode> migrationOperations=new TreeMap<>(new Comparator<PathAddress>(){
    @Override public int compare(    PathAddress o1,    PathAddress o2){
      final int compare=Integer.compare(o1.size(),o2.size());
      if (compare != 0) {
        return compare;
      }
      return o1.toString().compareTo(o2.toString());
    }
  }
);
  describeLegacyWebResources(context,legacyModelAddOps);
  addExtension(context,migrationOperations,describe,UNDERTOW_EXTENSION);
  addExtension(context,migrationOperations,describe,IO_EXTENSION);
  context.addStep(new OperationStepHandler(){
    @Override public void execute(    OperationContext context,    ModelNode operation) throws OperationFailedException {
      addDefaultResources(migrationOperations,legacyModelAddOps);
      createIoSubsystem(context,migrationOperations);
      createWelcomeContentHandler(migrationOperations);
      transformResources(context,legacyModelAddOps,migrationOperations);
      removeWebSubsystem(migrationOperations);
      fixAddressesForDomainMode(pathAddress(operation.get(ADDRESS)),migrationOperations);
      if (describe) {
        context.getResult().set(migrationOperations.values());
      }
 else {
        migrateSubsystems(context,migrationOperations);
      }
    }
  }
,MODEL);
}
