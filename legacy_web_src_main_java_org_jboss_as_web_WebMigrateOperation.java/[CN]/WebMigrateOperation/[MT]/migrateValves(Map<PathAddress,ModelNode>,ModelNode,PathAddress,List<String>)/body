{
  if (newAddOp.hasDefined(WebValveDefinition.CLASS_NAME.getName())) {
    String valveClassName=newAddOp.get(WebValveDefinition.CLASS_NAME.getName()).asString();
    String valveName=address.getLastElement().getValue();
switch (valveClassName) {
case "org.apache.catalina.valves.CrawlerSessionManagerValve":
      PathAddress crawlerAddress=pathAddress(pathElement(SUBSYSTEM,UndertowExtension.SUBSYSTEM_NAME),pathElement(Constants.SERVLET_CONTAINER,"default"),pathElement(Constants.SETTING,Constants.CRAWLER_SESSION_MANAGEMENT));
    ModelNode crawlerAdd=createAddOperation(crawlerAddress);
  if (newAddOp.hasDefined(WebValveDefinition.PARAMS.getName())) {
    ModelNode params=newAddOp.get(WebValveDefinition.PARAMS.getName());
    if (params.hasDefined("crawlerUserAgents")) {
      crawlerAdd.get(Constants.USER_AGENTS).set(params.get("crawlerUserAgents"));
    }
    if (params.hasDefined("sessionInactiveInterval")) {
      crawlerAdd.get(Constants.SESSION_TIMEOUT).set(params.get("sessionInactiveInterval"));
    }
  }
newAddOperations.put(crawlerAddress,crawlerAdd);
break;
case "org.apache.catalina.valves.RequestDumperValve":
newAddOperations.putIfAbsent(pathAddress(UndertowExtension.SUBSYSTEM_PATH,PATH_FILTERS),createAddOperation(pathAddress(UndertowExtension.SUBSYSTEM_PATH,PATH_FILTERS)));
PathAddress filterAddress=pathAddress(UndertowExtension.SUBSYSTEM_PATH,PATH_FILTERS,pathElement(ExpressionFilterDefinition.INSTANCE.getPathElement().getKey(),valveName));
ModelNode filterAdd=createAddOperation(filterAddress);
filterAdd.get(ExpressionFilterDefinition.EXPRESSION.getName()).set("dump-request");
newAddOperations.put(filterAddress,filterAdd);
break;
case "org.apache.catalina.valves.AccessLogValve":
newAddOp.get(WebAccessLogDefinition.EXTENDED.getName()).set(false);
migrateAccessLogValve(newAddOperations,newAddOp,valveName,warnings);
break;
case "org.apache.catalina.valves.ExtendedAccessLogValve":
newAddOp.get(WebAccessLogDefinition.EXTENDED.getName()).set(true);
migrateAccessLogValve(newAddOperations,newAddOp,valveName,warnings);
break;
case "org.apache.catalina.valves.RemoteHostValve":
createAccesControlExpressionFilter(newAddOperations,warnings,valveName,"%h",newAddOp);
break;
case "org.apache.catalina.valves.RemoteAddrValve":
createAccesControlExpressionFilter(newAddOperations,warnings,valveName,"%a",newAddOp);
break;
case "org.apache.catalina.valves.RemoteIpValve":
if (newAddOp.hasDefined(WebValveDefinition.PARAMS.getName())) {
StringBuilder expression=new StringBuilder();
ModelNode params=newAddOp.get(WebValveDefinition.PARAMS.getName());
if (params.hasDefined("remoteIpHeader") && !X_FORWARDED_FOR_STRING.equalsIgnoreCase(params.get("remoteIpHeader").asString())) {
warnings.add(WebLogger.ROOT_LOGGER.couldNotMigrateValveAttribute("remoteIpHeader",valveName));
}
if (params.hasDefined("protocolHeader") && !X_FORWARDED_PROTO_STRING.equalsIgnoreCase(params.get("protocolHeader").asString())) {
warnings.add(WebLogger.ROOT_LOGGER.couldNotMigrateValveAttribute("protocolHeader",valveName));
}
if (params.hasDefined("httpServerPort")) {
warnings.add(WebLogger.ROOT_LOGGER.couldNotMigrateValveAttribute("httpServerPort",valveName));
}
if (params.hasDefined("httpsServerPort")) {
warnings.add(WebLogger.ROOT_LOGGER.couldNotMigrateValveAttribute("httpsServerPort",valveName));
}
boolean trustedProxies=false;
if (params.hasDefined("trustedProxies")) {
expression.append("regexp(pattern=\"").append(params.get("trustedProxies").asString()).append("\", value=%{i, x-forwarded-for}, full-match=true)");
trustedProxies=true;
}
String internalProxies;
if (params.hasDefined("internalProxies")) {
internalProxies=params.get("internalProxies").asString();
}
 else {
internalProxies="10\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}|192\\.168\\.\\d{1,3}\\.\\d{1,3}|169\\.254\\.\\d{1,3}\\.\\d{1,3}|127\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}";
}
if (trustedProxies) {
expression.append(" and ");
}
expression.append("regexp(pattern=\"").append(internalProxies).append("\", value=%{i, x-forwarded-for}, full-match=true)");
expression.append(" -> { proxy-peer-address(); }");
createExpressionFilter(newAddOperations,valveName,expression.toString());
}
break;
default :
warnings.add(WebLogger.ROOT_LOGGER.couldNotMigrateValve(valveName));
break;
}
}
}
