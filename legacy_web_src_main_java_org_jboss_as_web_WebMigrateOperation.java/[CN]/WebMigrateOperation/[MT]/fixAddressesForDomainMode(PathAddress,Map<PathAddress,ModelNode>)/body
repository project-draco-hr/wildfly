{
  int i=0;
  while (i < migrateAddress.size()) {
    if (migrateAddress.getElement(i).equals(WebExtension.SUBSYSTEM_PATH)) {
      break;
    }
    ++i;
  }
  if (i == 0) {
    return;
  }
  PathAddress prefix=migrateAddress.subAddress(0,i);
  Map<PathAddress,ModelNode> old=new HashMap<>(migrationOperations);
  migrationOperations.clear();
  for (  Map.Entry<PathAddress,ModelNode> e : old.entrySet()) {
    if (e.getKey().getElement(0).getKey().equals(SUBSYSTEM)) {
      final PathAddress oldAddress=pathAddress(e.getValue().get(ADDRESS));
      List<PathElement> elements=new ArrayList<>();
      for (      PathElement j : prefix) {
        elements.add(j);
      }
      for (      PathElement j : oldAddress) {
        elements.add(j);
      }
      PathAddress newAddress=pathAddress(elements);
      e.getValue().get(ADDRESS).set(newAddress.toModelNode());
      migrationOperations.put(newAddress,e.getValue());
    }
 else {
      migrationOperations.put(e.getKey(),e.getValue());
    }
  }
}
