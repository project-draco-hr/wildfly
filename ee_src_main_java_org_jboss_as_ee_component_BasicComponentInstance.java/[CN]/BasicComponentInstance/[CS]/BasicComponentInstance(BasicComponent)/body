{
  this.component=component;
  final SimpleInterceptorFactoryContext context=new SimpleInterceptorFactoryContext();
  context.getContextData().put(Component.class,component);
  context.getContextData().put(ComponentInstance.class,this);
  final Interceptor postConstruct=component.getPostConstruct().create(context);
  preDestroy=component.getPreDestroy().create(context);
  @SuppressWarnings("unchecked") final AtomicReference<ManagedReference> referenceReference=(AtomicReference<ManagedReference>)context.getContextData().get(INSTANCE_KEY);
  final InterceptorContext interceptorContext=new InterceptorContext();
  interceptorContext.putPrivateData(Component.class,component);
  interceptorContext.putPrivateData(ComponentInstance.class,this);
  try {
    postConstruct.processInvocation(interceptorContext);
  }
 catch (  Exception e) {
    throw new IllegalStateException("Failed to construct component instance",e);
  }
  final Map<Method,InterceptorFactory> interceptorFactoryMap=component.getInterceptorFactoryMap();
  final IdentityHashMap<Method,Interceptor> interceptorMap=new IdentityHashMap<Method,Interceptor>();
  for (  Method method : interceptorFactoryMap.keySet()) {
    interceptorMap.put(method,interceptorFactoryMap.get(method).create(context));
  }
  methodMap=Collections.unmodifiableMap(interceptorMap);
  instance=referenceReference.get().getInstance();
}
