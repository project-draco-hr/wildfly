{
  boolean jbossCliEnded=false;
  while (reader.hasNext() && jbossCliEnded == false) {
    int tag=reader.nextTag();
    assertExpectedNamespace(reader,expectedNs);
    if (tag == XMLStreamConstants.START_ELEMENT) {
      final String localName=reader.getLocalName();
      if (localName.equals(DEFAULT_CONTROLLER)) {
        readDefaultController(reader,expectedNs,config);
      }
 else       if (localName.equals(HISTORY)) {
        readHistory(reader,expectedNs,config);
      }
 else       if (localName.equals("ssl")) {
        SslConfig sslConfig=new SslConfig();
switch (expectedNs) {
case CLI_1_0:
          readSSLElement_1_0(reader,expectedNs,sslConfig);
        break;
default :
      readSSLElement_1_1(reader,expectedNs,sslConfig);
  }
  config.sslConfig=sslConfig;
}
 else if (localName.equals(VALIDATE_OPERATION_REQUESTS)) {
  config.validateOperationRequests=resolveBoolean(reader.getElementText());
}
 else if (localName.equals(RESOLVE_PARAMETER_VALUES)) {
  config.resolveParameterValues=resolveBoolean(reader.getElementText());
}
 else if (CONNECTION_TIMEOUT.equals(localName)) {
  final String text=reader.getElementText();
  try {
    config.connectionTimeout=Integer.parseInt(text);
  }
 catch (  NumberFormatException e) {
    throw new XMLStreamException("Failed to parse " + JBOSS_CLI + " "+ CONNECTION_TIMEOUT+ " value '"+ text+ "'",e);
  }
}
 else {
  throw new XMLStreamException("Unexpected element: " + localName);
}
}
 else if (tag == XMLStreamConstants.END_ELEMENT) {
final String localName=reader.getLocalName();
if (localName.equals(JBOSS_CLI)) {
  jbossCliEnded=true;
}
}
}
}
