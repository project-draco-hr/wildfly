{
  final CLIVaultReader vaultReader=new CLIVaultReader();
  while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
    assertExpectedNamespace(reader,expectedNs);
    final String localName=reader.getLocalName();
    if ("vault".equals(localName)) {
      final String vaultXml=reader.getAttributeValue(null,"file");
      final String relativeTo=reader.getAttributeValue(null,"relative-to");
      requireNoContent(reader);
      if (vaultXml == null) {
        throw new XMLStreamException("'file' attribute is missing for element 'vault'");
      }
      File parent=null;
      if (relativeTo != null) {
        if (relativeTo.equals("jboss.home.dir")) {
          final String jbossHome=WildFlySecurityManager.getEnvPropertyPrivileged("JBOSS_HOME",null);
          if (jbossHome == null) {
            throw new XMLStreamException("JBOSS_HOME is not set");
          }
          parent=new File(jbossHome);
        }
 else         if (relativeTo.equals("user.home")) {
          final String userHome=WildFlySecurityManager.getPropertyPrivileged("user.home",null);
          if (userHome == null) {
            throw new XMLStreamException("user.home is not set");
          }
          parent=new File(userHome);
        }
 else         if (relativeTo.equals("user.dir")) {
          final String userDir=WildFlySecurityManager.getPropertyPrivileged("user.dir",null);
          if (userDir == null) {
            throw new XMLStreamException("user.dir is not set");
          }
          parent=new File(userDir);
        }
 else {
          throw new XMLStreamException("Unrecognized named path '" + relativeTo + "'");
        }
      }
      final File vaultFile=new File(parent,vaultXml);
      final VaultConfig vaultConfig=VaultConfig.loadExternalFile(vaultFile);
      try {
        vaultReader.init(vaultConfig);
      }
 catch (      GeneralSecurityException e) {
        throw new XMLStreamException("Failed to initialize vault",e);
      }
    }
 else     if ("alias".equals(localName)) {
      config.setAlias(reader.getElementText());
    }
 else     if ("key-store".equals(localName) || "keyStore".equals(localName)) {
      config.setKeyStore(reader.getElementText());
    }
 else     if ("key-store-password".equals(localName) || "keyStorePassword".equals(localName)) {
      config.setKeyStorePassword(getPassword(vaultReader,reader.getElementText()));
    }
 else     if ("key-password".equals(localName) || "keyPassword".equals(localName)) {
      config.setKeyPassword(getPassword(vaultReader,reader.getElementText()));
    }
 else     if ("trust-store".equals(localName) || "trustStore".equals(localName)) {
      config.setTrustStore(reader.getElementText());
    }
 else     if ("trust-store-password".equals(localName) || "trustStorePassword".equals(localName)) {
      config.setTrustStorePassword(getPassword(vaultReader,reader.getElementText()));
    }
 else     if ("modify-trust-store".equals(localName) || "modifyTrustStore".equals(localName)) {
      config.setModifyTrustStore(resolveBoolean(reader.getElementText()));
    }
 else {
      throw new XMLStreamException("Unexpected child of ssl : " + localName);
    }
  }
}
