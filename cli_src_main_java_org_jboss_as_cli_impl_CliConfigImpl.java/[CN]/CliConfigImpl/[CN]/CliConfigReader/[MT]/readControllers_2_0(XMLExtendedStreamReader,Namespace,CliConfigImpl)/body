{
  Map<String,ControllerAddress> aliasedAddresses=new HashMap<String,ControllerAddress>();
  while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
    assertExpectedNamespace(reader,expectedNs);
    final String localName=reader.getLocalName();
    if (CONTROLLER.equals(localName)) {
      String name=null;
      final int attributes=reader.getAttributeCount();
      for (int i=0; i < attributes; i++) {
        String namespace=reader.getAttributeNamespace(i);
        String attrLocalName=reader.getAttributeLocalName(i);
        String value=reader.getAttributeValue(i);
        if (namespace != null && !namespace.equals("")) {
          throw new XMLStreamException("Unexpected attribute '" + namespace + ":"+ attrLocalName+ "'",reader.getLocation());
        }
 else         if (attrLocalName.equals(NAME) && name == null) {
          name=value;
        }
 else {
          throw new XMLStreamException("Unexpected attribute '" + attrLocalName + "'",reader.getLocation());
        }
      }
      if (name == null) {
        throw new XMLStreamException("Missing required attribute 'name'",reader.getLocation());
      }
      aliasedAddresses.put(name,readController(true,reader,expectedNs));
    }
 else {
      throw new XMLStreamException("Unexpected child of " + CONTROLLER + ": "+ localName);
    }
  }
  config.controllerAliases=Collections.unmodifiableMap(aliasedAddresses);
}
