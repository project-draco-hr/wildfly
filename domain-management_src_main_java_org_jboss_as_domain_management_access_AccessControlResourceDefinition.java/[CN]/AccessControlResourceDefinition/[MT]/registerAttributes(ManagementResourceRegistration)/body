{
  super.registerAttributes(resourceRegistration);
  if (isHostController) {
    resourceRegistration.registerReadWriteAttribute(HOST_SCOPED_ROLES,null,new ReloadRequiredWriteAttributeHandler(HOST_SCOPED_ROLES){
      @Override protected boolean applyUpdateToRuntime(      OperationContext context,      ModelNode operation,      String attributeName,      ModelNode resolvedValue,      ModelNode currentValue,      HandbackHolder<Void> voidHandback) throws OperationFailedException {
        return !context.isBooting();
      }
    }
);
  }
 else {
    resourceRegistration.registerReadWriteAttribute(USE_REALM_ROLES,null,new ModelOnlyWriteAttributeHandler(USE_REALM_ROLES));
  }
  if (!isDomain) {
    resourceRegistration.registerReadWriteAttribute(PROVIDER,null,new AccessControlProviderWriteAttributeHander(configurableAuthorizer));
  }
 else {
    resourceRegistration.registerReadWriteAttribute(PROVIDER,null,new ModelOnlyWriteAttributeHandler(PROVIDER));
  }
}
