{
  ModelVersion version_1_1_0=ModelVersion.create(1,1,0);
  KernelServicesBuilder builder=createKernelServicesBuilder(AdditionalInitialization.MANAGEMENT);
  builder.createLegacyKernelServicesBuilder(null,controllerVersion,version_1_1_0).addMavenResourceURL(mavenResourceURLs).dontPersistXml();
  KernelServices mainServices=builder.build();
  Assert.assertTrue(mainServices.isSuccessfulBoot());
  KernelServices legacyServices=mainServices.getLegacyServices(version_1_1_0);
  Assert.assertNotNull(legacyServices);
  Assert.assertTrue(legacyServices.isSuccessfulBoot());
  PathAddress subsystemAddress=PathAddress.pathAddress(PathElement.pathElement(SUBSYSTEM,JGroupsExtension.SUBSYSTEM_NAME));
  ModelTestUtils.checkFailedTransformedBootOperations(mainServices,version_1_1_0,builder.parseXmlResource("subsystem-jgroups-2_0.xml"),new FailedOperationTransformationConfig().addFailedAttribute(subsystemAddress.append(PathElement.pathElement("stack")).append(PathElement.pathElement("transport","TRANSPORT")),new FailedOperationTransformationConfig.RejectExpressionsConfig(ModelKeys.SHARED)).addFailedAttribute(subsystemAddress.append(PathElement.pathElement("stack")).append(PathElement.pathElement("transport","TRANSPORT")).append("property"),new FailedOperationTransformationConfig.RejectExpressionsConfig(VALUE)).addFailedAttribute(subsystemAddress.append(PathElement.pathElement("stack")).append(PathElement.pathElement("protocol")).append("property"),new FailedOperationTransformationConfig.RejectExpressionsConfig(VALUE)).addFailedAttribute(subsystemAddress.append("stack").append("relay","RELAY"),FailedOperationTransformationConfig.REJECTED_RESOURCE).addFailedAttribute(subsystemAddress.append("stack").append("relay","RELAY").append("remote-site"),FailedOperationTransformationConfig.REJECTED_RESOURCE));
}
