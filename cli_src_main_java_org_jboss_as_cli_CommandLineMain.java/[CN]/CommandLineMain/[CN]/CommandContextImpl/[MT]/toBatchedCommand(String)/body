{
  if (line.isEmpty()) {
    throw new IllegalArgumentException("Null command line.");
  }
  final DefaultCallbackHandler originalParsedArguments=this.parsedCmd;
  if (isOperation(line)) {
    try {
      this.parsedCmd=new DefaultCallbackHandler();
      resetArgs(line);
      ModelNode request=this.parsedCmd.toOperationRequest();
      StringBuilder op=new StringBuilder();
      op.append(prefixFormatter.format(parsedCmd.getAddress()));
      op.append(line.substring(line.indexOf(':')));
      return new DefaultBatchedCommand(op.toString(),request);
    }
  finally {
      this.parsedCmd=originalParsedArguments;
    }
  }
  String cmd=line;
  String cmdArgs=null;
  for (int i=0; i < cmd.length(); ++i) {
    if (Character.isWhitespace(cmd.charAt(i))) {
      cmdArgs=cmd.substring(i + 1).trim();
      cmd=cmd.substring(0,i);
      break;
    }
  }
  CommandHandler handler=cmdRegistry.getCommandHandler(cmd.toLowerCase());
  if (handler == null) {
    throw new OperationFormatException("No command handler for '" + cmd + "'.");
  }
  if (!(handler instanceof OperationCommand)) {
    throw new OperationFormatException("The command is not allowed in a batch.");
  }
  try {
    this.parsedCmd=new DefaultCallbackHandler();
    resetArgs(cmdArgs);
    ModelNode request=((OperationCommand)handler).buildRequest(this);
    return new DefaultBatchedCommand(line,request);
  }
  finally {
    this.parsedCmd=originalParsedArguments;
  }
}
