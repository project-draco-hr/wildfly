{
  final jline.ConsoleReader console=new jline.ConsoleReader();
  console.setUseHistory(true);
  final CommandContextImpl cmdCtx=new CommandContextImpl(console);
  SecurityActions.addShutdownHook(new Thread(new Runnable(){
    @Override public void run(){
      cmdCtx.disconnectController();
    }
  }
));
  OperationRequestCompleter opCompleter=new OperationRequestCompleter(cmdCtx);
  console.addCompletor(new CommandCompleter(handlers.keySet(),opCompleter));
  console.addCompletor(opCompleter);
  cmdCtx.log("You are disconnected at the moment." + " Type 'connect' to connect to the server or" + " 'help' for the list of supported commands.");
  while (!cmdCtx.terminate) {
    String line=console.readLine("[" + cmdCtx.getPrefixFormatter().format(cmdCtx.getPrefix()) + "] ").trim();
    if (line.isEmpty()) {
      continue;
    }
    if (isOperation(line)) {
      cmdCtx.cmdArgs=line;
      operationHandler.handle(cmdCtx);
    }
 else {
      String cmd=line.toLowerCase();
      cmdCtx.cmdArgs=null;
      for (int i=0; i < cmd.length(); ++i) {
        if (Character.isWhitespace(cmd.charAt(i))) {
          cmdCtx.cmdArgs=cmd.substring(i + 1).trim();
          cmd=cmd.substring(0,i);
        }
      }
      CommandHandler handler=handlers.get(cmd);
      if (handler != null) {
        handler.handle(cmdCtx);
      }
 else {
        cmdCtx.log("Unexpected command '" + line + "'. Type 'help' for the list of supported commands.");
      }
    }
  }
  StreamUtils.safeClose(cmdCtx.client);
}
