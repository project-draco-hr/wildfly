{
  final jline.ConsoleReader console=initConsoleReader();
  final CommandContextImpl cmdCtx=new CommandContextImpl(console);
  SecurityActions.addShutdownHook(new Thread(new Runnable(){
    @Override public void run(){
      cmdCtx.disconnectController();
    }
  }
));
  OperationRequestCompleter opCompleter=new OperationRequestCompleter(cmdCtx);
  console.addCompletor(new CommandCompleter(tabCompleteCommands,cmdCtx,opCompleter));
  console.addCompletor(opCompleter);
  String fileName=null;
  boolean connect=false;
  for (  String arg : args) {
    if (arg.startsWith("controller=")) {
      String value=arg.substring(11);
      String portStr=null;
      int colonIndex=value.indexOf(':');
      if (colonIndex < 0) {
        cmdCtx.defaultControllerHost=value;
      }
 else       if (colonIndex == 0) {
        portStr=value.substring(1);
      }
 else {
        cmdCtx.defaultControllerHost=value.substring(0,colonIndex);
        portStr=value.substring(colonIndex + 1);
      }
      if (portStr != null) {
        int port=-1;
        try {
          port=Integer.parseInt(portStr);
          if (port < 0) {
            cmdCtx.printLine("The port must be a valid non-negative integer: '" + args + "'");
          }
 else {
            cmdCtx.defaultControllerPort=port;
          }
        }
 catch (        NumberFormatException e) {
          cmdCtx.printLine("The port must be a valid non-negative integer: '" + arg + "'");
        }
      }
    }
 else     if ("--connect".equals(arg)) {
      connect=true;
    }
 else     if (arg.startsWith("file=")) {
      fileName=arg.substring(5);
    }
  }
  if (connect) {
    cmdCtx.connectController(null,-1);
  }
 else {
    cmdCtx.printLine("You are disconnected at the moment." + " Type 'connect' to connect to the server or" + " 'help' for the list of supported commands.");
  }
  if (fileName != null && !fileName.isEmpty()) {
    File f=new File(fileName);
    if (!f.exists()) {
      cmdCtx.printLine("File " + f.getAbsolutePath() + " doesn't exist.");
    }
 else {
      BufferedReader reader=new BufferedReader(new FileReader(f));
      try {
        String line=reader.readLine();
        while (!cmdCtx.terminate && line != null) {
          processLine(cmdCtx,line.trim());
          line=reader.readLine();
        }
      }
  finally {
        StreamUtils.safeClose(reader);
        StreamUtils.safeClose(cmdCtx.client);
      }
      return;
    }
  }
  while (!cmdCtx.terminate) {
    String line=console.readLine(cmdCtx.getPrompt()).trim();
    processLine(cmdCtx,line);
  }
  StreamUtils.safeClose(cmdCtx.client);
}
