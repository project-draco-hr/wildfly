{
  final CommandContextImpl cmdCtx=new CommandContextImpl();
  SecurityActions.addShutdownHook(new Thread(new Runnable(){
    @Override public void run(){
      StreamUtils.safeClose(cmdCtx.client);
      System.out.println("closed");
    }
  }
));
  cmdCtx.log("You are disconnected at the moment." + " Type /connect to connect to the server or" + " /help for the list of supported commands.");
  BufferedReader input=new BufferedReader(new InputStreamReader(System.in));
  while (!cmdCtx.terminate) {
    String line=input.readLine().trim();
    if (line.isEmpty()) {
      continue;
    }
    if (line.charAt(0) == '/') {
      String cmd=line.substring(1).toLowerCase();
      cmdCtx.cmdArgs=null;
      for (int i=0; i < cmd.length(); ++i) {
        if (Character.isWhitespace(cmd.charAt(i))) {
          cmdCtx.cmdArgs=cmd.substring(i + 1).trim();
          cmd=cmd.substring(0,i);
        }
      }
      CommandHandler handler=handlers.get(cmd);
      if (handler != null) {
        handler.handle(cmdCtx);
      }
 else {
        cmdCtx.log("Unexpected command '" + line + "'. Type /help for the list of supported commands.");
      }
    }
 else {
      cmdCtx.cmdArgs=line;
      operationHandler.handle(cmdCtx);
    }
  }
}
