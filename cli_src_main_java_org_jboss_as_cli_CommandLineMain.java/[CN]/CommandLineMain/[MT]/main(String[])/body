{
  try {
    AccessController.doPrivileged(new PrivilegedAction<Object>(){
      public Object run(){
        return Security.insertProviderAt(new JBossSaslProvider(),1);
      }
    }
);
    String argError=null;
    String[] commands=null;
    File file=null;
    boolean connect=false;
    String defaultControllerHost=null;
    int defaultControllerPort=-1;
    boolean version=false;
    String username=null;
    char[] password=null;
    for (    String arg : args) {
      if (arg.startsWith("--controller=") || arg.startsWith("controller=")) {
        final String value;
        if (arg.startsWith("--")) {
          value=arg.substring(13);
        }
 else {
          value=arg.substring(11);
        }
        String portStr=null;
        int colonIndex=value.indexOf(':');
        if (colonIndex < 0) {
          defaultControllerHost=value;
        }
 else         if (colonIndex == 0) {
          portStr=value.substring(1);
        }
 else {
          defaultControllerHost=value.substring(0,colonIndex);
          portStr=value.substring(colonIndex + 1);
        }
        if (portStr != null) {
          int port=-1;
          try {
            port=Integer.parseInt(portStr);
            if (port < 0) {
              argError="The port must be a valid non-negative integer: '" + args + "'";
            }
 else {
              defaultControllerPort=port;
            }
          }
 catch (          NumberFormatException e) {
            argError="The port must be a valid non-negative integer: '" + arg + "'";
          }
        }
      }
 else       if ("--connect".equals(arg) || "-c".equals(arg)) {
        connect=true;
      }
 else       if ("--version".equals(arg)) {
        version=true;
      }
 else       if (arg.startsWith("--file=") || arg.startsWith("file=")) {
        if (file != null) {
          argError="Duplicate argument '--file'.";
          break;
        }
        if (commands != null) {
          argError="Only one of '--file', '--commands' or '--command' can appear as the argument at a time.";
          break;
        }
        final String fileName=arg.startsWith("--") ? arg.substring(7) : arg.substring(5);
        if (!fileName.isEmpty()) {
          file=new File(fileName);
          if (!file.exists()) {
            argError="File " + file.getAbsolutePath() + " doesn't exist.";
            break;
          }
        }
 else {
          argError="Argument '--file' is missing value.";
          break;
        }
      }
 else       if (arg.startsWith("--commands=") || arg.startsWith("commands=")) {
        if (file != null) {
          argError="Only one of '--file', '--commands' or '--command' can appear as the argument at a time.";
          break;
        }
        if (commands != null) {
          argError="Duplicate argument '--command'/'--commands'.";
          break;
        }
        final String value=arg.startsWith("--") ? arg.substring(11) : arg.substring(9);
        commands=value.split(",+");
      }
 else       if (arg.startsWith("--command=") || arg.startsWith("command=")) {
        if (file != null) {
          argError="Only one of '--file', '--commands' or '--command' can appear as the argument at a time.";
          break;
        }
        if (commands != null) {
          argError="Duplicate argument '--command'/'--commands'.";
          break;
        }
        final String value=arg.startsWith("--") ? arg.substring(10) : arg.substring(8);
        commands=new String[]{value};
      }
 else       if (arg.startsWith("--user=")) {
        username=arg.startsWith("--") ? arg.substring(7) : arg.substring(5);
      }
 else       if (arg.startsWith("--password=")) {
        password=(arg.startsWith("--") ? arg.substring(11) : arg.substring(9)).toCharArray();
      }
 else       if (arg.equals("--help") || arg.equals("-h")) {
        commands=new String[]{"help"};
      }
 else {
        if (file != null) {
          argError="Only one of '--file', '--commands' or '--command' can appear as the argument at a time.";
          break;
        }
        if (commands != null) {
          argError="Duplicate argument '--command'/'--commands'.";
          break;
        }
        commands=arg.split(",+");
      }
    }
    if (argError != null) {
      System.err.println(argError);
      return;
    }
    if (version) {
      final CommandContextImpl cmdCtx=new CommandContextImpl();
      VersionHandler.INSTANCE.handle(cmdCtx);
      return;
    }
    if (file != null) {
      processFile(file,defaultControllerHost,defaultControllerPort,connect,username,password);
      return;
    }
    if (commands != null) {
      processCommands(commands,defaultControllerHost,defaultControllerPort,connect,username,password);
      return;
    }
    final jline.ConsoleReader console=initConsoleReader();
    final CommandContextImpl cmdCtx=new CommandContextImpl(console);
    SecurityActions.addShutdownHook(new Thread(new Runnable(){
      @Override public void run(){
        cmdCtx.disconnectController();
      }
    }
));
    console.addCompletor(cmdCtx.cmdCompleter);
    cmdCtx.username=username;
    cmdCtx.password=password;
    if (defaultControllerHost != null) {
      cmdCtx.defaultControllerHost=defaultControllerHost;
    }
    if (defaultControllerPort != -1) {
      cmdCtx.defaultControllerPort=defaultControllerPort;
    }
    if (connect) {
      cmdCtx.connectController(null,-1);
    }
 else {
      cmdCtx.printLine("You are disconnected at the moment." + " Type 'connect' to connect to the server or" + " 'help' for the list of supported commands.");
    }
    try {
      while (!cmdCtx.terminate) {
        final String line=console.readLine(cmdCtx.getPrompt());
        if (line == null) {
          cmdCtx.terminateSession();
        }
 else {
          processLine(cmdCtx,line.trim());
        }
      }
    }
 catch (    Throwable t) {
      t.printStackTrace();
    }
 finally {
      cmdCtx.disconnectController();
    }
  }
  finally {
    System.exit(0);
  }
  System.exit(0);
}
