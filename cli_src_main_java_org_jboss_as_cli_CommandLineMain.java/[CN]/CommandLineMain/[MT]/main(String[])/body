{
  final jline.ConsoleReader console=new jline.ConsoleReader();
  final CommandContextImpl cmdCtx=new CommandContextImpl(console);
  SecurityActions.addShutdownHook(new Thread(new Runnable(){
    @Override public void run(){
      cmdCtx.disconnectController();
    }
  }
));
  OperationRequestCompleter opCompleter=new OperationRequestCompleter(cmdCtx);
  console.addCompletor(new CommandCompleter(handlers.keySet(),opCompleter));
  console.addCompletor(opCompleter);
  boolean connect=false;
  for (  String arg : args) {
    if (arg.startsWith("controller=")) {
      String value=arg.substring(11);
      String portStr=null;
      int colonIndex=value.indexOf(':');
      if (colonIndex < 0) {
        cmdCtx.defaultControllerHost=value;
      }
 else       if (colonIndex == 0) {
        portStr=value.substring(1);
      }
 else {
        cmdCtx.defaultControllerHost=value.substring(0,colonIndex);
        portStr=value.substring(colonIndex + 1);
      }
      if (portStr != null) {
        int port=-1;
        try {
          port=Integer.parseInt(portStr);
          if (port < 0) {
            cmdCtx.printLine("The port must be a valid non-negative integer: '" + args + "'");
          }
 else {
            cmdCtx.defaultControllerPort=port;
          }
        }
 catch (        NumberFormatException e) {
          cmdCtx.printLine("The port must be a valid non-negative integer: '" + arg + "'");
        }
      }
    }
 else     if ("--connect".equals(arg)) {
      connect=true;
    }
  }
  if (connect) {
    cmdCtx.connectController(null,-1);
  }
 else {
    cmdCtx.printLine("You are disconnected at the moment." + " Type 'connect' to connect to the server or" + " 'help' for the list of supported commands.");
  }
  while (!cmdCtx.terminate) {
    String line=console.readLine(cmdCtx.getPrompt()).trim();
    if (line.isEmpty()) {
      continue;
    }
    if (isOperation(line)) {
      cmdCtx.cmdArgs=line;
      operationHandler.handle(cmdCtx);
    }
 else {
      String cmd=line;
      cmdCtx.cmdArgs=null;
      for (int i=0; i < cmd.length(); ++i) {
        if (Character.isWhitespace(cmd.charAt(i))) {
          cmdCtx.cmdArgs=cmd.substring(i + 1).trim();
          cmd=cmd.substring(0,i);
          break;
        }
      }
      CommandHandler handler=handlers.get(cmd.toLowerCase());
      if (handler != null) {
        handler.handle(cmdCtx);
      }
 else {
        cmdCtx.printLine("Unexpected command '" + line + "'. Type 'help' for the list of supported commands.");
      }
    }
  }
  StreamUtils.safeClose(cmdCtx.client);
}
