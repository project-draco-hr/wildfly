{
  Set<String> hosts=getHosts(hostUtils[0]);
  Assert.assertTrue(hosts.contains(HOSTS[0]));
  Assert.assertTrue(hosts.contains(HOSTS[1]));
  Assert.assertTrue(hosts.contains(HOSTS[2]));
  log.info("Stopping the domain controller on failover1.");
  hostUtils[0].stop();
  log.info("Domain controller on failover1 stopped.");
  hosts=getHosts(hostUtils[1]);
  Assert.assertTrue(hosts.contains(HOSTS[1]));
  Assert.assertEquals(hosts.size(),1);
  ClassLoader tccl=Thread.currentThread().getContextClassLoader();
  URL url=tccl.getResource("host-configs/host-failover2-v2.xml");
  File cfgFile=new File(url.toURI());
  FileUtils.copyFile(cfgFile,new File(getHostConfigDir(2),"testing-host-failover2.xml"));
  ModelNode restartOp=new ModelNode();
  restartOp.get(ModelDescriptionConstants.ADDRESS).add(ModelDescriptionConstants.HOST,"failover2");
  restartOp.get(ModelDescriptionConstants.OP).set("reload");
  restartOp.get(ModelDescriptionConstants.RESTART_SERVERS).set(false);
  log.info("Reloading failover2 to act as the domain controller.");
  hostUtils[1].executeAwaitConnectionClosed(restartOp);
  waitUntilHostControllerReady(hostUtils[1]);
  url=tccl.getResource("host-configs/host-failover3-v2.xml");
  cfgFile=new File(url.toURI());
  FileUtils.copyFile(cfgFile,new File(getHostConfigDir(3),"testing-host-failover3.xml"));
  restartOp=new ModelNode();
  restartOp.get(ModelDescriptionConstants.ADDRESS).add(ModelDescriptionConstants.HOST,HOSTS[2]);
  restartOp.get(ModelDescriptionConstants.OP).set("reload");
  restartOp.get(ModelDescriptionConstants.RESTART_SERVERS).set(false);
  log.info("Reloading failover3 to register to new domain controller.");
  hostUtils[2].executeAwaitConnectionClosed(restartOp);
  waitUntilHostControllerReady(hostUtils[2]);
  Operation deployOp=buildDeployOperation();
  hostUtils[1].executeForResult(deployOp);
  hosts=getHosts(hostUtils[1]);
  Assert.assertTrue(hosts.contains(HOSTS[1]));
  Assert.assertTrue(hosts.contains(HOSTS[2]));
  Assert.assertEquals(hosts.size(),2);
  String testUrl=new URL("http",slaveAddress,8080 + SERVER_PORT_OFFSETS[2],"/SimpleServlet/SimpleServlet").toString();
  Assert.assertTrue(WebUtil.testHttpURL(testUrl));
  ModelNode stopOp=new ModelNode();
  stopOp.get(ModelDescriptionConstants.ADDRESS).add(ModelDescriptionConstants.HOST,HOSTS[2]);
  stopOp.get(ModelDescriptionConstants.ADDRESS).add(ModelDescriptionConstants.SERVER_CONFIG,SERVERS[2]);
  stopOp.get(ModelDescriptionConstants.OP).set(ModelDescriptionConstants.STOP);
  hostUtils[1].executeForResult(stopOp);
  DomainTestUtils.waitUntilState(hostUtils[1].getDomainClient(),HOSTS[2],SERVERS[2],"STOPPED");
  Assert.assertFalse(WebUtil.testHttpURL(testUrl));
}
