{
  Set<String> hosts=getHosts(hostUtils[0]);
  Assert.assertTrue(hosts.contains(HOSTS[0]));
  Assert.assertTrue(hosts.contains(HOSTS[1]));
  Assert.assertTrue(hosts.contains(HOSTS[2]));
  ModelNode addSystemProp=new ModelNode();
  addSystemProp.get(ModelDescriptionConstants.ADDRESS).add(ModelDescriptionConstants.SYSTEM_PROPERTY,"hc-failover-a");
  addSystemProp.get(ModelDescriptionConstants.OP).set("add");
  addSystemProp.get(ModelDescriptionConstants.VALUE).set("test-a");
  hostUtils[0].executeForResult(addSystemProp);
  Operation addDeployOp=buildDeploymentAddOperation();
  hostUtils[0].executeForResult(addDeployOp);
  log.info("Stopping the domain controller on failover-h1.");
  hostUtils[0].stop();
  log.info("Domain controller on failover-h1 stopped.");
  hosts=getHosts(hostUtils[1]);
  Assert.assertTrue(hosts.contains(HOSTS[1]));
  Assert.assertEquals(hosts.size(),1);
  ModelNode becomeMasterOp=new ModelNode();
  becomeMasterOp.get(ModelDescriptionConstants.ADDRESS).add(ModelDescriptionConstants.HOST,"failover-h2");
  becomeMasterOp.get(ModelDescriptionConstants.OP).set("write-local-domain-controller");
  hostUtils[1].executeForResult(becomeMasterOp);
  ModelNode restartOp=new ModelNode();
  restartOp.get(ModelDescriptionConstants.ADDRESS).add(ModelDescriptionConstants.HOST,"failover-h2");
  restartOp.get(ModelDescriptionConstants.OP).set("reload");
  restartOp.get(ModelDescriptionConstants.RESTART_SERVERS).set(false);
  log.info("Reloading failover-h2 to act as the domain controller.");
  hostUtils[1].executeAwaitConnectionClosed(restartOp);
  waitUntilHostControllerReady(hostUtils[1]);
  ModelNode readSysPropOp=new ModelNode();
  readSysPropOp.get(ModelDescriptionConstants.ADDRESS).add(ModelDescriptionConstants.SYSTEM_PROPERTY,"hc-failover-a");
  readSysPropOp.get(ModelDescriptionConstants.OP).set(ModelDescriptionConstants.READ_ATTRIBUTE_OPERATION);
  readSysPropOp.get(ModelDescriptionConstants.NAME).set(ModelDescriptionConstants.VALUE);
  Assert.assertEquals("test-a",hostUtils[1].executeForResult(readSysPropOp).asString());
  addSystemProp=new ModelNode();
  addSystemProp.get(ModelDescriptionConstants.ADDRESS).add(ModelDescriptionConstants.SYSTEM_PROPERTY,"hc-failover-b");
  addSystemProp.get(ModelDescriptionConstants.OP).set("add");
  addSystemProp.get(ModelDescriptionConstants.VALUE).set("test-b");
  hostUtils[1].executeForResult(addSystemProp);
  ModelNode changeMasterOp=new ModelNode();
  changeMasterOp.get(ModelDescriptionConstants.ADDRESS).add(ModelDescriptionConstants.HOST,HOSTS[2]);
  changeMasterOp.get(ModelDescriptionConstants.OP).set("write-remote-domain-controller");
  changeMasterOp.get(ModelDescriptionConstants.HOST).set("${jboss.test.host.slave.address}");
  changeMasterOp.get(ModelDescriptionConstants.PORT).set(MGMT_PORTS[1]);
  changeMasterOp.get(ModelDescriptionConstants.SECURITY_REALM).set("ManagementRealm");
  hostUtils[2].executeForResult(changeMasterOp);
  restartOp=new ModelNode();
  restartOp.get(ModelDescriptionConstants.ADDRESS).add(ModelDescriptionConstants.HOST,HOSTS[2]);
  restartOp.get(ModelDescriptionConstants.OP).set("reload");
  restartOp.get(ModelDescriptionConstants.RESTART_SERVERS).set(false);
  log.info("Reloading failover-h3 to register to new domain controller.");
  hostUtils[2].executeAwaitConnectionClosed(restartOp);
  waitUntilHostControllerReady(hostUtils[2]);
  readSysPropOp=new ModelNode();
  readSysPropOp.get(ModelDescriptionConstants.ADDRESS).add(ModelDescriptionConstants.SYSTEM_PROPERTY,"hc-failover-b");
  readSysPropOp.get(ModelDescriptionConstants.OP).set(ModelDescriptionConstants.READ_ATTRIBUTE_OPERATION);
  readSysPropOp.get(ModelDescriptionConstants.NAME).set(ModelDescriptionConstants.VALUE);
  Assert.assertEquals("test-b",hostUtils[2].executeForResult(readSysPropOp).asString());
  hosts=getHosts(hostUtils[1]);
  Assert.assertTrue(hosts.contains(HOSTS[1]));
  Assert.assertTrue(hosts.contains(HOSTS[2]));
  Assert.assertEquals(hosts.size(),2);
  Operation mapDeployOp=buildDeploymentMappingOperation();
  hostUtils[1].executeForResult(mapDeployOp);
  checkProperty(hostUtils[1].getDomainClient(),HOSTS[1],SERVERS[1]);
  checkProperty(hostUtils[1].getDomainClient(),HOSTS[2],SERVERS[2]);
  ModelNode stopOp=new ModelNode();
  stopOp.get(ModelDescriptionConstants.ADDRESS).add(ModelDescriptionConstants.HOST,HOSTS[2]);
  stopOp.get(ModelDescriptionConstants.ADDRESS).add(ModelDescriptionConstants.SERVER_CONFIG,SERVERS[2]);
  stopOp.get(ModelDescriptionConstants.OP).set(ModelDescriptionConstants.STOP);
  hostUtils[1].executeForResult(stopOp);
  DomainTestUtils.waitUntilState(hostUtils[1].getDomainClient(),HOSTS[2],SERVERS[2],"STOPPED");
}
