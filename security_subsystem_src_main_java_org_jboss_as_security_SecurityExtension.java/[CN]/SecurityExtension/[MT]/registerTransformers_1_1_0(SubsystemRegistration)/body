{
  final ResourceTransformationDescriptionBuilder builder=TransformationDescriptionBuilder.Factory.createSubsystemInstance();
  builder.getAttributeBuilder().addRejectCheck(RejectAttributeChecker.SIMPLE_EXPRESSIONS,SecuritySubsystemRootResourceDefinition.DEEP_COPY_SUBJECT_MODE);
  final ResourceTransformationDescriptionBuilder securityDomain=builder.addChildResource(SECURITY_DOMAIN_PATH);
  securityDomain.getAttributeBuilder().setDiscard(new DiscardAttributeChecker.DiscardAttributeValueChecker(false,true,new ModelNode(false)),SecurityDomainResourceDefinition.EXPORT_ELYTRON_REALM).addRejectCheck(RejectAttributeChecker.SIMPLE_EXPRESSIONS,SecurityDomainResourceDefinition.CACHE_TYPE).addRejectCheck(RejectAttributeChecker.DEFINED,SecurityDomainResourceDefinition.EXPORT_ELYTRON_REALM).end();
  final ModulesToAttributeTransformer authClassicLoginModule=new ModulesToAttributeTransformer(Constants.LOGIN_MODULE,Constants.LOGIN_MODULES);
  registerModuleTransformer(securityDomain,PATH_CLASSIC_AUTHENTICATION,authClassicLoginModule,ChildResourceTransformersRegistrar.createBuilder().addRejectExpressions(Constants.FLAG,Constants.MODULE_OPTIONS).build());
  final ModulesToAttributeTransformer policyModule=new ModulesToAttributeTransformer(Constants.POLICY_MODULE,Constants.POLICY_MODULES);
  registerModuleTransformer(securityDomain,PATH_AUTHORIZATION_CLASSIC,policyModule,ChildResourceTransformersRegistrar.createBuilder().addRejectExpressions(Constants.FLAG,Constants.MODULE_OPTIONS).build());
  final ModulesToAttributeTransformer mappingModule=new ModulesToAttributeTransformer(Constants.MAPPING_MODULE,Constants.MAPPING_MODULES);
  registerModuleTransformer(securityDomain,PATH_MAPPING_CLASSIC,mappingModule,ChildResourceTransformersRegistrar.createBuilder().addRejectExpressions(Constants.TYPE,Constants.MODULE_OPTIONS).build());
  final ModulesToAttributeTransformer providerModule=new ModulesToAttributeTransformer(Constants.PROVIDER_MODULE,Constants.PROVIDER_MODULES);
  registerModuleTransformer(securityDomain,PATH_AUDIT_CLASSIC,providerModule,ChildResourceTransformersRegistrar.createBuilder().addRejectExpressions(Constants.MODULE_OPTIONS).build());
  final ModulesToAttributeTransformer identityTrustModule=new ModulesToAttributeTransformer(Constants.TRUST_MODULE,Constants.TRUST_MODULES);
  registerModuleTransformer(securityDomain,PATH_IDENTITY_TRUST_CLASSIC,identityTrustModule,ChildResourceTransformersRegistrar.createBuilder().addRejectExpressions(Constants.FLAG,Constants.MODULE_OPTIONS).build());
  final ModulesToAttributeTransformer aclModule=new ModulesToAttributeTransformer(Constants.ACL_MODULE,Constants.ACL_MODULES);
  registerModuleTransformer(securityDomain,ACL_PATH,aclModule,ChildResourceTransformersRegistrar.createBuilder().addRejectExpressions(Constants.FLAG,Constants.MODULE_OPTIONS).build());
  final ModulesToAttributeTransformer authModule=new JaspiModulesToAttributeTransformer(Constants.AUTH_MODULE,Constants.AUTH_MODULES);
  ResourceTransformationDescriptionBuilder jaspiReg=registerModuleTransformer(securityDomain,PATH_JASPI_AUTH,authModule,ChildResourceTransformersRegistrar.createBuilder().addRejectExpressions(Constants.FLAG,Constants.MODULE_OPTIONS).addRejectIfDefined(Constants.MODULE).build());
  final ModulesToAttributeTransformer authLoginModule=new JaspiModulesToAttributeTransformer(Constants.LOGIN_MODULE,Constants.LOGIN_MODULES);
  registerModuleTransformer(jaspiReg,PATH_LOGIN_MODULE_STACK,authLoginModule,null);
  builder.addChildResource(VAULT_PATH).getAttributeBuilder().addRejectCheck(RejectAttributeChecker.SIMPLE_EXPRESSIONS,VaultResourceDefinition.OPTIONS).end();
  securityDomain.addChildResource(JSSE_PATH).getAttributeBuilder().addRejectCheck(RejectAttributeChecker.SIMPLE_EXPRESSIONS,JSSEResourceDefinition.ADDITIONAL_PROPERTIES).end();
  TransformationDescription.Tools.register(builder.build(),subsystemRegistration,ModelVersion.create(1,1,0));
}
