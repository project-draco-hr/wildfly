{
  ResourceTransformationDescriptionBuilder builder=TransformationDescriptionBuilder.Factory.createSubsystemInstance();
  ResourceTransformationDescriptionBuilder securityDomain=builder.addChildResource(SECURITY_DOMAIN_PATH);
  securityDomain.getAttributeBuilder().setDiscard(new DiscardAttributeChecker.DiscardAttributeValueChecker(false,true,new ModelNode(false)),SecurityDomainResourceDefinition.EXPORT_ELYTRON_REALM).addRejectCheck(RejectAttributeChecker.DEFINED,SecurityDomainResourceDefinition.EXPORT_ELYTRON_REALM).end();
  AttributeToModulesTransformer loginModule=new AttributeToModulesTransformer(Constants.LOGIN_MODULES);
  registerModuleTransformer(securityDomain,PATH_CLASSIC_AUTHENTICATION,loginModule);
  AttributeToModulesTransformer policyModule=new AttributeToModulesTransformer(Constants.POLICY_MODULES);
  registerModuleTransformer(securityDomain,PATH_AUTHORIZATION_CLASSIC,policyModule);
  AttributeToModulesTransformer mappingModule=new AttributeToModulesTransformer(Constants.MAPPING_MODULES);
  registerModuleTransformer(securityDomain,PATH_MAPPING_CLASSIC,mappingModule);
  AttributeToModulesTransformer providerModule=new AttributeToModulesTransformer(Constants.PROVIDER_MODULES);
  registerModuleTransformer(securityDomain,PATH_AUDIT_CLASSIC,providerModule);
  final AttributeToModulesTransformer identityTrustModule=new AttributeToModulesTransformer(Constants.TRUST_MODULES);
  registerModuleTransformer(securityDomain,PATH_IDENTITY_TRUST_CLASSIC,identityTrustModule);
  final AttributeToModulesTransformer aclModule=new AttributeToModulesTransformer(Constants.ACL_MODULES);
  ResourceTransformationDescriptionBuilder aclBuilder=registerModuleTransformer(securityDomain,ACL_PATH,aclModule);
  aclBuilder.addChildRedirection(PathElement.pathElement(Constants.ACL_MODULE),PathElement.pathElement(Constants.LOGIN_MODULE));
  AttributeToModulesTransformer authModule=new AttributeToModulesTransformer(Constants.AUTH_MODULES);
  ResourceTransformationDescriptionBuilder jaspiReg=registerModuleTransformer(securityDomain,PATH_JASPI_AUTH,authModule);
  jaspiReg.addChildResource(PathElement.pathElement(Constants.AUTH_MODULE)).getAttributeBuilder().addRejectCheck(RejectAttributeChecker.DEFINED,Constants.MODULE).end();
  registerModuleTransformer(jaspiReg,PATH_LOGIN_MODULE_STACK,loginModule);
  TransformationDescription.Tools.register(builder.build(),subsystemRegistration,ModelVersion.create(1,2,0));
}
