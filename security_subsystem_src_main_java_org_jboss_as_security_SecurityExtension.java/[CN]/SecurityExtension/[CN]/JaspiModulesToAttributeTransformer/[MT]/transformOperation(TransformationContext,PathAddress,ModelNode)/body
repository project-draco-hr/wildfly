{
  PathAddress jaspiAddress=getJaspiAuthenticationAddress(address);
  ModelNode authModulesModel=new ModelNode();
  transformModulesToAttributes(jaspiAddress,Constants.AUTH_MODULE,Constants.AUTH_MODULES,context,authModulesModel);
  ModelNode authModules=authModulesModel.get(Constants.AUTH_MODULES);
  if (authModules.asList().size() == 0) {
    return new TransformedOperation(Util.createRemoveOperation(jaspiAddress),OperationResultTransformer.ORIGINAL_RESULT);
  }
 else {
    List<ModelNode> list=new ArrayList<ModelNode>();
    ModelNode addJaspi=Util.createAddOperation(jaspiAddress);
    addJaspi.get(Constants.AUTH_MODULES).set(authModules);
    list.add(addJaspi);
    Resource jaspiResource=context.readResourceFromRoot(jaspiAddress);
    for (    ResourceEntry entry : jaspiResource.getChildren(Constants.LOGIN_MODULE_STACK)) {
      PathAddress stackAddress=jaspiAddress.append(PathElement.pathElement(Constants.LOGIN_MODULE_STACK,entry.getName()));
      ModelNode loginModulesModel=new ModelNode();
      transformModulesToAttributes(stackAddress,Constants.LOGIN_MODULE,Constants.LOGIN_MODULES,context,loginModulesModel);
      ModelNode loginModules=loginModulesModel.get(Constants.LOGIN_MODULES);
      if (loginModules.asList().size() > 0) {
        ModelNode addStack=Util.createAddOperation(stackAddress);
        addStack.get(Constants.LOGIN_MODULES).set(loginModules);
        list.add(addStack);
      }
    }
    return new TransformedOperation(createComposite(jaspiAddress,list.toArray(new ModelNode[list.size()])),OperationResultTransformer.ORIGINAL_RESULT);
  }
}
