{
  super(componentConfiguration);
  this.applicationExceptions=applicationExceptions;
  final EJBComponentDescription ejbComponentDescription=(EJBComponentDescription)componentConfiguration.getComponentDescription();
  this.transactionManagementType=ejbComponentDescription.getTransactionManagementType();
  this.timerService=ejbComponentDescription.getTimerService();
  if (transactionManagementType.equals(TransactionManagementType.CONTAINER)) {
    this.txAttrs=new HashMap<MethodTransactionAttributeKey,TransactionMethodAttribute>();
  }
 else {
    this.txAttrs=null;
  }
  this.securityMetaData=new EJBSecurityMetaData(componentConfiguration);
  if (ejbComponentDescription.isTimerServiceApplicable()) {
    Map<Method,InterceptorFactory> timeoutInterceptors=new IdentityHashMap<Method,InterceptorFactory>();
    for (    Method method : componentConfiguration.getDefinedComponentMethods()) {
      final InterceptorFactory interceptorFactory=Interceptors.getChainedInterceptorFactory(componentConfiguration.getAroundTimeoutInterceptors(method));
      timeoutInterceptors.put(method,interceptorFactory);
    }
    this.timeoutInterceptors=timeoutInterceptors;
  }
 else {
    timeoutInterceptors=Collections.emptyMap();
  }
  List<ViewConfiguration> views=componentConfiguration.getViews();
  if (views != null) {
    for (    ViewConfiguration view : views) {
      final EJBViewConfiguration ejbView=(EJBViewConfiguration)view;
      final MethodIntf viewType=ejbView.getMethodIntf();
      for (      Method method : view.getProxyFactory().getCachedMethods()) {
        if (!Modifier.isPublic(method.getModifiers()))         continue;
        final Method componentMethod=getComponentMethod(componentConfiguration,method.getName(),method.getParameterTypes());
        if (componentMethod != null) {
          this.processTxAttr(ejbComponentDescription,viewType,componentMethod);
        }
 else {
          this.processTxAttr(ejbComponentDescription,viewType,method);
        }
      }
    }
  }
  this.timeoutMethod=ejbComponentDescription.getTimeoutMethod();
  for (  Method method : componentConfiguration.getComponentClass().getMethods()) {
    this.processTxAttr(ejbComponentDescription,MethodIntf.BEAN,method);
  }
  final HashMap<String,ServiceName> viewServices=new HashMap<String,ServiceName>();
  for (  ViewDescription view : componentConfiguration.getComponentDescription().getViews()) {
    viewServices.put(view.getViewClassName(),view.getServiceName());
  }
  this.viewServices=viewServices;
  final EjbHomeViewDescription localHome=ejbComponentDescription.getEjbLocalHomeView();
  this.ejbLocalHome=localHome == null ? null : ejbComponentDescription.getEjbLocalHomeView().getServiceName();
  final EjbHomeViewDescription home=ejbComponentDescription.getEjbHomeView();
  this.ejbHome=home == null ? null : home.getServiceName();
  final EJBViewDescription ejbObject=ejbComponentDescription.getEjbRemoteView();
  this.ejbObject=ejbObject == null ? null : ejbObject.getServiceName();
  final EJBViewDescription ejbLocalObject=ejbComponentDescription.getEjbLocalView();
  this.ejbLocalObject=ejbLocalObject == null ? null : ejbLocalObject.getServiceName();
  this.applicationName=componentConfiguration.getApplicationName();
  this.earApplicationName=componentConfiguration.getComponentDescription().getModuleDescription().getEarApplicationName();
  this.moduleName=componentConfiguration.getModuleName();
  this.distinctName=componentConfiguration.getComponentDescription().getModuleDescription().getDistinctName();
}
