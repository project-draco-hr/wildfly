{
  super(componentConfiguration);
  this.componentConfiguration=componentConfiguration;
  this.ejbJarConfiguration=ejbJarConfiguration;
  EJBComponentDescription ejbComponentDescription=(EJBComponentDescription)componentConfiguration.getComponentDescription();
  this.transactionManagementType=ejbComponentDescription.getTransactionManagementType();
  if (transactionManagementType.equals(TransactionManagementType.CONTAINER)) {
    this.txAttrs=new ConcurrentHashMap<MethodIntf,ConcurrentMap<String,ConcurrentMap<ArrayKey,TransactionAttributeType>>>();
  }
 else {
    this.txAttrs=null;
  }
  List<ViewConfiguration> views=componentConfiguration.getViews();
  if (views != null) {
    for (    ViewConfiguration view : views) {
      final EJBViewConfiguration ejbView=(EJBViewConfiguration)view;
      final MethodIntf viewType=ejbView.getMethodIntf();
      for (      Method method : view.getProxyFactory().getCachedMethods()) {
        final Method componentMethod=getComponentMethod(componentConfiguration,method.getName(),method.getParameterTypes());
        this.processTxAttr(ejbComponentDescription,viewType,componentMethod);
      }
    }
  }
  Set<Method> componentMethods=componentConfiguration.getDefinedComponentMethods();
  if (componentMethods != null) {
    for (    Method method : componentMethods) {
      this.processTxAttr(ejbComponentDescription,MethodIntf.BEAN,method);
    }
  }
  final HashMap<String,ServiceName> viewServices=new HashMap<String,ServiceName>();
  for (  ViewDescription view : componentConfiguration.getComponentDescription().getViews()) {
    viewServices.put(view.getViewClassName(),view.getServiceName());
  }
  this.viewServices=viewServices;
}
