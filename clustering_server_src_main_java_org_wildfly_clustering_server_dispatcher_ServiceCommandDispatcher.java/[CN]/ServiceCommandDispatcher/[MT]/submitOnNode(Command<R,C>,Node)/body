{
  try {
    return this.dispatcher.sendMessageWithFuture(this.createMessage(command,node),this.createRequestOptions());
  }
 catch (  Throwable e) {
    final ExecutionException exception=new ExecutionException(e);
    return new Future<R>(){
      @Override public boolean cancel(      boolean mayInterruptIfRunning){
        return false;
      }
      @Override public R get() throws ExecutionException {
        throw exception;
      }
      @Override public R get(      long timeout,      TimeUnit unit) throws ExecutionException {
        throw exception;
      }
      @Override public boolean isCancelled(){
        return false;
      }
      @Override public boolean isDone(){
        return true;
      }
    }
;
  }
}
