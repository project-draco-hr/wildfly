{
  final String bundleName="bundle_" + randomString();
  File patchBundleDir=mkdir(tempDir,bundleName);
  final String cpPatchID=randomString();
  final String cpPatchID2=randomString();
  final String cpPatchID3=randomString();
  final String cpPatchID4=randomString();
  final String oneOffId=randomString();
  final String eapWithCP="EAP with cp patch";
  final String eapWithCP2="EAP with cp patch 2";
  final String eapWithCP3="EAP with cp patch 3";
  final String eapWithCP4="EAP with cp patch 4";
  List<BundledPatch.BundledPatchEntry> patches=new ArrayList<BundledPatch.BundledPatchEntry>();
  File cpZip=createCumulativePatchAddingARandomModule(cpPatchID,AS_VERSION,eapWithCP,patchBundleDir);
  patches.add(new BundledPatch.BundledPatchEntry(cpPatchID,cpZip.getName()));
  File cpZip2=createNextCumulativePatchAddingRandomModule(cpPatchID2,eapWithCP,cpPatchID,eapWithCP2,patchBundleDir);
  patches.add(new BundledPatch.BundledPatchEntry(cpPatchID2,cpZip2.getName()));
  File cpZip3=createNextCumulativePatchModyfyingJbossModules(cpPatchID3,eapWithCP2,cpPatchID2,eapWithCP3,patchBundleDir);
  patches.add(new BundledPatch.BundledPatchEntry(cpPatchID3,cpZip3.getName()));
  File cpZip4=createNextCumulativePatchAddingRandomModule(cpPatchID4,eapWithCP3,cpPatchID3,eapWithCP4,patchBundleDir);
  patches.add(new BundledPatch.BundledPatchEntry(cpPatchID4,cpZip4.getName()));
  File oneOffZip=createOneOffPatchAddingMiscFile(oneOffId,eapWithCP2);
  createPatchBundleXMLFile(patchBundleDir,patches);
  File patchBundleZip=createZippedPatchFile(patchBundleDir,bundleName);
  controller.start(CONTAINER);
  Assert.assertTrue("Patch should be accepted",CliUtilsForPatching.applyPatch(cpZip.getAbsolutePath()));
  Assert.assertTrue("server should be in restart-required mode",CliUtilsForPatching.doesServerRequireRestart());
  controller.stop(CONTAINER);
  controller.start(CONTAINER);
  Assert.assertTrue("The patch " + cpPatchID + " should be listed as installed",CliUtilsForPatching.getCumulativePatchId().equalsIgnoreCase(cpPatchID));
  Assert.assertTrue("Patch should be accepted",CliUtilsForPatching.applyPatch(cpZip2.getAbsolutePath()));
  Assert.assertTrue("server should be in restart-required mode",CliUtilsForPatching.doesServerRequireRestart());
  controller.stop(CONTAINER);
  controller.start(CONTAINER);
  Assert.assertTrue("The patch " + cpPatchID2 + " should be listed as installed",CliUtilsForPatching.getCumulativePatchId().equalsIgnoreCase(cpPatchID2));
  Assert.assertTrue("Patch should be accepted",CliUtilsForPatching.applyPatch(oneOffZip.getAbsolutePath()));
  Assert.assertTrue("server should be in restart-required mode",CliUtilsForPatching.doesServerRequireRestart());
  controller.stop(CONTAINER);
  controller.start(CONTAINER);
  Assert.assertTrue("The patch " + cpPatchID2 + " should be listed as installed",CliUtilsForPatching.getCumulativePatchId().equalsIgnoreCase(cpPatchID2));
  Assert.assertTrue("The patch " + oneOffId + " should be listed as installed",CliUtilsForPatching.getInstalledPatches().contains(oneOffId));
  Assert.assertTrue("Patch should be accepted",CliUtilsForPatching.applyPatch(patchBundleZip.getAbsolutePath()));
  Assert.assertTrue("server should be in restart-required mode",CliUtilsForPatching.doesServerRequireRestart());
  controller.stop(CONTAINER);
  controller.start(CONTAINER);
  Assert.assertTrue("The patch " + cpPatchID4 + " should be listed as installed",CliUtilsForPatching.getCumulativePatchId().equalsIgnoreCase(cpPatchID4));
  Assert.assertTrue("Rollback should be accepted",CliUtilsForPatching.rollbackCumulativePatch(true));
  Assert.assertTrue("server should be in restart-required mode",CliUtilsForPatching.doesServerRequireRestart());
  controller.stop(CONTAINER);
  controller.start(CONTAINER);
  Assert.assertTrue("The patch " + cpPatchID3 + " should be listed as installed",CliUtilsForPatching.getCumulativePatchId().equalsIgnoreCase(cpPatchID3));
  Assert.assertTrue("Rollback should be accepted",CliUtilsForPatching.rollbackCumulativePatch(true));
  Assert.assertTrue("server should be in restart-required mode",CliUtilsForPatching.doesServerRequireRestart());
  controller.stop(CONTAINER);
  controller.start(CONTAINER);
  Assert.assertTrue("The patch " + cpPatchID2 + " should be listed as installed",CliUtilsForPatching.getCumulativePatchId().equalsIgnoreCase(cpPatchID2));
  Assert.assertTrue("The patch " + oneOffId + " should be listed as installed",CliUtilsForPatching.getInstalledPatches().contains(oneOffId));
  Assert.assertTrue("Rollback should be accepted",CliUtilsForPatching.rollbackPatch(oneOffId));
  Assert.assertTrue("server should be in restart-required mode",CliUtilsForPatching.doesServerRequireRestart());
  controller.stop(CONTAINER);
  controller.start(CONTAINER);
  Assert.assertTrue("The patch " + cpPatchID2 + " should be listed as installed",CliUtilsForPatching.getCumulativePatchId().equalsIgnoreCase(cpPatchID2));
  Assert.assertFalse("The patch " + oneOffId + " should not be listed as installed",CliUtilsForPatching.getInstalledPatches().contains(oneOffId));
  Assert.assertTrue("Rollback should be accepted",CliUtilsForPatching.rollbackCumulativePatch(true));
  Assert.assertTrue("server should be in restart-required mode",CliUtilsForPatching.doesServerRequireRestart());
  controller.stop(CONTAINER);
  controller.start(CONTAINER);
  Assert.assertTrue("The patch " + cpPatchID + " should be listed as installed",CliUtilsForPatching.getCumulativePatchId().equalsIgnoreCase(cpPatchID));
  Assert.assertTrue("Rollback should be accepted",CliUtilsForPatching.rollbackCumulativePatch(true));
  Assert.assertTrue("server should be in restart-required mode",CliUtilsForPatching.doesServerRequireRestart());
  controller.stop(CONTAINER);
  controller.start(CONTAINER);
  Assert.assertTrue("The patch " + Constants.BASE + " should be listed as installed",CliUtilsForPatching.getCumulativePatchId().equalsIgnoreCase(Constants.BASE));
  controller.stop(CONTAINER);
}
