{
  String layerPatchID="layer" + patchID;
  File cpPatchDir=mkdir(tempDir,patchID);
  final String moduleName="org.wildfly.test." + randomString();
  final ResourceItem resourceItem1=new ResourceItem("testFile1","content1".getBytes());
  final ResourceItem resourceItem2=new ResourceItem("testFile2","content2".getBytes());
  Module newModule=new Module.Builder(moduleName).miscFile(resourceItem1).miscFile(resourceItem2).build();
  final String versionModuleName=ProductInfo.getVersionModule();
  final String slot=ProductInfo.getVersionModuleSlot();
  final String originalVersionModulePath=MODULES_PATH + FILE_SEPARATOR + versionModuleName.replace(".",FILE_SEPARATOR)+ FILE_SEPARATOR+ slot;
  final Module modifiedModule=PatchingTestUtil.createVersionModule(targetAsVersion);
  ContentModification moduleAdded=ContentModificationUtils.addModule(cpPatchDir,layerPatchID,newModule);
  ContentModification versionModuleModified=ContentModificationUtils.modifyModule(cpPatchDir,layerPatchID,HashUtils.hashFile(new File(originalVersionModulePath)),modifiedModule);
  Patch cpPatch=PatchBuilder.create().setPatchId(patchID).setDescription("A cp patch.").upgradeIdentity(PRODUCT,asVersion,targetAsVersion).getParent().upgradeElement(layerPatchID,"base",false).addContentModification(moduleAdded).addContentModification(versionModuleModified).getParent().build();
  createPatchXMLFile(cpPatchDir,cpPatch);
  return createZippedPatchFile(cpPatchDir,patchID,targetDir);
}
