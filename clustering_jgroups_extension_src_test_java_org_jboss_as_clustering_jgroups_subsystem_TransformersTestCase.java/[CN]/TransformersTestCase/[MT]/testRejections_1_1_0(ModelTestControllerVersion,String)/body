{
  ModelVersion version=JGroupsModel.VERSION_1_1_0.getVersion();
  KernelServicesBuilder builder=createKernelServicesBuilder(AdditionalInitialization.MANAGEMENT);
  builder.createLegacyKernelServicesBuilder(null,controllerVersion,version).addMavenResourceURL(mavenResourceURLs).dontPersistXml().skipReverseControllerCheck();
  KernelServices mainServices=builder.build();
  Assert.assertTrue(mainServices.isSuccessfulBoot());
  KernelServices legacyServices=mainServices.getLegacyServices(version);
  Assert.assertNotNull(legacyServices);
  Assert.assertTrue(legacyServices.isSuccessfulBoot());
  PathAddress subsystemAddress=PathAddress.pathAddress(PathElement.pathElement(SUBSYSTEM,JGroupsExtension.SUBSYSTEM_NAME));
  ModelTestUtils.checkFailedTransformedBootOperations(mainServices,version,builder.parseXmlResource(JGroupsSchema.CURRENT.format("subsystem-jgroups-%d_%d.xml")),new FailedOperationTransformationConfig().addFailedAttribute(subsystemAddress.append(StackResourceDefinition.WILDCARD_PATH).append(TransportResourceDefinition.WILDCARD_PATH),new FailedOperationTransformationConfig.RejectExpressionsConfig(ModelKeys.SHARED)).addFailedAttribute(subsystemAddress.append(StackResourceDefinition.WILDCARD_PATH).append(TransportResourceDefinition.WILDCARD_PATH).append(PropertyResourceDefinition.WILDCARD_PATH),new FailedOperationTransformationConfig.RejectExpressionsConfig(VALUE)).addFailedAttribute(subsystemAddress.append(StackResourceDefinition.WILDCARD_PATH).append(ProtocolResourceDefinition.WILDCARD_PATH).append(PropertyResourceDefinition.WILDCARD_PATH),new FailedOperationTransformationConfig.RejectExpressionsConfig(VALUE)).addFailedAttribute(subsystemAddress.append(StackResourceDefinition.WILDCARD_PATH).append(RelayResourceDefinition.PATH),FailedOperationTransformationConfig.REJECTED_RESOURCE).addFailedAttribute(subsystemAddress.append(StackResourceDefinition.WILDCARD_PATH).append(RelayResourceDefinition.PATH).append(RemoteSiteResourceDefinition.WILDCARD_PATH),FailedOperationTransformationConfig.REJECTED_RESOURCE));
}
