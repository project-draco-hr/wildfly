{
  ModelNode operation=createOperation(READ_RESOURCE_DESCRIPTION_OPERATION,"profile","test");
  operation.get(RECURSIVE).set(true);
  operation.get(OPERATIONS).set(true);
  ModelNode result=executeForResult(operation);
  ModelNode threadsDescription=result.get(CHILDREN,SUBSYSTEM,MODEL_DESCRIPTION,THREADS);
  assertTrue(threadsDescription.isDefined());
  ModelNode threadFactoryDescription=threadsDescription.get(CHILDREN,THREAD_FACTORY,MODEL_DESCRIPTION,"*");
  assertEquals(ModelType.STRING,threadFactoryDescription.require(ATTRIBUTES).require(NAME).require(TYPE).asType());
  assertEquals(ModelType.STRING,threadFactoryDescription.require(ATTRIBUTES).require(GROUP_NAME).require(TYPE).asType());
  assertEquals(ModelType.STRING,threadFactoryDescription.require(ATTRIBUTES).require(THREAD_NAME_PATTERN).require(TYPE).asType());
  assertEquals(ModelType.INT,threadFactoryDescription.require(ATTRIBUTES).require(PRIORITY).require(TYPE).asType());
  assertEquals(ModelType.LIST,threadFactoryDescription.require(ATTRIBUTES).require(PROPERTIES).require(TYPE).asType());
  ModelNode boundedQueueThreadPoolDesc=threadsDescription.get(CHILDREN,BOUNDED_QUEUE_THREAD_POOL,MODEL_DESCRIPTION,"*");
  assertEquals(ModelType.STRING,boundedQueueThreadPoolDesc.require(ATTRIBUTES).require(NAME).require(TYPE).asType());
  assertEquals(ModelType.STRING,boundedQueueThreadPoolDesc.require(ATTRIBUTES).require(THREAD_FACTORY).require(TYPE).asType());
  assertEquals(ModelType.LIST,boundedQueueThreadPoolDesc.require(ATTRIBUTES).require(PROPERTIES).require(TYPE).asType());
  assertEquals(ModelType.PROPERTY,boundedQueueThreadPoolDesc.require(ATTRIBUTES).require(PROPERTIES).require(VALUE_TYPE).asType());
  assertEquals(ModelType.INT,boundedQueueThreadPoolDesc.require(ATTRIBUTES).require(MAX_THREADS).require(TYPE).asType());
  assertEquals(ModelType.INT,boundedQueueThreadPoolDesc.require(ATTRIBUTES).require(CORE_THREADS).require(TYPE).asType());
  assertEquals(ModelType.INT,boundedQueueThreadPoolDesc.require(ATTRIBUTES).require(QUEUE_LENGTH).require(TYPE).asType());
  assertEquals(ModelType.OBJECT,boundedQueueThreadPoolDesc.require(ATTRIBUTES).require(KEEPALIVE_TIME).require(TYPE).asType());
  assertEquals(ModelType.LONG,boundedQueueThreadPoolDesc.require(ATTRIBUTES).require(KEEPALIVE_TIME).require(VALUE_TYPE).require(TIME).require(TYPE).asType());
  assertEquals(ModelType.STRING,boundedQueueThreadPoolDesc.require(ATTRIBUTES).require(KEEPALIVE_TIME).require(VALUE_TYPE).require(UNIT).require(TYPE).asType());
  assertEquals(ModelType.BOOLEAN,boundedQueueThreadPoolDesc.require(ATTRIBUTES).require(BLOCKING).require(TYPE).asType());
  assertEquals(ModelType.BOOLEAN,boundedQueueThreadPoolDesc.require(ATTRIBUTES).require(ALLOW_CORE_TIMEOUT).require(TYPE).asType());
  assertEquals(ModelType.STRING,boundedQueueThreadPoolDesc.require(ATTRIBUTES).require(HANDOFF_EXECUTOR).require(TYPE).asType());
  ModelNode queueLessThreadPoolDesc=threadsDescription.get(CHILDREN,QUEUELESS_THREAD_POOL,MODEL_DESCRIPTION,"*");
  assertEquals(ModelType.STRING,queueLessThreadPoolDesc.require(ATTRIBUTES).require(NAME).require(TYPE).asType());
  assertEquals(ModelType.STRING,queueLessThreadPoolDesc.require(ATTRIBUTES).require(THREAD_FACTORY).require(TYPE).asType());
  assertEquals(ModelType.LIST,queueLessThreadPoolDesc.require(ATTRIBUTES).require(PROPERTIES).require(TYPE).asType());
  assertEquals(ModelType.PROPERTY,queueLessThreadPoolDesc.require(ATTRIBUTES).require(PROPERTIES).require(VALUE_TYPE).asType());
  assertEquals(ModelType.INT,queueLessThreadPoolDesc.require(ATTRIBUTES).require(MAX_THREADS).require(TYPE).asType());
  assertEquals(ModelType.LONG,queueLessThreadPoolDesc.require(ATTRIBUTES).require(KEEPALIVE_TIME).require(VALUE_TYPE).require(TIME).require(TYPE).asType());
  assertEquals(ModelType.STRING,queueLessThreadPoolDesc.require(ATTRIBUTES).require(KEEPALIVE_TIME).require(VALUE_TYPE).require(UNIT).require(TYPE).asType());
  assertEquals(ModelType.BOOLEAN,queueLessThreadPoolDesc.require(ATTRIBUTES).require(BLOCKING).require(TYPE).asType());
  assertEquals(ModelType.STRING,queueLessThreadPoolDesc.require(ATTRIBUTES).require(HANDOFF_EXECUTOR).require(TYPE).asType());
  ModelNode scheduledThreadPoolDesc=threadsDescription.get(CHILDREN,SCHEDULED_THREAD_POOL,MODEL_DESCRIPTION,"*");
  assertEquals(ModelType.STRING,scheduledThreadPoolDesc.require(ATTRIBUTES).require(NAME).require(TYPE).asType());
  assertEquals(ModelType.STRING,scheduledThreadPoolDesc.require(ATTRIBUTES).require(THREAD_FACTORY).require(TYPE).asType());
  assertEquals(ModelType.LIST,scheduledThreadPoolDesc.require(ATTRIBUTES).require(PROPERTIES).require(TYPE).asType());
  assertEquals(ModelType.PROPERTY,scheduledThreadPoolDesc.require(ATTRIBUTES).require(PROPERTIES).require(VALUE_TYPE).asType());
  assertEquals(ModelType.INT,scheduledThreadPoolDesc.require(ATTRIBUTES).require(MAX_THREADS).require(TYPE).asType());
  assertEquals(ModelType.LONG,scheduledThreadPoolDesc.require(ATTRIBUTES).require(KEEPALIVE_TIME).require(VALUE_TYPE).require(TIME).require(TYPE).asType());
  assertEquals(ModelType.STRING,scheduledThreadPoolDesc.require(ATTRIBUTES).require(KEEPALIVE_TIME).require(VALUE_TYPE).require(UNIT).require(TYPE).asType());
  ModelNode unboundedThreadPoolDesc=threadsDescription.get(CHILDREN,UNBOUNDED_QUEUE_THREAD_POOL,MODEL_DESCRIPTION,"*");
  assertEquals(ModelType.STRING,unboundedThreadPoolDesc.require(ATTRIBUTES).require(NAME).require(TYPE).asType());
  assertEquals(ModelType.STRING,unboundedThreadPoolDesc.require(ATTRIBUTES).require(THREAD_FACTORY).require(TYPE).asType());
  assertEquals(ModelType.LIST,unboundedThreadPoolDesc.require(ATTRIBUTES).require(PROPERTIES).require(TYPE).asType());
  assertEquals(ModelType.PROPERTY,unboundedThreadPoolDesc.require(ATTRIBUTES).require(PROPERTIES).require(VALUE_TYPE).asType());
  assertEquals(ModelType.INT,unboundedThreadPoolDesc.require(ATTRIBUTES).require(MAX_THREADS).require(TYPE).asType());
  assertEquals(ModelType.LONG,unboundedThreadPoolDesc.require(ATTRIBUTES).require(KEEPALIVE_TIME).require(VALUE_TYPE).require(TIME).require(TYPE).asType());
  assertEquals(ModelType.STRING,unboundedThreadPoolDesc.require(ATTRIBUTES).require(KEEPALIVE_TIME).require(VALUE_TYPE).require(UNIT).require(TYPE).asType());
}
