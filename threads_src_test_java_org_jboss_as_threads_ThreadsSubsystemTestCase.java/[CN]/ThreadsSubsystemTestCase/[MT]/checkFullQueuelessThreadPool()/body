{
  ModelNode subsystem=model.require("profile").require("test").require("subsystem").require("threads");
  ModelNode threadPool=subsystem.require("queueless-thread-pool");
  assertEquals(1,threadPool.keys().size());
  assertEquals("test-pool",threadPool.require("test-pool").require("name").asString());
  assertTrue(threadPool.require("test-pool").require("blocking").asBoolean());
  assertEquals(new BigDecimal(100),threadPool.require("test-pool").require(MAX_THREADS).require(COUNT).asBigDecimal());
  assertEquals(new BigDecimal(5),threadPool.require("test-pool").require(MAX_THREADS).require(PER_CPU).asBigDecimal());
  assertEquals(1000L,threadPool.require("test-pool").require(KEEPALIVE_TIME).require(TIME).asLong());
  assertEquals("MILLISECONDS",threadPool.require("test-pool").require(KEEPALIVE_TIME).require(UNIT).asString());
  assertEquals("other",threadPool.require("test-pool").require("handoff-executor").asString());
  ModelNode props=threadPool.require("test-pool").require("properties");
  assertTrue(props.isDefined());
  assertEquals(2,props.asList().size());
  for (  ModelNode prop : props.asList()) {
    Property property=prop.asProperty();
    if (property.getName().equals("propA")) {
      assertEquals("valueA",property.getValue().asString());
    }
 else     if (property.getName().equals("propB")) {
      assertEquals("valueB",property.getValue().asString());
    }
 else {
      fail("Unknown property " + property);
    }
  }
}
