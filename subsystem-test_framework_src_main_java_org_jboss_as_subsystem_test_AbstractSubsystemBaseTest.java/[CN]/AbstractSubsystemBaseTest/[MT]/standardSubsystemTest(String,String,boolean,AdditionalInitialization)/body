{
  final String subsystemXml=configId == null ? getSubsystemXml() : getSubsystemXml(configId);
  final KernelServices servicesA=super.createKernelServicesBuilder(additionalInit).setSubsystemXml(subsystemXml).build();
  Assert.assertTrue("Subsystem boot failed!",servicesA.isSuccessfulBoot());
  final ModelNode modelA=servicesA.readWholeModel();
  validateModel(modelA);
  ModelTestUtils.scanForExpressionFormattedStrings(modelA);
  final String marshalled=servicesA.getPersistedSubsystemXml();
  servicesA.shutdown();
  String normalizedSubsystem=normalizeXML(subsystemXml);
  if (compareXml) {
    compareXml(configId,normalizedSubsystem,normalizeXML(marshalled));
  }
  final KernelServices servicesB=super.createKernelServicesBuilder(additionalInit).setSubsystemXml(marshalled).build();
  Assert.assertTrue("Subsystem boot failed!",servicesB.isSuccessfulBoot());
  final ModelNode modelB=servicesB.readWholeModel();
  compare(modelA,modelB);
  validateDescribeOperation(servicesB,additionalInit,modelA);
  assertRemoveSubsystemResources(servicesB,getIgnoredChildResourcesForRemovalTest());
  servicesB.shutdown();
  if (configIdResolvedModel != null) {
    final String subsystemResolvedXml=getSubsystemXml(configIdResolvedModel);
    final KernelServices servicesD=super.createKernelServicesBuilder(additionalInit).setSubsystemXml(subsystemResolvedXml).build();
    Assert.assertTrue("Subsystem w/ resolved xml boot failed!",servicesD.isSuccessfulBoot());
    final ModelNode modelD=servicesD.readWholeModel();
    validateModel(modelD);
    resolveandCompareModel(modelA,modelD);
  }
  return servicesA;
}
