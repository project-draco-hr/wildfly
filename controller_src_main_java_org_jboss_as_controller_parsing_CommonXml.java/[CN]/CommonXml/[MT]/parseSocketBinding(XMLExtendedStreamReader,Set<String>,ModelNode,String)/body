{
  final EnumSet<Attribute> required=EnumSet.of(Attribute.NAME);
  String name=null;
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    final String value=reader.getAttributeValue(i);
    if (reader.getAttributeNamespace(i) != null) {
      throw unexpectedAttribute(reader,i);
    }
 else {
      final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
      required.remove(attribute);
switch (attribute) {
case NAME:
{
          binding.get("name").set(name=value);
          break;
        }
case INTERFACE:
{
        if (!interfaces.contains(value)) {
          throw new XMLStreamException("Unknown interface " + value + " "+ attribute.getLocalName()+ " must be declared in element "+ Element.INTERFACES.getLocalName(),reader.getLocation());
        }
        binding.get("interface").set(value);
        break;
      }
case PORT:
{
      binding.get("port").set(parseBoundedIntegerAttribute(reader,i,0,65535));
      break;
    }
case FIXED_PORT:
{
    binding.get("fixed-port").set(Boolean.parseBoolean(value));
    break;
  }
case MULTICAST_ADDRESS:
{
  try {
    final InetAddress mcastAddr=InetAddress.getByName(value);
    if (!mcastAddr.isMulticastAddress()) {
      throw new XMLStreamException("Value " + value + " for attribute "+ attribute.getLocalName()+ " is not a valid multicast address",reader.getLocation());
    }
    binding.get("multicast-address").set(mcastAddr.toString());
  }
 catch (  final UnknownHostException e) {
    throw new XMLStreamException("Value " + value + " for attribute "+ attribute.getLocalName()+ " is not a valid multicast address",reader.getLocation(),e);
  }
}
case MULTICAST_PORT:
{
binding.get("multicast-port").set(parseBoundedIntegerAttribute(reader,i,1,65535));
break;
}
default :
throw unexpectedAttribute(reader,i);
}
}
}
if (!binding.has("interface")) {
binding.get("interface").set(inheritedInterfaceName);
}
if (!required.isEmpty()) {
throw missingRequired(reader,required);
}
requireNoContent(reader);
return name;
}
