{
  final Set<String> includedGroups=new HashSet<String>();
  final Set<String> socketBindings=new HashSet<String>();
  final String[] attrValues=requireAttributes(reader,Attribute.NAME.getLocalName(),Attribute.DEFAULT_INTERFACE.getLocalName());
  final String name=attrValues[0];
  final String defaultInterface=attrValues[1];
  final ModelNode bindingGroupUpdate=new ModelNode();
  bindingGroupUpdate.get(OP_ADDR).set(address).add("socket-binding-group",name);
  bindingGroupUpdate.get(OP).set(ADD);
  final ModelNode bindings=bindingGroupUpdate.get("bindings");
  bindings.setEmptyList();
  while (reader.nextTag() != END_ELEMENT) {
switch (Namespace.forUri(reader.getNamespaceURI())) {
case DOMAIN_1_0:
{
        final Element element=Element.forName(reader.getLocalName());
switch (element) {
case INCLUDE:
{
            if (!allowInclude) {
              throw unexpectedElement(reader);
            }
            final String includedGroup=readStringAttributeElement(reader,Attribute.SOCKET_BINDING_GROUP.getLocalName());
            if (includedGroups.contains(includedGroup)) {
              throw new XMLStreamException("Included socket-binding-group " + includedGroup + " already declared",reader.getLocation());
            }
            includedGroups.add(includedGroup);
            break;
          }
case SOCKET_BINDING:
{
          final String bindingName=parseSocketBinding(reader,interfaces,bindings.add(),defaultInterface);
          if (socketBindings.contains(bindingName)) {
            throw new XMLStreamException("socket-binding " + bindingName + " already declared",reader.getLocation());
          }
          socketBindings.add(bindingName);
          break;
        }
default :
      throw unexpectedElement(reader);
  }
  break;
}
default :
throw unexpectedElement(reader);
}
}
bindingUpdates.add(bindingGroupUpdate);
}
