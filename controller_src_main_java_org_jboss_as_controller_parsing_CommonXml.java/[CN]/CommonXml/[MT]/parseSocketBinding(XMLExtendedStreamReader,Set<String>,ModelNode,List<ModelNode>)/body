{
  final EnumSet<Attribute> required=EnumSet.of(Attribute.NAME,Attribute.PORT);
  String name=null;
  final ModelNode binding=new ModelNode();
  binding.get(OP_ADDR);
  binding.get(OP).set(ADD);
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    final String value=reader.getAttributeValue(i);
    if (!isNoNamespaceAttribute(reader,i)) {
      throw unexpectedAttribute(reader,i);
    }
 else {
      final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
      required.remove(attribute);
switch (attribute) {
case NAME:
{
          name=value;
          binding.get(OP_ADDR).set(address).add(SOCKET_BINDING,name);
          break;
        }
case INTERFACE:
{
        if (!interfaces.contains(value)) {
          throw MESSAGES.unknownInterface(value,attribute.getLocalName(),Element.INTERFACES.getLocalName(),reader.getLocation());
        }
        binding.get(INTERFACE).set(value);
        break;
      }
case PORT:
{
      binding.get(PORT).set(parseBoundedIntegerAttribute(reader,i,0,65535,true));
      break;
    }
case FIXED_PORT:
{
    binding.get(FIXED_PORT).set(Boolean.parseBoolean(value));
    break;
  }
case MULTICAST_ADDRESS:
{
  ModelNode mcastNode=parsePossibleExpression(value);
  if (mcastNode.getType() == ModelType.EXPRESSION) {
    binding.get(MULTICAST_ADDRESS).set(mcastNode);
  }
 else {
    try {
      final InetAddress mcastAddr=InetAddress.getByName(value);
      if (!mcastAddr.isMulticastAddress()) {
        throw MESSAGES.invalidMulticastAddress(value,attribute.getLocalName(),reader.getLocation());
      }
      binding.get(MULTICAST_ADDRESS).set(value);
    }
 catch (    final UnknownHostException e) {
      throw MESSAGES.invalidMulticastAddress(e,value,attribute.getLocalName(),reader.getLocation());
    }
  }
  break;
}
case MULTICAST_PORT:
{
binding.get(MULTICAST_PORT).set(parseBoundedIntegerAttribute(reader,i,1,65535,true));
break;
}
default :
throw unexpectedAttribute(reader,i);
}
}
}
if (!required.isEmpty()) {
throw missingRequired(reader,required);
}
requireNoContent(reader);
updates.add(binding);
return name;
}
