{
  long start=System.currentTimeMillis();
  requireNoAttributes(reader);
  final Set<String> found=new HashSet<String>();
  final ExtensionParsingContextImpl context=new ExtensionParsingContextImpl(reader.getXMLMapper());
  final Map<String,Future<XMLStreamException>> loadFutures=bootExecutor != null ? new HashMap<String,Future<XMLStreamException>>() : null;
  while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
    requireNamespace(reader,expectedNs);
    final Element element=Element.forName(reader.getLocalName());
    if (element != Element.EXTENSION) {
      throw unexpectedElement(reader);
    }
    final String moduleName=readStringAttributeElement(reader,Attribute.MODULE.getLocalName());
    if (!found.add(moduleName)) {
      throw invalidAttributeValue(reader,0);
    }
    if (loadFutures != null) {
      Callable<XMLStreamException> callable=new Callable<XMLStreamException>(){
        @Override public XMLStreamException call() throws Exception {
          return loadModule(moduleName,context);
        }
      }
;
      Future<XMLStreamException> future=bootExecutor.submit(callable);
      loadFutures.put(moduleName,future);
    }
 else {
      XMLStreamException xse=loadModule(moduleName,context);
      if (xse != null) {
        throw xse;
      }
      addExtensionAddOperation(address,list,moduleName);
    }
  }
  if (loadFutures != null) {
    for (    Map.Entry<String,Future<XMLStreamException>> entry : loadFutures.entrySet()) {
      try {
        XMLStreamException xse=entry.getValue().get();
        if (xse != null) {
          throw xse;
        }
      }
 catch (      InterruptedException e) {
        Thread.currentThread().interrupt();
        throw MESSAGES.moduleLoadingInterrupted(entry.getKey());
      }
catch (      ExecutionException e) {
        throw MESSAGES.failedToLoadModule(e,entry.getKey());
      }
      addExtensionAddOperation(address,list,entry.getKey());
    }
  }
  long elapsed=System.currentTimeMillis() - start;
  if (ROOT_LOGGER.isDebugEnabled()) {
    ROOT_LOGGER.debugf("Parsed extensions in [%d] ms",elapsed);
  }
}
