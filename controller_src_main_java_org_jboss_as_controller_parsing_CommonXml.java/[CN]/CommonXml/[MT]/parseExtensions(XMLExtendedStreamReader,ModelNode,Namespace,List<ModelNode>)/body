{
  long start=System.currentTimeMillis();
  requireNoAttributes(reader);
  final Set<String> found=new HashSet<String>();
  final ExtensionParsingContextImpl context=new ExtensionParsingContextImpl(reader.getXMLMapper());
  final Map<String,Future<XMLStreamException>> loadFutures=new HashMap<String,Future<XMLStreamException>>();
  while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
    requireNamespace(reader,expectedNs);
    final Element element=Element.forName(reader.getLocalName());
    if (element != Element.EXTENSION) {
      throw unexpectedElement(reader);
    }
    final String moduleName=readStringAttributeElement(reader,Attribute.MODULE.getLocalName());
    if (!found.add(moduleName)) {
      throw invalidAttributeValue(reader,0);
    }
    Future<XMLStreamException> future=bootExecutor.submit(new Callable<XMLStreamException>(){
      @Override public XMLStreamException call() throws Exception {
        try {
          final Module module=moduleLoader.loadModule(ModuleIdentifier.fromString(moduleName));
          boolean initialized=false;
          for (          final Extension extension : module.loadService(Extension.class)) {
            ClassLoader oldTccl=SecurityActions.setThreadContextClassLoader(extension.getClass());
            try {
              extension.initializeParsers(context);
            }
  finally {
              SecurityActions.setThreadContextClassLoader(oldTccl);
            }
            if (!initialized) {
              initialized=true;
            }
          }
          if (!initialized) {
            throw new IllegalStateException("No META-INF/services/" + Extension.class.getName() + " found for "+ module.getIdentifier());
          }
          return null;
        }
 catch (        final ModuleLoadException e) {
          return new XMLStreamException("Failed to load module",e);
        }
      }
    }
);
    loadFutures.put(moduleName,future);
  }
  for (  Map.Entry<String,Future<XMLStreamException>> entry : loadFutures.entrySet()) {
    try {
      XMLStreamException xse=entry.getValue().get();
      if (xse != null) {
        throw xse;
      }
    }
 catch (    InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new XMLStreamException(String.format("Interrupted awaiting loading of module %s",entry.getKey()));
    }
catch (    ExecutionException e) {
      throw new XMLStreamException(String.format("Failed loading module %s",entry.getKey()),e);
    }
    final ModelNode add=new ModelNode();
    add.get(OP_ADDR).set(address).add(EXTENSION,entry.getKey());
    add.get(OP).set(ADD);
    list.add(add);
  }
  long elapsed=System.currentTimeMillis() - start;
  System.out.println("Parsed extensions in " + elapsed + " ms");
}
