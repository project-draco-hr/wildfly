{
  String interfaceName=null;
  int port=-1;
  int securePort=-1;
  int maxThreads=-1;
  String securityRealm=null;
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    final String value=reader.getAttributeValue(i);
    if (!isNoNamespaceAttribute(reader,i)) {
      throw unexpectedAttribute(reader,i);
    }
 else {
      final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case INTERFACE:
{
          interfaceName=value;
          break;
        }
case PORT:
{
        port=Integer.parseInt(value);
        if (port < 0) {
          throw MESSAGES.invalidValueNegative(attribute.getLocalName(),port,reader.getLocation());
        }
        break;
      }
case SECURE_PORT:
{
      securePort=Integer.parseInt(value);
      if (securePort < 0) {
        throw MESSAGES.invalidValueNegative(attribute.getLocalName(),securePort,reader.getLocation());
      }
      break;
    }
case MAX_THREADS:
{
    maxThreads=Integer.parseInt(value);
    if (maxThreads < 1) {
      throw MESSAGES.invalidValueGreaterThan(attribute.getLocalName(),maxThreads,0,reader.getLocation());
    }
    break;
  }
case SECURITY_REALM:
{
  securityRealm=value;
  break;
}
default :
throw unexpectedAttribute(reader,i);
}
}
}
requireNoContent(reader);
if (interfaceName == null) {
throw missingRequired(reader,Collections.singleton(Attribute.INTERFACE.getLocalName()));
}
final ModelNode mgmtSocket=new ModelNode();
mgmtSocket.get(INTERFACE).set(interfaceName);
if (port > -1) {
mgmtSocket.get(PORT).set(port);
}
if (securePort > -1) {
mgmtSocket.get(SECURE_PORT).set(securePort);
}
if (securityRealm != null) {
mgmtSocket.get(SECURITY_REALM).set(securityRealm);
}
mgmtSocket.get(OP).set(ADD);
ModelNode operationAddress=address.clone();
operationAddress.add(MANAGEMENT_INTERFACE,HTTP_INTERFACE);
mgmtSocket.get(OP_ADDR).set(operationAddress);
list.add(mgmtSocket);
}
