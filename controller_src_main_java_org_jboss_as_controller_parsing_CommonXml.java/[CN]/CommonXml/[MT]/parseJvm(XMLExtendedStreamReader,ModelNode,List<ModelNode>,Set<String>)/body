{
  final List<ModelNode> attrUpdates=new ArrayList<ModelNode>();
  String name=null;
  String type=JvmType.SUN.toString();
  String home=null;
  Boolean debugEnabled=null;
  String debugOptions=null;
  Boolean envClasspathIgnored=null;
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    final String value=reader.getAttributeValue(i);
    if (!isNoNamespaceAttribute(reader,i)) {
      throw ParseUtils.unexpectedAttribute(reader,i);
    }
 else {
      final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case NAME:
{
          if (name != null)           throw ParseUtils.duplicateAttribute(reader,attribute.getLocalName());
          if (!jvmNames.add(value)) {
            throw new XMLStreamException("Duplicate JVM declaration " + value,reader.getLocation());
          }
          name=value;
          break;
        }
case JAVA_HOME:
{
        if (home != null)         throw ParseUtils.duplicateAttribute(reader,attribute.getLocalName());
        home=value;
        final ModelNode update=Util.getWriteAttributeOperation(null,"java-home",home);
        attrUpdates.add(update);
        break;
      }
case TYPE:
{
      try {
        Enum.valueOf(JvmType.class,value);
        type=value;
      }
 catch (      final IllegalArgumentException e) {
        throw ParseUtils.invalidAttributeValue(reader,i);
      }
      break;
    }
case DEBUG_ENABLED:
{
    if (debugEnabled != null)     throw ParseUtils.duplicateAttribute(reader,attribute.getLocalName());
    debugEnabled=Boolean.valueOf(value);
    final ModelNode update=Util.getWriteAttributeOperation(null,"debug-enabled",debugEnabled);
    attrUpdates.add(update);
    break;
  }
case DEBUG_OPTIONS:
{
  if (debugOptions != null)   throw ParseUtils.duplicateAttribute(reader,attribute.getLocalName());
  debugOptions=value;
  final ModelNode update=Util.getWriteAttributeOperation(null,"debug-options",debugOptions);
  attrUpdates.add(update);
  break;
}
case ENV_CLASSPATH_IGNORED:
{
if (envClasspathIgnored != null) throw ParseUtils.duplicateAttribute(reader,attribute.getLocalName());
envClasspathIgnored=Boolean.valueOf(value);
final ModelNode update=Util.getWriteAttributeOperation(null,"env-classpath-ignored",envClasspathIgnored);
attrUpdates.add(update);
break;
}
default :
throw ParseUtils.unexpectedAttribute(reader,i);
}
}
}
if (name == null) {
throw ParseUtils.missingRequired(reader,Collections.singleton(Attribute.NAME));
}
final ModelNode address=parentAddress.clone().add(ModelDescriptionConstants.JVM,name);
final ModelNode addUpdate=new ModelNode();
addUpdate.get(OP_ADDR).set(address);
addUpdate.get(OP).set(ADD);
addUpdate.get("name").set(name);
addUpdate.get("jvm-type").set(type);
updates.add(addUpdate);
for (final ModelNode attrUpdate : attrUpdates) {
attrUpdate.get(OP_ADDR).set(address);
updates.add(attrUpdate);
}
boolean hasJvmOptions=false;
boolean hasEnvironmentVariables=false;
boolean hasSystemProperties=false;
while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
switch (Namespace.forUri(reader.getNamespaceURI())) {
case DOMAIN_1_0:
{
final Element element=Element.forName(reader.getLocalName());
switch (element) {
case HEAP:
{
parseHeap(reader,address,updates);
break;
}
case PERMGEN:
{
parsePermgen(reader,address,updates);
break;
}
case STACK:
{
parseStack(reader,address,updates);
break;
}
case AGENT_LIB:
{
parseAgentLib(reader,address,updates);
break;
}
case AGENT_PATH:
{
parseAgentPath(reader,address,updates);
break;
}
case JAVA_AGENT:
{
parseJavaagent(reader,address,updates);
break;
}
case ENVIRONMENT_VARIABLES:
{
if (hasEnvironmentVariables) {
throw new XMLStreamException(element.getLocalName() + " already declared",reader.getLocation());
}
updates.add(Util.getWriteAttributeOperation(address,"environment-variables",parseProperties(reader)));
hasEnvironmentVariables=true;
break;
}
case SYSTEM_PROPERTIES:
{
if (hasSystemProperties) {
throw new XMLStreamException(element.getLocalName() + " already declared",reader.getLocation());
}
parseSystemProperties(reader,address,updates);
hasSystemProperties=true;
break;
}
case JVM_OPTIONS:
{
if (hasJvmOptions) {
throw new XMLStreamException(element.getLocalName() + " already declared",reader.getLocation());
}
parseJvmOptions(reader,address,updates);
hasJvmOptions=true;
break;
}
default :
throw ParseUtils.unexpectedElement(reader);
}
break;
}
default :
throw ParseUtils.unexpectedElement(reader);
}
}
}
