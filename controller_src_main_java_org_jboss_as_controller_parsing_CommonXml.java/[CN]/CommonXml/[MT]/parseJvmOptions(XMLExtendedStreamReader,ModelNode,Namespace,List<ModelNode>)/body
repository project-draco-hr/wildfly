{
  ParseUtils.requireNoAttributes(reader);
  boolean optionSet=false;
  while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
    requireNamespace(reader,expectedNs);
    final Element element=Element.forName(reader.getLocalName());
    if (element == Element.OPTION) {
      String option=null;
      final int count=reader.getAttributeCount();
      for (int i=0; i < count; i++) {
        final String attrValue=reader.getAttributeValue(i);
        if (!isNoNamespaceAttribute(reader,i)) {
          throw ParseUtils.unexpectedAttribute(reader,i);
        }
 else {
          final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case VALUE:
{
              option=attrValue;
              break;
            }
default :
          throw ParseUtils.unexpectedAttribute(reader,i);
      }
    }
  }
  if (option == null) {
    throw ParseUtils.missingRequired(reader,Collections.singleton(Attribute.NAME));
  }
  final ModelNode update=new ModelNode();
  update.get(OP_ADDR).set(address);
  update.get(OP).set(JVMHandlers.ADD_JVM_OPTION);
  update.get(JVMHandlers.JVM_OPTION).set(option);
  updates.add(update);
  optionSet=true;
  requireNoContent(reader);
}
 else {
  throw unexpectedElement(reader);
}
}
if (!optionSet) {
throw missingRequiredElement(reader,Collections.singleton(Element.OPTION));
}
}
