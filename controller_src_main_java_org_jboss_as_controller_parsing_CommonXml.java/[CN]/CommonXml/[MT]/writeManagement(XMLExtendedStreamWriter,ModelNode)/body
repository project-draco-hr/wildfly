{
  boolean hasSecurityRealm=management.get(SECURITY_REALMS).hasDefined(SECURITY_REALM);
  boolean hasConnection=management.get(CONNECTIONS).hasDefined(CONNECTION);
  if ((hasSecurityRealm == false) && (hasConnection == false)) {
    return;
  }
  writer.writeStartElement(Element.MANAGEMENT.getLocalName());
  if (hasSecurityRealm) {
    ModelNode securityRealms=management.get(SECURITY_REALMS).get(SECURITY_REALM);
    writer.writeStartElement(Element.SECURITY_REALMS.getLocalName());
    for (    Property variable : securityRealms.asPropertyList()) {
      writer.writeStartElement(Element.SECURITY_REALM.getLocalName());
      writeAttribute(writer,Attribute.NAME,variable.getName());
      ModelNode realm=variable.getValue();
      if (realm.has(SERVER_IDENTITIES)) {
        writer.writeStartElement(Element.SERVER_IDENTITIES.getLocalName());
        ModelNode serverIdentities=realm.get(SERVER_IDENTITIES);
        if (serverIdentities.has(SSL)) {
          writer.writeStartElement(Element.SSL.getLocalName());
          ModelNode ssl=serverIdentities.get(SSL);
          if (ssl.has(PROTOCOL)) {
            writer.writeAttribute(Attribute.PROTOCOL.getLocalName(),ssl.get(PROTOCOL).asString());
          }
          if (ssl.has(KEYSTORE)) {
            writer.writeStartElement(Element.KEYSTORE.getLocalName());
            ModelNode keystore=ssl.get(KEYSTORE);
            writer.writeAttribute(Attribute.PATH.getLocalName(),keystore.require(PATH).asString());
            if (keystore.has(RELATIVE_TO)) {
              writer.writeAttribute(Attribute.RELATIVE_TO.getLocalName(),keystore.require(RELATIVE_TO).asString());
            }
            writer.writeAttribute(Attribute.PASSWORD.getLocalName(),keystore.require(PASSWORD).asString());
            writer.writeEndElement();
          }
          writer.writeEndElement();
        }
        writer.writeEndElement();
      }
      if (realm.has(AUTHENTICATION)) {
        writer.writeStartElement(Element.AUTHENTICATION.getLocalName());
        ModelNode authentication=realm.require(AUTHENTICATION);
        if (authentication.has(USERS)) {
          ModelNode userDomain=authentication.get(USERS);
          ModelNode users=userDomain.require(USER);
          writer.writeStartElement(Element.USERS.getLocalName());
          for (          Property userProps : users.asPropertyList()) {
            String userName=userProps.getName();
            ModelNode currentUser=userProps.getValue();
            writer.writeStartElement(Element.USER.getLocalName());
            writer.writeAttribute(Attribute.USERNAME.getLocalName(),userName);
            if (currentUser.has(PASSWORD)) {
              writer.writeStartElement(Element.PASSWORD.getLocalName());
              writer.writeCharacters(currentUser.get(PASSWORD).asString());
              writer.writeEndElement();
            }
            writer.writeEndElement();
          }
          writer.writeEndElement();
        }
 else         if (authentication.has(LDAP)) {
          ModelNode userLdap=authentication.get(LDAP);
          writer.writeStartElement(Element.LDAP.getLocalName());
          writer.writeAttribute(Attribute.CONNECTION.getLocalName(),userLdap.require(CONNECTION).asString());
          writer.writeAttribute(Attribute.BASE_DN.getLocalName(),userLdap.require(BASE_DN).asString());
          writer.writeAttribute(Attribute.USERNAME_ATTRIBUTE.getLocalName(),userLdap.require(USERNAME_ATTRIBUTE).asString());
          if (userLdap.has(RECURSIVE)) {
            writer.writeAttribute(Attribute.RECURSIVE.getLocalName(),userLdap.require(RECURSIVE).asString());
          }
          if (userLdap.has(USER_DN)) {
            writer.writeAttribute(Attribute.USER_DN.getLocalName(),userLdap.require(USER_DN).asString());
          }
          writer.writeEndElement();
        }
        writer.writeEndElement();
      }
      writer.writeEndElement();
    }
    writer.writeEndElement();
  }
  if (hasConnection) {
    writer.writeStartElement(Element.CONNECTIONS.getLocalName());
    ModelNode connections=management.get(CONNECTIONS).get(CONNECTION);
    for (    Property variable : connections.asPropertyList()) {
      ModelNode connection=variable.getValue();
      String type=connection.require(TYPE).asString();
      if (LDAP.equals(type)) {
        writer.writeStartElement(Element.LDAP.getLocalName());
        writer.writeAttribute(Attribute.NAME.getLocalName(),variable.getName());
        writer.writeAttribute(Attribute.URL.getLocalName(),connection.require(URL).asString());
        writer.writeAttribute(Attribute.SEARCH_DN.getLocalName(),connection.require(SEARCH_DN).asString());
        writer.writeAttribute(Attribute.SEARCH_CREDENTIAL.getLocalName(),connection.require(SEARCH_CREDENTIAL).asString());
        if (connection.has(INITIAL_CONTEXT_FACTORY)) {
          writer.writeAttribute(Attribute.INITIAL_CONTEXT_FACTORY.getLocalName(),connection.require(INITIAL_CONTEXT_FACTORY).asString());
        }
        writer.writeEndElement();
      }
    }
    writer.writeEndElement();
  }
  writer.writeEndElement();
}
