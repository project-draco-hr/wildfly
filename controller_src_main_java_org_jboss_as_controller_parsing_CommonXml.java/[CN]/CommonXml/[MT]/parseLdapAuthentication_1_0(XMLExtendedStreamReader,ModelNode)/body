{
  ModelNode ldapAuthentication=authentication.get(LDAP);
  String connection=null;
  String baseDN=null;
  String usernameAttribute=null;
  String recursive=null;
  String userDN=null;
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    final String value=reader.getAttributeValue(i);
    if (!isNoNamespaceAttribute(reader,i)) {
      throw unexpectedAttribute(reader,i);
    }
 else {
      final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case CONNECTION:
{
          connection=value;
          break;
        }
case BASE_DN:
{
        baseDN=value;
        break;
      }
case USERNAME_ATTRIBUTE:
{
      usernameAttribute=value;
      break;
    }
case RECURSIVE:
{
    recursive=value;
    break;
  }
case USER_DN:
{
  userDN=value;
  break;
}
default :
{
throw unexpectedAttribute(reader,i);
}
}
}
}
Set<Attribute> missingAttributes=new HashSet<Attribute>();
if (connection == null) missingAttributes.add(Attribute.CONNECTION);
if (baseDN == null) missingAttributes.add(Attribute.BASE_DN);
if (usernameAttribute == null) missingAttributes.add(Attribute.USERNAME_ATTRIBUTE);
if (missingAttributes.size() > 0) throw missingRequired(reader,missingAttributes);
requireNoContent(reader);
ldapAuthentication.get(CONNECTION).set(connection);
ldapAuthentication.get(BASE_DN).set(baseDN);
ldapAuthentication.get(USERNAME_ATTRIBUTE).set(usernameAttribute);
if (recursive != null) {
ldapAuthentication.get(RECURSIVE).set(Boolean.valueOf(recursive));
}
if (userDN != null) {
ldapAuthentication.get(USER_DN).set(userDN);
}
}
