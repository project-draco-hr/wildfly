{
  String interfaceName=null;
  int port=0;
  int maxThreads=-1;
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    final String value=reader.getAttributeValue(i);
    if (reader.getAttributeNamespace(i) != null) {
      throw unexpectedAttribute(reader,i);
    }
 else {
      final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case INTERFACE:
{
          interfaceName=value;
          break;
        }
case PORT:
{
        port=Integer.parseInt(value);
        if (port < 0) {
          throw new XMLStreamException("Illegal '" + attribute.getLocalName() + "' value "+ port+ " -- cannot be negative",reader.getLocation());
        }
        break;
      }
case MAX_THREADS:
{
      maxThreads=Integer.parseInt(value);
      if (maxThreads < 1) {
        throw new XMLStreamException("Illegal '" + attribute.getLocalName() + "' value "+ maxThreads+ " -- must be greater than 0",reader.getLocation());
      }
      break;
    }
default :
  throw unexpectedAttribute(reader,i);
}
}
}
if (interfaceName == null) {
throw missingRequired(reader,Collections.singleton(Attribute.INTERFACE.getLocalName()));
}
final ModelNode addMgmt=new ModelNode();
addMgmt.get(OP_ADDR).set(address);
addMgmt.get(OP).set("add-management");
addMgmt.get("interface-name").set(interfaceName);
addMgmt.get("port").set(port);
list.add(addMgmt);
if (maxThreads > 0) {
final ModelNode setSocketThreads=new ModelNode();
setSocketThreads.get(OP_ADDR).set(address);
setSocketThreads.get(OP).set("write-management-socket-threads");
setSocketThreads.get("max-threads").set(maxThreads);
list.add(setSocketThreads);
}
reader.discardRemainder();
}
