{
  final PathAddress address=PathAddress.pathAddress(operation.get(OP_ADDR));
  final PathAddress serverAddress=address.subAddress(0,address.size() - 1);
  final PathAddress subsystemAddress=serverAddress.subAddress(0,address.size() - 2);
  final ModelNode subsystemModel=Resource.Tools.readModel(context.readResourceFromRoot(subsystemAddress,false),1);
  final ModelNode serverModel=Resource.Tools.readModel(context.readResourceFromRoot(serverAddress,false),1);
  final String name=address.getLastElement().getValue();
  final List<String> aliases=HostDefinition.ALIAS.unwrap(context,model);
  final String defaultWebModule=HostDefinition.DEFAULT_WEB_MODULE.resolveModelAttribute(context,model).asString();
  final Resource resource=context.readResource(PathAddress.EMPTY_ADDRESS);
  final String defaultServerName=UndertowRootDefinition.DEFAULT_SERVER.resolveModelAttribute(context,subsystemModel).asString();
  final String defaultHostName=ServerDefinition.DEFAULT_HOST.resolveModelAttribute(context,serverModel).asString();
  final String serverName=serverAddress.getLastElement().getValue();
  final boolean isDefaultHost=defaultServerName.equals(serverName) && name.equals(defaultHostName);
  final ModelNode defaultResponseCode=HostDefinition.DEFAULT_RESPONSE_CODE.resolveModelAttribute(context,model);
  final ServiceName virtualHostServiceName=UndertowService.virtualHostName(serverName,name);
  final Host service=defaultResponseCode.isDefined() ? new Host(name,aliases == null ? new LinkedList<String>() : aliases,defaultWebModule,defaultResponseCode.asInt()) : new Host(name,aliases == null ? new LinkedList<String>() : aliases,defaultWebModule);
  final ServiceBuilder<Host> builder=context.getServiceTarget().addService(virtualHostServiceName,service).addDependency(UndertowService.SERVER.append(serverName),Server.class,service.getServerInjection()).addDependency(UndertowService.UNDERTOW,UndertowService.class,service.getUndertowService());
  builder.setInitialMode(Mode.ON_DEMAND);
  if (isDefaultHost) {
    addCommonHost(context,name,aliases,serverName,virtualHostServiceName);
    builder.addAliases(UndertowService.DEFAULT_HOST);
  }
  builder.install();
  final ServiceName consoleRedirectName=UndertowService.consoleRedirectServiceName(serverName,name);
  if (context.getProcessType() == ProcessType.STANDALONE_SERVER) {
    final ConsoleRedirectService redirectService=new ConsoleRedirectService();
    final ServiceBuilder<ConsoleRedirectService> redirectBuilder=context.getServiceTarget().addService(consoleRedirectName,redirectService).addDependency(UndertowHttpManagementService.SERVICE_NAME,HttpManagement.class,redirectService.getHttpManagementInjector()).addDependency(virtualHostServiceName,Host.class,redirectService.getHostInjector()).setInitialMode(Mode.PASSIVE);
    redirectBuilder.install();
  }
 else {
    final ConsoleRedirectService redirectService=new ConsoleRedirectService();
    final ServiceBuilder<ConsoleRedirectService> redirectBuilder=context.getServiceTarget().addService(consoleRedirectName,redirectService).addDependency(virtualHostServiceName,Host.class,redirectService.getHostInjector()).setInitialMode(Mode.PASSIVE);
    redirectBuilder.install();
  }
}
