{
  if (stackName == null) {
    stackName=getDefaultStack(context);
  }
  PathAddress address=PathAddress.pathAddress(JGroupsSubsystemResourceDefinition.PATH);
  PathAddress stackAddress=address.append(StackResourceDefinition.pathElement(stackName));
  ModelNode stack=Resource.Tools.readModel(context.readResourceFromRoot(stackAddress,true));
  ModelNode transport=stack.get(ModelKeys.TRANSPORT,ModelKeys.TRANSPORT_NAME).clone();
  String transportName=TransportResourceDefinition.TYPE.resolveModelAttribute(context,transport).asString();
  ResourceDefinition transportDefinition=getProtocolMetricResourceDefinition(context,channelName,transportName);
  List<ModelNode> protocolOrdering=stack.get(ModelKeys.PROTOCOLS).clone().asList();
  final List<ResourceDefinition> protocolDefinitions=new ArrayList<ResourceDefinition>();
  for (  ModelNode protocolNameModelNode : protocolOrdering) {
    String protocolName=protocolNameModelNode.asString();
    ResourceDefinition protocolDefinition=getProtocolMetricResourceDefinition(context,channelName,protocolName);
    protocolDefinitions.add(protocolDefinition);
  }
  ResourceDefinition relayDefinition=null;
  if (stack.hasDefined(ModelKeys.RELAY)) {
    relayDefinition=getProtocolMetricResourceDefinition(context,channelName,"relay.RELAY2");
  }
  ManagementResourceRegistration subsystemRootRegistration=context.getResourceRegistrationForUpdate();
  ManagementResourceRegistration channelRegistration=subsystemRootRegistration.registerSubModel(new ChannelInstanceResourceDefinition(channelName,true));
  channelRegistration.registerSubModel(transportDefinition);
  for (  ResourceDefinition protocolDefinition : protocolDefinitions) {
    channelRegistration.registerSubModel(protocolDefinition);
  }
  if (stack.hasDefined(ModelKeys.RELAY)) {
    channelRegistration.registerSubModel(relayDefinition);
  }
}
