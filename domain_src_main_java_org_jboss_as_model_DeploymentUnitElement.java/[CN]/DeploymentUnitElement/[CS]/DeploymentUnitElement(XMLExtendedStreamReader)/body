{
  String fileName=null;
  byte[] sha1Hash=null;
  String allowed=null;
  String start=null;
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    final String value=reader.getAttributeValue(i);
    if (reader.getAttributeNamespace(i) != null) {
      throw unexpectedAttribute(reader,i);
    }
 else {
      final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case NAME:
{
          fileName=value;
          break;
        }
case SHA1:
{
        try {
          sha1Hash=hexStringToByteArray(value);
        }
 catch (        Exception e) {
          throw new XMLStreamException("Value " + value + " for attribute "+ attribute.getLocalName()+ " does not represent a properly hex-encoded SHA1 hash",reader.getLocation(),e);
        }
        break;
      }
case ALLOWED:
{
      allowed=value;
      break;
    }
case START:
{
    start=value;
    break;
  }
default :
throw unexpectedAttribute(reader,i);
}
}
}
if (fileName == null) {
throw missingRequired(reader,Collections.singleton(Attribute.NAME));
}
if (sha1Hash == null) {
throw missingRequired(reader,Collections.singleton(Attribute.SHA1));
}
this.key=new DeploymentUnitKey(fileName,sha1Hash);
this.allowed=allowed == null ? true : Boolean.valueOf(allowed);
this.start=start == null ? true : Boolean.valueOf(start);
requireNoContent(reader);
}
