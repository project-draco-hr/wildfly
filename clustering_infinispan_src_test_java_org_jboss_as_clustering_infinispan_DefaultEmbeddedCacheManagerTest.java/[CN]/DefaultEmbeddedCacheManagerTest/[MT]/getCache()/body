{
  @SuppressWarnings("unchecked") AdvancedCache<Object,Object> defaultCache=mock(AdvancedCache.class);
  @SuppressWarnings("unchecked") AdvancedCache<Object,Object> otherCache=mock(AdvancedCache.class);
  when(this.manager.<Object,Object>getCache("default",true)).thenReturn(defaultCache);
  when(this.manager.<Object,Object>getCache("other",true)).thenReturn(otherCache);
  when(defaultCache.getAdvancedCache()).thenReturn(defaultCache);
  when(otherCache.getAdvancedCache()).thenReturn(otherCache);
  Cache<Object,Object> result=this.subject.getCache("default");
  assertNotSame(defaultCache,result);
  assertEquals(result,defaultCache);
  assertSame(this.subject,result.getCacheManager());
  result=this.subject.getCache("other");
  assertNotSame(otherCache,result);
  assertEquals(result,otherCache);
  assertSame(this.subject,result.getCacheManager());
  result=this.subject.getCache(CacheContainer.DEFAULT_CACHE_NAME);
  assertNotSame(defaultCache,result);
  assertEquals(result,defaultCache);
  assertSame(this.subject,result.getCacheManager());
  result=this.subject.getCache(null);
  assertNotSame(defaultCache,result);
  assertEquals(result,defaultCache);
  assertSame(this.subject,result.getCacheManager());
  Cache<Object,Object> cache=result;
  AdvancedCache<Object,Object> advancedCache=cache.getAdvancedCache();
  assertSame(cache,advancedCache);
  AdvancedCache<Object,Object> classLoaderCache=advancedCache.with(Thread.currentThread().getContextClassLoader());
  verify(defaultCache).addInterceptor(isA(ClassLoaderAwareCache.ClassLoaderAwareCommandInterceptor.class),eq(0));
  assertNotSame(advancedCache,classLoaderCache);
  doThrow(new ConfigurationException("")).when(defaultCache).addInterceptor(isA(ClassLoaderAwareCache.ClassLoaderAwareCommandInterceptor.class),eq(0));
  AdvancedCache<Object,Object> classLoaderCache2=advancedCache.with(Thread.currentThread().getContextClassLoader());
  assertNotSame(advancedCache,classLoaderCache2);
}
