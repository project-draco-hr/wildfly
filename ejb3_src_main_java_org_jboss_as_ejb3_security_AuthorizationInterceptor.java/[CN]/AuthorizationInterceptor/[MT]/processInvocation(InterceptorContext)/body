{
  final Component component=context.getPrivateData(Component.class);
  if (component instanceof EJBComponent == false) {
    throw EjbLogger.ROOT_LOGGER.unexpectedComponent(component,EJBComponent.class);
  }
  final Method invokedMethod=context.getMethod();
  final ComponentView componentView=context.getPrivateData(ComponentView.class);
  final String viewClassOfInvokedMethod=componentView.getViewClass().getName();
  if (!this.viewClassName.equals(viewClassOfInvokedMethod) || !this.viewMethod.equals(invokedMethod)) {
    throw EjbLogger.ROOT_LOGGER.failProcessInvocation(this.getClass().getName(),invokedMethod,viewClassOfInvokedMethod,viewMethod,viewClassName);
  }
  final EJBComponent ejbComponent=(EJBComponent)component;
  final ServerSecurityManager securityManager=ejbComponent.getSecurityManager();
  final MethodInterfaceType methodIntfType=this.getMethodInterfaceType(componentView.getPrivateData(MethodIntf.class));
  final String previousContextID=setContextID(this.contextID);
  try {
    if (WildFlySecurityManager.isChecking()) {
      try {
        AccessController.doPrivileged(new PrivilegedExceptionAction<Object>(){
          @Override public ProtectionDomain run(){
            if (!securityManager.authorize(ejbComponent.getComponentName(),componentView.getProxyClass().getProtectionDomain().getCodeSource(),methodIntfType.name(),AuthorizationInterceptor.this.viewMethod,AuthorizationInterceptor.this.getMethodRolesAsPrincipals(),AuthorizationInterceptor.this.contextID)) {
              throw EjbLogger.ROOT_LOGGER.invocationOfMethodNotAllowed(invokedMethod,ejbComponent.getComponentName());
            }
            return null;
          }
        }
);
      }
 catch (      PrivilegedActionException e) {
        throw e.getException();
      }
    }
 else {
      if (!securityManager.authorize(ejbComponent.getComponentName(),componentView.getProxyClass().getProtectionDomain().getCodeSource(),methodIntfType.name(),this.viewMethod,this.getMethodRolesAsPrincipals(),this.contextID)) {
        throw EjbLogger.ROOT_LOGGER.invocationOfMethodNotAllowed(invokedMethod,ejbComponent.getComponentName());
      }
    }
    return context.proceed();
  }
  finally {
    setContextID(previousContextID);
  }
}
