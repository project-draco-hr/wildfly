{
synchronized (securityDomainUsers) {
    if (securityDomainUsers.containsKey(name)) {
      int count=securityDomainUsers.get(name);
      securityDomainUsers.put(name,(count + 1));
      return;
    }
 else {
      securityDomainUsers.put(name,1);
    }
    final List<ModelNode> updates=new ArrayList<ModelNode>();
    final ModelNode compositeOp=new ModelNode();
    compositeOp.get(OP).set(COMPOSITE);
    compositeOp.get(OP_ADDR).setEmptyList();
    ModelNode steps=compositeOp.get(STEPS);
    PathAddress address=PathAddress.pathAddress().append(SUBSYSTEM,"security").append(SECURITY_DOMAIN,name);
    steps.add(Util.createAddOperation(address));
    address=address.append(Constants.AUTHENTICATION,CLASSIC);
    steps.add(Util.createAddOperation(address));
    ModelNode loginModule=Util.createAddOperation(address.append(LOGIN_MODULE,"UsersRoles"));
    loginModule.get(CODE).set("UsersRoles");
    loginModule.get(FLAG).set(REQUIRED);
    loginModule.get(OPERATION_HEADERS).get(ALLOW_RESOURCE_SERVICE_RESTART).set(true);
    final ModelNode moduleOptions=loginModule.get(MODULE_OPTIONS);
    if (authenticationOptions != null) {
      for (      final String k : authenticationOptions.keySet()) {
        moduleOptions.add(k,authenticationOptions.get(k));
      }
    }
    steps.add(loginModule);
    updates.add(compositeOp);
    applyUpdates(updates);
  }
}
