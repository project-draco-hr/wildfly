{
  final Map<String,String> sslOptionsMap=new HashMap<String,String>();
  final Map<String,String> truststoreOptionsMap=new HashMap<String,String>();
  if (options != null) {
    for (    final Entry<String,String> entry : options.entrySet()) {
      final String k=entry.getKey();
      if (k.startsWith(SERVER_IDENTITY_SSL)) {
        final String key=k.substring(SERVER_IDENTITY_SSL.length());
        sslOptionsMap.put(key,entry.getValue());
      }
 else       if (k.startsWith(AUTHENTICATION_TRUSTORE)) {
        final String key=k.substring(AUTHENTICATION_TRUSTORE.length());
        truststoreOptionsMap.put(key,entry.getValue());
      }
    }
  }
  httpsConnSemaphore.acquire();
  try {
    addSecurityRealm(JBWS_DEPLOYER_HTTPS_LISTENER_REALM_NAME,sslOptionsMap,truststoreOptionsMap);
    final ModelNode composite=Util.getEmptyOperation(COMPOSITE,new ModelNode());
    final ModelNode steps=composite.get(STEPS);
    ModelNode op=createOpNode("subsystem=undertow/server=default-server/https-listener=" + JBWS_DEPLOYER_HTTPS_LISTENER_NAME,"add");
    op.get("socket-binding").set("https");
    op.get("security-realm").set(JBWS_DEPLOYER_HTTPS_LISTENER_REALM_NAME);
    steps.add(op);
    applyUpdate(composite);
  }
 catch (  Exception e) {
    httpsConnSemaphore.release();
    throw e;
  }
}
