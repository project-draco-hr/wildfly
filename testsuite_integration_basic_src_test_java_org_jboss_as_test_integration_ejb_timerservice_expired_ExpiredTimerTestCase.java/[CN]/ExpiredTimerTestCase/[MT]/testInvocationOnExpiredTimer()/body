{
  final CountDownLatch timeoutNotifier=new CountDownLatch(1);
  final CountDownLatch timeoutWaiter=new CountDownLatch(1);
  this.bean.createSingleActionTimer(TIMER_TIMEOUT_TIME_MS,new TimerConfig(null,false),timeoutNotifier,timeoutWaiter);
  final boolean timeoutInvoked=timeoutNotifier.await(TIMER_CALL_WAITING_S,TimeUnit.SECONDS);
  Assert.assertTrue("timeout method was not invoked (within " + TIMER_CALL_WAITING_S + " seconds)",timeoutInvoked);
  try {
    bean.invokeTimeRemaining();
    Assert.fail("Expecting exception " + NoMoreTimeoutsException.class.getSimpleName());
  }
 catch (  NoMoreTimeoutsException e) {
    log.info("Expected exception " + e.getClass().getSimpleName() + " was thrown on method getTimeRemaining");
  }
  try {
    bean.invokeGetNext();
    Assert.fail("Expecting exception " + NoMoreTimeoutsException.class.getSimpleName());
  }
 catch (  NoMoreTimeoutsException e) {
    log.info("Expected exception " + e.getClass().getSimpleName() + " was thrown on method getNextTimeout");
  }
  timeoutWaiter.countDown();
  int count=0;
  boolean passed=false;
  while (count < 20 && !passed) {
    try {
      bean.invokeTimeRemaining();
      Assert.fail("Expected to fail on invoking on an expired timer");
    }
 catch (    NoSuchObjectLocalException nsole) {
      log.info("Got the expected exception " + nsole);
      passed=true;
    }
catch (    NoMoreTimeoutsException e) {
      Thread.sleep(100);
      count++;
    }
  }
  if (!passed) {
    Assert.fail("Got NoMoreTimeoutsException rather than  NoSuchObjectLocalException");
  }
}
