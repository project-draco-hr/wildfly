{
  Map<String,Object> map=new HashMap<String,Object>();
  map.put("securityConstraints",constraints);
  map.put(ResourceKeys.USERDATA_PERM_CHECK,Boolean.TRUE);
  SecurityContext sc=SecurityActions.getSecurityContext();
  AbstractWebAuthorizationHelper helper=null;
  try {
    helper=SecurityHelperFactory.getWebAuthorizationHelper(sc);
  }
 catch (  Exception e) {
    UndertowLogger.ROOT_LOGGER.noAuthorizationHelper(e);
  }
  Subject callerSubject=sc.getUtil().getSubject();
  if (callerSubject == null) {
    callerSubject=new Subject();
  }
  boolean ok=helper.hasUserDataPermission(map,request,response,PolicyContext.getContextID(),callerSubject,new ArrayList<String>(account.getRoles()));
  if (!ok && response.getStatus() == HttpServletResponse.SC_OK) {
    try {
      response.sendError(HttpServletResponse.SC_FORBIDDEN);
    }
 catch (    IOException e) {
      throw new RuntimeException(e);
    }
  }
  return ok;
}
