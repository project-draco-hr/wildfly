{
  final String planA=getContentName();
  final ModelNode addressA=getContentAddress(ROLLOUT_PLANS_ADDRESS,ROLLOUT_PLAN,planA);
  final String planB=getContentName();
  final ModelNode addressB=getContentAddress(ROLLOUT_PLANS_ADDRESS,ROLLOUT_PLAN,planB);
  ModelNode overallHash=validateHashes(ROLLOUT_PLANS_ADDRESS,null,false);
  ModelNode op=Util.getEmptyOperation(ADD,addressA);
  op.get(CONTENT).set(ROLLOUT_PLAN_A);
  ModelNode response=masterClient.execute(op);
  validateResponse(response);
  response=masterClient.execute(getReadAttributeOperation(addressA,CONTENT));
  ModelNode returnVal=validateResponse(response);
  assertEquals(ROLLOUT_PLAN_A,returnVal);
  validateHashes(addressA,new ModelNode(),true);
  overallHash=validateHashes(ROLLOUT_PLANS_ADDRESS,overallHash,true);
  op=Util.getEmptyOperation(ADD,addressB);
  op.get(CONTENT).set(ROLLOUT_PLAN_B);
  response=masterClient.execute(op);
  validateResponse(response);
  response=masterClient.execute(getReadAttributeOperation(addressB,CONTENT));
  returnVal=validateResponse(response);
  assertEquals(ROLLOUT_PLAN_B,returnVal);
  validateHashes(addressB,new ModelNode(),true);
  overallHash=validateHashes(ROLLOUT_PLANS_ADDRESS,overallHash,true);
  op=Util.getEmptyOperation(READ_CHILDREN_NAMES_OPERATION,ROLLOUT_PLANS_ADDRESS);
  op.get(CHILD_TYPE).set(ROLLOUT_PLAN);
  response=masterClient.execute(op);
  returnVal=validateResponse(response);
  List<ModelNode> plans=returnVal.asList();
  assertEquals(2,plans.size());
  for (  ModelNode node : plans) {
    if (!planA.equals(node.asString())) {
      assertEquals(planB,node.asString());
    }
  }
  op=Util.getEmptyOperation(WRITE_ATTRIBUTE_OPERATION,addressB);
  op.get(NAME).set(CONTENT);
  op.get(VALUE).set(ROLLOUT_PLAN_C);
  response=masterClient.execute(op);
  validateResponse(response);
  response=masterClient.execute(getReadAttributeOperation(addressB,CONTENT));
  returnVal=validateResponse(response);
  assertEquals(ROLLOUT_PLAN_C,returnVal);
  ModelNode planBHash=validateHashes(addressB,new ModelNode(),true);
  overallHash=validateHashes(ROLLOUT_PLANS_ADDRESS,overallHash,true);
  op=Util.getEmptyOperation("store",addressB);
  op.get(HASH).set(planBHash);
  op.get(CONTENT).set(ROLLOUT_PLAN_B);
  response=masterClient.execute(op);
  validateResponse(response);
  response=masterClient.execute(getReadAttributeOperation(addressB,CONTENT));
  returnVal=validateResponse(response);
  assertEquals(ROLLOUT_PLAN_B,returnVal);
  planBHash=validateHashes(addressB,planBHash,true);
  overallHash=validateHashes(ROLLOUT_PLANS_ADDRESS,overallHash,true);
  op=Util.getEmptyOperation("store",addressB);
  op.get(HASH).set(new byte[20]);
  op.get(CONTENT).set(ROLLOUT_PLAN_B);
  response=masterClient.execute(op);
  validateFailedResponse(response);
  response=masterClient.execute(getReadAttributeOperation(addressB,CONTENT));
  returnVal=validateResponse(response);
  assertEquals(ROLLOUT_PLAN_B,returnVal);
  validateHashes(addressB,planBHash,false);
  overallHash=validateHashes(ROLLOUT_PLANS_ADDRESS,overallHash,false);
  op=Util.getEmptyOperation(REMOVE,addressB);
  response=masterClient.execute(op);
  validateResponse(response);
  overallHash=validateHashes(ROLLOUT_PLANS_ADDRESS,overallHash,true);
}
