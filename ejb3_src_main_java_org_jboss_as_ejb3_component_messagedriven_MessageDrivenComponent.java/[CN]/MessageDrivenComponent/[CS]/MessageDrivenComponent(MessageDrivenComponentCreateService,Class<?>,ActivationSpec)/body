{
  super(ejbComponentCreateService);
  StatelessObjectFactory<MessageDrivenComponentInstance> factory=new StatelessObjectFactory<MessageDrivenComponentInstance>(){
    @Override public MessageDrivenComponentInstance create(){
      return (MessageDrivenComponentInstance)createInstance();
    }
    @Override public void destroy(    MessageDrivenComponentInstance obj){
      obj.destroy();
    }
  }
;
  final PoolConfig poolConfig=ejbComponentCreateService.getPoolConfig();
  if (poolConfig == null) {
    ROOT_LOGGER.debug("Pooling is disabled for MDB " + ejbComponentCreateService.getComponentName());
    this.pool=null;
  }
 else {
    ROOT_LOGGER.debug("Using pool config " + poolConfig + " to create pool for MDB "+ ejbComponentCreateService.getComponentName());
    this.pool=poolConfig.createPool(factory);
  }
  this.activationSpec=activationSpec;
  this.messageListenerInterface=messageListenerInterface;
  final MessageEndpointService<?> service=new MessageEndpointService<Object>(){
    @Override public Class<Object> getMessageListenerInterface(){
      return (Class<Object>)messageListenerInterface;
    }
    @Override public TransactionManager getTransactionManager(){
      return MessageDrivenComponent.this.getTransactionManager();
    }
    @Override public boolean isDeliveryTransacted(    Method method) throws NoSuchMethodException {
      return getTransactionAttributeType(BEAN,method) == REQUIRED;
    }
    @Override public Object obtain(    long timeout,    TimeUnit unit){
      return createViewInstanceProxy(messageListenerInterface,emptyMap());
    }
    @Override public void release(    Object obj){
    }
  }
;
  this.endpointFactory=new JBossMessageEndpointFactory(getComponentClass().getClassLoader(),service);
}
