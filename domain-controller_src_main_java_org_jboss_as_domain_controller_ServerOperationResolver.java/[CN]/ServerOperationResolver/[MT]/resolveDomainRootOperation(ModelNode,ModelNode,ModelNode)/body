{
  Map<Set<ServerIdentity>,ModelNode> result=null;
  String opName=operation.require(OP).asString();
  if (SystemPropertyAddHandler.OPERATION_NAME.equals(opName) || SystemPropertyRemoveHandler.OPERATION_NAME.equals(opName)) {
    String propName=operation.require(NAME).asString();
    Set<ServerIdentity> servers=null;
    if (!hasSystemProperty(host,propName)) {
      if (host.hasDefined(SERVER_CONFIG)) {
        servers=new HashSet<ServerIdentity>();
        for (        Property serverProp : host.get(SERVER_CONFIG).asPropertyList()) {
          ModelNode server=serverProp.getValue();
          if (!hasSystemProperty(server,propName) && (!server.hasDefined(AUTO_START) || server.get(AUTO_START).asBoolean())) {
            String groupName=server.require(GROUP).asString();
            ModelNode serverGroup=domain.get(GROUP,groupName);
            if (!hasSystemProperty(serverGroup,propName)) {
              servers.add(new ServerIdentity(localHostName,groupName,serverProp.getName()));
            }
          }
        }
      }
    }
    if (servers != null && servers.size() > 0) {
      ModelNode serverOp=operation.clone();
      serverOp.get(OP_ADDR).setEmptyList();
      result=Collections.singletonMap(servers,serverOp);
    }
  }
 else   if (DeploymentFullReplaceHandler.OPERATION_NAME.equals(opName)) {
    String propName=operation.require(NAME).asString();
    Set<String> groups=getServerGroupsForDeployment(propName,domain);
    Set<ServerIdentity> allServers=new HashSet<ServerIdentity>();
    for (    String group : groups) {
      allServers.addAll(getServersForGroup(group,host));
    }
    return Collections.singletonMap(allServers,operation);
  }
  if (result == null) {
    result=Collections.emptyMap();
  }
  return result;
}
