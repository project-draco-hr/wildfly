{
  final File[] bundlePath=bundlePathList.toArray(new File[bundlePathList.size()]);
  int expectedLength=1 + layers.length + (expectAddons ? 2 : 0);
  if (expectedOtherRootPos < 0) {
    Assert.assertEquals(0,expectedStartPos);
  }
 else   if (expectedStartPos == 0) {
    Assert.assertEquals(expectedLength,expectedOtherRootPos);
  }
  if (expectedOtherRootPos < 1) {
    Assert.assertEquals("Correct bundle path length",expectedStartPos + expectedLength,bundlePath.length);
  }
 else {
    Assert.assertTrue("Correct bundle path length",bundlePath.length > expectedStartPos + expectedLength);
  }
  Assert.assertEquals(repoRoot,bundlePath[expectedStartPos]);
  for (int i=0; i < layers.length; i++) {
    File layer=new File(repoRoot,"system/layers/" + layers[i]);
    Assert.assertEquals(layer,bundlePath[expectedStartPos + i + 1]);
  }
  if (expectAddons) {
    File addOnBase=new File(repoRoot,"system/add-ons");
    Set<String> valid=new HashSet<String>(Arrays.asList("a","b"));
    for (int i=0; i < 2; i++) {
      File addOn=bundlePath[expectedStartPos + layers.length + i+ 1];
      Assert.assertEquals(addOnBase,addOn.getParentFile());
      String addOnName=addOn.getName();
      Assert.assertTrue(addOnName,valid.remove(addOnName));
    }
  }
  if (expectedOtherRootPos == 0) {
    for (int i=0; i < expectedStartPos; i++) {
      validateNotChild(bundlePath[i],repoRoot);
    }
  }
 else   if (expectedOtherRootPos > 0) {
    for (int i=expectedOtherRootPos; i < bundlePath.length; i++) {
      validateNotChild(bundlePath[i],repoRoot);
    }
  }
}
