{
  final BatchBuilder batchBuilder=context.getBatchBuilder();
  batchBuilder.addServiceValueIfNotExist(DeploymentChainProviderService.SERVICE_NAME,new DeploymentChainProviderService());
  final Value<DeploymentChain> deploymentChainValue=Values.immediateValue((DeploymentChain)new DeploymentChainImpl(RAR_DEPLOYMENT_CHAIN_SERVICE_NAME.toString()));
  final DeploymentChainService deploymentChainService=new DeploymentChainService(deploymentChainValue);
  batchBuilder.addService(RAR_DEPLOYMENT_CHAIN_SERVICE_NAME,deploymentChainService).addDependency(DeploymentChainProviderService.SERVICE_NAME,DeploymentChainProvider.class,new DeploymentChainProviderInjector<DeploymentChain>(deploymentChainValue,new RaDeploymentChainSelector(),RAR_DEPLOYMENT_CHAIN_PRIORITY));
  addDeploymentProcessor(batchBuilder,new NestedJarInlineProcessor(),NestedJarInlineProcessor.PRIORITY);
  addDeploymentProcessor(batchBuilder,new ManifestAttachmentProcessor(),ManifestAttachmentProcessor.PRIORITY);
  addDeploymentProcessor(batchBuilder,new AnnotationIndexProcessor(),AnnotationIndexProcessor.PRIORITY);
  addDeploymentProcessor(batchBuilder,new RarConfigProcessor(),RarConfigProcessor.PRIORITY);
  addDeploymentProcessor(batchBuilder,new ModuleDependencyProcessor(),ModuleDependencyProcessor.PRIORITY);
  addDeploymentProcessor(batchBuilder,new ModuleConfigProcessor(),ModuleConfigProcessor.PRIORITY);
  final InjectedValue<DeploymentModuleLoader> deploymentModuleLoaderValue=new InjectedValue<DeploymentModuleLoader>();
  DeploymentModuleLoaderProcessor deploymentLoaderProcessor=new DeploymentModuleLoaderProcessor(deploymentModuleLoaderValue);
  addDeploymentProcessor(batchBuilder,deploymentLoaderProcessor,DeploymentModuleLoaderProcessor.PRIORITY).addDependency(DeploymentModuleLoaderService.SERVICE_NAME,DeploymentModuleLoader.class,deploymentModuleLoaderValue);
  addDeploymentProcessor(batchBuilder,new ModuleDeploymentProcessor(),ModuleDeploymentProcessor.PRIORITY);
  addDeploymentProcessor(batchBuilder,new ModuleContextProcessor(),ModuleContextProcessor.PRIORITY);
  MdrService mdrService=new MdrService();
  batchBuilder.addService(MdrServices.IRONJACAMAR_MDR,mdrService);
  ResourceAdapterDeploymentRegistryService registryService=new ResourceAdapterDeploymentRegistryService();
  batchBuilder.addService(ConnectorServices.RESOURCE_ADAPTER_REGISTRY_SERVICE,registryService);
  RaDeploymentParsingProcessor raDeploymentParsingProcessor=new RaDeploymentParsingProcessor();
  addDeploymentProcessor(batchBuilder,raDeploymentParsingProcessor,RaDeploymentParsingProcessor.PRIORITY);
  IronJacamarDeploymentParsingProcessor ironJacamarDeploymentParsingProcessor=new IronJacamarDeploymentParsingProcessor();
  addDeploymentProcessor(batchBuilder,ironJacamarDeploymentParsingProcessor,IronJacamarDeploymentParsingProcessor.PRIORITY).addDependency(MdrServices.IRONJACAMAR_MDR,MetadataRepository.class,ironJacamarDeploymentParsingProcessor.getMdrInjector());
  ParsedRaDeploymentProcessor parsedRaDeploymentProcessor=new ParsedRaDeploymentProcessor();
  addDeploymentProcessor(batchBuilder,parsedRaDeploymentProcessor,ParsedRaDeploymentProcessor.PRIORITY).addDependency(TxnServices.JBOSS_TXN_TRANSACTION_MANAGER,com.arjuna.ats.jbossatx.jta.TransactionManagerService.class,parsedRaDeploymentProcessor.getTxmInjector()).addDependency(MdrServices.IRONJACAMAR_MDR,MetadataRepository.class,parsedRaDeploymentProcessor.getMdrInjector()).addDependency(ConnectorServices.RESOURCE_ADAPTER_REGISTRY_SERVICE,ResourceAdapterDeploymentRegistry.class,parsedRaDeploymentProcessor.getRegistryInjector()).addDependency(ConnectorServices.CONNECTOR_CONFIG_SERVICE,ConnectorSubsystemConfiguration.class,parsedRaDeploymentProcessor.getConfigInjector()).addDependency(NamingService.SERVICE_NAME).addDependency(ConnectorServices.DEFAULT_BOOTSTRAP_CONTEXT_SERVICE);
  RaXmlDeploymentProcessor raXmlDeploymentProcessor=new RaXmlDeploymentProcessor();
  addDeploymentProcessor(batchBuilder,raXmlDeploymentProcessor,RaXmlDeploymentProcessor.PRIORITY).addDependency(TxnServices.JBOSS_TXN_TRANSACTION_MANAGER,com.arjuna.ats.jbossatx.jta.TransactionManagerService.class,raXmlDeploymentProcessor.getTxmInjector()).addDependency(MdrServices.IRONJACAMAR_MDR,MetadataRepository.class,raXmlDeploymentProcessor.getMdrInjector()).addDependency(ConnectorServices.RESOURCE_ADAPTER_REGISTRY_SERVICE,ResourceAdapterDeploymentRegistry.class,raXmlDeploymentProcessor.getRegistryInjector()).addDependency(ConnectorServices.CONNECTOR_CONFIG_SERVICE,ConnectorSubsystemConfiguration.class,raXmlDeploymentProcessor.getConfigInjector()).addDependency(ResourceAdaptersServices.RESOURCEADAPTERS_SERVICE,ResourceAdapters.class,raXmlDeploymentProcessor.getRaxmlValueInjector()).addDependency(NamingService.SERVICE_NAME).addDependency(ConnectorServices.DEFAULT_BOOTSTRAP_CONTEXT_SERVICE).setInitialMode(Mode.ACTIVE);
}
