{
  container.start(CONTAINER_1);
  deployer.deploy(DEPLOYMENT_1_SINGLE);
  deployer.deploy(DEPLOYMENT_1);
  container.start(CONTAINER_2);
  deployer.deploy(DEPLOYMENT_2_SINGLE);
  deployer.deploy(DEPLOYMENT_2);
  final ContextSelector<EJBClientContext> previousSelector=EJBClientContextSelector.setup(PROPERTIES_FILE);
  boolean container1Stopped=false;
  boolean container2Stopped=false;
  try {
    ViewChangeListener listener=directory.lookupStateless(ViewChangeListenerBean.class,ViewChangeListener.class);
    this.establishView(listener,NODE_1,NODE_2);
    CounterRemoteHome home=directory.lookupHome(CounterBean.class,CounterRemoteHome.class);
    CounterRemote remoteCounter=home.create();
    Assert.assertNotNull(remoteCounter);
    final CounterSingletonRemote destructionCounter=singletonDirectory.lookupSingleton(CounterSingleton.class,CounterSingletonRemote.class);
    destructionCounter.resetDestroyCount();
    final int NUM_TIMES=25;
    for (int i=0; i < NUM_TIMES; i++) {
      final CounterResult result=remoteCounter.increment();
      log.info("Counter incremented to " + result.getCount() + " on node "+ result.getNodeName());
    }
    final CounterResult result=remoteCounter.getCount();
    Assert.assertNotNull("Result from remote stateful counter was null",result);
    Assert.assertEquals("Unexpected count from remote counter",NUM_TIMES,result.getCount());
    Assert.assertEquals("Nothing should have been destroyed yet",0,destructionCounter.getDestroyCount());
    final int totalCountBeforeShuttingDownANode=result.getCount();
    final String previousInvocationNodeName=result.getNodeName();
    if (previousInvocationNodeName.equals(NODE_1)) {
      if (undeployOnly) {
        deployer.undeploy(DEPLOYMENT_1);
        deployer.undeploy(DEPLOYMENT_1_SINGLE);
      }
 else {
        container.stop(CONTAINER_1);
      }
      this.establishView(listener,NODE_2);
      container1Stopped=true;
    }
 else {
      if (undeployOnly) {
        deployer.undeploy(DEPLOYMENT_2);
        deployer.undeploy(DEPLOYMENT_2_SINGLE);
      }
 else {
        container.stop(CONTAINER_2);
      }
      this.establishView(listener,NODE_1);
      container2Stopped=true;
    }
    CounterResult resultAfterShuttingDownANode=remoteCounter.increment();
    Assert.assertNotNull("Result from remote stateful counter, after shutting down a node was null",resultAfterShuttingDownANode);
    Assert.assertEquals("Unexpected count from remote counter, after shutting down a node",totalCountBeforeShuttingDownANode + 1,resultAfterShuttingDownANode.getCount());
    Assert.assertFalse("Result was received from an unexpected node, after shutting down a node",previousInvocationNodeName.equals(resultAfterShuttingDownANode.getNodeName()));
    final int countBeforeDecrementing=resultAfterShuttingDownANode.getCount();
    final String aliveNode=resultAfterShuttingDownANode.getNodeName();
    for (int i=NUM_TIMES; i > 0; i--) {
      resultAfterShuttingDownANode=remoteCounter.decrement();
      Assert.assertNotNull("Result from remote stateful counter, after shutting down a node was null",resultAfterShuttingDownANode);
      Assert.assertEquals("Result was received from an unexpected node, after shutting down a node",aliveNode,resultAfterShuttingDownANode.getNodeName());
      log.info("Counter decremented to " + resultAfterShuttingDownANode.getCount() + " on node "+ resultAfterShuttingDownANode.getNodeName());
    }
    final CounterResult finalResult=remoteCounter.getCount();
    Assert.assertNotNull("Result from remote stateful counter, after shutting down a node was null",finalResult);
    final int finalCount=finalResult.getCount();
    final String finalNodeName=finalResult.getNodeName();
    Assert.assertEquals("Result was received from an unexpected node, after shutting down a node",aliveNode,finalNodeName);
    Assert.assertEquals("Unexpected count from remote counter, after shutting down a node",countBeforeDecrementing - NUM_TIMES,finalCount);
    Assert.assertEquals("Nothing should have been destroyed yet",0,destructionCounter.getDestroyCount());
    remoteCounter.remove();
    Assert.assertEquals("SFSB was not destroyed",1,destructionCounter.getDestroyCount());
  }
  finally {
    if (previousSelector != null) {
      EJBClientContext.setSelector(previousSelector);
    }
    if (!container1Stopped) {
      deployer.undeploy(DEPLOYMENT_1);
      deployer.undeploy(DEPLOYMENT_1_SINGLE);
      container.stop(CONTAINER_1);
    }
    if (!container2Stopped) {
      deployer.undeploy(DEPLOYMENT_2);
      deployer.undeploy(DEPLOYMENT_2_SINGLE);
      container.stop(CONTAINER_2);
    }
  }
}
