{
  final Class<?>[] parameters;
  try {
    parameters=Classes.convertToJavaClasses(parsedQuery.getMethodParams().iterator(),entity.getJDBCApplication().getClassLoader());
  }
 catch (  ClassNotFoundException e) {
    throw MESSAGES.failedToConvertMethodParamsToClasses(parsedQuery.getMethodParams());
  }
  final List<Method> methods=getQueryMethods(parsedQuery.getMethodName(),parameters);
  final Class<?> qlCompiler=parsedQuery.getQlCompiler() != null ? parsedQuery.getQlCompiler() : entity.getQlCompiler();
  final JDBCReadAheadMetaData readAhead;
  if (parsedQuery.getReadAheadMetaData() != null) {
    readAhead=new JDBCReadAheadMetaData(parsedQuery.getReadAheadMetaData(),entity.getReadAhead());
  }
 else {
    readAhead=entity.getReadAhead();
  }
  final List<JDBCQueryMetaData> built=new ArrayList<JDBCQueryMetaData>(methods.size());
  for (  Method method : methods) {
    final JDBCQueryMetaData defaultValue=entity.getQueryMetaDataForMethod(method);
    final JDBCQueryMetaData queryMetaData;
    final boolean isResultTypeMappingLocal=defaultValue != null && defaultValue.isResultTypeMappingLocal();
switch (parsedQuery.getType()) {
case RAW_SQL:
{
        queryMetaData=new JDBCRawSqlQueryMetaData(method,qlCompiler,parsedQuery.isLazyResultsetLoading());
        break;
      }
case JBOSS_QL:
{
      queryMetaData=new JDBCJBossQLQueryMetaData(isResultTypeMappingLocal,parsedQuery.getQuery(),method,readAhead,qlCompiler,parsedQuery.isLazyResultsetLoading());
      break;
    }
case DYNAMIC_QL:
{
    queryMetaData=new JDBCDynamicQLQueryMetaData(isResultTypeMappingLocal,method,readAhead,qlCompiler,parsedQuery.isLazyResultsetLoading());
    break;
  }
case DECLARED_QL:
{
  queryMetaData=new JDBCDeclaredQueryMetaData(isResultTypeMappingLocal,method,readAhead,qlCompiler,parsedQuery.isLazyResultsetLoading(),parsedQuery.getDeclaredParts());
  break;
}
default :
{
if (defaultValue != null && defaultValue instanceof JDBCQlQueryMetaData) {
  queryMetaData=new JDBCQlQueryMetaData((JDBCQlQueryMetaData)defaultValue,readAhead,qlCompiler,false);
}
 else {
  throw MESSAGES.errorInQueryForMethod(method.getName());
}
break;
}
}
built.add(queryMetaData);
}
return built;
}
