{
  if (isRemoved()) {
    throw LoggingMessages.MESSAGES.cannotSetRemovedProperty(propertyName,getDescription(),getName());
  }
  if (propertyName == null) {
    throw LoggingMessages.MESSAGES.nullVar("propertyName");
  }
  final boolean replacement=properties.containsKey(propertyName);
  final boolean constructorProp=contains(constructorProperties,propertyName);
  final Class<?> useClass=(appenderClass == null ? actualClass : appenderClass);
  final Method setter=getPropertySetter(useClass,propertyName);
  if (setter == null && !constructorProp) {
    throw LoggingMessages.MESSAGES.propertySetterNotFound(propertyName,getDescription(),getName());
  }
  final String oldValue=properties.put(propertyName,value);
  getConfiguration().addAction(new ConfigAction<ObjectProducer>(){
    public ObjectProducer validate() throws IllegalArgumentException {
      if (setter == null) {
        return ObjectProducer.NULL_PRODUCER;
      }
      final Class<?> propertyType=getPropertyType(useClass,propertyName);
      if (propertyType == null) {
        throw LoggingMessages.MESSAGES.propertyTypeNotFound(propertyName,getDescription(),getName());
      }
      return getConfiguration().getValue(useClass,propertyName,propertyType,value,false);
    }
    public void applyPreCreate(    final ObjectProducer param){
    }
    public void applyPostCreate(    final ObjectProducer param){
      if (setter != null) {
        final T instance=getRefs().get(getName());
        if (isLog4jAppender()) {
          try {
            setter.invoke(((Log4jAppenderHandler)instance).getAppender(),param.getObject());
          }
 catch (          Throwable e) {
            e.printStackTrace();
          }
        }
 else {
          try {
            setter.invoke(instance,param.getObject());
          }
 catch (          Throwable e) {
            e.printStackTrace();
          }
        }
      }
    }
    public void rollback(){
      if (replacement) {
        properties.put(propertyName,oldValue);
      }
 else {
        properties.remove(propertyName);
      }
    }
  }
);
}
