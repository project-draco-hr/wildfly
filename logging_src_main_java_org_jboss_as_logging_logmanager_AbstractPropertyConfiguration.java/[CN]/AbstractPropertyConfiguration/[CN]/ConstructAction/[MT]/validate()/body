{
  final int length=constructorProperties.length;
  final Class<?>[] paramTypes=new Class<?>[length];
  for (int i=0; i < length; i++) {
    final String property=constructorProperties[i];
    final Class<?> type=getConstructorPropertyType(actualClass,property);
    if (type == null) {
      throw LoggingMessages.MESSAGES.invalidProperty(property,getDescription(),getName(),appenderClass);
    }
    paramTypes[i]=type;
  }
  final Constructor<? extends T> constructor;
  final Constructor<? extends Appender> appenderConstructor;
  try {
    if (appenderClass != null) {
      constructor=actualClass.getConstructor(Appender.class);
      appenderConstructor=appenderClass.getConstructor(paramTypes);
    }
 else {
      constructor=actualClass.getConstructor(paramTypes);
      appenderConstructor=null;
    }
  }
 catch (  Exception e) {
    throw LoggingMessages.MESSAGES.failedToLocateConstructor(e,className,getDescription(),getName());
  }
  final Object[] params=new Object[length];
  final Class<?> c=(appenderClass == null ? actualClass : appenderClass);
  for (int i=0; i < length; i++) {
    final String property=constructorProperties[i];
    if (!properties.containsKey(property)) {
      throw LoggingMessages.MESSAGES.invalidProperty(property,getDescription(),getName(),c);
    }
    final String valueString=properties.get(property);
    final Object value=getConfiguration().getValue(c,property,paramTypes[i],valueString,true).getObject();
    params[i]=value;
  }
  try {
    if (appenderConstructor != null) {
      getConfiguration().addAppenderName(getName());
      return constructor.newInstance(appenderConstructor.newInstance(params));
    }
    return constructor.newInstance(params);
  }
 catch (  Exception e) {
    throw LoggingMessages.MESSAGES.cannotInstantiateClass(e,className,getDescription(),getName());
  }
}
