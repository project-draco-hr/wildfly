{
  VirtualFile child=root.getChild(startPath);
  if (startPath.length() > 1 && child == root) {
    return Collections.<Resource>emptySet().iterator();
  }
  VirtualFileFilter filter=new VirtualFileFilter(){
    @Override public boolean accepts(    VirtualFile file){
      return file.isFile();
    }
  }
;
  final Iterator<VirtualFile> children;
  try {
    children=(recursive ? child.getChildrenRecursively(filter) : child.getChildren(filter)).iterator();
  }
 catch (  IOException ex) {
    throw new IllegalStateException(ex);
  }
  return new Iterator<Resource>(){
    @Override public boolean hasNext(){
      return children.hasNext();
    }
    @Override public Resource next(){
      VirtualFile file=children.next();
      URL fileURL;
      try {
        fileURL=file.toURL();
      }
 catch (      MalformedURLException ex) {
        throw new IllegalStateException(ex);
      }
      return new VFSEntryResource(file.getPathNameRelativeTo(root),file,fileURL);
    }
    @Override public void remove(){
      throw new UnsupportedOperationException();
    }
  }
;
}
