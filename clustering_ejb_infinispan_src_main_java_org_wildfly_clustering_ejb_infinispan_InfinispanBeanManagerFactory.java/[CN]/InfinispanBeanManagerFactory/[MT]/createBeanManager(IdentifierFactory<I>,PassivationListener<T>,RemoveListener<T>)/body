{
  MarshallingContext context=new SimpleMarshallingContextFactory().createMarshallingContext(this.configuration.getMarshallingConfigurationRepository(),this.configuration.getBeanContext().getClassLoader());
  MarshalledValueFactory<MarshallingContext> factory=new SimpleMarshalledValueFactory(context);
  Cache<BeanKey<I>,BeanEntry<I>> beanCache=this.configuration.getCache();
  Cache<BeanGroupKey<I>,BeanGroupEntry<I,T>> groupCache=this.configuration.getCache();
  final CacheProperties properties=new InfinispanCacheProperties(groupCache.getCacheConfiguration());
  final String beanName=this.configuration.getBeanContext().getBeanName();
  BeanGroupFactory<I,T> groupFactory=new InfinispanBeanGroupFactory<>(groupCache,beanCache,factory,context,properties);
  Configuration<BeanGroupKey<I>,BeanGroupEntry<I,T>,BeanGroupFactory<I,T>> groupConfiguration=new SimpleConfiguration<>(groupCache,groupFactory);
  BeanFactory<I,T> beanFactory=new InfinispanBeanFactory<>(beanName,groupFactory,beanCache,properties,this.configuration.getBeanContext().getTimeout(),properties.isPersistent() ? passivationListener : null);
  Configuration<BeanKey<I>,BeanEntry<I>,BeanFactory<I,T>> beanConfiguration=new SimpleConfiguration<>(beanCache,beanFactory);
  final NodeFactory<Address> nodeFactory=this.configuration.getNodeFactory();
  final Registry<String,?> registry=this.configuration.getRegistry();
  final KeyAffinityServiceFactory affinityFactory=this.configuration.getKeyAffinityServiceFactory();
  final CommandDispatcherFactory dispatcherFactory=this.configuration.getCommandDispatcherFactory();
  final Time timeout=this.configuration.getBeanContext().getTimeout();
  final ScheduledExecutorService scheduler=this.configuration.getScheduler();
  final ExpirationConfiguration<T> expiration=new ExpirationConfiguration<T>(){
    @Override public Time getTimeout(){
      return timeout;
    }
    @Override public RemoveListener<T> getRemoveListener(){
      return removeListener;
    }
    @Override public ScheduledExecutorService getExecutor(){
      return scheduler;
    }
  }
;
  final Executor executor=this.configuration.getExecutor();
  final BeanPassivationConfiguration passivationConfig=this.configuration.getPassivationConfiguration();
  final PassivationConfiguration<T> passivation=new PassivationConfiguration<T>(){
    @Override public PassivationListener<T> getPassivationListener(){
      return passivationListener;
    }
    @Override public BeanPassivationConfiguration getConfiguration(){
      return passivationConfig;
    }
    @Override public Executor getExecutor(){
      return executor;
    }
  }
;
  InfinispanBeanManagerConfiguration<T> configuration=new InfinispanBeanManagerConfiguration<T>(){
    @Override public String getBeanName(){
      return beanName;
    }
    @Override public KeyAffinityServiceFactory getAffinityFactory(){
      return affinityFactory;
    }
    @Override public Registry<String,?> getRegistry(){
      return registry;
    }
    @Override public NodeFactory<Address> getNodeFactory(){
      return nodeFactory;
    }
    @Override public CommandDispatcherFactory getCommandDispatcherFactory(){
      return dispatcherFactory;
    }
    @Override public ExpirationConfiguration<T> getExpirationConfiguration(){
      return expiration;
    }
    @Override public PassivationConfiguration<T> getPassivationConfiguration(){
      return passivation;
    }
    @Override public CacheProperties getProperties(){
      return properties;
    }
  }
;
  return new InfinispanBeanManager<>(configuration,identifierFactory,beanConfiguration,groupConfiguration);
}
