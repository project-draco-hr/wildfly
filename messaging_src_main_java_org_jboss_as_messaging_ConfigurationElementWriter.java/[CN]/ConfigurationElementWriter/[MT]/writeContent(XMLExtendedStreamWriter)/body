{
  Set<TransportConfiguration> acceptors=config.getAcceptorConfigurations();
  if (acceptors != null && acceptors.size() > 0) {
    streamWriter.writeStartElement(Element.ACCEPTORS.getLocalName());
    for (    TransportConfiguration transportConfig : acceptors) {
      streamWriter.writeStartElement(Element.ACCEPTOR.getLocalName());
      ElementUtils.writeTransportConfiguration(transportConfig,streamWriter);
      streamWriter.writeEndElement();
    }
    streamWriter.writeEndElement();
  }
  Map<String,AddressSettings> addresses=config.getAddressesSettings();
  if (addresses != null && addresses.size() > 0) {
    streamWriter.writeStartElement(Element.ADDRESS_SETTINGS.getLocalName());
    for (    Map.Entry<String,AddressSettings> entry : addresses.entrySet()) {
      streamWriter.writeStartElement(Element.ADDRESS_SETTING.getLocalName());
      streamWriter.writeAttribute(Attribute.MATCH.getLocalName(),entry.getKey());
      AddressSettings addressSettings=entry.getValue();
      ElementUtils.writeSimpleElement(Element.DEAD_LETTER_ADDRESS_NODE_NAME,addressSettings.getDeadLetterAddress(),streamWriter);
      ElementUtils.writeSimpleElement(Element.EXPIRY_ADDRESS_NODE_NAME,addressSettings.getExpiryAddress(),streamWriter);
      ElementUtils.writeSimpleElement(Element.REDELIVERY_DELAY_NODE_NAME,String.valueOf(addressSettings.getRedeliveryDelay()),streamWriter);
      ElementUtils.writeSimpleElement(Element.MAX_SIZE_BYTES_NODE_NAME,String.valueOf(addressSettings.getMaxSizeBytes()),streamWriter);
      ElementUtils.writeSimpleElement(Element.PAGE_SIZE_BYTES_NODE_NAME,String.valueOf(addressSettings.getPageSizeBytes()),streamWriter);
      ElementUtils.writeSimpleElement(Element.MESSAGE_COUNTER_HISTORY_DAY_LIMIT_NODE_NAME,String.valueOf(addressSettings.getMessageCounterHistoryDayLimit()),streamWriter);
      AddressFullMessagePolicy policy=addressSettings.getAddressFullMessagePolicy();
      if (policy != null) {
        ElementUtils.writeSimpleElement(Element.ADDRESS_FULL_MESSAGE_POLICY_NODE_NAME,policy.toString(),streamWriter);
      }
      ElementUtils.writeSimpleElement(Element.LVQ_NODE_NAME,String.valueOf(addressSettings.isLastValueQueue()),streamWriter);
      ElementUtils.writeSimpleElement(Element.MAX_DELIVERY_ATTEMPTS,String.valueOf(addressSettings.getMaxDeliveryAttempts()),streamWriter);
      ElementUtils.writeSimpleElement(Element.REDISTRIBUTION_DELAY_NODE_NAME,String.valueOf(addressSettings.getRedistributionDelay()),streamWriter);
      ElementUtils.writeSimpleElement(Element.SEND_TO_DLA_ON_NO_ROUTE,String.valueOf(addressSettings.isSendToDLAOnNoRoute()),streamWriter);
      streamWriter.writeEndElement();
    }
    streamWriter.writeEndElement();
  }
  Map<String,TransportConfiguration> connectors=config.getConnectorConfigurations();
  if (connectors != null && connectors.size() > 0) {
    streamWriter.writeStartElement(Element.CONNECTORS.getLocalName());
    for (    Map.Entry<String,TransportConfiguration> entry : connectors.entrySet()) {
      streamWriter.writeStartElement(Element.CONNECTOR.getLocalName());
      ElementUtils.writeTransportConfiguration(entry.getValue(),streamWriter);
      streamWriter.writeEndElement();
    }
    streamWriter.writeEndElement();
  }
  Map<String,Set<Role>> roles=config.getSecurityRoles();
  if (roles != null && roles.size() > 0) {
    streamWriter.writeStartElement(Element.SECURITY_SETTINGS.getLocalName());
    for (    Map.Entry<String,Set<Role>> entry : roles.entrySet()) {
      streamWriter.writeStartElement(Element.SECURITY_SETTING.getLocalName());
      streamWriter.writeAttribute(Attribute.MATCH.getLocalName(),entry.getKey());
      ElementUtils.writeRoles(entry.getValue(),streamWriter);
      streamWriter.writeEndElement();
    }
    streamWriter.writeEndElement();
  }
  ElementUtils.writeSimpleElement(Element.BINDINGS_DIRECTORY,config.getBindingsDirectory(),streamWriter);
  ElementUtils.writeSimpleElement(Element.CLUSTERED,String.valueOf(config.isClustered()),streamWriter);
  ElementUtils.writeSimpleElement(Element.JOURNAL_DIRECTORY,config.getJournalDirectory(),streamWriter);
  ElementUtils.writeSimpleElement(Element.JOURNAL_MIN_FILES,String.valueOf(config.getJournalMinFiles()),streamWriter);
  JournalType jt=config.getJournalType();
  if (jt != null) {
    ElementUtils.writeSimpleElement(Element.JOURNAL_TYPE,jt.toString(),streamWriter);
  }
  ElementUtils.writeSimpleElement(Element.JOURNAL_FILE_SIZE,String.valueOf(config.getJournalFileSize()),streamWriter);
  ElementUtils.writeSimpleElement(Element.LARGE_MESSAGES_DIRECTORY,config.getLargeMessagesDirectory(),streamWriter);
  ElementUtils.writeSimpleElement(Element.PAGING_DIRECTORY,config.getPagingDirectory(),streamWriter);
}
