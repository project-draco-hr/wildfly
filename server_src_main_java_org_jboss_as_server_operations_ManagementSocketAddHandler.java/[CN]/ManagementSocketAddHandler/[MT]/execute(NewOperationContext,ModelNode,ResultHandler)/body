{
  final ModelNode compensatingOperation=new ModelNode();
  compensatingOperation.get(OP).set("remove-management-socket");
  compensatingOperation.get(OP_ADDR).set(operation.require(OP_ADDR));
  final String interfaceName=operation.require(ModelDescriptionConstants.INTERFACE).asString();
  final int port=operation.require(ModelDescriptionConstants.PORT).asInt();
  if (context instanceof NewRuntimeOperationContext) {
    final NewRuntimeOperationContext runtimeContext=(NewRuntimeOperationContext)context;
    final ServiceTarget serviceTarget=runtimeContext.getServiceTarget();
    Logger.getLogger("org.jboss.as").infof("creating management service using network interface (%s) port (%s)",interfaceName,port);
    final ManagementCommunicationService managementCommunicationService=new ManagementCommunicationService();
    serviceTarget.addService(ManagementCommunicationService.SERVICE_NAME,managementCommunicationService).addDependency(NetworkInterfaceService.JBOSS_NETWORK_INTERFACE.append(interfaceName),NetworkInterfaceBinding.class,managementCommunicationService.getInterfaceInjector()).addInjection(managementCommunicationService.getPortInjector(),port).addInjection(managementCommunicationService.getExecutorServiceInjector(),Executors.newCachedThreadPool()).addInjection(managementCommunicationService.getThreadFactoryInjector(),Executors.defaultThreadFactory()).setInitialMode(ServiceController.Mode.ACTIVE).install();
    ModelControllerOperationHandler modelControllerOperationHandler=new ModelControllerOperationHandler();
    serviceTarget.addService(Services.JBOSS_SERVER_CONTROLLER.append(ModelControllerOperationHandler.OPERATION_HANDLER_NAME_SUFFIX),modelControllerOperationHandler).addDependency(ManagementCommunicationService.SERVICE_NAME,ManagementCommunicationService.class,new ManagementCommunicationServiceInjector(modelControllerOperationHandler)).addDependency(Services.JBOSS_SERVER_CONTROLLER,ModelController.class,modelControllerOperationHandler.getModelControllerValue()).setInitialMode(ServiceController.Mode.ACTIVE).install();
  }
  final ModelNode subModel=context.getSubModel();
  subModel.get(ModelDescriptionConstants.MANAGEMENT,ModelDescriptionConstants.INTERFACE).set(interfaceName);
  subModel.get(ModelDescriptionConstants.MANAGEMENT,ModelDescriptionConstants.PORT).set(port);
  resultHandler.handleResultComplete(compensatingOperation);
  return Cancellable.NULL;
}
