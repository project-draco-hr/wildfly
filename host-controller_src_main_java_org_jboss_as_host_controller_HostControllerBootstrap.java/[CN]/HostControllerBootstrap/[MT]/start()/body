{
  final File configDir=environment.getDomainConfigurationDir();
  final ConfigurationFile configurationFile=environment.getHostConfigurationFile();
  final ExtensibleConfigurationPersister configurationPersister=createHostConfigurationPersister(configDir,configurationFile);
  final List<ModelNode> operations=configurationPersister.load();
  final ServiceTarget serviceTarget=serviceContainer;
  serviceTarget.addListener(new AbstractServiceListener<Object>(){
    @Override public void transition(    final ServiceController<? extends Object> controller,    final ServiceController.Transition transition){
      if (transition == ServiceController.Transition.STARTING_to_START_FAILED) {
        log.errorf(controller.getStartException(),"Service [%s] failed.",controller.getName());
      }
    }
  }
);
  registerBaseServices(serviceTarget);
  DomainModelProxyImpl domainModelProxy=new DomainModelProxyImpl();
  final ModelNodeRegistration hostRegistry=HostModelUtil.createHostRegistry(configurationPersister,environment,domainModelProxy);
  final ModelNodeRegistration rootRegistration=HostModelUtil.createBootstrapHostRegistry(hostRegistry,domainModelProxy);
  DomainModelImpl domainModel=new DomainModelImpl(rootRegistration,serviceContainer,configurationPersister);
  domainModelProxy.setDomainModel(domainModel);
  final AtomicInteger count=new AtomicInteger(1);
  final ResultHandler resultHandler=new ResultHandler(){
    @Override public void handleResultFragment(    final String[] location,    final ModelNode result){
    }
    @Override public void handleResultComplete(){
      if (count.decrementAndGet() == 0) {
      }
    }
    @Override public void handleFailed(    final ModelNode failureDescription){
      if (count.decrementAndGet() == 0) {
      }
    }
    @Override public void handleCancellation(){
      if (count.decrementAndGet() == 0) {
      }
    }
  }
;
  for (  final ModelNode operation : operations) {
    count.incrementAndGet();
    operation.get(OPERATION_HEADERS,ROLLBACK_ON_RUNTIME_FAILURE).set(false);
    domainModel.execute(OperationBuilder.Factory.create(operation).build(),resultHandler);
  }
  if (count.decrementAndGet() == 0) {
  }
  final String hostName=domainModel.getLocalHostName();
  final ModelNode hostModelNode=domainModel.getHostModel();
  final String mgmtNetwork=hostModelNode.get(MANAGEMENT_INTERFACE,NATIVE_INTERFACE,INTERFACE).asString();
  final int mgmtPort=hostModelNode.get(MANAGEMENT_INTERFACE,NATIVE_INTERFACE,PORT).asInt();
  final ServerInventoryService inventory=new ServerInventoryService(environment,mgmtPort);
  serviceTarget.addService(ServerInventoryService.SERVICE_NAME,inventory).addDependency(ProcessControllerConnectionService.SERVICE_NAME,ProcessControllerConnectionService.class,inventory.getClient()).addDependency(NetworkInterfaceService.JBOSS_NETWORK_INTERFACE.append(mgmtNetwork),NetworkInterfaceBinding.class,inventory.getInterface()).install();
  final HostControllerService hc=new HostControllerService(hostName,hostModelNode,configurationPersister,hostRegistry);
  serviceTarget.addService(HostController.SERVICE_NAME,hc).addDependency(ServerInventoryService.SERVICE_NAME,ServerInventory.class,hc.getServerInventory()).addDependency(ServerToHostOperationHandlerFactoryService.SERVICE_NAME).setInitialMode(Mode.ACTIVE).install();
  RemotingServices.installChannelOpenListenerService(serviceTarget,"server",ServerToHostOperationHandlerFactoryService.SERVICE_NAME,null,null);
}
