{
  final File configDir=environment.getDomainConfigurationDir();
  final ExtensibleConfigurationPersister configurationPersister=createHostConfigurationPersister(configDir);
  final HostModel hostModel=new HostModel(configurationPersister);
  final List<ModelNode> operations=configurationPersister.load();
  final AtomicInteger count=new AtomicInteger(1);
  final ResultHandler resultHandler=new ResultHandler(){
    @Override public void handleResultFragment(    final String[] location,    final ModelNode result){
    }
    @Override public void handleResultComplete(){
      if (count.decrementAndGet() == 0) {
      }
    }
    @Override public void handleFailed(    final ModelNode failureDescription){
      if (count.decrementAndGet() == 0) {
      }
    }
    @Override public void handleCancellation(){
      if (count.decrementAndGet() == 0) {
      }
    }
  }
;
  for (  final ModelNode operation : operations) {
    count.incrementAndGet();
    hostModel.execute(operation,resultHandler);
  }
  if (count.decrementAndGet() == 0) {
  }
  final ServiceTarget serviceTarget=serviceContainer;
  serviceTarget.addListener(new AbstractServiceListener<Object>(){
    public void serviceFailed(    final ServiceController<?> serviceController,    final StartException reason){
      log.errorf(reason,"Service [%s] failed.",serviceController.getName());
    }
  }
);
  final ModelNode rawModel=hostModel.getHostModel();
  final String mgmtNetwork=rawModel.get(MANAGEMENT,NATIVE_API,INTERFACE).asString();
  final int mgmtPort=rawModel.get(MANAGEMENT,NATIVE_API,PORT).asInt();
  final ProcessControllerConnectionService processControllerClient=new ProcessControllerConnectionService(environment,authCode);
  serviceTarget.addService(ProcessControllerConnectionService.SERVICE_NAME,processControllerClient).install();
  activateNetworkInterfaces(rawModel,serviceTarget);
  activateDomainControllerConnection(environment,rawModel,serviceTarget);
  final ServerInventoryService inventory=new ServerInventoryService(environment,mgmtPort);
  serviceTarget.addService(ServerInventoryService.SERVICE_NAME,inventory).addDependency(ProcessControllerConnectionService.SERVICE_NAME,ProcessControllerClient.class,inventory.getClient()).addDependency(NetworkInterfaceService.JBOSS_NETWORK_INTERFACE.append(mgmtNetwork),NetworkInterfaceBinding.class,inventory.getInterface()).addDependency(DomainControllerConnection.SERVICE_NAME,DomainControllerConnection.class,inventory.getDomainControllerConnection()).install();
  final String name=rawModel.get(NAME).asString();
  final FileRepository repository=new LocalFileRepository(environment);
  final HostControllerService hc=new HostControllerService(name,hostModel,repository);
  serviceTarget.addService(HostController.SERVICE_NAME,hc).addDependency(DomainControllerConnection.SERVICE_NAME,DomainControllerConnection.class,hc.getConnection()).addDependency(ServerInventoryService.SERVICE_NAME,ServerInventory.class,hc.getServerInventory()).addDependency(ServerToHostOperationHandler.SERVICE_NAME).setInitialMode(Mode.ACTIVE).install();
  final ServiceName threadFactoryServiceName=SERVICE_NAME_BASE.append("thread-factory");
  final ServiceName executorServiceName=SERVICE_NAME_BASE.append("executor");
  serviceTarget.addService(threadFactoryServiceName,new ThreadFactoryService()).install();
  final HostControllerExecutorService executorService=new HostControllerExecutorService();
  serviceTarget.addService(executorServiceName,executorService).addDependency(threadFactoryServiceName,ThreadFactory.class,executorService.threadFactoryValue).install();
  final ManagementCommunicationService managementCommunicationService=new ManagementCommunicationService();
  serviceTarget.addService(ManagementCommunicationService.SERVICE_NAME,managementCommunicationService).addDependency(NetworkInterfaceService.JBOSS_NETWORK_INTERFACE.append(mgmtNetwork),NetworkInterfaceBinding.class,managementCommunicationService.getInterfaceInjector()).addInjection(managementCommunicationService.getPortInjector(),mgmtPort).addDependency(executorServiceName,ExecutorService.class,managementCommunicationService.getExecutorServiceInjector()).addDependency(threadFactoryServiceName,ThreadFactory.class,managementCommunicationService.getThreadFactoryInjector()).setInitialMode(Mode.ACTIVE).install();
  final ServerToHostOperationHandler serverToHost=new ServerToHostOperationHandler();
  serviceTarget.addService(ServerToHostOperationHandler.SERVICE_NAME,serverToHost).addDependency(ServerInventoryService.SERVICE_NAME,ManagedServerLifecycleCallback.class,serverToHost.getCallback()).addDependency(ManagementCommunicationService.SERVICE_NAME,ManagementCommunicationService.class,new ManagementCommunicationServiceInjector(serverToHost)).install();
}
