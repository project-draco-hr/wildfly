{
  super(reader);
  if (interfaceResolver == null)   throw new IllegalArgumentException("interfaceResolver is null");
  this.interfaceResolver=interfaceResolver;
  this.includedGroupResolver=includedGroupResolver;
  String name=null;
  String defIntf=null;
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    final String value=reader.getAttributeValue(i);
    if (reader.getAttributeNamespace(i) != null) {
      throw unexpectedAttribute(reader,i);
    }
 else {
      final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case NAME:
{
          name=value;
          break;
        }
case DEFAULT_INTERFACE:
{
        if (this.interfaceResolver.resolveRef(value) == null) {
          throw new XMLStreamException("Unknown interface " + value + " "+ attribute.getLocalName()+ " must be declared in element "+ Element.INTERFACES.getLocalName(),reader.getLocation());
        }
        defIntf=value;
        break;
      }
default :
    throw unexpectedAttribute(reader,i);
}
}
}
if (name == null) {
throw missingRequired(reader,Collections.singleton(Attribute.NAME));
}
if (defIntf == null) {
throw missingRequired(reader,Collections.singleton(Attribute.DEFAULT_INTERFACE));
}
this.name=name;
this.defaultInterface=defIntf;
while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
switch (Namespace.forUri(reader.getNamespaceURI())) {
case DOMAIN_1_0:
{
  final Element element=Element.forName(reader.getLocalName());
switch (element) {
case INCLUDE:
{
      if (includedGroupResolver == null) {
        throw unexpectedElement(reader);
      }
      final SocketBindingGroupIncludeElement include=new SocketBindingGroupIncludeElement(reader);
      if (includedGroups.containsKey(include.getGroupName())) {
        throw new XMLStreamException("Included socket-binding-group " + include.getGroupName() + " already declared",reader.getLocation());
      }
      includedGroups.put(include.getGroupName(),include);
      break;
    }
case SOCKET_BINDING:
{
    final SocketBindingElement include=new SocketBindingElement(reader,interfaceResolver,this.defaultInterface);
    if (socketBindings.containsKey(include.getName())) {
      throw new XMLStreamException("socket-binding " + include.getName() + " already declared",reader.getLocation());
    }
    socketBindings.put(include.getName(),include);
    break;
  }
default :
throw unexpectedElement(reader);
}
break;
}
default :
throw unexpectedElement(reader);
}
}
}
