{
  List<HostUpdateApplierResponse> result=new ArrayList<HostUpdateApplierResponse>(updates.size());
  boolean ok=true;
  List<AbstractHostModelUpdate<?>> rollbacks=new ArrayList<AbstractHostModelUpdate<?>>();
  for (  AbstractHostModelUpdate<?> update : updates) {
    if (ok) {
      try {
        AbstractHostModelUpdate<?> rollback=update.getCompensatingUpdate(hostModel);
        hostModel.update(update);
        rollbacks.add(0,rollback);
        result.add(new HostUpdateApplierResponse(false));
      }
 catch (      UpdateFailedException e) {
        ok=false;
        result.add(new HostUpdateApplierResponse(e));
      }
    }
 else {
      result.add(new HostUpdateApplierResponse(true));
    }
  }
  if (!ok) {
    for (int i=0; i < rollbacks.size(); i++) {
      AbstractHostModelUpdate<?> rollback=rollbacks.get(i);
      try {
        hostModel.update(rollback);
      }
 catch (      UpdateFailedException e) {
      }
    }
  }
 else {
    configPersister.persistConfiguration(hostModel);
    for (    AbstractHostModelUpdate<?> update : updates) {
      result.add(new HostUpdateApplierResponse(getAffectedServers(update)));
    }
  }
  return result;
}
