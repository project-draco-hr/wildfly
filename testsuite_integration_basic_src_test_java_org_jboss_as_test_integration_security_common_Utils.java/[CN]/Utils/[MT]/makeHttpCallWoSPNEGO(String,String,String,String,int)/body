{
  final String strippedContextUrl=StringUtils.stripEnd(contextUrl,"/");
  final String url=strippedContextUrl + page;
  LOGGER.info("Requesting URL: " + url);
  final DefaultHttpClient httpClient=new DefaultHttpClient();
  httpClient.setRedirectStrategy(REDIRECT_STRATEGY);
  String unauthorizedPageBody=null;
  try {
    final HttpGet httpGet=new HttpGet(url);
    HttpResponse response=httpClient.execute(httpGet);
    int statusCode=response.getStatusLine().getStatusCode();
    if (HttpServletResponse.SC_UNAUTHORIZED != statusCode || StringUtils.isEmpty(user)) {
      assertEquals("Unexpected HTTP response status code.",expectedStatusCode,statusCode);
      return EntityUtils.toString(response.getEntity());
    }
    final Header[] authnHeaders=response.getHeaders("WWW-Authenticate");
    assertTrue("WWW-Authenticate header is present",authnHeaders != null && authnHeaders.length > 0);
    final Set<String> authnHeaderValues=new HashSet<String>();
    for (    final Header header : authnHeaders) {
      authnHeaderValues.add(header.getValue());
    }
    assertTrue("WWW-Authenticate: Negotiate header is missing",authnHeaderValues.contains("Negotiate"));
    LOGGER.debug("HTTP response was SC_UNAUTHORIZED, let's authenticate the user " + user);
    unauthorizedPageBody=EntityUtils.toString(response.getEntity());
    assertNotNull(unauthorizedPageBody);
    LOGGER.info(unauthorizedPageBody);
    assertTrue(unauthorizedPageBody.contains("j_security_check"));
    HttpPost httpPost=new HttpPost(strippedContextUrl + "/j_security_check");
    List<NameValuePair> nameValuePairs=new ArrayList<NameValuePair>();
    nameValuePairs.add(new BasicNameValuePair("j_username",user));
    nameValuePairs.add(new BasicNameValuePair("j_password",pass));
    httpPost.setEntity(new UrlEncodedFormEntity(nameValuePairs));
    response=httpClient.execute(httpPost);
    statusCode=response.getStatusLine().getStatusCode();
    assertEquals("Unexpected status code returned after the authentication.",expectedStatusCode,statusCode);
    return EntityUtils.toString(response.getEntity());
  }
  finally {
    httpClient.getConnectionManager().shutdown();
  }
}
