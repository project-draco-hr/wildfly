{
  LOGGER.info("Setting Kerberos configuration: " + krb5ConfPath);
  final String origKrb5Conf=setSystemProperty("java.security.krb5.conf",krb5ConfPath);
  final String origKrbDebug=setSystemProperty("sun.security.krb5.debug","true");
  LOGGER.info("Requesting URI: " + uri);
  final DefaultHttpClient httpClient=new DefaultHttpClient();
  try {
    httpClient.getAuthSchemes().register(AuthPolicy.SPNEGO,new JBossNegotiateSchemeFactory(null,true));
    httpClient.getCredentialsProvider().setCredentials(new AuthScope(null,-1,null),new NullHCCredentials());
    final HttpGet httpGet=new HttpGet(uri);
    final HttpResponse response=httpClient.execute(httpGet);
    int statusCode=response.getStatusLine().getStatusCode();
    if (HttpServletResponse.SC_UNAUTHORIZED != statusCode || StringUtils.isEmpty(user)) {
      assertEquals("Unexpected HTTP response status code.",expectedStatusCode,statusCode);
      return EntityUtils.toString(response.getEntity());
    }
    final HttpEntity entity=response.getEntity();
    final Header[] authnHeaders=response.getHeaders("WWW-Authenticate");
    assertTrue("WWW-Authenticate header is present",authnHeaders != null && authnHeaders.length > 0);
    final Set<String> authnHeaderValues=new HashSet<String>();
    for (    final Header header : authnHeaders) {
      authnHeaderValues.add(header.getValue());
    }
    assertTrue("WWW-Authenticate: Negotiate header is missing",authnHeaderValues.contains("Negotiate"));
    if (LOGGER.isDebugEnabled()) {
      LOGGER.debug("HTTP response was SC_UNAUTHORIZED, let's authenticate the user " + user);
    }
    if (entity != null)     EntityUtils.consume(entity);
    Configuration.setConfiguration(new Krb5LoginConfiguration());
    final LoginContext lc=new LoginContext(Utils.class.getName(),new UsernamePasswordHandler(user,pass));
    lc.login();
    final String responseBody=Subject.doAs(lc.getSubject(),new PrivilegedExceptionAction<String>(){
      public String run() throws Exception {
        final HttpResponse response=httpClient.execute(httpGet);
        int statusCode=response.getStatusLine().getStatusCode();
        assertEquals("Unexpected status code returned after the authentication.",expectedStatusCode,statusCode);
        return EntityUtils.toString(response.getEntity());
      }
    }
);
    lc.logout();
    return responseBody;
  }
  finally {
    httpClient.getConnectionManager().shutdown();
    setSystemProperty("java.security.krb5.conf",origKrb5Conf);
    setSystemProperty("sun.security.krb5.debug",origKrbDebug);
  }
}
