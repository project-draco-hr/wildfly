{
  final ModelNode childAdd=new ModelNode();
  childAdd.get(OP).set(ADD);
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    final String value=reader.getAttributeValue(i);
    if (!isNoNamespaceAttribute(reader,i)) {
      throw unexpectedAttribute(reader,i);
    }
 else {
      final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case GROUP_NAME:
        BaseLdapGroupSearchResource.GROUP_NAME.parseAndSetParameter(value,childAdd,reader);
      break;
case ITERATIVE:
    BaseLdapGroupSearchResource.ITERATIVE.parseAndSetParameter(value,childAdd,reader);
  break;
case GROUP_DN_ATTRIBUTE:
BaseLdapGroupSearchResource.GROUP_DN_ATTRIBUTE.parseAndSetParameter(value,childAdd,reader);
break;
case GROUP_NAME_ATTRIBUTE:
BaseLdapGroupSearchResource.GROUP_NAME_ATTRIBUTE.parseAndSetParameter(value,childAdd,reader);
break;
default :
{
throw unexpectedAttribute(reader,i);
}
}
}
}
boolean filterFound=false;
ModelNode cacheAdd=null;
ModelNode address=ldapAddress.clone().add(GROUP_SEARCH);
while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
requireNamespace(reader,expectedNs);
final Element element=Element.forName(reader.getLocalName());
if (filterFound) {
throw unexpectedElement(reader);
}
switch (element) {
case CACHE:
if (cacheAdd != null) {
throw unexpectedElement(reader);
}
cacheAdd=parseLdapCache(reader);
break;
case GROUP_TO_PRINCIPAL:
filterFound=true;
parseGroupToPrincipal(reader,expectedNs,address,childAdd);
break;
case PRINCIPAL_TO_GROUP:
filterFound=true;
switch (expectedNs) {
case DOMAIN_2_0:
parsePrincipalToGroup_1_5(reader,expectedNs,address,childAdd);
break;
default :
parsePrincipalToGroup_2_1(reader,expectedNs,address,childAdd);
break;
}
break;
default :
{
throw unexpectedElement(reader);
}
}
}
if (filterFound == false) {
throw missingOneOf(reader,EnumSet.of(Element.GROUP_TO_PRINCIPAL,Element.PRINCIPAL_TO_GROUP));
}
list.add(childAdd);
if (cacheAdd != null) {
correctCacheAddress(childAdd,cacheAdd);
list.add(cacheAdd);
}
}
