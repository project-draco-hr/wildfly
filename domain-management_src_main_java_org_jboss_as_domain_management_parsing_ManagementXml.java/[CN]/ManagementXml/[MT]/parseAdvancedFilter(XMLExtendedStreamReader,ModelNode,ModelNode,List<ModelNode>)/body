{
  boolean baseDnFound=false;
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    final String value=reader.getAttributeValue(i);
    if (!isNoNamespaceAttribute(reader,i)) {
      throw unexpectedAttribute(reader,i);
    }
 else {
      final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case BASE_DN:
{
          baseDnFound=true;
          AdvancedUserSearchResourceDefintion.BASE_DN.parseAndSetParameter(value,addOp,reader);
          break;
        }
case RECURSIVE:
{
        AdvancedUserSearchResourceDefintion.RECURSIVE.parseAndSetParameter(value,addOp,reader);
        break;
      }
case USER_DN_ATTRIBUTE:
{
      UserSearchResourceDefintion.USER_DN_ATTRIBUTE.parseAndSetParameter(value,addOp,reader);
      break;
    }
case FILTER:
{
    AdvancedUserSearchResourceDefintion.FILTER.parseAndSetParameter(value,addOp,reader);
    break;
  }
default :
{
  throw unexpectedAttribute(reader,i);
}
}
}
}
if (baseDnFound == false) {
throw missingRequired(reader,Collections.singleton(Attribute.BASE_DN));
}
requireNoContent(reader);
addOp.get(OP_ADDR).set(parentAddress.clone().add(ADVANCED_FILTER));
list.add(addOp);
}
