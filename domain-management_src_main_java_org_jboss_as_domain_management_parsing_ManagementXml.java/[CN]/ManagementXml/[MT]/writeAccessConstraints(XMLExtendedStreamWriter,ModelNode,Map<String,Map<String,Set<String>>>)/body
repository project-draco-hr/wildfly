{
  writer.writeStartElement(Element.ACCESS_CONSTRAINTS.getLocalName());
  if (configuredConstraints.containsKey(SensitivityResourceDefinition.VAULT_ELEMENT.getKey())) {
    writer.writeStartElement(Element.VAULT_EXPRESSION_SENSITIVITY.getLocalName());
    ModelNode model=accessConstraint.get(SensitivityResourceDefinition.VAULT_ELEMENT.getKey(),SensitivityResourceDefinition.VAULT_ELEMENT.getValue());
    SensitivityResourceDefinition.CONFIGURED_REQUIRES_ACCESS.marshallAsAttribute(model,writer);
    SensitivityResourceDefinition.CONFIGURED_REQUIRES_READ.marshallAsAttribute(model,writer);
    SensitivityResourceDefinition.CONFIGURED_REQUIRES_WRITE.marshallAsAttribute(model,writer);
    writer.writeEndElement();
  }
  if (configuredConstraints.containsKey(SENSITIVITY_CLASSIFICATION)) {
    writer.writeStartElement(Element.SENSITIVE_CLASSIFICATIONS.getLocalName());
    Map<String,Set<String>> constraints=configuredConstraints.get(SENSITIVITY_CLASSIFICATION);
    for (    Map.Entry<String,Set<String>> entry : constraints.entrySet()) {
      writer.writeStartElement(Element.SENSITIVE_CLASSIFICATION.getLocalName());
      writeAttribute(writer,Attribute.NAME,entry.getKey());
      for (      String type : entry.getValue()) {
        writer.writeStartElement(Element.TYPE.getLocalName());
        ModelNode model=accessConstraint.get(SENSITIVITY_CLASSIFICATION,entry.getKey(),TYPE,type);
        writeAttribute(writer,Attribute.NAME,type);
        SensitivityResourceDefinition.CONFIGURED_REQUIRES_ACCESS.marshallAsAttribute(model,writer);
        SensitivityResourceDefinition.CONFIGURED_REQUIRES_READ.marshallAsAttribute(model,writer);
        SensitivityResourceDefinition.CONFIGURED_REQUIRES_WRITE.marshallAsAttribute(model,writer);
        writer.writeEndElement();
      }
      writer.writeEndElement();
    }
    writer.writeEndElement();
  }
  if (configuredConstraints.containsKey(APPLICATION_TYPE)) {
    writer.writeStartElement(Element.APPLICATION_TYPES.getLocalName());
    Map<String,Set<String>> constraints=configuredConstraints.get(APPLICATION_TYPE);
    for (    Map.Entry<String,Set<String>> entry : constraints.entrySet()) {
      writer.writeStartElement(Element.APPLICATION_TYPE.getLocalName());
      writeAttribute(writer,Attribute.NAME,entry.getKey());
      for (      String type : entry.getValue()) {
        writer.writeStartElement(Element.TYPE.getLocalName());
        ModelNode model=accessConstraint.get(APPLICATION_TYPE,entry.getKey(),TYPE,type);
        writeAttribute(writer,Attribute.NAME,type);
        ApplicationTypeConfigResourceDefinition.CONFIGURED_APPLICATION.marshallAsAttribute(model,writer);
        writer.writeEndElement();
      }
      writer.writeEndElement();
    }
    writer.writeEndElement();
  }
  writer.writeEndElement();
}
