{
  writer.writeStartElement(Element.SERVER_IDENTITIES.getLocalName());
  ModelNode serverIdentities=realm.get(SERVER_IDENTITY);
  if (serverIdentities.hasDefined(SSL)) {
    writer.writeStartElement(Element.SSL.getLocalName());
    ModelNode ssl=serverIdentities.get(SSL);
    SSLServerIdentityResourceDefinition.PROTOCOL.marshallAsAttribute(ssl,writer);
    boolean hasProvider=ssl.hasDefined(KEYSTORE_PROVIDER) && (JKS.equals(ssl.require(KEYSTORE_PROVIDER).asString()) == false);
    if (hasProvider || ssl.hasDefined(KeystoreAttributes.KEYSTORE_PATH.getName())) {
      writer.writeEmptyElement(Element.KEYSTORE.getLocalName());
      KeystoreAttributes.KEYSTORE_PROVIDER.marshallAsAttribute(ssl,writer);
      KeystoreAttributes.KEYSTORE_PATH.marshallAsAttribute(ssl,writer);
      KeystoreAttributes.KEYSTORE_RELATIVE_TO.marshallAsAttribute(ssl,writer);
      KeystoreAttributes.KEYSTORE_PASSWORD.marshallAsAttribute(ssl,writer);
      KeystoreAttributes.ALIAS.marshallAsAttribute(ssl,writer);
      KeystoreAttributes.KEY_PASSWORD.marshallAsAttribute(ssl,writer);
    }
    writer.writeEndElement();
  }
  if (serverIdentities.hasDefined(SECRET)) {
    ModelNode secret=serverIdentities.get(SECRET);
    writer.writeEmptyElement(Element.SECRET.getLocalName());
    SecretServerIdentityResourceDefinition.VALUE.marshallAsAttribute(secret,writer);
  }
  writer.writeEndElement();
}
