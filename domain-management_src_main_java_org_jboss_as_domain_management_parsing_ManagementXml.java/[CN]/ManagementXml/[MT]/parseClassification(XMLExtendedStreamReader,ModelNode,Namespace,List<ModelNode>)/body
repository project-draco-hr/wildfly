{
  String name=null;
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    final String value=reader.getAttributeValue(i);
    if (!isNoNamespaceAttribute(reader,i)) {
      throw unexpectedAttribute(reader,i);
    }
 else {
      final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case NAME:
        name=value;
      break;
default :
{
      throw unexpectedAttribute(reader,i);
    }
}
}
}
if (name == null) {
throw ParseUtils.missingRequired(reader,Collections.singleton(NAME));
}
ModelNode newAddress=address.clone().add(SensitivityClassificationResourceDefinition.PATH_ELEMENT.getKey(),name);
while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
requireNamespace(reader,expectedNs);
final Element element=Element.forName(reader.getLocalName());
switch (element) {
case TYPE:
{
  parseClassificationType(reader,newAddress,expectedNs,list,false);
  break;
}
default :
{
throw unexpectedElement(reader);
}
}
}
}
