{
  writer.writeStartElement(Element.AUTHENTICATION.getLocalName());
  ModelNode authentication=realm.require(AUTHENTICATION);
  if (authentication.hasDefined(TRUSTSTORE)) {
    ModelNode truststore=authentication.require(TRUSTSTORE);
    writer.writeEmptyElement(Element.TRUSTSTORE.getLocalName());
    KeystoreAttributes.KEYSTORE_PATH.marshallAsAttribute(truststore,writer);
    KeystoreAttributes.KEYSTORE_RELATIVE_TO.marshallAsAttribute(truststore,writer);
    KeystoreAttributes.KEYSTORE_PASSWORD.marshallAsAttribute(truststore,writer);
  }
  if (authentication.hasDefined(LOCAL)) {
    ModelNode local=authentication.require(LOCAL);
    writer.writeStartElement(Element.LOCAL.getLocalName());
    LocalAuthenticationResourceDefinition.DEFAULT_USER.marshallAsAttribute(local,writer);
    LocalAuthenticationResourceDefinition.ALLOWED_USERS.marshallAsAttribute(local,writer);
    writer.writeEndElement();
  }
  if (authentication.hasDefined(JAAS)) {
    ModelNode jaas=authentication.get(JAAS);
    writer.writeStartElement(Element.JAAS.getLocalName());
    JaasAuthenticationResourceDefinition.NAME.marshallAsAttribute(jaas,writer);
    writer.writeEndElement();
  }
 else   if (authentication.hasDefined(LDAP)) {
    ModelNode userLdap=authentication.get(LDAP);
    writer.writeStartElement(Element.LDAP.getLocalName());
    LdapAuthenticationResourceDefinition.CONNECTION.marshallAsAttribute(userLdap,writer);
    LdapAuthenticationResourceDefinition.BASE_DN.marshallAsAttribute(userLdap,writer);
    LdapAuthenticationResourceDefinition.RECURSIVE.marshallAsAttribute(userLdap,writer);
    LdapAuthenticationResourceDefinition.USER_DN.marshallAsAttribute(userLdap,writer);
    LdapAuthenticationResourceDefinition.ALLOW_EMPTY_PASSWORDS.marshallAsAttribute(userLdap,writer);
    LdapAuthenticationResourceDefinition.USERNAME_LOAD.marshallAsAttribute(userLdap,writer);
    writeLdapCacheIfDefined(writer,userLdap);
    if (LdapAuthenticationResourceDefinition.USERNAME_FILTER.isMarshallable(userLdap)) {
      writer.writeEmptyElement(Element.USERNAME_FILTER.getLocalName());
      LdapAuthenticationResourceDefinition.USERNAME_FILTER.marshallAsAttribute(userLdap,writer);
    }
 else     if (LdapAuthenticationResourceDefinition.ADVANCED_FILTER.isMarshallable(userLdap)) {
      writer.writeEmptyElement(Element.ADVANCED_FILTER.getLocalName());
      LdapAuthenticationResourceDefinition.ADVANCED_FILTER.marshallAsAttribute(userLdap,writer);
    }
    writer.writeEndElement();
  }
 else   if (authentication.hasDefined(PROPERTIES)) {
    ModelNode properties=authentication.require(PROPERTIES);
    writer.writeEmptyElement(Element.PROPERTIES.getLocalName());
    PropertiesAuthenticationResourceDefinition.PATH.marshallAsAttribute(properties,writer);
    PropertiesAuthenticationResourceDefinition.RELATIVE_TO.marshallAsAttribute(properties,writer);
    PropertiesAuthenticationResourceDefinition.PLAIN_TEXT.marshallAsAttribute(properties,writer);
  }
 else   if (authentication.has(USERS)) {
    ModelNode userDomain=authentication.get(USERS);
    ModelNode users=userDomain.hasDefined(USER) ? userDomain.require(USER) : new ModelNode().setEmptyObject();
    writer.writeStartElement(Element.USERS.getLocalName());
    for (    Property userProps : users.asPropertyList()) {
      String userName=userProps.getName();
      ModelNode currentUser=userProps.getValue();
      writer.writeStartElement(Element.USER.getLocalName());
      writer.writeAttribute(Attribute.USERNAME.getLocalName(),userName);
      UserResourceDefinition.PASSWORD.marshallAsElement(currentUser,writer);
      writer.writeEndElement();
    }
    writer.writeEndElement();
  }
 else   if (authentication.hasDefined(PLUG_IN)) {
    writePlugIn_Authentication(writer,authentication.get(PLUG_IN));
  }
  writer.writeEndElement();
}
