{
  final int count=reader.getAttributeCount();
  String name=null;
  Map<String,ModelNode> values=new HashMap<String,ModelNode>();
  for (int i=0; i < count; i++) {
    final String value=reader.getAttributeValue(i);
    if (!isNoNamespaceAttribute(reader,i)) {
      throw unexpectedAttribute(reader,i);
    }
 else {
      final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case NAME:
{
          name=value;
          break;
        }
case REQUIRES_ACCESS:
{
        values.put(SensitivityResourceDefinition.CONFIGURED_REQUIRES_ACCESS.getName(),SensitivityResourceDefinition.CONFIGURED_REQUIRES_ACCESS.parse(value,reader));
        break;
      }
case REQUIRES_READ:
{
      values.put(SensitivityResourceDefinition.CONFIGURED_REQUIRES_READ.getName(),SensitivityResourceDefinition.CONFIGURED_REQUIRES_READ.parse(value,reader));
      break;
    }
case REQUIRES_WRITE:
{
    values.put(SensitivityResourceDefinition.CONFIGURED_REQUIRES_WRITE.getName(),SensitivityResourceDefinition.CONFIGURED_REQUIRES_WRITE.parse(value,reader));
    break;
  }
default :
{
  throw unexpectedAttribute(reader,i);
}
}
}
}
if (name == null && !vault) {
throw ParseUtils.missingRequired(reader,Collections.singleton(Attribute.NAME));
}
final ModelNode newAddress=vault ? address : address.clone().add(SensitivityResourceDefinition.PATH_ELEMENT.getKey(),name);
for (Map.Entry<String,ModelNode> entry : values.entrySet()) {
list.add(Util.getWriteAttributeOperation(newAddress,entry.getKey(),entry.getValue()));
}
ParseUtils.requireNoContent(reader);
}
