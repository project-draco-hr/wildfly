{
  ModelNode realmAddress=realmAdd.get(OP_ADDR);
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    final String value=reader.getAttributeValue(i);
    if (!isNoNamespaceAttribute(reader,i)) {
      throw unexpectedAttribute(reader,i);
    }
 else {
      final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case MAP_GROUPS_TO_ROLES:
        SecurityRealmResourceDefinition.MAP_GROUPS_TO_ROLES.parseAndSetParameter(value,realmAdd,reader);
      break;
default :
{
      throw unexpectedAttribute(reader,i);
    }
}
}
}
boolean authzFound=false;
while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
requireNamespace(reader,expectedNs);
final Element element=Element.forName(reader.getLocalName());
if (authzFound) {
throw unexpectedElement(reader);
}
switch (element) {
case PROPERTIES:
{
  parsePropertiesAuthorization(reader,realmAddress,list);
  authzFound=true;
  break;
}
case PLUG_IN:
{
ModelNode parentAddress=realmAddress.clone().add(AUTHORIZATION);
parsePlugIn_Authorization(reader,expectedNs,parentAddress,list);
authzFound=true;
break;
}
case LDAP:
{
parseLdapAuthorization_1_5(reader,expectedNs,realmAddress,list);
authzFound=true;
break;
}
default :
{
throw unexpectedElement(reader);
}
}
}
}
