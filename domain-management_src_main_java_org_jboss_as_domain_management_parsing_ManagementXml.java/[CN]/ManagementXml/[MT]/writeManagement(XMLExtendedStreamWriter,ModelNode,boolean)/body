{
  boolean hasSecurityRealm=management.hasDefined(SECURITY_REALM);
  boolean hasConnection=management.hasDefined(LDAP_CONNECTION);
  boolean hasInterface=allowInterfaces && management.hasDefined(MANAGEMENT_INTERFACE);
  ModelNode accessAuthorization=management.hasDefined(ACCESS) ? management.get(ACCESS,AUTHORIZATION) : null;
  boolean accessAuthorizationDefined=accessAuthorization != null && accessAuthorization.isDefined();
  boolean hasServerGroupRoles=accessAuthorizationDefined && accessAuthorization.hasDefined(SERVER_GROUP_SCOPED_ROLE);
  boolean hasHostRoles=accessAuthorizationDefined && (accessAuthorization.hasDefined(HOST_SCOPED_ROLE) || accessAuthorization.hasDefined(HOST_SCOPED_ROLES));
  boolean hasRoleMapping=accessAuthorizationDefined && accessAuthorization.hasDefined(ROLE_MAPPING);
  Map<String,Map<String,Set<String>>> configuredAccessConstraints=getConfiguredAccessConstraints(accessAuthorization);
  boolean hasUseRealmRoles=accessAuthorizationDefined && accessAuthorization.hasDefined(AccessAuthorizationResourceDefinition.USE_REALM_ROLES.getName());
  boolean hasProvider=accessAuthorizationDefined && accessAuthorization.hasDefined(AccessAuthorizationResourceDefinition.PROVIDER.getName());
  ModelNode auditLog=management.hasDefined(ACCESS) ? management.get(ACCESS,AUDIT) : new ModelNode();
  if (!hasSecurityRealm && !hasConnection && !hasInterface&& !hasServerGroupRoles&& !hasHostRoles&& !hasRoleMapping&& configuredAccessConstraints.size() == 0 && !hasProvider && !hasUseRealmRoles && !auditLog.isDefined()) {
    return;
  }
  writer.writeStartElement(Element.MANAGEMENT.getLocalName());
  if (hasSecurityRealm) {
    writeSecurityRealm(writer,management);
  }
  if (hasConnection) {
    writeOutboundConnections(writer,management);
  }
  if (auditLog.isDefined()) {
    delegate.writeAuditLog(writer,auditLog);
  }
  if (allowInterfaces && hasInterface) {
    writeManagementInterfaces(writer,management);
  }
  if (accessAuthorizationDefined) {
    delegate.writeAccessControl(writer,accessAuthorization);
  }
  writer.writeEndElement();
}
