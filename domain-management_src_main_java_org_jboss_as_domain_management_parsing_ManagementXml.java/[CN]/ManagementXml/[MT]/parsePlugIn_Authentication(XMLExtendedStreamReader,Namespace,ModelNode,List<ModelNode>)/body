{
  ModelNode addr=parentAddress.clone().add(PLUG_IN);
  ModelNode plugIn=Util.getEmptyOperation(ADD,addr);
  list.add(plugIn);
  boolean nameFound=false;
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    final String value=reader.getAttributeValue(i);
    if (!isNoNamespaceAttribute(reader,i)) {
      throw unexpectedAttribute(reader,i);
    }
 else {
      final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case NAME:
        PlugInAuthenticationResourceDefinition.NAME.parseAndSetParameter(value,plugIn,reader);
      nameFound=true;
    break;
case MECHANISM:
{
    PlugInAuthenticationResourceDefinition.MECHANISM.parseAndSetParameter(value,plugIn,reader);
    break;
  }
default :
{
  throw unexpectedAttribute(reader,i);
}
}
}
}
if (nameFound == false) {
throw missingRequired(reader,Collections.singleton(Attribute.NAME));
}
while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
requireNamespace(reader,expectedNs);
final Element element=Element.forName(reader.getLocalName());
switch (element) {
case PROPERTIES:
{
while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
requireNamespace(reader,expectedNs);
final Element propertyElement=Element.forName(reader.getLocalName());
switch (propertyElement) {
case PROPERTY:
  parseProperty(reader,addr,list);
break;
default :
throw unexpectedElement(reader);
}
}
break;
}
default :
{
throw unexpectedElement(reader);
}
}
}
}
