{
  Set<Attribute> required=EnumSet.of(Attribute.PATH,Attribute.KEYSTORE_PASSWORD);
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    final String value=reader.getAttributeValue(i);
    if (!isNoNamespaceAttribute(reader,i)) {
      throw unexpectedAttribute(reader,i);
    }
 else {
      final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
      required.remove(attribute);
switch (attribute) {
case PATH:
        KeystoreAttributes.KEYSTORE_PATH.parseAndSetParameter(value,addOperation,reader);
      break;
case PASSWORD:
{
      ROOT_LOGGER.passwordAttributeDeprecated();
      required.remove(Attribute.KEYSTORE_PASSWORD);
      KeystoreAttributes.KEYSTORE_PASSWORD.parseAndSetParameter(value,addOperation,reader);
      break;
    }
case KEYSTORE_PASSWORD:
{
    KeystoreAttributes.KEYSTORE_PASSWORD.parseAndSetParameter(value,addOperation,reader);
    break;
  }
case RELATIVE_TO:
{
  KeystoreAttributes.KEYSTORE_RELATIVE_TO.parseAndSetParameter(value,addOperation,reader);
  break;
}
case ALIAS:
{
if (extended) {
  KeystoreAttributes.ALIAS.parseAndSetParameter(value,addOperation,reader);
}
 else {
  throw unexpectedAttribute(reader,i);
}
break;
}
case KEY_PASSWORD:
{
if (extended) {
KeystoreAttributes.KEY_PASSWORD.parseAndSetParameter(value,addOperation,reader);
}
 else {
throw unexpectedAttribute(reader,i);
}
break;
}
default :
{
throw unexpectedAttribute(reader,i);
}
}
}
}
if (required.size() > 0) {
throw missingRequired(reader,required);
}
requireNoContent(reader);
}
