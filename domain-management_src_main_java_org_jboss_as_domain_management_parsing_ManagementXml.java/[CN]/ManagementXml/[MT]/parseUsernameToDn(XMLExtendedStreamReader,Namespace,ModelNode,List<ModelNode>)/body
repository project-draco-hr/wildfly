{
  ModelNode childAdd=new ModelNode();
  childAdd.get(OP).set(ADD);
  boolean forceFound=false;
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    final String value=reader.getAttributeValue(i);
    if (!isNoNamespaceAttribute(reader,i)) {
      throw unexpectedAttribute(reader,i);
    }
 else {
      final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case FORCE:
        forceFound=true;
      BaseLdapUserSearchResource.FORCE.parseAndSetParameter(value,childAdd,reader);
    break;
default :
{
    throw unexpectedAttribute(reader,i);
  }
}
}
}
if (forceFound == false) {
throw missingRequired(reader,Collections.singleton(Attribute.FORCE));
}
ModelNode address=ldapAddress.clone().add(USERNAME_TO_DN);
while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
requireNamespace(reader,expectedNs);
final Element element=Element.forName(reader.getLocalName());
if (childAdd == null) {
throw unexpectedElement(reader);
}
switch (element) {
case USERNAME_IS_DN:
parseUsernameIsDn(reader,address,childAdd,list);
break;
case USERNAME_FILTER:
parseUsernameFilter(reader,address,childAdd,list);
break;
case ADVANCED_FILTER:
parseAdvancedFilter(reader,address,childAdd,list);
break;
default :
{
throw unexpectedElement(reader);
}
}
childAdd=null;
}
if (childAdd != null) {
throw missingOneOf(reader,EnumSet.of(Element.USERNAME_IS_DN,Element.USERNAME_FILTER,Element.ADVANCED_FILTER));
}
}
