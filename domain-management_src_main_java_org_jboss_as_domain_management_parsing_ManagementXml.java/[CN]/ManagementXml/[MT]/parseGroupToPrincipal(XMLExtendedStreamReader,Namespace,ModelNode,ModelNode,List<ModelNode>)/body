{
  boolean baseDnFound=false;
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    final String value=reader.getAttributeValue(i);
    if (!isNoNamespaceAttribute(reader,i)) {
      throw unexpectedAttribute(reader,i);
    }
 else {
      final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case BASE_DN:
{
          baseDnFound=true;
          GroupToPrincipalResourceDefinition.BASE_DN.parseAndSetParameter(value,addOp,reader);
          break;
        }
case RECURSIVE:
{
        GroupToPrincipalResourceDefinition.RECURSIVE.parseAndSetParameter(value,addOp,reader);
        break;
      }
case SEARCH_BY:
    GroupToPrincipalResourceDefinition.SEARCH_BY.parseAndSetParameter(value,addOp,reader);
  break;
default :
{
  throw unexpectedAttribute(reader,i);
}
}
}
}
if (baseDnFound == false) {
throw missingRequired(reader,Collections.singleton(Attribute.BASE_DN));
}
boolean elementFound=false;
while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
requireNamespace(reader,expectedNs);
final Element element=Element.forName(reader.getLocalName());
if (elementFound) {
throw unexpectedElement(reader);
}
elementFound=true;
switch (element) {
case MEMBERSHIP_FILTER:
parseMembershipFilter(reader,addOp);
break;
default :
{
throw unexpectedElement(reader);
}
}
}
addOp.get(OP_ADDR).set(parentAddress.clone().add(GROUP_TO_PRINCIPAL));
list.add(addOp);
}
