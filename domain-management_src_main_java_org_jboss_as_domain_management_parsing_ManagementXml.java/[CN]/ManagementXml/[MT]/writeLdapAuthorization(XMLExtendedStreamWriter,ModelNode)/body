{
  writer.writeStartElement(Element.LDAP.getLocalName());
  LdapAuthorizationResourceDefinition.CONNECTION.marshallAsAttribute(ldapNode,writer);
  LdapAuthorizationResourceDefinition.BASE_DN.marshallAsAttribute(ldapNode,writer);
  LdapAuthorizationResourceDefinition.RECURSIVE.marshallAsAttribute(ldapNode,writer);
  LdapAuthorizationResourceDefinition.USER_DN.marshallAsAttribute(ldapNode,writer);
  if (ldapNode.hasDefined(USERNAME_ATTRIBUTE)) {
    writer.writeEmptyElement(ROLES_FILTER);
    LdapAuthorizationResourceDefinition.USERNAME.marshallAsAttribute(ldapNode,writer);
    LdapAuthorizationResourceDefinition.REVERSE_GROUP.marshallAsAttribute(ldapNode,writer);
    writeLdapAuthorizationPattern(writer,ldapNode);
  }
 else   if (ldapNode.hasDefined(ADVANCED_FILTER)) {
    writer.writeEmptyElement(ADVANCED_FILTER);
    LdapAuthorizationResourceDefinition.ADVANCED_FILTER.marshallAsAttribute(ldapNode,writer);
    writeLdapAuthorizationPattern(writer,ldapNode);
  }
  writer.writeEndElement();
}
