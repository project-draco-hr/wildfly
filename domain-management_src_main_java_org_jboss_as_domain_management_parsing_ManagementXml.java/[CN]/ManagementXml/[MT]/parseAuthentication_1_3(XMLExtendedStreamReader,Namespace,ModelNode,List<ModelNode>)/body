{
  boolean trustStoreFound=false;
  boolean localFound=false;
  boolean usernamePasswordFound=false;
  while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
    requireNamespace(reader,expectedNs);
    final Element element=Element.forName(reader.getLocalName());
switch (element) {
case JAAS:
{
        if (usernamePasswordFound) {
          throw unexpectedElement(reader);
        }
        parseJaasAuthentication(reader,realmAddress,list);
        usernamePasswordFound=true;
        break;
      }
case LDAP:
{
      if (usernamePasswordFound) {
        throw unexpectedElement(reader);
      }
switch (expectedNs) {
case DOMAIN_1_3:
        parseLdapAuthentication_1_1(reader,expectedNs,realmAddress,list);
      break;
case DOMAIN_1_4:
case DOMAIN_1_5:
    parseLdapAuthentication_1_4(reader,expectedNs,realmAddress,list);
  break;
default :
parseLdapAuthentication_2_0(reader,expectedNs,realmAddress,list);
break;
}
usernamePasswordFound=true;
break;
}
case PROPERTIES:
{
if (usernamePasswordFound) {
throw unexpectedElement(reader);
}
parsePropertiesAuthentication_1_1(reader,realmAddress,list);
usernamePasswordFound=true;
break;
}
case TRUSTSTORE:
{
if (trustStoreFound) {
throw unexpectedElement(reader);
}
parseTruststore(reader,expectedNs,realmAddress,list);
trustStoreFound=true;
break;
}
case USERS:
{
if (usernamePasswordFound) {
throw unexpectedElement(reader);
}
parseUsersAuthentication(reader,expectedNs,realmAddress,list);
usernamePasswordFound=true;
break;
}
case PLUG_IN:
{
if (usernamePasswordFound) {
throw unexpectedElement(reader);
}
ModelNode parentAddress=realmAddress.clone().add(AUTHENTICATION);
parsePlugIn_Authentication(reader,expectedNs,parentAddress,list);
usernamePasswordFound=true;
break;
}
case LOCAL:
{
if (localFound) {
throw unexpectedElement(reader);
}
switch (expectedNs) {
case DOMAIN_1_3:
case DOMAIN_1_4:
case DOMAIN_1_5:
case DOMAIN_2_0:
parseLocalAuthentication_1_3(reader,expectedNs,realmAddress,list);
break;
default :
parseLocalAuthentication_2_1(reader,expectedNs,realmAddress,list);
}
localFound=true;
break;
}
default :
{
throw unexpectedElement(reader);
}
}
}
}
