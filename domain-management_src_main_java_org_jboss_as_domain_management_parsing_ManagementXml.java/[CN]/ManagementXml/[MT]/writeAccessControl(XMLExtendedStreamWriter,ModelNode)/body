{
  boolean hasServerGroupRoles=accessControl.isDefined() && accessControl.hasDefined(SERVER_GROUP_SCOPED_ROLE);
  boolean hasHostRoles=accessControl.isDefined() && (accessControl.hasDefined(HOST_SCOPED_ROLE) || accessControl.hasDefined(HOST_SCOPED_ROLES));
  boolean hasRoleMapping=accessControl.isDefined() && accessControl.hasDefined(ROLE_MAPPING);
  Map<String,Map<String,Set<String>>> configuredAccessConstraints=getConfiguredAccessConstraints(accessControl);
  boolean hasProvider=accessControl.isDefined() && accessControl.hasDefined(AccessControlResourceDefinition.PROVIDER.getName());
  if (!hasProvider && !hasServerGroupRoles && !hasHostRoles&& !hasRoleMapping&& configuredAccessConstraints.size() == 0) {
    return;
  }
  writer.writeStartElement(Element.ACCESS_CONTROL.getLocalName());
  AccessControlResourceDefinition.PROVIDER.marshallAsAttribute(accessControl,writer);
  if (hasServerGroupRoles) {
    ModelNode serverGroupRoles=accessControl.get(SERVER_GROUP_SCOPED_ROLE);
    if (serverGroupRoles.asInt() > 0) {
      writeServerGroupScopedRoles(writer,serverGroupRoles);
    }
  }
  if (hasHostRoles) {
    ModelNode serverGroupRoles=accessControl.get(HOST_SCOPED_ROLE);
    if (serverGroupRoles.asInt() > 0) {
      writeHostScopedRoles(writer,serverGroupRoles);
    }
  }
  if (hasRoleMapping) {
    writeRoleMapping(writer,accessControl);
  }
  if (configuredAccessConstraints.size() > 0) {
    writeAccessConstraints(writer,accessControl,configuredAccessConstraints);
  }
  writer.writeEndElement();
}
