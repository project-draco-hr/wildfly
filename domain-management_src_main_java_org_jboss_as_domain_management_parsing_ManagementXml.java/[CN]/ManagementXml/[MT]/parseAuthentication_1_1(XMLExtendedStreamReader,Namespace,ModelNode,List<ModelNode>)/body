{
  boolean trustStoreFound=false;
  boolean usernamePasswordFound=false;
  while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
    requireNamespace(reader,expectedNs);
    final Element element=Element.forName(reader.getLocalName());
switch (element) {
case JAAS:
{
        if (usernamePasswordFound) {
          throw unexpectedElement(reader);
        }
        parseJaasAuthentication(reader,expectedNs,realmAddress,list);
        usernamePasswordFound=true;
        break;
      }
case LDAP:
{
      if (usernamePasswordFound) {
        throw unexpectedElement(reader);
      }
      parseLdapAuthentication_1_1(reader,expectedNs,realmAddress,list);
      usernamePasswordFound=true;
      break;
    }
case PROPERTIES:
{
    if (usernamePasswordFound) {
      throw unexpectedElement(reader);
    }
    parsePropertiesAuthentication_1_1(reader,realmAddress,list);
    usernamePasswordFound=true;
    break;
  }
case TRUSTSTORE:
{
  if (trustStoreFound) {
    throw unexpectedElement(reader);
  }
  parseTruststore(reader,realmAddress,list);
  trustStoreFound=true;
  break;
}
case USERS:
{
if (usernamePasswordFound) {
  throw unexpectedElement(reader);
}
parseUsersAuthentication(reader,expectedNs,realmAddress,list);
usernamePasswordFound=true;
break;
}
default :
{
throw unexpectedElement(reader);
}
}
}
}
