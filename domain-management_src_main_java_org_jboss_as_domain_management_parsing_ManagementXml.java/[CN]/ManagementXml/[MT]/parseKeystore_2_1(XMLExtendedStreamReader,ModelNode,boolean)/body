{
  boolean pathSet=false;
  boolean nonFileProvider=false;
  boolean keystorePasswordSet=false;
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    final String value=reader.getAttributeValue(i);
    if (!isNoNamespaceAttribute(reader,i)) {
      throw unexpectedAttribute(reader,i);
    }
 else {
      final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case PROVIDER:
        KeystoreAttributes.KEYSTORE_PROVIDER.parseAndSetParameter(value,addOperation,reader);
      if (value.equals(KeystoreAttributes.KEYSTORE_PROVIDER.getDefaultValue().asString()) == false) {
        nonFileProvider=true;
      }
    break;
case PATH:
  KeystoreAttributes.KEYSTORE_PATH.parseAndSetParameter(value,addOperation,reader);
pathSet=true;
break;
case KEYSTORE_PASSWORD:
{
KeystoreAttributes.KEYSTORE_PASSWORD.parseAndSetParameter(value,addOperation,reader);
keystorePasswordSet=true;
break;
}
case RELATIVE_TO:
{
KeystoreAttributes.KEYSTORE_RELATIVE_TO.parseAndSetParameter(value,addOperation,reader);
break;
}
case ALIAS:
{
if (extended) {
KeystoreAttributes.ALIAS.parseAndSetParameter(value,addOperation,reader);
}
 else {
throw unexpectedAttribute(reader,i);
}
break;
}
case KEY_PASSWORD:
{
if (extended) {
KeystoreAttributes.KEY_PASSWORD.parseAndSetParameter(value,addOperation,reader);
}
 else {
throw unexpectedAttribute(reader,i);
}
break;
}
default :
{
throw unexpectedAttribute(reader,i);
}
}
}
}
if (nonFileProvider) {
if (keystorePasswordSet == false) {
throw missingRequired(reader,EnumSet.of(Attribute.KEYSTORE_PASSWORD));
}
}
 else if (pathSet == false || keystorePasswordSet == false) {
Set<Attribute> missing=new HashSet<Attribute>();
if (pathSet == false) {
missing.add(Attribute.PATH);
}
if (keystorePasswordSet == false) {
missing.add(Attribute.KEYSTORE_PASSWORD);
}
throw missingRequired(reader,missing);
}
requireNoContent(reader);
}
