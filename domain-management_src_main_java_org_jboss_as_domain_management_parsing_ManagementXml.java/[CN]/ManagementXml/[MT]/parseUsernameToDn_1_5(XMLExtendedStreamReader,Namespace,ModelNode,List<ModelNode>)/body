{
  final ModelNode childAdd=new ModelNode();
  childAdd.get(OP).set(ADD);
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    final String value=reader.getAttributeValue(i);
    if (!isNoNamespaceAttribute(reader,i)) {
      throw unexpectedAttribute(reader,i);
    }
 else {
      final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case FORCE:
        BaseLdapUserSearchResource.FORCE.parseAndSetParameter(value,childAdd,reader);
      break;
default :
{
      throw unexpectedAttribute(reader,i);
    }
}
}
}
boolean filterFound=false;
ModelNode address=ldapAddress.clone().add(USERNAME_TO_DN);
while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
requireNamespace(reader,expectedNs);
final Element element=Element.forName(reader.getLocalName());
if (filterFound) {
throw unexpectedElement(reader);
}
switch (element) {
case USERNAME_IS_DN:
filterFound=true;
parseUsernameIsDn(reader,address,childAdd);
break;
case USERNAME_FILTER:
filterFound=true;
parseUsernameFilter(reader,address,childAdd);
break;
case ADVANCED_FILTER:
filterFound=true;
parseAdvancedFilter(reader,address,childAdd);
break;
default :
{
throw unexpectedElement(reader);
}
}
}
if (filterFound == false) {
throw missingOneOf(reader,EnumSet.of(Element.USERNAME_IS_DN,Element.USERNAME_FILTER,Element.ADVANCED_FILTER));
}
list.add(childAdd);
}
