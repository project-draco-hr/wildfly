{
  ModelNode addr=realmAddress.clone().add(AUTHORIZATION,LDAP);
  ModelNode ldapAuthorization=Util.getEmptyOperation(ADD,addr);
  list.add(ldapAuthorization);
  Set<Attribute> required=EnumSet.of(Attribute.CONNECTION);
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    final String value=reader.getAttributeValue(i);
    if (!isNoNamespaceAttribute(reader,i)) {
      throw unexpectedAttribute(reader,i);
    }
 else {
      final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
      required.remove(attribute);
switch (attribute) {
case CONNECTION:
{
          LdapAuthorizationResourceDefinition.CONNECTION.parseAndSetParameter(value,ldapAuthorization,reader);
          break;
        }
default :
{
        throw unexpectedAttribute(reader,i);
      }
  }
}
}
if (required.isEmpty() == false) {
throw missingRequired(reader,required);
}
Set<Element> foundElements=new HashSet<Element>();
while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
requireNamespace(reader,expectedNs);
final Element element=Element.forName(reader.getLocalName());
if (foundElements.add(element) == false) {
  throw unexpectedElement(reader);
}
switch (element) {
case USERNAME_TO_DN:
{
    parseUsernameToDn(reader,expectedNs,addr,list);
    break;
  }
case GROUP_SEARCH:
{
  parseGroupSearch(reader,expectedNs,addr,list);
  break;
}
default :
{
throw unexpectedElement(reader);
}
}
}
}
