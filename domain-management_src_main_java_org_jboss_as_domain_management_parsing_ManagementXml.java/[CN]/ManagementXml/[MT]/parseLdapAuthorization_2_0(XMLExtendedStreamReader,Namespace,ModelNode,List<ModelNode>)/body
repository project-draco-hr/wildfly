{
  ModelNode addr=realmAddress.clone().add(AUTHORIZATION,LDAP);
  ModelNode ldapAuthorization=Util.getEmptyOperation(ADD,addr);
  list.add(ldapAuthorization);
  Set<Attribute> required=EnumSet.of(Attribute.CONNECTION,Attribute.BASE_DN);
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    final String value=reader.getAttributeValue(i);
    if (!isNoNamespaceAttribute(reader,i)) {
      throw unexpectedAttribute(reader,i);
    }
 else {
      final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
      required.remove(attribute);
switch (attribute) {
case CONNECTION:
{
          LdapAuthorizationResourceDefinition.CONNECTION.parseAndSetParameter(value,ldapAuthorization,reader);
          break;
        }
case BASE_DN:
{
        LdapAuthorizationResourceDefinition.BASE_DN.parseAndSetParameter(value,ldapAuthorization,reader);
        break;
      }
case RECURSIVE:
{
      LdapAuthorizationResourceDefinition.RECURSIVE.parseAndSetParameter(value,ldapAuthorization,reader);
      break;
    }
case USER_DN:
{
    LdapAuthorizationResourceDefinition.USER_DN.parseAndSetParameter(value,ldapAuthorization,reader);
    break;
  }
default :
{
  throw unexpectedAttribute(reader,i);
}
}
}
}
if (required.size() > 0) {
throw missingRequired(reader,required);
}
boolean choiceFound=false;
while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
requireNamespace(reader,expectedNs);
final Element element=Element.forName(reader.getLocalName());
switch (element) {
case ADVANCED_FILTER:
choiceFound=true;
parseAdvancePropertiesAuthorization(reader,realmAddress,list,ldapAuthorization);
break;
case GROUPS_FILTER:
{
choiceFound=true;
parseGroupsPropertiesAuthorization(reader,realmAddress,list,ldapAuthorization);
break;
}
default :
{
throw unexpectedElement(reader);
}
}
}
if (!choiceFound) {
throw missingOneOf(reader,EnumSet.of(Element.ADVANCED_FILTER,Element.USERNAME_FILTER,Element.GROUPS_FILTER));
}
}
