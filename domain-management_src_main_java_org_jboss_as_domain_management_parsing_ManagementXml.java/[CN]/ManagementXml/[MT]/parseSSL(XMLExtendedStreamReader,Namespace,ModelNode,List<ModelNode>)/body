{
  ModelNode ssl=new ModelNode();
  ssl.get(OP).set(ADD);
  ssl.get(OP_ADDR).set(realmAddress).add(SERVER_IDENTITY,SSL);
  list.add(ssl);
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    final String value=reader.getAttributeValue(i);
    if (!isNoNamespaceAttribute(reader,i)) {
      throw unexpectedAttribute(reader,i);
    }
 else {
      final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case PROTOCOL:
{
          SSLServerIdentityResourceDefinition.PROTOCOL.parseAndSetParameter(value,ssl,reader);
          break;
        }
default :
{
        throw unexpectedAttribute(reader,i);
      }
  }
}
}
while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
requireNamespace(reader,expectedNs);
final Element element=Element.forName(reader.getLocalName());
switch (element) {
case KEYSTORE:
{
switch (expectedNs) {
case DOMAIN_1_0:
case DOMAIN_1_1:
case DOMAIN_1_2:
      parseKeystore_1_0(reader,ssl);
    break;
case DOMAIN_1_3:
case DOMAIN_1_4:
case DOMAIN_1_5:
case DOMAIN_2_0:
  parseKeystore_1_3(reader,ssl,true);
break;
default :
parseKeystore_2_1(reader,ssl,true);
}
break;
}
default :
{
throw unexpectedElement(reader);
}
}
}
}
