{
  String className=JGROUPS_PROTOCOL_PKG + "." + protocolName;
  Class<? extends Protocol> protocolClass=null;
  try {
    protocolClass=Protocol.class.getClassLoader().loadClass(className).asSubclass(Protocol.class);
  }
 catch (  Exception e) {
    throw new OperationFailedException("can't load protocol class");
  }
  Field[] fields=getProtocolFields(protocolClass);
  List<AttributeDefinition> attributes=new ArrayList<AttributeDefinition>();
  Map<String,String> attributeDescriptionMap=new HashMap<String,String>();
  attributeDescriptionMap.put(protocolName,"The " + protocolName + " protocol");
  for (  Field field : fields) {
    boolean equivalentTypeAvailable=isEquivalentModelTypeAvailable(field.getType());
    ManagedAttribute managed=field.getAnnotation(ManagedAttribute.class);
    if (managed != null && equivalentTypeAvailable) {
      addAttributeDefinition(attributes,attributeDescriptionMap,protocolName,field.getName(),getEquivalentModelType(field.getType()),managed.description());
    }
    Property property=field.getAnnotation(Property.class);
    if (property != null) {
      if (equivalentTypeAvailable) {
        addAttributeDefinition(attributes,attributeDescriptionMap,protocolName,field.getName(),getEquivalentModelType(field.getType()),property.description());
      }
 else {
        addAttributeDefinition(attributes,attributeDescriptionMap,protocolName,field.getName(),ModelType.STRING,property.description());
      }
    }
  }
  ResourceBuilder protocolBuilder=ResourceBuilder.Factory.create(PathElement.pathElement(ModelKeys.PROTOCOL,protocolName),new StandardResourceDescriptionResolver(protocolName,"org.jboss.as.clustering.jgroups.subsystem.ChannelInstanceResource$ProtocolResources",ChannelInstanceResource.class.getClassLoader()));
  for (  AttributeDefinition def : attributes) {
    protocolBuilder.addMetric(def,new ProtocolMetricsHandler(protocolName));
  }
  ProtocolResources.addProtocolMapEntries(attributeDescriptionMap);
  return protocolBuilder.build();
}
