{
  super.setupViewInterceptors(view);
  view.getConfigurators().addFirst(new ViewConfigurator(){
    @Override public void configure(    DeploymentPhaseContext context,    ComponentConfiguration componentConfiguration,    ViewDescription description,    ViewConfiguration configuration) throws DeploymentUnitProcessingException {
      for (      Method method : configuration.getProxyFactory().getCachedMethods()) {
        if ((method.getName().equals("hashCode") && method.getParameterTypes().length == 0) || method.getName().equals("equals") && method.getParameterTypes().length == 1 && method.getParameterTypes()[0] == Object.class) {
          configuration.addViewInterceptor(method,ComponentTypeIdentityInterceptorFactory.INSTANCE,InterceptorOrder.View.SESSION_BEAN_EQUALS_HASHCODE);
        }
      }
      configuration.addViewInterceptor(SingletonComponentInstanceAssociationInterceptor.FACTORY,InterceptorOrder.View.ASSOCIATING_INTERCEPTOR);
    }
  }
);
  if (TransactionManagementType.BEAN.equals(this.getTransactionManagementType())) {
    view.getConfigurators().add(new ViewConfigurator(){
      @Override public void configure(      DeploymentPhaseContext context,      ComponentConfiguration componentConfiguration,      ViewDescription description,      ViewConfiguration configuration) throws DeploymentUnitProcessingException {
        final ComponentInterceptorFactory slsbBmtInterceptorFactory=new ComponentInterceptorFactory(){
          @Override protected Interceptor create(          Component component,          InterceptorFactoryContext context){
            if (component instanceof SingletonComponent == false) {
              throw new IllegalArgumentException("Component " + component + " with component class: "+ component.getComponentClass()+ " isn't a singleton component");
            }
            return new SingletonBMTInterceptor((SingletonComponent)component);
          }
        }
;
        configuration.addViewInterceptor(slsbBmtInterceptorFactory,InterceptorOrder.View.TRANSACTION_INTERCEPTOR);
      }
    }
);
  }
}
