{
  ComponentConfiguration singletonComponentConfiguration=new ComponentConfiguration(this,applicationDescription.getClassConfiguration(getComponentClassName()));
  singletonComponentConfiguration.setComponentCreateServiceFactory(new SingletonComponentCreateServiceFactory(this.isInitOnStartup(),dependsOn));
  if (getTransactionManagementType().equals(TransactionManagementType.CONTAINER)) {
    getConfigurators().add(new ComponentConfigurator(){
      @Override public void configure(      final DeploymentPhaseContext context,      final ComponentDescription description,      final ComponentConfiguration configuration) throws DeploymentUnitProcessingException {
        if (getClassDescription().getPostConstructMethod() != null) {
          TransactionAttributeType txAttr=getTransactionAttribute(MethodIntf.BEAN,getClassDescription().getClassName(),getClassDescription().getPostConstructMethod().getName(),getClassDescription().getPostConstructMethod().getParameterTypes());
          configuration.addPostConstructInterceptor(new SingletonLifecycleCMTTxInterceptorFactory(txAttr),InterceptorOrder.ComponentPostConstruct.TRANSACTION_INTERCEPTOR);
        }
        if (getClassDescription().getPreDestroyMethod() != null) {
          TransactionAttributeType txAttr=getTransactionAttribute(MethodIntf.BEAN,getClassDescription().getClassName(),getClassDescription().getPreDestroyMethod().getName(),getClassDescription().getPreDestroyMethod().getParameterTypes());
          configuration.addPreDestroyInterceptor(new SingletonLifecycleCMTTxInterceptorFactory(txAttr),InterceptorOrder.ComponentPostConstruct.TRANSACTION_INTERCEPTOR);
        }
      }
    }
);
  }
 else {
    getConfigurators().add(new ComponentConfigurator(){
      @Override public void configure(      final DeploymentPhaseContext context,      final ComponentDescription description,      final ComponentConfiguration configuration) throws DeploymentUnitProcessingException {
        final ComponentInstanceInterceptorFactory slsbBmtInterceptorFactory=new ComponentInstanceInterceptorFactory(){
          @Override protected Interceptor create(          Component component,          InterceptorFactoryContext context){
            if (component instanceof SingletonComponent == false) {
              throw new IllegalArgumentException("Component " + component + " with component class: "+ component.getComponentClass()+ " isn't a singleton component");
            }
            return new SingletonBMTInterceptor((SingletonComponent)component);
          }
        }
;
        if (getClassDescription().getPostConstructMethod() != null) {
          configuration.addPostConstructInterceptor(slsbBmtInterceptorFactory,InterceptorOrder.ComponentPostConstruct.TRANSACTION_INTERCEPTOR);
        }
        if (getClassDescription().getPreDestroyMethod() != null) {
          configuration.addPreDestroyInterceptor(slsbBmtInterceptorFactory,InterceptorOrder.ComponentPreDestroy.TRANSACTION_INTERCEPTOR);
        }
        configuration.addComponentInterceptor(slsbBmtInterceptorFactory,InterceptorOrder.Component.BMT_TRANSACTION_INTERCEPTOR,false);
      }
    }
);
  }
  return singletonComponentConfiguration;
}
