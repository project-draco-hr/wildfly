{
  super.setupViewInterceptors(view);
  addViewSerializationInterceptor(view);
  this.addConcurrencyManagementInterceptor(view);
  view.getConfigurators().addFirst(new ViewConfigurator(){
    @Override public void configure(    DeploymentPhaseContext context,    ComponentConfiguration componentConfiguration,    ViewDescription description,    ViewConfiguration configuration) throws DeploymentUnitProcessingException {
      for (      Method method : configuration.getProxyFactory().getCachedMethods()) {
        if ((method.getName().equals("hashCode") && method.getParameterTypes().length == 0) || method.getName().equals("equals") && method.getParameterTypes().length == 1 && method.getParameterTypes()[0] == Object.class) {
          configuration.addClientInterceptor(method,ComponentTypeIdentityInterceptorFactory.INSTANCE,InterceptorOrder.Client.EJB_EQUALS_HASHCODE);
        }
      }
      configuration.addViewInterceptor(SingletonComponentInstanceAssociationInterceptor.FACTORY,InterceptorOrder.View.ASSOCIATING_INTERCEPTOR);
    }
  }
);
  if (view.getMethodIntf() == MethodIntf.REMOTE) {
    view.getConfigurators().add(new ViewConfigurator(){
      @Override public void configure(      final DeploymentPhaseContext context,      final ComponentConfiguration componentConfiguration,      final ViewDescription description,      final ViewConfiguration configuration) throws DeploymentUnitProcessingException {
        final String earApplicationName=componentConfiguration.getComponentDescription().getModuleDescription().getEarApplicationName();
        configuration.setViewInstanceFactory(new StatelessRemoteViewInstanceFactory(earApplicationName,componentConfiguration.getModuleName(),componentConfiguration.getComponentDescription().getModuleDescription().getDistinctName(),componentConfiguration.getComponentName()));
      }
    }
);
  }
}
