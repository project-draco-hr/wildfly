{
  ComponentConfiguration singletonComponentConfiguration=new ComponentConfiguration(this,classIndex,moduleClassLoder);
  singletonComponentConfiguration.setComponentCreateServiceFactory(new SingletonComponentCreateServiceFactory(this.isInitOnStartup(),dependsOn));
  if (getTransactionManagementType().equals(TransactionManagementType.CONTAINER)) {
    getConfigurators().add(new ComponentConfigurator(){
      @Override public void configure(      final DeploymentPhaseContext context,      final ComponentDescription description,      final ComponentConfiguration configuration) throws DeploymentUnitProcessingException {
        configuration.addPostConstructInterceptor(new SingletonLifecycleCMTTxInterceptor.Factory(TransactionAttributeType.REQUIRES_NEW),InterceptorOrder.ComponentPostConstruct.TRANSACTION_INTERCEPTOR);
        configuration.addPreDestroyInterceptor(new SingletonLifecycleCMTTxInterceptor.Factory(TransactionAttributeType.REQUIRES_NEW),InterceptorOrder.ComponentPreDestroy.TRANSACTION_INTERCEPTOR);
        if (description.isPassivationApplicable()) {
          configuration.addPrePassivateInterceptor(new SingletonLifecycleCMTTxInterceptor.Factory(TransactionAttributeType.REQUIRES_NEW),InterceptorOrder.ComponentPassivation.TRANSACTION_INTERCEPTOR);
          configuration.addPostActivateInterceptor(new SingletonLifecycleCMTTxInterceptor.Factory(TransactionAttributeType.REQUIRES_NEW),InterceptorOrder.ComponentPassivation.TRANSACTION_INTERCEPTOR);
        }
        configuration.addTimeoutViewInterceptor(TimerCMTTxInterceptor.FACTORY,InterceptorOrder.View.CMT_TRANSACTION_INTERCEPTOR);
      }
    }
);
  }
 else {
    getConfigurators().add(new ComponentConfigurator(){
      @Override public void configure(      final DeploymentPhaseContext context,      final ComponentDescription description,      final ComponentConfiguration configuration) throws DeploymentUnitProcessingException {
        configuration.addPostConstructInterceptor(EjbBMTInterceptor.FACTORY,InterceptorOrder.ComponentPostConstruct.TRANSACTION_INTERCEPTOR);
        configuration.addPreDestroyInterceptor(EjbBMTInterceptor.FACTORY,InterceptorOrder.ComponentPreDestroy.TRANSACTION_INTERCEPTOR);
        configuration.addComponentInterceptor(EjbBMTInterceptor.FACTORY,InterceptorOrder.Component.BMT_TRANSACTION_INTERCEPTOR,false);
      }
    }
);
  }
  return singletonComponentConfiguration;
}
