{
  PersistenceUnitService service=(PersistenceUnitService)deploymentUnit.getServiceRegistry().getRequiredService(puServiceName).getValue();
  EntityManagerFactory emf=service.getEntityManagerFactory();
  EntityManager entityManager;
  if (type.equals(PersistenceContextType.TRANSACTION)) {
    entityManager=new TransactionScopedEntityManager(unitName,properties,emf);
    if (log.isDebugEnabled())     log.debug("created new TransactionScopedEntityManager for unit name=" + unitName);
  }
 else {
    EntityManager entityManager1=SFSBCallStack.findPersistenceContext(unitName);
    if (entityManager1 == null) {
      entityManager1=emf.createEntityManager(properties);
      entityManager=new ExtendedEntityManager(unitName,entityManager1);
      if (log.isDebugEnabled())       log.debug("created new ExtendedEntityManager for unit name=" + unitName);
    }
 else {
      entityManager=entityManager1;
      if (log.isDebugEnabled())       log.debug("inherited existing ExtendedEntityManager from SFSB invocation stack, unit name=" + unitName);
    }
    SFSBXPCMap.RegisterPersistenceContext(entityManager);
  }
  if (!ENTITY_MANAGER_CLASS.equals(injectionTypeName)) {
    Class extensionClass;
    try {
      extensionClass=this.getClass().getClassLoader().loadClass(injectionTypeName);
    }
 catch (    ClassNotFoundException e) {
      throw new RuntimeException("couldn't load " + injectionTypeName + " from JPA modules classloader",e);
    }
    Object targetValueToInject=entityManager.unwrap(extensionClass);
    new ValueManagedReference(new ImmediateValue<Object>(targetValueToInject));
  }
  return new ValueManagedReference(new ImmediateValue<Object>(entityManager));
}
