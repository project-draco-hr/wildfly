{
  final String queueName=QUEUE_NAME.resolveModelAttribute(context,model).asString();
  final ModelNode forwardingNode=FORWARDING_ADDRESS.resolveModelAttribute(context,model);
  final String forwardingAddress=forwardingNode.isDefined() ? forwardingNode.asString() : null;
  final ModelNode filterNode=CommonAttributes.FILTER.resolveModelAttribute(context,model);
  final String filterString=filterNode.isDefined() ? filterNode.asString() : null;
  final ModelNode transformerNode=CommonAttributes.TRANSFORMER_CLASS_NAME.resolveModelAttribute(context,model);
  final String transformerClassName=transformerNode.isDefined() ? transformerNode.asString() : null;
  final int minLargeMessageSize=CommonAttributes.MIN_LARGE_MESSAGE_SIZE.resolveModelAttribute(context,model).asInt();
  final long retryInterval=CommonAttributes.RETRY_INTERVAL.resolveModelAttribute(context,model).asLong();
  final double retryIntervalMultiplier=CommonAttributes.RETRY_INTERVAL_MULTIPLIER.resolveModelAttribute(context,model).asDouble();
  final long maxRetryInterval=CommonAttributes.MAX_RETRY_INTERVAL.resolveModelAttribute(context,model).asLong();
  final int initialConnectAttempts=INITIAL_CONNECT_ATTEMPTS.resolveModelAttribute(context,model).asInt();
  final int reconnectAttempts=RECONNECT_ATTEMPTS.resolveModelAttribute(context,model).asInt();
  final int reconnectAttemptsOnSameNode=RECONNECT_ATTEMPTS_ON_SAME_NODE.resolveModelAttribute(context,model).asInt();
  final boolean useDuplicateDetection=USE_DUPLICATE_DETECTION.resolveModelAttribute(context,model).asBoolean();
  final int confirmationWindowSize=CommonAttributes.BRIDGE_CONFIRMATION_WINDOW_SIZE.resolveModelAttribute(context,model).asInt();
  final long clientFailureCheckPeriod=CommonAttributes.CHECK_PERIOD.resolveModelAttribute(context,model).asLong();
  final long connectionTTL=CommonAttributes.CONNECTION_TTL.resolveModelAttribute(context,model).asLong();
  final ModelNode discoveryNode=DISCOVERY_GROUP_NAME.resolveModelAttribute(context,model);
  final String discoveryGroupName=discoveryNode.isDefined() ? discoveryNode.asString() : null;
  List<String> staticConnectors=discoveryGroupName == null ? getStaticConnectors(model) : null;
  final boolean ha=CommonAttributes.HA.resolveModelAttribute(context,model).asBoolean();
  final String user=USER.resolveModelAttribute(context,model).asString();
  final String password=PASSWORD.resolveModelAttribute(context,model).asString();
  BridgeConfiguration config=new BridgeConfiguration().setName(name).setQueueName(queueName).setForwardingAddress(forwardingAddress).setFilterString(filterString).setTransformerClassName(transformerClassName).setMinLargeMessageSize(minLargeMessageSize).setClientFailureCheckPeriod(clientFailureCheckPeriod).setConnectionTTL(connectionTTL).setRetryInterval(retryInterval).setMaxRetryInterval(maxRetryInterval).setRetryIntervalMultiplier(retryIntervalMultiplier).setInitialConnectAttempts(initialConnectAttempts).setReconnectAttempts(reconnectAttempts).setReconnectAttemptsOnSameNode(reconnectAttemptsOnSameNode).setUseDuplicateDetection(useDuplicateDetection).setConfirmationWindowSize(confirmationWindowSize).setHA(ha).setUser(user).setPassword(password);
  if (discoveryGroupName != null) {
    config.setDiscoveryGroupName(discoveryGroupName);
  }
 else {
    config.setStaticConnectors(staticConnectors);
  }
  return config;
}
