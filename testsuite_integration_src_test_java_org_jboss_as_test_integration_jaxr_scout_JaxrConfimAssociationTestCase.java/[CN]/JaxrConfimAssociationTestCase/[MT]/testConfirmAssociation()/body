{
  String orgTarget="Target Organization2";
  String orgSource="Source Organization2";
  String type="Implements";
  Key savekey=null;
  Collection associationKeys=null;
  Collection sourceKeys=null;
  Collection targetKeys=null;
  String targetId=null;
  String sourceId=null;
  BusinessQueryManager bqm2=null;
  BusinessLifeCycleManager blm2=null;
  Association association=null;
  try {
    login();
    getJAXREssentials();
    Connection con2=loginSecondUser();
    RegistryService rs2=con2.getRegistryService();
    blm2=rs2.getBusinessLifeCycleManager();
    bqm2=rs2.getBusinessQueryManager();
    Organization target=blm2.createOrganization(blm.createInternationalString(orgTarget));
    Organization source=blm.createOrganization(blm.createInternationalString(orgSource));
    Collection orgs=new ArrayList();
    orgs.add(source);
    br=blm.saveOrganizations(orgs);
    if (br.getExceptions() != null) {
      Assert.fail(" Source:Save Orgs failed");
    }
    sourceKeys=br.getCollection();
    Iterator iter=sourceKeys.iterator();
    while (iter.hasNext()) {
      savekey=(Key)iter.next();
    }
    sourceId=savekey.getId();
    String objectType=LifeCycleManager.ORGANIZATION;
    Organization pubSource=(Organization)bqm.getRegistryObject(sourceId,objectType);
    Assert.assertNotNull("Source retrieved: ",pubSource.getName().getValue());
    orgs.clear();
    orgs.add(target);
    br=blm2.saveOrganizations(orgs);
    if (br.getExceptions() != null) {
      Assert.fail("Target:Save Orgs failed");
    }
    targetKeys=br.getCollection();
    iter=targetKeys.iterator();
    while (iter.hasNext()) {
      savekey=(Key)iter.next();
    }
    targetId=savekey.getId();
    Organization pubTarget=(Organization)bqm2.getRegistryObject(targetId,objectType);
    Assert.assertNotNull("Target: ",pubTarget.getName().getValue());
    Concept associationType=getAssociationConcept(type);
    if (associationType == null)     Assert.fail(" getAssociationConcept returned null");
    association=blm.createAssociation(pubTarget,associationType);
    association.setSourceObject(pubSource);
    blm2.confirmAssociation(association);
    Collection associations=new ArrayList();
    associations.add(association);
    br=blm2.saveAssociations(associations,false);
    if (br.getExceptions() != null) {
      Assert.fail(" Save Association did not complete due to errors");
    }
    associationKeys=br.getCollection();
    iter=associationKeys.iterator();
    Collection associationTypes=new ArrayList();
    associationTypes.add(associationType);
    br=bqm.findCallerAssociations(null,new Boolean(false),new Boolean(true),associationTypes);
    if (br.getExceptions() != null) {
      Assert.fail(" Find Caller Association failed");
    }
    associations=br.getCollection();
    if (associations.size() == 0) {
      Assert.fail(" Retrieving Associations failed");
    }
    iter=associations.iterator();
    while (iter.hasNext()) {
      association=(Association)iter.next();
    }
    Assert.assertNotNull("Association type:",association.getAssociationType().getValue());
    if (association.isConfirmed()) {
      Assert.fail("FAIL: isConfirmed returned true  ");
    }
    if (association.isConfirmedBySourceOwner()) {
      Assert.fail("FAIL: isConfirmedBySourceOwner returned true  ");
    }
    blm.confirmAssociation(association);
    br=blm.saveAssociations(associations,false);
    if (br.getExceptions() != null) {
      Assert.fail("Error:  saveAssociations failed  ");
    }
    br=bqm.findCallerAssociations(null,new Boolean(true),new Boolean(true),associationTypes);
    if (br.getExceptions() != null) {
      Assert.fail("Error:  findCallerAssociations failed  ");
    }
    associations=br.getCollection();
    iter=associations.iterator();
    while (iter.hasNext()) {
      association=(Association)iter.next();
    }
    if (!(association.isConfirmed())) {
      Assert.fail("FAIL: isConfirmed incorrectly returned false ");
    }
    if (!(association.isConfirmedBySourceOwner())) {
      Assert.fail("FAIL: isConfirmedBySourceOwner incorrectly returned false ");
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    Assert.fail("Caught unexpected exception: " + e.getMessage());
  }
 finally {
    try {
      blm2.deleteOrganizations(targetKeys);
      blm.deleteOrganizations(sourceKeys);
      if (association != null) {
        Key asskey=association.getKey();
        List<Key> keyList=new ArrayList<Key>();
        keyList.add(asskey);
        blm.deleteAssociations(keyList);
      }
    }
 catch (    JAXRException je) {
      Assert.fail("Error: not able to delete registry objects");
    }
  }
}
