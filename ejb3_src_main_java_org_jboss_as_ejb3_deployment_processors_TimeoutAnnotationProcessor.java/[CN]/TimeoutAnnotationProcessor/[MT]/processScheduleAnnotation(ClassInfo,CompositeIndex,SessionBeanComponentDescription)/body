{
  final Map<DotName,List<AnnotationInstance>> classAnnotations=beanClass.annotations();
  if (classAnnotations != null) {
    List<AnnotationInstance> annotations=classAnnotations.get(SCHEDULE_ANNOTATION);
    if (annotations != null) {
      for (      AnnotationInstance annotationInstance : annotations) {
        if (enabled) {
          AnnotationTarget target=annotationInstance.target();
          if (target instanceof MethodInfo) {
            final MethodIdentifier identifier=getMethodIdentifier(target);
            final AutoTimer timer=new AutoTimer();
            for (            ScheduleValues schedulePart : ScheduleValues.values()) {
              schedulePart.set(timer,annotationInstance);
            }
            componentDescription.addScheduleMethodIdentifier(identifier,timer);
          }
        }
 else {
          logger.warn("@Schedule annotation found on " + annotationInstance.target() + " but timer service is not enabled");
        }
      }
    }
    List<AnnotationInstance> schedules=classAnnotations.get(SCHEDULES_ANNOTATION);
    if (schedules != null) {
      for (      AnnotationInstance annotationInstance : schedules) {
        AnnotationTarget target=annotationInstance.target();
        if (enabled) {
          if (target instanceof MethodInfo) {
            final MethodIdentifier identifier=getMethodIdentifier(target);
            final AnnotationInstance[] values=annotationInstance.value().asNestedArray();
            for (            AnnotationInstance schedule : values) {
              final AutoTimer timer=new AutoTimer();
              for (              ScheduleValues schedulePart : ScheduleValues.values()) {
                schedulePart.set(timer,schedule);
              }
              componentDescription.addScheduleMethodIdentifier(identifier,timer);
            }
          }
        }
 else {
          logger.warn("@Schedules annotation found on " + annotationInstance.target() + " but timer service is not enabled");
        }
      }
    }
  }
  final DotName superName=beanClass.superName();
  if (superName != null) {
    ClassInfo superClass=compositeIndex.getClassByName(superName);
    if (superClass != null) {
      processScheduleAnnotation(superClass,compositeIndex,componentDescription);
    }
  }
}
