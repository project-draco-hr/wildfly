{
  final OperationDefinition removeExtension=new SimpleOperationDefinitionBuilder("remove",new StandardResourceDescriptionResolver("test","test",getClass().getClassLoader())).build();
  PathElement webExtension=PathElement.pathElement(EXTENSION,"org.jboss.as.web");
  rootRegistration.registerSubModel(new SimpleResourceDefinition(webExtension,ControllerResolver.getResolver(EXTENSION))).registerOperationHandler(removeExtension,new ReloadRequiredRemoveStepHandler());
  rootResource.registerChild(webExtension,Resource.Factory.create());
  rootRegistration.registerSubModel(new SimpleResourceDefinition(PathElement.pathElement(EXTENSION),ControllerResolver.getResolver(EXTENSION),new OperationStepHandler(){
    @Override public void execute(    OperationContext context,    ModelNode operation) throws OperationFailedException {
      if (!extensionAdded) {
        extensionAdded=true;
        undertow.initialize(extensionRegistry.getExtensionContext("org.wildfly.extension.undertow",rootRegistration,ExtensionRegistryType.SERVER));
        io.initialize(extensionRegistry.getExtensionContext("org.wildfly.extension.io",rootRegistration,ExtensionRegistryType.SERVER));
      }
    }
  }
,null));
  rootRegistration.registerSubModel(CoreManagementResourceDefinition.forStandaloneServer(new DelegatingConfigurableAuthorizer(),null,null,new EnvironmentNameReader(){
    public boolean isServer(){
      return true;
    }
    public String getServerName(){
      return "Test";
    }
    public String getHostName(){
      return null;
    }
    public String getProductName(){
      return null;
    }
  }
,null));
  rootResource.registerChild(CoreManagementResourceDefinition.PATH_ELEMENT,Resource.Factory.create());
  System.setProperty("file-base",new File(getClass().getClassLoader().getResource("server.keystore").getFile()).getParentFile().getAbsolutePath());
  Map<String,Class> capabilities=new HashMap<>();
  final String SOCKET_CAPABILITY="org.wildfly.network.socket-binding";
  capabilities.put(buildDynamicCapabilityName(SOCKET_CAPABILITY,"http"),SocketBinding.class);
  capabilities.put(buildDynamicCapabilityName(SOCKET_CAPABILITY,"https"),SocketBinding.class);
  registerServiceCapabilities(capabilityRegistry,capabilities);
}
