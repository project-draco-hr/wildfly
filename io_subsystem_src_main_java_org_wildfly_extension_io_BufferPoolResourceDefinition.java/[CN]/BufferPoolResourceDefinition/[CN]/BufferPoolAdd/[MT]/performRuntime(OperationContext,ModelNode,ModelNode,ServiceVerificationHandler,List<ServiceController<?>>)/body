{
  final PathAddress address=PathAddress.pathAddress(operation.get(OP_ADDR));
  final String name=address.getLastElement().getValue();
  final ModelNode bufferSizeModel=BUFFER_SIZE.resolveModelAttribute(context,model);
  final ModelNode bufferPerSliceModel=BUFFER_PER_SLICE.resolveModelAttribute(context,model);
  final ModelNode directModel=DIRECT_BUFFERS.resolveModelAttribute(context,model);
  final int bufferSize=bufferSizeModel.isDefined() ? bufferSizeModel.asInt() : defaultBufferSize;
  final int bufferPerSlice=bufferPerSliceModel.isDefined() ? bufferPerSliceModel.asInt() : defaultBuffersPerRegion;
  final boolean direct=directModel.isDefined() ? directModel.asBoolean() : defaultDirectBuffers;
  final BufferPoolService service=new BufferPoolService(bufferSize,bufferPerSlice,direct);
  final ServiceBuilder<Pool<ByteBuffer>> serviceBuilder=context.getServiceTarget().addService(IOServices.BUFFER_POOL.append(name),service);
  serviceBuilder.setInitialMode(ServiceController.Mode.ACTIVE);
  final ServiceController<Pool<ByteBuffer>> serviceController=serviceBuilder.install();
  if (newControllers != null) {
    newControllers.add(serviceController);
  }
}
