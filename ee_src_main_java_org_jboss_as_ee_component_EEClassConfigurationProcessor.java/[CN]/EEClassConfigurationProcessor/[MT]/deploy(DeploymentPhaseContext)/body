{
  final DeploymentUnit deploymentUnit=phaseContext.getDeploymentUnit();
  final EEModuleDescription moduleDescription=deploymentUnit.getAttachment(Attachments.EE_MODULE_DESCRIPTION);
  final EEApplicationDescription applicationDescription=deploymentUnit.getAttachment(Attachments.EE_APPLICATION_DESCRIPTION);
  final Module module=deploymentUnit.getAttachment(org.jboss.as.server.deployment.Attachments.MODULE);
  if (moduleDescription == null) {
    return;
  }
  if (module == null) {
    return;
  }
  DeploymentReflectionIndex deploymentReflectionIndex=deploymentUnit.getAttachment(org.jboss.as.server.deployment.Attachments.REFLECTION_INDEX);
  if (deploymentUnit.getAttachment(org.jboss.as.ee.structure.Attachments.DEPLOYMENT_TYPE) == DeploymentType.EAR) {
    final List<DeploymentUnit> subdeployments=deploymentUnit.getAttachmentList(SUB_DEPLOYMENTS);
    processClasses(phaseContext,applicationDescription,deploymentReflectionIndex,deploymentUnit);
    for (    DeploymentUnit subdeployment : subdeployments) {
      processClasses(phaseContext,applicationDescription,deploymentReflectionIndex,subdeployment);
    }
  }
 else   if (deploymentUnit.getParent() == null) {
    if (moduleDescription == null) {
      return;
    }
    final Collection<EEModuleClassDescription> classDescriptions=moduleDescription.getClassDescriptions();
    if (classDescriptions != null) {
      for (      EEModuleClassDescription classDescription : classDescriptions) {
        Class<?> clazz=null;
        try {
          clazz=Class.forName(classDescription.getClassName(),false,module.getClassLoader());
        }
 catch (        ClassNotFoundException e) {
          throw new DeploymentUnitProcessingException("Failed to load class " + classDescription.getClassName(),e);
        }
        final EEModuleClassConfiguration classConfiguration=new EEModuleClassConfiguration(clazz,classDescription,deploymentReflectionIndex);
        logger.debug("Configuring EE module class: " + clazz);
        for (        ClassConfigurator classConfigurator : classDescription.getConfigurators()) {
          classConfigurator.configure(phaseContext,classDescription,classConfiguration);
        }
        applicationDescription.addClass(classConfiguration);
      }
    }
  }
}
