{
  setupCleanDirectories(jbossHomeDir,systemProps);
  StandaloneServer standaloneServer=new StandaloneServer(){
    private ServiceContainer serviceContainer;
    private ServerDeploymentManager serverDeploymentManager;
    private Context context;
    private ModelControllerClient modelControllerClient;
    @Override public void deploy(    File file) throws IOException, ExecutionException, InterruptedException {
      final InputStream is=VFSUtils.createJarFileInputStream(VFS.getChild(file.toURI()));
      try {
        execute(serverDeploymentManager.newDeploymentPlan().add(file.getName(),is).andDeploy().build());
      }
  finally {
        if (is != null)         try {
          is.close();
        }
 catch (        IOException ignore) {
        }
      }
    }
    private ServerDeploymentPlanResult execute(    DeploymentPlan deploymentPlan) throws ExecutionException, InterruptedException {
      return serverDeploymentManager.execute(deploymentPlan).get();
    }
    @Override public Context getContext(){
      return ifSet(context,"Server has not been started");
    }
    @Override public ModelControllerClient getModelControllerClient(){
      return modelControllerClient;
    }
    @Override public void start() throws ServerStartException {
      try {
        ServerEnvironment serverEnvironment=Main.determineEnvironment(new String[0],systemProps,systemEnv,ServerEnvironment.LaunchType.EMBEDDED);
        Bootstrap bootstrap=Bootstrap.Factory.newInstance();
        Bootstrap.Configuration configuration=new Bootstrap.Configuration(serverEnvironment);
        final ExtensionRegistry extensionRegistry=configuration.getExtensionRegistry();
        final Bootstrap.ConfigurationPersisterFactory configurationPersisterFactory=new Bootstrap.ConfigurationPersisterFactory(){
          @Override public ExtensibleConfigurationPersister createConfigurationPersister(          ServerEnvironment serverEnvironment,          ExecutorService executorService){
            final QName rootElement=new QName(Namespace.CURRENT.getUriString(),"server");
            final StandaloneXml parser=new StandaloneXml(Module.getBootModuleLoader(),executorService,extensionRegistry);
            TransientConfigurationPersister persister=new TransientConfigurationPersister(serverEnvironment.getServerConfigurationFile(),rootElement,parser,parser);
            for (            Namespace namespace : Namespace.values()) {
              if (!namespace.equals(Namespace.CURRENT)) {
                persister.registerAdditionalRootElement(new QName(namespace.getUriString(),"server"),parser);
              }
            }
            extensionRegistry.setWriterRegistry(persister);
            return persister;
          }
        }
;
        configuration.setConfigurationPersisterFactory(configurationPersisterFactory);
        configuration.setModuleLoader(moduleLoader);
        Future<ServiceContainer> future=bootstrap.startup(configuration,Collections.<ServiceActivator>emptyList());
        serviceContainer=future.get();
        final Value<ModelController> controllerService=(Value<ModelController>)serviceContainer.getRequiredService(Services.JBOSS_SERVER_CONTROLLER);
        final ModelController controller=controllerService.getValue();
        serverDeploymentManager=new ModelControllerServerDeploymentManager(controller);
        modelControllerClient=controller.createClient(Executors.newCachedThreadPool());
        context=new InitialContext();
      }
 catch (      RuntimeException rte) {
        throw rte;
      }
catch (      Exception ex) {
        throw new ServerStartException(ex);
      }
    }
    @Override public void stop(){
      if (context != null) {
        try {
          context.close();
          context=null;
        }
 catch (        NamingException e) {
          e.printStackTrace();
        }
      }
      serverDeploymentManager=null;
      if (serviceContainer != null) {
        try {
          serviceContainer.shutdown();
          serviceContainer.awaitTermination();
        }
 catch (        RuntimeException rte) {
          throw rte;
        }
catch (        Exception ex) {
          ex.printStackTrace();
        }
      }
    }
    @Override public void undeploy(    File file) throws ExecutionException, InterruptedException {
      execute(serverDeploymentManager.newDeploymentPlan().undeploy(file.getName()).andRemoveUndeployed().build());
    }
  }
;
  return standaloneServer;
}
