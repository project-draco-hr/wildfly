{
  expectHeader(DomainClientProtocol.RETURN_DEPLOYMENT_PLAN_ID);
  UUID planId=unmarshal(unmarshaller,UUID.class);
  if (!deploymentPlan.getId().equals(planId))   throw new IllegalStateException("Incorrect id " + planId + " for result; expected "+ deploymentPlan.getId());
  byte header=unmarshaller.readByte();
  if (header == DomainClientProtocol.RETURN_DEPLOYMENT_PLAN_INVALID) {
    InvalidDeploymentPlanException e=unmarshal(unmarshaller,InvalidDeploymentPlanException.class);
    return new DeploymentPlanResultImpl(deploymentPlan,e);
  }
 else {
    expectHeader(header,DomainClientProtocol.RETURN_DEPLOYMENT_SET_ID);
    Map<UUID,DeploymentSetPlanResult> setResults=new HashMap<UUID,DeploymentSetPlanResult>();
    do {
      header=readDeploymentSetResult(setResults);
    }
 while (header == DomainClientProtocol.RETURN_DEPLOYMENT_SET_ID);
    if (header == DomainClientProtocol.RETURN_DEPLOYMENT_SET_ROLLBACK) {
      do {
        header=readDeploymentSetRollback(setResults);
      }
 while (header == DomainClientProtocol.RETURN_DEPLOYMENT_SET_ROLLBACK);
    }
    expectHeader(header,DomainClientProtocol.RETURN_DEPLOYMENT_PLAN_COMPLETE);
    for (    DeploymentSetPlan setPlan : deploymentPlan.getDeploymentSetPlans()) {
      for (      DeploymentAction action : setPlan.getDeploymentActions()) {
        for (        DomainUpdateListener<?> listener : ((DeploymentActionImpl)action).getListeners()) {
          listener.handleComplete();
        }
      }
    }
    return new DeploymentPlanResultImpl(deploymentPlan,setResults);
  }
}
