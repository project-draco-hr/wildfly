{
  UUID actionId=unmarshal(unmarshaller,UUID.class);
  DeploymentActionImpl action=findDeploymentAction(actionId,setResult.getDeploymentSetPlan());
  Set<DomainUpdateListener<?>> listeners=action.getListeners();
  expectHeader(DomainClientProtocol.RETURN_DEPLOYMENT_ACTION_MODEL_RESULT);
  DomainUpdateApplierResponse duar=unmarshal(unmarshaller,DomainUpdateApplierResponse.class);
  DeploymentActionResultImpl actionResult=(DeploymentActionResultImpl)setResult.getDeploymentActionResults().get(actionId);
  if (actionResult != null) {
    actionResult.markRolledBack(duar);
    for (    DomainUpdateListener<?> listener : listeners) {
      if (duar.isCancelled()) {
        listener.handleDomainRollbackFailed(new RollbackCancelledException("Rollback of deployment action " + actionId + "was cancelled"));
      }
 else       if (duar.isRolledBack()) {
        listener.handleDomainRollbackFailed(new RollbackCancelledException("Rollback of deployment action " + actionId + "was itself rolled back"));
      }
 else       if (duar.getDomainFailure() != null) {
        listener.handleDomainRollbackFailed(duar.getDomainFailure());
      }
 else       if (duar.getHostFailures().size() > 0) {
        listener.handleHostRollbackFailed(duar.getHostFailures());
      }
 else {
        listener.handleDomainRollback();
      }
    }
  }
  byte nextHeader=unmarshaller.readByte();
  return nextHeader;
}
