{
  URI request=http.getRequestURI();
  String requestMethod=http.getRequestMethod();
  boolean isGet="GET".equals(requestMethod);
  if (!isGet && !"POST".equals(requestMethod)) {
    http.sendResponseHeaders(405,-1);
    return;
  }
  ModelNode dmr=null;
  ModelNode response;
  int status=200;
  Headers requestHeaders=http.getRequestHeaders();
  boolean encode="application/dmr-encoded".equals(requestHeaders.getFirst("Accept")) || "application/dmr-encoded".equals(requestHeaders.getFirst("Content-Type"));
  try {
    dmr=isGet ? convertGetRequest(request) : convertPostRequest(http.getRequestBody(),encode);
    response=modelController.execute(ExecutionContextBuilder.Factory.create(dmr).build());
  }
 catch (  Throwable t) {
    log.error("Unexpected error executing model request",t);
    http.sendResponseHeaders(500,-1);
    return;
  }
  if (response.hasDefined(OUTCOME) && FAILED.equals(response.get(OUTCOME).asString())) {
    status=500;
  }
  boolean pretty=dmr.hasDefined("json.pretty") && dmr.get("json.pretty").asBoolean();
  Headers responseHeaders=http.getResponseHeaders();
  responseHeaders.add("Content-Type",encode ? "application/dmr-encoded" : "application/json");
  responseHeaders.add("Access-Control-Allow-Origin","*");
  http.sendResponseHeaders(status,0);
  OutputStream out=http.getResponseBody();
  PrintWriter print=new PrintWriter(out);
  if (isGet && status == 200)   response=response.get("result");
  try {
    if (encode) {
      response.writeBase64(out);
    }
 else {
      response.writeJSONString(print,!pretty);
    }
  }
  finally {
    print.flush();
    out.flush();
    safeClose(print);
    safeClose(out);
  }
}
