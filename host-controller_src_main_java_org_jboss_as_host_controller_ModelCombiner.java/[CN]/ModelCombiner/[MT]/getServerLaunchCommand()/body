{
  final List<String> command=new ArrayList<String>();
  command.add(getJavaCommand());
  command.add("-D[" + ManagedServer.getServerProcessName(serverName) + "]");
  JvmOptionsBuilderFactory.getInstance().addOptions(jvmElement,command);
  command.add("-D" + RMI_CLIENT_INTERVAL + "="+ SecurityActions.getSystemProperty(RMI_CLIENT_INTERVAL,DEFAULT_RMI_INTERVAL));
  command.add("-D" + RMI_SERVER_INTERVAL + "="+ SecurityActions.getSystemProperty(RMI_SERVER_INTERVAL,DEFAULT_RMI_INTERVAL));
  Map<String,String> bootTimeProperties=getAllSystemProperties(true);
  bootTimeProperties.putAll(environment.getHostSystemProperties());
  for (  Entry<String,String> entry : bootTimeProperties.entrySet()) {
    final StringBuilder sb=new StringBuilder("-D");
    sb.append(entry.getKey());
    sb.append('=');
    sb.append(entry.getValue() == null ? "true" : entry.getValue());
    command.add(sb.toString());
  }
  command.add("-Dorg.jboss.boot.log.file=" + getAbsolutePath(environment.getDomainServersDir(),serverName,"log","boot.log"));
  String loggingConfiguration=System.getProperty("logging.configuration");
  if (loggingConfiguration == null) {
    loggingConfiguration="file:" + getAbsolutePath(environment.getDomainConfigurationDir(),"logging.properties");
  }
  command.add("-Dlogging.configuration=" + loggingConfiguration);
  command.add("-jar");
  command.add("jboss-modules.jar");
  command.add("-mp");
  command.add("modules");
  command.add("-jaxpmodule");
  command.add("javax.xml.jaxp-provider");
  command.add("org.jboss.as.server");
  return command;
}
