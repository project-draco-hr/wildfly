{
  final DeploymentUnit deploymentUnit=phaseContext.getDeploymentUnit();
  final Module module=deploymentUnit.getAttachment(org.jboss.as.server.deployment.Attachments.MODULE);
  if (module == null) {
    return;
  }
  final ModuleClassLoader classLoader=module.getClassLoader();
  final EEModuleDescription moduleDescription=deploymentUnit.getAttachment(Attachments.EE_MODULE_DESCRIPTION);
  final DeploymentReflectionIndex deploymentReflectionIndex=deploymentUnit.getAttachment(org.jboss.as.server.deployment.Attachments.REFLECTION_INDEX);
  final ServiceTarget serviceTarget=phaseContext.getServiceTarget();
  for (  AbstractComponentDescription description : moduleDescription.getComponentDescriptions()) {
    final String className=description.getComponentClassName();
    final Class<?> componentClass;
    try {
      componentClass=Class.forName(className,false,classLoader);
    }
 catch (    ClassNotFoundException e) {
      throw new DeploymentUnitProcessingException("Component class not found",e);
    }
    final ClassReflectionIndex<?> index=deploymentReflectionIndex.getClassIndex(componentClass);
    final String applicationName=description.getApplicationName();
    final String moduleName=description.getModuleName();
    final String componentName=description.getComponentName();
    final ServiceName baseName=deploymentUnit.getServiceName().append("component").append(componentName);
    final AbstractComponentConfiguration configuration=description.createComponentConfiguration(phaseContext,componentClass);
    configuration.setComponentClass(componentClass);
    final ServiceName createServiceName=baseName.append("CREATE");
    final ServiceName startServiceName=baseName.append("START");
    final ComponentCreateService createService=new ComponentCreateService(configuration);
    final ServiceBuilder<Component> createBuilder=serviceTarget.addService(createServiceName,createService);
    final ComponentStartService startService=new ComponentStartService();
    final ServiceBuilder<Component> startBuilder=serviceTarget.addService(startServiceName,startService);
    startBuilder.addDependency(createServiceName,Component.class,startService.getComponentInjector());
    for (    Map.Entry<Class<?>,ProxyFactory<?>> entry : configuration.getProxyFactories().entrySet()) {
      final Class<?> viewClass=entry.getKey();
      final ServiceName serviceName=baseName.append("VIEW").append(viewClass.getName());
      final ProxyFactory<?> proxyFactory=entry.getValue();
      final ViewService viewService=new ViewService(viewClass,proxyFactory);
      serviceTarget.addService(serviceName,viewService).addDependency(createServiceName,AbstractComponent.class,viewService.getComponentInjector()).install();
    }
    final List<BindingDescription> bindingDescriptions=description.getBindings();
    final List<ResourceInjection> instanceResourceInjections=configuration.getResourceInjections();
    for (    BindingDescription bindingDescription : bindingDescriptions) {
      addJndiDependency(classLoader,serviceTarget,description,componentClass,index,applicationName,moduleName,componentName,createServiceName,startBuilder,instanceResourceInjections,bindingDescription,phaseContext);
    }
    final Collection<InterceptorDescription> interceptorClasses=description.getAllInterceptors().values();
    for (    InterceptorDescription interceptorDescription : interceptorClasses) {
      final List<ResourceInjection> interceptorResourceInjections=new ArrayList<ResourceInjection>();
      String interceptorClassName=interceptorDescription.getInterceptorClassName();
      final Class<?> interceptorClass;
      try {
        interceptorClass=Class.forName(interceptorClassName,false,classLoader);
      }
 catch (      ClassNotFoundException e) {
        throw new DeploymentUnitProcessingException("Component interceptor class not found",e);
      }
      for (      BindingDescription bindingDescription : interceptorDescription.getBindings()) {
        addJndiDependency(classLoader,serviceTarget,description,interceptorClass,index,applicationName,moduleName,componentName,createServiceName,startBuilder,interceptorResourceInjections,bindingDescription,phaseContext);
      }
    }
    createBuilder.install();
    startBuilder.install();
  }
}
