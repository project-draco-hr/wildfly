{
  final Set<BindingConfiguration> uniqueBindings=new HashSet(bindings);
  for (  BindingConfiguration bindingConfiguration : uniqueBindings) {
    if (bindingConfiguration.getName().startsWith("java:comp") || !bindingConfiguration.getName().startsWith("java:")) {
      final String bindingName=bindingConfiguration.getName().startsWith("java:comp") ? bindingConfiguration.getName() : "java:comp/env/" + bindingConfiguration.getName();
      final BinderService service=new BinderService(bindingName);
      final ServiceName serviceName=ContextNames.serviceNameOfEnvEntry(configuration.getApplicationName(),configuration.getModuleName(),configuration.getComponentName(),configuration.getComponentDescription().getNamingMode() == ComponentNamingMode.CREATE,bindingName);
      if (existingBindings.containsKey(serviceName)) {
        if (deploymentDescriptorBindings.containsKey(serviceName)) {
          continue;
        }
        final BindingConfiguration existing=existingBindings.get(serviceName);
        if (existing.equalTo(bindingConfiguration,phaseContext)) {
          continue;
        }
 else {
          throw new DeploymentUnitProcessingException("Bindings with the same name at " + bindingConfiguration.getName() + " "+ bindingConfiguration+ " and "+ existing);
        }
      }
      existingBindings.put(serviceName,bindingConfiguration);
      logger.tracef("Binding %s for %s using service name %s",bindingName,configuration.getComponentClass(),serviceName);
      ServiceBuilder<ManagedReferenceFactory> serviceBuilder=serviceTarget.addService(serviceName,service);
      bindingConfiguration.getSource().getResourceValue(resolutionContext,serviceBuilder,phaseContext,service.getManagedObjectInjector());
      serviceBuilder.addDependency(contextServiceName,NamingStore.class,service.getNamingStoreInjector());
      serviceBuilder.install();
    }
  }
}
