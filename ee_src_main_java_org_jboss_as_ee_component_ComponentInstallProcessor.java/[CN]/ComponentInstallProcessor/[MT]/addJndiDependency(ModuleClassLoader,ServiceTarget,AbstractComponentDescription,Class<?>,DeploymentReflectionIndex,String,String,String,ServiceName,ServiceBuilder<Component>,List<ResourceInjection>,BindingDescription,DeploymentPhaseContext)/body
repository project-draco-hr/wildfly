{
  final String bindingName=bindingDescription.getBindingName();
  final String bindingType=bindingDescription.getBindingType();
  try {
    Class.forName(bindingType,false,classLoader);
  }
 catch (  ClassNotFoundException e) {
    throw new DeploymentUnitProcessingException("Component binding class not found",e);
  }
  Value<ManagedReferenceFactory> resourceValue;
  if (bindingName != null) {
    ComponentNamingMode namingMode=description.getNamingMode();
    final String fullBindingName;
    final String serviceBindingName;
    if (bindingName.startsWith("java:") || bindingDescription.isAbsoluteBinding()) {
      fullBindingName=bindingName;
      int idx=fullBindingName.indexOf('/');
      if (idx == -1) {
        serviceBindingName=fullBindingName;
      }
 else {
        serviceBindingName=fullBindingName.substring(idx + 1);
      }
    }
 else     if (namingMode == ComponentNamingMode.CREATE) {
      fullBindingName="java:comp/env/" + bindingName;
      serviceBindingName="env/" + bindingName;
    }
 else {
      fullBindingName="java:module/env/" + bindingName;
      serviceBindingName="env/" + bindingName;
    }
    final BinderService service=new BinderService(serviceBindingName);
    final ServiceName bindingServiceName=ContextNames.serviceNameOfContext(applicationName,moduleName,componentName,fullBindingName);
    if (bindingServiceName == null) {
      throw new IllegalArgumentException("Invalid context name '" + bindingName + "' for binding");
    }
    ServiceBuilder<ManagedReferenceFactory> sourceServiceBuilder=serviceTarget.addService(bindingServiceName,service);
    bindingDescription.getReferenceSourceDescription().getResourceValue(description,bindingDescription,sourceServiceBuilder,phaseContext,service.getManagedObjectInjector());
    resourceValue=sourceServiceBuilder.addDependency(createServiceName).addDependency(bindingServiceName.getParent(),NamingStore.class,service.getNamingStoreInjector()).install();
    if (bindingDescription.isDependency())     startBuilder.addDependency(bindingServiceName);
  }
 else {
    final InjectedValue<ManagedReferenceFactory> injectedValue=new InjectedValue<ManagedReferenceFactory>();
    bindingDescription.getReferenceSourceDescription().getResourceValue(description,bindingDescription,startBuilder,phaseContext,injectedValue);
    resourceValue=injectedValue;
  }
  for (  InjectionTargetDescription targetDescription : bindingDescription.getInjectionTargetDescriptions()) {
    instanceResourceInjections.add(ResourceInjection.Factory.create(targetDescription,injecteeClass,deploymentReflectionIndex,resourceValue));
  }
}
