{
  String patch=null;
  String existing=null;
  String output=null;
  final int argsLength=args.length;
  for (int i=0; i < argsLength; i++) {
    final String arg=args[i];
    try {
      if ("--help".equals(arg) || "-h".equals(arg) || "-H".equals(arg)) {
        usage();
        return;
      }
 else       if (arg.startsWith("--patch=")) {
        patch=arg.substring("--patch=".length());
      }
 else       if (arg.startsWith("--existing=")) {
        existing=arg.substring("--existing=".length());
      }
 else       if (arg.startsWith("--output=")) {
        output=arg.substring("--output=".length());
      }
 else       if (arg.equals("--assemble-patch-bundle")) {
        continue;
      }
 else {
        System.err.println(PatchMessages.MESSAGES.argumentExpected(arg));
        usage();
        return;
      }
    }
 catch (    IndexOutOfBoundsException e) {
      System.err.println(PatchMessages.MESSAGES.argumentExpected(arg));
      usage();
      return;
    }
  }
  final PatchBundleGenerator gen=new PatchBundleGenerator();
  gen.createTempStructure(UUID.randomUUID().toString());
  final File p=new File(patch);
  final File e=existing == null ? null : new File(existing);
  final File t=new File(output);
  try {
    gen.assemble(p,e,t);
  }
  finally {
    IoUtils.recursiveDelete(gen.tmp);
  }
}
