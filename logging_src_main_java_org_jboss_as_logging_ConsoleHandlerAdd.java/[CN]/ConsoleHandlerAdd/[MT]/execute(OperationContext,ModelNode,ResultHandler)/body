{
  final PathAddress address=PathAddress.pathAddress(operation.require(OP_ADDR));
  final String name=address.getLastElement().getValue();
  final ModelNode compensatingOperation=new ModelNode();
  compensatingOperation.get(OP_ADDR).set(operation.require(OP_ADDR));
  compensatingOperation.get(OP).set(REMOVE);
  final String handlerType=operation.require(HANDLER_TYPE).asString();
  final LoggerHandlerType type=LoggerHandlerType.valueOf(handlerType);
  if (type != LoggerHandlerType.CONSOLE_HANDLER) {
    throw new OperationFailedException(new ModelNode().set("invalid operation for handler-type: " + type));
  }
  final ModelNode subModel=context.getSubModel();
  subModel.get(AUTOFLUSH).set(operation.get(AUTOFLUSH));
  subModel.get(ENCODING).set(operation.get(ENCODING));
  subModel.get(FORMATTER).set(operation.get(FORMATTER));
  subModel.get(HANDLER_TYPE).set(handlerType);
  subModel.get(LEVEL).set(operation.get(LEVEL));
  subModel.get(QUEUE_LENGTH).set(operation.get(QUEUE_LENGTH));
  if (context.getRuntimeContext() != null) {
    context.getRuntimeContext().setRuntimeTask(new RuntimeTask(){
      public void execute(      RuntimeTaskContext context) throws OperationFailedException {
        final ServiceTarget serviceTarget=context.getServiceTarget();
        try {
          final ConsoleHandlerService service=new ConsoleHandlerService();
          final ServiceBuilder<Handler> serviceBuilder=serviceTarget.addService(LogServices.handlerName(name),service);
          service.setLevel(Level.parse(operation.get(LEVEL).asString()));
          final Boolean autoFlush=operation.get(AUTOFLUSH).asBoolean();
          if (autoFlush != null)           service.setAutoflush(autoFlush.booleanValue());
          if (operation.hasDefined(ENCODING))           service.setEncoding(operation.get(ENCODING).asString());
          if (operation.hasDefined(FORMATTER))           service.setFormatterSpec(createFormatterSpec(operation));
          serviceBuilder.setInitialMode(ServiceController.Mode.ACTIVE);
          serviceBuilder.addListener(new ResultHandler.ServiceStartListener(resultHandler));
          serviceBuilder.install();
        }
 catch (        Throwable t) {
          throw new OperationFailedException(new ModelNode().set(t.getLocalizedMessage()));
        }
      }
    }
);
  }
 else {
    resultHandler.handleResultComplete();
  }
  return new BasicOperationResult(compensatingOperation);
}
