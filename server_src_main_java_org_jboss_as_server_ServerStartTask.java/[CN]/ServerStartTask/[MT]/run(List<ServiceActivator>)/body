{
  final Bootstrap bootstrap=Bootstrap.Factory.newInstance();
  bootstrap.start(new Bootstrap.Configuration(),startServices);
  ServerDeploymentRepositoryImpl.addService(batchBuilder);
  ServerDeploymentManagerImpl.addService(serverModel,container,batchBuilder);
  DeploymentScannerFactoryService.addService(batchBuilder);
  batchBuilder.addService(ClassifyingModuleLoaderService.SERVICE_NAME,new ClassifyingModuleLoaderService()).install();
  final DeploymentChain deploymentChain=new DeploymentChainImpl();
  deploymentChain.addProcessor(new DeploymentModuleLoaderProcessor(new DeploymentModuleLoaderImpl()),Phase.MODULARIZE_DEPLOYMENT_MODULE_LOADER);
  batchBuilder.addService(DeploymentChain.SERVICE_NAME,new DeploymentChainService(deploymentChain)).setInitialMode(ServiceController.Mode.ACTIVE).install();
  new JarDeploymentActivator().activate(deploymentChain);
  for (  AbstractServerModelUpdate<?> update : updates) {
    try {
      serverModel.update(update);
    }
 catch (    UpdateFailedException e) {
      throw new IllegalStateException("Failed to start server",e);
    }
  }
  final BootUpdateContext context=new BootUpdateContext(){
    public ServiceTarget getServiceTarget(){
      return batchBuilder;
    }
    public ServiceContainer getServiceContainer(){
      throw new UnsupportedOperationException();
    }
    public void addDeploymentProcessor(    final Phase phase,    int priority,    DeploymentUnitProcessor processor){
      deploymentChain.addProcessor(processor,priority);
    }
    public ServiceRegistry getServiceRegistry(){
      return getServiceContainer();
    }
  }
;
  DeploymentUpdateService.addService(batchBuilder,updates,serverStartupListener);
  StandaloneServerManagementServices.addServices(serverModel,container,batchBuilder);
  try {
    batchBuilder.install();
  }
 catch (  ServiceRegistryException e) {
    throw new IllegalStateException("Failed to install boot services",e);
  }
}
