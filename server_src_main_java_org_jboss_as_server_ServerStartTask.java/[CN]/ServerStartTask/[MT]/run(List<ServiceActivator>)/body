{
  if (serverName != null) {
    MDC.put("process","server-" + serverName);
    log.infof("Starting server \"%s\"",serverName);
  }
 else {
    MDC.put("process","standalone-server");
    log.infof("Starting standalone server");
  }
  final ServiceContainer container=ServiceContainer.Factory.create();
  final int threads=Runtime.getRuntime().availableProcessors();
  container.setExecutor(new ThreadPoolExecutor(threads,threads,Long.MAX_VALUE,TimeUnit.NANOSECONDS,new LinkedBlockingQueue<Runnable>()));
  final ServerStartupListener serverStartupListener=new ServerStartupListener(createListenerCallback());
  final ServerStartBatchBuilder batchBuilder=new ServerStartBatchBuilder(container.batchBuilder(),serverStartupListener);
  batchBuilder.addListener(serverStartupListener);
  final ServiceActivatorContext serviceActivatorContext=new ServiceActivatorContext(){
    public BatchBuilder getBatchBuilder(){
      return batchBuilder;
    }
  }
;
  final BatchServiceBuilder<Void> builder=batchBuilder.addService(AS_SERVER_SERVICE_NAME,Service.NULL);
  builder.setInitialMode(ServiceController.Mode.ACTIVE);
  for (  ServiceActivator service : this.startServices) {
    service.activate(serviceActivatorContext);
  }
  for (  ServiceActivator service : startServices) {
    service.activate(serviceActivatorContext);
  }
  final ServerModel serverModel=new ServerModel(serverName,portOffset);
  final Properties systemProperties=System.getProperties();
  final ServerEnvironment environment=providedEnvironment != null ? providedEnvironment : new ServerEnvironment(systemProperties,serverName,false);
  log.info("Activating core services");
  ServerControllerImpl serverController=new ServerControllerImpl(serverModel,container,environment.isStandalone());
  batchBuilder.addService(ServerController.SERVICE_NAME,serverController).addDependency(ServerConfigurationPersister.SERVICE_NAME,ServerConfigurationPersister.class,serverController.getConfigurationPersisterValue()).addInjection(serverController.getExecutorValue(),Executors.newCachedThreadPool());
  ServerEnvironmentServices.addServices(environment,batchBuilder);
  ServerDeploymentRepositoryImpl.addService(batchBuilder);
  ShutdownHandlerImpl.addService(batchBuilder);
  ServerModelService.addService(serverModel,batchBuilder);
  ServerDeploymentManagerImpl.addService(serverModel,container,batchBuilder);
  ServerConfigurationPersisterImpl.addService(serverModel,batchBuilder);
  DeploymentScannerFactoryService.addService(batchBuilder);
  batchBuilder.addService(SocketBindingManager.SOCKET_BINDING_MANAGER,new SocketBindingManagerService(portOffset)).setInitialMode(ServiceController.Mode.ON_DEMAND);
  batchBuilder.addService(ClassifyingModuleLoaderService.SERVICE_NAME,new ClassifyingModuleLoaderService());
  final DeploymentModuleLoaderService deploymentModuleLoaderService=new DeploymentModuleLoaderService(new DeploymentModuleLoaderImpl());
  batchBuilder.addService(DeploymentModuleLoaderService.SERVICE_NAME,deploymentModuleLoaderService).addDependency(ClassifyingModuleLoaderService.SERVICE_NAME,ClassifyingModuleLoaderService.class,new ClassifyingModuleLoaderInjector("deployment",deploymentModuleLoaderService));
  new JarDeploymentActivator().activate(new ServiceActivatorContext(){
    public BatchBuilder getBatchBuilder(){
      return batchBuilder;
    }
  }
);
  for (  AbstractServerModelUpdate<?> update : updates) {
    try {
      serverModel.update(update);
    }
 catch (    UpdateFailedException e) {
      throw new IllegalStateException("Failed to start server",e);
    }
  }
  final UpdateContext context=new UpdateContext(){
    public BatchBuilder getBatchBuilder(){
      return batchBuilder;
    }
    public ServiceContainer getServiceContainer(){
      return container;
    }
  }
;
  for (  AbstractServerModelUpdate<?> update : updates) {
    if (!update.isDeploymentUpdate()) {
      update.applyUpdateBootAction(context);
    }
  }
  StandaloneServerManagementServices.addServices(serverModel,container,batchBuilder);
  try {
    serverStartupListener.startBatch(createDeploymentTask(container,serverStartupListener));
    batchBuilder.install();
    serverStartupListener.finishBatch();
  }
 catch (  ServiceRegistryException e) {
    throw new IllegalStateException("Failed to install boot services",e);
  }
}
