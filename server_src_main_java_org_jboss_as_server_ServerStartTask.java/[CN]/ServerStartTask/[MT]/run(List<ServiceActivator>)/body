{
  if (serverName != null) {
    MDC.put("process","server-" + serverName);
    log.infof("Starting server \"%s\"",serverName);
  }
 else {
    MDC.put("process","standalone-server");
    log.infof("Starting standalone server");
  }
  final Bootstrap bootstrap=Bootstrap.Factory.newInstance();
  bootstrap.start(new Bootstrap.Configuration(),updates,startServices);
  final ServiceContainer container=ServiceContainer.Factory.create();
  final int threads=Runtime.getRuntime().availableProcessors();
  container.setExecutor(new ThreadPoolExecutor(threads,threads,Long.MAX_VALUE,TimeUnit.NANOSECONDS,new LinkedBlockingQueue<Runnable>()));
  final BatchBuilder batchBuilder=container.batchBuilder();
  final ServiceActivatorContext serviceActivatorContext=new ServiceActivatorContext(){
    public ServiceTarget getServiceTarget(){
      return container;
    }
    public ServiceRegistry getServiceRegistry(){
      return container;
    }
  }
;
  batchBuilder.addService(AS_SERVER_SERVICE_NAME,Service.NULL).setInitialMode(ServiceController.Mode.ACTIVE).install();
  for (  ServiceActivator service : startServices) {
    service.activate(serviceActivatorContext);
  }
  for (  ServiceActivator service : runServices) {
    service.activate(serviceActivatorContext);
  }
  final ServerModel serverModel=new ServerModel(serverName,portOffset);
  final Properties systemProperties=System.getProperties();
  final ServerEnvironment environment=providedEnvironment != null ? providedEnvironment : new ServerEnvironment(systemProperties,serverName,false);
  log.info("Activating core services");
  ServerControllerImpl serverController=new ServerControllerImpl(serverModel,container,environment.isStandalone());
  batchBuilder.addService(ServerController.SERVICE_NAME,serverController).addDependency(ServerConfigurationPersister.SERVICE_NAME,ServerConfigurationPersister.class,serverController.getConfigurationPersisterValue()).addInjection(serverController.getExecutorValue(),Executors.newCachedThreadPool()).install();
  ServerEnvironmentServices.addServices(environment,batchBuilder);
  ServerDeploymentRepositoryImpl.addService(batchBuilder);
  ShutdownHandlerImpl.addService(batchBuilder);
  ServerModelService.addService(serverModel,batchBuilder);
  ServerDeploymentManagerImpl.addService(serverModel,container,batchBuilder);
  ServerConfigurationPersisterImpl.addService(serverModel,batchBuilder);
  DeploymentScannerFactoryService.addService(batchBuilder);
  batchBuilder.addService(SocketBindingManager.SOCKET_BINDING_MANAGER,new SocketBindingManagerService(portOffset)).setInitialMode(ServiceController.Mode.ON_DEMAND).install();
  batchBuilder.addService(ClassifyingModuleLoaderService.SERVICE_NAME,new ClassifyingModuleLoaderService()).install();
  final DeploymentChain deploymentChain=new DeploymentChainImpl();
  deploymentChain.addProcessor(new DeploymentModuleLoaderProcessor(new DeploymentModuleLoaderImpl()),Phase.DEPLOYMENT_MODULE_LOADER_PROCESSOR);
  batchBuilder.addService(DeploymentChain.SERVICE_NAME,new DeploymentChainService(deploymentChain)).setInitialMode(ServiceController.Mode.ACTIVE).install();
  new JarDeploymentActivator().activate(deploymentChain);
  for (  AbstractServerModelUpdate<?> update : updates) {
    try {
      serverModel.update(update);
    }
 catch (    UpdateFailedException e) {
      throw new IllegalStateException("Failed to start server",e);
    }
  }
  final BootUpdateContext context=new BootUpdateContext(){
    public BatchBuilder getBatchBuilder(){
      return batchBuilder;
    }
    public ServiceContainer getServiceContainer(){
      return container;
    }
    public void addDeploymentProcessor(    DeploymentUnitProcessor processor,    long priority){
      deploymentChain.addProcessor(processor,priority);
    }
  }
;
  for (  AbstractServerModelUpdate<?> update : updates) {
    if (!update.isDeploymentUpdate()) {
      update.applyUpdateBootAction(context);
    }
  }
  DeploymentUpdateService.addService(batchBuilder,updates,serverStartupListener);
  StandaloneServerManagementServices.addServices(serverModel,container,batchBuilder);
  try {
    batchBuilder.install();
  }
 catch (  ServiceRegistryException e) {
    throw new IllegalStateException("Failed to install boot services",e);
  }
}
