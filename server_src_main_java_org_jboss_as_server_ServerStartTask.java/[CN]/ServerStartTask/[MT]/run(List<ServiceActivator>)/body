{
  final Bootstrap bootstrap=Bootstrap.Factory.newInstance();
  final ProductConfig productConfig=new ProductConfig(Module.getBootModuleLoader(),home,properties);
  final ServerEnvironment providedEnvironment=new ServerEnvironment(hostControllerName,properties,SecurityActions.getSystemEnvironment(),null,null,ServerEnvironment.LaunchType.DOMAIN,RunningMode.NORMAL,productConfig);
  final List<ServiceActivator> services=new ArrayList<ServiceActivator>(startServices);
  final ServerBootOperationsService service=new ServerBootOperationsService();
  final Future<ModelNode> bootOperations=service.getFutureResult();
  final ServiceActivator activator=new ServiceActivator(){
    @Override public void activate(    ServiceActivatorContext serviceActivatorContext) throws ServiceRegistryException {
      final ServiceTarget target=serviceActivatorContext.getServiceTarget();
      target.addService(ServiceName.JBOSS.append("server-boot-operations"),service).addDependency(Services.JBOSS_AS).addDependency(Services.JBOSS_SERVER_CONTROLLER,ModelController.class,service.getServerController()).addDependency(HostControllerConnectionService.SERVICE_NAME,HostControllerClient.class,service.getClientInjector()).addDependency(Services.JBOSS_SERVER_EXECUTOR,Executor.class,service.getExecutorInjector()).setInitialMode(ServiceController.Mode.ACTIVE).install();
    }
  }
;
  services.add(activator);
  final Bootstrap.Configuration configuration=new Bootstrap.Configuration(providedEnvironment);
  final ExtensionRegistry extensionRegistry=configuration.getExtensionRegistry();
  final Bootstrap.ConfigurationPersisterFactory configurationPersisterFactory=new Bootstrap.ConfigurationPersisterFactory(){
    @Override public ExtensibleConfigurationPersister createConfigurationPersister(    ServerEnvironment serverEnvironment,    ExecutorService executorService){
      ExtensibleConfigurationPersister persister=new AbstractConfigurationPersister(new StandaloneXml(configuration.getModuleLoader(),executorService,extensionRegistry)){
        private final PersistenceResource pr=new PersistenceResource(){
          @Override public void commit(){
          }
          @Override public void rollback(){
          }
        }
;
        @Override public PersistenceResource store(        final ModelNode model,        Set<PathAddress> affectedAddresses) throws ConfigurationPersistenceException {
          return pr;
        }
        @Override public List<ModelNode> load() throws ConfigurationPersistenceException {
          try {
            final ModelNode operations=bootOperations.get();
            return operations.asList();
          }
 catch (          Exception e) {
            throw new ConfigurationPersistenceException(e);
          }
        }
      }
;
      extensionRegistry.setWriterRegistry(persister);
      return persister;
    }
  }
;
  configuration.setConfigurationPersisterFactory(configurationPersisterFactory);
  return bootstrap.bootstrap(configuration,services);
}
