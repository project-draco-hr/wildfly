{
  resourceRegistration.registerReadOnlyAttribute(INSTANCE_ID,new JobOperationStepHandler(){
    @Override protected void updateModel(    final OperationContext context,    final ModelNode model,    final JobOperator jobOperator,    final String jobName) throws OperationFailedException {
      final JobInstance jobInstance=jobOperator.getJobInstance(Long.parseLong(context.getCurrentAddressValue()));
      model.set(jobInstance.getInstanceId());
    }
  }
);
  resourceRegistration.registerReadOnlyAttribute(BATCH_STATUS,new JobExecutionOperationStepHandler(){
    @Override protected void updateModel(    final ModelNode model,    final JobExecution jobExecution) throws OperationFailedException {
      final BatchStatus status=jobExecution.getBatchStatus();
      if (status != null) {
        model.set(status.toString());
      }
    }
  }
);
  resourceRegistration.registerReadOnlyAttribute(EXIT_STATUS,new JobExecutionOperationStepHandler(){
    @Override protected void updateModel(    final ModelNode model,    final JobExecution jobExecution) throws OperationFailedException {
      final String exitStatus=jobExecution.getExitStatus();
      if (exitStatus != null) {
        model.set(exitStatus);
      }
    }
  }
);
  resourceRegistration.registerReadOnlyAttribute(CREATE_TIME,new DateTimeFormatterOperationStepHandler(){
    @Override protected Date getDateTime(    final JobExecution jobExecution){
      return jobExecution.getCreateTime();
    }
  }
);
  resourceRegistration.registerReadOnlyAttribute(START_TIME,new DateTimeFormatterOperationStepHandler(){
    @Override protected Date getDateTime(    final JobExecution jobExecution){
      return jobExecution.getStartTime();
    }
  }
);
  resourceRegistration.registerReadOnlyAttribute(LAST_UPDATED_TIME,new DateTimeFormatterOperationStepHandler(){
    @Override protected Date getDateTime(    final JobExecution jobExecution){
      return jobExecution.getLastUpdatedTime();
    }
  }
);
  resourceRegistration.registerReadOnlyAttribute(END_TIME,new DateTimeFormatterOperationStepHandler(){
    @Override protected Date getDateTime(    final JobExecution jobExecution){
      return jobExecution.getEndTime();
    }
  }
);
}
