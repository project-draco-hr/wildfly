{
  ModelNode result=new ModelNode();
  boolean customDefaultCheck=operation.get(OP).asString().equals(GlobalOperationHandlers.CHECK_DEFAULT_RESOURCE_ACCESS);
  ResourceAuthorization authResp=context.authorizeResource(true,customDefaultCheck);
  if (authResp == null || authResp.getResourceResult(ActionEffect.ADDRESS).getDecision() == Decision.DENY) {
    if (!defaultSetting || authResp == null) {
    }
 else {
      result.get(ActionEffect.ADDRESS.toString()).set(false);
    }
  }
 else {
    addResourceAuthorizationResults(result,authResp);
    ModelNode attributes=new ModelNode();
    attributes.setEmptyObject();
    if (result.get(READ).asBoolean()) {
      if (nodeDescription.hasDefined(ATTRIBUTES)) {
        for (        Property attrProp : nodeDescription.require(ATTRIBUTES).asPropertyList()) {
          ModelNode attributeResult=new ModelNode();
          Storage storage=Storage.valueOf(attrProp.getValue().get(STORAGE).asString().toUpperCase());
          addAttributeAuthorizationResults(attributeResult,attrProp.getName(),authResp,storage == Storage.RUNTIME);
          if (attributeResult.isDefined()) {
            attributes.get(attrProp.getName()).set(attributeResult);
          }
        }
      }
      result.get(ATTRIBUTES).set(attributes);
      if (operations != null) {
        ModelNode ops=new ModelNode();
        ops.setEmptyObject();
        for (        Map.Entry<String,ModelNode> entry : operations.entrySet()) {
          ModelNode operationToCheck=Util.createOperation(entry.getKey(),PathAddress.pathAddress(operation.require(OP_ADDR)));
          ModelNode operationResult=new ModelNode();
          addOperationAuthorizationResult(context,operationResult,operationToCheck,entry.getKey());
          ops.get(entry.getKey()).set(operationResult);
        }
        result.get(ModelDescriptionConstants.OPERATIONS).set(ops);
      }
    }
  }
  accessControlResult.set(result);
  context.stepCompleted();
}
