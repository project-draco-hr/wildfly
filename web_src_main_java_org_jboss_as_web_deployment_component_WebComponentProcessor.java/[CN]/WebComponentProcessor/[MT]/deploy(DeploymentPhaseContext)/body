{
  final DeploymentUnit deploymentUnit=phaseContext.getDeploymentUnit();
  if (!DeploymentTypeMarker.isType(DeploymentType.WAR,deploymentUnit)) {
    return;
  }
  final Map<String,ComponentDescription> componentByClass=new HashMap<String,ComponentDescription>();
  final Map<String,ComponentInstantiator> webComponents=new HashMap<String,ComponentInstantiator>();
  final EEModuleDescription moduleDescription=deploymentUnit.getAttachment(Attachments.EE_MODULE_DESCRIPTION);
  final EEApplicationClasses applicationClassesDescription=deploymentUnit.getAttachment(Attachments.EE_APPLICATION_CLASSES_DESCRIPTION);
  final CompositeIndex compositeIndex=deploymentUnit.getAttachment(org.jboss.as.server.deployment.Attachments.COMPOSITE_ANNOTATION_INDEX);
  final String applicationName=deploymentUnit.getParent() == null ? deploymentUnit.getName() : deploymentUnit.getParent().getName();
  if (moduleDescription == null) {
    return;
  }
  for (  ComponentDescription component : moduleDescription.getComponentDescriptions()) {
    componentByClass.put(component.getComponentClassName(),component);
  }
  final WarMetaData warMetaData=deploymentUnit.getAttachment(WarMetaData.ATTACHMENT_KEY);
  final TldsMetaData tldsMetaData=deploymentUnit.getAttachment(TldsMetaData.ATTACHMENT_KEY);
  final Set<String> classes=getAllComponentClasses(warMetaData,tldsMetaData);
  for (  String clazz : classes) {
    ComponentDescription description=componentByClass.get(clazz);
    if (description != null) {
      if (!(description.getViews().size() == 1)) {
        throw new RuntimeException(clazz + " has the wrong component type, is cannot be used as a web component");
      }
      ManagedBeanComponentInstantiator instantiator=new ManagedBeanComponentInstantiator(deploymentUnit,description);
      webComponents.put(clazz,instantiator);
    }
 else {
      if (compositeIndex.getClassByName(DotName.createSimple(clazz)) == null) {
        boolean found=false;
        for (        String pack : BUILTIN_TAGLIBS) {
          if (clazz.startsWith(pack)) {
            found=true;
            break;
          }
        }
        if (found) {
          continue;
        }
      }
      description=new WebComponentDescription(clazz,clazz,moduleDescription,deploymentUnit.getServiceName(),applicationClassesDescription);
      moduleDescription.addComponent(description);
      webComponents.put(clazz,new WebComponentInstantiator(deploymentUnit,description));
    }
  }
  deploymentUnit.putAttachment(WebAttachments.WEB_COMPONENT_INSTANTIATORS,webComponents);
}
