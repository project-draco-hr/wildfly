{
  try {
    final AtomicReference<ModelController.OperationTransaction> txRef=new AtomicReference<ModelController.OperationTransaction>();
    final ProxyController.ProxyOperationControl proxyControl=new ProxyController.ProxyOperationControl(){
      @Override public void operationPrepared(      ModelController.OperationTransaction transaction,      ModelNode result){
        txRef.set(transaction);
      }
      @Override public void operationFailed(      ModelNode response){
        DomainControllerLogger.ROOT_LOGGER.debugf("server restart required operation failed: %s",response);
      }
      @Override public void operationCompleted(      ModelNode response){
      }
    }
;
    final ModelNode operation=createOperation(identity);
    controller.execute(operation,OperationMessageHandler.DISCARD,proxyControl,OperationAttachments.EMPTY);
    final ModelController.OperationTransaction tx=txRef.get();
    if (tx != null) {
      tx.commit();
    }
 else {
      DomainControllerLogger.ROOT_LOGGER.failedToSetServerInRestartRequireState(identity.getServerName());
    }
  }
 catch (  Exception e) {
    DomainControllerLogger.ROOT_LOGGER.debugf(e,"failed to send the server restart required operation");
  }
  return originalResult;
}
