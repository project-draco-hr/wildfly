{
  if (listCacheMax == 0 || results.size() < 2) {
    return;
  }
  Map listMap=getListMap();
  if (listMap == null) {
    return;
  }
  if (log.isTraceEnabled()) {
    log.trace("Add finder results:" + " entity=" + manager.getEntityBridge().getEntityName() + " results="+ results+ " readahead="+ readahead);
  }
  if (!readahead.isNone()) {
    listCache.add(results);
  }
  HashSet dereferencedResults=new HashSet();
  Iterator iter=results.iterator();
  for (int i=0; iter.hasNext(); i++) {
    Object pk=iter.next();
    EntityMapEntry entry;
    if (readahead.isNone()) {
      entry=new EntityMapEntry(0,Collections.singletonList(pk),readahead);
    }
 else {
      entry=new EntityMapEntry(i,results,readahead);
    }
    EntityMapEntry oldInfo=(EntityMapEntry)listMap.put(pk,entry);
    if (oldInfo != null) {
      dereferencedResults.add(oldInfo.results);
    }
  }
  if (dereferencedResults.isEmpty()) {
    return;
  }
  iter=dereferencedResults.iterator();
  while (iter.hasNext()) {
    List dereferencedList=(List)iter.next();
    boolean listHasReference=false;
    Iterator iter2=dereferencedList.iterator();
    while (!listHasReference && iter2.hasNext()) {
      EntityMapEntry entry=(EntityMapEntry)listMap.get(iter2.next());
      if (entry != null && entry.results == dereferencedList) {
        listHasReference=true;
      }
    }
    if (listHasReference) {
      iter.remove();
    }
  }
  if (dereferencedResults.isEmpty()) {
    return;
  }
  iter=dereferencedResults.iterator();
  while (iter.hasNext()) {
    List list=(List)iter.next();
    if (log.isTraceEnabled()) {
      log.trace("Removing dereferenced results: " + list);
    }
    listCache.remove(list);
  }
}
