{
  Map<String,String> configProperties=new HashMap<String,String>(0);
  String className=ModelNodeUtil.getResolvedStringIfSetOrGetDefault(context,connDefModel,CLASS_NAME);
  String jndiName=ModelNodeUtil.getResolvedStringIfSetOrGetDefault(context,connDefModel,JNDINAME);
  boolean enabled=ModelNodeUtil.getBooleanIfSetOrGetDefault(context,connDefModel,ENABLED);
  boolean connectable=ModelNodeUtil.getBooleanIfSetOrGetDefault(context,connDefModel,CONNECTABLE);
  Boolean tracking=ModelNodeUtil.getBooleanIfSetOrGetDefault(context,connDefModel,TRACKING);
  boolean useJavaContext=ModelNodeUtil.getBooleanIfSetOrGetDefault(context,connDefModel,USE_JAVA_CONTEXT);
  boolean useCcm=ModelNodeUtil.getBooleanIfSetOrGetDefault(context,connDefModel,USE_CCM);
  boolean sharable=ModelNodeUtil.getBooleanIfSetOrGetDefault(context,connDefModel,SHARABLE);
  boolean enlistment=ModelNodeUtil.getBooleanIfSetOrGetDefault(context,connDefModel,ENLISTMENT);
  int maxPoolSize=ModelNodeUtil.getIntIfSetOrGetDefault(context,connDefModel,MAX_POOL_SIZE);
  int minPoolSize=ModelNodeUtil.getIntIfSetOrGetDefault(context,connDefModel,MIN_POOL_SIZE);
  Integer initialPoolSize=ModelNodeUtil.getIntIfSetOrGetDefault(context,connDefModel,INITIAL_POOL_SIZE);
  boolean prefill=ModelNodeUtil.getBooleanIfSetOrGetDefault(context,connDefModel,POOL_PREFILL);
  boolean useStrictMin=ModelNodeUtil.getBooleanIfSetOrGetDefault(context,connDefModel,POOL_USE_STRICT_MIN);
  String flushStrategyString=POOL_FLUSH_STRATEGY.resolveModelAttribute(context,connDefModel).asString();
  final FlushStrategy flushStrategy=FlushStrategy.forName(flushStrategyString);
  Boolean isSameRM=ModelNodeUtil.getBooleanIfSetOrGetDefault(context,connDefModel,SAME_RM_OVERRIDE);
  boolean interlivng=ModelNodeUtil.getBooleanIfSetOrGetDefault(context,connDefModel,INTERLEAVING);
  boolean padXid=ModelNodeUtil.getBooleanIfSetOrGetDefault(context,connDefModel,PAD_XID);
  boolean wrapXaResource=ModelNodeUtil.getBooleanIfSetOrGetDefault(context,connDefModel,WRAP_XA_RESOURCE);
  boolean noTxSeparatePool=ModelNodeUtil.getBooleanIfSetOrGetDefault(context,connDefModel,NOTXSEPARATEPOOL);
  Integer allocationRetry=ModelNodeUtil.getIntIfSetOrGetDefault(context,connDefModel,ALLOCATION_RETRY);
  Long allocationRetryWaitMillis=ModelNodeUtil.getLongIfSetOrGetDefault(context,connDefModel,ALLOCATION_RETRY_WAIT_MILLIS);
  Long blockingTimeoutMillis=ModelNodeUtil.getLongIfSetOrGetDefault(context,connDefModel,BLOCKING_TIMEOUT_WAIT_MILLIS);
  Long idleTimeoutMinutes=ModelNodeUtil.getLongIfSetOrGetDefault(context,connDefModel,IDLETIMEOUTMINUTES);
  Integer xaResourceTimeout=ModelNodeUtil.getIntIfSetOrGetDefault(context,connDefModel,XA_RESOURCE_TIMEOUT);
  CommonTimeOut timeOut=new CommonTimeOutImpl(blockingTimeoutMillis,idleTimeoutMinutes,allocationRetry,allocationRetryWaitMillis,xaResourceTimeout);
  Extension incrementer=ModelNodeUtil.extractExtension(context,connDefModel,CAPACITY_INCREMENTER_CLASS,CAPACITY_INCREMENTER_PROPERTIES);
  Extension decrementer=ModelNodeUtil.extractExtension(context,connDefModel,CAPACITY_DECREMENTER_CLASS,CAPACITY_DECREMENTER_PROPERTIES);
  final Capacity capacity=new Capacity(incrementer,decrementer);
  CommonPool pool;
  if (isXa) {
    pool=new ConnDefXaPoolImpl(minPoolSize,initialPoolSize,maxPoolSize,prefill,useStrictMin,flushStrategy,capacity,isSameRM,interlivng,padXid,wrapXaResource,noTxSeparatePool);
  }
 else {
    pool=new ConnDefPoolImpl(minPoolSize,initialPoolSize,maxPoolSize,prefill,useStrictMin,flushStrategy,capacity);
  }
  String securityDomain=ModelNodeUtil.getResolvedStringIfSetOrGetDefault(context,connDefModel,SECURITY_DOMAIN);
  String securityDomainAndApplication=ModelNodeUtil.getResolvedStringIfSetOrGetDefault(context,connDefModel,SECURITY_DOMAIN_AND_APPLICATION);
  boolean application=ModelNodeUtil.getBooleanIfSetOrGetDefault(context,connDefModel,APPLICATION);
  CommonSecurity security=null;
  if (securityDomain != null || securityDomainAndApplication != null || application) {
    security=new CommonSecurityImpl(securityDomain,securityDomainAndApplication,application);
  }
  Long backgroundValidationMillis=ModelNodeUtil.getLongIfSetOrGetDefault(context,connDefModel,BACKGROUNDVALIDATIONMILLIS);
  boolean backgroundValidation=ModelNodeUtil.getBooleanIfSetOrGetDefault(context,connDefModel,BACKGROUNDVALIDATION);
  boolean useFastFail=ModelNodeUtil.getBooleanIfSetOrGetDefault(context,connDefModel,USE_FAST_FAIL);
  CommonValidation validation=new CommonValidationImpl(backgroundValidation,backgroundValidationMillis,useFastFail);
  final String recoveryUsername=ModelNodeUtil.getResolvedStringIfSetOrGetDefault(context,connDefModel,RECOVERY_USERNAME);
  final String recoveryPassword=ModelNodeUtil.getResolvedStringIfSetOrGetDefault(context,connDefModel,RECOVERY_PASSWORD);
  final String recoverySecurityDomain=ModelNodeUtil.getResolvedStringIfSetOrGetDefault(context,connDefModel,RECOVERY_SECURITY_DOMAIN);
  Boolean noRecovery=ModelNodeUtil.getBooleanIfSetOrGetDefault(context,connDefModel,NO_RECOVERY);
  Recovery recovery=null;
  if ((recoveryUsername != null && recoveryPassword != null) || recoverySecurityDomain != null || noRecovery != null) {
    Credential credential=null;
    if ((recoveryUsername != null && recoveryPassword != null) || recoverySecurityDomain != null)     credential=new CredentialImpl(recoveryUsername,recoveryPassword,recoverySecurityDomain);
    Extension recoverPlugin=ModelNodeUtil.extractExtension(context,connDefModel,RECOVERLUGIN_CLASSNAME,RECOVERLUGIN_PROPERTIES);
    if (noRecovery == null)     noRecovery=Boolean.FALSE;
    recovery=new Recovery(credential,recoverPlugin,noRecovery);
  }
  ModifiableConnDef connectionDefinition=new ModifiableConnDef(configProperties,className,jndiName,poolName,enabled,useJavaContext,useCcm,pool,timeOut,validation,security,recovery,sharable,enlistment,connectable,tracking);
  return connectionDefinition;
}
