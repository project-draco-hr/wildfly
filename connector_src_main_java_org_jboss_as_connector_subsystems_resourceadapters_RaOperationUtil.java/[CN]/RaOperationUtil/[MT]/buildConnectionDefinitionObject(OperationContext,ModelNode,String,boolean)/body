{
  Map<String,String> configProperties=new HashMap<String,String>(0);
  String className=CLASS_NAME.resolveModelAttribute(context,recoveryEnvModel).asString();
  String jndiName=JNDINAME.resolveModelAttribute(context,recoveryEnvModel).asString();
  boolean enabled=ENABLED.resolveModelAttribute(context,recoveryEnvModel).asBoolean();
  boolean useJavaContext=USE_JAVA_CONTEXT.resolveModelAttribute(context,recoveryEnvModel).asBoolean();
  boolean useCcm=USE_CCM.resolveModelAttribute(context,recoveryEnvModel).asBoolean();
  int maxPoolSize=MAX_POOL_SIZE.resolveModelAttribute(context,recoveryEnvModel).asInt();
  int minPoolSize=MIN_POOL_SIZE.resolveModelAttribute(context,recoveryEnvModel).asInt();
  boolean prefill=POOL_PREFILL.resolveModelAttribute(context,recoveryEnvModel).asBoolean();
  boolean useStrictMin=POOL_USE_STRICT_MIN.resolveModelAttribute(context,recoveryEnvModel).asBoolean();
  String flushStrategyString=POOL_FLUSH_STRATEGY.resolveModelAttribute(context,recoveryEnvModel).asString();
  final FlushStrategy flushStrategy=FlushStrategy.forName(flushStrategyString);
  boolean isSameRM=SAME_RM_OVERRIDE.resolveModelAttribute(context,recoveryEnvModel).asBoolean();
  boolean interlivng=INTERLEAVING.resolveModelAttribute(context,recoveryEnvModel).asBoolean();
  boolean padXid=PAD_XID.resolveModelAttribute(context,recoveryEnvModel).asBoolean();
  boolean wrapXaResource=WRAP_XA_RESOURCE.resolveModelAttribute(context,recoveryEnvModel).asBoolean();
  boolean noTxSeparatePool=NOTXSEPARATEPOOL.resolveModelAttribute(context,recoveryEnvModel).asBoolean();
  ModelNode allocationRetryModel=ALLOCATION_RETRY.resolveModelAttribute(context,recoveryEnvModel);
  ModelNode allocationRetryWaitMillisModel=ALLOCATION_RETRY_WAIT_MILLIS.resolveModelAttribute(context,recoveryEnvModel);
  ModelNode blockingTimeoutMillisModel=BLOCKING_TIMEOUT_WAIT_MILLIS.resolveModelAttribute(context,recoveryEnvModel);
  ModelNode idleTimeoutMinutesModel=IDLETIMEOUTMINUTES.resolveModelAttribute(context,recoveryEnvModel);
  ModelNode xaResourceTimeoutModel=XA_RESOURCE_TIMEOUT.resolveModelAttribute(context,recoveryEnvModel);
  Integer allocationRetry=allocationRetryModel.isDefined() ? allocationRetryModel.asInt() : null;
  Long allocationRetryWaitMillis=allocationRetryWaitMillisModel.isDefined() ? allocationRetryWaitMillisModel.asLong() : null;
  Long blockingTimeoutMillis=blockingTimeoutMillisModel.isDefined() ? blockingTimeoutMillisModel.asLong() : null;
  Long idleTimeoutMinutes=idleTimeoutMinutesModel.isDefined() ? idleTimeoutMinutesModel.asLong() : null;
  Integer xaResourceTimeout=xaResourceTimeoutModel.isDefined() ? xaResourceTimeoutModel.asInt() : null;
  CommonTimeOut timeOut=new CommonTimeOutImpl(blockingTimeoutMillis,idleTimeoutMinutes,allocationRetry,allocationRetryWaitMillis,xaResourceTimeout);
  CommonPool pool;
  if (isXa) {
    pool=new CommonXaPoolImpl(minPoolSize,maxPoolSize,prefill,useStrictMin,flushStrategy,isSameRM,interlivng,padXid,wrapXaResource,noTxSeparatePool);
  }
 else {
    pool=new CommonPoolImpl(minPoolSize,maxPoolSize,prefill,useStrictMin,flushStrategy);
  }
  ModelNode securityDomainModel=SECURITY_DOMAIN.resolveModelAttribute(context,recoveryEnvModel);
  String securityDomain=securityDomainModel.isDefined() ? securityDomainModel.asString() : null;
  ModelNode securityDomainAndApplicationModel=SECURITY_DOMAIN_AND_APPLICATION.resolveModelAttribute(context,recoveryEnvModel);
  String securityDomainAndApplication=securityDomainAndApplicationModel.isDefined() ? securityDomainAndApplicationModel.asString() : null;
  boolean application=APPLICATION.resolveModelAttribute(context,recoveryEnvModel).asBoolean();
  CommonSecurity security=null;
  if (securityDomain != null || securityDomainAndApplication != null) {
    security=new CommonSecurityImpl(securityDomain,securityDomainAndApplication,application);
  }
  ModelNode backgroundValidationMillisModel=BACKGROUNDVALIDATIONMILLIS.resolveModelAttribute(context,recoveryEnvModel);
  Long backgroundValidationMillis=backgroundValidationMillisModel.isDefined() ? backgroundValidationMillisModel.asLong() : null;
  boolean backgroundValidation=BACKGROUNDVALIDATION.resolveModelAttribute(context,recoveryEnvModel).asBoolean();
  boolean useFastFail=USE_FAST_FAIL.resolveModelAttribute(context,recoveryEnvModel).asBoolean();
  CommonValidation validation=new CommonValidationImpl(backgroundValidation,backgroundValidationMillis,useFastFail);
  final String recoveryUsername=recoveryEnvModel.hasDefined(RECOVERY_USERNAME.getName()) ? RECOVERY_USERNAME.resolveModelAttribute(context,recoveryEnvModel).asString() : null;
  final String recoveryPassword=recoveryEnvModel.hasDefined(RECOVERY_PASSWORD.getName()) ? RECOVERY_PASSWORD.resolveModelAttribute(context,recoveryEnvModel).asString() : null;
  final ModelNode recoverySecurityDomainModel=RECOVERY_SECURITY_DOMAIN.resolveModelAttribute(context,recoveryEnvModel);
  final String recoverySecurityDomain=recoverySecurityDomainModel.isDefined() ? recoverySecurityDomainModel.asString() : null;
  boolean noRecovery=NO_RECOVERY.resolveModelAttribute(context,recoveryEnvModel).asBoolean();
  Recovery recovery=null;
  if ((recoveryUsername != null && recoveryPassword != null) || recoverySecurityDomain != null) {
    Credential credential=null;
    credential=new CredentialImpl(recoveryUsername,recoveryPassword,recoverySecurityDomain);
    Extension recoverPlugin=extractExtension(context,recoveryEnvModel,RECOVERLUGIN_CLASSNAME,RECOVERLUGIN_PROPERTIES);
    recovery=new Recovery(credential,recoverPlugin,noRecovery);
  }
  ModifiableConnDef connectionDefinition=new ModifiableConnDef(configProperties,className,jndiName,poolName,enabled,useJavaContext,useCcm,pool,timeOut,validation,security,recovery);
  return connectionDefinition;
}
