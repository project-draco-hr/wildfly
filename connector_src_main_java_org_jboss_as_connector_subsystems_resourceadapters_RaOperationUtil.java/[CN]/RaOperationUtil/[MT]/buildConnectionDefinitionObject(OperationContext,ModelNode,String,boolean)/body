{
  Map<String,String> configProperties=new HashMap<String,String>(0);
  String className=CLASS_NAME.resolveModelAttribute(context,operation).asString();
  String jndiName=JNDINAME.resolveModelAttribute(context,operation).asString();
  boolean enabled=ENABLED.resolveModelAttribute(context,operation).asBoolean();
  boolean useJavaContext=USE_JAVA_CONTEXT.resolveModelAttribute(context,operation).asBoolean();
  boolean useCcm=USE_CCM.resolveModelAttribute(context,operation).asBoolean();
  int maxPoolSize=MAX_POOL_SIZE.resolveModelAttribute(context,operation).asInt();
  int minPoolSize=MIN_POOL_SIZE.resolveModelAttribute(context,operation).asInt();
  boolean prefill=POOL_PREFILL.resolveModelAttribute(context,operation).asBoolean();
  boolean useStrictMin=POOL_USE_STRICT_MIN.resolveModelAttribute(context,operation).asBoolean();
  String flushStrategyString=POOL_FLUSH_STRATEGY.resolveModelAttribute(context,operation).asString();
  final FlushStrategy flushStrategy=FlushStrategy.forName(flushStrategyString);
  boolean isSameRM=SAME_RM_OVERRIDE.resolveModelAttribute(context,operation).asBoolean();
  boolean interlivng=INTERLEAVING.resolveModelAttribute(context,operation).asBoolean();
  boolean padXid=PAD_XID.resolveModelAttribute(context,operation).asBoolean();
  boolean wrapXaResource=WRAP_XA_RESOURCE.resolveModelAttribute(context,operation).asBoolean();
  boolean noTxSeparatePool=NOTXSEPARATEPOOL.resolveModelAttribute(context,operation).asBoolean();
  int allocationRetry=ALLOCATION_RETRY.resolveModelAttribute(context,operation).asInt();
  long allocationRetryWaitMillis=ALLOCATION_RETRY_WAIT_MILLIS.resolveModelAttribute(context,operation).asLong();
  long blockingTimeoutMillis=BLOCKING_TIMEOUT_WAIT_MILLIS.resolveModelAttribute(context,operation).asLong();
  long idleTimeoutMinutes=IDLETIMEOUTMINUTES.resolveModelAttribute(context,operation).asLong();
  int xaResourceTimeout=XA_RESOURCE_TIMEOUT.resolveModelAttribute(context,operation).asInt();
  CommonTimeOut timeOut=new CommonTimeOutImpl(blockingTimeoutMillis,idleTimeoutMinutes,allocationRetry,allocationRetryWaitMillis,xaResourceTimeout);
  CommonPool pool=null;
  if (isXa) {
    pool=new CommonXaPoolImpl(minPoolSize,maxPoolSize,prefill,useStrictMin,flushStrategy,isSameRM,interlivng,padXid,wrapXaResource,noTxSeparatePool);
  }
 else {
    pool=new CommonPoolImpl(minPoolSize,maxPoolSize,prefill,useStrictMin,flushStrategy);
  }
  String securityDomain=SECURITY_DOMAIN.resolveModelAttribute(context,operation).asString();
  String securityDomainAndApplication=SECURITY_DOMAIN_AND_APPLICATION.resolveModelAttribute(context,operation).asString();
  boolean application=APPLICATION.resolveModelAttribute(context,operation).asBoolean();
  CommonSecurity security=null;
  if (securityDomain != null || securityDomainAndApplication != null) {
    security=new CommonSecurityImpl(securityDomain,securityDomainAndApplication,application);
  }
  long backgroundValidationMillis=BACKGROUNDVALIDATIONMILLIS.resolveModelAttribute(context,operation).asLong();
  boolean backgroundValidation=BACKGROUNDVALIDATION.resolveModelAttribute(context,operation).asBoolean();
  boolean useFastFail=USE_FAST_FAIL.resolveModelAttribute(context,operation).asBoolean();
  CommonValidation validation=new CommonValidationImpl(backgroundValidation,backgroundValidationMillis,useFastFail);
  final String recoveryUsername=RECOVERY_USERNAME.resolveModelAttribute(context,operation).asString();
  String recoveryPassword=RECOVERY_PASSWORD.resolveModelAttribute(context,operation).asString();
  final String recoverySecurityDomain=RECOVERY_SECURITY_DOMAIN.resolveModelAttribute(context,operation).asString();
  boolean noRecovery=NO_RECOVERY.resolveModelAttribute(context,operation).asBoolean();
  Recovery recovery=null;
  if ((recoveryUsername != null && recoveryPassword != null) || recoverySecurityDomain != null) {
    Credential credential=null;
    credential=new CredentialImpl(recoveryUsername,recoveryPassword,recoverySecurityDomain);
    Extension recoverPlugin=extractExtension(context,operation,RECOVERLUGIN_CLASSNAME,RECOVERLUGIN_PROPERTIES);
    recovery=new Recovery(credential,recoverPlugin,noRecovery);
  }
  ModifiableConnDef connectionDefinition=new ModifiableConnDef(configProperties,className,jndiName,poolName,enabled,useJavaContext,useCcm,pool,timeOut,validation,security,recovery);
  return connectionDefinition;
}
