{
  Map<String,String> configProperties=new HashMap<String,String>(0);
  String className=getResolvedStringIfSetOrGetDefault(context,operation,CLASS_NAME.getName(),null);
  String jndiName=getResolvedStringIfSetOrGetDefault(context,operation,JNDINAME.getName(),null);
  boolean enabled=getBooleanIfSetOrGetDefault(context,operation,ENABLED,Defaults.ENABLED);
  boolean useJavaContext=getBooleanIfSetOrGetDefault(context,operation,USE_JAVA_CONTEXT,Defaults.USE_JAVA_CONTEXT);
  boolean useCcm=getBooleanIfSetOrGetDefault(context,operation,USE_CCM,Defaults.USE_CCM);
  Integer maxPoolSize=getIntIfSetOrGetDefault(context,operation,MAX_POOL_SIZE,Defaults.MAX_POOL_SIZE);
  Integer minPoolSize=getIntIfSetOrGetDefault(context,operation,MIN_POOL_SIZE,Defaults.MIN_POOL_SIZE);
  boolean prefill=getBooleanIfSetOrGetDefault(context,operation,POOL_PREFILL,Defaults.PREFILL);
  boolean useStrictMin=getBooleanIfSetOrGetDefault(context,operation,POOL_USE_STRICT_MIN,Defaults.USE_STRICT_MIN);
  final FlushStrategy flushStrategy=operation.hasDefined(POOL_FLUSH_STRATEGY.getName()) ? FlushStrategy.forName(operation.get(POOL_FLUSH_STRATEGY.getName()).asString()) : Defaults.FLUSH_STRATEGY;
  Integer allocationRetry=getIntIfSetOrGetDefault(context,operation,ALLOCATION_RETRY,null);
  Long allocationRetryWaitMillis=getLongIfSetOrGetDefault(context,operation,ALLOCATION_RETRY_WAIT_MILLIS,null);
  Long blockingTimeoutMillis=getLongIfSetOrGetDefault(context,operation,BLOCKING_TIMEOUT_WAIT_MILLIS,null);
  Long idleTimeoutMinutes=getLongIfSetOrGetDefault(context,operation,IDLETIMEOUTMINUTES,null);
  Integer xaResourceTimeout=getIntIfSetOrGetDefault(context,operation,XA_RESOURCE_TIMEOUT,null);
  CommonTimeOut timeOut=new CommonTimeOutImpl(blockingTimeoutMillis,idleTimeoutMinutes,allocationRetry,allocationRetryWaitMillis,xaResourceTimeout);
  CommonPool pool=new CommonPoolImpl(minPoolSize,maxPoolSize,prefill,useStrictMin,flushStrategy);
  String securityDomain=getResolvedStringIfSetOrGetDefault(context,operation,SECURITY_DOMAIN.getName(),null);
  String securityDomainAndApplication=getResolvedStringIfSetOrGetDefault(context,operation,SECURITY_DOMAIN_AND_APPLICATION.getName(),null);
  Boolean application=getBooleanIfSetOrGetDefault(context,operation,APPLICATION,null);
  CommonSecurity security=null;
  if (securityDomain != null && securityDomainAndApplication != null && application != null) {
    if (application == null)     application=Defaults.APPLICATION_MANAGED_SECURITY;
    security=new CommonSecurityImpl(securityDomain,securityDomainAndApplication,application);
  }
  Long backgroundValidationMillis=getLongIfSetOrGetDefault(context,operation,BACKGROUNDVALIDATIONMILLIS,null);
  boolean backgroundValidation=getBooleanIfSetOrGetDefault(context,operation,BACKGROUNDVALIDATION,Defaults.BACKGROUND_VALIDATION);
  boolean useFastFail=getBooleanIfSetOrGetDefault(context,operation,USE_FAST_FAIL,Defaults.USE_FAST_FAIl);
  CommonValidation validation=new CommonValidationImpl(backgroundValidation,backgroundValidationMillis,useFastFail);
  final String recoveryUsername=getResolvedStringIfSetOrGetDefault(context,operation,RECOVERY_USERNAME.getName(),null);
  String recoveryPassword=getResolvedStringIfSetOrGetDefault(context,operation,RECOVERY_PASSWORD.getName(),null);
  final String recoverySecurityDomain=getResolvedStringIfSetOrGetDefault(context,operation,RECOVERY_SECURITY_DOMAIN.getName(),null);
  Boolean noRecovery=getBooleanIfSetOrGetDefault(context,operation,NO_RECOVERY,null);
  Recovery recovery=null;
  if ((recoveryUsername != null && recoveryPassword != null) || recoverySecurityDomain != null || noRecovery != null) {
    Credential credential=null;
    if ((recoveryUsername != null && recoveryPassword != null) || recoverySecurityDomain != null)     credential=new CredentialImpl(recoveryUsername,recoveryPassword,recoverySecurityDomain);
    Extension recoverPlugin=extractExtension(context,operation,RECOVERLUGIN_CLASSNAME.getName(),RECOVERLUGIN_PROPERTIES.getName());
    if (noRecovery == null)     noRecovery=Boolean.FALSE;
    recovery=new Recovery(credential,recoverPlugin,noRecovery);
  }
  ModifiableConnDef connectionDefinition=new ModifiableConnDef(configProperties,className,jndiName,poolName,enabled,useJavaContext,useCcm,pool,timeOut,validation,security,recovery);
  return connectionDefinition;
}
