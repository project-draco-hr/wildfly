{
  final ModelNode model=Resource.Tools.readModel(context.readResource(PathAddress.EMPTY_ADDRESS));
  context.removeResource(PathAddress.EMPTY_ADDRESS);
  final String roleName=PathAddress.pathAddress(operation.require(ModelDescriptionConstants.OP_ADDR)).getLastElement().getValue();
  RoleMappingNotRequiredHandler.addOperation(context,roleName);
  context.addStep(new OperationStepHandler(){
    @Override public void execute(    OperationContext context,    ModelNode operation) throws OperationFailedException {
      final String baseRole=ServerGroupScopedRoleResourceDefinition.BASE_ROLE.resolveModelAttribute(context,model).asString();
      final List<ModelNode> serverGroupNodes=ServerGroupScopedRoleResourceDefinition.SERVER_GROUPS.resolveModelAttribute(context,model).asList();
      authorizerConfiguration.removeScopedRole(roleName);
      constraintMap.remove(roleName);
      context.completeStep(new OperationContext.RollbackHandler(){
        @Override public void handleRollback(        OperationContext context,        ModelNode operation){
          ServerGroupScopedRoleAdd.addScopedRole(roleName,baseRole,serverGroupNodes,authorizerConfiguration,constraintMap);
        }
      }
);
    }
  }
,OperationContext.Stage.RUNTIME);
  context.stepCompleted();
}
