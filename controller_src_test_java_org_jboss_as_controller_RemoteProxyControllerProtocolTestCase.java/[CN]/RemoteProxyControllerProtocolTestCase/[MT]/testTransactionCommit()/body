{
  final OperationTransaction tx=new OperationTransaction(){
    @Override public void rollback(){
    }
    @Override public void commit(){
    }
  }
;
  MockModelController controller=new MockModelController(){
    @Override public ModelNode execute(    ModelNode operation,    OperationMessageHandler handler,    OperationTransactionControl control,    OperationAttachments attachments){
      ModelNode node=new ModelNode();
      node=new ModelNode();
      node.get(OUTCOME).set(SUCCESS);
      node.get(RESULT).set("prepared");
      control.operationPrepared(tx,node);
      node.get(RESULT).set("final");
      return node;
    }
  }
;
  final RemoteProxyController proxyController=setupProxyHandlers(controller);
  ModelNode operation=new ModelNode();
  operation.get("test").set("123");
  final AtomicBoolean failed=new AtomicBoolean();
  final TestFuture<ModelNode> prepared=new TestFuture<ModelNode>();
  final TestFuture<OperationTransaction> preparedTx=new TestFuture<OperationTransaction>();
  final TestFuture<ModelNode> result=new TestFuture<ModelNode>();
  proxyController.execute(operation,null,new ProxyOperationControl(){
    @Override public void operationPrepared(    OperationTransaction transaction,    ModelNode result){
      prepared.done(result);
      preparedTx.done(transaction);
    }
    @Override public void operationFailed(    ModelNode response){
      failed.set(true);
    }
    @Override public void operationCompleted(    ModelNode response){
      result.done(response);
    }
  }
,null);
  ModelNode preparedResult=prepared.get();
  assertEquals(SUCCESS,preparedResult.get(OUTCOME).asString());
  assertEquals("prepared",preparedResult.get(RESULT).asString());
  assertFalse(failed.get());
  assertFalse(result.isDone());
  preparedTx.get().commit();
  ModelNode finalResult=result.get();
  assertEquals(SUCCESS,finalResult.get(OUTCOME).asString());
  assertEquals("final",finalResult.get(RESULT).asString());
}
