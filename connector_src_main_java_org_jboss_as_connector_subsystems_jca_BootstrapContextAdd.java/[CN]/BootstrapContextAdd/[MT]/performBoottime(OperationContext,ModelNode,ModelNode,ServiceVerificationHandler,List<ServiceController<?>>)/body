{
  String name=BootstrapCtxParameters.NAME.getAttribute().validateResolvedOperation(model).asString();
  String workmanager=BootstrapCtxParameters.WORKMANAGER.getAttribute().validateResolvedOperation(model).asString();
  boolean usingDefaultWm=false;
  if (DEFAULT_NAME.equals(workmanager)) {
    usingDefaultWm=true;
  }
  ServiceTarget serviceTarget=context.getServiceTarget();
  CloneableBootstrapContext ctx=new NamedBootstrapContext(name);
  final BootStrapContextService bootCtxService=new BootStrapContextService(ctx,name,usingDefaultWm);
  newControllers.add(serviceTarget.addService(ConnectorServices.BOOTSTRAP_CONTEXT_SERVICE.append(name),bootCtxService).addDependency(ConnectorServices.WORKMANAGER_SERVICE.append(workmanager),WorkManager.class,bootCtxService.getWorkManagerValueInjector()).addDependency(TxnServices.JBOSS_TXN_XA_TERMINATOR,JBossXATerminator.class,bootCtxService.getXaTerminatorInjector()).addDependency(TxnServices.JBOSS_TXN_ARJUNA_TRANSACTION_MANAGER,com.arjuna.ats.jbossatx.jta.TransactionManagerService.class,bootCtxService.getTxManagerInjector()).addDependency(ConnectorServices.CONNECTOR_CONFIG_SERVICE,JcaSubsystemConfiguration.class,bootCtxService.getJcaConfigInjector()).addListener(verificationHandler).setInitialMode(ServiceController.Mode.ACTIVE).install());
}
