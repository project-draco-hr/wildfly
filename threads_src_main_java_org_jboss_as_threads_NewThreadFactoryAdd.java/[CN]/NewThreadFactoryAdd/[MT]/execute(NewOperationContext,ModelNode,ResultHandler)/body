{
  final String name=operation.require(NAME).asString();
  final String groupName=has(operation,GROUP_NAME) ? operation.get(GROUP_NAME).asString() : null;
  final String threadNamePattern=has(operation,THREAD_NAME_PATTERN) ? operation.get(THREAD_NAME_PATTERN).asString() : null;
  final int priority=has(operation,PRIORITY) ? operation.get(PRIORITY).asInt() : -1;
  if (priority != -1 && priority < 0 || priority > 10) {
    throw new IllegalArgumentException(PRIORITY + " is out of range " + priority);
  }
  final ModelNode properties=has(operation,PROPERTIES) ? operation.get(PROPERTIES) : null;
  if (properties != null) {
    if (properties.getType() != ModelType.LIST) {
      throw new IllegalArgumentException(PROPERTIES + " must be a list of properties");
    }
    for (    ModelNode property : properties.asList()) {
      if (property.getType() != ModelType.PROPERTY) {
        throw new IllegalArgumentException(PROPERTIES + " must be a list of properties");
      }
    }
  }
  if (context instanceof NewRuntimeOperationContext) {
    final NewRuntimeOperationContext runtimeContext=(NewRuntimeOperationContext)context;
    final ServiceTarget target=runtimeContext.getServiceTarget();
    final ThreadFactoryService service=new ThreadFactoryService();
    service.setNamePattern(threadNamePattern);
    service.setPriority(priority);
    service.setThreadGroupName(groupName);
    try {
      target.addService(ThreadsServices.threadFactoryName(name),service).setInitialMode(ServiceController.Mode.ACTIVE).install();
    }
 catch (    ServiceRegistryException e) {
      resultHandler.handleFailed(new ModelNode().set(e.getMessage()));
    }
  }
  final ModelNode model=context.getSubModel();
  model.get(NAME).set(name);
  if (groupName != null) {
    model.get(GROUP_NAME).set(groupName);
  }
  if (threadNamePattern != null) {
    model.get(THREAD_NAME_PATTERN).set(threadNamePattern);
  }
  if (priority >= 0) {
    model.get(PRIORITY).set(priority);
  }
  if (properties != null) {
    model.get(PROPERTIES).set(properties);
  }
  final ModelNode compensating=new ModelNode();
  compensating.get(OP_ADDR).set(operation.require(ADDRESS));
  compensating.get(OP).set(REMOVE);
  compensating.get(NAME).set(name);
  resultHandler.handleResultComplete(compensating);
  return Cancellable.NULL;
}
