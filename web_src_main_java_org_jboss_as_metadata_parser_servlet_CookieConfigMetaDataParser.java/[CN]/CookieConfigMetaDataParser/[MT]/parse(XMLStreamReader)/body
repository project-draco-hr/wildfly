{
  CookieConfigMetaData cookieConfig=new CookieConfigMetaData();
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    final String value=reader.getAttributeValue(i);
    if (reader.getAttributeNamespace(i) != null) {
      continue;
    }
    final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case ID:
{
        cookieConfig.setId(value);
        break;
      }
default :
    throw unexpectedAttribute(reader,i);
}
}
while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
final Element element=Element.forName(reader.getLocalName());
switch (element) {
case NAME:
  cookieConfig.setName(reader.getElementText());
break;
case DOMAIN:
cookieConfig.setDomain(reader.getElementText());
break;
case PATH:
cookieConfig.setPath(reader.getElementText());
break;
case COMMENT:
cookieConfig.setComment(reader.getElementText());
break;
case HTTP_ONLY:
if (Boolean.TRUE.equals(Boolean.valueOf(reader.getElementText()))) {
cookieConfig.setHttpOnly(true);
}
 else {
cookieConfig.setHttpOnly(false);
}
break;
case SECURE:
if (Boolean.TRUE.equals(Boolean.valueOf(reader.getElementText()))) {
cookieConfig.setSecure(true);
}
 else {
cookieConfig.setSecure(false);
}
break;
case MAX_AGE:
try {
cookieConfig.setMaxAge(Integer.valueOf(reader.getElementText()));
}
 catch (NumberFormatException e) {
throw unexpectedValue(reader,e);
}
break;
default :
throw unexpectedElement(reader);
}
}
return cookieConfig;
}
