{
  final PathAddress address=PathAddress.pathAddress(operation.get(ModelDescriptionConstants.OP_ADDR));
  final Resource web=context.readResourceFromRoot(address.subAddress(0,address.size() - 1),false);
  final ModelNode subModel=web.getModel();
  final String host=DeploymentDefinition.VIRTUAL_HOST.resolveModelAttribute(context,subModel).asString();
  final String path=DeploymentDefinition.CONTEXT_ROOT.resolveModelAttribute(context,subModel).asString();
  final String server=DeploymentDefinition.SERVER.resolveModelAttribute(context,subModel).asString();
  final ServiceController<?> controller=context.getServiceRegistry(false).getService(UndertowService.deploymentServiceName(server,host,path));
  final UndertowDeploymentService deploymentService=(UndertowDeploymentService)controller.getService();
  final DeploymentInfo deploymentInfo=deploymentService.getDeploymentInfoInjectedValue().getValue();
  final UndertowMetricsCollector collector=(UndertowMetricsCollector)deploymentInfo.getMetricsCollector();
  context.addStep(new OperationStepHandler(){
    @Override public void execute(    final OperationContext context,    final ModelNode operation) throws OperationFailedException {
      if (controller != null) {
        final String name=address.getLastElement().getValue();
        final ModelNode response=new ModelNode();
        MetricsHandler.MetricResult result=collector != null ? collector.getMetrics(name) : null;
        if (result == null) {
          response.set(0);
        }
 else {
          handle(response,name,result);
        }
        context.getResult().set(response);
      }
      context.stepCompleted();
    }
  }
,OperationContext.Stage.RUNTIME);
  context.stepCompleted();
}
