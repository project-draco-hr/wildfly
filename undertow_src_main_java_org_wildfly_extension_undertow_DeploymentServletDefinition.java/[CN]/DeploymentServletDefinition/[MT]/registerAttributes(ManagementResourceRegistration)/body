{
  registration.registerReadOnlyAttribute(SERVLET_NAME,null);
  registration.registerReadOnlyAttribute(SERVLET_CLASS,null);
  registration.registerMetric(MAX_REQUEST_TIME,new AbstractMetricsHandler(){
    @Override void handle(    final ModelNode response,    final String name,    final MetricsHandler.MetricResult metricResult,    final ServletInfo servlet){
      response.set(metricResult.getMaxRequestTime());
    }
  }
);
  registration.registerMetric(MIN_REQUEST_TIME,new AbstractMetricsHandler(){
    @Override void handle(    final ModelNode response,    final String name,    final MetricsHandler.MetricResult metricResult,    final ServletInfo servlet){
      response.set(metricResult.getMinRequestTime());
    }
  }
);
  registration.registerMetric(TOTAL_REQUEST_TIME,new AbstractMetricsHandler(){
    @Override void handle(    final ModelNode response,    final String name,    final MetricsHandler.MetricResult metricResult,    final ServletInfo servlet){
      response.set(metricResult.getTotalRequestTime());
    }
  }
);
  registration.registerMetric(REQUEST_COUNT,new AbstractMetricsHandler(){
    @Override void handle(    final ModelNode response,    final String name,    final MetricsHandler.MetricResult metricResult,    final ServletInfo servlet){
      response.set(metricResult.getTotalRequests());
    }
  }
);
  registration.registerMetric(SERVLET_MAPPINGS,new AbstractMetricsHandler(){
    @Override void handle(    final ModelNode response,    final String name,    final MetricsHandler.MetricResult metricResult,    final ServletInfo servlet){
      for (      String mapping : servlet.getMappings()) {
        response.add(mapping);
      }
    }
  }
);
}
