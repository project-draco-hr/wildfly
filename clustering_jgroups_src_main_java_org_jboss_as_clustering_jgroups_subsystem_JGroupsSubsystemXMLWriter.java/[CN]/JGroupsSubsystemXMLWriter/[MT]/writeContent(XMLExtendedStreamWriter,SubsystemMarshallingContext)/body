{
  context.startSubsystemElement(Namespace.CURRENT.getUri(),false);
  ModelNode model=context.getModelNode();
  if (model.isDefined()) {
    JGroupsSubsystemResourceDefinition.DEFAULT_STACK.marshallAsAttribute(model,writer);
    if (model.hasDefined(StackResourceDefinition.WILDCARD_PATH.getKey())) {
      for (      Property property : model.get(StackResourceDefinition.WILDCARD_PATH.getKey()).asPropertyList()) {
        writer.writeStartElement(Element.STACK.getLocalName());
        writer.writeAttribute(Attribute.NAME.getLocalName(),property.getName());
        ModelNode stack=property.getValue();
        if (stack.get(TransportResourceDefinition.PATH.getKeyValuePair()).isDefined()) {
          ModelNode transport=stack.get(TransportResourceDefinition.PATH.getKeyValuePair());
          writer.writeStartElement(Element.TRANSPORT.getLocalName());
          TransportResourceDefinition.TYPE.marshallAsAttribute(transport,writer);
          TransportResourceDefinition.SOCKET_BINDING.marshallAsAttribute(transport,writer);
          TransportResourceDefinition.SHARED.marshallAsAttribute(transport,writer);
          TransportResourceDefinition.DIAGNOSTICS_SOCKET_BINDING.marshallAsAttribute(transport,writer);
          TransportResourceDefinition.DEFAULT_EXECUTOR.marshallAsAttribute(transport,writer);
          TransportResourceDefinition.OOB_EXECUTOR.marshallAsAttribute(transport,writer);
          TransportResourceDefinition.TIMER_EXECUTOR.marshallAsAttribute(transport,writer);
          TransportResourceDefinition.THREAD_FACTORY.marshallAsAttribute(transport,writer);
          TransportResourceDefinition.MACHINE.marshallAsAttribute(transport,writer);
          TransportResourceDefinition.RACK.marshallAsAttribute(transport,writer);
          TransportResourceDefinition.SITE.marshallAsAttribute(transport,writer);
          writeProtocolProperties(writer,transport);
          writer.writeEndElement();
        }
        if (stack.hasDefined(ProtocolResourceDefinition.WILDCARD_PATH.getKey())) {
          for (          Property protocolProperty : StackAddHandler.getOrderedProtocolPropertyList(stack)) {
            ModelNode protocol=protocolProperty.getValue();
            writer.writeStartElement(Element.PROTOCOL.getLocalName());
            ProtocolResourceDefinition.TYPE.marshallAsAttribute(protocol,writer);
            ProtocolResourceDefinition.SOCKET_BINDING.marshallAsAttribute(protocol,writer);
            writeProtocolProperties(writer,protocol);
            writer.writeEndElement();
          }
        }
        if (stack.get(RelayResourceDefinition.PATH.getKeyValuePair()).isDefined()) {
          ModelNode relay=stack.get(RelayResourceDefinition.PATH.getKeyValuePair());
          writeRelay(writer,relay);
        }
        writer.writeEndElement();
      }
    }
  }
  writer.writeEndElement();
}
