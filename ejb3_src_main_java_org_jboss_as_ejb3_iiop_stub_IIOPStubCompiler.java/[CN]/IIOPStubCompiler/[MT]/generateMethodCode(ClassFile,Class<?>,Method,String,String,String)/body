{
  Class<?> returnType=m.getReturnType();
  Class<?>[] paramTypes=m.getParameterTypes();
  Class<?>[] exceptions=m.getExceptionTypes();
  asm.addField(Modifier.PRIVATE + Modifier.STATIC,strategyField,StubStrategy.class);
  final CodeAttribute ca=asm.addMethod(m).getCodeAttribute();
  ca.aload(0);
  ca.ldc(idlName);
  ca.getstatic(asm.getName(),strategyField,StubStrategy.class);
  if (paramTypes.length == 0) {
    ca.iconst(0);
    ca.anewarray(Object.class.getName());
  }
 else {
    ca.iconst(paramTypes.length);
    ca.anewarray(Object.class.getName());
    int index=1;
    for (int j=0; j < paramTypes.length; j++) {
      Class<?> type=paramTypes[j];
      ca.dup();
      ca.iconst(j);
      if (!type.isPrimitive()) {
        ca.aload(index);
      }
 else       if (type.equals(double.class)) {
        ca.dload(index);
        Boxing.boxDouble(ca);
        index++;
      }
 else       if (type.equals(long.class)) {
        ca.lload(index);
        Boxing.boxLong(ca);
        index++;
      }
 else       if (type.equals(float.class)) {
        ca.fload(index);
        Boxing.boxFloat(ca);
      }
 else {
        ca.iload(index);
        Boxing.boxIfNessesary(ca,DescriptorUtils.makeDescriptor(type));
      }
      index++;
      ca.aastore();
    }
  }
  String invoke="invoke";
  String ret="Ljava/lang/Object;";
  if (returnType.isPrimitive() && returnType != Void.TYPE) {
    String typeName=returnType.getName();
    invoke+=(Character.toUpperCase(typeName.charAt(0)) + typeName.substring(1));
    ret=DescriptorUtils.makeDescriptor(returnType);
  }
  ca.invokevirtual(superclass.getName(),invoke,"(Ljava/lang/String;Lorg/wildfly/iiop/openjdk/rmi/marshal/strategy/StubStrategy;[Ljava/lang/Object;)" + ret);
  if (!returnType.isPrimitive() && returnType != Object.class) {
    ca.checkcast(returnType);
  }
  ca.returnInstruction();
  final CodeAttribute init=asm.addMethod(Modifier.PRIVATE + Modifier.STATIC,initMethod,"V").getCodeAttribute();
  int i;
  int len;
  len=paramTypes.length;
  init.iconst(len);
  init.anewarray(String.class.getName());
  for (i=0; i < len; i++) {
    init.dup();
    init.iconst(i);
    init.ldc(CDRStream.abbrevFor(paramTypes[i]));
    init.aastore();
  }
  len=exceptions.length;
  int n=0;
  for (i=0; i < len; i++) {
    if (!RemoteException.class.isAssignableFrom(exceptions[i])) {
      n++;
    }
  }
  init.iconst(n);
  init.anewarray(String.class.getName());
  try {
    int j=0;
    for (i=0; i < len; i++) {
      if (!RemoteException.class.isAssignableFrom(exceptions[i])) {
        init.dup();
        init.iconst(j);
        init.ldc(ExceptionAnalysis.getExceptionAnalysis(exceptions[i]).getExceptionRepositoryId());
        init.aastore();
        j++;
      }
    }
  }
 catch (  RMIIIOPViolationException e) {
    throw EjbLogger.ROOT_LOGGER.exceptionRepositoryNotFound(exceptions[i].getName(),e.getLocalizedMessage());
  }
  init.iconst(n);
  init.anewarray(String.class.getName());
  int j=0;
  for (i=0; i < len; i++) {
    if (!RemoteException.class.isAssignableFrom(exceptions[i])) {
      init.dup();
      init.iconst(j);
      init.ldc(exceptions[i].getName());
      init.aastore();
      j++;
    }
  }
  init.ldc(CDRStream.abbrevFor(returnType));
  init.aconstNull();
  init.invokestatic(StubStrategy.class.getName(),"forMethod","([Ljava/lang/String;[Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/ClassLoader;)Lorg/wildfly/iiop/openjdk/rmi/marshal/strategy/StubStrategy;");
  init.putstatic(asm.getName(),strategyField,StubStrategy.class);
  init.returnInstruction();
}
