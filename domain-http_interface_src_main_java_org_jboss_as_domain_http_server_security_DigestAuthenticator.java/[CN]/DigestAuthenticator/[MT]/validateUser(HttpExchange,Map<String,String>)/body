{
  String realm=challengeParameters.get(REALM);
  String username=challengeParameters.get(USERNAME);
  if (realm == null || realm.length() == 0 || username == null || username.length() == 0) {
    return null;
  }
  RealmCallback rcb=new RealmCallback("Realm",realm);
  NameCallback ncb=new NameCallback("Username",username);
  Callback credentialCallback=preDigested ? new DigestHashCallback("Password Digest") : new PasswordCallback("Password",false);
  Callback[] callbacks=new Callback[]{rcb,ncb,credentialCallback};
  try {
    callbackHandler.handle(callbacks);
  }
 catch (  UserNotFoundException e) {
    if (ROOT_LOGGER.isDebugEnabled()) {
      ROOT_LOGGER.debug(e.getMessage());
    }
    return null;
  }
catch (  IOException e) {
    throw MESSAGES.invalidCallbackHandler();
  }
catch (  UnsupportedCallbackException e) {
    throw MESSAGES.invalidCallbackHandler();
  }
  try {
    MessageDigest md=MessageDigest.getInstance(MD5);
    byte[] ha1;
    if (preDigested) {
      DigestHashCallback dhc=(DigestHashCallback)credentialCallback;
      ha1=dhc.getHexHash().getBytes();
    }
 else {
      md.update(challengeParameters.get(USERNAME).getBytes());
      md.update(COLON);
      md.update(challengeParameters.get(REALM).getBytes());
      md.update(COLON);
      PasswordCallback pcb=(PasswordCallback)credentialCallback;
      md.update(new String(pcb.getPassword()).getBytes());
      ha1=HexConverter.convertToHexBytes(md.digest());
    }
    md.update(httpExchange.getRequestMethod().getBytes());
    md.update(COLON);
    md.update(challengeParameters.get(URI).getBytes());
    byte[] ha2=HexConverter.convertToHexBytes(md.digest());
    md.update(ha1);
    md.update(COLON);
    md.update(challengeParameters.get(NONCE).getBytes());
    md.update(COLON);
    md.update(ha2);
    byte[] expectedResponse=HexConverter.convertToHexBytes(md.digest());
    byte[] actualResponse=challengeParameters.get(RESPONSE).getBytes();
    if (MessageDigest.isEqual(expectedResponse,actualResponse)) {
      return new HttpPrincipal(challengeParameters.get(USERNAME),challengeParameters.get(REALM));
    }
  }
 catch (  NoSuchAlgorithmException e) {
    throw MESSAGES.md5Unavailable(e);
  }
  return null;
}
