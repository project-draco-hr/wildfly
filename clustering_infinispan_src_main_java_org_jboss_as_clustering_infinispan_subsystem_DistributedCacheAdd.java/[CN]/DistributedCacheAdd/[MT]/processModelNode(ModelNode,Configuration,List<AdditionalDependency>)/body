{
  processClusteredCacheModelNode(cache,configuration,additionalDeps);
  FluentConfiguration fluent=configuration.fluent();
  if (cache.hasDefined(ModelKeys.OWNERS)) {
    fluent.hash().numOwners(cache.get(ModelKeys.OWNERS).asInt());
  }
  if (cache.hasDefined(ModelKeys.VIRTUAL_NODES)) {
    fluent.hash().numVirtualNodes(cache.get(ModelKeys.VIRTUAL_NODES).asInt());
  }
  if (cache.hasDefined(ModelKeys.L1_LIFESPAN)) {
    long lifespan=cache.get(ModelKeys.L1_LIFESPAN).asLong();
    if (lifespan > 0) {
      fluent.l1().lifespan(lifespan);
    }
 else {
      fluent.l1().disable();
    }
  }
  if (cache.hasDefined(ModelKeys.REHASHING)) {
    ModelNode rehashing=cache.get(ModelKeys.REHASHING);
    FluentConfiguration.HashConfig fluentHash=fluent.hash();
    if (rehashing.hasDefined(ModelKeys.ENABLED)) {
      fluentHash.rehashEnabled(rehashing.get(ModelKeys.ENABLED).asBoolean());
    }
    if (rehashing.hasDefined(ModelKeys.TIMEOUT)) {
      fluentHash.rehashRpcTimeout(rehashing.get(ModelKeys.TIMEOUT).asLong());
    }
  }
  return configuration;
}
