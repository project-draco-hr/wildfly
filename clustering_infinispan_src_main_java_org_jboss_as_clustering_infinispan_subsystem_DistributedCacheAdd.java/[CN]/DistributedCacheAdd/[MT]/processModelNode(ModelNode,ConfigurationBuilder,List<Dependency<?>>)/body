{
  super.processModelNode(cache,builder,dependencies);
  if (cache.hasDefined(ModelKeys.OWNERS)) {
    builder.clustering().hash().numOwners(cache.get(ModelKeys.OWNERS).asInt());
  }
  if (cache.hasDefined(ModelKeys.VIRTUAL_NODES)) {
    builder.clustering().hash().numVirtualNodes(cache.get(ModelKeys.VIRTUAL_NODES).asInt());
  }
  if (cache.hasDefined(ModelKeys.L1_LIFESPAN)) {
    long lifespan=cache.get(ModelKeys.L1_LIFESPAN).asLong();
    if (lifespan > 0) {
      builder.clustering().l1().lifespan(lifespan);
    }
 else {
      builder.clustering().l1().disable();
    }
  }
  if (cache.hasDefined(ModelKeys.SINGLETON) && cache.get(ModelKeys.SINGLETON,ModelKeys.REHASHING).isDefined()) {
    ModelNode rehashing=cache.get(ModelKeys.SINGLETON,ModelKeys.REHASHING);
    if (rehashing.hasDefined(ModelKeys.ENABLED)) {
      builder.clustering().hash().rehashEnabled(rehashing.get(ModelKeys.ENABLED).asBoolean());
    }
    if (rehashing.hasDefined(ModelKeys.TIMEOUT)) {
      builder.clustering().hash().rehashRpcTimeout(rehashing.get(ModelKeys.TIMEOUT).asLong());
    }
    if (rehashing.hasDefined(ModelKeys.WAIT)) {
      builder.clustering().hash().rehashWait(rehashing.get(ModelKeys.WAIT).asLong());
    }
  }
}
