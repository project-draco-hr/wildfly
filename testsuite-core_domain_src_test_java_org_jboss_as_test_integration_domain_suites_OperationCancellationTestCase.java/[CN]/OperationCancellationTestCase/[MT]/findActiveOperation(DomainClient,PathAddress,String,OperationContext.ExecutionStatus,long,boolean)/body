{
  ModelNode op=Util.createEmptyOperation(READ_CHILDREN_RESOURCES_OPERATION,address);
  op.get(CHILD_TYPE).set(ACTIVE_OPERATION);
  long maxTime=TimeoutUtil.adjust(5000);
  long timeout=executionStart + maxTime;
  List<Property> activeOps=new ArrayList<Property>();
  String opToCancel=null;
  do {
    ModelNode result=executeForResult(op,client);
    if (result.isDefined()) {
      assertEquals(result.asString(),ModelType.OBJECT,result.getType());
      for (      Property prop : result.asPropertyList()) {
        if (prop.getValue().get(OP).asString().equals(opName)) {
          PathAddress pa=PathAddress.pathAddress(prop.getValue().get(OP_ADDR));
          if (!serverOpOnly || pa.size() > 2 && pa.getElement(1).getKey().equals(SERVER)) {
            activeOps.add(prop);
            if (targetStatus == null || prop.getValue().get(EXECUTION_STATUS).asString().equals(targetStatus.toString())) {
              opToCancel=prop.getName();
              break;
            }
          }
        }
      }
    }
    if (opToCancel == null) {
      activeOps.clear();
      Thread.sleep(50);
    }
  }
 while ((opToCancel == null || activeOps.size() > 1) && System.currentTimeMillis() <= timeout);
  assertTrue(opName + " not present after " + maxTime+ " ms",activeOps.size() > 0);
  assertEquals("Multiple instances of " + opName + " present: "+ activeOps,1,activeOps.size());
  assertNotNull(opName + " not in status " + targetStatus+ " after "+ maxTime+ " ms",opToCancel);
  return opToCancel;
}
