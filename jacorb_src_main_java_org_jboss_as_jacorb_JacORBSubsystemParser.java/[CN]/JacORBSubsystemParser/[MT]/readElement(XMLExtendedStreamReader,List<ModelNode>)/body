{
  requireNoAttributes(reader);
  final ModelNode subsystem=new ModelNode();
  subsystem.get(OP).set(ADD);
  subsystem.get(OP_ADDR).add(SUBSYSTEM,JacORBExtension.SUBSYSTEM_NAME);
  final EnumSet<JacORBElement> encountered=EnumSet.noneOf(JacORBElement.class);
  while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
switch (JacORBNamespace.forUri(reader.getNamespaceURI())) {
case JacORB_1_0:
{
        final JacORBElement element=JacORBElement.forName(reader.getLocalName());
        if (!encountered.add(element) && element != PROPERTY_CONFIG) {
          throw duplicateNamedElement(reader,element.getLocalName());
        }
switch (element) {
case ORB_CONFIG:
{
            this.parseORBConfig(reader,subsystem.get(ORB_CONFIG.getLocalName()));
            break;
          }
case POA_CONFIG:
{
          this.parsePOAConfig(reader,subsystem.get(POA_CONFIG.getLocalName()));
          break;
        }
case INTEROP_CONFIG:
{
        this.parseInteropConfig(reader,subsystem.get(INTEROP_CONFIG.getLocalName()));
        break;
      }
case SECURITY_CONFIG:
{
      this.parseSecurityConfig(reader,subsystem.get(SECURITY_CONFIG.getLocalName()));
      break;
    }
case PROPERTY_CONFIG:
{
    this.parseGenericProperty(reader,subsystem.get(PROPERTY_CONFIG.getLocalName()));
    break;
  }
case INITIALIZERS_CONFIG:
{
  this.parseInitializersConfig(reader,subsystem.get(INITIALIZERS_CONFIG.getLocalName()));
  break;
}
default :
{
throw unexpectedElement(reader);
}
}
break;
}
default :
{
throw unexpectedElement(reader);
}
}
}
nodes.add(subsystem);
}
