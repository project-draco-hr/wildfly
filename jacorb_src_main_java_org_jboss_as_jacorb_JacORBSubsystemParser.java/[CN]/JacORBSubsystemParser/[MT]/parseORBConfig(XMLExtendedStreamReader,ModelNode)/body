{
  EnumSet<JacORBAttribute> expectedAttributes=EnumSet.of(ORB_NAME,ORB_PRINT_VERSION,ORB_GIOP_MINOR_VERSION,ORB_USE_BOM,ORB_USE_IMR,ORB_CACHE_POA_NAMES,ORB_CACHE_TYPECODES);
  this.parseAttributes(reader,orbConfig,expectedAttributes,null);
  EnumSet<JacORBElement> foundElements=EnumSet.noneOf(JacORBElement.class);
  while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
switch (JacORBNamespace.forUri(reader.getNamespaceURI())) {
case JacORB_1_0:
{
        final JacORBElement element=JacORBElement.forName(reader.getLocalName());
        if (!foundElements.add(element)) {
          throw duplicateNamedElement(reader,element.getLocalName());
        }
switch (element) {
case ORB_CONNECTION_CONFIG:
{
            ModelNode subNode=orbConfig.get(ORB_CONNECTION_CONFIG.getLocalName());
            EnumSet<JacORBAttribute> attributes=EnumSet.of(ORB_CONN_RETRIES,ORB_CONN_RETRY_INTERVAL,ORB_CONN_CLIENT_TIMEOUT,ORB_CONN_SERVER_TIMEOUT,ORB_CONN_MAX_SERVER_CONNECTIONS,ORB_CONN_MAX_MANAGED_BUF_SIZE,ORB_CONN_OUTBUF_SIZE,ORB_CONN_OUTBUF_CACHE_TIMEOUT);
            this.parseAttributes(reader,subNode,attributes,null);
            requireNoContent(reader);
            break;
          }
case ORB_NAMING_CONFIG:
{
          ModelNode subNode=orbConfig.get(ORB_NAMING_CONFIG.getLocalName());
          EnumSet<JacORBAttribute> attributes=EnumSet.of(ORB_NAMING_ROOT_CONTEXT,ORB_NAMING_EXPORT_CORBALOC);
          this.parseAttributes(reader,subNode,attributes,null);
          requireNoContent(reader);
          break;
        }
default :
{
        throw unexpectedElement(reader);
      }
  }
  break;
}
default :
{
throw unexpectedElement(reader);
}
}
}
}
