{
  EnumSet<JacORBAttribute> expectedAttributes=EnumSet.of(POA_MONITORING,POA_QUEUE_WAIT,POA_QUEUE_MIN,POA_QUEUE_MAX);
  this.parseAttributes(reader,poaConfig,expectedAttributes,null);
  EnumSet<JacORBElement> foundElements=EnumSet.noneOf(JacORBElement.class);
  while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
switch (JacORBNamespace.forUri(reader.getNamespaceURI())) {
case JacORB_1_0:
{
        final JacORBElement element=JacORBElement.forName(reader.getLocalName());
        if (!foundElements.add(element)) {
          throw duplicateNamedElement(reader,element.getLocalName());
        }
switch (element) {
case POA_REQUEST_PROC_CONFIG:
{
            ModelNode subNode=poaConfig.get(POA_REQUEST_PROC_CONFIG.getLocalName());
            EnumSet<JacORBAttribute> attributes=EnumSet.of(POA_REQUEST_PROC_POOL_SIZE,POA_REQUEST_PROC_MAX_THREADS);
            this.parseAttributes(reader,subNode,attributes,EnumSet.copyOf(attributes));
            requireNoContent(reader);
            break;
          }
default :
{
          throw unexpectedElement(reader);
        }
    }
    break;
  }
default :
{
  throw unexpectedElement(reader);
}
}
}
}
