{
  EnumSet<Attribute> expectedAttributes=EnumSet.of(Attribute.POA_MONITORING,Attribute.POA_QUEUE_WAIT,Attribute.POA_QUEUE_MIN,Attribute.POA_QUEUE_MAX);
  this.parseAttributes(reader,node,expectedAttributes,null);
  EnumSet<Element> encountered=EnumSet.noneOf(Element.class);
  while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
    final Element element=Element.forName(reader.getLocalName());
    if (!encountered.add(element)) {
      throw duplicateNamedElement(reader,element.getLocalName());
    }
switch (element) {
case POA_REQUEST_PROC:
{
        EnumSet<Attribute> attributes=EnumSet.of(Attribute.POA_REQUEST_PROC_POOL_SIZE,Attribute.POA_REQUEST_PROC_MAX_THREADS);
        this.parseAttributes(reader,node,attributes,null);
        requireNoContent(reader);
        break;
      }
default :
{
      throw unexpectedElement(reader);
    }
}
}
}
