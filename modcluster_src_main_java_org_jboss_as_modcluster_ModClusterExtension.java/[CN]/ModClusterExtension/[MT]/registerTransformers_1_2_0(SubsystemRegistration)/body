{
  ResourceTransformationDescriptionBuilder builder=TransformationDescriptionBuilder.Factory.createSubsystemInstance();
  ResourceTransformationDescriptionBuilder dynamicLoadProvider=builder.addChildResource(CONFIGURATION_PATH).getAttributeBuilder().addRejectCheck(RejectAttributeChecker.SIMPLE_EXPRESSIONS,ADVERTISE,AUTO_ENABLE_CONTEXTS,FLUSH_PACKETS,STICKY_SESSION,STICKY_SESSION_REMOVE,STICKY_SESSION_FORCE,PING).end().addChildResource(DYNAMIC_LOAD_PROVIDER_PATH).getAttributeBuilder().addRejectCheck(RejectAttributeChecker.SIMPLE_EXPRESSIONS,DECAY,HISTORY).end();
  dynamicLoadProvider.addChildResource(CUSTOM_LOAD_METRIC_PATH).getAttributeBuilder().addRejectCheck(RejectAttributeChecker.SIMPLE_EXPRESSIONS,CLASS).end();
  dynamicLoadProvider.addChildResource(LOAD_METRIC_PATH).getAttributeBuilder().addRejectCheck(RejectAttributeChecker.SIMPLE_EXPRESSIONS,TYPE,WEIGHT,CAPACITY).addRejectCheck(new RejectAttributeChecker.ObjectFieldsRejectAttributeChecker(Collections.singletonMap(PROPERTY.getName(),RejectAttributeChecker.SIMPLE_EXPRESSIONS)),PROPERTY).addRejectCheck(CapacityCheckerAndConverter.INSTANCE,CAPACITY).setValueConverter(CapacityCheckerAndConverter.INSTANCE,CAPACITY).addRejectCheck(PropertyCheckerAndConverter.INSTANCE,PROPERTY).setValueConverter(PropertyCheckerAndConverter.INSTANCE,PROPERTY).end();
  builder.addChildResource(SSL_CONFIGURATION_PATH).getAttributeBuilder().addRejectCheck(RejectAttributeChecker.SIMPLE_EXPRESSIONS,CIPHER_SUITE,KEY_ALIAS,PROTOCOL).end();
  TransformationDescription.Tools.register(builder.build(),subsystem,ModelVersion.create(1,2,0));
}
