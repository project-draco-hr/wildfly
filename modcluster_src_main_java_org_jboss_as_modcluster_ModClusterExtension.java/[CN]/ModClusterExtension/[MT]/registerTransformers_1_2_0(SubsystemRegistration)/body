{
  TransformersSubRegistration transformers=subsystem.registerModelTransformers(ModelVersion.create(1,2,0),new AbstractSubsystemTransformer(SUBSYSTEM_NAME){
    @Override protected ModelNode transformModel(    TransformationContext context,    ModelNode model){
      return model;
    }
  }
);
  RejectExpressionValuesTransformer configRejectExpressionTransformer=new RejectExpressionValuesTransformer(ADVERTISE,AUTO_ENABLE_CONTEXTS,FLUSH_PACKETS,STICKY_SESSION,STICKY_SESSION_REMOVE,STICKY_SESSION_FORCE,PING);
  TransformersSubRegistration config=transformers.registerSubResource(CONFIGURATION_PATH,(ResourceTransformer)configRejectExpressionTransformer);
  config.registerOperationTransformer(ModelDescriptionConstants.ADD,configRejectExpressionTransformer);
  RejectExpressionValuesTransformer sslRejectExpressionTransformer=new RejectExpressionValuesTransformer(CIPHER_SUITE,KEY_ALIAS,PROTOCOL);
  TransformersSubRegistration ssl=transformers.registerSubResource(SSL_CONFIGURATION_PATH,(ResourceTransformer)sslRejectExpressionTransformer);
  ssl.registerOperationTransformer(ADD,sslRejectExpressionTransformer);
  ssl.registerOperationTransformer(WRITE_ATTRIBUTE_OPERATION,sslRejectExpressionTransformer.getWriteAttributeTransformer());
  RejectExpressionValuesTransformer dynamicProviderRejectExpressionTransformer=new RejectExpressionValuesTransformer(DECAY,HISTORY);
  TransformersSubRegistration dynamicProvider=config.registerSubResource(DYNAMIC_LOAD_PROVIDER_PATH,(ResourceTransformer)dynamicProviderRejectExpressionTransformer);
  dynamicProvider.registerOperationTransformer(ADD,dynamicProviderRejectExpressionTransformer);
  dynamicProvider.registerOperationTransformer(WRITE_ATTRIBUTE_OPERATION,dynamicProviderRejectExpressionTransformer.getWriteAttributeTransformer());
  RejectExpressionValuesTransformer customRejectExpressionTransformer=new RejectExpressionValuesTransformer(CLASS);
  TransformersSubRegistration customMetric=dynamicProvider.registerSubResource(CUSTOM_LOAD_METRIC_PATH,(ResourceTransformer)customRejectExpressionTransformer);
  customMetric.registerOperationTransformer(ADD,customRejectExpressionTransformer);
  customMetric.registerOperationTransformer(WRITE_ATTRIBUTE_OPERATION,customRejectExpressionTransformer.getWriteAttributeTransformer());
  RejectExpressionValuesTransformer loadMetricRejectExpressionTransformer=new RejectExpressionValuesTransformer(TYPE,WEIGHT,CAPACITY,PROPERTY);
  ChainedResourceTransformer loadMetricResourceTransformer=new ChainedResourceTransformer(loadMetricRejectExpressionTransformer.getChainedTransformer(),ConvertCapacityTransformer.INSTANCE);
  TransformersSubRegistration metric=dynamicProvider.registerSubResource(LOAD_METRIC_PATH,loadMetricResourceTransformer);
  metric.registerOperationTransformer(ADD,new ChainedOperationTransformer(loadMetricRejectExpressionTransformer,ConvertCapacityTransformer.INSTANCE));
  metric.registerOperationTransformer(WRITE_ATTRIBUTE_OPERATION,new ChainedOperationTransformer(loadMetricRejectExpressionTransformer.getWriteAttributeTransformer(),ConvertCapacityTransformer.INSTANCE.getWriteAttributeTransformer()));
}
