{
  ROOT_LOGGER.debugf("Activating Mod_cluster Extension");
  final SubsystemRegistration subsystem=context.registerSubsystem(SUBSYSTEM_NAME,Namespace.CURRENT.getMajorVersion(),Namespace.CURRENT.getMinorVersion());
  final ManagementResourceRegistration registration=subsystem.registerSubsystemModel(ModClusterSubsystemDescriptionProviders.SUBSYSTEM);
  registration.registerOperationHandler(ModelDescriptionConstants.ADD,ModClusterSubsystemAdd.INSTANCE,ModClusterSubsystemAdd.INSTANCE,false);
  registration.registerOperationHandler(ModelDescriptionConstants.REMOVE,ModClusterSubsystemRemove.INSTANCE,ModClusterSubsystemRemove.INSTANCE,false);
  registration.registerOperationHandler(DESCRIBE,ModClusterSubsystemDescribe.INSTANCE,ModClusterSubsystemDescribe.INSTANCE,false,OperationEntry.EntryType.PRIVATE);
  if (context.isRuntimeOnlyRegistrationValid()) {
    registration.registerOperationHandler("list-proxies",ModClusterListProxies.INSTANCE,ModClusterListProxies.INSTANCE,false);
    registration.registerOperationHandler("read-proxies-info",ModClusterGetProxyInfo.INSTANCE,ModClusterGetProxyInfo.INSTANCE,false);
    registration.registerOperationHandler("read-proxies-configuration",ModClusterGetProxyConfiguration.INSTANCE,ModClusterGetProxyConfiguration.INSTANCE,false);
    registration.registerOperationHandler("add-proxy",ModClusterAddProxy.INSTANCE,ModClusterAddProxy.INSTANCE,false);
    registration.registerOperationHandler("remove-proxy",ModClusterRemoveProxy.INSTANCE,ModClusterRemoveProxy.INSTANCE,false);
    registration.registerOperationHandler("refresh",ModClusterRefresh.INSTANCE,ModClusterRefresh.INSTANCE,false);
    registration.registerOperationHandler("reset",ModClusterReset.INSTANCE,ModClusterReset.INSTANCE,false);
    registration.registerOperationHandler("enable",ModClusterEnable.INSTANCE,ModClusterEnable.INSTANCE,false);
    registration.registerOperationHandler("disable",ModClusterDisable.INSTANCE,ModClusterDisable.INSTANCE,false);
    registration.registerOperationHandler("stop",ModClusterStop.INSTANCE,ModClusterStop.INSTANCE,false);
    registration.registerOperationHandler("enable-context",ModClusterEnableContext.INSTANCE,ModClusterEnableContext.INSTANCE,false);
    registration.registerOperationHandler("disable-context",ModClusterDisableContext.INSTANCE,ModClusterDisableContext.INSTANCE,false);
    registration.registerOperationHandler("stop-context",ModClusterStopContext.INSTANCE,ModClusterStopContext.INSTANCE,false);
  }
  final ManagementResourceRegistration configuration=registration.registerSubModel(configurationPath,ModClusterSubsystemDescriptionProviders.CONFIGURATION);
  final ManagementResourceRegistration ssl=configuration.registerSubModel(sslConfigurationPath,ModClusterSubsystemDescriptionProviders.SSL);
  configuration.registerReadWriteAttribute(CommonAttributes.ADVERTISE_SOCKET,null,new WriteAttributeHandlers.StringLengthValidatingHandler(1,true),Storage.CONFIGURATION);
  configuration.registerReadWriteAttribute(CommonAttributes.PROXY_LIST,null,new WriteAttributeHandlers.StringLengthValidatingHandler(1,true),Storage.CONFIGURATION);
  configuration.registerReadWriteAttribute(CommonAttributes.PROXY_URL,null,new WriteAttributeHandlers.StringLengthValidatingHandler(1,true),Storage.CONFIGURATION);
  configuration.registerReadWriteAttribute(CommonAttributes.ADVERTISE,null,new WriteAttributeHandlers.ModelTypeValidatingHandler(ModelType.BOOLEAN,true),Storage.CONFIGURATION);
  configuration.registerReadWriteAttribute(CommonAttributes.ADVERTISE_SECURITY_KEY,null,new WriteAttributeHandlers.StringLengthValidatingHandler(1,true),Storage.CONFIGURATION);
  configuration.registerReadWriteAttribute(CommonAttributes.EXCLUDED_CONTEXTS,null,new WriteAttributeHandlers.ModelTypeValidatingHandler(ModelType.BOOLEAN,true),Storage.CONFIGURATION);
  configuration.registerReadWriteAttribute(CommonAttributes.AUTO_ENABLE_CONTEXTS,null,new WriteAttributeHandlers.ModelTypeValidatingHandler(ModelType.BOOLEAN,true),Storage.CONFIGURATION);
  configuration.registerReadWriteAttribute(CommonAttributes.STOP_CONTEXT_TIMEOUT,null,new WriteAttributeHandlers.IntRangeValidatingHandler(1,true),Storage.CONFIGURATION);
  configuration.registerReadWriteAttribute(CommonAttributes.SOCKET_TIMEOUT,null,new WriteAttributeHandlers.IntRangeValidatingHandler(1,true),Storage.CONFIGURATION);
  configuration.registerReadWriteAttribute(CommonAttributes.STICKY_SESSION,null,new WriteAttributeHandlers.ModelTypeValidatingHandler(ModelType.BOOLEAN,true),Storage.CONFIGURATION);
  configuration.registerReadWriteAttribute(CommonAttributes.STICKY_SESSION_REMOVE,null,new WriteAttributeHandlers.ModelTypeValidatingHandler(ModelType.BOOLEAN,true),Storage.CONFIGURATION);
  configuration.registerReadWriteAttribute(CommonAttributes.STICKY_SESSION_FORCE,null,new WriteAttributeHandlers.ModelTypeValidatingHandler(ModelType.BOOLEAN,true),Storage.CONFIGURATION);
  configuration.registerReadWriteAttribute(CommonAttributes.WORKER_TIMEOUT,null,new WriteAttributeHandlers.IntRangeValidatingHandler(1,true),Storage.CONFIGURATION);
  configuration.registerReadWriteAttribute(CommonAttributes.MAX_ATTEMPTS,null,new WriteAttributeHandlers.IntRangeValidatingHandler(1,true),Storage.CONFIGURATION);
  configuration.registerReadWriteAttribute(CommonAttributes.FLUSH_PACKETS,null,new WriteAttributeHandlers.ModelTypeValidatingHandler(ModelType.BOOLEAN,true),Storage.CONFIGURATION);
  configuration.registerReadWriteAttribute(CommonAttributes.FLUSH_WAIT,null,new WriteAttributeHandlers.IntRangeValidatingHandler(1,true),Storage.CONFIGURATION);
  configuration.registerReadWriteAttribute(CommonAttributes.PING,null,new WriteAttributeHandlers.IntRangeValidatingHandler(1,true),Storage.CONFIGURATION);
  configuration.registerReadWriteAttribute(CommonAttributes.SMAX,null,new WriteAttributeHandlers.IntRangeValidatingHandler(1,true),Storage.CONFIGURATION);
  configuration.registerReadWriteAttribute(CommonAttributes.TTL,null,new WriteAttributeHandlers.IntRangeValidatingHandler(1,true),Storage.CONFIGURATION);
  configuration.registerReadWriteAttribute(CommonAttributes.NODE_TIMEOUT,null,new WriteAttributeHandlers.IntRangeValidatingHandler(1,true),Storage.CONFIGURATION);
  configuration.registerReadWriteAttribute(CommonAttributes.BALANCER,null,new WriteAttributeHandlers.StringLengthValidatingHandler(1,true),Storage.CONFIGURATION);
  configuration.registerReadWriteAttribute(CommonAttributes.DOMAIN,null,new WriteAttributeHandlers.StringLengthValidatingHandler(1,true),Storage.CONFIGURATION);
  configuration.registerReadWriteAttribute(CommonAttributes.DYNAMIC_LOAD_PROVIDER,null,new WriteDynamicLoadProviderOperationHandler(),Storage.CONFIGURATION);
  configuration.registerReadWriteAttribute(CommonAttributes.SIMPLE_LOAD_PROVIDER,null,new WriteSimpleLoadProviderOperationHandler(),Storage.CONFIGURATION);
  ssl.registerOperationHandler(ADD,ModClusterAddSSL.INSTANCE,ModClusterAddSSL.INSTANCE,false);
  ssl.registerOperationHandler(REMOVE,ModClusterRemoveSSL.INSTANCE,ModClusterRemoveSSL.INSTANCE,false);
  ssl.registerReadWriteAttribute(CommonAttributes.KEY_ALIAS,null,new WriteAttributeHandlers.StringLengthValidatingHandler(1,true),Storage.CONFIGURATION);
  ssl.registerReadWriteAttribute(CommonAttributes.PASSWORD,null,new WriteAttributeHandlers.StringLengthValidatingHandler(1,true),Storage.CONFIGURATION);
  ssl.registerReadWriteAttribute(CommonAttributes.CERTIFICATE_KEY_FILE,null,new WriteAttributeHandlers.StringLengthValidatingHandler(1,true),Storage.CONFIGURATION);
  ssl.registerReadWriteAttribute(CommonAttributes.CIPHER_SUITE,null,new WriteAttributeHandlers.StringLengthValidatingHandler(1,true),Storage.CONFIGURATION);
  ssl.registerReadWriteAttribute(CommonAttributes.PROTOCOL,null,new WriteAttributeHandlers.StringLengthValidatingHandler(1,true),Storage.CONFIGURATION);
  ssl.registerReadWriteAttribute(CommonAttributes.VERIFY_CLIENT,null,new WriteAttributeHandlers.StringLengthValidatingHandler(1,true),Storage.CONFIGURATION);
  ssl.registerReadWriteAttribute(CommonAttributes.CA_CERTIFICATE_FILE,null,new WriteAttributeHandlers.StringLengthValidatingHandler(1,true),Storage.CONFIGURATION);
  ssl.registerReadWriteAttribute(CommonAttributes.CA_REVOCATION_URL,null,new WriteAttributeHandlers.StringLengthValidatingHandler(1,true),Storage.CONFIGURATION);
  configuration.registerOperationHandler("add-metric",ModClusterAddMetric.INSTANCE,ModClusterAddMetric.INSTANCE,false);
  configuration.registerOperationHandler("add-custom-metric",ModClusterAddCustomMetric.INSTANCE,ModClusterAddCustomMetric.INSTANCE,false);
  configuration.registerOperationHandler("remove-metric",ModClusterRemoveMetric.INSTANCE,ModClusterRemoveMetric.INSTANCE,false);
  configuration.registerOperationHandler("remove-custom-metric",ModClusterRemoveCustomMetric.INSTANCE,ModClusterRemoveCustomMetric.INSTANCE,false);
  subsystem.registerXMLElementWriter(new ModClusterSubsystemXMLWriter());
}
