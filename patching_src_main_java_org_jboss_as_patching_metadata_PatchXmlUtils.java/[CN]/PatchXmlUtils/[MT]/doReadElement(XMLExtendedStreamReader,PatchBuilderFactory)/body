{
  final PatchBuilder patch=factory.getBuilder();
  final PatchXml.Namespace namespace=PatchXml.Namespace.forUri(reader.getNamespaceURI());
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    final String value=reader.getAttributeValue(i);
    final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
    if (Attribute.ID == attribute) {
      patch.setPatchId(value);
    }
 else {
      throw unexpectedAttribute(reader,i);
    }
  }
  final Collection<ContentModification> modifications=patch.getModifications();
  while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
    final String localName=reader.getLocalName();
    final Element element=Element.forName(localName);
switch (element) {
case DESCRIPTION:
      patch.setDescription(reader.getElementText());
    break;
case UPGRADE:
  parseUpgrade(reader,patch);
break;
case NO_UPGRADE:
parseNoUpgrade(reader,patch);
break;
case IDENTITY:
parseIdentity(reader,patch);
break;
case ELEMENT:
parseElement(reader,patch);
break;
case MODULES:
parseModules(reader,modifications);
break;
case BUNDLES:
parseBundles(reader,modifications);
break;
case MISC_FILES:
parseMiscFiles(reader,modifications);
break;
default :
handleRootElement(localName,reader,patch);
}
}
}
