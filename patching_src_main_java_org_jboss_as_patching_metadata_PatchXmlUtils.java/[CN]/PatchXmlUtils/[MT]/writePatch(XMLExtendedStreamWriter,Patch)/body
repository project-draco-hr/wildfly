{
  writer.writeAttribute(Attribute.ID.name,patch.getPatchId());
  String description=patch.getDescription();
  if (description != null) {
    writer.writeStartElement(Element.DESCRIPTION.name);
    writer.writeCharacters(description);
    writer.writeEndElement();
  }
  final Identity identity=patch.getIdentity();
  final Patch.PatchType type=identity.getPatchType();
  if (type == Patch.PatchType.CUMULATIVE) {
    writer.writeStartElement(Element.UPGRADE.name);
  }
 else {
    writer.writeStartElement(Element.NO_UPGRADE.name);
  }
  writer.writeAttribute(Attribute.NAME.name,identity.getName());
  writer.writeAttribute(Attribute.VERSION.name,identity.getVersion());
  if (type == Patch.PatchType.CUMULATIVE) {
    final Identity.IdentityUpgrade upgrade=identity.forType(Patch.PatchType.CUMULATIVE,Identity.IdentityUpgrade.class);
    writer.writeAttribute(Attribute.TO_VERSION.name,upgrade.getResultingVersion());
  }
  if (!identity.getRequires().isEmpty()) {
    writer.writeStartElement(Element.REQUIRES.name);
    for (    String patchId : identity.getRequires()) {
      writer.writeStartElement(Element.PATCH.name);
      writer.writeAttribute(Attribute.ID.name,patchId);
      writer.writeEndElement();
    }
    writer.writeEndElement();
  }
  writer.writeEndElement();
  final List<PatchElement> elements=patch.getElements();
  for (  PatchElement element : elements) {
    writer.writeStartElement(Element.PATCH_ELEMENT.name);
    writer.writeAttribute(Attribute.ID.name,element.getId());
    if (element.getDescription() != null) {
      writer.writeStartElement(Element.DESCRIPTION.name);
      writer.writeCharacters(element.getDescription());
      writer.writeEndElement();
    }
    final PatchElementProvider provider=element.getProvider();
    if (provider == null) {
      throw new XMLStreamException("Provider is missing for patch element " + element.getId());
    }
    final Patch.PatchType elementPatchType=provider.getPatchType();
    if (elementPatchType == Patch.PatchType.CUMULATIVE) {
      writer.writeStartElement(Element.UPGRADE.name);
    }
 else {
      writer.writeStartElement(Element.NO_UPGRADE.name);
    }
    writer.writeAttribute(Attribute.NAME.name,provider.getName());
    if (provider.isAddOn()) {
      writer.writeAttribute(Attribute.ADD_ON.name,"true");
    }
    if (!provider.getRequires().isEmpty()) {
      writer.writeStartElement(Element.REQUIRES.name);
      for (      String elementId : provider.getRequires()) {
        writer.writeStartElement(Element.PATCH.name);
        writer.writeAttribute(Attribute.ID.name,elementId);
        writer.writeEndElement();
      }
      writer.writeEndElement();
    }
    writer.writeEndElement();
    writeContentModifications(writer,element.getModifications());
    writer.writeEndElement();
  }
  writeContentModifications(writer,patch.getModifications());
}
