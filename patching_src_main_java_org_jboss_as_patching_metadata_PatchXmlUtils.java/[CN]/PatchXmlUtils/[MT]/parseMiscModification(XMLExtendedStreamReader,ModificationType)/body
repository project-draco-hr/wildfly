{
  String path=null;
  byte[] hash=NO_CONTENT;
  boolean directory=false;
  boolean affectsRuntime=false;
  byte[] targetHash=NO_CONTENT;
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    final String value=reader.getAttributeValue(i);
    final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case DIRECTORY:
      directory=Boolean.parseBoolean(value);
    break;
case PATH:
  path=value;
break;
case HASH:
if (type == ModificationType.REMOVE) {
targetHash=hexStringToByteArray(value);
}
 else {
hash=hexStringToByteArray(value);
}
break;
case NEW_HASH:
if (type == ModificationType.REMOVE) {
hash=hexStringToByteArray(value);
}
 else {
targetHash=hexStringToByteArray(value);
}
break;
case IN_RUNTIME_USE:
affectsRuntime=Boolean.parseBoolean(value);
break;
default :
throw unexpectedAttribute(reader,i);
}
}
requireNoContent(reader);
final String[] s=path.split(PATH_DELIMITER);
final int length=s.length;
final String name=s[length - 1];
final String[] itemPath=Arrays.copyOf(s,length - 1);
final MiscContentItem item=new MiscContentItem(name,itemPath,hash,directory,affectsRuntime);
return new ContentModification(item,targetHash,type);
}
