{
  if (v instanceof String) {
    String substituredValue=getSubstitutionValue((String)v);
    if (clz.equals(String.class)) {
      v=substituredValue;
    }
 else     if (clz.equals(byte.class) || clz.equals(Byte.class)) {
      if (substituredValue != null && !substituredValue.trim().equals(""))       v=Byte.valueOf(substituredValue);
    }
 else     if (clz.equals(short.class) || clz.equals(Short.class)) {
      if (substituredValue != null && !substituredValue.trim().equals(""))       v=Short.valueOf(substituredValue);
    }
 else     if (clz.equals(int.class) || clz.equals(Integer.class)) {
      if (substituredValue != null && !substituredValue.trim().equals(""))       v=Integer.valueOf(substituredValue);
    }
 else     if (clz.equals(long.class) || clz.equals(Long.class)) {
      if (substituredValue != null && !substituredValue.trim().equals(""))       v=Long.valueOf(substituredValue);
    }
 else     if (clz.equals(float.class) || clz.equals(Float.class)) {
      if (substituredValue != null && !substituredValue.trim().equals(""))       v=Float.valueOf(substituredValue);
    }
 else     if (clz.equals(double.class) || clz.equals(Double.class)) {
      if (substituredValue != null && !substituredValue.trim().equals(""))       v=Double.valueOf(substituredValue);
    }
 else     if (clz.equals(boolean.class) || clz.equals(Boolean.class)) {
      if (substituredValue != null && !substituredValue.trim().equals(""))       v=Boolean.valueOf(substituredValue);
    }
 else     if (clz.equals(char.class) || clz.equals(Character.class)) {
      if (substituredValue != null && !substituredValue.trim().equals(""))       v=Character.valueOf(substituredValue.charAt(0));
    }
 else     if (clz.equals(InetAddress.class)) {
      v=InetAddress.getByName(substituredValue);
    }
 else     if (clz.equals(Class.class)) {
      v=Class.forName(substituredValue,true,cl);
    }
 else {
      try {
        Constructor<?> constructor=clz.getConstructor(String.class);
        v=constructor.newInstance(substituredValue);
      }
 catch (      Throwable t) {
        try {
          Method valueOf=clz.getMethod("valueOf",String.class);
          v=valueOf.invoke((Object)null,substituredValue);
        }
 catch (        Throwable inner) {
          throw new IllegalArgumentException("Unknown property resolution for property " + name);
        }
      }
    }
  }
  return v;
}
