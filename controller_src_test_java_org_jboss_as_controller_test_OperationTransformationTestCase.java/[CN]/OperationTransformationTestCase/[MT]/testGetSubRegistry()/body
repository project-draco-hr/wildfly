{
  final PathAddress profile=PathAddress.pathAddress(PathElement.pathElement(ModelDescriptionConstants.PROFILE));
  final PathAddress address=PathAddress.pathAddress(PathElement.pathElement(ModelDescriptionConstants.SUBSYSTEM,"test"));
  final OperationTransformer transformer=new AbstractOperationTransformer(){
    @Override protected ModelNode transform(    TransformationContext context,    PathAddress address,    ModelNode operation){
      return operation;
    }
  }
;
  final TransformerRegistry transformers=TransformerRegistry.Factory.create(null);
  final TransformersSubRegistration subsystem=transformers.registerSubsystemTransformers("test",ModelVersion.create(1),ResourceTransformer.DEFAULT);
  subsystem.registerOperationTransformer("test",transformer);
  final OperationTransformerRegistry server=transformers.resolveServer(ModelVersion.create(1,2,3),subsystems);
  Assert.assertNotNull(server);
  Assert.assertEquals(transformer,server.resolveOperationTransformer(address,"test").getTransformer());
  final OperationTransformerRegistry host=transformers.resolveHost(ModelVersion.create(1,2,3),subsystems);
  Assert.assertNotNull(host);
  Assert.assertNotSame(transformer,host.resolveOperationTransformer(address,"test").getTransformer());
  Assert.assertEquals(transformer,host.resolveOperationTransformer(profile.append(address),"test").getTransformer());
}
