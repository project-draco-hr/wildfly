{
  try {
    final ServiceController<?> controller=serviceRegistry.getService(lookupName);
    if (controller != null) {
      final Object object=controller.getValue();
      if (dereference && object instanceof ManagedReferenceFactory) {
        if (WildFlySecurityManager.isChecking()) {
          return AccessController.doPrivileged(new PrivilegedAction<Object>(){
            @Override public Object run(){
              final ManagedReference managedReference=ManagedReferenceFactory.class.cast(object).getReference();
              return managedReference != null ? managedReference.getInstance() : null;
            }
          }
);
        }
 else {
          final ManagedReference managedReference=ManagedReferenceFactory.class.cast(object).getReference();
          return managedReference != null ? managedReference.getInstance() : null;
        }
      }
 else {
        return object;
      }
    }
 else {
      return null;
    }
  }
 catch (  IllegalStateException e) {
    NameNotFoundException n=new NameNotFoundException(name);
    n.initCause(e);
    throw n;
  }
catch (  Throwable t) {
    throw NamingLogger.ROOT_LOGGER.lookupError(t,name);
  }
}
