{
  OverrideDescriptionProvider provider=new OverrideDescriptionProvider(){
    @Override public Map<String,ModelNode> getAttributeOverrideDescriptions(    Locale locale){
      return Collections.emptyMap();
    }
    @Override public Map<String,ModelNode> getChildTypeOverrideDescriptions(    Locale locale){
      StandardResourceDescriptionResolver resolver=new JGroupsResourceDescriptionResolver();
      String description=resolver.getChildTypeDescription(ProtocolResourceDefinition.WILDCARD_PATH.getKey(),locale,resolver.getResourceBundle(locale));
      ModelNode result=new ModelNode();
      result.get(ModelDescriptionConstants.DESCRIPTION).set(description);
      return Collections.singletonMap(ProtocolResourceDefinition.WILDCARD_PATH.getKey(),result);
    }
  }
;
  Resource resource=context.readResourceForUpdate(PathAddress.EMPTY_ADDRESS);
  ManagementResourceRegistration registration=context.getResourceRegistrationForUpdate().registerOverrideModel(this.name,provider);
  Resource stackResource=context.readResourceFromRoot(this.stackAddress,false);
  for (  String name : stackResource.getChildrenNames(TransportResourceDefinition.WILDCARD_PATH.getKey())) {
    PathAddress transportAddress=this.stackAddress.append(TransportResourceDefinition.pathElement(name));
    ModelNode transport=context.readResourceFromRoot(transportAddress,false).getModel();
    ModuleIdentifier module=ModelNodes.asModuleIdentifier(MODULE.resolveModelAttribute(context,transport));
    Class<? extends Protocol> transportClass=findProtocolClass(context,name,module);
    registration.registerSubModel(this.createProtocolResourceDefinition(name,transportClass));
    resource.registerChild(ProtocolResourceDefinition.pathElement(name),PlaceholderResource.INSTANCE);
  }
  for (  String name : stackResource.getChildrenNames(ProtocolResourceDefinition.WILDCARD_PATH.getKey())) {
    Resource protocolResource=context.readResourceFromRoot(this.stackAddress.append(ProtocolResourceDefinition.pathElement(name)),false);
    ModuleIdentifier module=ModelNodes.asModuleIdentifier(MODULE.resolveModelAttribute(context,protocolResource.getModel()));
    Class<? extends Protocol> protocolClass=findProtocolClass(context,name,module);
    registration.registerSubModel(this.createProtocolResourceDefinition(name,protocolClass));
    resource.registerChild(ProtocolResourceDefinition.pathElement(name),PlaceholderResource.INSTANCE);
  }
  if (stackResource.hasChild(RelayResourceDefinition.PATH)) {
    registration.registerSubModel(this.createProtocolResourceDefinition(RelayConfiguration.PROTOCOL_NAME,RELAY2.class));
    resource.registerChild(ProtocolResourceDefinition.pathElement(RelayConfiguration.PROTOCOL_NAME),PlaceholderResource.INSTANCE);
  }
}
