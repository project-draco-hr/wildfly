{
  final DeploymentUnit deploymentUnit=phaseContext.getDeploymentUnit();
  final EEModuleDescription eeModuleDescription=deploymentUnit.getAttachment(Attachments.EE_MODULE_DESCRIPTION);
  final CompositeIndex index=deploymentUnit.getAttachment(org.jboss.as.server.deployment.Attachments.COMPOSITE_ANNOTATION_INDEX);
  final EEApplicationClasses applicationClasses=deploymentUnit.getAttachment(Attachments.EE_APPLICATION_CLASSES_DESCRIPTION);
  final Module module=deploymentUnit.getAttachment(org.jboss.as.server.deployment.Attachments.MODULE);
  final List<AnnotationInstance> resourceAnnotations=index.getAnnotations(RESOURCE_ANNOTATION_NAME);
  for (  AnnotationInstance annotation : resourceAnnotations) {
    final AnnotationTarget annotationTarget=annotation.target();
    final AnnotationValue nameValue=annotation.value("name");
    final String name=nameValue != null ? nameValue.asString() : null;
    final AnnotationValue typeValue=annotation.value("type");
    final String type=typeValue != null ? typeValue.asClass().name().toString() : null;
    if (annotationTarget instanceof FieldInfo) {
      final FieldInfo fieldInfo=(FieldInfo)annotationTarget;
      final ClassInfo classInfo=fieldInfo.declaringClass();
      EEModuleClassDescription classDescription=eeModuleDescription.addOrGetLocalClassDescription(classInfo.name().toString());
      processFieldResource(phaseContext,fieldInfo,name,type,classDescription,annotation,eeModuleDescription,module,applicationClasses);
    }
 else     if (annotationTarget instanceof MethodInfo) {
      final MethodInfo methodInfo=(MethodInfo)annotationTarget;
      ClassInfo classInfo=methodInfo.declaringClass();
      EEModuleClassDescription classDescription=eeModuleDescription.addOrGetLocalClassDescription(classInfo.name().toString());
      processMethodResource(phaseContext,methodInfo,name,type,classDescription,annotation,eeModuleDescription,module,applicationClasses);
    }
 else     if (annotationTarget instanceof ClassInfo) {
      final ClassInfo classInfo=(ClassInfo)annotationTarget;
      EEModuleClassDescription classDescription=eeModuleDescription.addOrGetLocalClassDescription(classInfo.name().toString());
      processClassResource(phaseContext,name,type,classDescription,annotation,eeModuleDescription,module,applicationClasses);
    }
  }
  final List<AnnotationInstance> resourcesAnnotations=index.getAnnotations(RESOURCES_ANNOTATION_NAME);
  for (  AnnotationInstance outerAnnotation : resourcesAnnotations) {
    final AnnotationTarget annotationTarget=outerAnnotation.target();
    if (annotationTarget instanceof ClassInfo) {
      final ClassInfo classInfo=(ClassInfo)annotationTarget;
      final AnnotationInstance[] values=outerAnnotation.value("value").asNestedArray();
      for (      AnnotationInstance annotation : values) {
        final AnnotationValue nameValue=annotation.value("name");
        final String name=nameValue != null ? nameValue.asString() : null;
        final AnnotationValue typeValue=annotation.value("type");
        final String type=typeValue != null ? typeValue.asClass().name().toString() : null;
        EEModuleClassDescription classDescription=eeModuleDescription.addOrGetLocalClassDescription(classInfo.name().toString());
        processClassResource(phaseContext,name,type,classDescription,annotation,eeModuleDescription,module,applicationClasses);
      }
    }
  }
}
