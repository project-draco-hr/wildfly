{
  final AnnotationValue lookupAnnotation=annotation.value("lookup");
  String lookup=lookupAnnotation == null ? null : lookupAnnotation.asString();
  if (isEmpty(lookup)) {
    final AnnotationValue mappedNameAnnotationValue=annotation.value("mappedName");
    lookup=mappedNameAnnotationValue == null ? null : mappedNameAnnotationValue.asString();
  }
  if (isEmpty(lookup) && FIXED_LOCATIONS.containsKey(injectionType)) {
    lookup=FIXED_LOCATIONS.get(injectionType);
  }
  InjectionSource valueSource=null;
  final boolean isEnvEntryType=this.isEnvEntryType(injectionType,module);
  final boolean isResourceRefType=RESOURCE_REF_ENTRIES.contains(injectionType);
  boolean createBinding=true;
  if (!isEmpty(lookup)) {
    valueSource=new LookupInjectionSource(lookup);
  }
 else   if (isEnvEntryType) {
  }
 else   if (!isResourceRefType) {
    final EEResourceReferenceProcessor resourceReferenceProcessor=EEResourceReferenceProcessorRegistry.getResourceReferenceProcessor(injectionType);
    if (resourceReferenceProcessor == null) {
      logger.warnf("Can't handle @Resource for ENC name: %s on class %s since it's missing a \"lookup\" (or \"mappedName\") value and isn't of any known type",localContextName,classDescription.getClassName());
      return;
    }
    valueSource=resourceReferenceProcessor.getResourceReferenceBindingSource(phaseContext,eeModuleDescription,classDescription,injectionType,localContextName,targetDescription);
    if (valueSource == null) {
      logger.warnf("Could not find binding source for @Resource, for ENC name: %s on class %s " + " of type: %s from resource reference processor: %s",localContextName,classDescription.getClassName(),injectionType,resourceReferenceProcessor);
      return;
    }
  }
 else {
    createBinding=false;
    valueSource=new LookupInjectionSource(localContextName);
  }
  final boolean createBindingFinal=createBinding;
  if (valueSource == null) {
    if (targetDescription != null) {
      LazyResourceInjection lazyResourceInjection=new LazyResourceInjection(targetDescription,localContextName,classDescription);
      applicationClasses.addLazyResourceInjection(lazyResourceInjection);
    }
  }
 else {
    final InjectionSource injectionSource=new LookupInjectionSource(localContextName);
    final ResourceInjectionConfiguration injectionConfiguration=targetDescription != null ? new ResourceInjectionConfiguration(targetDescription,injectionSource) : null;
    if (createBindingFinal) {
      final BindingConfiguration bindingConfiguration=new BindingConfiguration(localContextName,valueSource);
      classDescription.getBindingConfigurations().add(bindingConfiguration);
    }
    if (injectionConfiguration != null) {
      classDescription.getInjectionConfigurations().add(injectionConfiguration);
    }
  }
}
