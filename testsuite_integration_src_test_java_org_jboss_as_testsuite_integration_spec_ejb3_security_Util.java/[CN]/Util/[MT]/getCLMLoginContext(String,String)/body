{
  final String configurationName="Testing";
  CallbackHandler cbh=new CallbackHandler(){
    public void handle(    Callback[] callbacks) throws IOException, UnsupportedCallbackException {
      for (      Callback current : callbacks) {
        if (current instanceof NameCallback) {
          ((NameCallback)current).setName(username);
        }
 else         if (current instanceof PasswordCallback) {
          ((PasswordCallback)current).setPassword(password.toCharArray());
        }
 else {
          throw new UnsupportedCallbackException(current);
        }
      }
    }
  }
;
  Configuration config=new Configuration(){
    @Override public AppConfigurationEntry[] getAppConfigurationEntry(    String name){
      if (configurationName.equals(name) == false) {
        throw new IllegalArgumentException("Unexpected configuration name '" + name + "'");
      }
      Map<String,String> options=new HashMap<String,String>();
      options.put("multi-threaded","true");
      options.put("restore-login-identity","true");
      AppConfigurationEntry clmEntry=new AppConfigurationEntry(ClientLoginModule.class.getName(),AppConfigurationEntry.LoginModuleControlFlag.REQUIRED,options);
      return new AppConfigurationEntry[]{clmEntry};
    }
  }
;
  return new LoginContext(configurationName,new Subject(),cbh,config);
}
