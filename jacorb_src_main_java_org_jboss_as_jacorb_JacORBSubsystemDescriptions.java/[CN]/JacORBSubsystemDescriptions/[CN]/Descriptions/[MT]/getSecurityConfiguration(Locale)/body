{
  final ResourceBundle bundle=getResourceBundle(locale);
  final ModelNode node=new ModelNode();
  node.get(TYPE).set(ModelType.OBJECT);
  node.get(DESCRIPTION).set(bundle.getString("security.config"));
  node.get(REQUIRED).set(false);
  node.get(MIN_OCCURS).set(0);
  node.get(MAX_OCCURS).set(1);
  node.get(ATTRIBUTES,SECURITY_SUPPORT_SSL.getLocalName(),DESCRIPTION).set(bundle.getString("security.config.support-ssl"));
  node.get(ATTRIBUTES,SECURITY_SUPPORT_SSL.getLocalName(),TYPE).set(ModelType.STRING);
  node.get(ATTRIBUTES,SECURITY_SUPPORT_SSL.getLocalName(),REQUIRED).set(false);
  node.get(ATTRIBUTES,SECURITY_SUPPORT_SSL.getLocalName(),DEFAULT).set("off");
  node.get(ATTRIBUTES,SECURITY_ADD_COMPONENT_INTERCEPTOR.getLocalName(),DESCRIPTION).set(bundle.getString("security.config.add-component-via-interceptor"));
  node.get(ATTRIBUTES,SECURITY_ADD_COMPONENT_INTERCEPTOR.getLocalName(),TYPE).set(ModelType.STRING);
  node.get(ATTRIBUTES,SECURITY_ADD_COMPONENT_INTERCEPTOR.getLocalName(),REQUIRED).set(false);
  node.get(ATTRIBUTES,SECURITY_ADD_COMPONENT_INTERCEPTOR.getLocalName(),DEFAULT).set("on");
  node.get(ATTRIBUTES,SECURITY_CLIENT_SUPPORTS.getLocalName(),DESCRIPTION).set(bundle.getString("security.config.client-supports"));
  node.get(ATTRIBUTES,SECURITY_CLIENT_SUPPORTS.getLocalName(),TYPE).set(ModelType.INT);
  node.get(ATTRIBUTES,SECURITY_CLIENT_SUPPORTS.getLocalName(),REQUIRED).set(false);
  node.get(ATTRIBUTES,SECURITY_CLIENT_SUPPORTS.getLocalName(),DEFAULT).set(60);
  node.get(ATTRIBUTES,SECURITY_CLIENT_REQUIRES.getLocalName(),DESCRIPTION).set(bundle.getString("security.config.client-requires"));
  node.get(ATTRIBUTES,SECURITY_CLIENT_REQUIRES.getLocalName(),TYPE).set(ModelType.INT);
  node.get(ATTRIBUTES,SECURITY_CLIENT_REQUIRES.getLocalName(),REQUIRED).set(false);
  node.get(ATTRIBUTES,SECURITY_CLIENT_REQUIRES.getLocalName(),DEFAULT).set(0);
  node.get(ATTRIBUTES,SECURITY_SERVER_SUPPORTS.getLocalName(),DESCRIPTION).set(bundle.getString("security.config.server-supports"));
  node.get(ATTRIBUTES,SECURITY_SERVER_SUPPORTS.getLocalName(),TYPE).set(ModelType.INT);
  node.get(ATTRIBUTES,SECURITY_SERVER_SUPPORTS.getLocalName(),REQUIRED).set(false);
  node.get(ATTRIBUTES,SECURITY_SERVER_SUPPORTS.getLocalName(),DEFAULT).set(60);
  node.get(ATTRIBUTES,SECURITY_SERVER_REQUIRES.getLocalName(),DESCRIPTION).set(bundle.getString("security.config.server-requires"));
  node.get(ATTRIBUTES,SECURITY_SERVER_REQUIRES.getLocalName(),TYPE).set(ModelType.INT);
  node.get(ATTRIBUTES,SECURITY_SERVER_REQUIRES.getLocalName(),REQUIRED).set(false);
  node.get(ATTRIBUTES,SECURITY_SERVER_REQUIRES.getLocalName(),DEFAULT).set(0);
  node.get(ATTRIBUTES,SECURITY_USE_DOMAIN_SF.getLocalName(),DESCRIPTION).set(bundle.getString("security.config.use-domain-socket-factory"));
  node.get(ATTRIBUTES,SECURITY_USE_DOMAIN_SF.getLocalName(),TYPE).set(ModelType.STRING);
  node.get(ATTRIBUTES,SECURITY_USE_DOMAIN_SF.getLocalName(),REQUIRED).set(false);
  node.get(ATTRIBUTES,SECURITY_USE_DOMAIN_SF.getLocalName(),DEFAULT).set("off");
  node.get(ATTRIBUTES,SECURITY_USE_DOMAIN_SSF.getLocalName(),DESCRIPTION).set(bundle.getString("security.config.use-domain-server-socket-factory"));
  node.get(ATTRIBUTES,SECURITY_USE_DOMAIN_SSF.getLocalName(),TYPE).set(ModelType.STRING);
  node.get(ATTRIBUTES,SECURITY_USE_DOMAIN_SSF.getLocalName(),REQUIRED).set(false);
  node.get(ATTRIBUTES,SECURITY_USE_DOMAIN_SSF.getLocalName(),DEFAULT).set("off");
  return node;
}
