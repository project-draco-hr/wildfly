{
  final VirtualFile deploymentRoot=deploymentUnit.getAttachment(Attachments.DEPLOYMENT_ROOT).getRoot();
  final Module module=deploymentUnit.getAttachment(Attachments.MODULE);
  if (module == null) {
    throw new DeploymentUnitProcessingException(MESSAGES.failedToResolveModule(deploymentUnit));
  }
  final DeploymentClassIndex deploymentClassIndex=deploymentUnit.getAttachment(Attachments.CLASS_INDEX);
  final JBossWebMetaData metaData=warMetaData.getMergedJBossWebMetaData();
  final List<SetupAction> setupActions=deploymentUnit.getAttachmentList(org.jboss.as.ee.component.Attachments.WEB_SETUP_ACTIONS);
  ScisMetaData scisMetaData=deploymentUnit.getAttachment(ScisMetaData.ATTACHMENT_KEY);
  final Set<ServiceName> dependentComponents=new HashSet<>();
  final List<ServiceName> components=deploymentUnit.getAttachmentList(WebComponentDescription.WEB_COMPONENTS);
  final Set<ServiceName> failed=deploymentUnit.getAttachment(org.jboss.as.ee.component.Attachments.FAILED_COMPONENTS);
  for (  final ServiceName component : components) {
    if (!failed.contains(component)) {
      dependentComponents.add(component);
    }
  }
  ComponentRegistry componentRegistry=deploymentUnit.getAttachment(org.jboss.as.ee.component.Attachments.COMPONENT_REGISTRY);
  if (componentRegistry == null) {
    componentRegistry=new ComponentRegistry(null);
  }
  final WebInjectionContainer injectionContainer=new WebInjectionContainer(module.getClassLoader(),componentRegistry);
  DeploymentInfo deploymentInfo=createServletConfig(metaData,deploymentUnit,module,deploymentClassIndex,injectionContainer,componentRegistry,scisMetaData,deploymentRoot);
  final String pathName=pathNameOfDeployment(deploymentUnit,metaData);
  deploymentInfo.setContextPath(pathName);
  String metaDataSecurityDomain=metaData.getSecurityDomain();
  if (metaDataSecurityDomain == null) {
    metaDataSecurityDomain=getJBossAppSecurityDomain(deploymentUnit);
  }
  if (metaDataSecurityDomain != null) {
    metaDataSecurityDomain=metaDataSecurityDomain.trim();
  }
  String securityDomain=metaDataSecurityDomain == null ? SecurityConstants.DEFAULT_APPLICATION_POLICY : SecurityUtil.unprefixSecurityDomain(metaDataSecurityDomain);
  final ServiceName deploymentServiceName=UndertowService.deploymentServiceName(hostName,deploymentInfo.getContextPath());
  final ServiceName hostServiceName=UndertowService.virtualHostName(defaultServer,hostName);
  final UndertowDeploymentService service=new UndertowDeploymentService(deploymentInfo,injectionContainer,module,warMetaData.getMergedJBossWebMetaData());
  final ServiceBuilder<UndertowDeploymentService> builder=serviceTarget.addService(deploymentServiceName,service).addDependencies(dependentComponents).addDependency(UndertowService.SERVLET_CONTAINER.append(defaultContainer),ServletContainerService.class,service.getContainer()).addDependency(hostServiceName,Host.class,service.getHost()).addDependency(SecurityDomainService.SERVICE_NAME.append(securityDomain),SecurityDomainContext.class,service.getSecurityDomainContextValue()).addDependency(UndertowService.UNDERTOW,UndertowService.class,service.getUndertowService()).addDependencies(deploymentUnit.getAttachmentList(Attachments.WEB_DEPENDENCIES));
  deploymentUnit.addToAttachmentList(Attachments.DEPLOYMENT_COMPLETE_SERVICES,deploymentServiceName);
  for (  final SetupAction action : setupActions) {
    builder.addDependencies(action.dependencies());
    deploymentInfo.addThreadSetupAction(new ThreadSetupAction(){
      @Override public Handle setup(      final HttpServerExchange exchange){
        action.setup(Collections.<String,Object>emptyMap());
        return new Handle(){
          @Override public void tearDown(){
            action.teardown(Collections.<String,Object>emptyMap());
          }
        }
;
      }
    }
);
  }
  if (metaData.getDistributable() != null) {
    DistributedCacheManagerFactoryService factoryService=new DistributedCacheManagerFactoryService();
    DistributedCacheManagerFactory factory=factoryService.getValue();
    if (factory != null) {
      ServiceName factoryServiceName=deploymentServiceName.append("session");
      builder.addDependency(ServiceBuilder.DependencyType.OPTIONAL,factoryServiceName,DistributedCacheManagerFactory.class,service.getDistributedCacheManagerFactoryInjectedValue());
      ServiceBuilder<DistributedCacheManagerFactory> factoryBuilder=serviceTarget.addService(factoryServiceName,factoryService);
      boolean enabled=factory.addDeploymentDependencies(deploymentServiceName,deploymentUnit.getServiceRegistry(),serviceTarget,factoryBuilder,metaData);
      factoryBuilder.setInitialMode(enabled ? Mode.ON_DEMAND : Mode.NEVER).install();
    }
  }
  if (deploymentUnit.hasAttachment(Attachments.OSGI_MANIFEST)) {
    builder.setInitialMode(Mode.NEVER);
    UndertowDeploymentService.ContextActivatorImpl activator=new UndertowDeploymentService.ContextActivatorImpl(builder.install());
    deploymentUnit.putAttachment(ContextActivator.ATTACHMENT_KEY,activator);
  }
 else {
    builder.setInitialMode(Mode.ACTIVE);
    builder.install();
  }
  final ModelNode node=deploymentUnit.getDeploymentSubsystemModel(UndertowExtension.SUBSYSTEM_NAME);
  node.get(DeploymentDefinition.CONTEXT_ROOT.getName()).set("".equals(pathName) ? "/" : pathName);
  node.get(DeploymentDefinition.VIRTUAL_HOST.getName()).set(hostName);
  processManagement(deploymentUnit,metaData);
}
