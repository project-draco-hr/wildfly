{
  final ModelVersion version_1_1_0=ModelVersion.create(1,1,0);
  final TransformersSubRegistration transformers=subsystem.registerModelTransformers(version_1_1_0,new AbstractSubsystemTransformer(SUBSYSTEM_NAME){
    @Override public ModelNode transformModel(    final TransformationContext context,    final ModelNode model){
      ModelNode oldModel=model.clone();
      if (oldModel.hasDefined(HORNETQ_SERVER)) {
        for (        Property server : oldModel.get(HORNETQ_SERVER).asPropertyList()) {
          if (server.getValue().hasDefined(POOLED_CONNECTION_FACTORY)) {
            for (            Property pooledConnectionFactory : server.getValue().get(POOLED_CONNECTION_FACTORY).asPropertyList()) {
              oldModel.get(HORNETQ_SERVER,server.getName(),POOLED_CONNECTION_FACTORY,pooledConnectionFactory.getName()).remove(Pooled.INITIAL_CONNECT_ATTEMPTS.getName());
              oldModel.get(HORNETQ_SERVER,server.getName(),POOLED_CONNECTION_FACTORY,pooledConnectionFactory.getName()).remove(Pooled.INITIAL_MESSAGE_PACKET_SIZE.getName());
              oldModel.get(HORNETQ_SERVER,server.getName(),POOLED_CONNECTION_FACTORY,pooledConnectionFactory.getName()).remove(Pooled.USE_AUTO_RECOVERY.getName());
              oldModel.get(HORNETQ_SERVER,server.getName(),POOLED_CONNECTION_FACTORY,pooledConnectionFactory.getName()).remove(Common.COMPRESS_LARGE_MESSAGES.getName());
            }
          }
          if (server.getValue().hasDefined(CONNECTION_FACTORY)) {
            for (            Property connectionFactory : server.getValue().get(CONNECTION_FACTORY).asPropertyList()) {
              if (!connectionFactory.getValue().hasDefined(HA.getName())) {
                oldModel.get(HORNETQ_SERVER,server.getName(),CONNECTION_FACTORY,connectionFactory.getName()).get(HA.getName()).set(HA.getDefaultValue());
              }
              if (connectionFactory.getValue().hasDefined(FACTORY_TYPE.getName()) && (connectionFactory.getValue().get(FACTORY_TYPE.getName()).equals(FACTORY_TYPE.getDefaultValue()))) {
                oldModel.get(HORNETQ_SERVER,server.getName(),CONNECTION_FACTORY,connectionFactory.getName()).get(FACTORY_TYPE.getName()).set(new ModelNode());
              }
            }
          }
        }
      }
      return oldModel;
    }
  }
);
  TransformersSubRegistration server=transformers.registerSubResource(PathElement.pathElement(CommonAttributes.HORNETQ_SERVER));
  server.registerOperationTransformer(ADD,new OperationTransformer(){
    @Override public TransformedOperation transformOperation(    TransformationContext context,    PathAddress address,    ModelNode operation) throws OperationFailedException {
      if (!operation.hasDefined(ID_CACHE_SIZE.getName())) {
        operation.get(ID_CACHE_SIZE.getName()).set(ID_CACHE_SIZE.getDefaultValue());
      }
      return new TransformedOperation(operation,ORIGINAL_RESULT);
    }
  }
);
  RejectExpressionValuesTransformer rejectTransportParamExpressionTransformer=new RejectExpressionValuesTransformer(VALUE);
  final String[] transports={CommonAttributes.ACCEPTOR,CommonAttributes.REMOTE_ACCEPTOR,CommonAttributes.IN_VM_ACCEPTOR,CommonAttributes.CONNECTOR,CommonAttributes.REMOTE_CONNECTOR,CommonAttributes.IN_VM_CONNECTOR};
  for (  String transport : transports) {
    TransformersSubRegistration remoteConnector=server.registerSubResource(PathElement.pathElement(transport));
    TransformersSubRegistration transportParam=remoteConnector.registerSubResource(PathElement.pathElement(PARAM));
    transportParam.registerOperationTransformer(ADD,rejectTransportParamExpressionTransformer);
    transportParam.registerOperationTransformer(WRITE_ATTRIBUTE_OPERATION,rejectTransportParamExpressionTransformer.getWriteAttributeTransformer());
  }
  RejectExpressionValuesTransformer rejectExpressionTransformer=new RejectExpressionValuesTransformer(PATH);
  for (  final String path : MessagingPathHandlers.PATHS) {
    TransformersSubRegistration pathRegistration=server.registerSubResource(PathElement.pathElement(PATH,path),rejectExpressionTransformer,rejectExpressionTransformer);
    pathRegistration.registerOperationTransformer(ADD,rejectExpressionTransformer);
    pathRegistration.registerOperationTransformer(WRITE_ATTRIBUTE_OPERATION,rejectExpressionTransformer.getWriteAttributeTransformer());
  }
  TransformersSubRegistration pooledConnectionFactory=server.registerSubResource(PooledConnectionFactoryDefinition.PATH);
  pooledConnectionFactory.registerOperationTransformer(ADD,new OperationTransformer(){
    @Override public TransformedOperation transformOperation(    final TransformationContext context,    final PathAddress address,    final ModelNode operation) throws OperationFailedException {
      final ModelNode transformedOperation=operation.clone();
      transformedOperation.remove(Pooled.INITIAL_CONNECT_ATTEMPTS.getName());
      transformedOperation.remove(Pooled.INITIAL_MESSAGE_PACKET_SIZE.getName());
      transformedOperation.remove(Pooled.USE_AUTO_RECOVERY.getName());
      transformedOperation.remove(Common.COMPRESS_LARGE_MESSAGES.getName());
      return new TransformedOperation(transformedOperation,ORIGINAL_RESULT);
    }
  }
);
  pooledConnectionFactory.registerOperationTransformer(WRITE_ATTRIBUTE_OPERATION,new OperationTransformer(){
    @Override public TransformedOperation transformOperation(    final TransformationContext context,    final PathAddress address,    final ModelNode operation) throws OperationFailedException {
      OperationResultTransformer resultTransformer=ORIGINAL_RESULT;
      final List<String> found=new ArrayList<String>();
      String[] unsupportedAttributes={Pooled.INITIAL_CONNECT_ATTEMPTS.getName(),Pooled.INITIAL_MESSAGE_PACKET_SIZE.getName(),Pooled.USE_AUTO_RECOVERY.getName(),Common.COMPRESS_LARGE_MESSAGES.getName()};
      for (      String attrName : unsupportedAttributes) {
        if (operation.require(NAME).asString().equals(attrName)) {
          if (found.size() == 0) {
            resultTransformer=new OperationResultTransformer(){
              @Override public ModelNode transformResult(              ModelNode result){
                ModelNode transformed=result;
                if (!IGNORED.equals(result.get(OUTCOME).asString())) {
                  transformed=new ModelNode();
                  transformed.get(OUTCOME).set(FAILED);
                  transformed.get(FAILURE_DESCRIPTION).set(MessagingMessages.MESSAGES.unsupportedAttributeInVersion(found.toString(),version_1_1_0));
                }
                return transformed;
              }
            }
;
          }
          found.add(attrName);
        }
      }
      return new TransformedOperation(operation,resultTransformer);
    }
  }
);
}
