{
  final AttributeDefinition[] transformerdPooledCFAttributes={Pooled.INITIAL_CONNECT_ATTEMPTS,Pooled.INITIAL_MESSAGE_PACKET_SIZE,COMPRESS_LARGE_MESSAGES,USE_AUTO_RECOVERY,CALL_FAILOVER_TIMEOUT};
  final TransformersSubRegistration transformers=subsystem.registerModelTransformers(VERSION_1_1_0,new AbstractSubsystemTransformer(SUBSYSTEM_NAME){
    @Override public ModelNode transformModel(    final TransformationContext context,    final ModelNode model){
      ModelNode oldModel=model.clone();
      if (oldModel.hasDefined(HORNETQ_SERVER)) {
        for (        Property server : oldModel.get(HORNETQ_SERVER).asPropertyList()) {
          if (!oldModel.get(HORNETQ_SERVER,server.getName()).hasDefined(CLUSTERED.getName())) {
            oldModel.get(HORNETQ_SERVER,server.getName()).get(CLUSTERED.getName()).set(false);
          }
          oldModel.get(HORNETQ_SERVER,server.getName()).remove(CHECK_FOR_LIVE_SERVER.getName());
          oldModel.get(HORNETQ_SERVER,server.getName()).remove(BACKUP_GROUP_NAME.getName());
          oldModel.get(HORNETQ_SERVER,server.getName()).remove(REPLICATION_CLUSTERNAME.getName());
          if (server.getValue().hasDefined(CLUSTER_CONNECTION)) {
            for (            Property clusterConnection : server.getValue().get(CLUSTER_CONNECTION).asPropertyList()) {
              oldModel.get(HORNETQ_SERVER,server.getName(),CLUSTER_CONNECTION,clusterConnection.getName()).remove(CALL_FAILOVER_TIMEOUT.getName());
            }
          }
          if (server.getValue().hasDefined(BROADCAST_GROUP)) {
            for (            Property broadcastGroup : server.getValue().get(BROADCAST_GROUP).asPropertyList()) {
              oldModel.get(HORNETQ_SERVER,server.getName(),BROADCAST_GROUP,broadcastGroup.getName()).remove(JGROUPS_STACK.getName());
              oldModel.get(HORNETQ_SERVER,server.getName(),BROADCAST_GROUP,broadcastGroup.getName()).remove(JGROUPS_CHANNEL.getName());
            }
          }
          if (server.getValue().hasDefined(DISCOVERY_GROUP)) {
            for (            Property discoveryGroup : server.getValue().get(DISCOVERY_GROUP).asPropertyList()) {
              oldModel.get(HORNETQ_SERVER,server.getName(),DISCOVERY_GROUP,discoveryGroup.getName()).remove(JGROUPS_STACK.getName());
              oldModel.get(HORNETQ_SERVER,server.getName(),DISCOVERY_GROUP,discoveryGroup.getName()).remove(JGROUPS_CHANNEL.getName());
            }
          }
          if (server.getValue().hasDefined(POOLED_CONNECTION_FACTORY)) {
            for (            Property pooledConnectionFactory : server.getValue().get(POOLED_CONNECTION_FACTORY).asPropertyList()) {
              for (              AttributeDefinition attribute : transformerdPooledCFAttributes) {
                oldModel.get(HORNETQ_SERVER,server.getName(),POOLED_CONNECTION_FACTORY,pooledConnectionFactory.getName()).remove(attribute.getName());
              }
            }
          }
          if (server.getValue().hasDefined(CONNECTION_FACTORY)) {
            for (            Property connectionFactory : server.getValue().get(CONNECTION_FACTORY).asPropertyList()) {
              oldModel.get(HORNETQ_SERVER,server.getName(),CONNECTION_FACTORY,connectionFactory.getName()).remove(CALL_FAILOVER_TIMEOUT.getName());
              if (!connectionFactory.getValue().hasDefined(HA.getName())) {
                oldModel.get(HORNETQ_SERVER,server.getName(),CONNECTION_FACTORY,connectionFactory.getName()).get(HA.getName()).set(HA.getDefaultValue());
              }
              if (connectionFactory.getValue().hasDefined(FACTORY_TYPE.getName()) && (connectionFactory.getValue().get(FACTORY_TYPE.getName()).equals(FACTORY_TYPE.getDefaultValue()))) {
                oldModel.get(HORNETQ_SERVER,server.getName(),CONNECTION_FACTORY,connectionFactory.getName()).get(FACTORY_TYPE.getName()).set(new ModelNode());
              }
            }
          }
          if (server.getValue().hasDefined(CORE_ADDRESS)) {
            oldModel.get(HORNETQ_SERVER,server.getName()).remove(CORE_ADDRESS);
          }
          if (server.getValue().hasDefined(RUNTIME_QUEUE)) {
            oldModel.get(HORNETQ_SERVER,server.getName()).remove(RUNTIME_QUEUE);
          }
        }
      }
      return oldModel;
    }
  }
);
  RejectExpressionValuesTransformer rejectServerExpressionTransformer=new RejectExpressionValuesTransformer(ASYNC_CONNECTION_EXECUTION_ENABLED,PERSISTENCE_ENABLED,SECURITY_ENABLED,SECURITY_INVALIDATION_INTERVAL,WILD_CARD_ROUTING_ENABLED,MANAGEMENT_ADDRESS,MANAGEMENT_NOTIFICATION_ADDRESS,JMX_MANAGEMENT_ENABLED,JMX_DOMAIN,MESSAGE_COUNTER_ENABLED,MESSAGE_COUNTER_SAMPLE_PERIOD,MESSAGE_COUNTER_MAX_DAY_HISTORY,CONNECTION_TTL_OVERRIDE,TRANSACTION_TIMEOUT,TRANSACTION_TIMEOUT_SCAN_PERIOD,MESSAGE_EXPIRY_SCAN_PERIOD,MESSAGE_EXPIRY_THREAD_PRIORITY,ID_CACHE_SIZE,PERSIST_ID_CACHE,REMOTING_INTERCEPTORS,BACKUP,ALLOW_FAILBACK,FAILBACK_DELAY,FAILOVER_ON_SHUTDOWN,SHARED_STORE,PERSIST_DELIVERY_COUNT_BEFORE_DELIVERY,PAGE_MAX_CONCURRENT_IO,CREATE_BINDINGS_DIR,CREATE_JOURNAL_DIR,JOURNAL_TYPE,JOURNAL_BUFFER_TIMEOUT,JOURNAL_BUFFER_SIZE,JOURNAL_SYNC_TRANSACTIONAL,JOURNAL_SYNC_NON_TRANSACTIONAL,LOG_JOURNAL_WRITE_RATE,JOURNAL_FILE_SIZE,JOURNAL_MIN_FILES,JOURNAL_COMPACT_PERCENTAGE,JOURNAL_COMPACT_MIN_FILES,JOURNAL_MAX_IO,PERF_BLAST_PAGES,RUN_SYNC_SPEED_TEST,SERVER_DUMP_INTERVAL);
  TransformersSubRegistration server=transformers.registerSubResource(PathElement.pathElement(HORNETQ_SERVER));
  server.registerOperationTransformer(ADD,new OperationTransformers.MultipleOperationalTransformer(new OperationTransformers.InsertDefaultValuesOperationTransformer(ID_CACHE_SIZE,CLUSTERED),new OperationTransformers.RemoveAttributesOperationTransformer(CHECK_FOR_LIVE_SERVER,BACKUP_GROUP_NAME,REPLICATION_CLUSTERNAME),rejectServerExpressionTransformer));
  server.registerOperationTransformer(WRITE_ATTRIBUTE_OPERATION,rejectServerExpressionTransformer.getWriteAttributeTransformer());
  rejectExpressions(server,AddressSettingDefinition.PATH,DEAD_LETTER_ADDRESS,EXPIRY_ADDRESS,REDELIVERY_DELAY,MAX_DELIVERY_ATTEMPTS,MAX_SIZE_BYTES,PAGE_SIZE_BYTES,PAGE_MAX_CACHE_SIZE,ADDRESS_FULL_MESSAGE_POLICY,MESSAGE_COUNTER_HISTORY_DAY_LIMIT,LAST_VALUE_QUEUE,REDISTRIBUTION_DELAY,SEND_TO_DLA_ON_NO_ROUTE);
  rejectExpressions(server,BroadcastGroupDefinition.PATH,BROADCAST_PERIOD);
  rejectExpressions(server,DiscoveryGroupDefinition.PATH,INITIAL_WAIT_TIMEOUT,REFRESH_TIMEOUT);
  rejectExpressions(server,DivertDefinition.PATH,ROUTING_NAME,DivertDefinition.ADDRESS,FORWARDING_ADDRESS,FILTER,TRANSFORMER_CLASS_NAME,EXCLUSIVE);
  rejectExpressions(server,BridgeDefinition.PATH,QUEUE_NAME,USE_DUPLICATE_DETECTION,BridgeDefinition.RECONNECT_ATTEMPTS,BridgeDefinition.FORWARDING_ADDRESS,FILTER,TRANSFORMER_CLASS_NAME,HA,MIN_LARGE_MESSAGE_SIZE,CHECK_PERIOD,CONNECTION_TTL,RETRY_INTERVAL,RETRY_INTERVAL_MULTIPLIER,MAX_RETRY_INTERVAL,BRIDGE_CONFIRMATION_WINDOW_SIZE);
  rejectExpressions(server,QueueDefinition.PATH,QueueDefinition.ADDRESS,FILTER,DURABLE);
  final String[] transports={CommonAttributes.ACCEPTOR,CommonAttributes.REMOTE_ACCEPTOR,CommonAttributes.IN_VM_ACCEPTOR,CommonAttributes.CONNECTOR,CommonAttributes.REMOTE_CONNECTOR,CommonAttributes.IN_VM_CONNECTOR};
  for (  String path : transports) {
    TransformersSubRegistration transport=rejectExpressions(server,PathElement.pathElement(path),CommonAttributes.FACTORY_CLASS);
    rejectExpressions(transport,PathElement.pathElement(PARAM),VALUE);
  }
  for (  final String path : MessagingPathHandlers.PATHS.keySet()) {
    rejectExpressions(server,PathElement.pathElement(PATH,path),PATH);
  }
  RejectExpressionValuesTransformer rejectClusterConnectionExpressions=new RejectExpressionValuesTransformer(ClusterConnectionDefinition.ADDRESS,ALLOW_DIRECT_CONNECTIONS_ONLY,ClusterConnectionDefinition.CHECK_PERIOD,ClusterConnectionDefinition.CONNECTION_TTL,FORWARD_WHEN_NO_CONSUMERS,MAX_HOPS,ClusterConnectionDefinition.MAX_RETRY_INTERVAL,ClusterConnectionDefinition.RETRY_INTERVAL,ClusterConnectionDefinition.RETRY_INTERVAL_MULTIPLIER,ClusterConnectionDefinition.USE_DUPLICATE_DETECTION,CALL_TIMEOUT,CALL_FAILOVER_TIMEOUT);
  TransformersSubRegistration clusterConnection=server.registerSubResource(ClusterConnectionDefinition.PATH,rejectClusterConnectionExpressions,rejectClusterConnectionExpressions);
  clusterConnection.registerOperationTransformer(ADD,new OperationTransformers.MultipleOperationalTransformer(rejectClusterConnectionExpressions,new OperationTransformers.RemoveAttributesOperationTransformer(CALL_FAILOVER_TIMEOUT)));
  clusterConnection.registerOperationTransformer(WRITE_ATTRIBUTE_OPERATION,new OperationTransformers.MultipleOperationalTransformer(rejectClusterConnectionExpressions,new OperationTransformers.FailUnignoredAttributesOperationTransformer(CALL_FAILOVER_TIMEOUT)));
  rejectExpressions(server,ConnectorServiceDefinition.PATH,CommonAttributes.FACTORY_CLASS);
  RejectExpressionValuesTransformer rejectConnectionFactoryExpressions=new RejectExpressionValuesTransformer(Regular.FACTORY_TYPE,HA,MIN_LARGE_MESSAGE_SIZE,CALL_TIMEOUT,AUTO_GROUP,BLOCK_ON_ACKNOWLEDGE,BLOCK_ON_DURABLE_SEND,BLOCK_ON_NON_DURABLE_SEND,CACHE_LARGE_MESSAGE_CLIENT,CLIENT_FAILURE_CHECK_PERIOD,COMPRESS_LARGE_MESSAGES,CONFIRMATION_WINDOW_SIZE,CONNECTION_LOAD_BALANCING_CLASS_NAME,Common.CONNECTION_TTL,CONSUMER_MAX_RATE,CONSUMER_WINDOW_SIZE,FAILOVER_ON_INITIAL_CONNECTION,GROUP_ID,Common.MAX_RETRY_INTERVAL,Common.MIN_LARGE_MESSAGE_SIZE,PRE_ACKNOWLEDGE,PRODUCER_MAX_RATE,PRODUCER_WINDOW_SIZE,Common.RECONNECT_ATTEMPTS,Common.RETRY_INTERVAL,Common.RETRY_INTERVAL_MULTIPLIER,TRANSACTION_BATCH_SIZE,USE_GLOBAL_POOLS);
  TransformersSubRegistration connectionFactory=server.registerSubResource(ConnectionFactoryDefinition.PATH,rejectConnectionFactoryExpressions,rejectConnectionFactoryExpressions);
  connectionFactory.registerOperationTransformer(ADD,new OperationTransformers.MultipleOperationalTransformer(rejectConnectionFactoryExpressions,new OperationTransformers.RemoveAttributesOperationTransformer(CALL_FAILOVER_TIMEOUT)));
  connectionFactory.registerOperationTransformer(WRITE_ATTRIBUTE_OPERATION,new OperationTransformers.MultipleOperationalTransformer(rejectConnectionFactoryExpressions,new OperationTransformers.FailUnignoredAttributesOperationTransformer(CALL_FAILOVER_TIMEOUT)));
  RejectExpressionValuesTransformer rejectPooledConnectionFactoryExpressions=new RejectExpressionValuesTransformer(MIN_LARGE_MESSAGE_SIZE,CALL_TIMEOUT,AUTO_GROUP,BLOCK_ON_ACKNOWLEDGE,BLOCK_ON_DURABLE_SEND,BLOCK_ON_NON_DURABLE_SEND,CACHE_LARGE_MESSAGE_CLIENT,CLIENT_FAILURE_CHECK_PERIOD,COMPRESS_LARGE_MESSAGES,CONFIRMATION_WINDOW_SIZE,CONNECTION_LOAD_BALANCING_CLASS_NAME,Common.CONNECTION_TTL,CONSUMER_MAX_RATE,CONSUMER_WINDOW_SIZE,FAILOVER_ON_INITIAL_CONNECTION,GROUP_ID,Common.MAX_RETRY_INTERVAL,Common.MIN_LARGE_MESSAGE_SIZE,PRE_ACKNOWLEDGE,PRODUCER_MAX_RATE,PRODUCER_WINDOW_SIZE,Common.RETRY_INTERVAL,Common.RETRY_INTERVAL_MULTIPLIER,TRANSACTION_BATCH_SIZE,USE_GLOBAL_POOLS,Pooled.INITIAL_CONNECT_ATTEMPTS,INITIAL_MESSAGE_PACKET_SIZE,JNDI_PARAMS,Pooled.RECONNECT_ATTEMPTS,SETUP_ATTEMPTS,SETUP_INTERVAL,TRANSACTION,USE_AUTO_RECOVERY,USE_JNDI,USE_LOCAL_TX);
  TransformersSubRegistration pooledConnectionFactory=server.registerSubResource(PooledConnectionFactoryDefinition.PATH,rejectPooledConnectionFactoryExpressions,rejectPooledConnectionFactoryExpressions);
  pooledConnectionFactory.registerOperationTransformer(ADD,new OperationTransformers.MultipleOperationalTransformer(rejectConnectionFactoryExpressions,new OperationTransformers.RemoveAttributesOperationTransformer(transformerdPooledCFAttributes),new OperationTransformers.InsertDefaultValuesOperationTransformer(Pooled.RECONNECT_ATTEMPTS)));
  pooledConnectionFactory.registerOperationTransformer(WRITE_ATTRIBUTE_OPERATION,new OperationTransformers.MultipleOperationalTransformer(rejectPooledConnectionFactoryExpressions,new OperationTransformers.FailUnignoredAttributesOperationTransformer(transformerdPooledCFAttributes)));
  rejectExpressions(server,GroupingHandlerDefinition.PATH,TYPE,GROUPING_HANDLER_ADDRESS,GroupingHandlerDefinition.TIMEOUT);
  rejectExpressions(server,JMSQueueDefinition.PATH,SELECTOR,DURABLE);
}
