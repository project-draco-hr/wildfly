{
  final AttributeDefinition[] transformerdPooledCFAttributes={Pooled.INITIAL_CONNECT_ATTEMPTS,Pooled.INITIAL_MESSAGE_PACKET_SIZE,COMPRESS_LARGE_MESSAGES,USE_AUTO_RECOVERY,CALL_FAILOVER_TIMEOUT};
  final TransformersSubRegistration transformers=subsystem.registerModelTransformers(VERSION_1_1_0,new AbstractSubsystemTransformer(SUBSYSTEM_NAME){
    @Override public ModelNode transformModel(    final TransformationContext context,    final ModelNode model){
      ModelNode oldModel=model.clone();
      if (oldModel.hasDefined(HORNETQ_SERVER)) {
        for (        Property server : oldModel.get(HORNETQ_SERVER).asPropertyList()) {
          if (!oldModel.get(HORNETQ_SERVER,server.getName()).hasDefined(CLUSTERED.getName())) {
            oldModel.get(HORNETQ_SERVER,server.getName()).get(CLUSTERED.getName()).set(false);
          }
          oldModel.get(HORNETQ_SERVER,server.getName()).remove(CHECK_FOR_LIVE_SERVER.getName());
          oldModel.get(HORNETQ_SERVER,server.getName()).remove(BACKUP_GROUP_NAME.getName());
          oldModel.get(HORNETQ_SERVER,server.getName()).remove(REPLICATION_CLUSTERNAME.getName());
          if (server.getValue().hasDefined(CLUSTER_CONNECTION)) {
            for (            Property clusterConnection : server.getValue().get(CLUSTER_CONNECTION).asPropertyList()) {
              oldModel.get(HORNETQ_SERVER,server.getName(),CLUSTER_CONNECTION,clusterConnection.getName()).remove(CALL_FAILOVER_TIMEOUT.getName());
            }
          }
          if (server.getValue().hasDefined(BROADCAST_GROUP)) {
            for (            Property broadcastGroup : server.getValue().get(BROADCAST_GROUP).asPropertyList()) {
              oldModel.get(HORNETQ_SERVER,server.getName(),BROADCAST_GROUP,broadcastGroup.getName()).remove(JGROUPS_STACK.getName());
              oldModel.get(HORNETQ_SERVER,server.getName(),BROADCAST_GROUP,broadcastGroup.getName()).remove(JGROUPS_CHANNEL.getName());
            }
          }
          if (server.getValue().hasDefined(DISCOVERY_GROUP)) {
            for (            Property discoveryGroup : server.getValue().get(DISCOVERY_GROUP).asPropertyList()) {
              oldModel.get(HORNETQ_SERVER,server.getName(),DISCOVERY_GROUP,discoveryGroup.getName()).remove(JGROUPS_STACK.getName());
              oldModel.get(HORNETQ_SERVER,server.getName(),DISCOVERY_GROUP,discoveryGroup.getName()).remove(JGROUPS_CHANNEL.getName());
            }
          }
          if (server.getValue().hasDefined(POOLED_CONNECTION_FACTORY)) {
            for (            Property pooledConnectionFactory : server.getValue().get(POOLED_CONNECTION_FACTORY).asPropertyList()) {
              for (              AttributeDefinition attribute : transformerdPooledCFAttributes) {
                oldModel.get(HORNETQ_SERVER,server.getName(),POOLED_CONNECTION_FACTORY,pooledConnectionFactory.getName()).remove(attribute.getName());
              }
            }
          }
          if (server.getValue().hasDefined(CONNECTION_FACTORY)) {
            for (            Property connectionFactory : server.getValue().get(CONNECTION_FACTORY).asPropertyList()) {
              oldModel.get(HORNETQ_SERVER,server.getName(),CONNECTION_FACTORY,connectionFactory.getName()).remove(CALL_FAILOVER_TIMEOUT.getName());
              if (!connectionFactory.getValue().hasDefined(HA.getName())) {
                oldModel.get(HORNETQ_SERVER,server.getName(),CONNECTION_FACTORY,connectionFactory.getName()).get(HA.getName()).set(HA.getDefaultValue());
              }
              if (connectionFactory.getValue().hasDefined(FACTORY_TYPE.getName()) && (connectionFactory.getValue().get(FACTORY_TYPE.getName()).equals(FACTORY_TYPE.getDefaultValue()))) {
                oldModel.get(HORNETQ_SERVER,server.getName(),CONNECTION_FACTORY,connectionFactory.getName()).get(FACTORY_TYPE.getName()).set(new ModelNode());
              }
            }
          }
        }
      }
      return oldModel;
    }
  }
);
  TransformersSubRegistration server=transformers.registerSubResource(PathElement.pathElement(HORNETQ_SERVER));
  server.registerOperationTransformer(ADD,new OperationTransformers.MultipleOperationalTransformer(new OperationTransformers.InsertDefaultValuesOperationTransformer(ID_CACHE_SIZE,CLUSTERED),new OperationTransformers.RemoveAttributesOperationTransformer(CHECK_FOR_LIVE_SERVER,BACKUP_GROUP_NAME,REPLICATION_CLUSTERNAME)));
  RejectExpressionValuesTransformer rejectTransportParamExpressionTransformer=new RejectExpressionValuesTransformer(VALUE);
  final String[] transports={CommonAttributes.ACCEPTOR,CommonAttributes.REMOTE_ACCEPTOR,CommonAttributes.IN_VM_ACCEPTOR,CommonAttributes.CONNECTOR,CommonAttributes.REMOTE_CONNECTOR,CommonAttributes.IN_VM_CONNECTOR};
  for (  String transport : transports) {
    TransformersSubRegistration remoteConnector=server.registerSubResource(PathElement.pathElement(transport));
    TransformersSubRegistration transportParam=remoteConnector.registerSubResource(PathElement.pathElement(PARAM));
    transportParam.registerOperationTransformer(ADD,rejectTransportParamExpressionTransformer);
    transportParam.registerOperationTransformer(WRITE_ATTRIBUTE_OPERATION,rejectTransportParamExpressionTransformer.getWriteAttributeTransformer());
  }
  RejectExpressionValuesTransformer rejectExpressionTransformer=new RejectExpressionValuesTransformer(PATH);
  for (  final String path : MessagingPathHandlers.PATHS.keySet()) {
    TransformersSubRegistration pathRegistration=server.registerSubResource(PathElement.pathElement(PATH,path),rejectExpressionTransformer,rejectExpressionTransformer);
    pathRegistration.registerOperationTransformer(ADD,rejectExpressionTransformer);
    pathRegistration.registerOperationTransformer(WRITE_ATTRIBUTE_OPERATION,rejectExpressionTransformer.getWriteAttributeTransformer());
  }
  TransformersSubRegistration clusterConnection=server.registerSubResource(ClusterConnectionDefinition.PATH);
  clusterConnection.registerOperationTransformer(ADD,new OperationTransformers.RemoveAttributesOperationTransformer(CALL_FAILOVER_TIMEOUT));
  clusterConnection.registerOperationTransformer(WRITE_ATTRIBUTE_OPERATION,new OperationTransformers.FailUnignoredAttributesOperationTransformer(CALL_FAILOVER_TIMEOUT));
  TransformersSubRegistration connectionFactory=server.registerSubResource(ConnectionFactoryDefinition.PATH);
  connectionFactory.registerOperationTransformer(ADD,new OperationTransformers.RemoveAttributesOperationTransformer(CALL_FAILOVER_TIMEOUT));
  connectionFactory.registerOperationTransformer(WRITE_ATTRIBUTE_OPERATION,new OperationTransformers.FailUnignoredAttributesOperationTransformer(CALL_FAILOVER_TIMEOUT));
  TransformersSubRegistration pooledConnectionFactory=server.registerSubResource(PooledConnectionFactoryDefinition.PATH);
  pooledConnectionFactory.registerOperationTransformer(ADD,new OperationTransformer(){
    @Override public TransformedOperation transformOperation(    final TransformationContext context,    final PathAddress address,    final ModelNode operation) throws OperationFailedException {
      final ModelNode transformedOperation=operation.clone();
      for (      AttributeDefinition attribute : transformerdPooledCFAttributes) {
        transformedOperation.remove(attribute.getName());
      }
      if (!transformedOperation.hasDefined(RECONNECT_ATTEMPTS.getName())) {
        transformedOperation.get(RECONNECT_ATTEMPTS.getName()).set(RECONNECT_ATTEMPTS.getDefaultValue());
      }
      return new TransformedOperation(transformedOperation,ORIGINAL_RESULT);
    }
  }
);
  pooledConnectionFactory.registerOperationTransformer(WRITE_ATTRIBUTE_OPERATION,new OperationTransformers.FailUnignoredAttributesOperationTransformer(transformerdPooledCFAttributes));
  RejectExpressionValuesTransformer rejectTypeExpressionTransformer=new RejectExpressionValuesTransformer(TYPE);
  TransformersSubRegistration groupingHandler=server.registerSubResource(GroupingHandlerDefinition.PATH);
  groupingHandler.registerOperationTransformer(ADD,rejectTypeExpressionTransformer);
  groupingHandler.registerOperationTransformer(WRITE_ATTRIBUTE_OPERATION,rejectTypeExpressionTransformer.getWriteAttributeTransformer());
}
