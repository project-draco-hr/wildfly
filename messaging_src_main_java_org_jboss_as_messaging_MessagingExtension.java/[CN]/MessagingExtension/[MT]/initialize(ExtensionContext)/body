{
  final SubsystemRegistration subsystem=context.registerSubsystem(SUBSYSTEM_NAME);
  subsystem.registerXMLElementWriter(MessagingSubsystemParser.getInstance());
  final ResourceDescriptionResolver rootResolver=new StandardResourceDescriptionResolver(SUBSYSTEM_NAME,RESOURCE_NAME,getClass().getClassLoader());
  final ManagementResourceRegistration rootRegistration=subsystem.registerSubsystemModel(DescriptionProviderFactory.DefaultFactory.create(rootResolver));
  rootRegistration.registerOperationHandler(ADD,MessagingSubsystemAdd.INSTANCE,new DefaultResourceAddDescriptionProvider(rootRegistration,rootResolver));
  rootRegistration.registerOperationHandler(REMOVE,MessagingSubsystemRemove.INSTANCE,new DefaultResourceRemoveDescriptionProvider(rootResolver));
  rootRegistration.registerOperationHandler(DESCRIBE,MessagingSubsystemDescribeHandler.INSTANCE,MessagingSubsystemDescribeHandler.INSTANCE,false,OperationEntry.EntryType.PRIVATE);
  final ResourceDescriptionResolver serverResolver=new StandardResourceDescriptionResolver(CommonAttributes.HORNETQ_SERVER,RESOURCE_NAME,getClass().getClassLoader(),true,true);
  final DescriptionProviderFactory serverDescriptionFactory=new DescriptionProviderFactory(){
    @Override public DescriptionProvider getDescriptionProvider(    ImmutableManagementResourceRegistration resourceRegistration){
      return new DefaultResourceDescriptionProvider(resourceRegistration,serverResolver){
        @Override public ModelNode getModelDescription(        Locale locale){
          ModelNode result=super.getModelDescription(locale);
          String path=CommonAttributes.PATH.getName();
          result.get(CHILDREN,path,MIN_OCCURS).set(4);
          result.get(CHILDREN,path,MAX_OCCURS).set(4);
          return result;
        }
      }
;
    }
  }
;
  final ManagementResourceRegistration serverRegistration=rootRegistration.registerSubModel(HORNETQ_SERVER_PATH,serverDescriptionFactory);
  serverRegistration.registerOperationHandler(ADD,HornetQServerAdd.INSTANCE,new DefaultResourceAddDescriptionProvider(serverRegistration,serverResolver));
  serverRegistration.registerOperationHandler(REMOVE,HornetQServerRemove.INSTANCE,new DefaultResourceRemoveDescriptionProvider(serverResolver));
  HornetQServerControlWriteHandler.INSTANCE.registerAttributes(serverRegistration);
  HornetQServerControlHandler.INSTANCE.register(serverRegistration);
  JMSServerControlHandler.INSTANCE.register(serverRegistration);
  final ManagementResourceRegistration coreAddress=serverRegistration.registerSubModel(CORE_ADDRESS_PATH,MessagingSubsystemProviders.CORE_ADDRESS);
  AddressControlHandler.INSTANCE.register(coreAddress);
  final ManagementResourceRegistration addressSetting=serverRegistration.registerSubModel(ADDRESS_SETTING,MessagingSubsystemProviders.ADDRESS_SETTING);
  addressSetting.registerOperationHandler(ADD,AddressSettingAdd.INSTANCE,MessagingSubsystemProviders.ADDRESS_SETTING_ADD);
  addressSetting.registerOperationHandler(REMOVE,AddressSettingRemove.INSTANCE,MessagingSubsystemProviders.ADDRESS_SETTING_REMOVE);
  AddressSettingsWriteHandler.INSTANCE.registerAttributes(addressSetting);
  final ManagementResourceRegistration broadcastGroups=serverRegistration.registerSubModel(BROADCAST_GROUP_PATH,MessagingSubsystemProviders.BROADCAST_GROUP_RESOURCE);
  broadcastGroups.registerOperationHandler(ADD,BroadcastGroupAdd.INSTANCE,BroadcastGroupAdd.INSTANCE);
  broadcastGroups.registerOperationHandler(REMOVE,BroadcastGroupRemove.INSTANCE,BroadcastGroupRemove.INSTANCE);
  BroadcastGroupWriteAttributeHandler.INSTANCE.registerAttributes(broadcastGroups);
  BroadcastGroupControlHandler.INSTANCE.register(broadcastGroups);
  final ManagementResourceRegistration discoveryGroups=serverRegistration.registerSubModel(DISCOVERY_GROUP_PATH,MessagingSubsystemProviders.DISCOVERY_GROUP_RESOURCE);
  discoveryGroups.registerOperationHandler(ADD,DiscoveryGroupAdd.INSTANCE,DiscoveryGroupAdd.INSTANCE);
  discoveryGroups.registerOperationHandler(REMOVE,DiscoveryGroupRemove.INSTANCE,DiscoveryGroupRemove.INSTANCE);
  DiscoveryGroupWriteAttributeHandler.INSTANCE.registerAttributes(discoveryGroups);
  final ManagementResourceRegistration diverts=serverRegistration.registerSubModel(DIVERT_PATH,MessagingSubsystemProviders.DIVERT_RESOURCE);
  diverts.registerOperationHandler(ADD,DivertAdd.INSTANCE,DivertAdd.INSTANCE);
  diverts.registerOperationHandler(REMOVE,DivertRemove.INSTANCE,DivertRemove.INSTANCE);
  DivertConfigurationWriteHandler.INSTANCE.registerAttributes(diverts);
  final ManagementResourceRegistration queue=serverRegistration.registerSubModel(PathElement.pathElement(QUEUE),MessagingSubsystemProviders.QUEUE_RESOURCE);
  queue.registerOperationHandler(ADD,QueueAdd.INSTANCE,QueueAdd.INSTANCE,false);
  queue.registerOperationHandler(REMOVE,QueueRemove.INSTANCE,QueueRemove.INSTANCE,false);
  QueueConfigurationWriteHandler.INSTANCE.registerAttributes(queue);
  QueueReadAttributeHandler.INSTANCE.registerAttributes(queue);
  QueueControlHandler.INSTANCE.registerOperations(queue);
  final ManagementResourceRegistration acceptor=serverRegistration.registerSubModel(GENERIC_ACCEPTOR,MessagingSubsystemProviders.ACCEPTOR);
  acceptor.registerOperationHandler(ADD,TransportConfigOperationHandlers.GENERIC_ADD,MessagingSubsystemProviders.ACCEPTOR_ADD);
  acceptor.registerOperationHandler(REMOVE,TransportConfigOperationHandlers.REMOVE,MessagingSubsystemProviders.ACCEPTOR_REMOVE);
  TransportConfigOperationHandlers.GENERIC_ATTR.registerAttributes(acceptor);
  createParamRegistration(acceptor);
  AcceptorControlHandler.INSTANCE.register(acceptor);
  final ManagementResourceRegistration remoteAcceptor=serverRegistration.registerSubModel(REMOTE_ACCEPTOR,MessagingSubsystemProviders.REMOTE_ACCEPTOR);
  remoteAcceptor.registerOperationHandler(ADD,TransportConfigOperationHandlers.REMOTE_ADD,MessagingSubsystemProviders.REMOTE_ACCEPTOR_ADD);
  remoteAcceptor.registerOperationHandler(REMOVE,TransportConfigOperationHandlers.REMOVE,MessagingSubsystemProviders.ACCEPTOR_REMOVE);
  TransportConfigOperationHandlers.REMOTE_ATTR.registerAttributes(remoteAcceptor);
  createParamRegistration(remoteAcceptor);
  AcceptorControlHandler.INSTANCE.register(remoteAcceptor);
  final ManagementResourceRegistration inVMAcceptor=serverRegistration.registerSubModel(IN_VM_ACCEPTOR,MessagingSubsystemProviders.IN_VM_ACCEPTOR);
  inVMAcceptor.registerOperationHandler(ADD,TransportConfigOperationHandlers.IN_VM_ADD,MessagingSubsystemProviders.IN_VM_ACCEPTOR_ADD);
  inVMAcceptor.registerOperationHandler(REMOVE,TransportConfigOperationHandlers.REMOVE,MessagingSubsystemProviders.ACCEPTOR_REMOVE);
  TransportConfigOperationHandlers.IN_VM_ATTR.registerAttributes(inVMAcceptor);
  createParamRegistration(inVMAcceptor);
  AcceptorControlHandler.INSTANCE.register(inVMAcceptor);
  final ManagementResourceRegistration connector=serverRegistration.registerSubModel(GENERIC_CONNECTOR,MessagingSubsystemProviders.CONNECTOR);
  connector.registerOperationHandler(ADD,TransportConfigOperationHandlers.GENERIC_ADD,MessagingSubsystemProviders.CONNECTOR_ADD);
  connector.registerOperationHandler(REMOVE,TransportConfigOperationHandlers.REMOVE,MessagingSubsystemProviders.CONNECTOR_REMOVE);
  TransportConfigOperationHandlers.GENERIC_ATTR.registerAttributes(connector);
  createParamRegistration(connector);
  final ManagementResourceRegistration remoteConnector=serverRegistration.registerSubModel(REMOTE_CONNECTOR,MessagingSubsystemProviders.REMOTE_CONNECTOR);
  remoteConnector.registerOperationHandler(ADD,TransportConfigOperationHandlers.REMOTE_ADD,MessagingSubsystemProviders.REMOTE_CONNECTOR_ADD);
  remoteConnector.registerOperationHandler(REMOVE,TransportConfigOperationHandlers.REMOVE,MessagingSubsystemProviders.CONNECTOR_REMOVE);
  TransportConfigOperationHandlers.REMOTE_ATTR.registerAttributes(remoteConnector);
  createParamRegistration(remoteConnector);
  final ManagementResourceRegistration inVMConnector=serverRegistration.registerSubModel(IN_VM_CONNECTOR,MessagingSubsystemProviders.IN_VM_CONNECTOR);
  inVMConnector.registerOperationHandler(ADD,TransportConfigOperationHandlers.IN_VM_ADD,MessagingSubsystemProviders.IN_VM_CONNECTOR_ADD);
  inVMConnector.registerOperationHandler(REMOVE,TransportConfigOperationHandlers.REMOVE,MessagingSubsystemProviders.CONNECTOR_REMOVE);
  TransportConfigOperationHandlers.IN_VM_ATTR.registerAttributes(inVMConnector);
  createParamRegistration(inVMConnector);
  final ManagementResourceRegistration bridge=serverRegistration.registerSubModel(PathElement.pathElement(CommonAttributes.BRIDGE),MessagingSubsystemProviders.BRIDGE_RESOURCE);
  bridge.registerOperationHandler(ADD,BridgeAdd.INSTANCE,BridgeAdd.INSTANCE,false);
  bridge.registerOperationHandler(REMOVE,BridgeRemove.INSTANCE,BridgeRemove.INSTANCE,false);
  BridgeWriteAttributeHandler.INSTANCE.registerAttributes(bridge);
  BridgeControlHandler.INSTANCE.register(bridge);
  final ManagementResourceRegistration cluster=serverRegistration.registerSubModel(PathElement.pathElement(CommonAttributes.CLUSTER_CONNECTION),MessagingSubsystemProviders.CLUSTER_CONNECTION_RESOURCE);
  cluster.registerOperationHandler(ADD,ClusterConnectionAdd.INSTANCE,ClusterConnectionAdd.INSTANCE,false);
  cluster.registerOperationHandler(REMOVE,ClusterConnectionRemove.INSTANCE,ClusterConnectionRemove.INSTANCE,false);
  ClusterConnectionWriteAttributeHandler.INSTANCE.registerAttributes(cluster);
  ClusterConnectionControlHandler.INSTANCE.register(cluster);
  final ManagementResourceRegistration groupingHandler=serverRegistration.registerSubModel(GROUPING_HANDLER_PATH,MessagingSubsystemProviders.GROUPING_HANDLER_RESOURCE);
  groupingHandler.registerOperationHandler(ADD,GroupingHandlerAdd.INSTANCE,GroupingHandlerAdd.INSTANCE);
  groupingHandler.registerOperationHandler(REMOVE,GroupingHandlerRemove.INSTANCE,GroupingHandlerRemove.INSTANCE);
  GroupingHandlerWriteAttributeHandler.INSTANCE.registerAttributes(groupingHandler);
  final ManagementResourceRegistration connectorService=serverRegistration.registerSubModel(PathElement.pathElement(CommonAttributes.CONNECTOR_SERVICE),MessagingSubsystemProviders.CONNECTOR_SERVICE_RESOURCE);
  connectorService.registerOperationHandler(ADD,ConnectorServiceAdd.INSTANCE,ConnectorServiceAdd.INSTANCE,false);
  connectorService.registerOperationHandler(REMOVE,ConnectorServiceRemove.INSTANCE,ConnectorServiceRemove.INSTANCE,false);
  for (  AttributeDefinition attributeDefinition : CommonAttributes.CONNECTOR_SERVICE_ATTRIBUTES) {
    connectorService.registerReadWriteAttribute(attributeDefinition.getName(),null,ConnectorServiceWriteAttributeHandler.INSTANCE,AttributeAccess.Storage.CONFIGURATION);
  }
  final ManagementResourceRegistration connectorServiceParam=connectorService.registerSubModel(PathElement.pathElement(CommonAttributes.PARAM),MessagingSubsystemProviders.CONNECTOR_SERVICE_PARAM_RESOURCE);
  connectorServiceParam.registerOperationHandler(ADD,ConnectorServiceParamAdd.INSTANCE,ConnectorServiceParamAdd.INSTANCE,false);
  connectorServiceParam.registerOperationHandler(REMOVE,ConnectorServiceParamRemove.INSTANCE,ConnectorServiceParamRemove.INSTANCE,false);
  connectorServiceParam.registerReadWriteAttribute(CommonAttributes.VALUE.getName(),null,ConnectorServiceParamWriteAttributeHandler.INSTANCE,AttributeAccess.Storage.CONFIGURATION);
  for (  final String path : CommonAttributes.PATHS) {
    ManagementResourceRegistration bindings=serverRegistration.registerSubModel(PathElement.pathElement(PATH,path),new MessagingSubsystemProviders.PathProvider(path));
    MessagingPathHandlers.register(bindings);
  }
  final ManagementResourceRegistration cfs=serverRegistration.registerSubModel(CFS_PATH,MessagingSubsystemProviders.CF);
  cfs.registerOperationHandler(ADD,ConnectionFactoryAdd.INSTANCE,MessagingSubsystemProviders.CF_ADD,false);
  cfs.registerOperationHandler(REMOVE,ConnectionFactoryRemove.INSTANCE,MessagingSubsystemProviders.CF_REMOVE,false);
  ConnectionFactoryWriteAttributeHandler.INSTANCE.registerAttributes(cfs);
  ConnectionFactoryReadAttributeHandler.INSTANCE.registerAttributes(cfs);
  ConnectionFactoryAddJndiHandler.INSTANCE.registerOperation(cfs);
  final ManagementResourceRegistration resourceAdapters=serverRegistration.registerSubModel(RA_PATH,MessagingSubsystemProviders.RA);
  resourceAdapters.registerOperationHandler(ADD,PooledConnectionFactoryAdd.INSTANCE,MessagingSubsystemProviders.RA_ADD,false);
  resourceAdapters.registerOperationHandler(REMOVE,PooledConnectionFactoryRemove.INSTANCE,MessagingSubsystemProviders.RA_REMOVE);
  PooledConnectionFactoryWriteAttributeHandler.INSTANCE.registerAttributes(resourceAdapters);
  final ManagementResourceRegistration queues=serverRegistration.registerSubModel(JMS_QUEUE_PATH,MessagingSubsystemProviders.JMS_QUEUE_RESOURCE);
  queues.registerOperationHandler(ADD,JMSQueueAdd.INSTANCE,JMSQueueAdd.INSTANCE,false);
  queues.registerOperationHandler(REMOVE,JMSQueueRemove.INSTANCE,JMSQueueRemove.INSTANCE,false);
  JmsQueueConfigurationWriteHandler.INSTANCE.registerAttributes(queues);
  JmsQueueReadAttributeHandler.INSTANCE.registerAttributes(queues);
  JMSQueueAddJndiHandler.INSTANCE.registerOperation(queues);
  JMSQueueControlHandler.INSTANCE.registerOperations(queues);
  final ManagementResourceRegistration topics=serverRegistration.registerSubModel(TOPIC_PATH,MessagingSubsystemProviders.JMS_TOPIC_RESOURCE);
  topics.registerOperationHandler(ADD,JMSTopicAdd.INSTANCE,JMSTopicAdd.INSTANCE,false);
  topics.registerOperationHandler(REMOVE,JMSTopicRemove.INSTANCE,JMSTopicRemove.INSTANCE,false);
  JMSTopicConfigurationWriteHandler.INSTANCE.registerAttributes(topics);
  JMSTopicReadAttributeHandler.INSTANCE.registerAttributes(topics);
  JMSTopicControlHandler.INSTANCE.registerOperations(topics);
  JMSTopicAddJndiHandler.INSTANCE.registerOperation(topics);
  final ManagementResourceRegistration securitySettings=serverRegistration.registerSubModel(SECURITY_SETTING,MessagingSubsystemProviders.SECURITY_SETTING);
  securitySettings.registerOperationHandler(ADD,SecuritySettingAdd.INSTANCE,SecuritySettingAdd.INSTANCE);
  securitySettings.registerOperationHandler(REMOVE,SecuritySettingRemove.INSTANCE,SecuritySettingRemove.INSTANCE);
  final ManagementResourceRegistration securityRole=securitySettings.registerSubModel(SECURITY_ROLE,MessagingSubsystemProviders.SECURITY_ROLE);
  securityRole.registerOperationHandler(ADD,SecurityRoleAdd.INSTANCE,SecurityRoleAdd.INSTANCE);
  securityRole.registerOperationHandler(REMOVE,SecurityRoleRemove.INSTANCE,SecurityRoleRemove.INSTANCE);
  SecurityRoleAttributeHandler.INSTANCE.registerAttributes(securityRole);
}
