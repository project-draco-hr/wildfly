{
  final SubsystemRegistration subsystem=context.registerSubsystem(SUBSYSTEM_NAME);
  subsystem.registerXMLElementWriter(MessagingSubsystemParser.getInstance());
  final ManagementResourceRegistration rootRegistration=subsystem.registerSubsystemModel(MessagingSubsystemProviders.SUBSYSTEM);
  final Configuration configuration=new ConfigurationImpl();
  rootRegistration.registerOperationHandler(ADD,new MessagingSubsystemAdd(configuration),MessagingSubsystemProviders.SUBSYSTEM_ADD,false);
  rootRegistration.registerOperationHandler(DESCRIBE,MessagingSubsystemDescribeHandler.INSTANCE,MessagingSubsystemDescribeHandler.INSTANCE,false,OperationEntry.EntryType.PRIVATE);
  for (  AttributeDefinition attributeDefinition : CommonAttributes.SIMPLE_ROOT_RESOURCE_ATTRIBUTES) {
    rootRegistration.registerReadWriteAttribute(attributeDefinition.getName(),null,HornetQServerControlWriteHandler.INSTANCE,AttributeAccess.Storage.CONFIGURATION);
  }
  final ManagementResourceRegistration queue=rootRegistration.registerSubModel(PathElement.pathElement(QUEUE),MessagingSubsystemProviders.QUEUE_RESOURCE);
  final QueueAdd queueAdd=new QueueAdd(configuration);
  queue.registerOperationHandler(ADD,queueAdd,queueAdd,false);
  queue.registerOperationHandler(REMOVE,QueueRemove.INSTANCE,QueueRemove.INSTANCE,false);
  final ManagementResourceRegistration cfs=rootRegistration.registerSubModel(CFS_PATH,MessagingSubsystemProviders.CF);
  cfs.registerOperationHandler(ADD,ConnectionFactoryAdd.INSTANCE,MessagingSubsystemProviders.CF_ADD,false);
  cfs.registerOperationHandler(REMOVE,ConnectionFactoryRemove.INSTANCE,MessagingSubsystemProviders.CF_REMOVE,false);
  final ManagementResourceRegistration queues=rootRegistration.registerSubModel(JMS_QUEUE_PATH,MessagingSubsystemProviders.JMS_QUEUE_RESOURCE);
  queues.registerOperationHandler(ADD,JMSQueueAdd.INSTANCE,JMSQueueAdd.INSTANCE,false);
  queues.registerOperationHandler(REMOVE,JMSQueueRemove.INSTANCE,JMSQueueRemove.INSTANCE,false);
  final ManagementResourceRegistration topics=rootRegistration.registerSubModel(TOPIC_PATH,MessagingSubsystemProviders.JMS_TOPIC_RESOURCE);
  topics.registerOperationHandler(ADD,JMSTopicAdd.INSTANCE,JMSTopicAdd.INSTANCE,false);
  topics.registerOperationHandler(REMOVE,JMSTopicRemove.INSTANCE,JMSTopicRemove.INSTANCE,false);
  final ManagementResourceRegistration resourceAdapters=rootRegistration.registerSubModel(RA_PATH,MessagingSubsystemProviders.RA);
  resourceAdapters.registerOperationHandler(ADD,PooledConnectionFactoryAdd.INSTANCE,MessagingSubsystemProviders.RA_ADD,false);
  resourceAdapters.registerOperationHandler(REMOVE,PooledConnectionFactoryRemove.INSTANCE,MessagingSubsystemProviders.RA_REMOVE);
  final ManagementResourceRegistration diverts=rootRegistration.registerSubModel(DIVERT_PATH,MessagingSubsystemProviders.DIVERT_RESOURCE);
  final DivertAdd divertAdd=new DivertAdd(configuration);
  diverts.registerOperationHandler(ADD,divertAdd,divertAdd);
  diverts.registerOperationHandler(REMOVE,DivertRemove.INSTANCE,DivertRemove.INSTANCE);
}
