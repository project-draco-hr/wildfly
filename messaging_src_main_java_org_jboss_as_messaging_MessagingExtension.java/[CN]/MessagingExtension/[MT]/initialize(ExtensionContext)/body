{
  final SubsystemRegistration subsystem=context.registerSubsystem(SUBSYSTEM_NAME,1,2);
  subsystem.registerXMLElementWriter(Messaging12SubsystemParser.getInstance());
  boolean registerRuntimeOnly=context.isRuntimeOnlyRegistrationValid();
  final ManagementResourceRegistration rootRegistration=subsystem.registerSubsystemModel(MessagingSubsystemRootResourceDefinition.INSTANCE);
  rootRegistration.registerOperationHandler(DESCRIBE,MessagingSubsystemDescribeHandler.INSTANCE,MessagingSubsystemDescribeHandler.INSTANCE,false,OperationEntry.EntryType.PRIVATE);
  final ManagementResourceRegistration serverRegistration=rootRegistration.registerSubModel(new HornetQServerResourceDefinition(registerRuntimeOnly));
  if (registerRuntimeOnly) {
    final ManagementResourceRegistration coreAddress=serverRegistration.registerSubModel(CORE_ADDRESS_PATH,MessagingSubsystemProviders.CORE_ADDRESS);
    coreAddress.setRuntimeOnly(true);
    AddressControlHandler.INSTANCE.register(coreAddress);
  }
  final ManagementResourceRegistration addressSetting=serverRegistration.registerSubModel(ADDRESS_SETTING,MessagingSubsystemProviders.ADDRESS_SETTING);
  addressSetting.registerOperationHandler(ADD,AddressSettingAdd.INSTANCE,MessagingSubsystemProviders.ADDRESS_SETTING_ADD);
  addressSetting.registerOperationHandler(REMOVE,AddressSettingRemove.INSTANCE,MessagingSubsystemProviders.ADDRESS_SETTING_REMOVE);
  AddressSettingsWriteHandler.INSTANCE.registerAttributes(addressSetting,registerRuntimeOnly);
  final ManagementResourceRegistration broadcastGroups=serverRegistration.registerSubModel(BROADCAST_GROUP_PATH,MessagingSubsystemProviders.BROADCAST_GROUP_RESOURCE);
  broadcastGroups.registerOperationHandler(ADD,BroadcastGroupAdd.INSTANCE,BroadcastGroupAdd.INSTANCE);
  broadcastGroups.registerOperationHandler(REMOVE,BroadcastGroupRemove.INSTANCE,BroadcastGroupRemove.INSTANCE);
  BroadcastGroupWriteAttributeHandler.INSTANCE.registerAttributes(broadcastGroups,registerRuntimeOnly);
  if (registerRuntimeOnly) {
    BroadcastGroupControlHandler.INSTANCE.register(broadcastGroups);
  }
  final ManagementResourceRegistration discoveryGroups=serverRegistration.registerSubModel(DISCOVERY_GROUP_PATH,MessagingSubsystemProviders.DISCOVERY_GROUP_RESOURCE);
  discoveryGroups.registerOperationHandler(ADD,DiscoveryGroupAdd.INSTANCE,DiscoveryGroupAdd.INSTANCE);
  discoveryGroups.registerOperationHandler(REMOVE,DiscoveryGroupRemove.INSTANCE,DiscoveryGroupRemove.INSTANCE);
  DiscoveryGroupWriteAttributeHandler.INSTANCE.registerAttributes(discoveryGroups,registerRuntimeOnly);
  final ManagementResourceRegistration diverts=serverRegistration.registerSubModel(DIVERT_PATH,MessagingSubsystemProviders.DIVERT_RESOURCE);
  diverts.registerOperationHandler(ADD,DivertAdd.INSTANCE,DivertAdd.INSTANCE);
  diverts.registerOperationHandler(REMOVE,DivertRemove.INSTANCE,DivertRemove.INSTANCE);
  DivertConfigurationWriteHandler.INSTANCE.registerAttributes(diverts,registerRuntimeOnly);
  final ManagementResourceRegistration queue=serverRegistration.registerSubModel(PathElement.pathElement(QUEUE),MessagingSubsystemProviders.QUEUE_RESOURCE);
  queue.registerOperationHandler(ADD,QueueAdd.INSTANCE,QueueAdd.INSTANCE,false);
  queue.registerOperationHandler(REMOVE,QueueRemove.INSTANCE,QueueRemove.INSTANCE,false);
  QueueConfigurationWriteHandler.INSTANCE.registerAttributes(queue,registerRuntimeOnly);
  if (registerRuntimeOnly) {
    QueueReadAttributeHandler.INSTANCE.registerAttributes(queue);
    QueueControlHandler.INSTANCE.registerOperations(queue);
  }
  final ManagementResourceRegistration acceptor=serverRegistration.registerSubModel(GENERIC_ACCEPTOR,MessagingSubsystemProviders.ACCEPTOR);
  acceptor.registerOperationHandler(ADD,TransportConfigOperationHandlers.GENERIC_ADD,MessagingSubsystemProviders.ACCEPTOR_ADD);
  acceptor.registerOperationHandler(REMOVE,TransportConfigOperationHandlers.REMOVE,MessagingSubsystemProviders.ACCEPTOR_REMOVE);
  TransportConfigOperationHandlers.GENERIC_ATTR.registerAttributes(acceptor,registerRuntimeOnly);
  createParamRegistration(acceptor);
  if (registerRuntimeOnly) {
    AcceptorControlHandler.INSTANCE.register(acceptor);
  }
  final ManagementResourceRegistration remoteAcceptor=serverRegistration.registerSubModel(REMOTE_ACCEPTOR,MessagingSubsystemProviders.REMOTE_ACCEPTOR);
  remoteAcceptor.registerOperationHandler(ADD,TransportConfigOperationHandlers.REMOTE_ADD,MessagingSubsystemProviders.REMOTE_ACCEPTOR_ADD);
  remoteAcceptor.registerOperationHandler(REMOVE,TransportConfigOperationHandlers.REMOVE,MessagingSubsystemProviders.ACCEPTOR_REMOVE);
  TransportConfigOperationHandlers.REMOTE_ATTR.registerAttributes(remoteAcceptor,registerRuntimeOnly);
  createParamRegistration(remoteAcceptor);
  if (registerRuntimeOnly) {
    AcceptorControlHandler.INSTANCE.register(remoteAcceptor);
  }
  final ManagementResourceRegistration inVMAcceptor=serverRegistration.registerSubModel(IN_VM_ACCEPTOR,MessagingSubsystemProviders.IN_VM_ACCEPTOR);
  inVMAcceptor.registerOperationHandler(ADD,TransportConfigOperationHandlers.IN_VM_ADD,MessagingSubsystemProviders.IN_VM_ACCEPTOR_ADD);
  inVMAcceptor.registerOperationHandler(REMOVE,TransportConfigOperationHandlers.REMOVE,MessagingSubsystemProviders.ACCEPTOR_REMOVE);
  TransportConfigOperationHandlers.IN_VM_ATTR.registerAttributes(inVMAcceptor,registerRuntimeOnly);
  createParamRegistration(inVMAcceptor);
  if (registerRuntimeOnly) {
    AcceptorControlHandler.INSTANCE.register(inVMAcceptor);
  }
  final ManagementResourceRegistration connector=serverRegistration.registerSubModel(GENERIC_CONNECTOR,MessagingSubsystemProviders.CONNECTOR);
  connector.registerOperationHandler(ADD,TransportConfigOperationHandlers.GENERIC_ADD,MessagingSubsystemProviders.CONNECTOR_ADD);
  connector.registerOperationHandler(REMOVE,TransportConfigOperationHandlers.REMOVE,MessagingSubsystemProviders.CONNECTOR_REMOVE);
  TransportConfigOperationHandlers.GENERIC_ATTR.registerAttributes(connector,registerRuntimeOnly);
  createParamRegistration(connector);
  final ManagementResourceRegistration remoteConnector=serverRegistration.registerSubModel(REMOTE_CONNECTOR,MessagingSubsystemProviders.REMOTE_CONNECTOR);
  remoteConnector.registerOperationHandler(ADD,TransportConfigOperationHandlers.REMOTE_ADD,MessagingSubsystemProviders.REMOTE_CONNECTOR_ADD);
  remoteConnector.registerOperationHandler(REMOVE,TransportConfigOperationHandlers.REMOVE,MessagingSubsystemProviders.CONNECTOR_REMOVE);
  TransportConfigOperationHandlers.REMOTE_ATTR.registerAttributes(remoteConnector,registerRuntimeOnly);
  createParamRegistration(remoteConnector);
  final ManagementResourceRegistration inVMConnector=serverRegistration.registerSubModel(IN_VM_CONNECTOR,MessagingSubsystemProviders.IN_VM_CONNECTOR);
  inVMConnector.registerOperationHandler(ADD,TransportConfigOperationHandlers.IN_VM_ADD,MessagingSubsystemProviders.IN_VM_CONNECTOR_ADD);
  inVMConnector.registerOperationHandler(REMOVE,TransportConfigOperationHandlers.REMOVE,MessagingSubsystemProviders.CONNECTOR_REMOVE);
  TransportConfigOperationHandlers.IN_VM_ATTR.registerAttributes(inVMConnector,registerRuntimeOnly);
  createParamRegistration(inVMConnector);
  final ManagementResourceRegistration bridge=serverRegistration.registerSubModel(PathElement.pathElement(CommonAttributes.BRIDGE),MessagingSubsystemProviders.BRIDGE_RESOURCE);
  bridge.registerOperationHandler(ADD,BridgeAdd.INSTANCE,BridgeAdd.INSTANCE,false);
  bridge.registerOperationHandler(REMOVE,BridgeRemove.INSTANCE,BridgeRemove.INSTANCE,false);
  BridgeWriteAttributeHandler.INSTANCE.registerAttributes(bridge,registerRuntimeOnly);
  if (registerRuntimeOnly) {
    BridgeControlHandler.INSTANCE.register(bridge);
  }
  final ManagementResourceRegistration cluster=serverRegistration.registerSubModel(PathElement.pathElement(CommonAttributes.CLUSTER_CONNECTION),MessagingSubsystemProviders.CLUSTER_CONNECTION_RESOURCE);
  cluster.registerOperationHandler(ADD,ClusterConnectionAdd.INSTANCE,ClusterConnectionAdd.INSTANCE,false);
  cluster.registerOperationHandler(REMOVE,ClusterConnectionRemove.INSTANCE,ClusterConnectionRemove.INSTANCE,false);
  ClusterConnectionWriteAttributeHandler.INSTANCE.registerAttributes(cluster,registerRuntimeOnly);
  if (registerRuntimeOnly) {
    ClusterConnectionControlHandler.INSTANCE.register(cluster);
  }
  final ManagementResourceRegistration groupingHandler=serverRegistration.registerSubModel(GROUPING_HANDLER_PATH,MessagingSubsystemProviders.GROUPING_HANDLER_RESOURCE);
  groupingHandler.registerOperationHandler(ADD,GroupingHandlerAdd.INSTANCE,GroupingHandlerAdd.INSTANCE);
  groupingHandler.registerOperationHandler(REMOVE,GroupingHandlerRemove.INSTANCE,GroupingHandlerRemove.INSTANCE);
  GroupingHandlerWriteAttributeHandler.INSTANCE.registerAttributes(groupingHandler,registerRuntimeOnly);
  final ManagementResourceRegistration connectorService=serverRegistration.registerSubModel(PathElement.pathElement(CommonAttributes.CONNECTOR_SERVICE),MessagingSubsystemProviders.CONNECTOR_SERVICE_RESOURCE);
  connectorService.registerOperationHandler(ADD,ConnectorServiceAdd.INSTANCE,ConnectorServiceAdd.INSTANCE,false);
  connectorService.registerOperationHandler(REMOVE,ConnectorServiceRemove.INSTANCE,ConnectorServiceRemove.INSTANCE,false);
  ConnectorServiceWriteAttributeHandler.INSTANCE.registerAttributes(connectorService,registerRuntimeOnly);
  final ManagementResourceRegistration connectorServiceParam=connectorService.registerSubModel(PathElement.pathElement(CommonAttributes.PARAM),MessagingSubsystemProviders.CONNECTOR_SERVICE_PARAM_RESOURCE);
  connectorServiceParam.registerOperationHandler(ADD,ConnectorServiceParamAdd.INSTANCE,ConnectorServiceParamAdd.INSTANCE,false);
  connectorServiceParam.registerOperationHandler(REMOVE,ConnectorServiceParamRemove.INSTANCE,ConnectorServiceParamRemove.INSTANCE,false);
  connectorServiceParam.registerReadWriteAttribute(CommonAttributes.VALUE.getName(),null,ConnectorServiceParamWriteAttributeHandler.INSTANCE,AttributeAccess.Storage.CONFIGURATION);
  for (  final String path : CommonAttributes.PATHS) {
    ManagementResourceRegistration bindings=serverRegistration.registerSubModel(PathElement.pathElement(PATH,path),new MessagingSubsystemProviders.PathProvider(path));
    MessagingPathHandlers.register(bindings);
  }
  final ManagementResourceRegistration cfs=serverRegistration.registerSubModel(CFS_PATH,MessagingSubsystemProviders.CF);
  cfs.registerOperationHandler(ADD,ConnectionFactoryAdd.INSTANCE,MessagingSubsystemProviders.CF_ADD,false);
  cfs.registerOperationHandler(REMOVE,ConnectionFactoryRemove.INSTANCE,MessagingSubsystemProviders.CF_REMOVE,false);
  ConnectionFactoryWriteAttributeHandler.INSTANCE.registerAttributes(cfs);
  if (registerRuntimeOnly) {
    ConnectionFactoryReadAttributeHandler.INSTANCE.registerAttributes(cfs);
  }
  ConnectionFactoryAddJndiHandler.INSTANCE.registerOperation(cfs);
  final ManagementResourceRegistration resourceAdapters=serverRegistration.registerSubModel(RA_PATH,MessagingSubsystemProviders.RA);
  resourceAdapters.registerOperationHandler(ADD,PooledConnectionFactoryAdd.INSTANCE,MessagingSubsystemProviders.RA_ADD,false);
  resourceAdapters.registerOperationHandler(REMOVE,PooledConnectionFactoryRemove.INSTANCE,MessagingSubsystemProviders.RA_REMOVE);
  PooledConnectionFactoryWriteAttributeHandler.INSTANCE.registerAttributes(resourceAdapters,registerRuntimeOnly);
  final ManagementResourceRegistration queues=serverRegistration.registerSubModel(JMS_QUEUE_PATH,MessagingSubsystemProviders.JMS_QUEUE_RESOURCE);
  queues.registerOperationHandler(ADD,JMSQueueAdd.INSTANCE,JMSQueueAdd.INSTANCE,false);
  queues.registerOperationHandler(REMOVE,JMSQueueRemove.INSTANCE,JMSQueueRemove.INSTANCE,false);
  JMSQueueConfigurationWriteHandler.INSTANCE.registerAttributes(queues,registerRuntimeOnly);
  JMSQueueAddJndiHandler.INSTANCE.registerOperation(queues);
  if (registerRuntimeOnly) {
    JMSQueueReadAttributeHandler.INSTANCE.registerAttributes(queues);
    JMSQueueControlHandler.INSTANCE.registerOperations(queues);
  }
  final ManagementResourceRegistration topics=serverRegistration.registerSubModel(TOPIC_PATH,MessagingSubsystemProviders.JMS_TOPIC_RESOURCE);
  topics.registerOperationHandler(ADD,JMSTopicAdd.INSTANCE,JMSTopicAdd.INSTANCE,false);
  topics.registerOperationHandler(REMOVE,JMSTopicRemove.INSTANCE,JMSTopicRemove.INSTANCE,false);
  JMSTopicConfigurationWriteHandler.INSTANCE.registerAttributes(topics);
  JMSTopicAddJndiHandler.INSTANCE.registerOperation(topics);
  if (registerRuntimeOnly) {
    JMSTopicReadAttributeHandler.INSTANCE.registerAttributes(topics);
    JMSTopicControlHandler.INSTANCE.registerOperations(topics);
  }
  final ManagementResourceRegistration securitySettings=serverRegistration.registerSubModel(SECURITY_SETTING,MessagingSubsystemProviders.SECURITY_SETTING);
  securitySettings.registerOperationHandler(ADD,SecuritySettingAdd.INSTANCE,SecuritySettingAdd.INSTANCE);
  securitySettings.registerOperationHandler(REMOVE,SecuritySettingRemove.INSTANCE,SecuritySettingRemove.INSTANCE);
  final ManagementResourceRegistration securityRole=securitySettings.registerSubModel(SECURITY_ROLE,MessagingSubsystemProviders.SECURITY_ROLE);
  securityRole.registerOperationHandler(ADD,SecurityRoleAdd.INSTANCE,SecurityRoleAdd.INSTANCE);
  securityRole.registerOperationHandler(REMOVE,SecurityRoleRemove.INSTANCE,SecurityRoleRemove.INSTANCE);
  SecurityRoleAttributeHandler.INSTANCE.registerAttributes(securityRole,registerRuntimeOnly);
  if (context.isRuntimeOnlyRegistrationValid()) {
    ResourceDefinition deploymentsDef=new SimpleResourceDefinition(PathElement.pathElement(ModelDescriptionConstants.SUBSYSTEM,SUBSYSTEM_NAME),getResourceDescriptionResolver("deployed"));
    final ManagementResourceRegistration deploymentsRegistration=subsystem.registerDeploymentModel(deploymentsDef);
    final ManagementResourceRegistration serverModel=deploymentsRegistration.registerSubModel(new HornetQServerResourceDefinition(true));
    final ManagementResourceRegistration deploymentQueue=serverModel.registerSubModel(JMS_QUEUE_PATH,MessagingSubsystemProviders.JMS_QUEUE_RESOURCE);
    JMSQueueReadAttributeHandler.INSTANCE.registerAttributes(deploymentQueue);
    JMSQueueControlHandler.INSTANCE.registerOperations(deploymentQueue);
    JMSQueueConfigurationRuntimeHandler.INSTANCE.registerAttributes(deploymentQueue);
    final ManagementResourceRegistration deploymentTopics=serverModel.registerSubModel(TOPIC_PATH,MessagingSubsystemProviders.JMS_TOPIC_RESOURCE);
    JMSTopicReadAttributeHandler.INSTANCE.registerAttributes(deploymentTopics);
    JMSTopicControlHandler.INSTANCE.registerOperations(deploymentTopics);
    JMSTopicConfigurationRuntimeHandler.INSTANCE.registerAttributes(deploymentTopics);
  }
}
