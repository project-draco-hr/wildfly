{
  final SubsystemRegistration subsystem=context.registerSubsystem(SUBSYSTEM_NAME,MANAGEMENT_API_MAJOR_VERSION,MANAGEMENT_API_MINOR_VERSION,MANAGEMENT_API_MICRO_VERSION);
  subsystem.registerXMLElementWriter(Messaging13SubsystemParser.getInstance());
  boolean registerRuntimeOnly=context.isRuntimeOnlyRegistrationValid();
  final ManagementResourceRegistration rootRegistration=subsystem.registerSubsystemModel(MessagingSubsystemRootResourceDefinition.INSTANCE);
  rootRegistration.registerOperationHandler(DESCRIBE,GenericSubsystemDescribeHandler.INSTANCE,GenericSubsystemDescribeHandler.INSTANCE,false,OperationEntry.EntryType.PRIVATE);
  final ManagementResourceRegistration serverRegistration=rootRegistration.registerSubModel(new HornetQServerResourceDefinition(registerRuntimeOnly));
  if (registerRuntimeOnly) {
    final ManagementResourceRegistration coreAddress=serverRegistration.registerSubModel(new CoreAddressDefinition());
    coreAddress.setRuntimeOnly(true);
  }
  serverRegistration.registerSubModel(new AddressSettingDefinition(registerRuntimeOnly));
  serverRegistration.registerSubModel(new BroadcastGroupDefinition(registerRuntimeOnly));
  serverRegistration.registerSubModel(new DiscoveryGroupDefinition(registerRuntimeOnly));
  serverRegistration.registerSubModel(new DivertDefinition(registerRuntimeOnly));
  serverRegistration.registerSubModel(new QueueDefinition(registerRuntimeOnly));
  serverRegistration.registerSubModel(GenericTransportDefinition.createAcceptorDefinition(registerRuntimeOnly));
  serverRegistration.registerSubModel(RemoteTransportDefinition.createAcceptorDefinition(registerRuntimeOnly));
  serverRegistration.registerSubModel(InVMTransportDefinition.createAcceptorDefinition(registerRuntimeOnly));
  serverRegistration.registerSubModel(GenericTransportDefinition.createConnectorDefinition(registerRuntimeOnly));
  serverRegistration.registerSubModel(RemoteTransportDefinition.createConnectorDefinition(registerRuntimeOnly));
  serverRegistration.registerSubModel(InVMTransportDefinition.createConnectorDefinition(registerRuntimeOnly));
  serverRegistration.registerSubModel(new BridgeDefinition(registerRuntimeOnly));
  serverRegistration.registerSubModel(new ClusterConnectionDefinition(registerRuntimeOnly));
  serverRegistration.registerSubModel(new GroupingHandlerDefinition(registerRuntimeOnly));
  serverRegistration.registerSubModel(new ConnectorServiceDefinition(registerRuntimeOnly));
  for (  final String path : MessagingPathHandlers.PATHS) {
    ManagementResourceRegistration bindings=serverRegistration.registerSubModel(PathElement.pathElement(PATH,path),new MessagingSubsystemProviders.PathProvider(path));
    MessagingPathHandlers.register(bindings);
  }
  serverRegistration.registerSubModel(new ConnectionFactoryDefinition(registerRuntimeOnly));
  serverRegistration.registerSubModel(new PooledConnectionFactoryDefinition(registerRuntimeOnly));
  serverRegistration.registerSubModel(new JMSQueueDefinition(registerRuntimeOnly));
  serverRegistration.registerSubModel(new JMSTopicDefinition(registerRuntimeOnly));
  serverRegistration.registerSubModel(new SecuritySettingDefinition(registerRuntimeOnly));
  if (registerRuntimeOnly) {
    ResourceDefinition deploymentsDef=new SimpleResourceDefinition(SUBSYSTEM_PATH,getResourceDescriptionResolver("deployed"));
    final ManagementResourceRegistration deploymentsRegistration=subsystem.registerDeploymentModel(deploymentsDef);
    final ManagementResourceRegistration serverModel=deploymentsRegistration.registerSubModel(new HornetQServerResourceDefinition(true));
    serverModel.registerSubModel(JMSQueueDefinition.newDeployedJMSQueueDefinition());
    serverModel.registerSubModel(JMSTopicDefinition.newDeployedJMSTopicDefinition());
  }
  rootRegistration.registerSubModel(new JMSBridgeDefinition());
  registerTransformers_1_1_0(subsystem);
}
