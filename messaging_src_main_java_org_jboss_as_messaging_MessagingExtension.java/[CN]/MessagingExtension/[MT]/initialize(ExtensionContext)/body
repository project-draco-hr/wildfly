{
  final SubsystemRegistration subsystem=context.registerSubsystem(SUBSYSTEM_NAME,MANAGEMENT_API_MAJOR_VERSION,MANAGEMENT_API_MINOR_VERSION,MANAGEMENT_API_MICRO_VERSION);
  subsystem.registerXMLElementWriter(MessagingXMLWriter.INSTANCE);
  boolean registerRuntimeOnly=context.isRuntimeOnlyRegistrationValid();
  final ManagementResourceRegistration rootRegistration=subsystem.registerSubsystemModel(MessagingSubsystemRootResourceDefinition.INSTANCE);
  rootRegistration.registerOperationHandler(GenericSubsystemDescribeHandler.DEFINITION,GenericSubsystemDescribeHandler.INSTANCE);
  final ManagementResourceRegistration serverRegistration=rootRegistration.registerSubModel(new HornetQServerResourceDefinition(registerRuntimeOnly));
  if (registerRuntimeOnly) {
    final ManagementResourceRegistration coreAddress=serverRegistration.registerSubModel(new CoreAddressDefinition());
    coreAddress.setRuntimeOnly(true);
  }
  serverRegistration.registerSubModel(new AddressSettingDefinition(registerRuntimeOnly));
  serverRegistration.registerSubModel(new BroadcastGroupDefinition(registerRuntimeOnly));
  serverRegistration.registerSubModel(new DiscoveryGroupDefinition(registerRuntimeOnly));
  serverRegistration.registerSubModel(new DivertDefinition(registerRuntimeOnly));
  serverRegistration.registerSubModel(QueueDefinition.newQueueDefinition(registerRuntimeOnly));
  if (registerRuntimeOnly) {
    final ManagementResourceRegistration runtimeQueue=serverRegistration.registerSubModel(QueueDefinition.newRuntimeQueueDefinition(registerRuntimeOnly));
    runtimeQueue.setRuntimeOnly(true);
  }
  serverRegistration.registerSubModel(new HTTPAcceptorDefinition(registerRuntimeOnly));
  serverRegistration.registerSubModel(GenericTransportDefinition.createAcceptorDefinition(registerRuntimeOnly));
  serverRegistration.registerSubModel(RemoteTransportDefinition.createAcceptorDefinition(registerRuntimeOnly));
  serverRegistration.registerSubModel(InVMTransportDefinition.createAcceptorDefinition(registerRuntimeOnly));
  serverRegistration.registerSubModel(new HTTPConnectorDefinition(registerRuntimeOnly));
  serverRegistration.registerSubModel(GenericTransportDefinition.createConnectorDefinition(registerRuntimeOnly));
  serverRegistration.registerSubModel(RemoteTransportDefinition.createConnectorDefinition(registerRuntimeOnly));
  serverRegistration.registerSubModel(InVMTransportDefinition.createConnectorDefinition(registerRuntimeOnly));
  serverRegistration.registerSubModel(new BridgeDefinition(registerRuntimeOnly));
  serverRegistration.registerSubModel(new ClusterConnectionDefinition(registerRuntimeOnly));
  serverRegistration.registerSubModel(new GroupingHandlerDefinition(registerRuntimeOnly));
  serverRegistration.registerSubModel(new ConnectorServiceDefinition(registerRuntimeOnly));
  for (  final String path : PathDefinition.PATHS.keySet()) {
    ManagementResourceRegistration binding=serverRegistration.registerSubModel(new PathDefinition(pathElement(ModelDescriptionConstants.PATH,path)));
    if (context.getProcessType().isServer()) {
      final ResolvePathHandler resolvePathHandler=ResolvePathHandler.Builder.of(context.getPathManager()).setPathAttribute(PathDefinition.PATHS.get(path)).setRelativeToAttribute(PathDefinition.RELATIVE_TO).build();
      binding.registerOperationHandler(resolvePathHandler.getOperationDefinition(),resolvePathHandler);
    }
  }
  serverRegistration.registerSubModel(new ConnectionFactoryDefinition(registerRuntimeOnly));
  serverRegistration.registerSubModel(new PooledConnectionFactoryDefinition(registerRuntimeOnly,false));
  serverRegistration.registerSubModel(new JMSQueueDefinition(registerRuntimeOnly));
  serverRegistration.registerSubModel(new JMSTopicDefinition(registerRuntimeOnly));
  serverRegistration.registerSubModel(new SecuritySettingDefinition(registerRuntimeOnly));
  if (registerRuntimeOnly) {
    ResourceDefinition deploymentsDef=new SimpleResourceDefinition(SUBSYSTEM_PATH,getResourceDescriptionResolver("deployed"));
    final ManagementResourceRegistration deploymentsRegistration=subsystem.registerDeploymentModel(deploymentsDef);
    final ManagementResourceRegistration serverModel=deploymentsRegistration.registerSubModel(new HornetQServerResourceDefinition(true));
    serverModel.registerSubModel(JMSQueueDefinition.newDeployedJMSQueueDefinition());
    serverModel.registerSubModel(JMSTopicDefinition.newDeployedJMSTopicDefinition());
    serverModel.registerSubModel(new PooledConnectionFactoryDefinition(true,true));
  }
  rootRegistration.registerSubModel(new JMSBridgeDefinition());
  if (context.isRegisterTransformers()) {
    MessagingTransformers.registerTransformers(subsystem);
  }
}
