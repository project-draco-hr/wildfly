{
  final SubsystemRegistration subsystem=context.registerSubsystem(SUBSYSTEM_NAME);
  subsystem.registerXMLElementWriter(MessagingSubsystemParser.getInstance());
  final ManagementResourceRegistration rootRegistration=subsystem.registerSubsystemModel(MessagingSubsystemProviders.SUBSYSTEM);
  rootRegistration.registerOperationHandler(ADD,MessagingSubsystemAdd.INSTANCE,MessagingSubsystemAdd.INSTANCE,false);
  rootRegistration.registerOperationHandler(DESCRIBE,MessagingSubsystemDescribeHandler.INSTANCE,MessagingSubsystemDescribeHandler.INSTANCE,false,OperationEntry.EntryType.PRIVATE);
  for (  AttributeDefinition attributeDefinition : CommonAttributes.SIMPLE_ROOT_RESOURCE_ATTRIBUTES) {
    rootRegistration.registerReadWriteAttribute(attributeDefinition.getName(),null,HornetQServerControlWriteHandler.INSTANCE,AttributeAccess.Storage.CONFIGURATION);
  }
  final ManagementResourceRegistration address=rootRegistration.registerSubModel(ADDRESS_SETTING,MessagingSubsystemProviders.ADDRESS_SETTING);
  address.registerOperationHandler(ADD,AddressSettingAdd.INSTANCE,MessagingSubsystemProviders.ADDRESS_SETTING_ADD);
  address.registerOperationHandler(REMOVE,AddressSettingRemove.INSTANCE,MessagingSubsystemProviders.ADDRESS_SETTING_REMOVE);
  for (  final AttributeDefinition definition : AddressSettingAdd.ATTRIBUTES) {
    address.registerReadWriteAttribute(definition.getName(),null,AddressSettingsWriteHandler.INSTANCE,AttributeAccess.Storage.CONFIGURATION);
  }
  final ManagementResourceRegistration broadcastGroups=rootRegistration.registerSubModel(BROADCAST_GROUP_PATH,MessagingSubsystemProviders.BROADCAST_GROUP_RESOURCE);
  broadcastGroups.registerOperationHandler(ADD,BroadcastGroupAdd.INSTANCE,BroadcastGroupAdd.INSTANCE);
  broadcastGroups.registerOperationHandler(REMOVE,BroadcastGroupRemove.INSTANCE,BroadcastGroupRemove.INSTANCE);
  for (  AttributeDefinition attributeDefinition : CommonAttributes.BROADCAST_GROUP_ATTRIBUTES) {
    broadcastGroups.registerReadWriteAttribute(attributeDefinition.getName(),null,BroadcastGroupWriteAttributeHandler.INSTANCE,AttributeAccess.Storage.CONFIGURATION);
  }
  final ManagementResourceRegistration discoveryGroups=rootRegistration.registerSubModel(DISCOVERY_GROUP_PATH,MessagingSubsystemProviders.DISCOVERY_GROUP_RESOURCE);
  discoveryGroups.registerOperationHandler(ADD,DiscoveryGroupAdd.INSTANCE,DiscoveryGroupAdd.INSTANCE);
  discoveryGroups.registerOperationHandler(REMOVE,DiscoveryGroupRemove.INSTANCE,DiscoveryGroupRemove.INSTANCE);
  for (  AttributeDefinition attributeDefinition : CommonAttributes.DISCOVERY_GROUP_ATTRIBUTES) {
    discoveryGroups.registerReadWriteAttribute(attributeDefinition.getName(),null,DiscoveryGroupWriteAttributeHandler.INSTANCE,AttributeAccess.Storage.CONFIGURATION);
  }
  final ManagementResourceRegistration diverts=rootRegistration.registerSubModel(DIVERT_PATH,MessagingSubsystemProviders.DIVERT_RESOURCE);
  diverts.registerOperationHandler(ADD,DivertAdd.INSTANCE,DivertAdd.INSTANCE);
  diverts.registerOperationHandler(REMOVE,DivertRemove.INSTANCE,DivertRemove.INSTANCE);
  for (  AttributeDefinition attributeDefinition : CommonAttributes.DIVERT_ATTRIBUTES) {
    diverts.registerReadWriteAttribute(attributeDefinition.getName(),null,DivertConfigurationWriteHandler.INSTANCE,AttributeAccess.Storage.CONFIGURATION);
  }
  final ManagementResourceRegistration queue=rootRegistration.registerSubModel(PathElement.pathElement(QUEUE),MessagingSubsystemProviders.QUEUE_RESOURCE);
  queue.registerOperationHandler(ADD,QueueAdd.INSTANCE,QueueAdd.INSTANCE,false);
  queue.registerOperationHandler(REMOVE,QueueRemove.INSTANCE,QueueRemove.INSTANCE,false);
  for (  AttributeDefinition attributeDefinition : CommonAttributes.CORE_QUEUE_ATTRIBUTES) {
    queue.registerReadWriteAttribute(attributeDefinition.getName(),null,QueueConfigurationWriteHandler.INSTANCE,AttributeAccess.Storage.CONFIGURATION);
  }
  final ManagementResourceRegistration acceptor=rootRegistration.registerSubModel(GENERIC_ACCEPTOR,MessagingSubsystemProviders.ACCEPTOR);
  acceptor.registerOperationHandler(ADD,TransportConfigOperationHandlers.GENERIC_ADD,MessagingSubsystemProviders.ACCEPTOR_ADD);
  acceptor.registerOperationHandler(REMOVE,TransportConfigOperationHandlers.REMOVE,MessagingSubsystemProviders.ACCEPTOR_REMOVE);
  for (  final AttributeDefinition def : TransportConfigOperationHandlers.GENERIC) {
    acceptor.registerReadWriteAttribute(def.getName(),null,TransportConfigOperationHandlers.GENERIC_ATTR,AttributeAccess.Storage.CONFIGURATION);
  }
  createParamRegistration(acceptor);
  final ManagementResourceRegistration remoteAcceptor=rootRegistration.registerSubModel(REMOTE_ACCEPTOR,MessagingSubsystemProviders.REMOTE_ACCEPTOR);
  remoteAcceptor.registerOperationHandler(ADD,TransportConfigOperationHandlers.REMOTE_ADD,MessagingSubsystemProviders.REMOTE_ACCEPTOR_ADD);
  remoteAcceptor.registerOperationHandler(REMOVE,TransportConfigOperationHandlers.REMOVE,MessagingSubsystemProviders.ACCEPTOR_REMOVE);
  for (  final AttributeDefinition def : TransportConfigOperationHandlers.REMOTE) {
    remoteAcceptor.registerReadWriteAttribute(def.getName(),null,TransportConfigOperationHandlers.REMOTE_ATTR,AttributeAccess.Storage.CONFIGURATION);
  }
  createParamRegistration(remoteAcceptor);
  final ManagementResourceRegistration inVMAcceptor=rootRegistration.registerSubModel(IN_VM_ACCEPTOR,MessagingSubsystemProviders.IN_VM_ACCEPTOR);
  inVMAcceptor.registerOperationHandler(ADD,TransportConfigOperationHandlers.IN_VM_ADD,MessagingSubsystemProviders.IN_VM_ACCEPTOR_ADD);
  inVMAcceptor.registerOperationHandler(REMOVE,TransportConfigOperationHandlers.REMOVE,MessagingSubsystemProviders.ACCEPTOR_REMOVE);
  for (  final AttributeDefinition def : TransportConfigOperationHandlers.IN_VM) {
    inVMAcceptor.registerReadWriteAttribute(def.getName(),null,TransportConfigOperationHandlers.IN_VM_ATTR,AttributeAccess.Storage.CONFIGURATION);
  }
  createParamRegistration(inVMAcceptor);
  final ManagementResourceRegistration connector=rootRegistration.registerSubModel(GENERIC_CONNECTOR,MessagingSubsystemProviders.CONNECTOR);
  connector.registerOperationHandler(ADD,TransportConfigOperationHandlers.GENERIC_ADD,MessagingSubsystemProviders.CONNECTOR_ADD);
  connector.registerOperationHandler(REMOVE,TransportConfigOperationHandlers.REMOVE,MessagingSubsystemProviders.CONNECTOR_REMOVE);
  for (  final AttributeDefinition def : TransportConfigOperationHandlers.GENERIC) {
    connector.registerReadWriteAttribute(def.getName(),null,TransportConfigOperationHandlers.GENERIC_ATTR,AttributeAccess.Storage.CONFIGURATION);
  }
  createParamRegistration(connector);
  final ManagementResourceRegistration remoteConnector=rootRegistration.registerSubModel(REMOTE_CONNECTOR,MessagingSubsystemProviders.REMOTE_CONNECTOR);
  remoteConnector.registerOperationHandler(ADD,TransportConfigOperationHandlers.REMOTE_ADD,MessagingSubsystemProviders.REMOTE_CONNECTOR_ADD);
  remoteConnector.registerOperationHandler(REMOVE,TransportConfigOperationHandlers.REMOVE,MessagingSubsystemProviders.CONNECTOR_REMOVE);
  for (  final AttributeDefinition def : TransportConfigOperationHandlers.REMOTE) {
    remoteConnector.registerReadWriteAttribute(def.getName(),null,TransportConfigOperationHandlers.REMOTE_ATTR,AttributeAccess.Storage.CONFIGURATION);
  }
  createParamRegistration(remoteConnector);
  final ManagementResourceRegistration inVMConnector=rootRegistration.registerSubModel(IN_VM_CONNECTOR,MessagingSubsystemProviders.IN_VM_CONNECTOR);
  inVMConnector.registerOperationHandler(ADD,TransportConfigOperationHandlers.IN_VM_ADD,MessagingSubsystemProviders.IN_VM_CONNECTOR_ADD);
  inVMConnector.registerOperationHandler(REMOVE,TransportConfigOperationHandlers.REMOVE,MessagingSubsystemProviders.CONNECTOR_REMOVE);
  for (  final AttributeDefinition def : TransportConfigOperationHandlers.IN_VM) {
    inVMConnector.registerReadWriteAttribute(def.getName(),null,TransportConfigOperationHandlers.IN_VM_ATTR,AttributeAccess.Storage.CONFIGURATION);
  }
  createParamRegistration(inVMConnector);
  final ManagementResourceRegistration bridge=rootRegistration.registerSubModel(PathElement.pathElement(CommonAttributes.BRIDGE),MessagingSubsystemProviders.BRIDGE_RESOURCE);
  bridge.registerOperationHandler(ADD,BridgeAdd.INSTANCE,BridgeAdd.INSTANCE,false);
  bridge.registerOperationHandler(REMOVE,BridgeRemove.INSTANCE,BridgeRemove.INSTANCE,false);
  for (  AttributeDefinition attributeDefinition : CommonAttributes.BRIDGE_ATTRIBUTES) {
    bridge.registerReadWriteAttribute(attributeDefinition.getName(),null,BridgeWriteAttributeHandler.INSTANCE,AttributeAccess.Storage.CONFIGURATION);
  }
  final ManagementResourceRegistration cluster=rootRegistration.registerSubModel(PathElement.pathElement(CommonAttributes.CLUSTER_CONNECTION),MessagingSubsystemProviders.CLUSTER_CONNECTION_RESOURCE);
  cluster.registerOperationHandler(ADD,ClusterConnectionAdd.INSTANCE,ClusterConnectionAdd.INSTANCE,false);
  cluster.registerOperationHandler(REMOVE,ClusterConnectionRemove.INSTANCE,ClusterConnectionRemove.INSTANCE,false);
  for (  AttributeDefinition attributeDefinition : CommonAttributes.CLUSTER_CONNECTION_ATTRIBUTES) {
    cluster.registerReadWriteAttribute(attributeDefinition.getName(),null,ClusterConnectionWriteAttributeHandler.INSTANCE,AttributeAccess.Storage.CONFIGURATION);
  }
  final ManagementResourceRegistration groupingHandler=rootRegistration.registerSubModel(GROUPING_HANDLER_PATH,MessagingSubsystemProviders.GROUPING_HANDLER_RESOURCE);
  groupingHandler.registerOperationHandler(ADD,GroupingHandlerAdd.INSTANCE,GroupingHandlerAdd.INSTANCE);
  groupingHandler.registerOperationHandler(REMOVE,GroupingHandlerRemove.INSTANCE,GroupingHandlerRemove.INSTANCE);
  for (  AttributeDefinition attributeDefinition : CommonAttributes.GROUPING_HANDLER_ATTRIBUTES) {
    groupingHandler.registerReadWriteAttribute(attributeDefinition.getName(),null,GroupingHandlerWriteAttributeHandler.INSTANCE,AttributeAccess.Storage.CONFIGURATION);
  }
  final ManagementResourceRegistration connectorService=rootRegistration.registerSubModel(PathElement.pathElement(CommonAttributes.CONNECTOR_SERVICE),MessagingSubsystemProviders.CONNECTOR_SERVICE_RESOURCE);
  connectorService.registerOperationHandler(ADD,ConnectorServiceAdd.INSTANCE,ConnectorServiceAdd.INSTANCE,false);
  connectorService.registerOperationHandler(REMOVE,ConnectorServiceRemove.INSTANCE,ConnectorServiceRemove.INSTANCE,false);
  for (  AttributeDefinition attributeDefinition : CommonAttributes.CONNECTOR_SERVICE_ATTRIBUTES) {
    connectorService.registerReadWriteAttribute(attributeDefinition.getName(),null,ConnectorServiceWriteAttributeHandler.INSTANCE,AttributeAccess.Storage.CONFIGURATION);
  }
  final ManagementResourceRegistration connectorServiceParam=connectorService.registerSubModel(PathElement.pathElement(CommonAttributes.PARAM),MessagingSubsystemProviders.CONNECTOR_SERVICE_PARAM_RESOURCE);
  connectorServiceParam.registerOperationHandler(ADD,ConnectorServiceParamAdd.INSTANCE,ConnectorServiceParamAdd.INSTANCE,false);
  connectorServiceParam.registerOperationHandler(REMOVE,ConnectorServiceParamRemove.INSTANCE,ConnectorServiceParamRemove.INSTANCE,false);
  connectorServiceParam.registerReadWriteAttribute(CommonAttributes.VALUE.getName(),null,ConnectorServiceParamWriteAttributeHandler.INSTANCE,AttributeAccess.Storage.CONFIGURATION);
  for (  final String path : CommonAttributes.PATHS) {
    ManagementResourceRegistration bindings=rootRegistration.registerSubModel(PathElement.pathElement(PATH,path),MessagingSubsystemProviders.PATH);
    MessagingPathHandlers.register(bindings);
  }
  final ManagementResourceRegistration cfs=rootRegistration.registerSubModel(CFS_PATH,MessagingSubsystemProviders.CF);
  cfs.registerOperationHandler(ADD,ConnectionFactoryAdd.INSTANCE,MessagingSubsystemProviders.CF_ADD,false);
  cfs.registerOperationHandler(REMOVE,ConnectionFactoryRemove.INSTANCE,MessagingSubsystemProviders.CF_REMOVE,false);
  for (  AttributeDefinition attributeDefinition : JMSServices.CONNECTION_FACTORY_ATTRS) {
    cfs.registerReadWriteAttribute(attributeDefinition.getName(),null,ConnectionFactoryWriteAttributeHandler.INSTANCE,AttributeAccess.Storage.CONFIGURATION);
  }
  final ManagementResourceRegistration resourceAdapters=rootRegistration.registerSubModel(RA_PATH,MessagingSubsystemProviders.RA);
  resourceAdapters.registerOperationHandler(ADD,PooledConnectionFactoryAdd.INSTANCE,MessagingSubsystemProviders.RA_ADD,false);
  resourceAdapters.registerOperationHandler(REMOVE,PooledConnectionFactoryRemove.INSTANCE,MessagingSubsystemProviders.RA_REMOVE);
  for (  AttributeDefinition attributeDefinition : JMSServices.POOLED_CONNECTION_FACTORY_ATTRS) {
    resourceAdapters.registerReadWriteAttribute(attributeDefinition.getName(),null,PooledConnectionFactoryWriteAttributeHandler.INSTANCE,AttributeAccess.Storage.CONFIGURATION);
  }
  final ManagementResourceRegistration queues=rootRegistration.registerSubModel(JMS_QUEUE_PATH,MessagingSubsystemProviders.JMS_QUEUE_RESOURCE);
  queues.registerOperationHandler(ADD,JMSQueueAdd.INSTANCE,JMSQueueAdd.INSTANCE,false);
  queues.registerOperationHandler(REMOVE,JMSQueueRemove.INSTANCE,JMSQueueRemove.INSTANCE,false);
  for (  AttributeDefinition attributeDefinition : CommonAttributes.JMS_QUEUE_ATTRIBUTES) {
    queues.registerReadWriteAttribute(attributeDefinition.getName(),null,JmsQueueConfigurationWriteHandler.INSTANCE,AttributeAccess.Storage.CONFIGURATION);
  }
  final ManagementResourceRegistration topics=rootRegistration.registerSubModel(TOPIC_PATH,MessagingSubsystemProviders.JMS_TOPIC_RESOURCE);
  topics.registerOperationHandler(ADD,JMSTopicAdd.INSTANCE,JMSTopicAdd.INSTANCE,false);
  topics.registerOperationHandler(REMOVE,JMSTopicRemove.INSTANCE,JMSTopicRemove.INSTANCE,false);
  topics.registerReadWriteAttribute(CommonAttributes.ENTRIES.getName(),null,TopicConfigurationWriteHandler.INSTANCE,AttributeAccess.Storage.CONFIGURATION);
}
