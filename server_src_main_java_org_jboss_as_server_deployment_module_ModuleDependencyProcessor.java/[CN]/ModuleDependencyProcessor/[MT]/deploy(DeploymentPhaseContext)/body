{
  final DeploymentUnit deploymentUnit=phaseContext.getDeploymentUnit();
  final ModuleSpecification moduleSpecification=deploymentUnit.getAttachment(Attachments.MODULE_SPECIFICATION);
  final ServiceModuleLoader deploymentModuleLoader=deploymentUnit.getAttachment(Attachments.SERVICE_MODULE_LOADER);
  final List<ResourceRoot> allResourceRoots=DeploymentUtils.allResourceRoots(deploymentUnit);
  for (  final ResourceRoot resourceRoot : allResourceRoots) {
    final Manifest manifest=resourceRoot.getAttachment(Attachments.MANIFEST);
    if (manifest == null)     continue;
    final String dependencyString=manifest.getMainAttributes().getValue(DEPENDENCIES_ATTR);
    if (dependencyString == null)     continue;
    final String[] dependencyDefs=dependencyString.split(",");
    for (    final String dependencyDef : dependencyDefs) {
      final String[] dependencyParts=dependencyDef.split(" ");
      if (dependencyParts.length == 0) {
        throw new RuntimeException("Invalid dependency: " + dependencyString);
      }
      final ModuleIdentifier dependencyId=ModuleIdentifier.fromString(dependencyParts[0]);
      final boolean export=containsParam(dependencyParts,EXPORT_PARAM);
      final boolean optional=containsParam(dependencyParts,OPTIONAL_PARAM);
      final boolean services=containsParam(dependencyParts,SERVICES_PARAM);
      final ModuleLoader dependencyLoader;
      if (dependencyId.getName().startsWith("deployment.")) {
        dependencyLoader=deploymentModuleLoader;
      }
 else {
        dependencyLoader=Module.getBootModuleLoader();
      }
      final ModuleDependency dependency=new ModuleDependency(dependencyLoader,dependencyId,optional,export,services);
      moduleSpecification.addDependency(dependency);
      deploymentUnit.addToAttachmentList(Attachments.MANIFEST_DEPENDENCIES,dependency);
    }
  }
  if (deploymentUnit.getParent() != null) {
    final List<ModuleDependency> parentDependencies=deploymentUnit.getParent().getAttachmentList(Attachments.MANIFEST_DEPENDENCIES);
    moduleSpecification.addDependencies(parentDependencies);
  }
}
