{
  final Manifest manifest=phaseContext.getDeploymentUnit().getAttachment(Attachments.MANIFEST);
  if (manifest == null)   return;
  final DeploymentUnit deploymentUnit=phaseContext.getDeploymentUnit();
  final DeploymentModuleLoader deploymentModuleLoader=deploymentUnit.getAttachment(Attachments.DEPLOYMENT_MODULE_LOADER);
  final String dependencyString=manifest.getMainAttributes().getValue("Dependencies");
  if (dependencyString == null)   return;
  final String[] dependencyDefs=dependencyString.split(",");
  for (  String dependencyDef : dependencyDefs) {
    final String[] dependencyParts=dependencyDef.split(" ");
    final int dependencyPartsLength=dependencyParts.length;
    if (dependencyPartsLength == 0)     throw new RuntimeException("Invalid dependency: " + dependencyString);
    final ModuleIdentifier dependencyId=ModuleIdentifier.fromString(dependencyParts[0]);
    boolean export=parseOptionalExportParams(dependencyParts,"export");
    boolean optional=parseOptionalExportParams(dependencyParts,"optional");
    final ModuleLoader dependencyLoader;
    if (dependencyId.getName().startsWith("deployment.")) {
      dependencyLoader=deploymentModuleLoader;
    }
 else {
      dependencyLoader=Module.getSystemModuleLoader();
    }
    ModuleDependency dependency=new ModuleDependency(dependencyLoader,dependencyId,optional,export,false);
    phaseContext.getDeploymentUnit().addToAttachmentList(Attachments.MODULE_DEPENDENCIES,dependency);
  }
}
