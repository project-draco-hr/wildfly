{
  final DeploymentUnit deploymentUnit=phaseContext.getDeploymentUnit();
  final ModuleSpecification moduleSpecification=deploymentUnit.getAttachment(Attachments.MODULE_SPECIFICATION);
  final ServiceModuleLoader deploymentModuleLoader=deploymentUnit.getAttachment(Attachments.SERVICE_MODULE_LOADER);
  List<ResourceRoot> allResourceRoots=DeploymentUtils.allResourceRoots(deploymentUnit);
  for (  ResourceRoot resourceRoot : allResourceRoots) {
    final Manifest manifest=resourceRoot.getAttachment(Attachments.MANIFEST);
    if (manifest == null)     continue;
    final String dependencyString=manifest.getMainAttributes().getValue("Dependencies");
    if (dependencyString == null)     continue;
    final String[] dependencyDefs=dependencyString.split(",");
    for (    String dependencyDef : dependencyDefs) {
      final String[] dependencyParts=dependencyDef.split(" ");
      final int dependencyPartsLength=dependencyParts.length;
      if (dependencyPartsLength == 0)       throw new RuntimeException("Invalid dependency: " + dependencyString);
      final ModuleIdentifier dependencyId=ModuleIdentifier.fromString(dependencyParts[0]);
      boolean export=parseOptionalExportParams(dependencyParts,"export");
      boolean optional=parseOptionalExportParams(dependencyParts,"optional");
      boolean services=parseOptionalExportParams(dependencyParts,"services");
      final ModuleLoader dependencyLoader;
      if (dependencyId.getName().startsWith("deployment.")) {
        dependencyLoader=deploymentModuleLoader;
      }
 else {
        dependencyLoader=Module.getBootModuleLoader();
      }
      ModuleDependency dependency=new ModuleDependency(dependencyLoader,dependencyId,optional,export,services);
      moduleSpecification.addDependency(dependency);
    }
  }
}
