{
  final Resource ijResourceAdapter=new IronJacamarResource.IronJacamarRuntimeResource();
  final ModelNode model=ijResourceAdapter.getModel();
  model.get(Constants.ARCHIVE.getName()).set(name);
  setAttribute(model,Constants.BOOTSTRAP_CONTEXT,ironJacamarMetadata.getBootstrapContext());
  if (ironJacamarMetadata.getTransactionSupport() != null)   model.get(Constants.TRANSACTION_SUPPORT.getName()).set(ironJacamarMetadata.getTransactionSupport().name());
  if (ironJacamarMetadata.getBeanValidationGroups() != null) {
    for (    String bv : ironJacamarMetadata.getBeanValidationGroups()) {
      model.get(Constants.BEANVALIDATION_GROUPS.getName()).add(new ModelNode().set(bv));
    }
  }
  if (ironJacamarMetadata.getConfigProperties() != null) {
    for (    Map.Entry<String,String> config : ironJacamarMetadata.getConfigProperties().entrySet()) {
      addConfigProperties(ijResourceAdapter,config.getKey(),config.getValue());
    }
  }
  if (ironJacamarMetadata.getConnectionDefinitions() != null) {
    for (    CommonConnDef connDef : ironJacamarMetadata.getConnectionDefinitions()) {
      addConnectionDefinition(ijResourceAdapter,connDef);
    }
  }
  if (ironJacamarMetadata.getAdminObjects() != null) {
    for (    CommonAdminObject adminObject : ironJacamarMetadata.getAdminObjects()) {
      addAdminObject(ijResourceAdapter,adminObject);
    }
  }
  final PathElement element=PathElement.pathElement(Constants.RESOURCEADAPTER_NAME,name);
  parent.registerChild(element,ijResourceAdapter);
}
