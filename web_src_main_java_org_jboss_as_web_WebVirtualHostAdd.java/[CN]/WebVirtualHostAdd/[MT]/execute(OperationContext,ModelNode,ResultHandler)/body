{
  final PathAddress address=PathAddress.pathAddress(operation.require(OP_ADDR));
  final String name=address.getLastElement().getValue();
  final ModelNode compensatingOperation=new ModelNode();
  compensatingOperation.get(OP).set(REMOVE);
  compensatingOperation.get(OP_ADDR).set(operation.require(OP_ADDR));
  final ModelNode subModel=context.getSubModel();
  subModel.get(CommonAttributes.ALIAS).set(operation.get(CommonAttributes.ALIAS));
  subModel.get(CommonAttributes.ACCESS_LOG).set(operation.get(CommonAttributes.ACCESS_LOG));
  subModel.get(CommonAttributes.REWRITE).set(operation.get(CommonAttributes.REWRITE));
  if (context.getRuntimeContext() != null) {
    context.getRuntimeContext().setRuntimeTask(new RuntimeTask(){
      public void execute(      RuntimeTaskContext context) throws OperationFailedException {
        final ServiceTarget serviceTarget=context.getServiceTarget();
        final WebVirtualHostService service=new WebVirtualHostService(name,aliases(operation));
        final ServiceBuilder<?> serviceBuilder=serviceTarget.addService(WebSubsystemServices.JBOSS_WEB_HOST.append(name),service).addDependency(AbstractPathService.pathNameOf(TEMP_DIR),String.class,service.getTempPathInjector()).addDependency(WebSubsystemServices.JBOSS_WEB,WebServer.class,service.getWebServer());
        if (operation.hasDefined(CommonAttributes.ACCESS_LOG)) {
          final ModelNode accessLog=operation.get(CommonAttributes.ACCESS_LOG);
          service.setAccessLog(accessLog.clone());
          accessLogService(name,accessLog,serviceTarget);
          serviceBuilder.addDependency(WebSubsystemServices.JBOSS_WEB_HOST.append(name,CommonAttributes.ACCESS_LOG),String.class,service.getAccessLogPathInjector());
        }
        if (operation.hasDefined(CommonAttributes.REWRITE)) {
          service.setRewrite(operation.get(CommonAttributes.REWRITE).clone());
        }
        serviceBuilder.addListener(new ResultHandler.ServiceStartListener(resultHandler));
        serviceBuilder.install();
      }
    }
);
  }
 else {
    resultHandler.handleResultComplete();
  }
  return new BasicOperationResult(compensatingOperation);
}
