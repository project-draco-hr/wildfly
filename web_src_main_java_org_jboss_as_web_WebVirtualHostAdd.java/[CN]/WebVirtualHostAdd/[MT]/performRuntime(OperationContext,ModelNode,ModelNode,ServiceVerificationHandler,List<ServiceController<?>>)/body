{
  ModelNode operation=Resource.Tools.readModel(context.readResource(PathAddress.EMPTY_ADDRESS));
  final PathAddress address=PathAddress.pathAddress(baseOperation.require(OP_ADDR));
  final String name=address.getLastElement().getValue();
  boolean welcome=WebVirtualHostDefinition.ENABLE_WELCOME_ROOT.resolveModelAttribute(context,operation).asBoolean();
  final ServiceTarget serviceTarget=context.getServiceTarget();
  final WebVirtualHostService service=new WebVirtualHostService(name,aliases(operation),welcome,TEMP_DIR);
  final ServiceBuilder<?> serviceBuilder=serviceTarget.addService(WebSubsystemServices.JBOSS_WEB_HOST.append(name),service).addDependency(PathManagerService.SERVICE_NAME,PathManager.class,service.getPathManagerInjector()).addDependency(WebSubsystemServices.JBOSS_WEB,WebServer.class,service.getWebServer());
  if (operation.get(ACCESS_LOG_PATH.getKey(),ACCESS_LOG_PATH.getValue()).isDefined()) {
    final ModelNode accessLog=operation.get(ACCESS_LOG_PATH.getKey(),ACCESS_LOG_PATH.getValue());
    service.setAccessLog(accessLog.clone());
    service.setAccessLogPaths(getPath(context,accessLog,name),getRelativeTo(context,accessLog,name));
  }
  if (operation.hasDefined(Constants.REWRITE)) {
    service.setRewrite(operation.get(Constants.REWRITE).clone());
  }
  if (operation.get(SSO_PATH.getKey(),SSO_PATH.getValue()).isDefined()) {
    ModelNode sso=operation.get(SSO_PATH.getKey(),SSO_PATH.getValue()).clone();
    service.setSso(sso);
    if (sso.hasDefined(Constants.CACHE_CONTAINER)) {
      ServiceName ssoName=WebSubsystemServices.JBOSS_WEB_HOST.append(name,Constants.SSO);
      serviceBuilder.addDependency(ssoName,SSOClusterManager.class,service.getSSOClusterManager());
      SSOClusterManagerService ssoService=new SSOClusterManagerService();
      SSOClusterManager ssoManager=ssoService.getValue();
      ssoManager.setCacheContainerName(sso.get(Constants.CACHE_CONTAINER).asString());
      if (sso.hasDefined(Constants.CACHE_NAME)) {
        ssoManager.setCacheName(sso.get(Constants.CACHE_NAME).asString());
      }
      ServiceBuilder<SSOClusterManager> builder=serviceTarget.addService(ssoName,ssoService);
      ssoService.getValue().addDependencies(serviceTarget,builder);
      newControllers.add(builder.setInitialMode(ServiceController.Mode.ON_DEMAND).install());
    }
  }
  if (operation.hasDefined(Constants.DEFAULT_WEB_MODULE)) {
    if (welcome) {
      throw new OperationFailedException(new ModelNode().set(MESSAGES.noRootWebappWithWelcomeWebapp()));
    }
    service.setDefaultWebModule(operation.get(Constants.DEFAULT_WEB_MODULE).asString());
  }
  serviceBuilder.addListener(verificationHandler);
  newControllers.add(serviceBuilder.install());
  if (welcome) {
    final WelcomeContextService welcomeService=new WelcomeContextService(HOME_DIR);
    newControllers.add(context.getServiceTarget().addService(WebSubsystemServices.JBOSS_WEB.append(name).append("welcome"),welcomeService).addDependency(PathManagerService.SERVICE_NAME,PathManager.class,welcomeService.getPathManagerInjector()).addDependency(WebSubsystemServices.JBOSS_WEB_HOST.append(name),VirtualHost.class,welcomeService.getHostInjector()).addDependency(ServiceBuilder.DependencyType.OPTIONAL,HttpManagementService.SERVICE_NAME,HttpManagement.class,welcomeService.getHttpManagementInjector()).addListener(verificationHandler).setInitialMode(ServiceController.Mode.ACTIVE).install());
  }
}
