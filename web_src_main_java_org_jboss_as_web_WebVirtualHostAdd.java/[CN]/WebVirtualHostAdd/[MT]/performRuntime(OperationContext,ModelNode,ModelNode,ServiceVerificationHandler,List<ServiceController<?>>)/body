{
  ModelNode fullModel=Resource.Tools.readModel(context.readResource(PathAddress.EMPTY_ADDRESS));
  final PathAddress address=PathAddress.pathAddress(baseOperation.require(OP_ADDR));
  final String name=address.getLastElement().getValue();
  boolean welcome=WebVirtualHostDefinition.ENABLE_WELCOME_ROOT.resolveModelAttribute(context,fullModel).asBoolean();
  final ServiceTarget serviceTarget=context.getServiceTarget();
  final WebVirtualHostService service=new WebVirtualHostService(name,aliases(fullModel),welcome,TEMP_DIR);
  final ServiceBuilder<?> serviceBuilder=serviceTarget.addService(WebSubsystemServices.JBOSS_WEB_HOST.append(name),service).addDependency(PathManagerService.SERVICE_NAME,PathManager.class,service.getPathManagerInjector()).addDependency(WebSubsystemServices.JBOSS_WEB,WebServer.class,service.getWebServer());
  final JBossWebHost commonWebHost=new JBossWebHost();
  ServiceController<WebHost> commonBuilder=serviceTarget.addService(WebHost.SERVICE_NAME.append(name),commonWebHost).addDependency(WebSubsystemServices.JBOSS_WEB_HOST.append(name),VirtualHost.class,commonWebHost.getInjectedHost()).install();
  if (newControllers != null) {
    newControllers.add(commonBuilder);
  }
  if (fullModel.get(ACCESS_LOG_PATH.getKey(),ACCESS_LOG_PATH.getValue()).isDefined()) {
    final ModelNode unresolved=fullModel.get(ACCESS_LOG_PATH.getKey(),ACCESS_LOG_PATH.getValue());
    service.setAccessLog(resolveExpressions(context,unresolved,WebAccessLogDefinition.ACCESS_LOG_ATTRIBUTES));
    final ModelNode accessLogDir=unresolved.get(DIRECTORY_PATH.getKey(),DIRECTORY_PATH.getValue());
    String relativeTo=WebAccessLogDirectoryDefinition.RELATIVE_TO.resolveModelAttribute(context,accessLogDir).asString();
    ModelNode pathNode=WebAccessLogDirectoryDefinition.PATH.resolveModelAttribute(context,accessLogDir);
    service.setAccessLogPaths(pathNode.isDefined() ? pathNode.asString() : name,relativeTo);
  }
  if (fullModel.hasDefined(Constants.REWRITE)) {
    ModelNode resolvedRewrite=resolveRewriteExpressions(context,fullModel.get(Constants.REWRITE));
    service.setRewrite(resolvedRewrite);
  }
  if (fullModel.get(SSO_PATH.getKey(),SSO_PATH.getValue()).isDefined()) {
    ModelNode sso=resolveExpressions(context,fullModel.get(SSO_PATH.getKey(),SSO_PATH.getValue()).clone(),WebSSODefinition.SSO_ATTRIBUTES);
    service.setSso(sso);
    if (sso.hasDefined(Constants.CACHE_CONTAINER)) {
      ServiceName ssoName=WebSubsystemServices.JBOSS_WEB_HOST.append(name,Constants.SSO);
      serviceBuilder.addDependency(ssoName,SSOClusterManager.class,service.getSSOClusterManager());
      SSOClusterManagerService ssoService=new SSOClusterManagerService();
      SSOClusterManager ssoManager=ssoService.getValue();
      ssoManager.setCacheContainerName(sso.get(Constants.CACHE_CONTAINER).asString());
      if (sso.hasDefined(Constants.CACHE_NAME)) {
        ssoManager.setCacheName(sso.get(Constants.CACHE_NAME).asString());
      }
      ServiceBuilder<SSOClusterManager> builder=serviceTarget.addService(ssoName,ssoService);
      ssoService.getValue().addDependencies(serviceTarget,builder);
      newControllers.add(builder.setInitialMode(ServiceController.Mode.ON_DEMAND).install());
    }
  }
  if (fullModel.hasDefined(WebVirtualHostDefinition.DEFAULT_WEB_MODULE.getName())) {
    if (welcome) {
      throw new OperationFailedException(new ModelNode().set(MESSAGES.noRootWebappWithWelcomeWebapp()));
    }
    service.setDefaultWebModule(WebVirtualHostDefinition.DEFAULT_WEB_MODULE.resolveModelAttribute(context,fullModel).asString());
  }
  serviceBuilder.addListener(verificationHandler);
  newControllers.add(serviceBuilder.install());
  if (welcome) {
    final WelcomeContextService welcomeService=new WelcomeContextService(HOME_DIR);
    newControllers.add(context.getServiceTarget().addService(WebSubsystemServices.JBOSS_WEB.append(name).append("welcome"),welcomeService).addDependency(PathManagerService.SERVICE_NAME,PathManager.class,welcomeService.getPathManagerInjector()).addDependency(WebSubsystemServices.JBOSS_WEB_HOST.append(name),VirtualHost.class,welcomeService.getHostInjector()).addDependency(ServiceBuilder.DependencyType.OPTIONAL,_UndertowHttpManagementService.SERVICE_NAME,HttpManagement.class,welcomeService.getHttpManagementInjector()).addListener(verificationHandler).setInitialMode(ServiceController.Mode.ACTIVE).install());
  }
}
