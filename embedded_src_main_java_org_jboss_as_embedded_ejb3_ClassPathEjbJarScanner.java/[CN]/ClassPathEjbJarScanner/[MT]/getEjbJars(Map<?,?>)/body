{
  final Collection<String> returnValue=new ArrayList<String>();
  String classPath=getSystemProperty("surefire.test.class.path");
  if (classPath == null || classPath.isEmpty())   classPath=getSystemProperty(SYS_PROP_KEY_CLASS_PATH);
  if (ROOT_LOGGER.isTraceEnabled()) {
    ROOT_LOGGER.tracef("Class Path: %s",classPath);
  }
  final String[] classPathEntries=classPath.split(File.pathSeparator);
  final Object modules;
  if (properties != null) {
    modules=properties.get(EJBContainer.MODULES);
  }
 else {
    modules=null;
  }
  Set<String> moduleNames=null;
  if (modules != null) {
    if (modules instanceof File[]) {
      for (      File file : (File[])modules) {
        returnValue.add(file.getAbsolutePath());
      }
      return returnValue.toArray(DUMMY);
    }
 else     if (modules instanceof File) {
      returnValue.add(((File)modules).getAbsolutePath());
      return returnValue.toArray(DUMMY);
    }
 else     if (modules instanceof String[]) {
      moduleNames=new HashSet<String>();
      moduleNames.addAll(Arrays.asList((String[])modules));
    }
 else     if (modules instanceof String) {
      moduleNames=new HashSet<String>();
      moduleNames.add(modules.toString());
    }
 else {
      throw MESSAGES.invalidModuleType(EJBContainer.MODULES,modules.getClass());
    }
  }
  for (  final String classPathEntry : classPathEntries) {
    final String moduleName=getEjbJar(classPathEntry);
    if (moduleName != null) {
      if (moduleNames == null) {
        returnValue.add(classPathEntry);
      }
 else       if (moduleNames.contains(moduleName)) {
        returnValue.add(classPathEntry);
      }
    }
  }
  if (ROOT_LOGGER.isDebugEnabled()) {
    ROOT_LOGGER.debugf("EJB Modules discovered on ClassPath: %s",returnValue);
  }
  return returnValue.toArray(DUMMY);
}
