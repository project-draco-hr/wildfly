{
  LoginContext lc=Util.getCLMLoginContext("user2","password2");
  lc.login();
  try {
    String myContext=Util.createRemoteEjbJndiContext("",MODULE,"",SB_CLASS.getSimpleName(),SimpleAuthorizationRemote.class.getName(),isBeanClassStatefull(SB_CLASS));
    log.info("JNDI name=" + myContext);
    final Context ctx=Util.createNamingContext();
    final SimpleAuthorizationRemote singleMethodsAnnOnlyBean=(SimpleAuthorizationRemote)ctx.lookup(myContext);
    try {
      String echoValue=singleMethodsAnnOnlyBean.defaultAccess("alohomora");
      Assert.assertEquals(echoValue,"alohomora");
    }
 catch (    EJBAccessException e) {
      Assert.fail("EJBAccessException not expected");
    }
    try {
      String echoValue=singleMethodsAnnOnlyBean.roleBasedAccessOne("alohomora");
      Assert.fail("Method cannot be successfully called with logged in user2");
    }
 catch (    Exception e) {
      Assert.assertTrue("Thrown exception must be EJBAccessException, but was different",e instanceof EJBAccessException);
    }
    try {
      String echoValue=singleMethodsAnnOnlyBean.roleBasedAccessMore("alohomora");
      Assert.assertEquals(echoValue,"alohomora");
    }
 catch (    EJBAccessException e) {
      Assert.fail("EJBAccessException not expected");
    }
    try {
      String echoValue=singleMethodsAnnOnlyBean.permitAll("alohomora");
      Assert.assertEquals(echoValue,"alohomora");
    }
 catch (    Exception e) {
      Assert.fail("@PermitAll annotation must allow all users and no users to call the method - principal:" + lc.getSubject());
    }
    try {
      String echoValue=singleMethodsAnnOnlyBean.denyAll("alohomora");
      Assert.fail("@DenyAll annotation must allow all users and no users to call the method");
    }
 catch (    Exception e) {
      Assert.assertTrue("Thrown exception must be EJBAccessException, but was different",e instanceof EJBAccessException);
    }
  }
  finally {
    lc.logout();
  }
}
