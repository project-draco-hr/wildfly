{
  String myContext=Util.createRemoteEjbJndiContext("",MODULE,"",SB_CLASS.getSimpleName(),SimpleAuthorizationRemote.class.getName(),isBeanClassStatefull(SB_CLASS));
  log.info("JNDI name=" + myContext);
  final Context ctx=Util.createNamingContext();
  final SimpleAuthorizationRemote singleMethodsAnnOnlyBean=(SimpleAuthorizationRemote)ctx.lookup(myContext);
  String echoValue=singleMethodsAnnOnlyBean.defaultAccess("alohomora");
  Assert.assertEquals(echoValue,"alohomora");
  try {
    echoValue=singleMethodsAnnOnlyBean.roleBasedAccessOne("alohomora");
    Assert.fail("Method cannot be successfully called without logged in user");
  }
 catch (  Exception e) {
    Assert.assertTrue("Thrown exception must be EJBAccessException, but was " + e.getClass().getSimpleName(),e instanceof EJBAccessException);
  }
  try {
    echoValue=singleMethodsAnnOnlyBean.roleBasedAccessMore("alohomora");
    Assert.fail("Method cannot be successfully called without logged in user");
  }
 catch (  Exception e) {
    Assert.assertTrue("Thrown exception must be EJBAccessException, but was " + e.getClass().getSimpleName(),e instanceof EJBAccessException);
  }
  try {
    echoValue=singleMethodsAnnOnlyBean.permitAll("alohomora");
    Assert.assertEquals(echoValue,"alohomora");
  }
 catch (  Exception e) {
    Assert.fail("@PermitAll annotation must allow all users and no users to call the method");
  }
  try {
    echoValue=singleMethodsAnnOnlyBean.denyAll("alohomora");
    Assert.fail("@DenyAll annotation must allow all users and no users to call the method");
  }
 catch (  Exception e) {
    Assert.assertTrue("Thrown exception must be EJBAccessException, but was " + e.getClass().getSimpleName(),e instanceof EJBAccessException);
  }
}
