{
  final Context ctx=Util.createNamingContext();
  ContextSelector<EJBClientContext> old=setupEJBClientContextSelector("$local",null);
  try {
    String echoValue=getBean(MODULE,log,SB_CLASS,ctx).defaultAccess("alohomora");
    Assert.assertEquals(echoValue,"alohomora");
    try {
      echoValue=getBean(MODULE,log,SB_CLASS,ctx).roleBasedAccessOne("alohomora");
      Assert.fail("Method cannot be successfully called without logged in user");
    }
 catch (    Exception e) {
      Assert.assertTrue("Thrown exception must be EJBAccessException, but was " + e.getClass().getSimpleName(),e instanceof EJBAccessException);
    }
    try {
      echoValue=getBean(MODULE,log,SB_CLASS,ctx).roleBasedAccessMore("alohomora");
      Assert.fail("Method cannot be successfully called without logged in user");
    }
 catch (    EJBAccessException e) {
    }
    try {
      echoValue=getBean(MODULE,log,SB_CLASS,ctx).permitAll("alohomora");
      Assert.assertEquals(echoValue,"alohomora");
    }
 catch (    Exception e) {
      Assert.fail("@PermitAll annotation must allow all users and no users to call the method");
    }
    try {
      echoValue=getBean(MODULE,log,SB_CLASS,ctx).denyAll("alohomora");
      Assert.fail("@DenyAll annotation must allow all users and no users to call the method");
    }
 catch (    Exception e) {
      Assert.assertTrue("Thrown exception must be EJBAccessException, but was " + e.getClass().getSimpleName(),e instanceof EJBAccessException);
    }
  }
  finally {
    safeClose((Closeable)EJBClientContext.setSelector(old));
  }
}
