{
  final Context ctx=Util.createNamingContext();
  ContextSelector<EJBClientContext> old=setupEJBClientContextSelector("user1","password1");
  try {
    try {
      String echoValue=getBean(MODULE,log,SB_CLASS,ctx).defaultAccess("alohomora");
      Assert.assertEquals(echoValue,"alohomora");
    }
 catch (    EJBAccessException e) {
      Assert.fail("EJBAccessException not expected");
    }
    try {
      String echoValue=getBean(MODULE,log,SB_CLASS,ctx).roleBasedAccessOne("alohomora");
      Assert.assertEquals(echoValue,"alohomora");
    }
 catch (    EJBAccessException e) {
      Assert.fail("EJBAccessException not expected");
    }
    try {
      String echoValue=getBean(MODULE,log,SB_CLASS,ctx).roleBasedAccessMore("alohomora");
      Assert.fail("Method cannot be successfully called with logged in principal.");
    }
 catch (    Exception e) {
      Assert.assertTrue("Thrown exception must be EJBAccessException, but was different",e instanceof EJBAccessException);
    }
    try {
      String echoValue=getBean(MODULE,log,SB_CLASS,ctx).permitAll("alohomora");
      Assert.assertEquals(echoValue,"alohomora");
    }
 catch (    Exception e) {
      Assert.fail("@PermitAll annotation must allow all users and no users to call the method - principal.");
    }
    try {
      String echoValue=getBean(MODULE,log,SB_CLASS,ctx).denyAll("alohomora");
      Assert.fail("@DenyAll annotation must allow all users and no users to call the method");
    }
 catch (    Exception e) {
      Assert.assertTrue("Thrown exception must be EJBAccessException, but was different",e instanceof EJBAccessException);
    }
    try {
      String echoValue=getBean(MODULE,log,SB_CLASS,ctx).starRoleAllowed("alohomora");
      Assert.assertEquals(echoValue,"alohomora");
    }
 catch (    Exception e) {
      Assert.fail("@RolesAllowed(\"**\") annotation must allow all authenticated users to the method.");
    }
  }
  finally {
    safeClose((Closeable)EJBClientContext.setSelector(old));
  }
}
