{
  ROOT_LOGGER.debug("Initializing Transactions Extension");
  final boolean registerRuntimeOnly=context.isRuntimeOnlyRegistrationValid();
  final SubsystemRegistration subsystem=context.registerSubsystem(SUBSYSTEM_NAME,1,0);
  final ManagementResourceRegistration registration=subsystem.registerSubsystemModel(new TransactionSubsystemRootResourceDefinition(registerRuntimeOnly));
  registration.registerOperationHandler(DESCRIBE,GenericSubsystemDescribeHandler.INSTANCE,GenericSubsystemDescribeHandler.INSTANCE,false,OperationEntry.EntryType.PRIVATE);
  PathElement logStorePath=PathElement.pathElement(LogStoreConstants.LOG_STORE,LogStoreConstants.LOG_STORE);
  ManagementResourceRegistration logStoreChild=registration.registerSubModel(logStorePath,LogStoreProviders.LOG_STORE_MODEL_CHILD);
  logStoreChild.registerOperationHandler(ModelDescriptionConstants.ADD,LogStoreAddHandler.INSTANCE,LogStoreProviders.ADD_LOG_STORE_MODEL_CHILD);
  logStoreChild.registerOperationHandler(ModelDescriptionConstants.REMOVE,ReloadRequiredRemoveStepHandler.INSTANCE,LogStoreProviders.REMOVE_LOG_STORE_MODEL_CHILD);
  logStoreChild.registerOperationHandler(LogStoreConstants.PROBE,LogStoreProbeHandler.INSTANCE,LogStoreProviders.PROBE_OPERATION);
  PathElement transactionPath=PathElement.pathElement(LogStoreConstants.TRANSACTIONS);
  ManagementResourceRegistration transactionChild=logStoreChild.registerSubModel(transactionPath,LogStoreProviders.TRANSACTION_CHILD);
  transactionChild.registerOperationHandler(LogStoreConstants.DELETE,LogStoreTransactionDeleteHandler.INSTANCE,LogStoreProviders.DELETE_OPERATION);
  PathElement partecipantPath=PathElement.pathElement(LogStoreConstants.PARTICIPANTS);
  ManagementResourceRegistration partecipantChild=transactionChild.registerSubModel(partecipantPath,LogStoreProviders.PARTECIPANT_CHILD);
  for (  final SimpleAttributeDefinition attribute : LogStoreProviders.PARTECIPANT_RW_ATTRIBUTE) {
    partecipantChild.registerReadWriteAttribute(attribute,null,new ParticipantWriteAttributeHandler(attribute));
  }
  partecipantChild.registerOperationHandler(LogStoreConstants.RECOVER,LogStoreParticipantRecoveryHandler.INSTANCE,LogStoreProviders.RECOVER_OPERATION);
  partecipantChild.registerOperationHandler(LogStoreConstants.REFRESH,LogStoreParticipantRefreshHandler.INSTANCE,LogStoreProviders.REFRESH_OPERATION);
  subsystem.registerXMLElementWriter(TransactionSubsystem12Parser.INSTANCE);
}
