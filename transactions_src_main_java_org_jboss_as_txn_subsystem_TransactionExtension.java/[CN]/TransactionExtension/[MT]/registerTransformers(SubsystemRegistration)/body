{
  final ModelVersion version111=ModelVersion.create(1,1,1);
  final DiscardUndefinedAttributesTransformer discardTransformer=new DiscardUndefinedAttributesTransformer(TransactionSubsystemRootResourceDefinition.attributes_1_2);
  final TransformersSubRegistration transformers111=subsystem.registerModelTransformers(version111,discardTransformer);
  transformers111.registerOperationTransformer(ADD,discardTransformer);
  transformers111.registerOperationTransformer(WRITE_ATTRIBUTE_OPERATION,discardTransformer.getWriteAttributeTransformer());
  transformers111.registerOperationTransformer(UNDEFINE_ATTRIBUTE_OPERATION,discardTransformer.getUndefineAttributeTransformer());
  final ModelVersion version110=ModelVersion.create(1,1,0);
  final RejectExpressionValuesTransformer reject=new RejectExpressionValuesTransformer(TransactionSubsystemRootResourceDefinition.attributes);
  final TransformersSubRegistration registration=subsystem.registerModelTransformers(version110,new ChainedResourceTransformer(new ChainedResourceTransformerEntry(){
    @Override public void transformResource(    ChainedResourceTransformationContext context,    PathAddress address,    Resource resource) throws OperationFailedException {
      ModelNode model=resource.getModel();
      if (!model.hasDefined(TransactionSubsystemRootResourceDefinition.PROCESS_ID_UUID.getName())) {
        model.get(TransactionSubsystemRootResourceDefinition.PROCESS_ID_UUID.getName()).set(false);
      }
    }
  }
,reject.getChainedTransformer(),discardTransformer));
  registration.registerOperationTransformer(ADD,reject);
  registration.registerOperationTransformer(WRITE_ATTRIBUTE_OPERATION,new ChainedOperationTransformer(reject.getWriteAttributeTransformer(),discardTransformer.getWriteAttributeTransformer()));
  registration.registerOperationTransformer(UNDEFINE_ATTRIBUTE_OPERATION,discardTransformer.getUndefineAttributeTransformer());
}
