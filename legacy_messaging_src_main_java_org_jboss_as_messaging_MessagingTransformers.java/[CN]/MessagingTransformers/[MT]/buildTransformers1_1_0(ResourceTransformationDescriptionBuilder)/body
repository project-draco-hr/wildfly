{
  builder.rejectChildResource(JMSBridgeDefinition.PATH);
  ResourceTransformationDescriptionBuilder hornetqServer=builder.addChildResource(pathElement(HORNETQ_SERVER));
  rejectAttributesWithExpression(hornetqServer,HornetQServerResourceDefinition.ATTRIBUTES_WITH_EXPRESSION_ALLOWED_IN_1_2_0);
  rejectDefinedAttribute(hornetqServer,BACKUP_GROUP_NAME,REPLICATION_CLUSTERNAME,REMOTING_INCOMING_INTERCEPTORS,REMOTING_OUTGOING_INTERCEPTORS);
  rejectDefinedAttributeWithDefaultValue(hornetqServer,CHECK_FOR_LIVE_SERVER);
  convertUndefinedAttribute(hornetqServer,ID_CACHE_SIZE);
  for (  String path : PathDefinition.PATHS.keySet()) {
    ResourceTransformationDescriptionBuilder serverPaths=hornetqServer.addChildResource(pathElement(PATH,path));
    rejectAttributesWithExpression(serverPaths,PATH);
  }
  for (  String path : new String[]{CommonAttributes.IN_VM_ACCEPTOR,CommonAttributes.IN_VM_CONNECTOR}) {
    ResourceTransformationDescriptionBuilder transport=hornetqServer.addChildResource(pathElement(path));
    rejectAttributesWithExpression(transport,InVMTransportDefinition.SERVER_ID);
    OperationTransformationOverrideBuilder transportAddOp=transport.addOperationTransformationOverride(ADD).inheritResourceAttributeDefinitions();
    rejectAttributesWithExpression(transportAddOp,CommonAttributes.PARAM);
    ResourceTransformationDescriptionBuilder transportParam=transport.addChildResource(TransportParamDefinition.PATH);
    rejectAttributesWithExpression(transportParam,TransportParamDefinition.VALUE);
  }
  for (  String path : new String[]{CommonAttributes.REMOTE_ACCEPTOR,CommonAttributes.REMOTE_CONNECTOR,CommonAttributes.ACCEPTOR,CommonAttributes.CONNECTOR}) {
    ResourceTransformationDescriptionBuilder transport=hornetqServer.addChildResource(pathElement(path));
    OperationTransformationOverrideBuilder transportAddOp=transport.addOperationTransformationOverride(ADD).inheritResourceAttributeDefinitions();
    rejectAttributesWithExpression(transportAddOp,CommonAttributes.PARAM);
    ResourceTransformationDescriptionBuilder transportParam=transport.addChildResource(TransportParamDefinition.PATH);
    rejectAttributesWithExpression(transportParam,TransportParamDefinition.VALUE);
  }
  ResourceTransformationDescriptionBuilder broadcastGroup=hornetqServer.addChildResource(BroadcastGroupDefinition.PATH);
  rejectAttributesWithExpression(broadcastGroup,BroadcastGroupDefinition.BROADCAST_PERIOD);
  rejectDefinedAttribute(broadcastGroup,CommonAttributes.JGROUPS_CHANNEL,CommonAttributes.JGROUPS_STACK);
  ResourceTransformationDescriptionBuilder discoveryGroup=hornetqServer.addChildResource(DiscoveryGroupDefinition.PATH);
  rejectAttributesWithExpression(discoveryGroup,DiscoveryGroupDefinition.INITIAL_WAIT_TIMEOUT,DiscoveryGroupDefinition.REFRESH_TIMEOUT);
  rejectDefinedAttribute(discoveryGroup,CommonAttributes.JGROUPS_CHANNEL,CommonAttributes.JGROUPS_STACK);
  ResourceTransformationDescriptionBuilder divert=hornetqServer.addChildResource(DivertDefinition.PATH);
  rejectAttributesWithExpression(divert,DivertDefinition.ROUTING_NAME,DivertDefinition.ADDRESS,DivertDefinition.FORWARDING_ADDRESS,CommonAttributes.FILTER,DivertDefinition.EXCLUSIVE);
  ResourceTransformationDescriptionBuilder queue=hornetqServer.addChildResource(QueueDefinition.PATH);
  rejectAttributesWithExpression(queue,QueueDefinition.ADDRESS,CommonAttributes.FILTER,CommonAttributes.DURABLE);
  ResourceTransformationDescriptionBuilder bridge=hornetqServer.addChildResource(BridgeDefinition.PATH);
  rejectAttributesWithExpression(bridge,BridgeDefinition.ATTRIBUTES_WITH_EXPRESSION_ALLOWED_IN_1_2_0);
  ResourceTransformationDescriptionBuilder clusterConnection=hornetqServer.addChildResource(ClusterConnectionDefinition.PATH);
  rejectAttributesWithExpression(clusterConnection,ClusterConnectionDefinition.ATTRIBUTES_WITH_EXPRESSION_ALLOWED_IN_1_2_0);
  rejectDefinedAttributeWithDefaultValue(clusterConnection,CALL_FAILOVER_TIMEOUT,ClusterConnectionDefinition.NOTIFICATION_ATTEMPTS,ClusterConnectionDefinition.NOTIFICATION_INTERVAL,ClusterConnectionDefinition.INITIAL_CONNECT_ATTEMPTS);
  ResourceTransformationDescriptionBuilder groupingHandler=hornetqServer.addChildResource(GroupingHandlerDefinition.PATH);
  rejectAttributesWithExpression(groupingHandler,GroupingHandlerDefinition.TYPE,GroupingHandlerDefinition.GROUPING_HANDLER_ADDRESS,GroupingHandlerDefinition.TIMEOUT);
  ResourceTransformationDescriptionBuilder addressSetting=hornetqServer.addChildResource(AddressSettingDefinition.PATH);
  rejectAttributesWithExpression(addressSetting,AddressSettingDefinition.ATTRIBUTES_WITH_EXPRESSION_ALLOWED_IN_1_2_0);
  ResourceTransformationDescriptionBuilder connectorService=hornetqServer.addChildResource(ConnectorServiceDefinition.PATH);
  ResourceTransformationDescriptionBuilder connectorServiceParam=connectorService.addChildResource(ConnectorServiceParamDefinition.PATH);
  rejectAttributesWithExpression(connectorServiceParam,ConnectorServiceParamDefinition.VALUE);
  ResourceTransformationDescriptionBuilder connectionFactory=hornetqServer.addChildResource(ConnectionFactoryDefinition.PATH);
  rejectAttributesWithExpression(connectionFactory,ConnectionFactoryDefinition.ATTRIBUTES_WITH_EXPRESSION_ALLOWED_IN_1_2_0);
  rejectDefinedAttributeWithDefaultValue(connectionFactory,CALL_FAILOVER_TIMEOUT);
  convertUndefinedAttribute(connectionFactory,Regular.FACTORY_TYPE);
  ResourceTransformationDescriptionBuilder pooledConnectionFactory=hornetqServer.addChildResource(PooledConnectionFactoryDefinition.PATH);
  rejectAttributesWithExpression(pooledConnectionFactory,PooledConnectionFactoryDefinition.ATTRIBUTES_WITH_EXPRESSION_ALLOWED_IN_1_2_0);
  convertUndefinedAttribute(pooledConnectionFactory,Pooled.RECONNECT_ATTEMPTS);
  rejectDefinedAttributeWithDefaultValue(pooledConnectionFactory,CALL_FAILOVER_TIMEOUT,Pooled.INITIAL_CONNECT_ATTEMPTS,Common.COMPRESS_LARGE_MESSAGES,Pooled.INITIAL_MESSAGE_PACKET_SIZE,Pooled.USE_AUTO_RECOVERY);
  ResourceTransformationDescriptionBuilder jmsQueue=hornetqServer.addChildResource(JMSQueueDefinition.PATH);
  rejectAttributesWithExpression(jmsQueue,CommonAttributes.DESTINATION_ENTRIES,CommonAttributes.SELECTOR,CommonAttributes.DURABLE);
  ResourceTransformationDescriptionBuilder jmsTopic=hornetqServer.addChildResource(JMSTopicDefinition.PATH);
  rejectAttributesWithExpression(jmsTopic,CommonAttributes.DESTINATION_ENTRIES);
}
