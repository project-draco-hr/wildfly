{
  ResourceTransformationDescriptionBuilder hornetqServer=builder.addChildResource(pathElement(HORNETQ_SERVER));
  hornetqServer.getAttributeBuilder().setDiscard(new DiscardAttributeChecker(){
    @Override public boolean isDiscardExpressions(){
      return false;
    }
    @Override public boolean isDiscardUndefined(){
      return true;
    }
    @Override public boolean isOperationParameterDiscardable(    PathAddress address,    String attributeName,    ModelNode attributeValue,    ModelNode operation,    TransformationContext context){
      Set<String> clusterConnectionNames=context.readResourceFromRoot(address).getChildrenNames(ClusterConnectionDefinition.PATH.getKey());
      boolean clustered=!clusterConnectionNames.isEmpty();
      boolean wantsClustered=attributeValue.asBoolean(clustered);
      if (clustered && !wantsClustered) {
        String msg=MessagingLogger.ROOT_LOGGER.canNotChangeClusteredAttribute(address);
        context.getLogger().logAttributeWarning(address,operation,msg,CLUSTERED.getName());
      }
      return true;
    }
    @Override public boolean isResourceAttributeDiscardable(    PathAddress address,    String attributeName,    ModelNode attributeValue,    TransformationContext context){
      return true;
    }
  }
,CLUSTERED);
}
