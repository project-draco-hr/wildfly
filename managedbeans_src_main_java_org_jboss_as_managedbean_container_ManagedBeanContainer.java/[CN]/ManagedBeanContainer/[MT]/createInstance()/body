{
  T managedBean;
  try {
    managedBean=beanClass.newInstance();
  }
 catch (  Throwable t) {
    throw new RuntimeException("Failed to instantiate instance of MangedBean: " + beanClass);
  }
  for (  ResourceInjection<?> resourceInjection : resourceInjections) {
    resourceInjection.inject(managedBean);
  }
  final ClassLoader contextCl=getContextClassLoader();
  setContextClassLoader(deploymentClassLoader);
  try {
    if (postConstructMethods != null) {
      for (      Method postConstructMethod : postConstructMethods) {
        try {
          postConstructMethod.invoke(managedBean);
        }
 catch (        Throwable t) {
          throw new RuntimeException("Failed to invoke post construct method '" + postConstructMethod.getName() + "' for class "+ beanClass,t);
        }
      }
    }
  }
  finally {
    setContextClassLoader(contextCl);
  }
  if (!interceptors.isEmpty()) {
    final List<ManagedBeanInterceptor.AroundInvokeInterceptor<?>> aroundInvokeInterceptors=new ArrayList<ManagedBeanInterceptor.AroundInvokeInterceptor<?>>(interceptors.size());
    for (    ManagedBeanInterceptor<?> managedBeanInterceptor : interceptors) {
      try {
        aroundInvokeInterceptors.add(managedBeanInterceptor.createInstance());
      }
 catch (      Throwable t) {
        throw new RuntimeException("Failed to create instance of interceptor " + managedBeanInterceptor.toString(),t);
      }
    }
    try {
      managedBean=ManagedBeanProxyHandler.createProxy(beanClass,deploymentClassLoader,managedBean,aroundInvokeInterceptors);
    }
 catch (    Throwable t) {
      throw new RuntimeException("Unable to create managed bean proxy for " + beanClass,t);
    }
  }
  return managedBean;
}
