{
  final JTAEnvironmentBean jtaEnvironmentBean=jtaPropertyManager.getJTAEnvironmentBean();
  jtaEnvironmentBean.setLastResourceOptimisationInterfaceClassName(LastResource.class.getName());
  jtaEnvironmentBean.setXaRecoveryNodes(Collections.singletonList("1"));
  jtaEnvironmentBean.setXaResourceOrphanFilterClassNames(Arrays.asList(JTATransactionLogXAResourceOrphanFilter.class.getName(),JTANodeNameXAResourceOrphanFilter.class.getName()));
  jtaEnvironmentBean.setXAResourceRecordWrappingPlugin(new com.arjuna.ats.internal.jbossatx.jta.XAResourceRecordWrappingPluginImpl());
  final CoordinatorEnvironmentBean coordinatorEnvironmentBean=arjPropertyManager.getCoordinatorEnvironmentBean();
  coordinatorEnvironmentBean.setEnableStatistics(coordinatorEnableStatistics);
  coordinatorEnvironmentBean.setDefaultTimeout(coordinatorDefaultTimeout);
  coordinatorEnvironmentBean.setTransactionStatusManagerEnable(transactionStatusManagerEnable);
  Map<String,String> objStoreBrowserTypes=new HashMap<String,String>();
  objStoreBrowser=new ObjStoreBrowser();
  objStoreBrowserTypes.put("StateManager/BasicAction/TwoPhaseCoordinator/AtomicAction","com.arjuna.ats.internal.jta.tools.osb.mbean.jta.JTAActionBean");
  final ORB orb=orbInjector.getOptionalValue();
  if (orb == null) {
    jtaEnvironmentBean.setTransactionManagerClassName(com.arjuna.ats.jbossatx.jta.TransactionManagerDelegate.class.getName());
    jtaEnvironmentBean.setUserTransactionClassName(com.arjuna.ats.internal.jta.transaction.arjunacore.UserTransactionImple.class.getName());
    jtaEnvironmentBean.setTransactionSynchronizationRegistryClassName(com.arjuna.ats.internal.jta.transaction.arjunacore.TransactionSynchronizationRegistryImple.class.getName());
    final com.arjuna.ats.jbossatx.jta.TransactionManagerService service=new com.arjuna.ats.jbossatx.jta.TransactionManagerService();
    service.setJbossXATerminator(xaTerminatorInjector.getValue());
    service.setTransactionSynchronizationRegistry(new com.arjuna.ats.internal.jta.transaction.arjunacore.TransactionSynchronizationRegistryImple());
    try {
      service.create();
    }
 catch (    Exception e) {
      throw MESSAGES.managerStartFailure(e,"Transaction");
    }
    service.start();
    value=service;
  }
 else {
    jtaEnvironmentBean.setTransactionManagerClassName(com.arjuna.ats.jbossatx.jts.TransactionManagerDelegate.class.getName());
    jtaEnvironmentBean.setUserTransactionClassName(com.arjuna.ats.internal.jta.transaction.jts.UserTransactionImple.class.getName());
    jtaEnvironmentBean.setTransactionSynchronizationRegistryClassName(com.arjuna.ats.internal.jta.transaction.jts.TransactionSynchronizationRegistryImple.class.getName());
    final com.arjuna.ats.jbossatx.jts.TransactionManagerService service=new com.arjuna.ats.jbossatx.jts.TransactionManagerService();
    service.setJbossXATerminator(xaTerminatorInjector.getValue());
    service.setTransactionSynchronizationRegistry(new com.arjuna.ats.internal.jta.transaction.jts.TransactionSynchronizationRegistryImple());
    objStoreBrowserTypes.put("StateManager/BasicAction/TwoPhaseCoordinator/ArjunaTransactionImple","com.arjuna.ats.arjuna.tools.osb.mbean.ActionBean");
    try {
      service.create();
    }
 catch (    Exception e) {
      throw MESSAGES.createFailed(e);
    }
    try {
      service.start(orb);
    }
 catch (    Exception e) {
      throw MESSAGES.startFailure(e);
    }
    value=service;
  }
  try {
    objStoreBrowser.setTypes(objStoreBrowserTypes);
    objStoreBrowser.start();
  }
 catch (  Exception e) {
    throw MESSAGES.objectStoreStartFailure(e);
  }
}
