{
  final DeploymentUnit deploymentUnit=phaseContext.getDeploymentUnit();
  final EjbJarMetaData metaData=deploymentUnit.getAttachment(EjbDeploymentAttachmentKeys.EJB_JAR_METADATA);
  final EEModuleDescription eeModuleDescription=deploymentUnit.getAttachment(Attachments.EE_MODULE_DESCRIPTION);
  if (metaData == null) {
    return;
  }
  if (metaData.getInterceptors() == null) {
    return;
  }
  for (  InterceptorMetaData interceptor : metaData.getInterceptors()) {
    String interceptorClassName=interceptor.getInterceptorClass();
    AroundInvokesMetaData aroundInvokes=interceptor.getAroundInvokes();
    if (aroundInvokes != null) {
      for (      AroundInvokeMetaData aroundInvoke : aroundInvokes) {
        final InterceptorClassDescription.Builder builder=InterceptorClassDescription.builder();
        String methodName=aroundInvoke.getMethodName();
        MethodIdentifier methodIdentifier=MethodIdentifier.getIdentifier(Object.class,methodName,InvocationContext.class);
        builder.setAroundInvoke(methodIdentifier);
        if (aroundInvoke.getClassName() == null || aroundInvoke.getClassName().isEmpty()) {
          eeModuleDescription.addInterceptorMethodOverride(interceptorClassName,builder.build());
        }
 else {
          eeModuleDescription.addInterceptorMethodOverride(aroundInvoke.getClassName(),builder.build());
        }
      }
    }
    LifecycleCallbacksMetaData postConstructs=interceptor.getPostConstructs();
    if (postConstructs != null) {
      for (      LifecycleCallbackMetaData postConstruct : postConstructs) {
        final InterceptorClassDescription.Builder builder=InterceptorClassDescription.builder();
        String methodName=postConstruct.getMethodName();
        MethodIdentifier methodIdentifier=MethodIdentifier.getIdentifier(void.class,methodName,InvocationContext.class);
        builder.setPostConstruct(methodIdentifier);
        if (postConstruct.getClassName() == null || postConstruct.getClassName().isEmpty()) {
          eeModuleDescription.addInterceptorMethodOverride(interceptorClassName,builder.build());
        }
 else {
          eeModuleDescription.addInterceptorMethodOverride(postConstruct.getClassName(),builder.build());
        }
      }
    }
    LifecycleCallbacksMetaData preDestroys=interceptor.getPreDestroys();
    if (preDestroys != null) {
      for (      LifecycleCallbackMetaData preDestroy : preDestroys) {
        final InterceptorClassDescription.Builder builder=InterceptorClassDescription.builder();
        String methodName=preDestroy.getMethodName();
        MethodIdentifier methodIdentifier=MethodIdentifier.getIdentifier(void.class,methodName,InvocationContext.class);
        builder.setPreDestroy(methodIdentifier);
        if (preDestroy.getClassName() == null || preDestroy.getClassName().isEmpty()) {
          eeModuleDescription.addInterceptorMethodOverride(interceptorClassName,builder.build());
        }
 else {
          eeModuleDescription.addInterceptorMethodOverride(preDestroy.getClassName(),builder.build());
        }
      }
    }
  }
}
