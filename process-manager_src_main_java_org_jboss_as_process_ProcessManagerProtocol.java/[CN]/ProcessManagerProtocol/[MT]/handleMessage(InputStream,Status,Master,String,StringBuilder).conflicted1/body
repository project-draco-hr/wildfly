{
  Status status=currentStatus;
  if (status != Status.MORE) {
    return status;
  }
  status=StreamUtils.readWord(inputStream,b);
  if (status != Status.MORE) {
    return status;
  }
  final String name=b.toString();
  status=StreamUtils.readWord(inputStream,b);
  if (status != Status.MORE) {
    return status;
  }
  final String workingDirectory=b.toString();
  status=StreamUtils.readWord(inputStream,b);
  if (status != Status.MORE) {
    return status;
  }
  final String sizeString=b.toString();
  final int size;
  try {
    size=Integer.parseInt(sizeString,10);
  }
 catch (  NumberFormatException e) {
    e.printStackTrace(System.err);
    return status;
  }
  final List<String> execCmd=new ArrayList<String>();
  for (int i=0; i < size; i++) {
    status=StreamUtils.readWord(inputStream,b);
    if (status != Status.MORE) {
      return status;
    }
    execCmd.add(b.toString());
  }
  status=StreamUtils.readWord(inputStream,b);
  if (status != Status.MORE) {
    return status;
  }
  final String mapSizeString=b.toString();
  final int mapSize, lastEntry;
  try {
    mapSize=Integer.parseInt(mapSizeString,10);
    lastEntry=mapSize - 1;
  }
 catch (  NumberFormatException e) {
    e.printStackTrace(System.err);
    return status;
  }
  final Map<String,String> env=new HashMap<String,String>();
  for (int i=0; i < mapSize; i++) {
    status=StreamUtils.readWord(inputStream,b);
    if (status != Status.MORE) {
      return status;
    }
    final String key=b.toString();
    status=StreamUtils.readWord(inputStream,b);
    if (status == Status.MORE || (i == lastEntry && status == Status.END_OF_LINE)) {
      env.put(key,b.toString());
    }
 else {
      return status;
    }
  }
  master.addProcess(name,execCmd,env,workingDirectory);
  return status;
}
