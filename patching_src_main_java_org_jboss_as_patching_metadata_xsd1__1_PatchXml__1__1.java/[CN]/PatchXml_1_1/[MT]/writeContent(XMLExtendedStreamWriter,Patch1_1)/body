{
  writer.writeStartDocument();
  writer.writeStartElement(Element.PATCH.name);
  writer.writeDefaultNamespace(PatchXml.Namespace.PATCH_1_1.getNamespace());
  writer.writeAttribute(Attribute.ID.name,patch.getPatchId());
  writer.writeStartElement(Element.DESCRIPTION.name);
  writer.writeCharacters(patch.getDescription());
  writer.writeEndElement();
  final Identity identity=patch.getIdentity();
  writer.writeStartElement(Element.IDENTITY.name);
  writer.writeAttribute(Attribute.NAME.name,identity.getName());
  writer.writeAttribute(Attribute.VERSION.name,identity.getVersion());
  if (!identity.getRequires().isEmpty()) {
    writer.writeStartElement(Element.REQUIRES.name);
    for (    String patchId : identity.getRequires()) {
      writer.writeStartElement(Element.PATCH.name);
      writer.writeAttribute(Attribute.ID.name,patchId);
      writer.writeEndElement();
    }
    writer.writeEndElement();
  }
  writer.writeEndElement();
  final PatchType type=patch.getPatchType();
  if (type == PatchType.ONE_OFF) {
    writer.writeEmptyElement(Element.NO_UPGRADE.name);
  }
 else {
    writer.writeStartElement(Element.UPGRADE.name);
    writer.writeAttribute(Attribute.TO_VERSION.name,patch.getResultingVersion());
    writer.writeEndElement();
  }
  final List<PatchElement> elements=patch.getElements();
  for (  PatchElement element : elements) {
    writer.writeStartElement(Element.ELEMENT.name);
    writer.writeAttribute(Attribute.ID.name,element.getId());
    if (element.getDescription() != null) {
      writer.writeStartElement(Element.DESCRIPTION.name);
      writer.writeCharacters(element.getDescription());
      writer.writeEndElement();
    }
    final PatchElementProvider provider=element.getProvider();
    if (provider == null) {
      throw new XMLStreamException("Provider is missing for patch element " + element.getId());
    }
    if (provider.isAddOn()) {
      writer.writeStartElement(Element.ADD_ON.name);
    }
 else {
      writer.writeStartElement(Element.LAYER.name);
    }
    writer.writeAttribute(Attribute.NAME.name,provider.getName());
    writer.writeAttribute(Attribute.VERSION.name,provider.getVersion());
    if (!provider.getRequires().isEmpty()) {
      writer.writeStartElement(Element.REQUIRES.name);
      for (      String elementId : provider.getRequires()) {
        writer.writeStartElement(Element.ELEMENT.name);
        writer.writeAttribute(Attribute.ID.name,elementId);
        writer.writeEndElement();
      }
      writer.writeEndElement();
    }
    writer.writeEndElement();
    final Patch.PatchType upgrade=element.getPatchType();
    if (upgrade == Patch.PatchType.ONE_OFF) {
      writer.writeEmptyElement(Element.NO_UPGRADE.name);
    }
 else {
      writer.writeEmptyElement(Element.UPGRADE.name);
      writer.writeAttribute(Attribute.TO_VERSION.name,element.getResultingVersion());
    }
    final List<ContentModification> bundlesAdd=new ArrayList<ContentModification>();
    final List<ContentModification> bundlesUpdate=new ArrayList<ContentModification>();
    final List<ContentModification> bundlesRemove=new ArrayList<ContentModification>();
    final List<ContentModification> miscAdd=new ArrayList<ContentModification>();
    final List<ContentModification> miscUpdate=new ArrayList<ContentModification>();
    final List<ContentModification> miscRemove=new ArrayList<ContentModification>();
    final List<ContentModification> modulesAdd=new ArrayList<ContentModification>();
    final List<ContentModification> modulesUpdate=new ArrayList<ContentModification>();
    final List<ContentModification> modulesRemove=new ArrayList<ContentModification>();
    for (    final ContentModification mod : element.getModifications()) {
      final ModificationType modificationType=mod.getType();
      final ContentType contentType=mod.getItem().getContentType();
switch (contentType) {
case BUNDLE:
switch (modificationType) {
case ADD:
          bundlesAdd.add(mod);
        break;
case MODIFY:
      bundlesUpdate.add(mod);
    break;
case REMOVE:
  bundlesRemove.add(mod);
break;
}
break;
case MODULE:
switch (modificationType) {
case ADD:
modulesAdd.add(mod);
break;
case MODIFY:
modulesUpdate.add(mod);
break;
case REMOVE:
modulesRemove.add(mod);
break;
}
break;
case MISC:
switch (modificationType) {
case ADD:
miscAdd.add(mod);
break;
case MODIFY:
miscUpdate.add(mod);
break;
case REMOVE:
miscRemove.add(mod);
break;
}
break;
}
}
if (!modulesAdd.isEmpty() || !modulesUpdate.isEmpty() || !modulesRemove.isEmpty()) {
writer.writeStartElement(Element.MODULES.name);
writeSlottedItems(writer,Element.ADDED,modulesAdd);
writeSlottedItems(writer,Element.UPDATED,modulesUpdate);
writeSlottedItems(writer,Element.REMOVED,modulesRemove);
writer.writeEndElement();
}
if (!bundlesAdd.isEmpty() || !bundlesUpdate.isEmpty() || !bundlesRemove.isEmpty()) {
writer.writeStartElement(Element.BUNDLES.name);
writeSlottedItems(writer,Element.ADDED,bundlesAdd);
writeSlottedItems(writer,Element.UPDATED,bundlesUpdate);
writeSlottedItems(writer,Element.REMOVED,bundlesRemove);
writer.writeEndElement();
}
if (!miscAdd.isEmpty() || !miscUpdate.isEmpty() || !miscRemove.isEmpty()) {
writer.writeStartElement(Element.MISC_FILES.name);
writeMiscItems(writer,Element.ADDED,miscAdd);
writeMiscItems(writer,Element.UPDATED,miscUpdate);
writeMiscItems(writer,Element.REMOVED,miscRemove);
writer.writeEndElement();
}
writer.writeEndElement();
}
writer.writeEndElement();
writer.writeEndDocument();
}
