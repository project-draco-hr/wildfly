{
  final JavaArchive archive=ShrinkWrap.create(JavaArchive.class,"arquillian-service");
  log.debugf("Generating: %s",archive.getName());
  archive.addPackage(ArquillianService.class.getPackage());
  archive.addPackage(AbstractJMXProtocol.class.getPackage());
  archive.addClasses(ServerSetup.class,ServerSetupTask.class,ManagementClient.class,Authentication.class);
  final Set<String> loadableExtensions=new HashSet<String>();
  final String loadableExtensionsPath="META-INF/services/" + RemoteLoadableExtension.class.getName();
  for (  Archive<?> aux : auxArchives) {
    Node node=aux.get(loadableExtensionsPath);
    if (node != null) {
      BufferedReader br=new BufferedReader(new InputStreamReader(node.getAsset().openStream()));
      try {
        String line=br.readLine();
        while (line != null) {
          loadableExtensions.add(line);
          line=br.readLine();
        }
      }
 catch (      IOException ex) {
      }
    }
    log.debugf("Merging archive: %s",aux);
    archive.merge(aux);
  }
  loadableExtensions.add(JMXProtocolEndpointExtension.class.getName());
  archive.setManifest(new Asset(){
    public InputStream openStream(){
      ManifestBuilder builder=ManifestBuilder.newInstance();
      StringBuffer dependencies=new StringBuffer();
      dependencies.append("org.jboss.as.jmx,");
      dependencies.append("org.jboss.as.server,");
      dependencies.append("org.jboss.as.controller-client,");
      dependencies.append("org.jboss.as.osgi,");
      dependencies.append("org.jboss.jandex,");
      dependencies.append("org.jboss.logging,");
      dependencies.append("org.jboss.modules,");
      dependencies.append("org.jboss.msc,");
      dependencies.append("org.jboss.osgi.framework,");
      dependencies.append("org.osgi.core");
      builder.addManifestHeader("Dependencies",dependencies.toString());
      return builder.openStream();
    }
  }
);
  String serviceActivatorPath="META-INF/services/" + ServiceActivator.class.getName();
  final URL serviceActivatorURL=this.getClass().getClassLoader().getResource("arquillian-service/" + serviceActivatorPath);
  if (serviceActivatorURL == null) {
    throw new RuntimeException("No arquillian-service/" + serviceActivatorPath + " found by classloader: "+ this.getClass().getClassLoader());
  }
  archive.addAsResource(new UrlAsset(serviceActivatorURL),serviceActivatorPath);
  archive.delete(ArchivePaths.create(loadableExtensionsPath));
  archive.addAsResource(new Asset(){
    @Override public InputStream openStream(){
      ByteArrayOutputStream baos=new ByteArrayOutputStream();
      PrintWriter pw=new PrintWriter(new OutputStreamWriter(baos));
      for (      String line : loadableExtensions) {
        pw.println(line);
      }
      pw.close();
      return new ByteArrayInputStream(baos.toByteArray());
    }
  }
,loadableExtensionsPath);
  log.debugf("Loadable extensions: %s",loadableExtensions);
  log.tracef("Archive content: %s\n%s",archive,archive.toString(true));
  return archive;
}
