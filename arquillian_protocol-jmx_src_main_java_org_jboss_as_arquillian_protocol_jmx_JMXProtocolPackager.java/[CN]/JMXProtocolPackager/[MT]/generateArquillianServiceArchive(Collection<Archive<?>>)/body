{
  final JavaArchive archive=ShrinkWrap.create(JavaArchive.class,"arquillian-service");
  log.debugf("Generating: %s",archive.getName());
  archive.addPackage(ArquillianService.class.getPackage());
  archive.addPackage(AbstractJMXProtocol.class.getPackage());
  archive.addClasses(ServerSetup.class,ServerSetupTask.class,ManagementClient.class,Authentication.class,NetworkUtils.class);
  final Set<ModuleIdentifier> archiveDependencies=new LinkedHashSet<ModuleIdentifier>();
  archiveDependencies.add(ModuleIdentifier.create("org.jboss.as.jmx"));
  archiveDependencies.add(ModuleIdentifier.create("org.jboss.as.server"));
  archiveDependencies.add(ModuleIdentifier.create("org.jboss.as.controller-client"));
  archiveDependencies.add(ModuleIdentifier.create("org.jboss.jandex"));
  archiveDependencies.add(ModuleIdentifier.create("org.jboss.logging"));
  archiveDependencies.add(ModuleIdentifier.create("org.jboss.modules"));
  archiveDependencies.add(ModuleIdentifier.create("org.jboss.dmr"));
  archiveDependencies.add(ModuleIdentifier.create("org.jboss.msc"));
  archiveDependencies.add(ModuleIdentifier.create("org.osgi.core"));
  archiveDependencies.add(ModuleIdentifier.create("org.wildfly.security.manager"));
  final Set<String> loadableExtensions=new HashSet<String>();
  final String loadableExtensionsPath="META-INF/services/" + RemoteLoadableExtension.class.getName();
  for (  Archive<?> aux : auxArchives) {
    Node node=aux.get(loadableExtensionsPath);
    if (node != null) {
      BufferedReader br=new BufferedReader(new InputStreamReader(node.getAsset().openStream()));
      String line=br.readLine();
      while (line != null) {
        loadableExtensions.add(line);
        ClassLoader classLoader=getClass().getClassLoader();
        Object extension=classLoader.loadClass(line).newInstance();
        if (extension instanceof DependenciesProvider) {
          DependenciesProvider provider=(DependenciesProvider)extension;
          archiveDependencies.addAll(provider.getDependencies());
        }
        line=br.readLine();
      }
    }
    log.debugf("Merging archive: %s",aux);
    archive.merge(aux);
  }
  loadableExtensions.add(JMXProtocolEndpointExtension.class.getName());
  loadableExtensions.add(InContainerManagementClientExtension.class.getName());
  archive.setManifest(new Asset(){
    public InputStream openStream(){
      ManifestBuilder builder=ManifestBuilder.newInstance();
      Iterator<ModuleIdentifier> itdep=archiveDependencies.iterator();
      StringBuffer depspec=new StringBuffer("" + itdep.next());
      while (itdep.hasNext()) {
        depspec.append("," + itdep.next());
      }
      builder.addManifestHeader("Dependencies",depspec.toString());
      return builder.openStream();
    }
  }
);
  String serviceActivatorPath="META-INF/services/" + ServiceActivator.class.getName();
  final URL serviceActivatorURL=this.getClass().getClassLoader().getResource("arquillian-service/" + serviceActivatorPath);
  if (serviceActivatorURL == null) {
    throw new RuntimeException("No arquillian-service/" + serviceActivatorPath + " found by classloader: "+ this.getClass().getClassLoader());
  }
  archive.addAsResource(new UrlAsset(serviceActivatorURL),serviceActivatorPath);
  archive.addAsResource(new Asset(){
    public InputStream openStream(){
      ByteArrayOutputStream baos=new ByteArrayOutputStream();
      try {
        Properties props=new Properties();
        props.setProperty(Constants.BUNDLE_SYMBOLICNAME,"arquillian-service");
        StringBuilder builder=new StringBuilder();
        builder.append("org.jboss.arquillian.container.test.api,org.jboss.arquillian.junit,");
        builder.append("org.jboss.arquillian.osgi,org.jboss.arquillian.test.api,");
        builder.append("org.jboss.as.arquillian.api,org.jboss.as.arquillian.container,org.jboss.as.osgi,");
        builder.append("org.jboss.shrinkwrap.api,org.jboss.shrinkwrap.api.asset,org.jboss.shrinkwrap.api.spec,");
        builder.append("org.junit,org.junit.runner");
        props.setProperty(Constants.EXPORT_PACKAGE,builder.toString());
        props.store(baos,null);
      }
 catch (      IOException ex) {
        throw new IllegalStateException("Cannot write osgi metadata",ex);
      }
      return new ByteArrayInputStream(baos.toByteArray());
    }
  }
,"META-INF/jbosgi-xservice.properties");
  archive.delete(ArchivePaths.create(loadableExtensionsPath));
  archive.addAsResource(new Asset(){
    @Override public InputStream openStream(){
      ByteArrayOutputStream baos=new ByteArrayOutputStream();
      PrintWriter pw=new PrintWriter(new OutputStreamWriter(baos));
      for (      String line : loadableExtensions) {
        pw.println(line);
      }
      pw.close();
      return new ByteArrayInputStream(baos.toByteArray());
    }
  }
,loadableExtensionsPath);
  log.debugf("Loadable extensions: %s",loadableExtensions);
  log.tracef("Archive content: %s\n%s",archive,archive.toString(true));
  return archive;
}
