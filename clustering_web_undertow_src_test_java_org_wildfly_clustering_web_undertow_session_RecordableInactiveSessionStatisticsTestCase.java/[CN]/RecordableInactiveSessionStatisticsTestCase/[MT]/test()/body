{
  ImmutableSession session=mock(ImmutableSession.class);
  ImmutableSessionMetaData metaData=mock(ImmutableSessionMetaData.class);
  Date now=new Date();
  Date created=new Date(now.getTime() - TimeUnit.MINUTES.toMillis(20));
  when(session.getMetaData()).thenReturn(metaData);
  when(metaData.isExpired()).thenReturn(false);
  when(metaData.getCreationTime()).thenReturn(created);
  this.statistics.record(session);
  assertEquals(0L,this.statistics.getExpiredSessionCount());
  assertEquals(20L,this.statistics.getMaxSessionLifetime(TimeUnit.MINUTES));
  assertEquals(20L,this.statistics.getMeanSessionLifetime(TimeUnit.MINUTES));
  now=new Date();
  created=new Date(now.getTime() - TimeUnit.MINUTES.toMillis(10));
  when(metaData.isExpired()).thenReturn(true);
  when(metaData.getCreationTime()).thenReturn(created);
  this.statistics.record(session);
  assertEquals(1L,this.statistics.getExpiredSessionCount());
  assertEquals(20L,this.statistics.getMaxSessionLifetime(TimeUnit.MINUTES));
  assertEquals(15L,this.statistics.getMeanSessionLifetime(TimeUnit.MINUTES));
  this.statistics.reset();
  assertEquals(0L,this.statistics.getExpiredSessionCount());
  assertEquals(0L,this.statistics.getMaxSessionLifetime(TimeUnit.MINUTES));
  assertEquals(0L,this.statistics.getMeanSessionLifetime(TimeUnit.MINUTES));
}
