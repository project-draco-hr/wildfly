{
  DeploymentStatus oldStatus=previous;
  boolean hasFailed=!startFailedServices.isEmpty();
  boolean hasMissing=!servicesMissingDependencies.isEmpty();
  final DeploymentStatus newStatus=hasFailed || hasMissing ? DeploymentStatus.FAILED : DeploymentStatus.OK;
  if (oldStatus != newStatus) {
    previous=newStatus;
    if (hasFailed || hasMissing) {
      StringBuilder failures=null;
      if (hasFailed) {
        failures=new StringBuilder();
        for (        ServiceController<?> service : startFailedServices) {
          final StartException cause=service.getStartException();
          if (cause != null) {
            failures.append("\n        ").append(service.getName()).append(": ").append(cause);
          }
        }
      }
      StringBuilder missingDependencies=null;
      if (hasMissing) {
        missingDependencies=new StringBuilder();
        for (        ServiceController<?> service : servicesMissingDependencies) {
          StringBuilder dependencies=new StringBuilder();
          for (          ServiceName name : service.getImmediateUnavailableDependencies()) {
            dependencies.append("\n            ").append(name);
          }
          missingDependencies.append(ServerMessages.MESSAGES.missingDependencies(service.getName(),dependencies.toString()));
        }
      }
      if (hasFailed && hasMissing) {
        ServerLogger.DEPLOYMENT_LOGGER.deploymentHasMissingAndFailedServices(deploymentName,failures.toString(),missingDependencies.toString());
      }
 else       if (hasFailed) {
        ServerLogger.DEPLOYMENT_LOGGER.deploymentHasFailedServices(deploymentName,failures.toString());
      }
 else {
        ServerLogger.DEPLOYMENT_LOGGER.deploymentHasMissingDependencies(deploymentName,missingDependencies.toString());
      }
    }
 else {
      ServerLogger.DEPLOYMENT_LOGGER.deploymentStarted(deploymentName);
    }
  }
}
