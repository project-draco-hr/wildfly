{
  final String connectionName=PathAddress.pathAddress(operation.require(ModelDescriptionConstants.OP_ADDR)).getLastElement().getValue();
  final String outboundSocketBindingRef=RemoteOutboundConnnectionResourceDefinition.OUTBOUND_SOCKET_BINDING_REF.resolveModelAttribute(context,operation).asString();
  final ServiceName outboundSocketBindingDependency=OutboundSocketBinding.OUTBOUND_SOCKET_BINDING_BASE_SERVICE_NAME.append(outboundSocketBindingRef);
  final OptionMap connectionCreationOptions=getConnectionCreationOptions(context,operation);
  final RemoteOutboundConnectionService outboundConnectionService=new RemoteOutboundConnectionService(connectionName,connectionCreationOptions);
  final ServiceName serviceName=AbstractOutboundConnectionService.OUTBOUND_CONNECTION_BASE_SERVICE_NAME.append(connectionName);
  final ServiceName aliasServiceName=RemoteOutboundConnectionService.REMOTE_OUTBOUND_CONNECTION_BASE_SERVICE_NAME.append(connectionName);
  final ServiceBuilder<RemoteOutboundConnectionService> svcBuilder=context.getServiceTarget().addService(serviceName,outboundConnectionService).addAliases(aliasServiceName).addDependency(RemotingServices.SUBSYSTEM_ENDPOINT,Endpoint.class,outboundConnectionService.getEnpointInjector()).addDependency(outboundSocketBindingDependency,OutboundSocketBinding.class,outboundConnectionService.getDestinationOutboundSocketBindingInjector());
  if (verificationHandler != null) {
    svcBuilder.addListener(verificationHandler);
  }
  return svcBuilder.install();
}
