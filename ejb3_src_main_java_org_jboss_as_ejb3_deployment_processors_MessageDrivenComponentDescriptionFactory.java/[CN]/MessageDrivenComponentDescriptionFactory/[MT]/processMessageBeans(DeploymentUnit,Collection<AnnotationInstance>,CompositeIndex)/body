{
  if (messageBeanAnnotations.isEmpty())   return;
  final EjbJarDescription ejbJarDescription=getEjbJarDescription(deploymentUnit);
  final ServiceName deploymentUnitServiceName=deploymentUnit.getServiceName();
  DeploymentDescriptorEnvironment deploymentDescriptorEnvironment=null;
  for (  final AnnotationInstance messageBeanAnnotation : messageBeanAnnotations) {
    final AnnotationTarget target=messageBeanAnnotation.target();
    final ClassInfo beanClassInfo=(ClassInfo)target;
    if (!assertMDBClassValidity(beanClassInfo)) {
      continue;
    }
    final String ejbName=beanClassInfo.name().local();
    final AnnotationValue nameValue=messageBeanAnnotation.value("name");
    final String beanName=nameValue == null || nameValue.asString().isEmpty() ? ejbName : nameValue.asString();
    final MessageDrivenBeanMetaData beanMetaData=getEnterpriseBeanMetaData(deploymentUnit,beanName,MessageDrivenBeanMetaData.class);
    final String beanClassName;
    final String messageListenerInterfaceName;
    final Properties activationConfigProperties=getActivationConfigProperties(messageBeanAnnotation);
    final String messagingType;
    if (beanMetaData != null) {
      beanClassName=override(beanClassInfo.name().toString(),beanMetaData.getEjbClass());
      deploymentDescriptorEnvironment=new DeploymentDescriptorEnvironment("java:comp/env/",beanMetaData);
      if (beanMetaData instanceof MessageDrivenBeanMetaData) {
        final MessageDrivenBeanMetaData mdb=(MessageDrivenBeanMetaData)beanMetaData;
        messagingType=mdb.getMessagingType();
        final ActivationConfigMetaData activationConfigMetaData=mdb.getActivationConfig();
        if (activationConfigMetaData != null) {
          final ActivationConfigPropertiesMetaData propertiesMetaData=activationConfigMetaData.getActivationConfigProperties();
          if (propertiesMetaData != null) {
            for (            final ActivationConfigPropertyMetaData propertyMetaData : propertiesMetaData) {
              activationConfigProperties.put(propertyMetaData.getKey(),propertyMetaData.getValue());
            }
          }
        }
      }
 else       if (beanMetaData instanceof JBossGenericBeanMetaData) {
        final JBossGenericBeanMetaData mdb=(JBossGenericBeanMetaData)beanMetaData;
        messagingType=mdb.getMessagingType();
        final ActivationConfigMetaData activationConfigMetaData=mdb.getActivationConfig();
        if (activationConfigMetaData != null) {
          final ActivationConfigPropertiesMetaData propertiesMetaData=activationConfigMetaData.getActivationConfigProperties();
          if (propertiesMetaData != null) {
            for (            final ActivationConfigPropertyMetaData propertyMetaData : propertiesMetaData) {
              activationConfigProperties.put(propertyMetaData.getKey(),propertyMetaData.getValue());
            }
          }
        }
      }
 else {
        messagingType=null;
      }
      messageListenerInterfaceName=messagingType != null ? messagingType : getMessageListenerInterface(compositeIndex,messageBeanAnnotation);
    }
 else {
      beanClassName=beanClassInfo.name().toString();
      messageListenerInterfaceName=getMessageListenerInterface(compositeIndex,messageBeanAnnotation);
    }
    final String defaultResourceAdapterName=this.getDefaultResourceAdapterName(deploymentUnit.getServiceRegistry());
    final MessageDrivenComponentDescription beanDescription=new MessageDrivenComponentDescription(beanName,beanClassName,ejbJarDescription,deploymentUnitServiceName,messageListenerInterfaceName,activationConfigProperties,defaultResourceAdapterName,beanMetaData);
    beanDescription.setDeploymentDescriptorEnvironment(deploymentDescriptorEnvironment);
    addComponent(deploymentUnit,beanDescription);
  }
  EjbDeploymentMarker.mark(deploymentUnit);
}
