{
  if (securityRealms == null || securityRealms.length == 0) {
    LOGGER.warn("Empty security realms configuration.");
    return;
  }
  final List<ModelNode> updates=new ArrayList<ModelNode>();
  List<SecurityRealm> realmsToRemove=Arrays.asList(securityRealms);
  Collections.reverse(realmsToRemove);
  for (  final SecurityRealm securityRealm : realmsToRemove) {
    final String realmName=securityRealm.getName();
    if (LOGGER.isInfoEnabled()) {
      LOGGER.info("Removing security realm " + realmName);
    }
    final ModelNode op=Util.createRemoveOperation(getBaseAddress().append(CORE_SERVICE,MANAGEMENT).append(SECURITY_REALM,realmName));
    op.get(OPERATION_HEADERS,ROLLBACK_ON_RUNTIME_FAILURE).set(false);
    op.get(OPERATION_HEADERS,ALLOW_RESOURCE_SERVICE_RESTART).set(true);
    updates.add(op);
    final Authentication authentication=securityRealm.getAuthentication();
    if (authentication != null && authentication.getLdap() != null) {
      final ModelNode ldapOp=Util.createRemoveOperation(getBaseAddress().append(CORE_SERVICE,MANAGEMENT).append(LDAP_CONNECTION,authentication.getLdap().getConnection()));
      ldapOp.get(OPERATION_HEADERS,ROLLBACK_ON_RUNTIME_FAILURE).set(false);
      ldapOp.get(OPERATION_HEADERS,ALLOW_RESOURCE_SERVICE_RESTART).set(true);
      updates.add(ldapOp);
    }
  }
  CoreUtils.applyUpdates(updates,modelControllerClient);
  this.securityRealms=null;
}
