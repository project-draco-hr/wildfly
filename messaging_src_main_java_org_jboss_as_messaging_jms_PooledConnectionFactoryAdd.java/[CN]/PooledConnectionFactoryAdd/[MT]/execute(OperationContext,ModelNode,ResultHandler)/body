{
  ModelNode opAddr=operation.require(OP_ADDR);
  final PathAddress address=PathAddress.pathAddress(opAddr);
  final String name=address.getLastElement().getValue();
  final ModelNode compensatingOperation=Util.getResourceRemoveOperation(opAddr);
  final String jndiName;
  if (operation.hasDefined(CommonAttributes.ENTRIES)) {
    List<ModelNode> entries=operation.get(CommonAttributes.ENTRIES).asList();
    if (entries.size() == 0) {
      throw new OperationFailedException("at least 1 jndi entry should be provided",operation);
    }
    jndiName=entries.get(0).asString();
  }
 else {
    throw new OperationFailedException("at least 1 jndi entry should be provided",operation);
  }
  final String txSupport;
  if (operation.hasDefined(TRANSACTION)) {
    String txType=operation.get(TRANSACTION).asString();
    if (LOCAL.equals(txType)) {
      txSupport=LOCAL_TX;
    }
 else     if (NONE.equals(txType)) {
      txSupport=NO_TX;
    }
 else {
      txSupport=XA_TX;
    }
  }
 else {
    txSupport=XA_TX;
  }
  final ModelNode subModel=context.getSubModel();
  for (  final JMSServices.NodeAttribute attribute : CONNECTION_FACTORY_ATTRS) {
    final String attrName=attribute.getName();
    if (operation.hasDefined(attrName)) {
      subModel.get(attrName).set(operation.get(attrName));
    }
  }
  if (context.getRuntimeContext() != null) {
    context.getRuntimeContext().setRuntimeTask(new RuntimeTask(){
      public void execute(      RuntimeTaskContext context) throws OperationFailedException {
        try {
          ServiceTarget serviceTarget=context.getServiceTarget();
          List<String> connectors=getConnectors(operation);
          List<PooledConnectionFactoryConfigProperties> adapterParams=getAdapterParams(operation);
          ServiceName hornetQResourceAdapterService=MessagingServices.POOLED_CONNECTION_FACTORY_BASE.append(name);
          PooledConnectionFactoryService resourceAdapterService=new PooledConnectionFactoryService(name,connectors,adapterParams,jndiName,txSupport);
          ServiceBuilder serviceBuilder=serviceTarget.addService(hornetQResourceAdapterService,resourceAdapterService).addDependency(TxnServices.JBOSS_TXN_TRANSACTION_MANAGER,resourceAdapterService.getTransactionManager()).addDependency(MessagingServices.JBOSS_MESSAGING,HornetQServer.class,resourceAdapterService.getHornetQService());
          serviceBuilder.setInitialMode(Mode.ACTIVE).install();
        }
 catch (        Exception e) {
          e.printStackTrace();
          resultHandler.handleCancellation();
        }
        resultHandler.handleResultComplete();
      }
    }
);
  }
  return new BasicOperationResult(compensatingOperation);
}
