{
  ModelNode opAddr=operation.require(OP_ADDR);
  final PathAddress address=PathAddress.pathAddress(opAddr);
  final String name=address.getLastElement().getValue();
  final ModelNode resolvedModel=model.clone();
  for (  final AttributeDefinition attribute : getDefinitions(PooledConnectionFactoryDefinition.ATTRIBUTES)) {
    resolvedModel.get(attribute.getName()).set(attribute.resolveModelAttribute(context,resolvedModel));
  }
  final List<String> jndiNames=new ArrayList<String>();
  for (  ModelNode node : resolvedModel.get(Common.ENTRIES.getName()).asList()) {
    jndiNames.add(node.asString());
  }
  final int minPoolSize=resolvedModel.get(ConnectionFactoryAttributes.Pooled.MIN_POOL_SIZE.getName()).asInt();
  final int maxPoolSize=resolvedModel.get(ConnectionFactoryAttributes.Pooled.MAX_POOL_SIZE.getName()).asInt();
  final String txSupport;
  if (resolvedModel.hasDefined(ConnectionFactoryAttributes.Pooled.TRANSACTION.getName())) {
    String txType=resolvedModel.get(ConnectionFactoryAttributes.Pooled.TRANSACTION.getName()).asString();
    if (LOCAL.equals(txType)) {
      txSupport=LOCAL_TX;
    }
 else     if (NONE.equals(txType)) {
      txSupport=NO_TX;
    }
 else {
      txSupport=XA_TX;
    }
  }
 else {
    txSupport=XA_TX;
  }
  ServiceTarget serviceTarget=context.getServiceTarget();
  List<String> connectors=getConnectors(resolvedModel);
  String discoveryGroupName=getDiscoveryGroup(resolvedModel);
  String jgroupsChannelName=null;
  if (discoveryGroupName != null) {
    Resource dgResource=context.readResourceFromRoot(MessagingServices.getHornetQServerPathAddress(address).append(CommonAttributes.DISCOVERY_GROUP,discoveryGroupName));
    ModelNode dgModel=dgResource.getModel();
    jgroupsChannelName=JGROUPS_CHANNEL.resolveModelAttribute(context,dgModel).asString();
  }
  List<PooledConnectionFactoryConfigProperties> adapterParams=getAdapterParams(resolvedModel,context);
  final PathAddress hqServiceAddress=MessagingServices.getHornetQServerPathAddress(address);
  PooledConnectionFactoryService.installService(verificationHandler,newControllers,serviceTarget,name,hqServiceAddress.getLastElement().getValue(),connectors,discoveryGroupName,jgroupsChannelName,adapterParams,jndiNames,txSupport,minPoolSize,maxPoolSize);
}
