{
  KernelServicesBuilder builder=createKernelServicesBuilder(AdditionalInitialization.MANAGEMENT);
  ModelVersion version_1_1_0=ModelVersion.create(1,1,0);
  builder.createLegacyKernelServicesBuilder(null,controllerVersion,version_1_1_0).addMavenResourceURL("org.jboss.as:jboss-as-clustering-jgroups:" + controllerVersion.getMavenGavVersion()).dontPersistXml();
  KernelServices mainServices=builder.build();
  Assert.assertTrue(mainServices.isSuccessfulBoot());
  KernelServices legacyServices=mainServices.getLegacyServices(version);
  Assert.assertNotNull(legacyServices);
  Assert.assertTrue(legacyServices.isSuccessfulBoot());
  PathAddress subsystemAddress=PathAddress.pathAddress(PathElement.pathElement(SUBSYSTEM,JGroupsExtension.SUBSYSTEM_NAME));
  ModelTestUtils.checkFailedTransformedBootOperations(mainServices,version,builder.parseXmlResource("subsystem-jgroups-test.xml"),new FailedOperationTransformationConfig().addFailedAttribute(subsystemAddress.append(PathElement.pathElement("stack")).append(PathElement.pathElement("transport")),new FailedOperationTransformationConfig.RejectExpressionsConfig(ModelKeys.SHARED)).addFailedAttribute(subsystemAddress.append(PathElement.pathElement("stack")).append(PathElement.pathElement("transport")).append("property"),new FailedOperationTransformationConfig.RejectExpressionsConfig(VALUE)).addFailedAttribute(subsystemAddress.append(PathElement.pathElement("stack")).append(PathElement.pathElement("protocol")).append("property"),new FailedOperationTransformationConfig.RejectExpressionsConfig(VALUE)));
}
