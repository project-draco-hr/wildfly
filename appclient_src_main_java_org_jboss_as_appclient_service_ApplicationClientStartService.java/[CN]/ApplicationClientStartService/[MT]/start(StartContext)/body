{
  try {
    final Endpoint endpoint=Remoting.createEndpoint("endpoint",OptionMap.EMPTY);
    endpoint.addConnectionProvider("remote",new RemoteConnectionProviderFactory(),OptionMap.create(Options.SSL_ENABLED,Boolean.FALSE));
    final IoFuture<Connection> futureConnection=endpoint.connect(new URI(hostUrl),OptionMap.create(Options.SASL_POLICY_NOANONYMOUS,Boolean.FALSE),new AnonymousCallbackHandler());
    final Connection connection=IoFutureHelper.get(futureConnection,5L,TimeUnit.SECONDS);
    thread=new Thread(new Runnable(){
      @Override public void run(){
        ClassLoader oldTccl=SecurityActions.getContextClassLoader();
        try {
          try {
            SecurityActions.setContextClassLoader(classLoader);
            EJBClientContext ejbClientContext=EJBClientContext.create();
            ejbClientContext.registerConnection(connection);
            applicationClientDeploymentServiceInjectedValue.getValue().getDeploymentCompleteLatch().await();
            try {
              NamespaceContextSelector.pushCurrentSelector(namespaceContextSelectorInjectedValue);
              applicationClientComponent.getValue().createInstance();
              mainMethod.invoke(null,new Object[]{parameters});
            }
  finally {
              NamespaceContextSelector.popCurrentSelector();
            }
          }
 catch (          InvocationTargetException e) {
            ROOT_LOGGER.caughtException(e.getTargetException(),e.getTargetException());
          }
catch (          IllegalAccessException e) {
            ROOT_LOGGER.exceptionRunningAppClient(e,e.getClass().getSimpleName());
          }
catch (          InterruptedException e) {
            ROOT_LOGGER.exceptionRunningAppClient(e,e.getClass().getSimpleName());
          }
 finally {
            SecurityActions.setContextClassLoader(oldTccl);
          }
        }
  finally {
          CurrentServiceContainer.getServiceContainer().shutdown();
        }
      }
    }
);
    thread.start();
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
catch (  URISyntaxException e) {
    throw new RuntimeException(e);
  }
}
