{
  PathAddress cacheAddress=PathAddress.pathAddress(operation.get(OP_ADDR));
  PathAddress containerAddress=cacheAddress.subAddress(0,cacheAddress.size() - 1);
  String cacheName=cacheAddress.getLastElement().getValue();
  String containerName=containerAddress.getLastElement().getValue();
  String jndiName=ModelNodes.asString(CacheResourceDefinition.JNDI_NAME.resolveModelAttribute(context,cacheModel));
  ServiceController.Mode initialMode=StartMode.valueOf(CacheResourceDefinition.START.resolveModelAttribute(context,cacheModel).asString()).getMode();
  ModuleIdentifier module=ModelNodes.asModuleIdentifier(CacheResourceDefinition.MODULE.resolveModelAttribute(context,cacheModel));
  if ((module == null) && Indexing.valueOf(CacheResourceDefinition.INDEXING.resolveModelAttribute(context,cacheModel).asString()).isEnabled()) {
    module=QUERY_MODULE;
  }
  List<Dependency<?>> dependencies=new LinkedList<>();
  ConfigurationBuilder builder=new ConfigurationBuilder().read(getDefaultConfiguration(this.mode));
  CacheConfigurationDependencies cacheConfigurationDependencies=new CacheConfigurationDependencies(this.mode,builder,module);
  CacheDependencies cacheDependencies=new CacheDependencies();
  processModelNode(context,containerName,containerModel,cacheModel,builder,cacheConfigurationDependencies,cacheDependencies,dependencies);
  String defaultCacheName=CacheContainerResourceDefinition.DEFAULT_CACHE.resolveModelAttribute(context,containerModel).asString();
  boolean defaultCache=cacheName.equals(defaultCacheName);
  ServiceTarget target=context.getServiceTarget();
  Collection<ServiceController<?>> controllers=new ArrayList<>(3);
  controllers.add(this.installCacheConfigurationService(target,containerName,cacheName,defaultCache,cacheConfigurationDependencies,dependencies,verificationHandler));
  log.debugf("Cache configuration service for %s installed for container %s",cacheName,containerName);
  controllers.add(this.installCacheService(target,containerName,cacheName,defaultCache,initialMode,cacheDependencies,verificationHandler));
  controllers.add(this.installJndiService(target,containerName,cacheName,defaultCache,jndiName,verificationHandler));
  log.debugf("Cache service for cache %s installed for container %s",cacheName,containerName);
  Class<? extends CacheServiceInstaller> installerClass=this.mode.isClustered() ? ClusteredCacheServiceInstaller.class : LocalCacheServiceInstaller.class;
  for (  CacheServiceInstaller installer : ServiceLoader.load(installerClass,installerClass.getClassLoader())) {
    log.debugf("Installing %s for cache %s of container %s",installer.getClass().getSimpleName(),cacheName,containerName);
    controllers.addAll(installer.install(target,containerName,cacheName));
  }
  return controllers;
}
