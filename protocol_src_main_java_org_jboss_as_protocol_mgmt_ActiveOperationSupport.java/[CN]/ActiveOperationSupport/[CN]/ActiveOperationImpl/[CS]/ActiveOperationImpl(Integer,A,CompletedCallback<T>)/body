{
  super(executor);
  this.operationId=operationId;
  this.attachment=attachment;
  addListener(new Listener<T,Object>(){
    @Override public void handleComplete(    AsyncFuture<? extends T> asyncFuture,    Object attachment){
      try {
        callback.completed(asyncFuture.get());
      }
 catch (      Exception e) {
      }
    }
    @Override public void handleFailed(    AsyncFuture<? extends T> asyncFuture,    Throwable cause,    Object attachment){
      if (cause instanceof Exception) {
        callback.failed((Exception)cause);
      }
 else {
        callback.failed(new RuntimeException(cause));
      }
    }
    @Override public void handleCancelled(    AsyncFuture<? extends T> asyncFuture,    Object attachment){
      removeActiveOperation(operationId);
      callback.cancelled();
      ProtocolLogger.ROOT_LOGGER.infof("cancelled operation (%d) attachment: (%s) this: %s.",getOperationId(),getAttachment(),ActiveOperationSupport.this);
    }
  }
,null);
}
