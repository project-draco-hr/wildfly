{
  String subsystemXml=readResource("remoting-without-expressions.xml");
  KernelServicesBuilder builder=createKernelServicesBuilder(createAdditionalInitialization()).setSubsystemXml(subsystemXml);
  ModelVersion version_1_1=ModelVersion.create(1,1);
  builder.createLegacyKernelServicesBuilder(createAdditionalInitialization(),version_1_1).addMavenResourceURL("org.jboss.as:jboss-as-remoting:7.1.2.Final");
  KernelServices mainServices=builder.build();
  assertTrue(mainServices.isSuccessfulBoot());
  KernelServices legacyServices=mainServices.getLegacyServices(version_1_1);
  assertNotNull(legacyServices);
  assertTrue(legacyServices.isSuccessfulBoot());
  checkSubsystemModelTransformation(mainServices,version_1_1);
  checkRejectWorkerThreadAttributes(mainServices,version_1_1);
  checkRejectSASLAttribute(mainServices,version_1_1,CommonAttributes.REUSE_SESSION,"${reuse.session:true}");
  checkRejectSASLAttribute(mainServices,version_1_1,CommonAttributes.SERVER_AUTH,"${server.auth:true}");
  checkRejectSASLProperty(mainServices,version_1_1);
  checkRejectSASLPolicyAttributes(mainServices,version_1_1);
  checkRejectConnectorProperty(mainServices,version_1_1);
  checkRejectRemoteOutboundConnectionUsername(mainServices,version_1_1);
  checkRejectOutboundConnectionProperty(mainServices,version_1_1,CommonAttributes.REMOTE_OUTBOUND_CONNECTION,"remote-conn1");
  checkRejectOutboundConnectionProperty(mainServices,version_1_1,CommonAttributes.LOCAL_OUTBOUND_CONNECTION,"local-conn1");
  checkRejectOutboundConnectionProperty(mainServices,version_1_1,CommonAttributes.OUTBOUND_CONNECTION,"generic-conn1");
}
