{
  String name=null;
  String group=null;
  Boolean start=null;
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    final String value=reader.getAttributeValue(i);
    if (reader.getAttributeNamespace(i) != null) {
      throw unexpectedAttribute(reader,i);
    }
 else {
      final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case NAME:
{
          if (!serverNames.add(value)) {
            throw new XMLStreamException("Duplicate server declaration " + value,reader.getLocation());
          }
          name=value;
          break;
        }
case GROUP:
{
        group=value;
        break;
      }
case START:
{
      start=Boolean.valueOf(value);
      break;
    }
default :
  throw unexpectedAttribute(reader,i);
}
}
}
if (name == null) {
throw ParseUtils.missingRequired(reader,Collections.singleton(Attribute.NAME));
}
if (group == null) {
throw ParseUtils.missingRequired(reader,Collections.singleton(Attribute.GROUP));
}
list.add(new HostServerAdd(name,group));
NamedModelUpdates<JvmElement> jvm=null;
Collection<PropertyAdd> systemProperties=null;
NameOffset socketBinding=null;
while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
switch (Namespace.forUri(reader.getNamespaceURI())) {
case DOMAIN_1_0:
{
final Element element=Element.forName(reader.getLocalName());
switch (element) {
case INTERFACE_SPECS:
{
    parseServerElementInterfaces(name,reader,list);
    break;
  }
case JVM:
{
  if (jvm != null) {
    throw new XMLStreamException(element.getLocalName() + " already defined",reader.getLocation());
  }
  jvm=parseJvm(reader);
  list.add(HostServerUpdate.create(name,new ServerElementJvmAdd(jvm.name)));
  for (  AbstractModelUpdate<JvmElement,?> update : jvm.updates) {
    list.add(HostServerUpdate.create(name,ServerElementJvmUpdate.create(update)));
  }
  break;
}
case SOCKET_BINDING_GROUP:
{
if (socketBinding != null) {
  throw new XMLStreamException(element.getLocalName() + " already defined",reader.getLocation());
}
socketBinding=parseSocketBindingGroupRef(reader);
list.add(HostServerUpdate.create(name,new ServerElementSocketBindingGroupUpdate(socketBinding.name)));
if (socketBinding.offset > 0) {
  list.add(HostServerUpdate.create(name,new ServerElementSocketBindingPortOffsetUpdate(socketBinding.offset)));
}
break;
}
case SYSTEM_PROPERTIES:
{
if (systemProperties != null) {
throw new XMLStreamException(element.getLocalName() + " already declared",reader.getLocation());
}
systemProperties=parseProperties(reader,Element.PROPERTY,true);
for (final PropertyAdd propertyUpdate : systemProperties) {
list.add(HostServerUpdate.create(name,new ServerElementSystemPropertyUpdate(propertyUpdate)));
}
break;
}
default :
throw unexpectedElement(reader);
}
break;
}
default :
throw unexpectedElement(reader);
}
}
boolean isStart=start == null ? true : start.booleanValue();
list.add(HostServerUpdate.create(name,new ServerElementStartStopUpdate(isStart)));
}
