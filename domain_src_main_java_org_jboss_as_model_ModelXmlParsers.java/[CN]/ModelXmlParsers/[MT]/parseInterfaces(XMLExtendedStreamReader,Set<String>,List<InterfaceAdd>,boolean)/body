{
  requireNoAttributes(reader);
  final Map<Element,AbstractInterfaceCriteriaElement<?>> interfaceCriteria=new HashMap<Element,AbstractInterfaceCriteriaElement<?>>();
  Element anyElement=null;
  while (reader.nextTag() != END_ELEMENT) {
    requireSingleAttribute(reader,Attribute.NAME.getLocalName());
    final String name=reader.getAttributeValue(0);
    if (!names.add(name)) {
      throw new XMLStreamException("Duplicate interface declaration",reader.getLocation());
    }
    if (reader.nextTag() == END_ELEMENT) {
      throw unexpectedEndElement(reader);
    }
    boolean first=true;
    do {
      if (Namespace.forUri(reader.getNamespaceURI()) != Namespace.DOMAIN_1_0) {
        throw unexpectedElement(reader);
      }
      final Element element=Element.forName(reader.getLocalName());
switch (element) {
case ANY_ADDRESS:
case ANY_IPV4_ADDRESS:
case ANY_IPV6_ADDRESS:
{
          if (!first || anyElement != null) {
            throw unexpectedElement(reader);
          }
          requireNoAttributes(reader);
          requireNoContent(reader);
          if (reader.nextTag() != END_ELEMENT) {
            throw unexpectedElement(reader);
          }
          anyElement=element;
        }
default :
{
        if (anyElement != null) {
          throw unexpectedElement(reader);
        }
switch (element) {
case ANY:
case NOT:
{
            final CompoundCriteriaElement criteria=InterfaceParsingUtils.createCompoundCriteria(reader,element == Element.ANY);
            interfaceCriteria.put(element,criteria);
            break;
          }
default :
{
          final AbstractInterfaceCriteriaElement<?> criteria=InterfaceParsingUtils.parseSimpleInterfaceCriteria(reader,element);
          interfaceCriteria.put(element,criteria);
        }
    }
  }
}
first=false;
}
 while (reader.nextTag() != END_ELEMENT);
if (checkSpecified && anyElement == null && interfaceCriteria.isEmpty()) {
throw new XMLStreamException("Either an inet-address element or some other interface criteria element is required",reader.getLocation());
}
list.add(new InterfaceAdd(name,anyElement == Element.ANY_IPV4_ADDRESS,anyElement == Element.ANY_IPV6_ADDRESS,anyElement == Element.ANY_ADDRESS,interfaceCriteria.values()));
}
return names;
}
