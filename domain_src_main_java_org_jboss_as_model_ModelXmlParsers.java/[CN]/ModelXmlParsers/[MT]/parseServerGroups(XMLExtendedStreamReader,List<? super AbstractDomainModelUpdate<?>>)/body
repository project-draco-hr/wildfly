{
  String name=null;
  String profile=null;
  JvmElement jvm=null;
  SocketBindingGroupRefElement bindingGroup=null;
  Collection<PropertyAdd> systemProperties=null;
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    final String value=reader.getAttributeValue(i);
    if (reader.getAttributeNamespace(i) != null) {
      throw ParseUtils.unexpectedAttribute(reader,i);
    }
 else {
      final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case NAME:
{
          name=value;
          break;
        }
case PROFILE:
{
        profile=value;
        break;
      }
default :
    throw ParseUtils.unexpectedAttribute(reader,i);
}
}
}
if (name == null) {
throw ParseUtils.missingRequired(reader,Collections.singleton(Attribute.NAME));
}
if (profile == null) {
throw ParseUtils.missingRequired(reader,Collections.singleton(Attribute.PROFILE));
}
while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
switch (Namespace.forUri(reader.getNamespaceURI())) {
case DOMAIN_1_0:
{
  final Element element=Element.forName(reader.getLocalName());
switch (element) {
case JVM:
{
      if (jvm != null) {
        throw new XMLStreamException(element.getLocalName() + " already defined",reader.getLocation());
      }
      jvm=new JvmElement(reader);
      break;
    }
case SOCKET_BINDING_GROUP:
{
    if (bindingGroup != null) {
      throw new XMLStreamException(element.getLocalName() + " already defined",reader.getLocation());
    }
    bindingGroup=new SocketBindingGroupRefElement(reader);
    break;
  }
case DEPLOYMENTS:
{
  break;
}
case SYSTEM_PROPERTIES:
{
if (systemProperties != null) {
  throw new XMLStreamException(element.getLocalName() + " already declared",reader.getLocation());
}
systemProperties=parseSystemProperty(reader,Element.PROPERTY,true);
break;
}
default :
throw ParseUtils.unexpectedElement(reader);
}
break;
}
default :
throw ParseUtils.unexpectedElement(reader);
}
}
list.add(new ServerGroupAdd(name,profile,jvm,bindingGroup));
if (systemProperties != null && !systemProperties.isEmpty()) {
for (final PropertyAdd propertyUpdate : systemProperties) {
list.add(new ServerGroupPropertiesUpdate(name,propertyUpdate));
}
}
}
