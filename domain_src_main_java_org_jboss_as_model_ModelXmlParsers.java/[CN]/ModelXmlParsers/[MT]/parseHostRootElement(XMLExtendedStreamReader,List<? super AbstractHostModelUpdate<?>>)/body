{
  final List<NamespacePrefix> prefixes=readNamespaces(reader);
  if (!prefixes.isEmpty())   list.add(new HostNamespaceUpdate(prefixes));
  String name=null;
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
switch (Namespace.forUri(reader.getAttributeNamespace(i))) {
case DOMAIN_1_0:
{
        final String value=reader.getAttributeValue(i);
        final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case NAME:
{
            name=value;
            break;
          }
default :
        throw unexpectedAttribute(reader,i);
    }
  }
case XML_SCHEMA_INSTANCE:
{
switch (Attribute.forName(reader.getAttributeLocalName(i))) {
case SCHEMA_LOCATION:
{
      final List<SchemaLocation> locationList=readSchemaLocations(reader,i);
      list.add(new HostSchemaLocationUpdate(locationList));
      break;
    }
case NO_NAMESPACE_SCHEMA_LOCATION:
{
    break;
  }
default :
{
  throw unexpectedAttribute(reader,i);
}
}
}
}
}
if (name == null) {
name=HostModel.DEFAULT_NAME;
}
list.add(new HostNameUpdate(name));
Element element=nextElement(reader);
if (element == Element.EXTENSIONS) {
Set<String> extensionModules=parseExtensions(reader);
for (String moduleName : extensionModules) {
list.add(new HostExtensionAdd(moduleName));
}
element=nextElement(reader);
}
if (element == Element.SYSTEM_PROPERTIES) {
parseHostSystemProperties(reader,list);
element=nextElement(reader);
}
if (element == Element.MANAGEMENT) {
parseManagement(reader,list);
element=nextElement(reader);
}
if (element == Element.DOMAIN_CONTROLLER) {
parseDomainController(reader,list);
element=nextElement(reader);
}
if (element == Element.INTERFACES) {
parseHostInterfaces(reader,list);
element=nextElement(reader);
}
if (element == Element.JVMS) {
parseJvms(reader,list);
element=nextElement(reader);
}
if (element == Element.SERVERS) {
parseServers(reader,list);
element=nextElement(reader);
}
}
