{
  final List<NamespacePrefix> prefixes=readNamespaces(reader);
  if (!prefixes.isEmpty())   list.add(new DomainNamespaceUpdate(prefixes));
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
switch (Namespace.forUri(reader.getAttributeNamespace(i))) {
case DOMAIN_1_0:
{
        throw unexpectedAttribute(reader,i);
      }
case XML_SCHEMA_INSTANCE:
{
switch (Attribute.forName(reader.getAttributeLocalName(i))) {
case SCHEMA_LOCATION:
{
          final List<SchemaLocation> locationList=readSchemaLocations(reader,i);
          list.add(new DomainSchemaLocationUpdate(locationList));
          break;
        }
case NO_NAMESPACE_SCHEMA_LOCATION:
{
        break;
      }
default :
{
      throw unexpectedAttribute(reader,i);
    }
}
}
}
}
Element element=nextElement(reader);
if (element == Element.EXTENSIONS) {
Set<String> extensionModules=parseExtensions(reader);
for (String moduleName : extensionModules) {
list.add(new DomainExtensionAdd(moduleName));
}
element=nextElement(reader);
}
if (element == Element.PROFILES) {
parseProfiles(reader,list);
element=nextElement(reader);
}
Set<String> interfaceNames=Collections.emptySet();
if (element == Element.INTERFACES) {
interfaceNames=parseDomainInterfaces(reader,list);
element=nextElement(reader);
}
if (element == Element.SOCKET_BINDING_GROUPS) {
parseDomainSocketBindingGroups(reader,list,interfaceNames);
element=nextElement(reader);
}
if (element == Element.SYSTEM_PROPERTIES) {
parseDomainSystemProperties(reader,list);
element=nextElement(reader);
}
if (element == Element.DEPLOYMENTS) {
parseDeployments(reader,list,null);
element=nextElement(reader);
}
if (element == Element.SERVER_GROUPS) {
parseServerGroups(reader,list);
element=nextElement(reader);
}
if (element != null) {
throw unexpectedElement(reader);
}
}
