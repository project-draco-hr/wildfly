{
  List<AbstractModelUpdate<JvmElement,?>> updates=new ArrayList<AbstractModelUpdate<JvmElement,?>>();
  String name=null;
  String home=null;
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    final String value=reader.getAttributeValue(i);
    if (reader.getAttributeNamespace(i) != null) {
      throw ParseUtils.unexpectedAttribute(reader,i);
    }
 else {
      final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case NAME:
{
          if (name != null)           throw ParseUtils.duplicateAttribute(reader,attribute.getLocalName());
          name=value;
          break;
        }
case JAVA_HOME:
{
        if (home != null)         throw ParseUtils.duplicateAttribute(reader,attribute.getLocalName());
        updates.add(new JvmHomeUpdate(value));
        break;
      }
default :
    throw ParseUtils.unexpectedAttribute(reader,i);
}
}
}
if (name == null) {
throw ParseUtils.missingRequired(reader,Collections.singleton(Attribute.NAME));
}
Collection<PropertyAdd> environmentVariables=null;
Collection<PropertyAdd> systemProperties=null;
while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
switch (Namespace.forUri(reader.getNamespaceURI())) {
case DOMAIN_1_0:
{
  final Element element=Element.forName(reader.getLocalName());
switch (element) {
case HEAP:
{
      updates.addAll(parseHeap(reader));
      break;
    }
case ENVIRONMENT_VARIABLES:
{
    if (environmentVariables != null) {
      throw new XMLStreamException(element.getLocalName() + " already declared",reader.getLocation());
    }
    environmentVariables=parseProperties(reader,Element.VARIABLE,true);
    for (    PropertyAdd propAdd : environmentVariables) {
      updates.add(new JvmEnvironmentVariableUpdate(propAdd));
    }
    break;
  }
case SYSTEM_PROPERTIES:
{
  if (systemProperties != null) {
    throw new XMLStreamException(element.getLocalName() + " already declared",reader.getLocation());
  }
  systemProperties=parseProperties(reader,Element.PROPERTY,true);
  for (  PropertyAdd propAdd : systemProperties) {
    updates.add(new JvmSystemPropertiesUpdate(propAdd));
  }
  break;
}
default :
throw ParseUtils.unexpectedElement(reader);
}
break;
}
default :
throw ParseUtils.unexpectedElement(reader);
}
}
return new NamedModelUpdates<JvmElement>(name,updates);
}
