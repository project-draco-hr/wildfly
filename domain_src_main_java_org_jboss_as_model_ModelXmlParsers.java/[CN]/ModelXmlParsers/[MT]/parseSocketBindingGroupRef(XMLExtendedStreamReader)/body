{
  String name=null;
  int offset=-1;
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    final String value=reader.getAttributeValue(i);
    if (reader.getAttributeNamespace(i) != null) {
      throw ParseUtils.unexpectedAttribute(reader,i);
    }
 else {
      final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case REF:
{
          if (name != null)           throw ParseUtils.duplicateAttribute(reader,attribute.getLocalName());
          name=value;
          break;
        }
case PORT_OFFSET:
{
        try {
          if (offset != -1)           throw ParseUtils.duplicateAttribute(reader,attribute.getLocalName());
          offset=Integer.parseInt(value);
          if (offset < 0) {
            throw new XMLStreamException(offset + " is not a valid " + attribute.getLocalName()+ " -- must be greater than zero",reader.getLocation());
          }
        }
 catch (        NumberFormatException e) {
          throw new XMLStreamException(offset + " is not a valid " + attribute.getLocalName(),reader.getLocation(),e);
        }
        break;
      }
default :
    throw ParseUtils.unexpectedAttribute(reader,i);
}
}
}
if (name == null) {
throw ParseUtils.missingRequired(reader,Collections.singleton(Attribute.REF));
}
ParseUtils.requireNoContent(reader);
return new NameOffset(name,offset);
}
