{
  List<AbstractModelUpdate<JvmElement,?>> updates=new ArrayList<AbstractModelUpdate<JvmElement,?>>();
  String name=null;
  String home=null;
  Boolean debugEnabled=null;
  String debugOptions=null;
  Boolean envClasspathIgnored=null;
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    final String value=reader.getAttributeValue(i);
    if (reader.getAttributeNamespace(i) != null) {
      throw ParseUtils.unexpectedAttribute(reader,i);
    }
 else {
      final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case NAME:
{
          if (name != null)           throw ParseUtils.duplicateAttribute(reader,attribute.getLocalName());
          if (!jvmNames.add(value)) {
            throw new XMLStreamException("Duplicate JVM declaration " + value,reader.getLocation());
          }
          name=value;
          break;
        }
case JAVA_HOME:
{
        if (home != null)         throw ParseUtils.duplicateAttribute(reader,attribute.getLocalName());
        home=value;
        updates.add(new JvmHomeUpdate(value));
        break;
      }
case DEBUG_ENABLED:
{
      if (debugEnabled != null)       throw ParseUtils.duplicateAttribute(reader,attribute.getLocalName());
      debugEnabled=Boolean.valueOf(value);
      updates.add(new JvmDebugEnabledUpdate(debugEnabled));
      break;
    }
case DEBUG_OPTIONS:
{
    if (debugOptions != null)     throw ParseUtils.duplicateAttribute(reader,attribute.getLocalName());
    debugOptions=value;
    updates.add(new JvmDebugOptionsUpdate(value));
    break;
  }
case ENV_CLASSPATH_IGNORED:
{
  if (envClasspathIgnored != null)   throw ParseUtils.duplicateAttribute(reader,attribute.getLocalName());
  envClasspathIgnored=Boolean.valueOf(value);
  updates.add(new JvmEnvClasspathIgnoredUpdate(envClasspathIgnored));
  break;
}
default :
throw ParseUtils.unexpectedAttribute(reader,i);
}
}
}
if (name == null) {
throw ParseUtils.missingRequired(reader,Collections.singleton(Attribute.NAME));
}
Collection<JvmOptionAdd> jvmOptions=null;
Collection<PropertyAdd> environmentVariables=null;
Collection<PropertyAdd> systemProperties=null;
while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
switch (Namespace.forUri(reader.getNamespaceURI())) {
case DOMAIN_1_0:
{
final Element element=Element.forName(reader.getLocalName());
switch (element) {
case HEAP:
{
updates.addAll(parseHeap(reader));
break;
}
case PERMGEN:
{
updates.addAll(parsePermgen(reader));
break;
}
case STACK:
{
updates.addAll(parseStack(reader));
break;
}
case AGENT_LIB:
{
updates.addAll(parseAgentLib(reader));
break;
}
case AGENT_PATH:
{
updates.addAll(parseAgentPath(reader));
break;
}
case JAVA_AGENT:
{
updates.addAll(parseJavaagent(reader));
break;
}
case ENVIRONMENT_VARIABLES:
{
if (environmentVariables != null) {
throw new XMLStreamException(element.getLocalName() + " already declared",reader.getLocation());
}
environmentVariables=parseProperties(reader,Element.VARIABLE,true);
for (PropertyAdd propAdd : environmentVariables) {
updates.add(new JvmEnvironmentVariableUpdate(propAdd));
}
break;
}
case SYSTEM_PROPERTIES:
{
if (systemProperties != null) {
throw new XMLStreamException(element.getLocalName() + " already declared",reader.getLocation());
}
systemProperties=parseProperties(reader,Element.PROPERTY,true);
for (PropertyAdd propAdd : systemProperties) {
updates.add(new JvmSystemPropertiesUpdate(propAdd));
}
break;
}
case JVM_OPTIONS:
{
if (jvmOptions != null) {
throw new XMLStreamException(element.getLocalName() + " already declared",reader.getLocation());
}
jvmOptions=parseJvmOptions(reader);
for (JvmOptionAdd optAdd : jvmOptions) {
updates.add(new JvmOptionsUpdate(optAdd));
}
break;
}
default :
throw ParseUtils.unexpectedElement(reader);
}
break;
}
default :
throw ParseUtils.unexpectedElement(reader);
}
}
return new NamedModelUpdates<JvmElement>(name,updates);
}
