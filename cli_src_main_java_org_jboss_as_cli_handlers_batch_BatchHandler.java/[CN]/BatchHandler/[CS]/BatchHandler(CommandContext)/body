{
  super("batch");
  l=new ArgumentWithoutValue(this,"-l");
  l.setExclusive(true);
  name=new ArgumentWithValue(this,new CommandLineCompleter(){
    @Override public int complete(    CommandContext ctx,    String buffer,    int cursor,    List<String> candidates){
      BatchManager batchManager=ctx.getBatchManager();
      Set<String> names=batchManager.getHeldbackNames();
      if (names.isEmpty()) {
        return -1;
      }
      int nextCharIndex=0;
      while (nextCharIndex < buffer.length()) {
        if (!Character.isWhitespace(buffer.charAt(nextCharIndex))) {
          break;
        }
        ++nextCharIndex;
      }
      String chunk=buffer.substring(nextCharIndex).trim();
      for (      String name : names) {
        if (name != null && name.startsWith(chunk)) {
          candidates.add(name);
        }
      }
      Collections.sort(candidates);
      return nextCharIndex;
    }
  }
,0,"--name");
  name.setExclusive(true);
  final FilenameTabCompleter pathCompleter=Util.isWindows() ? new WindowsFilenameTabCompleter(ctx) : new DefaultFilenameTabCompleter(ctx);
  file=new ArgumentWithValue(this,pathCompleter,"--file"){
    @Override public String getValue(    ParsedCommandLine args){
      String value=super.getValue(args);
      if (value != null) {
        if (value.length() >= 0 && value.charAt(0) == '"' && value.charAt(value.length() - 1) == '"') {
          value=value.substring(1,value.length() - 1);
        }
        value=pathCompleter.translatePath(value);
      }
      return value;
    }
  }
;
  file.setExclusive(true);
}
