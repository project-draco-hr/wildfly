{
  final PatchInfo patchInfo=context.getPatchInfo();
  final File historyDir=structure.getHistoryDir(patchId);
  final File patchDir=structure.getPatchDirectory(patchId);
  final File cumulativeBackup=new File(historyDir,DirectoryStructure.CUMULATIVE);
  final File referencesBackup=new File(historyDir,DirectoryStructure.REFERENCES);
  final File timestamp=new File(historyDir,Constants.TIMESTAMP);
  PatchUtils.writeRef(cumulativeBackup,patchInfo.getCumulativeID());
  PatchUtils.writeRefs(referencesBackup,patchInfo.getPatchIDs());
  PatchUtils.writeRef(timestamp,generateTimestamp());
  final File backupPatchXml=new File(patchDir,PatchXml.PATCH_XML);
  PatchingContext.writePatch(patch,backupPatchXml);
  final File rollbackPatchXml=new File(historyDir,PatchingContext.ROLLBACK_XML);
  PatchingContext.writePatch(rollbackPatch,rollbackPatchXml);
  context.backupConfiguration();
  if (context.getPatchType() == Patch.PatchType.ONE_OFF) {
    final List<String> patches=new ArrayList<String>(patchInfo.getPatchIDs());
    patches.add(0,patchId);
    final String resultingVersion=patchInfo.getVersion();
    return new LocalPatchInfo(resultingVersion,patchInfo.getCumulativeID(),patches,structure);
  }
 else {
    final String resultingVersion=patch.getResultingVersion();
    return new LocalPatchInfo(resultingVersion,patchId,Collections.<String>emptyList(),structure);
  }
}
