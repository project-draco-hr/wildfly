{
  String placeholder=null;
  String attributeValue=null;
  for (int i=0; i < reader.getAttributeCount(); i++) {
    String attr=reader.getAttributeLocalName(i);
    if (attr.equals("placeholder")) {
      placeholder=reader.getAttributeValue(i);
    }
 else     if (attr.equals("attributeValue")) {
      attributeValue=reader.getAttributeValue(i);
    }
 else {
      throw new XMLStreamException("Invalid attribute " + attr,reader.getLocation());
    }
  }
  if (placeholder == null) {
    throw new XMLStreamException("Missing required attribute 'placeholder'",reader.getLocation());
  }
  if (placeholder.length() == 0) {
    throw new XMLStreamException("Empty placeholder attribute for <replacement>",reader.getLocation());
  }
  if (attributeValue != null) {
    supplement.addAttributeReplacement(placeholder,attributeValue);
  }
  while (reader.hasNext()) {
    int type=reader.getEventType();
switch (type) {
case START_ELEMENT:
      ElementNode node=new NodeParser(subsystemNs).parseNode(reader,reader.getLocalName());
    if (attributeValue != null && node.iterateChildren().hasNext()) {
      throw new XMLStreamException("Can not have nested content when attributeValue is used",reader.getLocation());
    }
  if (supplement.addNodeReplacement(placeholder,node) != null) {
    throw new XMLStreamException("Already have a replacement called " + placeholder + " in supplement",reader.getLocation());
  }
break;
case END_ELEMENT:
if (reader.getLocalName().equals("replacement")) {
return;
}
 else {
throw new XMLStreamException("Unknown element " + reader.getLocalName(),reader.getLocation());
}
}
}
}
