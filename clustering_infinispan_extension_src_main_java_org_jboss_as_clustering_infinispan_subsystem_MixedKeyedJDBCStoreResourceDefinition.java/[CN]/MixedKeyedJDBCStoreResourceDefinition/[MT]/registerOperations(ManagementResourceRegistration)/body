{
  ResourceServiceHandler handler=new SimpleResourceServiceHandler<>(new MixedKeyedJDBCStoreBuilderFactory());
  new AddStepHandler(this.getResourceDescriptionResolver(),handler){
    @Override public void execute(    OperationContext context,    ModelNode operation) throws OperationFailedException {
      super.execute(context,operation);
      this.addTableStep(context,operation,Attribute.BINARY_TABLE,BinaryTableResourceDefinition.PATH,new BinaryTableBuilderFactory());
      this.addTableStep(context,operation,Attribute.STRING_TABLE,StringTableResourceDefinition.PATH,new StringTableBuilderFactory());
    }
    private void addTableStep(    OperationContext context,    ModelNode operation,    Attribute attribute,    PathElement path,    ResourceServiceBuilderFactory<TableManipulationConfiguration> provider){
      if (operation.hasDefined(attribute.getDefinition().getName())) {
        ModelNode addTableOperation=Util.createAddOperation(context.getCurrentAddress().append(path));
        ModelNode parameters=operation.get(attribute.getDefinition().getName());
        for (        Property parameter : parameters.asPropertyList()) {
          addTableOperation.get(parameter.getName()).set(parameter.getValue());
        }
        context.addStep(addTableOperation,registration.getOperationHandler(PathAddress.pathAddress(path),ModelDescriptionConstants.ADD),context.getCurrentStage());
      }
    }
  }
.addAttributes(JDBCStoreResourceDefinition.Attribute.class).addAttributes(StoreResourceDefinition.Attribute.class).register(registration);
  new RemoveStepHandler(this.getResourceDescriptionResolver(),handler).register(registration);
}
