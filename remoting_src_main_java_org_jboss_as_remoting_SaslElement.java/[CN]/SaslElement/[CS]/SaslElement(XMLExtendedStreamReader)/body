{
  final int count=reader.getAttributeCount();
  if (count > 0) {
    throw ParseUtils.unexpectedAttribute(reader,0);
  }
  final EnumSet<Element> visited=EnumSet.noneOf(Element.class);
  while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
switch (Namespace.forUri(reader.getNamespaceURI())) {
case REMOTING_1_0:
{
        final Element element=Element.forName(reader.getLocalName());
        if (visited.contains(element)) {
          throw ParseUtils.unexpectedElement(reader);
        }
        visited.add(element);
switch (element) {
case INCLUDE_MECHANISMS:
{
            includeMechanisms=ParseUtils.readArrayAttributeElement(reader,"value",String.class);
            break;
          }
case POLICY:
{
          policy=new PolicyElement(reader);
          break;
        }
case PROPERTIES:
{
        properties=new PropertiesElement(reader);
        break;
      }
case QOP:
{
      qop=ParseUtils.readArrayAttributeElement(reader,"value",SaslQop.class);
      break;
    }
case REUSE_SESSION:
{
    reuseSession=Boolean.valueOf(ParseUtils.readBooleanAttributeElement(reader,"value"));
    break;
  }
case SERVER_AUTH:
{
  serverAuth=Boolean.valueOf(ParseUtils.readBooleanAttributeElement(reader,"value"));
  break;
}
case STRENGTH:
{
strength=ParseUtils.readArrayAttributeElement(reader,"value",SaslStrength.class);
break;
}
default :
throw ParseUtils.unexpectedElement(reader);
}
break;
}
default :
throw ParseUtils.unexpectedElement(reader);
}
}
}
