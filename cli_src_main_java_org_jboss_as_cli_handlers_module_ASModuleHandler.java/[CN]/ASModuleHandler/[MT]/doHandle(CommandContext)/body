{
  final ParsedCommandLine parsedCmd=ctx.getParsedCommandLine();
  final String moduleName=name.getValue(parsedCmd,true);
  final String modulesDir=SecurityActions.getSystemProperty(MODULE_PATH);
  if (modulesDir == null) {
    throw new CommandLineException(MODULE_PATH + " system property is not available.");
  }
  final String resourcePaths=resources.getValue(parsedCmd,true);
  final String[] resourceArr=resourcePaths.split(PATH_SEPARATOR);
  File[] resourceFiles=new File[resourceArr.length];
  for (int i=0; i < resourceArr.length; ++i) {
    final File f=new File(resourceArr[i]);
    if (!f.exists()) {
      throw new CommandLineException("Failed to locate " + f.getAbsolutePath());
    }
    resourceFiles[i]=f;
  }
  final String modulePath=modulesDir + File.separatorChar + moduleName.replace('.',File.separatorChar);
  final File moduleDir=new File(modulePath);
  if (moduleDir.exists()) {
    throw new CommandLineException("Module " + moduleName + " already exists.");
  }
  if (!moduleDir.mkdirs()) {
    throw new CommandLineException("Failed to create directory " + moduleDir.getAbsolutePath());
  }
  final ModuleConfigImpl config=new ModuleConfigImpl(moduleName);
  for (  File f : resourceFiles) {
    final File target=new File(moduleDir,f.getName());
    config.addResource(new ResourceRoot(target.getName()));
    try {
      copy(f,target);
    }
 catch (    IOException e) {
      throw new CommandLineException("Failed to copy " + f.getAbsolutePath() + " to "+ target.getAbsolutePath());
    }
  }
  final String dependenciesStr=dependencies.getValue(parsedCmd);
  if (dependenciesStr != null) {
    final String[] depsArr=dependenciesStr.split(",+");
    for (    String dep : depsArr) {
      config.addDependency(new ModuleDependency(dep));
    }
  }
  final String propsStr=props.getValue(parsedCmd);
  if (propsStr != null) {
    final String[] pairs=propsStr.split(",");
    for (    String pair : pairs) {
      int equals=pair.indexOf('=');
      if (equals == -1) {
        throw new CommandFormatException("Property '" + pair + "' in '"+ propsStr+ "' is missing the equals sign.");
      }
      final String propName=pair.substring(0,equals);
      if (propName.isEmpty()) {
        throw new CommandFormatException("Property name is missing for '" + pair + "' in '"+ propsStr+ "'");
      }
      config.setProperty(propName,pair.substring(equals + 1));
    }
  }
  final String mainCls=mainClass.getValue(parsedCmd);
  if (mainCls != null) {
    config.setMainClass(mainCls);
  }
  FileWriter moduleWriter=null;
  final File moduleFile=new File(moduleDir,"module.xml");
  try {
    moduleWriter=new FileWriter(moduleFile);
    XMLExtendedStreamWriter xmlWriter=create(XMLOutputFactory.newFactory().createXMLStreamWriter(moduleWriter));
    config.writeContent(xmlWriter,null);
    xmlWriter.flush();
  }
 catch (  IOException e) {
    throw new CommandLineException("Failed to create file " + moduleFile.getAbsolutePath(),e);
  }
catch (  XMLStreamException e) {
    throw new CommandLineException("Failed to write to " + moduleFile.getAbsolutePath(),e);
  }
 finally {
    if (moduleWriter != null) {
      try {
        moduleWriter.close();
      }
 catch (      IOException e) {
      }
    }
  }
}
