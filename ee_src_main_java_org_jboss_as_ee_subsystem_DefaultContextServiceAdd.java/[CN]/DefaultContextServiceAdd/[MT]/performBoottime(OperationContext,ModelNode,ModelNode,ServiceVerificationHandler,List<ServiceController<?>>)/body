{
  final boolean useTransactionSetupProvider=DefaultContextServiceResourceDefinition.USE_TRANSACTION_SETUP_PROVIDER_AD.resolveModelAttribute(context,model).asBoolean();
  final ContextServiceService contextServiceService=new ContextServiceService(ConcurrentServiceNames.DEFAULT_NAME);
  final ServiceBuilder<ContextServiceImpl> contextServiceServiceBuilder=context.getServiceTarget().addService(ConcurrentServiceNames.DEFAULT_CONTEXT_SERVICE_SERVICE_NAME,contextServiceService).addInjectionValue(contextServiceService.getContextSetupProvider(),new ImmediateValue<ContextSetupProvider>(new DefaultContextSetupProviderImpl()));
  if (useTransactionSetupProvider) {
    final TransactionSetupProviderService transactionSetupProviderService=new TransactionSetupProviderService();
    final ServiceBuilder<TransactionSetupProvider> transactionSetupServiceBuilder=context.getServiceTarget().addService(ConcurrentServiceNames.TRANSACTION_SETUP_PROVIDER_SERVICE_NAME,transactionSetupProviderService).addDependency(ServiceName.JBOSS.append("txn","TransactionManager"),TransactionManager.class,transactionSetupProviderService.getTransactionManagerInjectedValue());
    newControllers.add(transactionSetupServiceBuilder.addListener(verificationHandler).install());
    contextServiceServiceBuilder.addDependency(ConcurrentServiceNames.TRANSACTION_SETUP_PROVIDER_SERVICE_NAME,TransactionSetupProvider.class,contextServiceService.getTransactionSetupProvider());
  }
  newControllers.add(contextServiceServiceBuilder.addListener(verificationHandler).install());
  context.addStep(new AbstractDeploymentChainStep(){
    protected void execute(    DeploymentProcessorTarget processorTarget){
      processorTarget.addDeploymentProcessor(EeExtension.SUBSYSTEM_NAME,Phase.PARSE,Phase.PARSE_EE_CONCURRENT_DEFAULT_CONTEXT_SERVICE,new EEConcurrentDefaultContextServiceProcessor());
    }
  }
,OperationContext.Stage.RUNTIME);
}
