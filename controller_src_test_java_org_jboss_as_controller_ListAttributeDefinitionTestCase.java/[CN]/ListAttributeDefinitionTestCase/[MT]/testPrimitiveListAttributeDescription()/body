{
  ResourceDefinition resource=new ResourceDefinition(){
    @Override public void registerOperations(    ManagementResourceRegistration resourceRegistration){
    }
    @Override public void registerChildren(    ManagementResourceRegistration resourceRegistration){
    }
    @Override public void registerAttributes(    ManagementResourceRegistration resourceRegistration){
      final PrimitiveListAttributeDefinition attr=PrimitiveListAttributeDefinition.Builder.of(MY_LIST_OF_STRINGS,STRING).build();
      resourceRegistration.registerReadOnlyAttribute(attr,null);
    }
    @Override public PathElement getPathElement(){
      return PathElement.pathElement(MY_RESOURCE);
    }
    @Override public DescriptionProvider getDescriptionProvider(    ImmutableManagementResourceRegistration registration){
      StandardResourceDescriptionResolver descriptionResolver=new StandardResourceDescriptionResolver(MY_RESOURCE,ListAttributeDefinitionTestCase.class.getName(),Thread.currentThread().getContextClassLoader());
      return new DefaultResourceDescriptionProvider(registration,descriptionResolver);
    }
  }
;
  ImmutableManagementResourceRegistration registration=ManagementResourceRegistration.Factory.create(resource);
  ModelNode modelDescription=resource.getDescriptionProvider(registration).getModelDescription(Locale.ENGLISH);
  assertEquals("incorrect type for description " + modelDescription,LIST,modelDescription.get(ATTRIBUTES,MY_LIST_OF_STRINGS,TYPE).asType());
  assertEquals("incorrect value-type for description " + modelDescription,STRING,modelDescription.get(ATTRIBUTES,MY_LIST_OF_STRINGS,VALUE_TYPE).asType());
}
