{
  final String machine=ModelNodes.asString(MACHINE.resolveModelAttribute(context,transport));
  final String rack=ModelNodes.asString(RACK.resolveModelAttribute(context,transport));
  final String site=ModelNodes.asString(SITE.resolveModelAttribute(context,transport));
  if ((site != null) || (rack != null) || (machine != null)) {
    this.topology=new Topology(){
      @Override public String getMachine(){
        return machine;
      }
      @Override public String getRack(){
        return rack;
      }
      @Override public String getSite(){
        return site;
      }
    }
;
  }
  String diagnosticsBinding=ModelNodes.asString(DIAGNOSTICS_SOCKET_BINDING.resolveModelAttribute(context,transport));
  if (diagnosticsBinding != null) {
    this.diagnosticsSocketBinding=new InjectedValueDependency<>(CommonUnaryRequirement.SOCKET_BINDING.getServiceName(context,diagnosticsBinding),SocketBinding.class);
  }
  for (  ThreadPoolResourceDefinition pool : EnumSet.allOf(ThreadPoolResourceDefinition.class)) {
    String prefix=pool.getPrefix();
    ModelNode model=transport.get(pool.getPathElement().getKeyValuePair());
    this.getProperties().put(prefix + ".min_threads",pool.getMinThreads().resolveModelAttribute(context,model).asString());
    this.getProperties().put(prefix + ".max_threads",pool.getMaxThreads().resolveModelAttribute(context,model).asString());
    int queueSize=pool.getQueueLength().resolveModelAttribute(context,model).asInt();
    if (pool != ThreadPoolResourceDefinition.TIMER) {
      this.getProperties().put(prefix + ".queue_enabled",String.valueOf(queueSize > 0));
    }
    this.getProperties().put(prefix + ".queue_max_size",String.valueOf(queueSize));
    this.getProperties().put(prefix + ".keep_alive_time",pool.getKeepAliveTime().resolveModelAttribute(context,model).asString());
    this.getProperties().put(prefix + ".rejection_policy","abort");
  }
  return super.configure(context,transport);
}
