{
  final String address=ClusterConnectionDefinition.ADDRESS.resolveModelAttribute(context,model).asString();
  final String connectorName=ClusterConnectionDefinition.CONNECTOR_NAME.resolveModelAttribute(context,model).asString();
  final long retryInterval=ClusterConnectionDefinition.RETRY_INTERVAL.resolveModelAttribute(context,model).asLong();
  final boolean duplicateDetection=ClusterConnectionDefinition.USE_DUPLICATE_DETECTION.resolveModelAttribute(context,model).asBoolean();
  final long connectionTTL=ClusterConnectionDefinition.CONNECTION_TTL.resolveModelAttribute(context,model).asInt();
  final int initialConnectAttempts=ClusterConnectionDefinition.INITIAL_CONNECT_ATTEMPTS.resolveModelAttribute(context,model).asInt();
  final int reconnectAttempts=ClusterConnectionDefinition.RECONNECT_ATTEMPTS.resolveModelAttribute(context,model).asInt();
  final long maxRetryInterval=ClusterConnectionDefinition.MAX_RETRY_INTERVAL.resolveModelAttribute(context,model).asLong();
  final double retryIntervalMultiplier=ClusterConnectionDefinition.RETRY_INTERVAL_MULTIPLIER.resolveModelAttribute(context,model).asDouble();
  final long clientFailureCheckPeriod=ClusterConnectionDefinition.CHECK_PERIOD.resolveModelAttribute(context,model).asInt();
  final String messageLoadBalancingType=ClusterConnectionDefinition.MESSAGE_LOAD_BALANCING_TYPE.resolveModelAttribute(context,model).asString();
  final int maxHops=ClusterConnectionDefinition.MAX_HOPS.resolveModelAttribute(context,model).asInt();
  final int confirmationWindowSize=CommonAttributes.BRIDGE_CONFIRMATION_WINDOW_SIZE.resolveModelAttribute(context,model).asInt();
  final ModelNode discoveryNode=ClusterConnectionDefinition.DISCOVERY_GROUP_NAME.resolveModelAttribute(context,model);
  final int minLargeMessageSize=CommonAttributes.MIN_LARGE_MESSAGE_SIZE.resolveModelAttribute(context,model).asInt();
  final long callTimeout=CommonAttributes.CALL_TIMEOUT.resolveModelAttribute(context,model).asLong();
  final long callFailoverTimeout=CommonAttributes.CALL_FAILOVER_TIMEOUT.resolveModelAttribute(context,model).asLong();
  final long clusterNotificationInterval=ClusterConnectionDefinition.NOTIFICATION_INTERVAL.resolveModelAttribute(context,model).asLong();
  final int clusterNotificationAttempts=ClusterConnectionDefinition.NOTIFICATION_ATTEMPTS.resolveModelAttribute(context,model).asInt();
  ClusterConnectionConfiguration config=new ClusterConnectionConfiguration().setName(name).setAddress(address).setConnectorName(connectorName).setMinLargeMessageSize(minLargeMessageSize).setClientFailureCheckPeriod(clientFailureCheckPeriod).setConnectionTTL(connectionTTL).setRetryInterval(retryInterval).setRetryIntervalMultiplier(retryIntervalMultiplier).setMaxRetryInterval(maxRetryInterval).setInitialConnectAttempts(initialConnectAttempts).setReconnectAttempts(reconnectAttempts).setCallTimeout(callTimeout).setCallFailoverTimeout(callFailoverTimeout).setDuplicateDetection(duplicateDetection).setMessageLoadBalancingType(MessageLoadBalancingType.valueOf(messageLoadBalancingType)).setMaxHops(maxHops).setConfirmationWindowSize(confirmationWindowSize).setClusterNotificationInterval(clusterNotificationInterval).setClusterNotificationAttempts(clusterNotificationAttempts);
  final String discoveryGroupName=discoveryNode.isDefined() ? discoveryNode.asString() : null;
  final List<String> staticConnectors=discoveryGroupName == null ? getStaticConnectors(model) : null;
  final boolean allowDirectOnly=ClusterConnectionDefinition.ALLOW_DIRECT_CONNECTIONS_ONLY.resolveModelAttribute(context,model).asBoolean();
  if (discoveryGroupName != null) {
    config.setDiscoveryGroupName(discoveryGroupName);
  }
 else {
    config.setStaticConnectors(staticConnectors).setAllowDirectConnectionsOnly(allowDirectOnly);
  }
  return config;
}
