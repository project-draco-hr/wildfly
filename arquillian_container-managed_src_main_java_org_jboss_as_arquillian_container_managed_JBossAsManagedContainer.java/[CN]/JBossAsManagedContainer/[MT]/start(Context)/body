{
  try {
    String jbossHomeKey="jboss.home";
    String jbossHomeDir=System.getProperty(jbossHomeKey);
    if (jbossHomeDir == null)     throw new IllegalStateException("Cannot find system property: " + jbossHomeKey);
    final String additionalJavaOpts=System.getProperty("jboss.options");
    File modulesJar=new File(jbossHomeDir + "/jboss-modules.jar");
    if (modulesJar.exists() == false)     throw new IllegalStateException("Cannot find: " + modulesJar);
    List<String> cmd=new ArrayList<String>();
    cmd.add("java");
    if (additionalJavaOpts != null) {
      for (      String opt : additionalJavaOpts.split("\\s+")) {
        cmd.add(opt);
      }
    }
    cmd.add("-Djboss.home.dir=" + jbossHomeDir);
    cmd.add("-Dorg.jboss.boot.log.file=" + jbossHomeDir + "/standalone/log/boot.log");
    cmd.add("-Dlogging.configuration=file:" + jbossHomeDir + "/standalone/configuration/logging.properties");
    cmd.add("-jar");
    cmd.add(modulesJar.getAbsolutePath());
    cmd.add("-mp");
    cmd.add(jbossHomeDir + "/modules");
    cmd.add("-logmodule");
    cmd.add("org.jboss.logmanager");
    cmd.add("-jaxpmodule");
    cmd.add("javax.xml.jaxp-provider");
    cmd.add("org.jboss.as.standalone");
    log.info("Starting container with: " + cmd.toString());
    ProcessBuilder processBuilder=new ProcessBuilder(cmd);
    processBuilder.redirectErrorStream(true);
    process=processBuilder.start();
    new Thread(new ConsoleConsumer()).start();
    final Process proc=process;
    shutdownThread=new Thread(new Runnable(){
      @Override public void run(){
        if (proc != null) {
          proc.destroy();
          try {
            proc.waitFor();
          }
 catch (          InterruptedException e) {
            throw new RuntimeException(e);
          }
        }
      }
    }
);
    Runtime.getRuntime().addShutdownHook(shutdownThread);
    long timeout=getContainerConfiguration().getStartupTimeout();
    boolean serverAvailable=false;
    while (timeout > 0 && serverAvailable == false) {
      serverAvailable=isServerStarted();
      Thread.sleep(100);
      timeout-=100;
    }
    if (!serverAvailable) {
      throw new TimeoutException(String.format("Managed server was not started within [%d] ms",timeout));
    }
    boolean testRunnerMBeanAvailable=false;
    MBeanServerConnection mbeanServer=null;
    while (timeout > 0 && testRunnerMBeanAvailable == false) {
      if (mbeanServer == null) {
        try {
          mbeanServer=getMBeanServerConnection();
        }
 catch (        Exception ex) {
        }
      }
      testRunnerMBeanAvailable=(mbeanServer != null && mbeanServer.isRegistered(JMXTestRunnerMBean.OBJECT_NAME));
      Thread.sleep(100);
      timeout-=100;
    }
    if (!testRunnerMBeanAvailable) {
      throw new TimeoutException(String.format("Could not connect to the managed server's MBeanServer within [%d] ms",timeout));
    }
  }
 catch (  Exception e) {
    throw new LifecycleException("Could not start container",e);
  }
}
