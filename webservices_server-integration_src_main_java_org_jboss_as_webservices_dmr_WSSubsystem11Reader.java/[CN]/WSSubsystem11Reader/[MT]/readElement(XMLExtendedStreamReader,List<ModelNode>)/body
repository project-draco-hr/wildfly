{
  final PathAddress address=PathAddress.pathAddress(WSExtension.SUBSYSTEM_PATH);
  final ModelNode subsystem=Util.createAddOperation(address);
  list.add(subsystem);
  readAttributes(reader,subsystem);
  final EnumSet<Element> encountered=EnumSet.noneOf(Element.class);
  while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
    final Element element=Element.forName(reader.getLocalName());
switch (element) {
case MODIFY_WSDL_ADDRESS:
{
        if (!encountered.add(element)) {
          throw unexpectedElement(reader);
        }
        final String value=parseElementNoAttributes(reader);
        Attributes.MODIFY_WSDL_ADDRESS.parseAndSetParameter(value,subsystem,reader);
        break;
      }
case WSDL_HOST:
{
      if (!encountered.add(element)) {
        throw unexpectedElement(reader);
      }
      final String value=parseElementNoAttributes(reader);
      Attributes.WSDL_HOST.parseAndSetParameter(value,subsystem,reader);
      break;
    }
case WSDL_PORT:
{
    if (!encountered.add(element)) {
      throw unexpectedElement(reader);
    }
    final String value=parseElementNoAttributes(reader);
    Attributes.WSDL_PORT.parseAndSetParameter(value,subsystem,reader);
    break;
  }
case WSDL_SECURE_PORT:
{
  if (!encountered.add(element)) {
    throw unexpectedElement(reader);
  }
  final String value=parseElementNoAttributes(reader);
  Attributes.WSDL_SECURE_PORT.parseAndSetParameter(value,subsystem,reader);
  break;
}
case ENDPOINT_CONFIG:
{
List<ModelNode> configs=readConfig(reader,address,false);
list.addAll(configs);
break;
}
default :
{
handleUnknownElement(reader,address,element,list,encountered);
}
}
}
}
