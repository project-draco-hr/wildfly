{
  String moduleName=randomString();
  PatchInfo info=new LocalPatchInfo(randomString(),PatchInfo.BASE,Collections.<String>emptyList(),env);
  createModule(env.getInstalledImage().getJbossHome(),moduleName);
  tree(env.getInstalledImage().getJbossHome());
  byte[] existingHash=hashFile(new File(env.getInstalledImage().getModulesDir(),moduleName));
  String patchID=randomString();
  File patchDir=mkdir(tempDir,patchID);
  File moduleDir=createModule(patchDir,moduleName,"new resource in the module");
  byte[] updatedHash=hashFile(moduleDir);
  ContentModification moduleUpdated=new ContentModification(new ModuleItem(moduleName,ModuleItem.MAIN_SLOT,updatedHash),existingHash,MODIFY);
  PatchBuilder1_1 builder=PatchBuilder1_1.create().setPatchId(patchID).setDescription(randomString()).setIdentity(new IdentityImpl("eap",info.getVersion())).setNoUpgrade();
  PatchElementImpl element=new PatchElementImpl("patch element 01");
  builder.addElement(element);
  element.setDescription("patch element 01 description");
  element.setNoUpgrade();
  PatchElementProviderImpl provider=new PatchElementProviderImpl("base","4.5.6",false);
  provider.require("patch element 02");
  element.setProvider(provider);
  element.addContentModification(moduleUpdated);
  Patch patch=builder.build();
  createPatchXMLFile(patchDir,patch);
  File zippedPatch=createZippedPatchFile(patchDir,patch.getPatchId());
  PatchingResult result=executePatch(info,zippedPatch);
  assertPatchHasBeenApplied(result,patch);
  File modulesPatchDir=env.getModulePatchDirectory(patch.getPatchId());
  assertDirExists(modulesPatchDir);
  assertContains(modulesPatchDir,getModulePath(env,result.getPatchInfo()));
  assertDefinedModule(getModulePath(env,result.getPatchInfo()),moduleName,updatedHash);
}
