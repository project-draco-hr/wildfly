{
  KernelServicesBuilder builder=createKernelServicesBuilder(createAdditionalInitialization()).setSubsystemXmlResource("remoting-without-expressions.xml");
  ModelVersion oldVersion=ModelVersion.create(1,1);
  builder.createLegacyKernelServicesBuilder(createAdditionalInitialization(),controllerVersion,oldVersion).addMavenResourceURL("org.jboss.as:jboss-as-remoting:" + controllerVersion.getMavenGavVersion()).skipReverseControllerCheck();
  KernelServices mainServices=builder.build();
  assertTrue(mainServices.isSuccessfulBoot());
  KernelServices legacyServices=mainServices.getLegacyServices(oldVersion);
  assertNotNull(legacyServices);
  assertTrue(legacyServices.isSuccessfulBoot());
  checkSubsystemModelTransformation(mainServices,oldVersion);
  checkRejectWorkerThreadAttributes(mainServices,oldVersion);
  checkRejectSASLAttribute(mainServices,oldVersion,CommonAttributes.REUSE_SESSION,"${reuse.session:true}");
  checkRejectSASLAttribute(mainServices,oldVersion,CommonAttributes.SERVER_AUTH,"${server.auth:true}");
  checkRejectSASLProperty(mainServices,oldVersion);
  checkRejectSASLPolicyAttributes(mainServices,oldVersion);
  checkRejectConnectorProperty(mainServices,oldVersion);
  checkRejectRemoteOutboundConnectionUsername(mainServices,oldVersion);
  checkRejectOutboundConnectionProperty(mainServices,oldVersion,CommonAttributes.REMOTE_OUTBOUND_CONNECTION,"remote-conn1");
  checkRejectOutboundConnectionProperty(mainServices,oldVersion,CommonAttributes.LOCAL_OUTBOUND_CONNECTION,"local-conn1");
  checkRejectOutboundConnectionProperty(mainServices,oldVersion,CommonAttributes.OUTBOUND_CONNECTION,"generic-conn1");
  checkRejectOutboundConnectionProtocolNotRemote(mainServices,oldVersion,CommonAttributes.REMOTE_OUTBOUND_CONNECTION,"remote-conn1");
  checkRejectHttpConnector(mainServices,oldVersion);
}
