{
  final SimpleTimerBean timerBean=InitialContext.doLookup("java:module/" + SimpleTimerBean.class.getSimpleName() + "!"+ SimpleTimerBean.class.getName());
  final String infoOne="gangnam style";
  timerBean.createTimerForNextDay(false,infoOne);
  final String infoTwo="PSY";
  timerBean.createTimerForNextDay(true,infoTwo);
  final OtherTimerBeanInSameModule otherTimerBean=InitialContext.doLookup("java:module/" + OtherTimerBeanInSameModule.class.getSimpleName() + "!"+ OtherTimerBeanInSameModule.class.getName());
  final String infoThree="hello world!";
  otherTimerBean.createTimerForNextDay(false,infoThree);
  final TimerBeanInOtherModule timerBeanInOtherModule=InitialContext.doLookup("java:global/" + APP_NAME + "/"+ MODULE_TWO_NAME+ "/"+ TimerBeanInOtherModule.class.getSimpleName()+ "!"+ TimerBeanInOtherModule.class.getName());
  final String infoForTimerBeanInOtherModule="irrelevant";
  timerBeanInOtherModule.createTimerForNextDay(false,infoForTimerBeanInOtherModule);
  final Collection<Timer> activeTimers=timerBean.getAllActiveTimersInEJBModule();
  Assert.assertFalse("No active timers found in EJB module " + MODULE_ONE_NAME,activeTimers.isEmpty());
  Assert.assertTrue("@Schedule timer on " + SimpleTimerBean.class.getSimpleName() + " not found in active timers",this.removeSheduleOneTimerOfSimpleTimerBean(activeTimers));
  Assert.assertTrue("@Schedule timer on " + SimpleTimerBean.class.getSimpleName() + " not found in active timers",this.removeSheduleTwoTimerOfSimpleTimerBean(activeTimers));
  Assert.assertTrue("@Schedule timer on " + OtherTimerBeanInSameModule.class.getSimpleName() + " not found in active timers",this.removeSheduleOneTimerOfOtherTimerBean(activeTimers));
  Assert.assertTrue("Programmatic timer on " + SimpleTimerBean.class.getSimpleName() + " not found in active timers",this.removeProgramaticTimer(activeTimers,infoOne,false));
  Assert.assertTrue("Programmatic timer on " + SimpleTimerBean.class.getSimpleName() + " not found in active timers",this.removeProgramaticTimer(activeTimers,infoTwo,true));
  Assert.assertTrue("Programmatic timer on " + OtherTimerBeanInSameModule.class.getSimpleName() + " not found in active timers",this.removeProgramaticTimer(activeTimers,infoThree,false));
  for (  final Timer remainingTimer : activeTimers) {
    Assert.assertNotEquals("Unexpectedly found a timer from other EJB module " + MODULE_TWO_NAME,TimerBeanInOtherModule.SCHEDULE_ONE_INFO.equals(remainingTimer.getInfo()));
    Assert.assertNotEquals("Unexpectedly found a timer from other EJB module " + MODULE_TWO_NAME,infoForTimerBeanInOtherModule.equals(remainingTimer.getInfo()));
  }
}
