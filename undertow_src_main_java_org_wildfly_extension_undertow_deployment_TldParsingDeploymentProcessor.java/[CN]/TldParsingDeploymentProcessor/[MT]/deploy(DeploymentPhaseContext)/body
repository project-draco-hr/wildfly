{
  final DeploymentUnit deploymentUnit=phaseContext.getDeploymentUnit();
  if (!DeploymentTypeMarker.isType(DeploymentType.WAR,deploymentUnit)) {
    return;
  }
  final WarMetaData warMetaData=deploymentUnit.getAttachment(WarMetaData.ATTACHMENT_KEY);
  if (warMetaData == null || warMetaData.getMergedJBossWebMetaData() == null) {
    return;
  }
  TldsMetaData tldsMetaData=deploymentUnit.getAttachment(TldsMetaData.ATTACHMENT_KEY);
  if (tldsMetaData == null) {
    tldsMetaData=new TldsMetaData();
    deploymentUnit.putAttachment(TldsMetaData.ATTACHMENT_KEY,tldsMetaData);
  }
  Map<String,TldMetaData> tlds=new HashMap<String,TldMetaData>();
  tldsMetaData.setTlds(tlds);
  final List<TldMetaData> uniqueTlds=new ArrayList<>();
  final VirtualFile deploymentRoot=deploymentUnit.getAttachment(Attachments.DEPLOYMENT_ROOT).getRoot();
  final List<VirtualFile> testRoots=new ArrayList<VirtualFile>();
  testRoots.add(deploymentRoot);
  testRoots.add(deploymentRoot.getChild(WEB_INF));
  testRoots.add(deploymentRoot.getChild(META_INF));
  for (  ResourceRoot root : deploymentUnit.getAttachmentList(Attachments.RESOURCE_ROOTS)) {
    testRoots.add(root.getRoot());
    testRoots.add(root.getRoot().getChild(META_INF));
  }
  JspConfigMetaData merged=warMetaData.getMergedJBossWebMetaData().getJspConfig();
  if (merged != null && merged.getTaglibs() != null) {
    for (    final TaglibMetaData tld : merged.getTaglibs()) {
      boolean found=false;
      for (      final VirtualFile root : testRoots) {
        VirtualFile child=root.getChild(tld.getTaglibLocation());
        if (child.exists()) {
          String pathNameRelativeToRoot;
          try {
            pathNameRelativeToRoot=child.getPathNameRelativeTo(deploymentRoot);
          }
 catch (          IllegalArgumentException e) {
            throw new DeploymentUnitProcessingException(MESSAGES.tldFileNotContainedInRoot(child.getPathName(),deploymentRoot.getPathName()),e);
          }
          final TldMetaData value=parseTLD(child);
          value.setUri(tld.getTaglibUri());
          uniqueTlds.add(value);
          String key="/" + pathNameRelativeToRoot;
          if (!tlds.containsKey(key)) {
            tlds.put(key,value);
          }
          if (value.getUri() != null && !tlds.containsKey(value.getUri())) {
            tlds.put(value.getUri(),value);
          }
          found=true;
          break;
        }
      }
      if (!found) {
        UndertowLogger.ROOT_LOGGER.errorf("Could not find tld %s",tld.getTaglibLocation());
      }
    }
  }
  List<ResourceRoot> resourceRoots=deploymentUnit.getAttachmentList(Attachments.RESOURCE_ROOTS);
  for (  ResourceRoot resourceRoot : resourceRoots) {
    if (resourceRoot.getRoot().getName().toLowerCase(Locale.ENGLISH).endsWith(".jar")) {
      VirtualFile webFragment=resourceRoot.getRoot().getChild(META_INF);
      if (webFragment.exists() && webFragment.isDirectory()) {
        processTlds(deploymentRoot,webFragment.getChildren(),tlds,uniqueTlds);
      }
    }
  }
  VirtualFile webInf=deploymentRoot.getChild(WEB_INF);
  if (webInf.exists() && webInf.isDirectory()) {
    for (    VirtualFile file : webInf.getChildren()) {
      if (file.isFile() && file.getName().toLowerCase(Locale.ENGLISH).endsWith(TLD)) {
        String pathNameRelativeToRoot;
        try {
          pathNameRelativeToRoot=file.getPathNameRelativeTo(deploymentRoot);
        }
 catch (        IllegalArgumentException e) {
          throw new DeploymentUnitProcessingException(MESSAGES.tldFileNotContainedInRoot(file.getPathName(),deploymentRoot.getPathName()),e);
        }
        final TldMetaData value=parseTLD(file);
        uniqueTlds.add(value);
        String key="/" + pathNameRelativeToRoot;
        if (!tlds.containsKey(key)) {
          tlds.put(key,value);
        }
        if (value.getUri() != null && !tlds.containsKey(value.getUri())) {
          tlds.put(value.getUri(),value);
        }
      }
 else       if (file.isDirectory() && !CLASSES.equals(file.getName()) && !LIB.equals(file.getName())) {
        processTlds(deploymentRoot,file.getChildren(),tlds,uniqueTlds);
      }
    }
  }
  JBossWebMetaData mergedMd=warMetaData.getMergedJBossWebMetaData();
  if (mergedMd.getListeners() == null) {
    mergedMd.setListeners(new ArrayList<ListenerMetaData>());
  }
  final ArrayList<TldMetaData> allTlds=new ArrayList<>(uniqueTlds);
  allTlds.addAll(tldsMetaData.getSharedTlds(deploymentUnit));
  for (  final TldMetaData tld : allTlds) {
    if (tld.getListeners() != null) {
      for (      ListenerMetaData l : tld.getListeners()) {
        mergedMd.getListeners().add(l);
      }
    }
  }
}
