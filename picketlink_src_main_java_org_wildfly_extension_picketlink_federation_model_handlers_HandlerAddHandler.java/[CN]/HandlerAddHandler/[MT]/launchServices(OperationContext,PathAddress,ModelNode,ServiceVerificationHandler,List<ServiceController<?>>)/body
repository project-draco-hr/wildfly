{
  Handler newHandler=new Handler();
  ModelNode classNameNode=HandlerResourceDefinition.CLASS.resolveModelAttribute(context,model);
  ModelNode codeNode=HandlerResourceDefinition.CODE.resolveModelAttribute(context,model);
  String typeName;
  if (classNameNode.isDefined()) {
    typeName=classNameNode.asString();
  }
 else   if (codeNode.isDefined()) {
    typeName=HandlerTypeEnum.forType(codeNode.asString());
  }
 else {
    throw MESSAGES.federationHandlerTypeNotProvided();
  }
  newHandler.setClazz(typeName);
  ModelNode handler=Resource.Tools.readModel(context.readResourceFromRoot(pathAddress));
  if (handler.hasDefined(COMMON_HANDLER_PARAMETER.getName())) {
    for (    Property handlerParameter : handler.get(COMMON_HANDLER_PARAMETER.getName()).asPropertyList()) {
      String paramName=handlerParameter.getName();
      String paramValue=HandlerParameterResourceDefinition.VALUE.resolveModelAttribute(context,handlerParameter.getValue()).asString();
      KeyValueType kv=new KeyValueType();
      kv.setKey(paramName);
      kv.setValue(paramValue);
      newHandler.add(kv);
    }
  }
  SAMLHandlerService service=new SAMLHandlerService(newHandler);
  PathElement providerAlias=pathAddress.subAddress(0,pathAddress.size() - 1).getLastElement();
  ServiceTarget serviceTarget=context.getServiceTarget();
  ServiceBuilder<SAMLHandlerService> serviceBuilder=serviceTarget.addService(createServiceName(providerAlias.getValue(),newHandler.getClazz()),service);
  ServiceName serviceName;
  if (providerAlias.getKey().equals(IDENTITY_PROVIDER.getName())) {
    serviceName=IdentityProviderService.createServiceName(providerAlias.getValue());
  }
 else {
    serviceName=ServiceProviderService.createServiceName(providerAlias.getValue());
  }
  serviceBuilder.addDependency(serviceName,EntityProviderService.class,service.getEntityProviderService());
  if (verificationHandler != null) {
    serviceBuilder.addListener(verificationHandler);
  }
  ServiceController<SAMLHandlerService> controller=serviceBuilder.setInitialMode(ServiceController.Mode.PASSIVE).install();
  if (newControllers != null) {
    newControllers.add(controller);
  }
  if (!context.isBooting()) {
    context.reloadRequired();
  }
}
