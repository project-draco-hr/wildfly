{
  String name=null;
  String path=null;
  String relativeTo=null;
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    final String value=reader.getAttributeValue(i);
    if (reader.getAttributeNamespace(i) != null) {
      throw unexpectedAttribute(reader,i);
    }
 else {
      final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case NAME:
{
          name=value.trim();
          if (RESTRICTED_PATHS.contains(value)) {
            throw new XMLStreamException(name + " is reserved",reader.getLocation());
          }
          if (!defined.add(name)) {
            throw new XMLStreamException(name + " already defined",reader.getLocation());
          }
          break;
        }
case PATH:
{
        path=value;
        break;
      }
case RELATIVE_TO:
{
      relativeTo=value;
      break;
    }
default :
{
    throw unexpectedAttribute(reader,i);
  }
}
}
}
if (name == null) {
throw missingRequired(reader,Collections.singleton(Attribute.NAME));
}
if (requirePath && path == null) {
throw missingRequired(reader,Collections.singleton(Attribute.PATH));
}
requireNoContent(reader);
final ModelNode update=new ModelNode();
update.get("address").set(address);
update.get("operation").set("update-path");
update.get("name").set(name);
update.get("path").set(path);
if (relativeTo != null) update.get("relativeTo").set(relativeTo);
list.add(update);
}
