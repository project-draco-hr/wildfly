{
  KernelServices services=createKernelServicesBuilder(createRuntimeAdditionalInitialization()).setSubsystemXmlResource("remoting-with-connector.xml").build();
  ServiceController<?> endPointService=services.getContainer().getRequiredService(RemotingServices.SUBSYSTEM_ENDPOINT);
  assertNotNull(endPointService);
  ServiceName connectorServiceName=RemotingServices.serverServiceName("test-connector");
  ServiceController<?> connectorService=services.getContainer().getRequiredService(connectorServiceName);
  assertNotNull(connectorService);
  ModelNode model=services.readWholeModel();
  ModelNode subsystem=model.require(SUBSYSTEM).require(RemotingExtension.SUBSYSTEM_NAME);
  for (  AttributeDefinition ad : RemotingSubsystemRootResource.ATTRIBUTES) {
    ModelNode dflt=ad.getDefaultValue();
    assertEquals(ad.getName(),dflt == null ? new ModelNode() : dflt,subsystem.require(ad.getName()));
  }
  ModelNode endpoint=subsystem.get(RemotingEndpointResource.ENDPOINT_PATH.getKey(),RemotingEndpointResource.ENDPOINT_PATH.getValue());
  for (  AttributeDefinition ad : RemotingEndpointResource.ATTRIBUTES) {
    ModelNode dflt=ad.getDefaultValue();
    assertEquals(ad.getName(),dflt == null ? new ModelNode() : dflt,endpoint.require(ad.getName()));
  }
  ModelNode connector=subsystem.require(CommonAttributes.CONNECTOR).require("test-connector");
  assertEquals(1,connector.require(CommonAttributes.PROPERTY).require("org.xnio.Options.WORKER_ACCEPT_THREADS").require(CommonAttributes.VALUE).asInt());
}
