{
  Class<?> type=null;
  final String expectedMethodName="set" + Character.toUpperCase(name.charAt(0)) + name.substring(1);
  final Class<?> targetType=targetClassValue.getValue();
  final Method[] methods=targetType.getMethods();
  for (  Method method : methods) {
    if (expectedMethodName.equals(method.getName())) {
      final Class<?>[] types=method.getParameterTypes();
      if (types.length == 1) {
        type=types[0];
        break;
      }
    }
  }
  if (type == null) {
    log.warn("Unable to find type for property " + name + " on class "+ targetType);
    return null;
  }
  final PropertyEditor editor=PropertyEditorManager.findEditor(type);
  if (editor == null) {
    log.warn("Unable to find PropertyEditor for type " + type);
    return null;
  }
  editor.setAsText(value);
  return (T)editor.getValue();
}
