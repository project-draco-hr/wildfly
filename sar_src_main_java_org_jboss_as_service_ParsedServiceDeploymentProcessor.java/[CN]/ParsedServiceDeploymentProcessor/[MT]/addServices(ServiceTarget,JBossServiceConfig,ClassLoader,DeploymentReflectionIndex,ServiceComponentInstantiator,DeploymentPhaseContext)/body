{
  final String mBeanClassName=mBeanConfig.getCode();
  final List<ClassReflectionIndex<?>> mBeanClassHierarchy=ReflectionUtils.getClassHierarchy(mBeanClassName,index,classLoader);
  final Object mBeanInstance=newInstance(mBeanConfig,mBeanClassHierarchy,classLoader);
  final String mBeanName=mBeanConfig.getName();
  final MBeanServices mBeanServices=new MBeanServices(mBeanName,mBeanInstance,mBeanClassHierarchy,target,componentInstantiator,phaseContext.getDeploymentUnit().getServiceName(),classLoader);
  final JBossServiceDependencyConfig[] dependencyConfigs=mBeanConfig.getDependencyConfigs();
  if (dependencyConfigs != null) {
    final Service<Object> createDestroyService=mBeanServices.getCreateDestroyService();
    for (    final JBossServiceDependencyConfig dependencyConfig : dependencyConfigs) {
      final Injector<Object> injector=getInjector(dependencyConfig,mBeanClassHierarchy,createDestroyService);
      mBeanServices.addDependency(dependencyConfig.getDependencyName(),injector);
    }
  }
  final JBossServiceAttributeConfig[] attributeConfigs=mBeanConfig.getAttributeConfigs();
  if (attributeConfigs != null) {
    final Service<Object> createDestroyService=mBeanServices.getCreateDestroyService();
    for (    final JBossServiceAttributeConfig attributeConfig : attributeConfigs) {
      final String propertyName=attributeConfig.getName();
      final Inject injectConfig=attributeConfig.getInject();
      final ValueFactory valueFactoryConfig=attributeConfig.getValueFactory();
      if (injectConfig != null) {
        final Value<?> value=getValue(injectConfig,mBeanClassHierarchy);
        final Injector<Object> injector=getPropertyInjector(propertyName,mBeanClassHierarchy,createDestroyService,value);
        mBeanServices.addDependency(injectConfig.getBeanName(),injector);
      }
 else       if (valueFactoryConfig != null) {
        final Value<?> value=getValue(valueFactoryConfig,mBeanClassHierarchy,classLoader);
        final Injector<Object> injector=getPropertyInjector(propertyName,mBeanClassHierarchy,createDestroyService,value);
        mBeanServices.addDependency(valueFactoryConfig.getBeanName(),injector);
      }
 else {
        final Value<?> value=getValue(attributeConfig,mBeanClassHierarchy);
        final Injector<Object> injector=getPropertyInjector(propertyName,mBeanClassHierarchy,createDestroyService,Values.injectedValue());
        mBeanServices.addInjectionValue(injector,value);
      }
    }
  }
  mBeanServices.install();
}
