{
  final String connectorName=model.require(CONNECTOR_REF).asString();
  final String threadPoolName=model.require(THREAD_POOL_NAME).asString();
  final ServiceName remotingServerServiceName=RemotingServices.serverServiceName(connectorName);
  final List<ServiceController<?>> services=new ArrayList<ServiceController<?>>();
  final ServiceTarget serviceTarget=context.getServiceTarget();
  final EJBRemotingConnectorClientMappingsEntryProviderService clientMappingEntryProviderService=new EJBRemotingConnectorClientMappingsEntryProviderService(remotingServerServiceName);
  final ServiceBuilder clientMappingEntryProviderServiceBuilder=serviceTarget.addService(EJBRemotingConnectorClientMappingsEntryProviderService.SERVICE_NAME,clientMappingEntryProviderService).addDependency(ServerEnvironmentService.SERVICE_NAME,ServerEnvironment.class,clientMappingEntryProviderService.getServerEnvironmentInjector()).addDependency(remotingServerServiceName);
  if (verificationHandler != null) {
    clientMappingEntryProviderServiceBuilder.addListener(verificationHandler);
  }
  final ServiceController clientMappingEntryProviderServiceController=clientMappingEntryProviderServiceBuilder.install();
  services.add(clientMappingEntryProviderServiceController);
  final EJBRemoteConnectorService ejbRemoteConnectorService=new EJBRemoteConnectorService((byte)0x01,new String[]{"river"},remotingServerServiceName);
  final ServiceBuilder<EJBRemoteConnectorService> ejbRemoteConnectorServiceBuilder=serviceTarget.addService(EJBRemoteConnectorService.SERVICE_NAME,ejbRemoteConnectorService);
  ejbRemoteConnectorServiceBuilder.addDependency(RemotingServices.SUBSYSTEM_ENDPOINT,Endpoint.class,ejbRemoteConnectorService.getEndpointInjector());
  ejbRemoteConnectorServiceBuilder.addDependency(remotingServerServiceName);
  ejbRemoteConnectorServiceBuilder.addDependency(EJB3SubsystemModel.BASE_THREAD_POOL_SERVICE_NAME.append(threadPoolName),ExecutorService.class,ejbRemoteConnectorService.getExecutorService()).addDependency(DeploymentRepository.SERVICE_NAME,DeploymentRepository.class,ejbRemoteConnectorService.getDeploymentRepositoryInjector()).addDependency(EJBRemoteTransactionsRepository.SERVICE_NAME,EJBRemoteTransactionsRepository.class,ejbRemoteConnectorService.getEJBRemoteTransactionsRepositoryInjector()).addDependency(ClusteredBackingCacheEntryStoreSourceService.CLIENT_MAPPING_REGISTRY_COLLECTOR_SERVICE_NAME,RegistryCollector.class,ejbRemoteConnectorService.getClusterRegistryCollectorInjector()).addDependency(ServerEnvironmentService.SERVICE_NAME,ServerEnvironment.class,ejbRemoteConnectorService.getServerEnvironmentInjector()).addDependency(TransactionManagerService.SERVICE_NAME,TransactionManager.class,ejbRemoteConnectorService.getTransactionManagerInjector()).addDependency(TransactionSynchronizationRegistryService.SERVICE_NAME,TransactionSynchronizationRegistry.class,ejbRemoteConnectorService.getTxSyncRegistryInjector()).setInitialMode(ServiceController.Mode.ACTIVE);
  if (verificationHandler != null) {
    ejbRemoteConnectorServiceBuilder.addListener(verificationHandler);
  }
  final ServiceController ejbRemotingConnectorServiceController=ejbRemoteConnectorServiceBuilder.install();
  services.add(ejbRemotingConnectorServiceController);
  return services;
}
