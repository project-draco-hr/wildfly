{
  final String connectorName=EJB3RemoteResourceDefinition.CONNECTOR_REF.resolveModelAttribute(context,model).asString();
  final String threadPoolName=EJB3RemoteResourceDefinition.THREAD_POOL_NAME.resolveModelAttribute(context,model).asString();
  final ServiceName remotingServerInfoServiceName=RemotingConnectorBindingInfoService.serviceName(connectorName);
  final List<ServiceController<?>> services=new ArrayList<ServiceController<?>>();
  final ServiceTarget serviceTarget=context.getServiceTarget();
  final EJBRemotingConnectorClientMappingsEntryProviderService clientMappingEntryProviderService=new EJBRemotingConnectorClientMappingsEntryProviderService();
  final ServiceBuilder<?> clientMappingEntryProviderServiceBuilder=serviceTarget.addService(EJBRemotingConnectorClientMappingsEntryProviderService.SERVICE_NAME,clientMappingEntryProviderService).addDependency(ServerEnvironmentService.SERVICE_NAME,ServerEnvironment.class,clientMappingEntryProviderService.getServerEnvironmentInjector()).addDependency(remotingServerInfoServiceName,RemotingConnectorBindingInfoService.RemotingConnectorInfo.class,clientMappingEntryProviderService.getRemotingConnectorInfoInjector());
  if (verificationHandler != null) {
    clientMappingEntryProviderServiceBuilder.addListener(verificationHandler);
  }
  final ServiceController<?> clientMappingEntryProviderServiceController=clientMappingEntryProviderServiceBuilder.install();
  services.add(clientMappingEntryProviderServiceController);
  final OptionMap channelCreationOptions=this.getChannelCreationOptions(context);
  final EJBRemoteConnectorService ejbRemoteConnectorService=new EJBRemoteConnectorService((byte)0x02,new String[]{"river"},channelCreationOptions);
  final ServiceBuilder<EJBRemoteConnectorService> ejbRemoteConnectorServiceBuilder=serviceTarget.addService(EJBRemoteConnectorService.SERVICE_NAME,ejbRemoteConnectorService);
  ejbRemoteConnectorServiceBuilder.addDependency(RemotingServices.SUBSYSTEM_ENDPOINT,Endpoint.class,ejbRemoteConnectorService.getEndpointInjector());
  ejbRemoteConnectorServiceBuilder.addDependency(EJB3SubsystemModel.BASE_THREAD_POOL_SERVICE_NAME.append(threadPoolName),ExecutorService.class,ejbRemoteConnectorService.getExecutorService()).addDependency(DeploymentRepository.SERVICE_NAME,DeploymentRepository.class,ejbRemoteConnectorService.getDeploymentRepositoryInjector()).addDependency(EJBRemoteTransactionsRepository.SERVICE_NAME,EJBRemoteTransactionsRepository.class,ejbRemoteConnectorService.getEJBRemoteTransactionsRepositoryInjector()).addDependency(ClusteredBackingCacheEntryStoreSourceService.CLIENT_MAPPING_REGISTRY_COLLECTOR_SERVICE_NAME,RegistryCollector.class,ejbRemoteConnectorService.getClusterRegistryCollectorInjector()).addDependency(TransactionManagerService.SERVICE_NAME,TransactionManager.class,ejbRemoteConnectorService.getTransactionManagerInjector()).addDependency(TransactionSynchronizationRegistryService.SERVICE_NAME,TransactionSynchronizationRegistry.class,ejbRemoteConnectorService.getTxSyncRegistryInjector()).addDependency(RemoteAsyncInvocationCancelStatusService.SERVICE_NAME,RemoteAsyncInvocationCancelStatusService.class,ejbRemoteConnectorService.getAsyncInvocationCancelStatusInjector()).addDependency(remotingServerInfoServiceName,RemotingConnectorBindingInfoService.RemotingConnectorInfo.class,ejbRemoteConnectorService.getRemotingConnectorInfoInjectedValue()).setInitialMode(ServiceController.Mode.ACTIVE);
  if (verificationHandler != null) {
    ejbRemoteConnectorServiceBuilder.addListener(verificationHandler);
  }
  final ServiceController<?> ejbRemotingConnectorServiceController=ejbRemoteConnectorServiceBuilder.install();
  services.add(ejbRemotingConnectorServiceController);
  return services;
}
