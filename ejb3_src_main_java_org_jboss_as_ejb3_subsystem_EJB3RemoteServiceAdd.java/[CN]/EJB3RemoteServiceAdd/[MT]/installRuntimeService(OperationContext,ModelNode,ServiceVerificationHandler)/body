{
  final String connectorName=model.require(CONNECTOR_REF).asString();
  final String threadPoolName=model.require(THREAD_POOL_NAME).asString();
  final ServiceTarget serviceTarget=context.getServiceTarget();
  final EJBRemoteConnectorService service=new EJBRemoteConnectorService((byte)0x01,new String[]{"river"});
  final ServiceBuilder<EJBRemoteConnectorService> ejbRemoteConnectorServiceBuilder=serviceTarget.addService(EJBRemoteConnectorService.SERVICE_NAME,service);
  ejbRemoteConnectorServiceBuilder.addDependency(RemotingServices.SUBSYSTEM_ENDPOINT,Endpoint.class,service.getEndpointInjector());
  ejbRemoteConnectorServiceBuilder.addDependency(EJB3ThreadPoolAdd.BASE_SERVICE_NAME.append(threadPoolName),ExecutorService.class,service.getExecutorService()).addDependency(DeploymentRepository.SERVICE_NAME,DeploymentRepository.class,service.getDeploymentRepositoryInjector()).addDependency(EJBRemoteTransactionsRepository.SERVICE_NAME,EJBRemoteTransactionsRepository.class,service.getEJBRemoteTransactionsRepositoryInjector()).addDependency(GroupMembershipNotifierRegistryService.SERVICE_NAME,GroupMembershipNotifierRegistry.class,service.getClusterRegistryInjector()).setInitialMode(ServiceController.Mode.ACTIVE);
  if (verificationHandler != null) {
    ejbRemoteConnectorServiceBuilder.addListener(verificationHandler);
  }
  return ejbRemoteConnectorServiceBuilder.install();
}
