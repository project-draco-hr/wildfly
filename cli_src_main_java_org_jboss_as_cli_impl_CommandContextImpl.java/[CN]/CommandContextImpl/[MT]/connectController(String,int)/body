{
  if (host == null) {
    host=defaultControllerHost;
  }
  if (port < 0) {
    port=defaultControllerPort;
  }
  boolean retry;
  do {
    retry=false;
    try {
      ModelControllerClient newClient=null;
      CallbackHandler cbh=new AuthenticationCallbackHandler(username,password);
      ModelControllerClient tempClient=ModelControllerClient.Factory.create(host,port,cbh,sslContext);
switch (initialConnection(tempClient)) {
case SUCCESS:
        newClient=tempClient;
      break;
case CONNECTION_FAILURE:
    error("The controller is not available at " + host + ":"+ port);
  break;
case AUTHENTICATION_FAILURE:
error("Unable to authenticate against controller at " + host + ":"+ port);
break;
case SSL_FAILURE:
try {
retry=handleSSLFailure();
}
 catch (IOException ignored) {
}
if (retry == false) {
error("Unable to negotiate SSL connection with controller at " + host + ":"+ port);
}
break;
}
if (newClient != null) {
if (this.client != null) {
disconnectController();
}
client=newClient;
this.controllerHost=host;
this.controllerPort=port;
List<String> nodeTypes=Util.getNodeTypes(newClient,new DefaultOperationRequestAddress());
domainMode=nodeTypes.contains(Util.SERVER_GROUP);
}
}
 catch (UnknownHostException e) {
error("Failed to resolve host '" + host + "': "+ e.getLocalizedMessage());
}
}
 while (retry);
}
