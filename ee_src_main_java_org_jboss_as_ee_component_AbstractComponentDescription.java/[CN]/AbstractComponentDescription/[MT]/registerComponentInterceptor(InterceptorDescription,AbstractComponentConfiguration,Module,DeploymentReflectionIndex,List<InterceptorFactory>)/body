{
  try {
    final Class<?> interceptorClass=module.getClassLoader().loadClass(interceptor.getInterceptorClassName());
    final InjectingInterceptorInstanceFactory instanceFactory=new InjectingInterceptorInstanceFactory(new SimpleInterceptorInstanceFactory(interceptorClass),interceptorClass,configuration);
    for (    InterceptorMethodDescription aroundInvoke : interceptor.getAroundInvokeMethods()) {
      final Class<?> methodDeclaringClass=module.getClassLoader().loadClass(aroundInvoke.getDeclaringClass());
      final ClassReflectionIndex<?> methodDeclaringClassIndex=index.getClassIndex(methodDeclaringClass);
      final Method aroundInvokeMethod=methodDeclaringClassIndex.getMethod(Object.class,aroundInvoke.getIdentifier().getName(),InvocationContext.class);
      interceptorFactories.add(new MethodInterceptorFactory(instanceFactory,aroundInvokeMethod));
    }
  }
 catch (  ClassNotFoundException e) {
    throw new DeploymentUnitProcessingException("Failed to load interceptor class " + interceptor.getInterceptorClassName());
  }
}
