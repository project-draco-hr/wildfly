{
  final ModelNode compensatingOperation=new ModelNode();
  compensatingOperation.get(OP).set(ModelDescriptionConstants.REMOVE);
  compensatingOperation.get(OP_ADDR).set(operation.require(OP_ADDR));
  final String interfaceName=operation.require(ModelDescriptionConstants.INTERFACE).asString();
  final int port=operation.require(ModelDescriptionConstants.PORT).asInt();
  final ModelNode subModel=context.getSubModel();
  subModel.get(ModelDescriptionConstants.INTERFACE).set(interfaceName);
  subModel.get(ModelDescriptionConstants.PORT).set(port);
  if (context.getRuntimeContext() != null) {
    context.getRuntimeContext().setRuntimeTask(new RuntimeTask(){
      public void execute(      RuntimeTaskContext context) throws OperationFailedException {
        final ServiceTarget serviceTarget=context.getServiceTarget();
        Logger.getLogger("org.jboss.as").infof("creating http management service using network interface (%s) port (%s)",interfaceName,port);
        final HttpManagementService service=new HttpManagementService();
        serviceTarget.addService(HttpManagementService.SERVICE_NAME,service).addDependency(NetworkInterfaceService.JBOSS_NETWORK_INTERFACE.append(interfaceName),NetworkInterfaceBinding.class,service.getInterfaceInjector()).addDependency(DomainController.SERVICE_NAME,ModelController.class,service.getModelControllerInjector()).addInjection(service.getTempDirInjector(),environment.getDomainTempDir().getAbsolutePath()).addInjection(service.getPortInjector(),port).addInjection(service.getExecutorServiceInjector(),Executors.newCachedThreadPool(new JBossThreadFactory(new ThreadGroup("HttpManagementService-threads"),Boolean.FALSE,null,"%G - %t",null,null,AccessController.getContext()))).setInitialMode(ServiceController.Mode.ACTIVE).install();
      }
    }
);
  }
  BasicOperationResult operationResult=new BasicOperationResult(compensatingOperation);
  resultHandler.handleResultComplete();
  return operationResult;
}
