{
  final ModelNode rootDeploymentAddress2=new ModelNode();
  rootDeploymentAddress2.add(DEPLOYMENT,"test2");
  rootDeploymentAddress2.protect();
  final ModelNode otherServerGroupDeploymentAddress2=new ModelNode();
  otherServerGroupDeploymentAddress2.add(SERVER_GROUP,"other-server-group");
  otherServerGroupDeploymentAddress2.add(DEPLOYMENT,"test2");
  otherServerGroupDeploymentAddress2.protect();
class LocalMethods {
    Operation createDeploymentOperation(    ModelNode rootDeploymentAddress,    ModelNode serverGroupDeploymentAddress){
      ModelNode composite=getEmptyOperation(COMPOSITE,ROOT_ADDRESS);
      ModelNode steps=composite.get(STEPS);
      ModelNode step=steps.add();
      step.set(getEmptyOperation(ADD,rootDeploymentAddress));
      ModelNode content=new ModelNode();
      content.get(INPUT_STREAM_INDEX).set(0);
      step.get(CONTENT).add(content);
      step=steps.add();
      step.set(getEmptyOperation(ADD,serverGroupDeploymentAddress));
      step.get(ENABLED).set(true);
      OperationBuilder builder=new OperationBuilder(composite,true);
      builder.addInputStream(webArchive.as(ZipExporter.class).exportAsInputStream());
      return builder.build();
    }
    ModelNode createRemoveOperation(    ModelNode rootDeploymentAddress,    ModelNode serverGroupDeploymentAddress){
      ModelNode composite=getEmptyOperation(COMPOSITE,ROOT_ADDRESS);
      ModelNode steps=composite.get(STEPS);
      ModelNode step=steps.add();
      step.set(getEmptyOperation(REMOVE,serverGroupDeploymentAddress));
      step=steps.add();
      step.set(getEmptyOperation(REMOVE,rootDeploymentAddress));
      return composite;
    }
  }
  ;
  LocalMethods localMethods=new LocalMethods();
  try {
    executeOnMaster(localMethods.createDeploymentOperation(ROOT_DEPLOYMENT_ADDRESS,MAIN_SERVER_GROUP_DEPLOYMENT_ADDRESS));
    try {
      executeOnMaster(localMethods.createDeploymentOperation(rootDeploymentAddress2,otherServerGroupDeploymentAddress2));
    }
  finally {
      executeOnMaster(localMethods.createRemoveOperation(rootDeploymentAddress2,otherServerGroupDeploymentAddress2));
    }
    ModelNode undeploySg=getEmptyOperation(REMOVE,MAIN_SERVER_GROUP_DEPLOYMENT_ADDRESS);
    executeOnMaster(undeploySg);
    ModelNode deploySg=getEmptyOperation(ADD,MAIN_SERVER_GROUP_DEPLOYMENT_ADDRESS);
    deploySg.get(ENABLED).set(true);
    executeOnMaster(deploySg);
  }
  finally {
    executeOnMaster(localMethods.createRemoveOperation(ROOT_DEPLOYMENT_ADDRESS,MAIN_SERVER_GROUP_DEPLOYMENT_ADDRESS));
  }
}
