{
  final ConnectorSubsystemAdd add=new ConnectorSubsystemAdd();
  final EnumSet<Element> visited=EnumSet.noneOf(Element.class);
  while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
switch (Namespace.forUri(reader.getNamespaceURI())) {
case CONNECTOR_1_0:
{
        final Element element=Element.forName(reader.getLocalName());
        if (!visited.add(element)) {
          throw unexpectedElement(reader);
        }
switch (element) {
case ARCHIVE_VALIDATION:
{
            final int cnt=reader.getAttributeCount();
            for (int i=0; i < cnt; i++) {
              final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case ENABLED:
{
                  add.setArchiveValidation(Boolean.parseBoolean(reader.getAttributeValue(i)));
                  break;
                }
case FAIL_ON_ERROR:
{
                add.setArchiveValidationFailOnError(Boolean.parseBoolean(reader.getAttributeValue(i)));
                break;
              }
case FAIL_ON_WARN:
{
              add.setArchiveValidationFailOnWarn(Boolean.parseBoolean(reader.getAttributeValue(i)));
              break;
            }
default :
{
            throw unexpectedAttribute(reader,i);
          }
      }
    }
    requireNoContent(reader);
    break;
  }
case BEAN_VALIDATION:
{
  final boolean enabled=readBooleanAttributeElement(reader,Attribute.ENABLED.getLocalName());
  add.setBeanValidation(enabled);
  requireNoContent(reader);
  break;
}
default :
throw unexpectedElement(reader);
}
break;
}
default :
throw unexpectedElement(reader);
}
}
result.setResult(new ExtensionContext.SubsystemConfiguration<ConnectorSubsystemElement>(add));
}
