{
  ServiceReferenceMetaData serviceReference=new ServiceReferenceMetaData();
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    final String value=reader.getAttributeValue(i);
    if (reader.getAttributeNamespace(i) != null) {
      continue;
    }
    final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case ID:
{
        serviceReference.setId(value);
        break;
      }
default :
    throw unexpectedAttribute(reader,i);
}
}
DescriptionGroupMetaData descriptionGroup=new DescriptionGroupMetaData();
while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
if (DescriptionGroupMetaDataParser.parse(reader,descriptionGroup)) {
  if (serviceReference.getDescriptionGroup() == null) {
    serviceReference.setDescriptionGroup(descriptionGroup);
  }
  continue;
}
if (ResourceInjectionMetaDataParser.parse(reader,serviceReference)) {
  continue;
}
final Element element=Element.forName(reader.getLocalName());
switch (element) {
case SERVICE_REF_NAME:
  serviceReference.setServiceRefName(reader.getElementText());
break;
case SERVICE_INTERFACE:
serviceReference.setServiceInterface(reader.getElementText());
break;
case SERVICE_REF_TYPE:
serviceReference.setServiceRefType(reader.getElementText());
break;
case WSDL_FILE:
serviceReference.setWsdlFile(reader.getElementText());
break;
case JAXRPC_MAPPING_FILE:
serviceReference.setJaxrpcMappingFile(reader.getElementText());
break;
case SERVICE_QNAME:
serviceReference.setServiceQname(parseQName(reader.getElementText()));
break;
case PORT_COMPONENT_REF:
List<PortComponentRef> portComponentRefs=(List<PortComponentRef>)serviceReference.getPortComponentRef();
if (portComponentRefs == null) {
portComponentRefs=new ArrayList<PortComponentRef>();
serviceReference.setPortComponentRef(portComponentRefs);
}
portComponentRefs.add(PortComponentRefParser.parse(reader));
break;
case HANDLER:
ServiceReferenceHandlersMetaData handlers=serviceReference.getHandlers();
if (handlers == null) {
handlers=new ServiceReferenceHandlersMetaData();
serviceReference.setHandlers(handlers);
}
handlers.add(ServiceReferenceHandlerMetaDataParser.parse(reader));
break;
case HANDLER_CHAIN:
ServiceReferenceHandlerChainsMetaData handlerChains=serviceReference.getHandlerChains();
if (handlerChains == null) {
handlerChains=new ServiceReferenceHandlerChainsMetaData();
handlerChains.setHandlers(new ArrayList<ServiceReferenceHandlerChainMetaData>());
serviceReference.setHandlerChains(handlerChains);
}
handlerChains.getHandlers().add(ServiceReferenceHandlerChainMetaDataParser.parse(reader));
break;
default :
throw unexpectedElement(reader);
}
}
return serviceReference;
}
