{
  final ModelNode compensatingOperation=new ModelNode();
  compensatingOperation.get(OP_ADDR).set(operation.require(OP_ADDR));
  compensatingOperation.get(OP).set("remove-root-logger");
  final String level=operation.require(CommonAttributes.LEVEL).asString();
  final ModelNode handlers=operation.get(CommonAttributes.HANDLERS);
  final ModelNode subModel=context.getSubModel();
  subModel.get(CommonAttributes.ROOT_LOGGER,CommonAttributes.LEVEL).set(level);
  subModel.get(CommonAttributes.ROOT_LOGGER,CommonAttributes.HANDLERS).set(handlers);
  if (context instanceof RuntimeOperationContext) {
    RuntimeOperationContext.class.cast(context).executeRuntimeTask(new RuntimeTask(){
      public void execute(      RuntimeTaskContext context,      ResultHandler resultHandler) throws OperationFailedException {
        final ServiceTarget target=context.getServiceTarget();
        try {
          final RootLoggerService service=new RootLoggerService();
          service.setLevel(Level.parse(level));
          target.addService(LogServices.ROOT_LOGGER,service).setInitialMode(ServiceController.Mode.ACTIVE).install();
        }
 catch (        Throwable t) {
          throw new OperationFailedException(new ModelNode().set(t.getLocalizedMessage()));
        }
        try {
          if (handlers.getType() != ModelType.UNDEFINED) {
            LogServices.installLoggerHandlers(target,"",handlers);
          }
          resultHandler.handleResultComplete();
        }
 catch (        Throwable t) {
          throw new OperationFailedException(new ModelNode().set(t.getLocalizedMessage()));
        }
      }
    }
,resultHandler);
  }
 else {
    resultHandler.handleResultComplete();
  }
  return new BasicOperationResult(compensatingOperation);
}
