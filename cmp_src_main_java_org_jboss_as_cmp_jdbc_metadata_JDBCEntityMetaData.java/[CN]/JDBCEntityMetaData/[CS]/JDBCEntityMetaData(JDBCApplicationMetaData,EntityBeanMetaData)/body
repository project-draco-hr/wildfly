{
  this.jdbcApplication=jdbcApplication;
  entityName=entity.getEjbName();
  listCacheMax=1000;
  fetchSize=0;
  final ClassLoader classLoader=jdbcApplication.getClassLoader();
  try {
    entityClass=classLoader.loadClass(entity.getEjbClass());
  }
 catch (  ClassNotFoundException e) {
    throw new RuntimeException("Failed to load entity class",e);
  }
  try {
    primaryKeyClass=classLoader.loadClass(entity.getPrimKeyClass());
  }
 catch (  ClassNotFoundException e) {
    throw new RuntimeException("Failed to load primary key class",e);
  }
  isCMP1x=entity.isCMP1x();
  if (isCMP1x) {
    abstractSchemaName=(entity.getAbstractSchemaName() == null ? entityName : entity.getAbstractSchemaName());
  }
 else {
    abstractSchemaName=entity.getAbstractSchemaName();
  }
  primaryKeyFieldName=entity.getPrimKeyField();
  String home=entity.getHome();
  if (home != null) {
    try {
      homeClass=classLoader.loadClass(home);
    }
 catch (    ClassNotFoundException e) {
      throw new RuntimeException("Failed to load home class",e);
    }
    try {
      remoteClass=classLoader.loadClass(entity.getRemote());
    }
 catch (    ClassNotFoundException e) {
      throw new RuntimeException("Failed to load remote class",e);
    }
  }
 else {
    homeClass=null;
    remoteClass=null;
  }
  String localHome=entity.getLocalHome();
  if (localHome != null) {
    try {
      localHomeClass=classLoader.loadClass(localHome);
    }
 catch (    ClassNotFoundException e) {
      throw new RuntimeException("Failed to load local home class",e);
    }
    try {
      localClass=classLoader.loadClass(entity.getLocal());
    }
 catch (    ClassNotFoundException e) {
      throw new RuntimeException("Failed to load local class",e);
    }
  }
 else {
    if (home == null) {
      throw new RuntimeException("Entity must have atleast a home or local home: " + entityName);
    }
    localHomeClass=null;
    localClass=null;
  }
  tableName=entityName.replace('.','_');
  dataSourceName=null;
  dataSourceMappingName=null;
  createTable=false;
  removeTable=false;
  alterTable=false;
  rowLocking=false;
  primaryKeyConstraint=false;
  readOnly=false;
  readTimeOut=-1;
  qlCompiler=null;
  throwRuntimeExceptions=false;
  if (entity.getCmpFields() != null)   for (  CMPFieldMetaData cmpFieldMetaData : entity.getCmpFields()) {
    JDBCCMPFieldMetaData cmpField=new JDBCCMPFieldMetaData(this,cmpFieldMetaData.getFieldName());
    cmpFields.add(cmpField);
    cmpFieldsByName.put(cmpFieldMetaData.getFieldName(),cmpField);
  }
  if (primaryKeyClass == java.lang.Object.class) {
    JDBCCMPFieldMetaData upkField=new JDBCCMPFieldMetaData(this);
    cmpFields.add(upkField);
    cmpFieldsByName.put(upkField.getFieldName(),upkField);
  }
  eagerLoadGroup="*";
  if (entity.getQueries() != null)   for (  QueryMetaData queryData : entity.getQueries()) {
    queries.putAll(queryFactory.createJDBCQueryMetaData(queryData));
  }
  readAhead=JDBCReadAheadMetaData.DEFAULT;
  cleanReadAheadOnLoad=false;
  entityCommand=null;
  optimisticLocking=null;
  audit=null;
}
