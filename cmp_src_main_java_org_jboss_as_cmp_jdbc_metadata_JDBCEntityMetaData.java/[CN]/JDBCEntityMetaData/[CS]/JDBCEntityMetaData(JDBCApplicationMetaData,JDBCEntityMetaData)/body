{
  this.jdbcApplication=jdbcApplication;
  entityName=defaultValues.entityName;
  entityClass=defaultValues.entityClass;
  primaryKeyClass=defaultValues.primaryKeyClass;
  isCMP1x=defaultValues.isCMP1x;
  primaryKeyFieldName=defaultValues.primaryKeyFieldName;
  homeClass=defaultValues.homeClass;
  remoteClass=defaultValues.remoteClass;
  localHomeClass=defaultValues.localHomeClass;
  localClass=defaultValues.localClass;
  abstractSchemaName=defaultValues.abstractSchemaName;
  dataSourceName=defaultValues.dataSourceName;
  dataSourceMappingName=defaultValues.dataSourceMappingName;
  tableName=defaultValues.tableName;
  createTable=defaultValues.createTable;
  removeTable=defaultValues.removeTable;
  alterTable=defaultValues.alterTable;
  tablePostCreateCmd.addAll(defaultValues.tablePostCreateCmd);
  readOnly=defaultValues.readOnly;
  readTimeOut=defaultValues.readTimeOut;
  rowLocking=defaultValues.rowLocking;
  primaryKeyConstraint=defaultValues.primaryKeyConstraint;
  listCacheMax=defaultValues.listCacheMax;
  fetchSize=defaultValues.fetchSize;
  entityCommand=defaultValues.entityCommand;
  qlCompiler=defaultValues.qlCompiler;
  throwRuntimeExceptions=defaultValues.throwRuntimeExceptions;
  for (  JDBCCMPFieldMetaData cmpField : defaultValues.cmpFields) {
    JDBCCMPFieldMetaData newCmpField=new JDBCCMPFieldMetaData(this,cmpField);
    cmpFields.add(cmpField);
    cmpFieldsByName.put(cmpField.getFieldName(),newCmpField);
  }
  loadGroups.putAll(defaultValues.loadGroups);
  eagerLoadGroup=defaultValues.eagerLoadGroup;
  readAhead=defaultValues.readAhead;
  cleanReadAheadOnLoad=defaultValues.cleanReadAheadOnLoad;
  optimisticLocking=defaultValues.optimisticLocking;
  audit=defaultValues.audit;
  for (  JDBCQueryMetaData query : defaultValues.queries.values()) {
    queries.put(query.getMethod(),queryFactory.createJDBCQueryMetaData(query,readAhead,qlCompiler));
  }
}
