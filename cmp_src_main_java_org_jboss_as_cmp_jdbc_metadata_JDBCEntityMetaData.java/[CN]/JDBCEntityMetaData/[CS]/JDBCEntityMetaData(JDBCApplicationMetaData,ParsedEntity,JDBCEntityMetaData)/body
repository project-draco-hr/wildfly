{
  this.jdbcApplication=jdbcApplication;
  entityName=defaultValues.getName();
  entityClass=defaultValues.getEntityClass();
  primaryKeyClass=defaultValues.getPrimaryKeyClass();
  isCMP1x=defaultValues.isCMP1x;
  primaryKeyFieldName=defaultValues.getPrimaryKeyFieldName();
  homeClass=defaultValues.getHomeClass();
  remoteClass=defaultValues.getRemoteClass();
  localHomeClass=defaultValues.getLocalHomeClass();
  localClass=defaultValues.getLocalClass();
  if (isCMP1x) {
    abstractSchemaName=(defaultValues.getAbstractSchemaName() == null ? entityName : defaultValues.getAbstractSchemaName());
  }
 else {
    abstractSchemaName=defaultValues.getAbstractSchemaName();
  }
  if (parsed.getDataSourceName() != null) {
    dataSourceName=parsed.getDataSourceName();
  }
 else {
    dataSourceName=defaultValues.getDataSourceName();
  }
  if (parsed.getDataSourceMappingName() != null) {
    dataSourceMappingName=parsed.getDataSourceMappingName();
  }
 else {
    dataSourceMappingName=defaultValues.dataSourceMappingName;
  }
  if (parsed.getTableName() != null) {
    tableName=parsed.getTableName();
  }
 else {
    tableName=defaultValues.getDefaultTableName();
  }
  if (parsed.getCreateTable() != null) {
    createTable=parsed.getCreateTable();
  }
 else {
    createTable=defaultValues.getCreateTable();
  }
  if (parsed.getCreateTableIfNotExistsSupported() != null) {
    createTableIfNotExistsSupported=parsed.getCreateTableIfNotExistsSupported();
  }
 else {
    createTableIfNotExistsSupported=defaultValues.getCreateTableIfNotExistsSupported();
  }
  if (parsed.getRemoveTable() != null) {
    removeTable=parsed.getRemoveTable();
  }
 else {
    removeTable=defaultValues.getRemoveTable();
  }
  if (parsed.getAlterTable() != null) {
    alterTable=parsed.getAlterTable();
  }
 else {
    alterTable=defaultValues.getAlterTable();
  }
  if (!parsed.getTablePostCreateCmd().isEmpty()) {
    tablePostCreateCmd.addAll(parsed.getTablePostCreateCmd());
  }
 else {
    tablePostCreateCmd.addAll(defaultValues.getDefaultTablePostCreateCmd());
  }
  if (parsed.getReadOnly() != null) {
    readOnly=parsed.getReadOnly();
  }
 else {
    readOnly=defaultValues.isReadOnly();
  }
  if (parsed.getReadTimeOut() != null) {
    readTimeOut=parsed.getReadTimeOut();
  }
 else {
    readTimeOut=defaultValues.getReadTimeOut();
  }
  if (parsed.getRowLocking() != null) {
    rowLocking=!isReadOnly() && parsed.getRowLocking();
  }
 else {
    rowLocking=defaultValues.hasRowLocking();
  }
  if (parsed.getPrimaryKeyConstraint() != null) {
    primaryKeyConstraint=parsed.getPrimaryKeyConstraint();
  }
 else {
    primaryKeyConstraint=defaultValues.hasPrimaryKeyConstraint();
  }
  Integer listCacheMaxInt=parsed.getListCacheMax();
  if (listCacheMaxInt != null) {
    listCacheMax=listCacheMaxInt;
    if (listCacheMax < 0) {
      throw MESSAGES.negativeListCacheMax(listCacheMax);
    }
  }
 else {
    listCacheMax=defaultValues.getListCacheMax();
  }
  Integer fetchSizeInt=parsed.getFetchSize();
  if (fetchSizeInt != null) {
    fetchSize=fetchSizeInt;
    if (fetchSize < 0) {
      throw MESSAGES.negativeFetchSize(fetchSize);
    }
  }
 else {
    fetchSize=defaultValues.getFetchSize();
  }
  if (parsed.getQlCompiler() == null) {
    qlCompiler=defaultValues.qlCompiler;
  }
 else {
    qlCompiler=parsed.getQlCompiler();
  }
  if (parsed.getThrowRuntimeExceptions() != null) {
    throwRuntimeExceptions=parsed.getThrowRuntimeExceptions();
  }
 else {
    throwRuntimeExceptions=defaultValues.getThrowRuntimeExceptions();
  }
  for (  JDBCCMPFieldMetaData cmpField : defaultValues.cmpFields) {
    cmpFields.add(cmpField);
    cmpFieldsByName.put(cmpField.getFieldName(),cmpField);
  }
  for (  ParsedCmpField parsedField : parsed.getCmpFields()) {
    String fieldName=parsedField.getFieldName();
    JDBCCMPFieldMetaData oldCMPField=cmpFieldsByName.get(fieldName);
    if (oldCMPField == null) {
      throw MESSAGES.cmpFieldNotFound(fieldName,entityName);
    }
    JDBCCMPFieldMetaData cmpFieldMetaData=new JDBCCMPFieldMetaData(this,parsedField,oldCMPField);
    cmpFieldsByName.put(fieldName,cmpFieldMetaData);
    int index=cmpFields.indexOf(oldCMPField);
    cmpFields.remove(oldCMPField);
    cmpFields.add(index,cmpFieldMetaData);
  }
  if (primaryKeyClass == java.lang.Object.class) {
    if (parsed.getUpkField() != null) {
      JDBCCMPFieldMetaData oldUpkField=null;
      for (      JDBCCMPFieldMetaData cmpField : cmpFields) {
        if (cmpField.isUnknownPkField()) {
          oldUpkField=cmpField;
          break;
        }
      }
      if (oldUpkField == null) {
        oldUpkField=new JDBCCMPFieldMetaData(this);
      }
      JDBCCMPFieldMetaData upkField=new JDBCCMPFieldMetaData(this,parsed.getUpkField(),oldUpkField);
      cmpFieldsByName.remove(oldUpkField.getFieldName());
      cmpFieldsByName.put(upkField.getFieldName(),upkField);
      int oldUpkFieldInd=cmpFields.indexOf(oldUpkField);
      cmpFields.remove(oldUpkField);
      cmpFields.add(oldUpkFieldInd,upkField);
    }
  }
  loadGroups.putAll(defaultValues.loadGroups);
  loadGroups.putAll(parsed.getLoadGroups());
  if (parsed.getEagerLoadGroup() != null) {
    if (!parsed.getEagerLoadGroup().equals("*") && !loadGroups.containsKey(parsed.getEagerLoadGroup())) {
      throw CmpMessages.MESSAGES.eagerLoadGroupNotFound(parsed.getEagerLoadGroup());
    }
    eagerLoadGroup=parsed.getEagerLoadGroup();
  }
 else {
    eagerLoadGroup=defaultValues.getEagerLoadGroup();
  }
  lazyLoadGroups.addAll(defaultValues.lazyLoadGroups);
  lazyLoadGroups.addAll(parsed.getLazyLoadGroups());
  if (parsed.getReadAhead() != null) {
    readAhead=new JDBCReadAheadMetaData(parsed.getReadAhead(),defaultValues.getReadAhead());
  }
 else {
    readAhead=defaultValues.readAhead;
  }
  if (parsed.getCleanReadAheadOnLoad() != null) {
    cleanReadAheadOnLoad=parsed.getCleanReadAheadOnLoad();
  }
 else {
    cleanReadAheadOnLoad=defaultValues.cleanReadAheadOnLoad;
  }
  if (parsed.getOptimisticLocking() != null) {
    optimisticLocking=new JDBCOptimisticLockingMetaData(this,parsed.getOptimisticLocking());
  }
 else {
    optimisticLocking=defaultValues.getOptimisticLocking();
  }
  if (parsed.getAudit() != null) {
    audit=new JDBCAuditMetaData(this,parsed.getAudit());
  }
 else {
    audit=defaultValues.getAudit();
  }
  for (  JDBCQueryMetaData query : defaultValues.queries.values()) {
    query=queryFactory.createJDBCQueryMetaData(query,readAhead,qlCompiler);
    queries.put(query.getMethod(),query);
  }
  for (  ParsedQuery parsedQuery : parsed.getQueries()) {
    for (    JDBCQueryMetaData queryMetaData : queryFactory.createJDBCQueryMetaData(parsedQuery)) {
      queries.put(queryMetaData.getMethod(),queryMetaData);
    }
  }
  if (parsed.getEntityCommand() != null) {
    String entityCommandName=parsed.getEntityCommand().getCommandName();
    JDBCEntityCommandMetaData defaultEntityCommand=defaultValues.getEntityCommand();
    if ((defaultEntityCommand == null) || (!entityCommandName.equals(defaultEntityCommand.getCommandName()))) {
      defaultEntityCommand=jdbcApplication.getEntityCommandByName(entityCommandName);
    }
    if (defaultEntityCommand != null) {
      entityCommand=new JDBCEntityCommandMetaData(parsed.getEntityCommand(),defaultEntityCommand);
    }
 else {
      entityCommand=parsed.getEntityCommand();
    }
  }
 else {
    entityCommand=defaultValues.getEntityCommand();
  }
  cmpConfig=parsed.getCmpConfig();
}
