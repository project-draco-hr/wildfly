{
  node.get(type,Constants.NAME,TYPE).set(ModelType.STRING);
  node.get(type,Constants.NAME,DESCRIPTION).set(bundle.getString("web.connector.ssl.name"));
  node.get(type,Constants.NAME,REQUIRED).set(false);
  node.get(type,Constants.KEY_ALIAS,TYPE).set(ModelType.STRING);
  node.get(type,Constants.KEY_ALIAS,DESCRIPTION).set(bundle.getString("web.connector.ssl.key-alias"));
  node.get(type,Constants.KEY_ALIAS,REQUIRED).set(false);
  node.get(type,Constants.PASSWORD,TYPE).set(ModelType.STRING);
  node.get(type,Constants.PASSWORD,DESCRIPTION).set(bundle.getString("web.connector.ssl.password"));
  node.get(type,Constants.PASSWORD,REQUIRED).set(false);
  node.get(type,Constants.PASSWORD,ModelDescriptionConstants.EXPRESSIONS_ALLOWED).set(true);
  node.get(type,Constants.CERTIFICATE_KEY_FILE,TYPE).set(ModelType.STRING);
  node.get(type,Constants.CERTIFICATE_KEY_FILE,DESCRIPTION).set(bundle.getString("web.connector.ssl.certificate-key-file"));
  node.get(type,Constants.CERTIFICATE_KEY_FILE,REQUIRED).set(false);
  node.get(type,Constants.CERTIFICATE_KEY_FILE,ModelDescriptionConstants.EXPRESSIONS_ALLOWED).set(true);
  node.get(type,Constants.CIPHER_SUITE,TYPE).set(ModelType.STRING);
  node.get(type,Constants.CIPHER_SUITE,DESCRIPTION).set(bundle.getString("web.connector.ssl.cipher-suite"));
  node.get(type,Constants.CIPHER_SUITE,REQUIRED).set(false);
  node.get(type,Constants.PROTOCOL,TYPE).set(ModelType.STRING);
  node.get(type,Constants.PROTOCOL,DESCRIPTION).set(bundle.getString("web.connector.ssl.protocol"));
  node.get(type,Constants.PROTOCOL,REQUIRED).set(false);
  node.get(type,Constants.VERIFY_CLIENT,TYPE).set(ModelType.STRING);
  node.get(type,Constants.VERIFY_CLIENT,DESCRIPTION).set(bundle.getString("web.connector.ssl.verify-client"));
  node.get(type,Constants.VERIFY_CLIENT,REQUIRED).set(false);
  node.get(type,Constants.VERIFY_DEPTH,TYPE).set(ModelType.INT);
  node.get(type,Constants.VERIFY_DEPTH,DESCRIPTION).set(bundle.getString("web.connector.ssl.verify-depth"));
  node.get(type,Constants.VERIFY_DEPTH,REQUIRED).set(false);
  node.get(type,Constants.CERTIFICATE_FILE,TYPE).set(ModelType.STRING);
  node.get(type,Constants.CERTIFICATE_FILE,DESCRIPTION).set(bundle.getString("web.connector.ssl.certificate-file"));
  node.get(type,Constants.CERTIFICATE_FILE,REQUIRED).set(false);
  node.get(type,Constants.CERTIFICATE_FILE,ModelDescriptionConstants.EXPRESSIONS_ALLOWED).set(true);
  node.get(type,Constants.CA_CERTIFICATE_FILE,TYPE).set(ModelType.STRING);
  node.get(type,Constants.CA_CERTIFICATE_FILE,DESCRIPTION).set(bundle.getString("web.connector.ssl.ca-certificate-file"));
  node.get(type,Constants.CA_CERTIFICATE_FILE,REQUIRED).set(false);
  node.get(type,Constants.CA_CERTIFICATE_FILE,ModelDescriptionConstants.EXPRESSIONS_ALLOWED).set(true);
  node.get(type,Constants.CA_CERTIFICATE_PASSWORD,TYPE).set(ModelType.STRING);
  node.get(type,Constants.CA_CERTIFICATE_PASSWORD,DESCRIPTION).set(bundle.getString("web.connector.ssl.ca-certificate-file"));
  node.get(type,Constants.CA_CERTIFICATE_PASSWORD,REQUIRED).set(false);
  node.get(type,Constants.CA_CERTIFICATE_PASSWORD,ModelDescriptionConstants.EXPRESSIONS_ALLOWED).set(true);
  node.get(type,Constants.CA_REVOCATION_URL,TYPE).set(ModelType.STRING);
  node.get(type,Constants.CA_REVOCATION_URL,DESCRIPTION).set(bundle.getString("web.connector.ssl.ca-revocation-url"));
  node.get(type,Constants.CA_REVOCATION_URL,REQUIRED).set(false);
  node.get(type,Constants.SESSION_CACHE_SIZE,TYPE).set(ModelType.STRING);
  node.get(type,Constants.SESSION_CACHE_SIZE,DESCRIPTION).set(bundle.getString("web.connector.ssl.session-cache-size"));
  node.get(type,Constants.SESSION_CACHE_SIZE,REQUIRED).set(false);
  node.get(type,Constants.SESSION_TIMEOUT,TYPE).set(ModelType.STRING);
  node.get(type,Constants.SESSION_TIMEOUT,DESCRIPTION).set(bundle.getString("web.connector.ssl.session-timeout"));
  node.get(type,Constants.SESSION_TIMEOUT,REQUIRED).set(false);
  return node;
}
