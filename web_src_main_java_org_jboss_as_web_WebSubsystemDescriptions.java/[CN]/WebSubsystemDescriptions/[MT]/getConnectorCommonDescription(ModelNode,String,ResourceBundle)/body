{
  node.get(type,Constants.PROTOCOL,TYPE).set(ModelType.STRING);
  node.get(type,Constants.PROTOCOL,DESCRIPTION).set(bundle.getString("web.connector.protocol"));
  node.get(type,Constants.PROTOCOL,REQUIRED).set(true);
  node.get(type,Constants.SOCKET_BINDING,TYPE).set(ModelType.STRING);
  node.get(type,Constants.SOCKET_BINDING,DESCRIPTION).set(bundle.getString("web.connector.socket-binding"));
  node.get(type,Constants.SOCKET_BINDING,REQUIRED).set(true);
  node.get(type,Constants.SOCKET_BINDING,NILLABLE).set(false);
  node.get(type,Constants.SCHEME,TYPE).set(ModelType.STRING);
  node.get(type,Constants.SCHEME,DESCRIPTION).set(bundle.getString("web.connector.scheme"));
  node.get(type,Constants.SCHEME,REQUIRED).set(false);
  node.get(type,Constants.EXECUTOR,TYPE).set(ModelType.STRING);
  node.get(type,Constants.EXECUTOR,DESCRIPTION).set(bundle.getString("web.connector.executor"));
  node.get(type,Constants.EXECUTOR,REQUIRED).set(false);
  node.get(type,Constants.ENABLED,TYPE).set(ModelType.BOOLEAN);
  node.get(type,Constants.ENABLED,DESCRIPTION).set(bundle.getString("web.connector.enabled"));
  node.get(type,Constants.ENABLED,REQUIRED).set(false);
  node.get(type,Constants.ENABLE_LOOKUPS,TYPE).set(ModelType.BOOLEAN);
  node.get(type,Constants.ENABLE_LOOKUPS,DESCRIPTION).set(bundle.getString("web.connector.enable-lookups"));
  node.get(type,Constants.ENABLE_LOOKUPS,REQUIRED).set(false);
  node.get(type,Constants.PROXY_NAME,TYPE).set(ModelType.STRING);
  node.get(type,Constants.PROXY_NAME,DESCRIPTION).set(bundle.getString("web.connector.proxy-name"));
  node.get(type,Constants.PROXY_NAME,REQUIRED).set(false);
  node.get(type,Constants.PROXY_PORT,TYPE).set(ModelType.INT);
  node.get(type,Constants.PROXY_PORT,DESCRIPTION).set(bundle.getString("web.connector.proxy-port"));
  node.get(type,Constants.PROXY_PORT,REQUIRED).set(false);
  node.get(type,Constants.MAX_POST_SIZE,TYPE).set(ModelType.INT);
  node.get(type,Constants.MAX_POST_SIZE,DESCRIPTION).set(bundle.getString("web.connector.max-post-size"));
  node.get(type,Constants.MAX_POST_SIZE,REQUIRED).set(false);
  node.get(type,Constants.MAX_SAVE_POST_SIZE,TYPE).set(ModelType.INT);
  node.get(type,Constants.MAX_SAVE_POST_SIZE,DESCRIPTION).set(bundle.getString("web.connector.max-save-post-size"));
  node.get(type,Constants.MAX_SAVE_POST_SIZE,REQUIRED).set(false);
  node.get(type,Constants.SECURE,TYPE).set(ModelType.BOOLEAN);
  node.get(type,Constants.SECURE,DESCRIPTION).set(bundle.getString("web.connector.secure"));
  node.get(type,Constants.SECURE,REQUIRED).set(false);
  node.get(type,Constants.REDIRECT_PORT,TYPE).set(ModelType.INT);
  node.get(type,Constants.REDIRECT_PORT,DESCRIPTION).set(bundle.getString("web.connector.redirect-port"));
  node.get(type,Constants.REDIRECT_PORT,REQUIRED).set(false);
  node.get(type,Constants.MAX_CONNECTIONS,TYPE).set(ModelType.INT);
  node.get(type,Constants.MAX_CONNECTIONS,DESCRIPTION).set(bundle.getString("web.connector.max-connections"));
  node.get(type,Constants.MAX_CONNECTIONS,REQUIRED).set(false);
  node.get(type,Constants.VIRTUAL_SERVER,TYPE).set(ModelType.LIST);
  node.get(type,Constants.VIRTUAL_SERVER,DESCRIPTION).set(bundle.getString("web.connector.virtual-server"));
  node.get(type,Constants.VIRTUAL_SERVER,REQUIRED).set(false);
  getSSLCommonDescription(node.get(type,Constants.SSL),type,bundle);
  if (ATTRIBUTES.equals(type)) {
    for (    final String metric : WebConnectorMetrics.ATTRIBUTES) {
      node.get(ATTRIBUTES,metric,TYPE).set(ModelType.INT);
    }
  }
  return node;
}
