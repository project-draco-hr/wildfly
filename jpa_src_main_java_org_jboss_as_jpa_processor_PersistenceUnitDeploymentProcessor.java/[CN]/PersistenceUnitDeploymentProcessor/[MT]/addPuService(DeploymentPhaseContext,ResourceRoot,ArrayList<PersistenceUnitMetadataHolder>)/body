{
  if (puList.size() > 0) {
    final DeploymentUnit deploymentUnit=phaseContext.getDeploymentUnit();
    final Module module=deploymentUnit.getAttachment(Attachments.MODULE);
    final EEModuleDescription eeModuleDescription=deploymentUnit.getAttachment(org.jboss.as.ee.component.Attachments.EE_MODULE_DESCRIPTION);
    if (module == null)     throw new DeploymentUnitProcessingException("Failed to get module attachment for " + phaseContext.getDeploymentUnit());
    final ServiceTarget serviceTarget=phaseContext.getServiceTarget();
    final ModuleClassLoader classLoader=module.getClassLoader();
    for (    PersistenceUnitMetadataHolder holder : puList) {
      for (      PersistenceUnitMetadata pu : holder.getPersistenceUnits()) {
        pu.setClassLoader(classLoader);
        pu.setTempClassloader(new TempClassLoader(classLoader));
        try {
          PersistenceUnitService service=new PersistenceUnitService(pu,resourceRoot);
          final Injector<TransactionManager> transactionManagerInjector=new Injector<TransactionManager>(){
            public void inject(            final TransactionManager value) throws InjectionException {
              TransactionUtil.setTransactionManager(value);
            }
            public void uninject(){
            }
          }
;
          final Injector<TransactionSynchronizationRegistry> transactionRegistryInjector=new Injector<TransactionSynchronizationRegistry>(){
            public void inject(            final TransactionSynchronizationRegistry value) throws InjectionException {
              TransactionUtil.setTransactionSynchronizationRegistry(value);
            }
            public void uninject(){
            }
          }
;
          final HashMap properties=new HashMap();
          if (!ValidationMode.NONE.equals(pu.getValidationMode())) {
            ValidatorFactory validatorFactory=SerializableValidatorFactory.getINSTANCE();
            properties.put("javax.persistence.validation.factory",validatorFactory);
          }
          addProviderProperties(pu,properties);
          final ServiceName serviceName=PersistenceUnitService.getPUServiceName(pu);
          deploymentUnit.addToAttachmentList(Attachments.WEB_DEPENDENCIES,serviceName);
          ServiceBuilder builder=serviceTarget.addService(serviceName,service);
          boolean useDefaultDataSource=true;
          final String jtaDataSource=adjustJndi(pu.getJtaDataSourceName());
          final String nonJtaDataSource=adjustJndi(pu.getNonJtaDataSourceName());
          if (jtaDataSource != null) {
            builder.addDependency(AbstractDataSourceService.SERVICE_NAME_BASE.append(jtaDataSource),new CastingInjector<DataSource>(service.getJtaDataSourceInjector(),DataSource.class));
            useDefaultDataSource=false;
          }
          if (nonJtaDataSource != null) {
            builder.addDependency(AbstractDataSourceService.SERVICE_NAME_BASE.append(nonJtaDataSource),new CastingInjector<DataSource>(service.getNonJtaDataSourceInjector(),DataSource.class));
            useDefaultDataSource=false;
          }
          if (useDefaultDataSource) {
            final String defaultJtaDataSource=adjustJndi(JPAService.getDefaultDataSourceName());
            if (defaultJtaDataSource != null && defaultJtaDataSource.length() > 0) {
              builder.addDependency(AbstractDataSourceService.SERVICE_NAME_BASE.append(defaultJtaDataSource),new CastingInjector<DataSource>(service.getJtaDataSourceInjector(),DataSource.class));
              log.trace(serviceName + " is using the default data source '" + defaultJtaDataSource+ "'");
            }
          }
          Iterable<ServiceName> providerDependencies=getProviderDependencies(pu);
          if (providerDependencies != null) {
            builder.addDependencies(providerDependencies);
          }
          if (pu.getProperties().containsKey(JNDI_PROPERTY)) {
            String jndiName=pu.getProperties().get(JNDI_PROPERTY).toString();
            final ServiceName bindingServiceName=ContextNames.serviceNameOfEnvEntry(eeModuleDescription.getApplicationName(),eeModuleDescription.getModuleName(),eeModuleDescription.getModuleName(),false,jndiName);
            final BinderService binderService=new BinderService(jndiName);
            serviceTarget.addService(bindingServiceName,binderService).addDependency(ContextNames.serviceNameOfNamingStore(eeModuleDescription.getApplicationName(),eeModuleDescription.getModuleName(),eeModuleDescription.getModuleName(),jndiName),NamingStore.class,binderService.getNamingStoreInjector()).addDependency(serviceName,PersistenceUnitService.class,new Injector<PersistenceUnitService>(){
              @Override public void inject(              final PersistenceUnitService value) throws InjectionException {
                binderService.getManagedObjectInjector().inject(new ValueManagedReferenceFactory(new ImmediateValue<Object>(value.getEntityManagerFactory())));
              }
              @Override public void uninject(){
                binderService.getNamingStoreInjector().uninject();
              }
            }
).install();
          }
          builder.addDependency(TransactionManagerService.SERVICE_NAME,new CastingInjector<TransactionManager>(transactionManagerInjector,TransactionManager.class)).addDependency(TransactionSynchronizationRegistryService.SERVICE_NAME,new CastingInjector<TransactionSynchronizationRegistry>(transactionRegistryInjector,TransactionSynchronizationRegistry.class)).setInitialMode(ServiceController.Mode.ACTIVE).addInjection(service.getPropertiesInjector(),properties).install();
          log.trace("added PersistenceUnitService for '" + serviceName + "'.  PU is ready for injector action. ");
        }
 catch (        ServiceRegistryException e) {
          throw new DeploymentUnitProcessingException("Failed to add persistence unit service for " + pu.getPersistenceUnitName(),e);
        }
      }
    }
  }
}
