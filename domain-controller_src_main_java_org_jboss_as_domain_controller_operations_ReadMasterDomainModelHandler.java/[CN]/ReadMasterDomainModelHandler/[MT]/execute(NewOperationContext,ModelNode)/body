{
  context.getServiceRegistry(true);
  final ModelNode model=context.getModel();
  final String hostName=operation.get(HOST).asString();
  ModelNode op=new ModelNode();
  op.get(OP).set(ApplyRemoteMasterDomainModelHandler.OPERATION_NAME);
  op.get(OP_ADDR).setEmptyList();
  op.get(DOMAIN_MODEL).set(context.getModel());
  final NewProxyController proxy=registry.popChannelAndCreateProxy(hostName);
  final AtomicReference<ModelNode> failedRef=new AtomicReference<ModelNode>();
  final AtomicReference<ModelNode> preparedRef=new AtomicReference<ModelNode>();
  final AtomicReference<OperationTransaction> txRef=new AtomicReference<OperationTransaction>();
  NewProxyController.ProxyOperationControl control=new NewProxyController.ProxyOperationControl(){
    @Override public void operationFailed(    ModelNode response){
      failedRef.set(response);
    }
    @Override public void operationPrepared(    OperationTransaction transaction,    ModelNode result){
      txRef.set(transaction);
      preparedRef.set(result);
    }
    @Override public void operationCompleted(    ModelNode response){
    }
  }
;
  proxy.execute(op,OperationMessageHandler.logging,control,null);
  if (failedRef.get() != null) {
    final ModelNode failed=failedRef.get();
    context.getResult().set(failed.get(RESULT));
    context.getFailureDescription().set(failed.get(FAILURE_DESCRIPTION));
    context.completeStep();
  }
 else {
    final ModelNode preparedResult=preparedRef.get();
    context.getResult().set(preparedResult.get(RESULT));
    if (preparedResult.hasDefined(FAILURE_DESCRIPTION)) {
      context.getFailureDescription().set(preparedResult.get(FAILURE_DESCRIPTION));
    }
    NewOperationContext.ResultAction resultAction=context.completeStep();
    NewModelController.OperationTransaction tx=txRef.get();
    if (tx != null) {
      if (resultAction == NewOperationContext.ResultAction.KEEP) {
        tx.commit();
        domainController.registerRemoteHost(proxy);
      }
 else {
        tx.rollback();
      }
    }
  }
}
