{
  final QName rootElement=new QName(Namespace.CURRENT.getUriString(),"host");
  final HostXml parser=new HostXml(Module.getBootModuleLoader());
  final XmlConfigurationPersister persister=new XmlConfigurationPersister(file,rootElement,parser,parser);
  final List<ModelNode> ops=persister.load();
  final ModelNode model=new ModelNode();
  final ModelController controller=createController(model,new Setup(){
    public void setup(    ModelNode model,    ManagementResourceRegistration root){
      NewHostModelUtil.initCoreModel(model.get(HOST,"local"));
      final LocalHostControllerInfoImpl hostControllerInfo=new LocalHostControllerInfoImpl(new ControlledProcessState(false));
      ManagementResourceRegistration hostRegistration=root.registerSubModel(PathElement.pathElement(HOST),HostDescriptionProviders.HOST_ROOT_PROVIDER);
      XmlMarshallingHandler xmh=new XmlMarshallingHandler(persister);
      hostRegistration.registerOperationHandler(XmlMarshallingHandler.OPERATION_NAME,xmh,xmh,false,OperationEntry.EntryType.PUBLIC);
      hostRegistration.registerOperationHandler(NamespaceAddHandler.OPERATION_NAME,NamespaceAddHandler.INSTANCE,NamespaceAddHandler.INSTANCE,false);
      hostRegistration.registerOperationHandler(SchemaLocationAddHandler.OPERATION_NAME,SchemaLocationAddHandler.INSTANCE,SchemaLocationAddHandler.INSTANCE,false);
      hostRegistration.registerReadWriteAttribute(NAME,null,new WriteAttributeHandlers.StringLengthValidatingHandler(1),AttributeAccess.Storage.CONFIGURATION);
      hostRegistration.registerReadOnlyAttribute(MASTER,IsMasterHandler.INSTANCE,AttributeAccess.Storage.RUNTIME);
      ManagementResourceRegistration sysProps=hostRegistration.registerSubModel(PathElement.pathElement(SYSTEM_PROPERTY),HostDescriptionProviders.SYSTEM_PROPERTIES_PROVIDER);
      sysProps.registerOperationHandler(SystemPropertyAddHandler.OPERATION_NAME,SystemPropertyAddHandler.INSTANCE_WITH_BOOTTIME,SystemPropertyAddHandler.INSTANCE_WITH_BOOTTIME,false);
      ManagementResourceRegistration securityRealms=hostRegistration.registerSubModel(PathElement.pathElement(MANAGEMENT,SECURITY_REALMS),CommonProviders.NATIVE_MANAGEMENT_PROVIDER);
      ManagementResourceRegistration securityRealm=securityRealms.registerSubModel(PathElement.pathElement(SECURITY_REALM),CommonProviders.NATIVE_MANAGEMENT_PROVIDER);
      securityRealm.registerOperationHandler(SecurityRealmAddHandler.OPERATION_NAME,SecurityRealmAddHandler.INSTANCE,SecurityRealmAddHandler.INSTANCE,false);
      ManagementResourceRegistration connections=hostRegistration.registerSubModel(PathElement.pathElement(MANAGEMENT,CONNECTIONS),CommonProviders.NATIVE_MANAGEMENT_PROVIDER);
      ManagementResourceRegistration connection=connections.registerSubModel(PathElement.pathElement(CONNECTION),CommonProviders.NATIVE_MANAGEMENT_PROVIDER);
      connection.registerOperationHandler(ConnectionAddHandler.OPERATION_NAME,ConnectionAddHandler.INSTANCE,ConnectionAddHandler.INSTANCE,false);
      ManagementResourceRegistration managementNative=hostRegistration.registerSubModel(PathElement.pathElement(MANAGEMENT_INTERFACE,NATIVE_INTERFACE),CommonProviders.MANAGEMENT_INTERFACE_PROVIDER);
      NativeManagementAddHandler nmah=new NativeManagementAddHandler(hostControllerInfo);
      managementNative.registerOperationHandler(NativeManagementAddHandler.OPERATION_NAME,nmah,nmah,false);
      ManagementResourceRegistration extensions=hostRegistration.registerSubModel(PathElement.pathElement(EXTENSION),CommonProviders.EXTENSION_PROVIDER);
      ExtensionContext extensionContext=new ExtensionContextImpl(hostRegistration,null,persister);
      ExtensionAddHandler addExtensionHandler=new ExtensionAddHandler(extensionContext);
      extensions.registerOperationHandler(ExtensionAddHandler.OPERATION_NAME,addExtensionHandler,addExtensionHandler,false);
      final ManagementResourceRegistration jvms=hostRegistration.registerSubModel(PathElement.pathElement(JVM),CommonProviders.JVM_PROVIDER);
      JVMHandlers.register(jvms);
      ManagementResourceRegistration paths=hostRegistration.registerSubModel(PathElement.pathElement(PATH),CommonProviders.SPECIFIED_PATH_PROVIDER);
      paths.registerOperationHandler(PathAddHandler.OPERATION_NAME,PathAddHandler.SPECIFIED_INSTANCE,PathAddHandler.SPECIFIED_INSTANCE,false);
      ManagementResourceRegistration interfaces=hostRegistration.registerSubModel(PathElement.pathElement(INTERFACE),CommonProviders.SPECIFIED_INTERFACE_PROVIDER);
      HostSpecifiedInterfaceAddHandler hsiah=new HostSpecifiedInterfaceAddHandler(hostControllerInfo);
      interfaces.registerOperationHandler(InterfaceAddHandler.OPERATION_NAME,hsiah,hsiah,false);
      ManagementResourceRegistration servers=hostRegistration.registerSubModel(PathElement.pathElement(SERVER_CONFIG),HostDescriptionProviders.SERVER_PROVIDER);
      servers.registerOperationHandler(ServerAddHandler.OPERATION_NAME,ServerAddHandler.INSTANCE,ServerAddHandler.INSTANCE,false);
      servers.registerReadWriteAttribute(AUTO_START,null,new WriteAttributeHandlers.ModelTypeValidatingHandler(ModelType.BOOLEAN),AttributeAccess.Storage.CONFIGURATION);
      servers.registerReadWriteAttribute(SOCKET_BINDING_GROUP,null,WriteAttributeHandlers.WriteAttributeOperationHandler.INSTANCE,AttributeAccess.Storage.CONFIGURATION);
      servers.registerReadWriteAttribute(SOCKET_BINDING_PORT_OFFSET,null,new WriteAttributeHandlers.IntRangeValidatingHandler(0),AttributeAccess.Storage.CONFIGURATION);
      servers.registerReadWriteAttribute(PRIORITY,null,new WriteAttributeHandlers.IntRangeValidatingHandler(0),AttributeAccess.Storage.CONFIGURATION);
      servers.registerReadWriteAttribute(CPU_AFFINITY,null,new WriteAttributeHandlers.StringLengthValidatingHandler(1),AttributeAccess.Storage.CONFIGURATION);
      ManagementResourceRegistration serverPaths=servers.registerSubModel(PathElement.pathElement(PATH),CommonProviders.SPECIFIED_INTERFACE_PROVIDER);
      serverPaths.registerOperationHandler(PathAddHandler.OPERATION_NAME,PathAddHandler.SPECIFIED_INSTANCE,PathAddHandler.SPECIFIED_INSTANCE,false);
      ManagementResourceRegistration serverInterfaces=servers.registerSubModel(PathElement.pathElement(INTERFACE),CommonProviders.SPECIFIED_INTERFACE_PROVIDER);
      serverInterfaces.registerOperationHandler(InterfaceAddHandler.OPERATION_NAME,SpecifiedInterfaceAddHandler.INSTANCE,SpecifiedInterfaceAddHandler.INSTANCE,false);
      ManagementResourceRegistration serverSysProps=servers.registerSubModel(PathElement.pathElement(SYSTEM_PROPERTY),HostDescriptionProviders.SERVER_SYSTEM_PROPERTIES_PROVIDER);
      serverSysProps.registerOperationHandler(SystemPropertyAddHandler.OPERATION_NAME,SystemPropertyAddHandler.INSTANCE_WITH_BOOTTIME,SystemPropertyAddHandler.INSTANCE_WITH_BOOTTIME,false);
      serverSysProps.registerReadWriteAttribute(VALUE,null,SystemPropertyValueWriteAttributeHandler.INSTANCE,AttributeAccess.Storage.CONFIGURATION);
      serverSysProps.registerReadWriteAttribute(BOOT_TIME,null,new WriteAttributeHandlers.ModelTypeValidatingHandler(ModelType.BOOLEAN),AttributeAccess.Storage.CONFIGURATION);
      final ManagementResourceRegistration serverVMs=servers.registerSubModel(PathElement.pathElement(JVM),JVMHandlers.SERVER_MODEL_PROVIDER);
      JVMHandlers.register(serverVMs,true);
    }
  }
);
  final ModelNode caputreModelOp=new ModelNode();
  caputreModelOp.get(OP_ADDR).set(PathAddress.EMPTY_ADDRESS.toModelNode());
  caputreModelOp.get(OP).set("capture-model");
  final List<ModelNode> toRun=new ArrayList<ModelNode>(ops);
  toRun.add(caputreModelOp);
  executeOperations(controller,toRun);
  persister.store(model.get(HOST,"local"),null);
  return model;
}
