{
  ModelVersion coreModeVersion=KnownVersions.getCoreModelVersionForSubsystemVersion(mainSubsystemName,legacyModelVersion);
  if (coreModeVersion != null) {
    return coreModeVersion;
  }
  String fileName=mainSubsystemName + "-versions-to-as-versions.properties";
  InputStream in=this.getClass().getResourceAsStream("/" + fileName);
  if (in == null) {
    throw new IllegalArgumentException("Version " + legacyModelVersion + " of "+ mainSubsystemName+ " is not a known version. Please add it to "+ KnownVersions.class.getName()+ ". Or if that is not possible, "+ "include a src/test/resources/"+ fileName+ " file, which maps AS versions to model versions. E.g.:\n1.1.0=7.1.2\n1.2.0=7.1.3");
  }
  Properties props=new Properties();
  try {
    props.load(in);
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
 finally {
    IoUtils.safeClose(in);
  }
  String asVersion=(String)props.get(legacyModelVersion.toString());
  if (asVersion == null) {
    throw new IllegalArgumentException("src/test/resources/" + fileName + " does not contain an AS mapping for modelversion + "+ legacyModelVersion+ "'. It needs to map AS versions to model versions. E.g.:\n1.1.0=7.1.2\n1.2.0=7.1.3");
  }
  ModelVersion coreModelVersion=KnownVersions.AS_CORE_MODEL_VERSION_BY_AS_VERSION.get(asVersion);
  if (coreModelVersion == null) {
    throw new IllegalArgumentException("Unknown AS version '" + asVersion + "' determined from src/test/resources/"+ fileName+ ". Known AS versions are "+ KnownVersions.AS_CORE_MODEL_VERSION_BY_AS_VERSION.keySet());
  }
  return coreModelVersion;
}
