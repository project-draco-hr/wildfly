{
  if (context.isBooting()) {
    final PathAddress address=PathAddress.pathAddress(operation.require(OP_ADDR));
    final PathElement confElem=address.getElement(address.size() - 3);
    final String configType=confElem.getKey();
    final String configName=confElem.getValue();
    final String handlerChainId=address.getElement(address.size() - 2).getValue();
    final String handlerName=address.getElement(address.size() - 1).getValue();
    final String handlerClass=operation.require(CLASS).asString();
    final HandlerService service=new HandlerService(handlerName,handlerClass);
    final ServiceTarget target=context.getServiceTarget();
    final ServiceName configServiceName=getConfigServiceName(configType,configName);
    final ServiceRegistry registry=context.getServiceRegistry(false);
    if (registry.getService(configServiceName) == null) {
      throw MESSAGES.missingConfig(configName);
    }
    final ServiceName handlerChainServiceName=getHandlerChainServiceName(configServiceName,handlerChainId);
    if (registry.getService(handlerChainServiceName) == null) {
      String handlerChainType=address.getElement(address.size() - 2).getKey();
      throw MESSAGES.missingHandlerChain(configName,handlerChainType,handlerChainId);
    }
    final ServiceName handlerServiceName=getHandlerServiceName(handlerChainServiceName,handlerName);
    final ServiceBuilder<?> handlerServiceBuilder=target.addService(handlerServiceName,service);
    handlerServiceBuilder.addDependency(handlerChainServiceName,UnifiedHandlerChainMetaData.class,service.getHandlerChain());
    handlerServiceBuilder.setInitialMode(ServiceController.Mode.ACTIVE).install();
  }
 else {
    context.reloadRequired();
  }
}
