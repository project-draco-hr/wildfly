{
  String pattern=null;
  String prefix=null;
  Boolean rotate=null;
  Boolean extended=null;
  Boolean resolveHosts=null;
  WebHostAccessLogElement.LogDirectory directory=null;
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    final String value=reader.getAttributeValue(i);
    if (reader.getAttributeNamespace(i) != null) {
      throw ParseUtils.unexpectedAttribute(reader,i);
    }
 else {
      final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case DIRECTORY:
        directory=parseLogDir(reader);
      if (directory.isEmpty()) {
        directory=null;
      }
    break;
case PATTERN:
  pattern=value;
break;
case PREFIX:
prefix=value;
break;
case RESOLVE_HOSTS:
resolveHosts=Boolean.valueOf(value);
break;
case EXTENDED:
extended=Boolean.valueOf(value);
break;
case ROTATE:
rotate=Boolean.valueOf(value);
break;
default :
ParseUtils.unexpectedAttribute(reader,i);
}
}
}
ParseUtils.requireNoContent(reader);
final WebHostAccessLogElement accessLog=new WebHostAccessLogElement();
accessLog.setPattern(pattern);
accessLog.setExtended(extended);
accessLog.setPrefix(prefix);
accessLog.setRotate(rotate);
accessLog.setResolveHosts(resolveHosts);
return accessLog;
}
