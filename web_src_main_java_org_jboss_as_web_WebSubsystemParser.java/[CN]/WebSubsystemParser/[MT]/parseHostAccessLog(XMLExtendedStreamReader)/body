{
  final ModelNode log=new ModelNode();
  log.setEmptyObject();
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    requireNoNamespaceAttribute(reader,i);
    final String value=reader.getAttributeValue(i);
    final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case PATTERN:
      log.get(PATTERN).set(value);
    break;
case RESOLVE_HOSTS:
  log.get(RESOLVE_HOSTS).set(value);
break;
case EXTENDED:
log.get(EXTENDED).set(value);
break;
case PREFIX:
log.get(PREFIX).set(value);
break;
case ROTATE:
log.get(ROTATE).set(value);
break;
default :
unexpectedAttribute(reader,i);
}
}
while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
switch (Namespace.forUri(reader.getNamespaceURI())) {
case WEB_1_0:
{
final Element element=Element.forName(reader.getLocalName());
switch (element) {
case DIRECTORY:
final ModelNode directory=new ModelNode();
log.get(DIRECTORY).set(directory);
final int count2=reader.getAttributeCount();
for (int i=0; i < count2; i++) {
requireNoNamespaceAttribute(reader,i);
final String value=reader.getAttributeValue(i);
final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case PATH:
directory.get(PATH).set(value);
break;
case RELATIVE_TO:
directory.get(RELATIVE_TO).set(value);
break;
default :
unexpectedAttribute(reader,i);
}
}
break;
default :
throw unexpectedElement(reader);
}
break;
}
default :
throw unexpectedElement(reader);
}
}
return log;
}
