{
  PathAddress address=PathAddress.pathAddress(parent,WebExtension.SSL_PATH);
  final ModelNode ssl=new ModelNode();
  ssl.get(OP).set(ADD);
  ssl.get(OP_ADDR).set(address.toModelNode());
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    requireNoNamespaceAttribute(reader,i);
    final String value=reader.getAttributeValue(i);
    final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case NAME:
      WebSSLDefinition.NAME.parseAndSetParameter(value,ssl,reader);
    break;
case KEY_ALIAS:
  WebSSLDefinition.KEY_ALIAS.parseAndSetParameter(value,ssl,reader);
break;
case PASSWORD:
WebSSLDefinition.PASSWORD.parseAndSetParameter(value,ssl,reader);
break;
case CERTIFICATE_KEY_FILE:
WebSSLDefinition.CERTIFICATE_KEY_FILE.parseAndSetParameter(value,ssl,reader);
break;
case CIPHER_SUITE:
WebSSLDefinition.CIPHER_SUITE.parseAndSetParameter(value,ssl,reader);
break;
case PROTOCOL:
WebSSLDefinition.PROTOCOL.parseAndSetParameter(value,ssl,reader);
break;
case VERIFY_CLIENT:
WebSSLDefinition.VERIFY_CLIENT.parseAndSetParameter(value,ssl,reader);
break;
case VERIFY_DEPTH:
WebSSLDefinition.VERIFY_DEPTH.parseAndSetParameter(value,ssl,reader);
break;
case CERTIFICATE_FILE:
WebSSLDefinition.CERTIFICATE_FILE.parseAndSetParameter(value,ssl,reader);
break;
case CA_CERTIFICATE_FILE:
WebSSLDefinition.CA_CERTIFICATE_FILE.parseAndSetParameter(value,ssl,reader);
break;
case CA_REVOCATION_URL:
WebSSLDefinition.CA_REVOCATION_URL.parseAndSetParameter(value,ssl,reader);
break;
case SESSION_CACHE_SIZE:
WebSSLDefinition.SESSION_CACHE_SIZE.parseAndSetParameter(value,ssl,reader);
break;
case SESSION_TIMEOUT:
WebSSLDefinition.SESSION_TIMEOUT.parseAndSetParameter(value,ssl,reader);
break;
case CA_CERTIFICATE_PASSWORD:
WebSSLDefinition.CA_CERTIFICATE_PASSWORD.parseAndSetParameter(value,ssl,reader);
break;
case KEYSTORE_TYPE:
WebSSLDefinition.KEYSTORE_TYPE.parseAndSetParameter(value,ssl,reader);
break;
case TRUSTSTORE_TYPE:
WebSSLDefinition.TRUSTSTORE_TYPE.parseAndSetParameter(value,ssl,reader);
break;
default :
throw unexpectedAttribute(reader,i);
}
}
requireNoContent(reader);
list.add(ssl);
}
