{
  String name=null;
  String defaultWebModule=null;
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    requireNoNamespaceAttribute(reader,i);
    final String value=reader.getAttributeValue(i);
    final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case NAME:
      name=value;
    break;
case DEFAULT_WEB_MODULE:
  defaultWebModule=value;
break;
default :
unexpectedAttribute(reader,i);
}
}
if (name == null) {
throw missingRequired(reader,Collections.singleton(Attribute.NAME));
}
final ModelNode host=new ModelNode();
host.get(OP).set(ADD);
host.get(OP_ADDR).set(address).add(VIRTUAL_SERVER,name);
if (defaultWebModule != null) {
host.get(DEFAULT_WEB_MODULE).set(defaultWebModule);
}
list.add(host);
while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
switch (Namespace.forUri(reader.getNamespaceURI())) {
case WEB_1_0:
{
final Element element=Element.forName(reader.getLocalName());
switch (element) {
case ALIAS:
host.get(ALIAS).add(readStringAttributeElement(reader,Attribute.NAME.getLocalName()));
break;
case ACCESS_LOG:
final ModelNode log=parseHostAccessLog(reader);
host.get(ACCESS_LOG).set(log);
break;
case REWRITE:
final ModelNode rewrite=parseHostRewrite(reader);
host.get(REWRITE).add(rewrite);
break;
default :
throw unexpectedElement(reader);
}
break;
}
default :
throw unexpectedElement(reader);
}
}
}
