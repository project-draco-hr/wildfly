{
  PathAddress address=PathAddress.pathAddress(parent,WebExtension.STATIC_RESOURCES_PATH);
  final ModelNode resources=new ModelNode();
  resources.get(OP).set(ADD);
  resources.get(OP_ADDR).set(address.toModelNode());
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    requireNoNamespaceAttribute(reader,i);
    final String value=reader.getAttributeValue(i);
    final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case LISTINGS:
      WebStaticResources.LISTINGS.parseAndSetParameter(value,resources,reader);
    break;
case SENDFILE:
  WebStaticResources.SENDFILE.parseAndSetParameter(value,resources,reader);
break;
case FILE_ENCODING:
WebStaticResources.FILE_ENCODING.parseAndSetParameter(value,resources,reader);
break;
case READ_ONLY:
WebStaticResources.READ_ONLY.parseAndSetParameter(value,resources,reader);
break;
case WEBDAV:
WebStaticResources.WEBDAV.parseAndSetParameter(value,resources,reader);
break;
case SECRET:
WebStaticResources.SECRET.parseAndSetParameter(value,resources,reader);
break;
case MAX_DEPTH:
WebStaticResources.MAX_DEPTH.parseAndSetParameter(value,resources,reader);
break;
case DISABLED:
WebStaticResources.DISABLED.parseAndSetParameter(value,resources,reader);
break;
default :
throw unexpectedAttribute(reader,i);
}
}
requireNoContent(reader);
list.add(resources);
}
