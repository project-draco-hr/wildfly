{
  final WebJspConfigurationElement config=new WebJspConfigurationElement();
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    final String value=reader.getAttributeValue(i);
    if (reader.getAttributeNamespace(i) != null) {
      throw ParseUtils.unexpectedAttribute(reader,i);
    }
 else {
      final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case DEVELOPMENT:
        config.setDevelopment(Boolean.valueOf(value));
      break;
case DISABLED:
    config.setDisabled(Boolean.valueOf(value));
  break;
case KEEP_GENERATED:
config.setKeepGenerated(Boolean.valueOf(value));
break;
case TRIM_SPACES:
config.setTrimSpaces(Boolean.valueOf(value));
break;
case TAG_POOLING:
config.setTagPooling(Boolean.valueOf(value));
break;
case MAPPED_FILE:
config.setMappedFile(Boolean.valueOf(value));
break;
case CHECK_INTERVAL:
config.setCheckInterval(Integer.valueOf(value));
break;
case MODIFIFICATION_TEST_INTERVAL:
config.setModificationTestInterval(Integer.valueOf(value));
break;
case RECOMPILE_ON_FAIL:
config.setRecompileOnFail(Boolean.valueOf(value));
case SMAP:
config.setSmap(Boolean.valueOf(value));
break;
case DUMP_SMAP:
config.setDumpSmap(Boolean.valueOf(value));
break;
case GENERATE_STRINGS_AS_CHAR_ARRAYS:
config.setGenerateStringsAsCharArrays(Boolean.valueOf(value));
break;
case ERROR_ON_USE_BEAN_INVALID_CLASS_ATTRIBUT:
config.setErrorOnInvalidClassAttribute(Boolean.valueOf(value));
break;
case SCRATCH_DIR:
config.setScratchDir(value);
break;
case SOURCE_VM:
config.setScratchDir(value);
break;
case TARGET_VM:
config.setTargetVM(value);
break;
case JAVA_ENCODING:
config.setJavaEncoding(value);
break;
case X_POWERED_BY:
config.setXPoweredBy(Boolean.valueOf(value));
break;
case DISPLAY_SOOURCE_FRAGMENT:
config.setDisplaySourceFragment(Boolean.valueOf(value));
break;
default :
ParseUtils.unexpectedAttribute(reader,i);
}
}
}
ParseUtils.requireNoContent(reader);
return config;
}
