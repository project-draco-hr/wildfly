{
  String name=null;
  final ModelNode connector=new ModelNode();
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    requireNoNamespaceAttribute(reader,i);
    final String value=reader.getAttributeValue(i);
    final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case NAME:
      name=value;
    break;
case SOCKET_BINDING:
  WebConnectorDefinition.SOCKET_BINDING.parseAndSetParameter(value,connector,reader);
break;
case SCHEME:
WebConnectorDefinition.SCHEME.parseAndSetParameter(value,connector,reader);
break;
case PROTOCOL:
WebConnectorDefinition.PROTOCOL.parseAndSetParameter(value,connector,reader);
break;
case EXECUTOR:
WebConnectorDefinition.EXECUTOR.parseAndSetParameter(value,connector,reader);
break;
case ENABLED:
WebConnectorDefinition.ENABLED.parseAndSetParameter(value,connector,reader);
break;
case ENABLE_LOOKUPS:
WebConnectorDefinition.ENABLE_LOOKUPS.parseAndSetParameter(value,connector,reader);
break;
case PROXY_NAME:
WebConnectorDefinition.PROXY_NAME.parseAndSetParameter(value,connector,reader);
break;
case PROXY_PORT:
WebConnectorDefinition.PROXY_PORT.parseAndSetParameter(value,connector,reader);
break;
case MAX_POST_SIZE:
WebConnectorDefinition.MAX_POST_SIZE.parseAndSetParameter(value,connector,reader);
break;
case MAX_SAVE_POST_SIZE:
WebConnectorDefinition.MAX_SAVE_POST_SIZE.parseAndSetParameter(value,connector,reader);
break;
case SECURE:
WebConnectorDefinition.SECURE.parseAndSetParameter(value,connector,reader);
break;
case REDIRECT_PORT:
WebConnectorDefinition.REDIRECT_PORT.parseAndSetParameter(value,connector,reader);
break;
case MAX_CONNECTIONS:
WebConnectorDefinition.MAX_CONNECTIONS.parseAndSetParameter(value,connector,reader);
break;
default :
throw unexpectedAttribute(reader,i);
}
}
if (name == null) {
throw missingRequired(reader,Collections.singleton(Attribute.NAME));
}
connector.get(OP).set(ADD);
PathAddress address=PathAddress.pathAddress(parent,PathElement.pathElement(CONNECTOR,name));
connector.get(OP_ADDR).set(address.toModelNode());
list.add(connector);
while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
switch (Namespace.forUri(reader.getNamespaceURI())) {
case WEB_1_0:
case WEB_1_1:
case WEB_1_2:
{
final Element element=Element.forName(reader.getLocalName());
switch (element) {
case SSL:
parseSsl(reader,address,list);
break;
case VIRTUAL_SERVER:
connector.get(VIRTUAL_SERVER).add(readStringAttributeElement(reader,Attribute.NAME.getLocalName()));
break;
default :
throw unexpectedElement(reader);
}
break;
}
default :
throw unexpectedElement(reader);
}
}
}
