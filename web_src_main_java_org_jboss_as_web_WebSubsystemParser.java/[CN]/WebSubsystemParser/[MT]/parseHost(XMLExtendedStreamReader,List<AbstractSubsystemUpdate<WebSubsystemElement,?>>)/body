{
  String name=null;
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    final String value=reader.getAttributeValue(i);
    if (reader.getAttributeNamespace(i) != null) {
      throw ParseUtils.unexpectedAttribute(reader,i);
    }
 else {
      final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case NAME:
{
          name=value;
          break;
        }
default :
{
        ParseUtils.unexpectedAttribute(reader,i);
      }
  }
}
}
if (name == null) {
throw ParseUtils.missingRequired(reader,Collections.singleton(Attribute.NAME));
}
Set<String> aliases=new HashSet<String>();
WebHostAccessLogElement accessLog=null;
WebHostRewriteElement rewrite=null;
while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
switch (Namespace.forUri(reader.getNamespaceURI())) {
case WEB_1_0:
{
    final Element element=Element.forName(reader.getLocalName());
switch (element) {
case ALIAS:
      aliases.add(readSingleAttributeNoContent(reader));
    break;
case ACCESS_LOG:
  accessLog=parseHostAccessLog(reader);
break;
case REWRITE:
rewrite=parseHostRewrite(reader);
break;
default :
throw ParseUtils.unexpectedElement(reader);
}
break;
}
default :
throw ParseUtils.unexpectedElement(reader);
}
}
final WebVirtualHostAdd action=new WebVirtualHostAdd(name);
action.setAliases(aliases);
action.setAccessLog(accessLog);
action.setRewrite(rewrite);
list.add(action);
}
