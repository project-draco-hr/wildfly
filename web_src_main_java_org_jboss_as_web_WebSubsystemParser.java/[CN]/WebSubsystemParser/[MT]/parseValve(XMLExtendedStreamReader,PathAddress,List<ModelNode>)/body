{
  String name=null;
  final ModelNode valve=new ModelNode();
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    requireNoNamespaceAttribute(reader,i);
    final String value=reader.getAttributeValue(i);
    final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case NAME:
      name=value;
    break;
case MODULE:
  valve.get(MODULE).set(value);
break;
case CLASS_NAME:
valve.get(CLASS_NAME).set(value);
break;
case ENABLED:
valve.get(ENABLED).set(value);
break;
default :
throw unexpectedAttribute(reader,i);
}
}
if (name == null) {
throw missingRequired(reader,Collections.singleton(Attribute.NAME));
}
valve.get(OP).set(ADD);
PathAddress address=PathAddress.pathAddress(parent,PathElement.pathElement(VALVE,name));
valve.get(OP_ADDR).set(address.toModelNode());
list.add(valve);
while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
final Element element=Element.forName(reader.getLocalName());
switch (element) {
case PARAM:
final String[] array=requireAttributes(reader,Attribute.PARAM_NAME.getLocalName(),Attribute.PARAM_VALUE.getLocalName());
valve.get(PARAM).get(array[0]).set(array[1]);
requireNoContent(reader);
break;
case FILE:
parseDirOrFile(reader,address,list,WebExtension.FILE_PATH);
break;
default :
throw unexpectedElement(reader);
}
}
}
