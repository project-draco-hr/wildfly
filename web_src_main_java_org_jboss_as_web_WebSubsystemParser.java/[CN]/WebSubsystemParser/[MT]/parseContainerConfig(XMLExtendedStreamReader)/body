{
  final WebContainerConfigElement config=new WebContainerConfigElement();
  if (reader.getAttributeCount() > 0) {
    throw ParseUtils.unexpectedAttribute(reader,0);
  }
  Set<String> welcomeFiles=new HashSet<String>();
  while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
    final Element element=Element.forName(reader.getLocalName());
switch (element) {
case STATIC_RESOURCES:
{
        final WebStaticResourcesElement resourceServing=parseStaticResourceConfiguration(reader);
        config.setStaticResources(resourceServing);
        break;
      }
case JSP_CONFIGURATION:
{
      final WebJspConfigurationElement jspConfiguration=parseJSPConfiguration(reader);
      config.setJspConfiguration(jspConfiguration);
      break;
    }
case MIME_MAPPING:
{
    Map<String,String> mappings=parseProperties(reader,Element.MIME_MAPPING,false);
    if (mappings != null && !mappings.isEmpty()) {
      config.setMimeMappings(mappings);
    }
    break;
  }
case WELCOME_FILE:
{
  final String welcomeFile=reader.getElementText().trim();
  welcomeFiles.add(welcomeFile);
  break;
}
default :
throw ParseUtils.unexpectedElement(reader);
}
}
config.setWelcomeFiles(welcomeFiles);
return config;
}
