{
  context.startSubsystemElement(Namespace.CURRENT.getUriString(),false);
  ModelNode node=context.getModelNode();
  writeAttribute(writer,Attribute.NATIVE.getLocalName(),node);
  writeAttribute(writer,Attribute.DEFAULT_VIRTUAL_SERVER.getLocalName(),node);
  if (node.hasDefined(CONTAINER_CONFIG)) {
    writeContainerConfig(writer,node.get(CONTAINER_CONFIG));
  }
  if (node.hasDefined(CONNECTOR)) {
    for (    final Property connector : node.get(CONNECTOR).asPropertyList()) {
      final ModelNode config=connector.getValue();
      writer.writeStartElement(Element.CONNECTOR.getLocalName());
      writer.writeAttribute(NAME,connector.getName());
      writeAttribute(writer,Attribute.PROTOCOL.getLocalName(),config);
      writeAttribute(writer,Attribute.SOCKET_BINDING.getLocalName(),config);
      writeAttribute(writer,Attribute.SCHEME.getLocalName(),config);
      writeAttribute(writer,Attribute.ENABLED.getLocalName(),config);
      writeAttribute(writer,Attribute.ENABLE_LOOKUPS.getLocalName(),config);
      writeAttribute(writer,Attribute.PROXY_NAME.getLocalName(),config);
      writeAttribute(writer,Attribute.PROXY_PORT.getLocalName(),config);
      writeAttribute(writer,Attribute.SECURE.getLocalName(),config);
      writeAttribute(writer,Attribute.EXECUTOR.getLocalName(),config);
      writeAttribute(writer,Attribute.MAX_POST_SIZE.getLocalName(),config);
      writeAttribute(writer,Attribute.MAX_SAVE_POST_SIZE.getLocalName(),config);
      writeAttribute(writer,Attribute.MAX_CONNECTIONS.getLocalName(),config);
      if (config.hasDefined(SSL)) {
        writer.writeStartElement(Element.SSL.getLocalName());
        final ModelNode sslConfig=config.get(SSL);
        writeAttribute(writer,Attribute.NAME.getLocalName(),sslConfig);
        writeAttribute(writer,Attribute.KEY_ALIAS.getLocalName(),sslConfig);
        writeAttribute(writer,Attribute.PASSWORD.getLocalName(),sslConfig);
        writeAttribute(writer,Attribute.CERTIFICATE_KEY_FILE.getLocalName(),sslConfig);
        writeAttribute(writer,Attribute.CIPHER_SUITE.getLocalName(),sslConfig);
        writeAttribute(writer,Attribute.PROTOCOL.getLocalName(),sslConfig);
        writeAttribute(writer,Attribute.VERIFY_CLIENT.getLocalName(),sslConfig);
        writeAttribute(writer,Attribute.VERIFY_DEPTH.getLocalName(),sslConfig);
        writeAttribute(writer,Attribute.CERTIFICATE_FILE.getLocalName(),sslConfig);
        writeAttribute(writer,Attribute.CA_CERTIFICATE_FILE.getLocalName(),sslConfig);
        writeAttribute(writer,Attribute.CA_REVOCATION_URL.getLocalName(),sslConfig);
        writeAttribute(writer,Attribute.SESSION_CACHE_SIZE.getLocalName(),sslConfig);
        writeAttribute(writer,Attribute.SESSION_TIMEOUT.getLocalName(),sslConfig);
        writer.writeEndElement();
      }
      if (config.has(VIRTUAL_SERVER)) {
        for (        final ModelNode virtualServer : config.get(VIRTUAL_SERVER).asList()) {
          writer.writeEmptyElement(VIRTUAL_SERVER);
          writer.writeAttribute(NAME,virtualServer.asString());
        }
      }
      writer.writeEndElement();
    }
  }
  if (node.hasDefined(VIRTUAL_SERVER)) {
    for (    final Property host : node.get(VIRTUAL_SERVER).asPropertyList()) {
      final ModelNode config=host.getValue();
      writer.writeStartElement(Element.VIRTUAL_SERVER.getLocalName());
      writer.writeAttribute(NAME,host.getName());
      writeAttribute(writer,Attribute.DEFAULT_WEB_MODULE.getLocalName(),config);
      if (config.has(ALIAS)) {
        for (        final ModelNode alias : config.get(ALIAS).asList()) {
          writer.writeEmptyElement(ALIAS);
          writer.writeAttribute(NAME,alias.asString());
        }
      }
      writer.writeEndElement();
    }
  }
  writer.writeEndElement();
}
