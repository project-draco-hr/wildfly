{
  context.startSubsystemElement(Namespace.CURRENT.getUriString(),false);
  ModelNode node=context.getModelNode();
  writeAttribute(writer,Attribute.NATIVE.getLocalName(),node);
  writeAttribute(writer,Attribute.DEFAULT_VIRTUAL_SERVER.getLocalName(),node);
  writeAttribute(writer,Attribute.INSTANCE_ID.getLocalName(),node);
  if (node.hasDefined(CONTAINER_CONFIG)) {
    writeContainerConfig(writer,node.get(CONTAINER_CONFIG));
  }
  if (node.hasDefined(CONNECTOR)) {
    for (    final Property connector : node.get(CONNECTOR).asPropertyList()) {
      final ModelNode config=connector.getValue();
      writer.writeStartElement(Element.CONNECTOR.getLocalName());
      writer.writeAttribute(NAME,connector.getName());
      writeAttribute(writer,Attribute.PROTOCOL.getLocalName(),config);
      writeAttribute(writer,Attribute.SOCKET_BINDING.getLocalName(),config);
      writeAttribute(writer,Attribute.SCHEME.getLocalName(),config);
      writeAttribute(writer,Attribute.ENABLED.getLocalName(),config);
      writeAttribute(writer,Attribute.ENABLE_LOOKUPS.getLocalName(),config);
      writeAttribute(writer,Attribute.PROXY_NAME.getLocalName(),config);
      writeAttribute(writer,Attribute.PROXY_PORT.getLocalName(),config);
      writeAttribute(writer,Attribute.SECURE.getLocalName(),config);
      writeAttribute(writer,Attribute.EXECUTOR.getLocalName(),config);
      writeAttribute(writer,Attribute.MAX_POST_SIZE.getLocalName(),config);
      writeAttribute(writer,Attribute.MAX_SAVE_POST_SIZE.getLocalName(),config);
      writeAttribute(writer,Attribute.MAX_CONNECTIONS.getLocalName(),config);
      writeAttribute(writer,Attribute.REDIRECT_PORT.getLocalName(),config);
      if (config.hasDefined(SSL)) {
        writer.writeStartElement(Element.SSL.getLocalName());
        final ModelNode sslConfig=config.get(SSL);
        writeAttribute(writer,Attribute.NAME.getLocalName(),sslConfig);
        writeAttribute(writer,Attribute.KEY_ALIAS.getLocalName(),sslConfig);
        writeAttribute(writer,Attribute.PASSWORD.getLocalName(),sslConfig);
        writeAttribute(writer,Attribute.CERTIFICATE_KEY_FILE.getLocalName(),sslConfig);
        writeAttribute(writer,Attribute.CIPHER_SUITE.getLocalName(),sslConfig);
        writeAttribute(writer,Attribute.PROTOCOL.getLocalName(),sslConfig);
        writeAttribute(writer,Attribute.VERIFY_CLIENT.getLocalName(),sslConfig);
        writeAttribute(writer,Attribute.VERIFY_DEPTH.getLocalName(),sslConfig);
        writeAttribute(writer,Attribute.CERTIFICATE_FILE.getLocalName(),sslConfig);
        writeAttribute(writer,Attribute.CA_CERTIFICATE_FILE.getLocalName(),sslConfig);
        writeAttribute(writer,Attribute.CA_REVOCATION_URL.getLocalName(),sslConfig);
        writeAttribute(writer,Attribute.SESSION_CACHE_SIZE.getLocalName(),sslConfig);
        writeAttribute(writer,Attribute.SESSION_TIMEOUT.getLocalName(),sslConfig);
        writer.writeEndElement();
      }
      if (config.hasDefined(VIRTUAL_SERVER)) {
        for (        final ModelNode virtualServer : config.get(VIRTUAL_SERVER).asList()) {
          writer.writeEmptyElement(VIRTUAL_SERVER);
          writer.writeAttribute(NAME,virtualServer.asString());
        }
      }
      writer.writeEndElement();
    }
  }
  if (node.hasDefined(VIRTUAL_SERVER)) {
    for (    final Property host : node.get(VIRTUAL_SERVER).asPropertyList()) {
      final ModelNode config=host.getValue();
      writer.writeStartElement(Element.VIRTUAL_SERVER.getLocalName());
      writer.writeAttribute(NAME,host.getName());
      writeAttribute(writer,Attribute.DEFAULT_WEB_MODULE.getLocalName(),config);
      if (config.hasDefined(ENABLE_WELCOME_ROOT) && config.get(ENABLE_WELCOME_ROOT).asBoolean())       writer.writeAttribute(ENABLE_WELCOME_ROOT,"true");
      if (config.hasDefined(ALIAS)) {
        for (        final ModelNode alias : config.get(ALIAS).asList()) {
          writer.writeEmptyElement(ALIAS);
          writer.writeAttribute(NAME,alias.asString());
        }
      }
      if (config.hasDefined(ACCESS_LOG)) {
        writer.writeStartElement(Element.ACCESS_LOG.getLocalName());
        final ModelNode accessLog=config.get(ACCESS_LOG);
        writeAttribute(writer,Attribute.PATTERN.getLocalName(),accessLog);
        writeAttribute(writer,Attribute.RESOLVE_HOSTS.getLocalName(),accessLog);
        writeAttribute(writer,Attribute.EXTENDED.getLocalName(),accessLog);
        writeAttribute(writer,Attribute.PREFIX.getLocalName(),accessLog);
        writeAttribute(writer,Attribute.ROTATE.getLocalName(),accessLog);
        if (accessLog.has(DIRECTORY)) {
          final ModelNode directory=accessLog.get(DIRECTORY);
          writer.writeEmptyElement(DIRECTORY);
          writeAttribute(writer,Attribute.PATH.getLocalName(),directory);
          writeAttribute(writer,Attribute.RELATIVE_TO.getLocalName(),directory);
        }
        writer.writeEndElement();
      }
      if (config.hasDefined(REWRITE)) {
        for (        final ModelNode rewrite : config.get(REWRITE).asList()) {
          writer.writeStartElement(REWRITE);
          writeAttribute(writer,Attribute.PATTERN.getLocalName(),rewrite);
          writeAttribute(writer,Attribute.SUBSTITUTION.getLocalName(),rewrite);
          writeAttribute(writer,Attribute.FLAGS.getLocalName(),rewrite);
          if (rewrite.hasDefined(CONDITION)) {
            for (            final ModelNode condition : rewrite.get(CONDITION).asList()) {
              writer.writeEmptyElement(CONDITION);
              writeAttribute(writer,Attribute.TEST.getLocalName(),condition);
              writeAttribute(writer,Attribute.PATTERN.getLocalName(),condition);
              writeAttribute(writer,Attribute.FLAGS.getLocalName(),condition);
            }
          }
          writer.writeEndElement();
        }
      }
      if (config.hasDefined(SSO)) {
        writer.writeEmptyElement(SSO);
        final ModelNode sso=config.get(SSO);
        writeAttribute(writer,Attribute.CACHE_CONTAINER.getLocalName(),sso);
        writeAttribute(writer,Attribute.DOMAIN.getLocalName(),sso);
        writeAttribute(writer,Attribute.REAUTHENTICATE.getLocalName(),sso);
      }
      writer.writeEndElement();
    }
  }
  writer.writeEndElement();
}
