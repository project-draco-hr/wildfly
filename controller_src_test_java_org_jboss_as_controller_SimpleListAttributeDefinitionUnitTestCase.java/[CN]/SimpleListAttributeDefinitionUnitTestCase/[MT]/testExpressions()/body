{
  AttributeDefinition ad=SimpleAttributeDefinitionBuilder.create("x",ModelType.INT).setAllowExpression(true).build();
  SimpleListAttributeDefinition ld=SimpleListAttributeDefinition.Builder.of("test",ad).setAllowExpression(true).setValidator(new IntRangeValidator(1,false,true)).build();
  ModelNode op=new ModelNode();
  op.get("test").add(2).add("${test:1}");
  ModelNode validated=ld.validateOperation(op);
  Assert.assertEquals(op.get("test").get(0),validated.get(0));
  Assert.assertEquals(new ModelNode().set(new ValueExpression(op.get("test").get(1).asString())),validated.get(1));
  ModelNode model=new ModelNode();
  ld.validateAndSet(op,model);
  Assert.assertEquals(op.get("test").get(0),model.get("test").get(0));
  Assert.assertEquals(new ModelNode().set(new ValueExpression(op.get("test").get(1).asString())),model.get("test").get(1));
  ad=SimpleAttributeDefinitionBuilder.create("x",ModelType.OBJECT).setAllowExpression(true).build();
  ld=SimpleListAttributeDefinition.Builder.of("test",ad).setAllowExpression(true).setValidator(new ModelTypeValidator(ModelType.PROPERTY,false,true)).build();
  op=new ModelNode();
  op.get("test").add("foo",2).add("bar","${test:1}");
  try {
    ld.validateOperation(op);
    org.junit.Assert.fail("Did not reject " + op);
  }
 catch (  IllegalStateException good) {
  }
  try {
    ld.validateAndSet(op,new ModelNode());
    org.junit.Assert.fail("Did not reject " + op);
  }
 catch (  IllegalStateException good) {
  }
}
