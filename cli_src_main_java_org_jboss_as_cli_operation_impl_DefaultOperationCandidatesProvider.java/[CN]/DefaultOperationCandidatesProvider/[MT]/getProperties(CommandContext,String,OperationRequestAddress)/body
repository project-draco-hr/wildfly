{
  final ModelControllerClient client=ctx.getModelControllerClient();
  if (client == null) {
    return Collections.emptyList();
  }
  final ModelNode request;
  final DefaultOperationRequestBuilder builder=new DefaultOperationRequestBuilder(address);
  try {
    builder.setOperationName(Util.READ_OPERATION_DESCRIPTION);
    builder.addProperty(Util.NAME,operationName);
    request=builder.buildRequest();
  }
 catch (  OperationFormatException e1) {
    throw new IllegalStateException("Failed to build operation",e1);
  }
  final Map<String,CommandLineCompleterFactory> globalOpProps=globalOpPropCompleters.get(operationName);
  List<CommandArgument> result;
  try {
    ModelNode outcome=client.execute(request);
    if (!Util.isSuccess(outcome)) {
      result=Collections.emptyList();
    }
 else {
      final ModelNode resultNode=outcome.get(Util.RESULT);
      if (!resultNode.isDefined()) {
        return Collections.emptyList();
      }
      final ModelNode reqProps=resultNode.get(Util.REQUEST_PROPERTIES);
      if (!reqProps.isDefined()) {
        return Collections.emptyList();
      }
      final List<Property> propList=reqProps.asPropertyList();
      result=new ArrayList<CommandArgument>(propList.size());
      for (      final Property prop : propList) {
        final CommandLineCompleterFactory factory=globalOpProps == null ? null : globalOpProps.get(prop.getName());
        CommandLineCompleter propCompleter=null;
        if (factory != null) {
          propCompleter=factory.createCompleter(address);
        }
 else {
          final ModelNode typeNode=prop.getValue().get(Util.TYPE);
          if (typeNode.isDefined() && typeNode.asType().equals(ModelType.BOOLEAN)) {
            propCompleter=SimpleTabCompleter.BOOLEAN;
          }
 else {
            if (prop.getValue().has(Util.VALUE_TYPE)) {
              final ModelNode valueTypeNode=prop.getValue().get(Util.VALUE_TYPE);
              try {
                valueTypeNode.asType();
                if (prop.getValue().has(Util.ALLOWED)) {
                  propCompleter=getAllowedCompleter(prop);
                }
              }
 catch (              IllegalArgumentException e) {
              }
            }
 else             if (prop.getValue().has(Util.ALLOWED)) {
              propCompleter=getAllowedCompleter(prop);
            }
          }
        }
        final CommandLineCompleter completer=propCompleter;
        result.add(new CommandArgument(){
          final String argName=prop.getName();
          @Override public String getFullName(){
            return argName;
          }
          @Override public String getShortName(){
            return null;
          }
          @Override public int getIndex(){
            return -1;
          }
          @Override public boolean isPresent(          ParsedCommandLine args) throws CommandFormatException {
            return args.hasProperty(argName);
          }
          @Override public boolean canAppearNext(          CommandContext ctx) throws CommandFormatException {
            return !isPresent(ctx.getParsedCommandLine());
          }
          @Override public String getValue(          ParsedCommandLine args) throws CommandFormatException {
            return args.getPropertyValue(argName);
          }
          @Override public String getValue(          ParsedCommandLine args,          boolean required) throws CommandFormatException {
            if (!isPresent(args)) {
              throw new CommandFormatException("Property '" + argName + "' is missing required value.");
            }
            return args.getPropertyValue(argName);
          }
          @Override public boolean isValueComplete(          ParsedCommandLine args) throws CommandFormatException {
            if (!isPresent(args)) {
              return false;
            }
            if (argName.equals(args.getLastParsedPropertyName())) {
              return false;
            }
            return true;
          }
          @Override public boolean isValueRequired(){
            return true;
          }
          @Override public CommandLineCompleter getValueCompleter(){
            return completer;
          }
        }
);
      }
    }
  }
 catch (  Exception e) {
    result=Collections.emptyList();
  }
  return result;
}
