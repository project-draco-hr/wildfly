{
  ModelNode operationAddress=operation.require(OP_ADDR);
  PathAddress address=PathAddress.pathAddress(operationAddress);
  final String name=address.getLastElement().getValue();
  final String type=operation.get(TYPE).asString();
  final ModelNode subModel=context.getSubModel();
  subModel.get(TYPE).set(operation.require(TYPE).asString());
  subModel.get(URL).set(operation.require(URL).asString());
  subModel.get(SEARCH_DN).set(operation.require(SEARCH_DN).asString());
  subModel.get(SEARCH_CREDENTIAL).set(operation.require(SEARCH_CREDENTIAL).asString());
  if (operation.has(INITIAL_CONTEXT_FACTORY)) {
    subModel.get(INITIAL_CONTEXT_FACTORY).set(operation.require(INITIAL_CONTEXT_FACTORY).asString());
  }
  if (context.getRuntimeContext() != null) {
    context.getRuntimeContext().setRuntimeTask(new RuntimeTask(){
      public void execute(      RuntimeTaskContext context) throws OperationFailedException {
        final ServiceTarget serviceTarget=context.getServiceTarget();
        if (LDAP.equals(type)) {
          final LdapConnectionManagerService connectionManagerService=new LdapConnectionManagerService(subModel);
          serviceTarget.addService(LdapConnectionManagerService.BASE_SERVICE_NAME.append(name),connectionManagerService).setInitialMode(ServiceController.Mode.ON_DEMAND).install();
        }
      }
    }
);
  }
 else {
    resultHandler.handleResultComplete();
  }
  final ModelNode compensatingOperation=new ModelNode();
  return new BasicOperationResult(compensatingOperation);
}
