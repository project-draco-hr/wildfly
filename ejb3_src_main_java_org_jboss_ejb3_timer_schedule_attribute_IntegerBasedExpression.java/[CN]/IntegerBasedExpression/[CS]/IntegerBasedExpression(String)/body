{
  this.origValue=value;
  this.scheduleExpressionType=ScheduleExpressionTypeUtil.getType(value);
  if (this.accepts(scheduleExpressionType) == false) {
    throw new IllegalArgumentException("Invalid value: " + value + " since "+ this.getClass().getName()+ " doesn't support values of types "+ this.scheduleExpressionType.toString());
  }
switch (this.scheduleExpressionType) {
case RANGE:
    RangeValue range=new RangeValue(value);
  this.processRangeValue(range);
break;
case LIST:
ListValue list=new ListValue(value);
this.processListValue(list);
break;
case INCREMENT:
IncrementValue incrValue=new IncrementValue(value);
this.processIncrement(incrValue);
break;
case SINGLE_VALUE:
SingleValue singleValue=new SingleValue(value);
this.processSingleValue(singleValue);
break;
case WILDCARD:
break;
default :
throw new IllegalArgumentException("Invalid value for second: " + value);
}
}
