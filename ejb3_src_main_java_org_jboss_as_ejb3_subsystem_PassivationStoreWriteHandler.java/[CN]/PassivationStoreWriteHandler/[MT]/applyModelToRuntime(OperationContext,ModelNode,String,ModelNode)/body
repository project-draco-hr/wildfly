{
  String name=PathAddress.pathAddress(operation.get(ModelDescriptionConstants.OP_ADDR)).getLastElement().getValue();
  ServiceName serviceName=BackingCacheEntryStoreSourceService.getServiceName(name);
  ServiceRegistry registry=context.getServiceRegistry(true);
  @SuppressWarnings("unchecked") ServiceController<S> service=(ServiceController<S>)registry.getService(serviceName);
  if (service != null) {
    S config=service.getValue();
    if (config != null) {
      AttributeDefinition maxSizeDefinition=this.getMaxSizeDefinition();
      if (maxSizeDefinition.getName().equals(attributeName)) {
        int maxSize=maxSizeDefinition.resolveModelAttribute(context,model).asInt();
        config.setMaxSize(maxSize);
      }
 else       if (PassivationStoreResourceDefinition.IDLE_TIMEOUT.getName().equals(attributeName)) {
        long timeout=PassivationStoreResourceDefinition.IDLE_TIMEOUT.resolveModelAttribute(context,model).asLong();
        config.setIdleTimeout(timeout);
      }
 else       if (PassivationStoreResourceDefinition.IDLE_TIMEOUT_UNIT.getName().equals(attributeName)) {
        TimeUnit unit=TimeUnit.valueOf(PassivationStoreResourceDefinition.IDLE_TIMEOUT_UNIT.resolveModelAttribute(context,model).asString());
        config.setIdleTimeoutUnit(unit);
      }
 else {
        this.apply(config,context,attributeName,model);
      }
    }
  }
}
