{
  this.entity=entity;
  JDBCStoreManager2 manager=(JDBCStoreManager2)entity.getManager();
  QLCompiler compiler=new EJBQLToSQL92Compiler(manager.getCatalog());
  try {
    compiler.compileJBossQL(metadata.getJBossQL(),metadata.getMethod().getReturnType(),metadata.getMethod().getParameterTypes(),metadata);
  }
 catch (  Throwable t) {
    t.printStackTrace();
    throw new RuntimeException("Error compiling JBossQL statement '" + metadata.getJBossQL() + "'",t);
  }
  sql=compiler.getSQL();
  setOffsetParam(compiler.getOffsetParam());
  setOffsetValue(compiler.getOffsetValue());
  setLimitParam(compiler.getLimitParam());
  setLimitValue(compiler.getLimitValue());
  log=Logger.getLogger(getClass().getName() + "." + entity.getEntityName()+ "#"+ metadata.getMethod().getName());
  log.debug("sql: " + sql);
  setParameters(compiler.getInputParameters());
  setResultType(metadata.getMethod().getReturnType());
  if (!compiler.isSelectEntity()) {
    if (compiler.isSelectField()) {
      setFieldReader((JDBCCMPFieldBridge2)compiler.getSelectField());
    }
 else {
      setFunctionReader(compiler.getSelectFunction());
    }
  }
 else {
    setEntityReader((JDBCEntityBridge2)compiler.getSelectEntity(),compiler.isSelectDistinct());
  }
}
