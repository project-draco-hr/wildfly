{
  if (store.hasDefined(ModelKeys.CLASS)) {
    String className=store.get(ModelKeys.CLASS).asString();
    try {
      CacheStore cacheStore=Class.forName(className).asSubclass(CacheStore.class).newInstance();
      return cacheStore.getConfigurationClass().asSubclass(CacheStoreConfig.class).newInstance();
    }
 catch (    Exception e) {
      throw MESSAGES.invalidCacheStore(e,className);
    }
  }
  FileCacheStoreConfig storeConfig=new FileCacheStoreConfig();
  String relativeTo=store.hasDefined(ModelKeys.RELATIVE_TO) ? store.get(ModelKeys.RELATIVE_TO).asString() : ServerEnvironment.SERVER_DATA_DIR;
  builder.addDependency(AbstractPathService.pathNameOf(relativeTo),String.class,storeConfig.getRelativeToInjector());
  storeConfig.setPath(store.hasDefined(ModelKeys.PATH) ? store.get(ModelKeys.PATH).asString() : name);
  return storeConfig;
}
