{
  final PathAddress address=getCacheContainerAddressFromOperation(operation);
  final String name=address.getLastElement().getValue();
  final ServiceTarget target=context.getServiceTarget();
  ModelNode resolvedValue=null;
  final String defaultCache=(resolvedValue=CommonAttributes.DEFAULT_CACHE.resolveModelAttribute(context,containerModel)).isDefined() ? resolvedValue.asString() : null;
  final String jndiNameString=(resolvedValue=CommonAttributes.JNDI_NAME.resolveModelAttribute(context,containerModel)).isDefined() ? resolvedValue.asString() : null;
  final String listenerExecutor=(resolvedValue=CommonAttributes.LISTENER_EXECUTOR.resolveModelAttribute(context,containerModel)).isDefined() ? resolvedValue.asString() : null;
  final String evictionExecutor=(resolvedValue=CommonAttributes.EVICTION_EXECUTOR.resolveModelAttribute(context,containerModel)).isDefined() ? resolvedValue.asString() : null;
  final String replicationQueueExecutor=(resolvedValue=CommonAttributes.REPLICATION_QUEUE_EXECUTOR.resolveModelAttribute(context,containerModel)).isDefined() ? resolvedValue.asString() : null;
  final ServiceController.Mode initialMode=StartMode.valueOf(CommonAttributes.START.resolveModelAttribute(context,containerModel).asString()).getMode();
  ServiceName[] aliases=null;
  if (containerModel.hasDefined(ModelKeys.ALIASES)) {
    List<ModelNode> list=operation.get(ModelKeys.ALIASES).asList();
    aliases=new ServiceName[list.size()];
    for (int i=0; i < list.size(); i++) {
      aliases[i]=EmbeddedCacheManagerService.getServiceName(list.get(i).asString());
    }
  }
  final ModuleIdentifier moduleId=(resolvedValue=CommonAttributes.CACHE_CONTAINER_MODULE.resolveModelAttribute(context,containerModel)).isDefined() ? ModuleIdentifier.fromString(resolvedValue.asString()) : null;
  final boolean hasTransport=containerModel.hasDefined(ModelKeys.TRANSPORT) && containerModel.get(ModelKeys.TRANSPORT).hasDefined(ModelKeys.TRANSPORT_NAME);
  String stack=null;
  String cluster=null;
  long lockTimeout=0;
  String transportExecutor=null;
  Transport transportConfig=null;
  Collection<ServiceController<?>> controllers=new ArrayList<ServiceController<?>>(6);
  if (hasTransport) {
    ModelNode transport=containerModel.get(ModelKeys.TRANSPORT,ModelKeys.TRANSPORT_NAME);
    stack=(resolvedValue=CommonAttributes.STACK.resolveModelAttribute(context,transport)).isDefined() ? resolvedValue.asString() : null;
    cluster=(resolvedValue=CommonAttributes.CLUSTER.resolveModelAttribute(context,transport)).isDefined() ? resolvedValue.asString() : name;
    lockTimeout=CommonAttributes.LOCK_TIMEOUT.resolveModelAttribute(context,transport).asLong();
    transportExecutor=(resolvedValue=CommonAttributes.EXECUTOR.resolveModelAttribute(context,transport)).isDefined() ? resolvedValue.asString() : null;
    transportConfig=new Transport();
    transportConfig.setLockTimeout(lockTimeout);
    controllers.add(this.installChannelService(target,name,cluster,stack,verificationHandler));
    controllers.add(this.installGroupCommunicationService(target,name,verificationHandler));
    controllers.add(this.installLockManager(target,name,verificationHandler));
  }
  controllers.add(this.installContainerConfigurationService(target,name,defaultCache,moduleId,stack,transportConfig,transportExecutor,listenerExecutor,evictionExecutor,replicationQueueExecutor,verificationHandler));
  controllers.add(this.installContainerService(target,name,aliases,initialMode,verificationHandler));
  controllers.add(this.installJndiService(target,name,jndiNameString,verificationHandler));
  log.debugf("%s cache container installed",name);
  return controllers;
}
