{
  final PathAddress address=getCacheContainerAddressFromOperation(operation);
  final String name=address.getLastElement().getValue();
  final ServiceTarget target=context.getServiceTarget();
  ModelNode resolvedValue=null;
  final String defaultCache=(resolvedValue=CacheContainerResourceDefinition.DEFAULT_CACHE.resolveModelAttribute(context,containerModel)).isDefined() ? resolvedValue.asString() : null;
  final String jndiName=(resolvedValue=CacheContainerResourceDefinition.JNDI_NAME.resolveModelAttribute(context,containerModel)).isDefined() ? resolvedValue.asString() : null;
  final String listenerExecutor=(resolvedValue=CacheContainerResourceDefinition.LISTENER_EXECUTOR.resolveModelAttribute(context,containerModel)).isDefined() ? resolvedValue.asString() : null;
  final String evictionExecutor=(resolvedValue=CacheContainerResourceDefinition.EVICTION_EXECUTOR.resolveModelAttribute(context,containerModel)).isDefined() ? resolvedValue.asString() : null;
  final String replicationQueueExecutor=(resolvedValue=CacheContainerResourceDefinition.REPLICATION_QUEUE_EXECUTOR.resolveModelAttribute(context,containerModel)).isDefined() ? resolvedValue.asString() : null;
  final ServiceController.Mode initialMode=StartMode.valueOf(CacheContainerResourceDefinition.START.resolveModelAttribute(context,containerModel).asString()).getMode();
  ServiceName[] aliases=null;
  if (containerModel.hasDefined(ModelKeys.ALIASES)) {
    List<ModelNode> list=operation.get(ModelKeys.ALIASES).asList();
    aliases=new ServiceName[list.size()];
    for (int i=0; i < list.size(); i++) {
      aliases[i]=EmbeddedCacheManagerService.getServiceName(list.get(i).asString());
    }
  }
  final ModuleIdentifier moduleId=(resolvedValue=CacheContainerResourceDefinition.CACHE_CONTAINER_MODULE.resolveModelAttribute(context,containerModel)).isDefined() ? ModuleIdentifier.fromString(resolvedValue.asString()) : null;
  final Transport transportConfig=containerModel.hasDefined(ModelKeys.TRANSPORT) && containerModel.get(ModelKeys.TRANSPORT).hasDefined(ModelKeys.TRANSPORT_NAME) ? new Transport() : null;
  String stack=null;
  String transportExecutor=null;
  Collection<ServiceController<?>> controllers=new LinkedList<>();
  if (transportConfig != null) {
    ModelNode transport=containerModel.get(ModelKeys.TRANSPORT,ModelKeys.TRANSPORT_NAME);
    stack=(resolvedValue=TransportResourceDefinition.STACK.resolveModelAttribute(context,transport)).isDefined() ? resolvedValue.asString() : null;
    final String cluster=(resolvedValue=TransportResourceDefinition.CLUSTER.resolveModelAttribute(context,transport)).isDefined() ? resolvedValue.asString() : name;
    long lockTimeout=TransportResourceDefinition.LOCK_TIMEOUT.resolveModelAttribute(context,transport).asLong();
    transportExecutor=(resolvedValue=TransportResourceDefinition.EXECUTOR.resolveModelAttribute(context,transport)).isDefined() ? resolvedValue.asString() : null;
    transportConfig.setClusterName(cluster);
    transportConfig.setLockTimeout(lockTimeout);
    controllers.addAll(this.installChannelServices(target,name,cluster,stack,verificationHandler));
    ChannelInstanceResourceDefinition.addChannelProtocolMetricsRegistrationStep(context,cluster,stack);
    for (    ChannelDependentServiceProvider provider : ServiceLoader.load(ChannelDependentServiceProvider.class,ChannelDependentServiceProvider.class.getClassLoader())) {
      log.debugf("Installing %s for channel %s",provider.getClass().getSimpleName(),cluster);
      controllers.addAll(provider.install(target,name,moduleId));
    }
  }
  controllers.add(this.installContainerConfigurationService(target,name,defaultCache,moduleId,stack,transportConfig,transportExecutor,listenerExecutor,evictionExecutor,replicationQueueExecutor,verificationHandler));
  controllers.add(this.installContainerService(target,name,aliases,transportConfig,initialMode,verificationHandler));
  controllers.add(this.installJndiService(target,name,jndiName,verificationHandler));
  controllers.add(this.installKeyAffinityServiceFactoryService(target,name,verificationHandler));
  log.debugf("%s cache container installed",name);
  return controllers;
}
