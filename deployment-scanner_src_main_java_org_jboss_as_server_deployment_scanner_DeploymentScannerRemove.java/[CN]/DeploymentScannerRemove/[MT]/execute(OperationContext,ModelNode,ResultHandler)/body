{
  final PathAddress address=PathAddress.pathAddress(operation.require(OP_ADDR));
  final String name=address.getLastElement().getValue();
  final ModelNode subModel=new ModelNode();
  final ModelNode compensatingOperation=new ModelNode();
  compensatingOperation.get(OP).set(ADD);
  compensatingOperation.get(OP_ADDR).set(operation.require(OP_ADDR));
  compensatingOperation.get(CommonAttributes.PATH).set(subModel.get(CommonAttributes.PATH));
  if (subModel.hasDefined(CommonAttributes.SCAN_ENABLED))   compensatingOperation.get(CommonAttributes.SCAN_ENABLED).set(subModel.get(CommonAttributes.SCAN_ENABLED));
  if (subModel.hasDefined(CommonAttributes.SCAN_INTERVAL))   compensatingOperation.get(CommonAttributes.SCAN_INTERVAL).set(subModel.get(CommonAttributes.SCAN_INTERVAL));
  if (subModel.hasDefined(CommonAttributes.RELATIVE_TO))   compensatingOperation.get(CommonAttributes.RELATIVE_TO).set(subModel.get(CommonAttributes.RELATIVE_TO));
  if (subModel.hasDefined(CommonAttributes.AUTO_DEPLOY_ZIPPED))   compensatingOperation.get(CommonAttributes.AUTO_DEPLOY_ZIPPED).set(subModel.get(CommonAttributes.AUTO_DEPLOY_ZIPPED));
  if (subModel.hasDefined(CommonAttributes.AUTO_DEPLOY_EXPLODED))   compensatingOperation.get(CommonAttributes.AUTO_DEPLOY_EXPLODED).set(subModel.get(CommonAttributes.AUTO_DEPLOY_EXPLODED));
  if (subModel.hasDefined(CommonAttributes.DEPLOYMENT_TIMEOUT))   compensatingOperation.get(CommonAttributes.DEPLOYMENT_TIMEOUT).set(subModel.get(CommonAttributes.DEPLOYMENT_TIMEOUT));
  if (context.getRuntimeContext() != null) {
    context.getRuntimeContext().setRuntimeTask(new RuntimeTask(){
      public void execute(      RuntimeTaskContext context) throws OperationFailedException {
        final ServiceController<?> controller=context.getServiceRegistry().getService(DeploymentScannerService.getServiceName(name));
        if (controller != null) {
          controller.setMode(ServiceController.Mode.REMOVE);
        }
        resultHandler.handleResultComplete();
      }
    }
);
  }
 else {
    resultHandler.handleResultComplete();
  }
  return new BasicOperationResult(compensatingOperation);
}
