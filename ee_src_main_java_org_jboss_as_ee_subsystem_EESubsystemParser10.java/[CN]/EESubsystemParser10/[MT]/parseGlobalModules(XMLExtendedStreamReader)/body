{
  ModelNode globalModules=new ModelNode();
  requireNoAttributes(reader);
  while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
switch (Element.forName(reader.getLocalName())) {
case MODULE:
{
        final ModelNode module=new ModelNode();
        final int count=reader.getAttributeCount();
        String name=null;
        String slot=null;
        for (int i=0; i < count; i++) {
          requireNoNamespaceAttribute(reader,i);
          final String value=reader.getAttributeValue(i);
          final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case NAME:
            if (name != null) {
              throw unexpectedAttribute(reader,i);
            }
          name=value;
        GlobalModulesDefinition.NAME_AD.parseAndSetParameter(name,module,reader);
      break;
case SLOT:
    if (slot != null) {
      throw unexpectedAttribute(reader,i);
    }
  slot=value;
GlobalModulesDefinition.SLOT_AD.parseAndSetParameter(slot,module,reader);
break;
default :
throw unexpectedAttribute(reader,i);
}
}
if (name == null) {
throw missingRequired(reader,Collections.singleton(NAME));
}
globalModules.add(module);
requireNoContent(reader);
break;
}
default :
{
throw unexpectedElement(reader);
}
}
}
return globalModules;
}
