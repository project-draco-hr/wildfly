{
  final File binDir=createInstalledImage(env,"consoleSlot",productConfig.getProductName(),productConfig.getProductVersion());
  String patchID=randomString();
  String patchElementId=randomString();
  File patchDir=mkdir(tempDir,patchID);
  String fileNoConflictName="file-no-conflict.txt";
  File noConflictFile=touch(binDir,fileNoConflictName);
  dump(noConflictFile,"original script to run standalone AS7");
  ContentModification fileNoConflictModified=ContentModificationUtils.modifyMisc(patchDir,patchID,"updated script",noConflictFile,"bin",fileNoConflictName);
  Patch patch=PatchBuilder.create().setPatchId(patchID).setDescription(randomString()).upgradeIdentity(productConfig.getProductName(),productConfig.getProductVersion(),productConfig.getProductVersion() + "CP1").getParent().addContentModification(fileNoConflictModified).upgradeElement(patchElementId,"base",false).getParent().build();
  createPatchXMLFile(patchDir,patch,false);
  File zippedPatch=createZippedPatchFile(patchDir,patch.getPatchId());
  CommandContext ctx=CommandContextFactory.getInstance().newCommandContext();
  try {
    ctx.handle("patch apply " + zippedPatch.getAbsolutePath() + " --distribution="+ env.getInstalledImage().getJbossHome());
  }
 catch (  Exception e) {
    ctx.terminateSession();
    throw e;
  }
  File backupAppclientXmlFile=assertFileExists(env.getInstalledImage().getPatchHistoryDir(patch.getPatchId()),"configuration","appclient","appclient.xml");
  assertFileContent(originalAppClientHash,backupAppclientXmlFile);
  File backupStandaloneXmlFile=assertFileExists(env.getInstalledImage().getPatchHistoryDir(patch.getPatchId()),"configuration","standalone","standalone.xml");
  assertFileContent(originalStandaloneHash,backupStandaloneXmlFile);
  File backupDomainXmlFile=assertFileExists(env.getInstalledImage().getPatchHistoryDir(patch.getPatchId()),"configuration","domain","domain.xml");
  assertFileContent(originalDomainHash,backupDomainXmlFile);
  dump(standaloneXmlFile,"<updated standalone configuration with changes from the added module>");
  byte[] updatedStandaloneXmlFile=hashFile(standaloneXmlFile);
  assertNotEquals(bytesToHexString(originalStandaloneHash),bytesToHexString(updatedStandaloneXmlFile));
  dump(appClientXmlFile,"<updated app client configuration with changes from the added module>");
  byte[] updatedAppClientXmlHash=hashFile(appClientXmlFile);
  assertNotEquals(bytesToHexString(originalAppClientHash),bytesToHexString(updatedAppClientXmlHash));
  dump(domainXmlFile,"<updated domain configuration with changes from the added module>");
  byte[] updatedDomainXmlHash=hashFile(domainXmlFile);
  assertNotEquals(bytesToHexString(originalDomainHash),bytesToHexString(updatedDomainXmlHash));
  try {
    ctx.handle("patch rollback --reset-configuration=true --distribution=" + env.getInstalledImage().getJbossHome());
  }
  finally {
    ctx.terminateSession();
  }
  File rolledBackStandaloneXmlFile=assertFileExists(env.getInstalledImage().getStandaloneDir(),"configuration","standalone.xml");
  assertEquals(bytesToHexString(originalStandaloneHash),bytesToHexString(hashFile(rolledBackStandaloneXmlFile)));
  File rolledBackAppClientXmlFile=assertFileExists(env.getInstalledImage().getAppClientDir(),"configuration","appclient.xml");
  assertEquals(bytesToHexString(originalAppClientHash),bytesToHexString(hashFile(rolledBackAppClientXmlFile)));
  File rolledBackDomainXmlFile=assertFileExists(env.getInstalledImage().getDomainDir(),"configuration","domain.xml");
  assertEquals(bytesToHexString(originalDomainHash),bytesToHexString(hashFile(rolledBackDomainXmlFile)));
  assertDirDoesNotExist(env.getInstalledImage().getStandaloneDir(),"configuration","restored-configuration");
  assertDirDoesNotExist(env.getInstalledImage().getAppClientDir(),"configuration","restored-configuration");
  assertDirDoesNotExist(env.getInstalledImage().getDomainDir(),"configuration","restored-configuration");
}
