{
  validator.validate(operation);
  String name=operation.require(NAME).asString();
  String runtimeName=operation.hasDefined(RUNTIME_NAME) ? operation.get(RUNTIME_NAME).asString() : name;
  byte[] hash;
  final ModelNode content=operation.require(CONTENT).clone();
  final ModelNode contentItemNode=content.require(0);
  if (contentItemNode.hasDefined(HASH)) {
    managedContentValidator.validate(contentItemNode);
    hash=contentItemNode.require(HASH).asBytes();
    if (contentRepository != null) {
      if (!contentRepository.hasContent(hash)) {
        throw createFailureException(MESSAGES.noDeploymentContentWithHash(HashUtil.bytesToHexString(hash)));
      }
    }
 else {
      fileRepository.getDeploymentFiles(hash);
    }
  }
 else   if (hasValidContentAdditionParameterDefined(contentItemNode)) {
    if (contentRepository == null) {
      throw createFailureException(MESSAGES.slaveCannotAcceptUploads());
    }
    InputStream in=getInputStream(context,contentItemNode);
    try {
      try {
        hash=contentRepository.addContent(in);
      }
 catch (      IOException e) {
        throw createFailureException(e.toString());
      }
    }
  finally {
      StreamUtils.safeClose(in);
    }
    contentItemNode.clear();
    contentItemNode.get(HASH).set(hash);
  }
 else {
    unmanagedContentValidator.validate(contentItemNode);
  }
  final Resource root=context.readResource(PathAddress.EMPTY_ADDRESS);
  final PathElement deploymentPath=PathElement.pathElement(DEPLOYMENT,name);
  final Resource replaceNode=root.getChild(deploymentPath);
  if (replaceNode == null) {
    throw createFailureException(MESSAGES.noDeploymentContentWithName(name));
  }
  final Resource deployment=context.readResourceForUpdate(PathAddress.EMPTY_ADDRESS.append(PathElement.pathElement(DEPLOYMENT,name)));
  ModelNode deployNode=deployment.getModel();
  byte[] originalHash=deployNode.get(CONTENT).get(0).hasDefined(HASH) ? deployNode.get(CONTENT).get(0).get(HASH).asBytes() : null;
  deployNode.get(NAME).set(name);
  deployNode.get(RUNTIME_NAME).set(runtimeName);
  deployNode.get(CONTENT).set(content);
  if (root.hasChild(PathElement.pathElement(SERVER_GROUP))) {
    for (    final Resource.ResourceEntry serverGroupResource : root.getChildren(SERVER_GROUP)) {
      Resource deploymentResource=serverGroupResource.getChild(deploymentPath);
      if (deploymentResource != null) {
        deploymentResource.getModel().get(RUNTIME_NAME).set(runtimeName);
      }
    }
  }
  removeContentAdditions(replaceNode.getModel().require(CONTENT));
  if (context.completeStep() == ResultAction.KEEP) {
    if (originalHash != null && contentRepository != null) {
      if (deployNode.get(CONTENT).get(0).hasDefined(HASH)) {
        byte[] newHash=deployNode.get(CONTENT).get(0).get(HASH).asBytes();
        if (!Arrays.equals(originalHash,newHash)) {
          contentRepository.removeContent(originalHash);
        }
      }
    }
  }
 else {
    if (contentRepository != null && operation.get(CONTENT).get(0).hasDefined(HASH)) {
      byte[] newHash=operation.get(CONTENT).get(0).get(HASH).asBytes();
      contentRepository.removeContent(newHash);
    }
  }
}
