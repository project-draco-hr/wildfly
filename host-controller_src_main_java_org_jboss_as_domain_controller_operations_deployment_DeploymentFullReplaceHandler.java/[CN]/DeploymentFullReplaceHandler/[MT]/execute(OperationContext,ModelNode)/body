{
  for (  AttributeDefinition def : DeploymentAttributes.FULL_REPLACE_DEPLOYMENT_ATTRIBUTES.values()) {
    def.validateOperation(operation);
  }
  final String name=DeploymentAttributes.NAME.resolveModelAttribute(context,operation).asString();
  final PathElement deploymentPath=PathElement.pathElement(DEPLOYMENT,name);
  String runtimeName=operation.hasDefined(RUNTIME_NAME) ? DeploymentAttributes.RUNTIME_NAME.resolveModelAttribute(context,operation).asString() : name;
  ModelNode content=operation.require(CONTENT).clone();
  final ModelNode deploymentModel=context.readResourceForUpdate(PathAddress.pathAddress(deploymentPath)).getModel();
  ModelNode replacedContent=deploymentModel.get(CONTENT).get(0);
  final byte[] replacedHash=replacedContent.hasDefined(CONTENT_HASH.getName()) ? CONTENT_HASH.resolveModelAttribute(context,replacedContent).asBytes() : null;
  final byte[] newHash;
  ModelNode contentItemNode=content.require(0);
  if (contentItemNode.hasDefined(HASH)) {
    newHash=contentItemNode.require(HASH).asBytes();
    if (contentRepository != null) {
      if (!contentRepository.hasContent(newHash)) {
        throw createFailureException(MESSAGES.noDeploymentContentWithHash(HashUtil.bytesToHexString(newHash)));
      }
    }
 else {
      fileRepository.getDeploymentFiles(newHash);
    }
  }
 else   if (DeploymentHandlerUtils.hasValidContentAdditionParameterDefined(contentItemNode)) {
    if (contentRepository == null) {
      throw createFailureException(MESSAGES.slaveCannotAcceptUploads());
    }
    try {
      newHash=DeploymentUploadUtil.storeContentAndTransformOperation(context,operation,contentRepository);
    }
 catch (    IOException e) {
      throw createFailureException(e.toString());
    }
    contentItemNode=new ModelNode();
    contentItemNode.get(HASH).set(newHash);
    content=new ModelNode();
    content.add(contentItemNode);
  }
 else {
    newHash=null;
  }
  deploymentModel.get(RUNTIME_NAME).set(runtimeName);
  deploymentModel.get(CONTENT).set(content);
  final Resource root=context.readResource(PathAddress.EMPTY_ADDRESS);
  if (root.hasChild(PathElement.pathElement(SERVER_GROUP))) {
    for (    final Resource.ResourceEntry serverGroupResource : root.getChildren(SERVER_GROUP)) {
      Resource deploymentResource=serverGroupResource.getChild(deploymentPath);
      if (deploymentResource != null) {
        deploymentResource.getModel().get(RUNTIME_NAME).set(runtimeName);
      }
    }
  }
  context.completeStep(new OperationContext.ResultHandler(){
    @Override public void handleResult(    ResultAction resultAction,    OperationContext context,    ModelNode operation){
      if (resultAction == ResultAction.KEEP) {
        if (replacedHash != null && (newHash == null || !Arrays.equals(replacedHash,newHash))) {
          if (contentRepository != null) {
            contentRepository.removeContent(replacedHash,name);
          }
 else {
            fileRepository.deleteDeployment(replacedHash);
          }
        }
        if (newHash != null && contentRepository != null) {
          contentRepository.addContentReference(newHash,name);
        }
      }
 else       if (newHash != null && (replacedHash == null || !Arrays.equals(replacedHash,newHash))) {
        if (contentRepository != null) {
          contentRepository.removeContent(newHash,name);
        }
 else {
          fileRepository.deleteDeployment(newHash);
        }
      }
    }
  }
);
}
