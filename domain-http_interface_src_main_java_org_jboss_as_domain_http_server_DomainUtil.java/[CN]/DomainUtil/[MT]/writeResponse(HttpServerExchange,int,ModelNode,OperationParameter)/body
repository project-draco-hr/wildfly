{
  ModelNode localResponse=response;
  exchange.setResponseCode(status);
  final HeaderMap responseHeaders=exchange.getResponseHeaders();
  final String contentType=operationParameter.isEncode() ? Common.APPLICATION_DMR_ENCODED : Common.APPLICATION_JSON;
  responseHeaders.put(Headers.CONTENT_TYPE,contentType + ";" + Common.UTF_8);
  if (operationParameter.getMaxAge() > 0) {
    responseHeaders.put(Headers.CACHE_CONTROL,"max-age=" + operationParameter.getMaxAge() + ", private, must-revalidate");
  }
  if (operationParameter.getLastModified() != null) {
    responseHeaders.put(Headers.LAST_MODIFIED,DateUtils.toDateString(operationParameter.getLastModified()));
  }
  if (operationParameter.isGet() && status == 200) {
    localResponse=localResponse.get(RESULT);
    try {
      int length=getResponseLength(localResponse,operationParameter);
      responseHeaders.put(Headers.CONTENT_LENGTH,length);
    }
 catch (    IOException e) {
      ROOT_LOGGER.errorf(e,"Unable to get length for '%s'",operationParameter);
    }
  }
  OutputStream out=new ChannelOutputStream(exchange.getResponseChannel());
  PrintWriter print=new PrintWriter(out);
  try {
    try {
      if (operationParameter.isEncode()) {
        localResponse.writeBase64(out);
      }
 else {
        localResponse.writeJSONString(print,!operationParameter.isPretty());
      }
    }
  finally {
      print.flush();
      try {
        out.flush();
      }
  finally {
        IoUtils.safeClose(print);
        IoUtils.safeClose(out);
      }
    }
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}
