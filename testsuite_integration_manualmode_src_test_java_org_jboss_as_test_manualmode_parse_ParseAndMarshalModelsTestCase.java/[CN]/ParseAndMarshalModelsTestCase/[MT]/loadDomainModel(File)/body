{
  final ExtensionRegistry extensionRegistry=new ExtensionRegistry(ProcessType.HOST_CONTROLLER,new RunningModeControl(RunningMode.NORMAL));
  final QName rootElement=new QName(Namespace.CURRENT.getUriString(),"domain");
  final DomainXml parser=new DomainXml(Module.getBootModuleLoader(),null,extensionRegistry);
  final XmlConfigurationPersister persister=new XmlConfigurationPersister(file,rootElement,parser,parser);
  for (  Namespace namespace : Namespace.domainValues()) {
    if (namespace != Namespace.CURRENT) {
      persister.registerAdditionalRootElement(new QName(namespace.getUriString(),"domain"),parser);
    }
  }
  extensionRegistry.setWriterRegistry(persister);
  final List<ModelNode> ops=persister.load();
  final ModelNode model=new ModelNode();
  final ModelController controller=createController(ProcessType.HOST_CONTROLLER,model,new Setup(){
    public void setup(    Resource resource,    ManagementResourceRegistration rootRegistration,    DelegatingConfigurableAuthorizer authorizer){
      DomainRootDefinition def=new DomainRootDefinition(null,null,persister,new MockContentRepository(),new MockFileRepository(),true,null,extensionRegistry,null,MOCK_PATH_MANAGER,null,authorizer);
      def.initialize(rootRegistration);
    }
  }
);
  final ModelNode caputreModelOp=new ModelNode();
  caputreModelOp.get(OP_ADDR).set(PathAddress.EMPTY_ADDRESS.toModelNode());
  caputreModelOp.get(OP).set("capture-model");
  final List<ModelNode> toRun=new ArrayList<ModelNode>(ops);
  toRun.add(caputreModelOp);
  executeOperations(controller,toRun);
  persister.store(model,null).commit();
  return model;
}
