{
  final QName rootElement=new QName(Namespace.CURRENT.getUriString(),"host");
  final HostXml parser=new HostXml("host-controller");
  final XmlConfigurationPersister persister=new XmlConfigurationPersister(file,rootElement,parser,parser);
  for (  Namespace namespace : Namespace.domainValues()) {
    if (namespace != Namespace.CURRENT) {
      persister.registerAdditionalRootElement(new QName(namespace.getUriString(),"host"),parser);
    }
  }
  final List<ModelNode> ops=persister.load();
  final ModelNode model=new ModelNode();
  final ModelController controller=createController(ProcessType.HOST_CONTROLLER,model,new Setup(){
    public void setup(    Resource resource,    ManagementResourceRegistration root){
      final Resource host=Resource.Factory.create();
      resource.registerChild(PathElement.pathElement(HOST,"master"),host);
      host.registerChild(PathElement.pathElement(ModelDescriptionConstants.CORE_SERVICE,ModelDescriptionConstants.MANAGEMENT),Resource.Factory.create());
      host.registerChild(PathElement.pathElement(ModelDescriptionConstants.CORE_SERVICE,ModelDescriptionConstants.SERVICE_CONTAINER),Resource.Factory.create());
      final LocalHostControllerInfoImpl hostControllerInfo=new LocalHostControllerInfoImpl(new ControlledProcessState(false),"master");
      ManagementResourceRegistration hostRegistration=root.registerSubModel(PathElement.pathElement(HOST),HostDescriptionProviders.HOST_ROOT_PROVIDER);
      XmlMarshallingHandler xmh=new XmlMarshallingHandler(persister);
      hostRegistration.registerOperationHandler(XmlMarshallingHandler.OPERATION_NAME,xmh,xmh,false,OperationEntry.EntryType.PUBLIC);
      hostRegistration.registerOperationHandler(NamespaceAddHandler.OPERATION_NAME,NamespaceAddHandler.INSTANCE,NamespaceAddHandler.INSTANCE,false);
      hostRegistration.registerOperationHandler(SchemaLocationAddHandler.OPERATION_NAME,SchemaLocationAddHandler.INSTANCE,SchemaLocationAddHandler.INSTANCE,false);
      hostRegistration.registerReadWriteAttribute(NAME,null,new WriteAttributeHandlers.StringLengthValidatingHandler(1),AttributeAccess.Storage.CONFIGURATION);
      hostRegistration.registerReadOnlyAttribute(MASTER,IsMasterHandler.INSTANCE,AttributeAccess.Storage.RUNTIME);
      ManagementResourceRegistration sysProps=hostRegistration.registerSubModel(PathElement.pathElement(SYSTEM_PROPERTY),HostDescriptionProviders.SYSTEM_PROPERTIES_PROVIDER);
      sysProps.registerOperationHandler(SystemPropertyAddHandler.OPERATION_NAME,SystemPropertyAddHandler.INSTANCE_WITH_BOOTTIME,SystemPropertyAddHandler.INSTANCE_WITH_BOOTTIME,false);
      ManagementResourceRegistration vault=hostRegistration.registerSubModel(PathElement.pathElement(CORE_SERVICE,VAULT),CommonProviders.VAULT_PROVIDER);
      VaultAddHandler vah=new VaultAddHandler(new MockVaultReader());
      vault.registerOperationHandler(VaultAddHandler.OPERATION_NAME,vah,vah,false);
      ManagementResourceRegistration management=hostRegistration.registerSubModel(PathElement.pathElement(CORE_SERVICE,MANAGEMENT),CommonProviders.MANAGEMENT_WITH_INTERFACES_PROVIDER);
      management.registerSubModel(SecurityRealmResourceDefinition.INSTANCE);
      management.registerSubModel(LdapConnectionResourceDefinition.INSTANCE);
      management.registerSubModel(new NativeManagementResourceDefinition(hostControllerInfo));
      management.registerSubModel(new HttpManagementResourceDefinition(hostControllerInfo,null));
      LocalDomainControllerAddHandler localDcAddHandler=new MockLocalDomainControllerAddHandler();
      hostRegistration.registerOperationHandler(LocalDomainControllerAddHandler.OPERATION_NAME,localDcAddHandler,localDcAddHandler,false);
      RemoteDomainControllerAddHandler remoteDcAddHandler=new MockRemoteDomainControllerAddHandler();
      hostRegistration.registerOperationHandler(RemoteDomainControllerAddHandler.OPERATION_NAME,remoteDcAddHandler,remoteDcAddHandler,false);
      final ManagementResourceRegistration jvms=hostRegistration.registerSubModel(JvmResourceDefinition.GLOBAL);
      ManagementResourceRegistration paths=hostRegistration.registerSubModel(PathResourceDefinition.createSpecified(MOCK_PATH_MANAGER));
      ManagementResourceRegistration interfaces=hostRegistration.registerSubModel(PathElement.pathElement(INTERFACE),CommonProviders.SPECIFIED_INTERFACE_PROVIDER);
      HostSpecifiedInterfaceAddHandler hsiah=new HostSpecifiedInterfaceAddHandler();
      interfaces.registerOperationHandler(InterfaceAddHandler.OPERATION_NAME,hsiah,hsiah,false);
      InterfaceCriteriaWriteHandler.UPDATE_RUNTIME.register(interfaces);
      ManagementResourceRegistration servers=hostRegistration.registerSubModel(PathElement.pathElement(SERVER_CONFIG),HostDescriptionProviders.SERVER_PROVIDER);
      servers.registerOperationHandler(ServerAddHandler.OPERATION_NAME,ServerAddHandler.INSTANCE,ServerAddHandler.INSTANCE,false);
      servers.registerReadWriteAttribute(AUTO_START,null,new WriteAttributeHandlers.ModelTypeValidatingHandler(ModelType.BOOLEAN),AttributeAccess.Storage.CONFIGURATION);
      servers.registerReadWriteAttribute(SOCKET_BINDING_GROUP,null,WriteAttributeHandlers.WriteAttributeOperationHandler.INSTANCE,AttributeAccess.Storage.CONFIGURATION);
      servers.registerReadWriteAttribute(SOCKET_BINDING_PORT_OFFSET,null,new WriteAttributeHandlers.IntRangeValidatingHandler(0),AttributeAccess.Storage.CONFIGURATION);
      servers.registerReadWriteAttribute(PRIORITY,null,new WriteAttributeHandlers.IntRangeValidatingHandler(0),AttributeAccess.Storage.CONFIGURATION);
      servers.registerReadWriteAttribute(CPU_AFFINITY,null,new WriteAttributeHandlers.StringLengthValidatingHandler(1),AttributeAccess.Storage.CONFIGURATION);
      ManagementResourceRegistration serverPaths=servers.registerSubModel(PathResourceDefinition.createSpecifiedNoServices(MOCK_PATH_MANAGER));
      ManagementResourceRegistration serverInterfaces=servers.registerSubModel(PathElement.pathElement(INTERFACE),CommonProviders.SPECIFIED_INTERFACE_PROVIDER);
      serverInterfaces.registerOperationHandler(InterfaceAddHandler.OPERATION_NAME,SpecifiedInterfaceAddHandler.INSTANCE,SpecifiedInterfaceAddHandler.INSTANCE,false);
      InterfaceCriteriaWriteHandler.CONFIG_ONLY.register(serverInterfaces);
      ManagementResourceRegistration serverSysProps=servers.registerSubModel(PathElement.pathElement(SYSTEM_PROPERTY),HostDescriptionProviders.SERVER_SYSTEM_PROPERTIES_PROVIDER);
      serverSysProps.registerOperationHandler(SystemPropertyAddHandler.OPERATION_NAME,SystemPropertyAddHandler.INSTANCE_WITH_BOOTTIME,SystemPropertyAddHandler.INSTANCE_WITH_BOOTTIME,false);
      serverSysProps.registerReadWriteAttribute(VALUE,null,SystemPropertyValueWriteAttributeHandler.INSTANCE,AttributeAccess.Storage.CONFIGURATION);
      serverSysProps.registerReadWriteAttribute(BOOT_TIME,null,new WriteAttributeHandlers.ModelTypeValidatingHandler(ModelType.BOOLEAN),AttributeAccess.Storage.CONFIGURATION);
      final ManagementResourceRegistration serverVMs=servers.registerSubModel(JvmResourceDefinition.SERVER);
    }
  }
);
  final ModelNode caputreModelOp=new ModelNode();
  caputreModelOp.get(OP_ADDR).set(PathAddress.EMPTY_ADDRESS.toModelNode());
  caputreModelOp.get(OP).set("capture-model");
  final List<ModelNode> toRun=new ArrayList<ModelNode>(ops);
  toRun.add(caputreModelOp);
  executeOperations(controller,toRun);
  model.get(HOST,"master",NAME).set("master");
  persister.store(model.get(HOST,"master"),null).commit();
  return model;
}
