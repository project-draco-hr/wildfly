{
  final QName rootElement=new QName(Namespace.CURRENT.getUriString(),"host");
  final HostXml parser=new HostXml("host-controller");
  final XmlConfigurationPersister persister=new XmlConfigurationPersister(file,rootElement,parser,parser);
  for (  Namespace namespace : Namespace.domainValues()) {
    if (namespace != Namespace.CURRENT) {
      persister.registerAdditionalRootElement(new QName(namespace.getUriString(),"host"),parser);
    }
  }
  final List<ModelNode> ops=persister.load();
  final ModelNode model=new ModelNode();
  final ModelController controller=createController(ProcessType.HOST_CONTROLLER,model,new Setup(){
    public void setup(    Resource resource,    ManagementResourceRegistration root){
      final Resource host=Resource.Factory.create();
      resource.registerChild(PathElement.pathElement(HOST,"master"),host);
      host.registerChild(PathElement.pathElement(ModelDescriptionConstants.CORE_SERVICE,ModelDescriptionConstants.MANAGEMENT),Resource.Factory.create());
      host.registerChild(PathElement.pathElement(ModelDescriptionConstants.CORE_SERVICE,ModelDescriptionConstants.SERVICE_CONTAINER),Resource.Factory.create());
      final LocalHostControllerInfoImpl hostControllerInfo=new LocalHostControllerInfoImpl(new ControlledProcessState(false),"master");
      ManagementResourceRegistration hostRegistration=root.registerSubModel(PathElement.pathElement(HOST),new DescriptionProvider(){
        public ModelNode getModelDescription(        Locale locale){
          return new ModelNode();
        }
      }
);
      XmlMarshallingHandler xmh=new XmlMarshallingHandler(persister);
      hostRegistration.registerOperationHandler(XmlMarshallingHandler.OPERATION_NAME,xmh,xmh,false,OperationEntry.EntryType.PUBLIC);
      hostRegistration.registerOperationHandler(NamespaceAddHandler.DEFINITION,NamespaceAddHandler.INSTANCE);
      hostRegistration.registerOperationHandler(SchemaLocationAddHandler.DEFINITION,SchemaLocationAddHandler.INSTANCE);
      hostRegistration.registerReadWriteAttribute(NAME,null,new WriteAttributeHandlers.StringLengthValidatingHandler(1),AttributeAccess.Storage.CONFIGURATION);
      hostRegistration.registerReadOnlyAttribute(MASTER,IsMasterHandler.INSTANCE,AttributeAccess.Storage.RUNTIME);
      ManagementResourceRegistration sysProps=hostRegistration.registerSubModel(SystemPropertyResourceDefinition.createForDomainOrHost(Location.HOST));
      hostRegistration.registerSubModel(new VaultResourceDefinition(new MockVaultReader()));
      ManagementResourceRegistration management=hostRegistration.registerSubModel(CoreManagementDefinition.INSTANCE);
      management.registerSubModel(SecurityRealmResourceDefinition.INSTANCE);
      management.registerSubModel(LdapConnectionResourceDefinition.INSTANCE);
      management.registerSubModel(new NativeManagementResourceDefinition(hostControllerInfo));
      management.registerSubModel(new HttpManagementResourceDefinition(hostControllerInfo,null));
      LocalDomainControllerAddHandler localDcAddHandler=new MockLocalDomainControllerAddHandler();
      hostRegistration.registerOperationHandler(LocalDomainControllerAddHandler.OPERATION_NAME,localDcAddHandler,localDcAddHandler,false);
      RemoteDomainControllerAddHandler remoteDcAddHandler=new MockRemoteDomainControllerAddHandler();
      hostRegistration.registerOperationHandler(RemoteDomainControllerAddHandler.OPERATION_NAME,remoteDcAddHandler,remoteDcAddHandler,false);
      final ManagementResourceRegistration jvms=hostRegistration.registerSubModel(JvmResourceDefinition.GLOBAL);
      ManagementResourceRegistration paths=hostRegistration.registerSubModel(PathResourceDefinition.createSpecified(MOCK_PATH_MANAGER));
      ManagementResourceRegistration interfaces=hostRegistration.registerSubModel(new InterfaceDefinition(HostSpecifiedInterfaceAddHandler.INSTANCE,HostSpecifiedInterfaceRemoveHandler.INSTANCE,true));
      hostRegistration.registerSubModel(new ServerConfigResourceDefinition(null,MOCK_PATH_MANAGER));
    }
  }
);
  final ModelNode caputreModelOp=new ModelNode();
  caputreModelOp.get(OP_ADDR).set(PathAddress.EMPTY_ADDRESS.toModelNode());
  caputreModelOp.get(OP).set("capture-model");
  final List<ModelNode> toRun=new ArrayList<ModelNode>(ops);
  toRun.add(caputreModelOp);
  executeOperations(controller,toRun);
  model.get(HOST,"master",NAME).set("master");
  persister.store(model.get(HOST,"master"),null).commit();
  return model;
}
