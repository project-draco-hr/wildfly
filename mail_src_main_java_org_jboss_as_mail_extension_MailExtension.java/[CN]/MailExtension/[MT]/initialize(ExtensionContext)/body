{
  final SubsystemRegistration subsystem=context.registerSubsystem(SUBSYSTEM_NAME,MANAGEMENT_API_MAJOR_VERSION,MANAGEMENT_API_MINOR_VERSION,MANAGEMENT_API_MICRO_VERSION);
  final ManagementResourceRegistration subsystemRegistration=subsystem.registerSubsystemModel(MailSubsystemResource.INSTANCE);
  subsystemRegistration.registerOperationHandler(GenericSubsystemDescribeHandler.DEFINITION,GenericSubsystemDescribeHandler.INSTANCE);
  ManagementResourceRegistration session=subsystemRegistration.registerSubModel(MailSessionDefinition.INSTANCE);
  session.registerSubModel(MailServerDefinition.INSTANCE_IMAP);
  session.registerSubModel(MailServerDefinition.INSTANCE_POP3);
  session.registerSubModel(MailServerDefinition.INSTANCE_SMTP);
  session.registerSubModel(MailServerDefinition.INSTANCE_CUSTOM);
  subsystem.registerXMLElementWriter(parser);
  TransformersSubRegistration sessionTransformers=subsystem.registerModelTransformers(ModelVersion.create(1,1,0),null).registerSubResource(MAIL_SESSION_PATH);
  TransformersSubRegistration serverTransformers=sessionTransformers.registerSubResource(SMTP_SERVER_PATH,new ResourceTransformer(){
    @Override public void transformResource(    ResourceTransformationContext context,    PathAddress address,    Resource resource) throws OperationFailedException {
      ModelNode serverModel=resource.getModel();
      if (serverModel.has(TLS)) {
        serverModel.remove(TLS);
      }
    }
  }
);
  serverTransformers.registerOperationTransformer(ADD,new AbstractOperationTransformer(){
    @Override protected ModelNode transform(    TransformationContext context,    PathAddress address,    ModelNode operation){
      if (operation.has(TLS)) {
        operation.remove(TLS);
      }
      return operation;
    }
  }
);
  sessionTransformers.registerSubResource(CUSTOM_SERVER_PATH,true);
}
