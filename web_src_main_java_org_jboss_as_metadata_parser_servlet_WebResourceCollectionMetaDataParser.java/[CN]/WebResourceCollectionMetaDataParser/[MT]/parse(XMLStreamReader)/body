{
  WebResourceCollectionMetaData webResourceCollection=new WebResourceCollectionMetaData();
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    final String value=reader.getAttributeValue(i);
    if (reader.getAttributeNamespace(i) != null) {
      continue;
    }
    final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case ID:
{
        webResourceCollection.setId(value);
        break;
      }
default :
    throw unexpectedAttribute(reader,i);
}
}
DescriptionsImpl descriptions=new DescriptionsImpl();
while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
if (DescriptionsMetaDataParser.parse(reader,descriptions)) {
  if (webResourceCollection.getDescriptions() == null) {
    webResourceCollection.setDescriptions(descriptions);
  }
  continue;
}
final Element element=Element.forName(reader.getLocalName());
switch (element) {
case WEB_RESOURCE_NAME:
  webResourceCollection.setWebResourceName(reader.getElementText());
break;
case URL_PATTERN:
List<String> urlPatterns=webResourceCollection.getUrlPatterns();
if (urlPatterns == null) {
urlPatterns=new ArrayList<String>();
webResourceCollection.setUrlPatterns(urlPatterns);
}
urlPatterns.add(reader.getElementText());
break;
case HTTP_METHOD:
List<String> httpMethods=webResourceCollection.getHttpMethods();
if (httpMethods == null) {
httpMethods=new ArrayList<String>();
webResourceCollection.setHttpMethods(httpMethods);
}
httpMethods.add(reader.getElementText());
break;
case HTTP_METHOD_OMISSION:
List<String> httpMethodOmissions=webResourceCollection.getHttpMethodOmissions();
if (httpMethodOmissions == null) {
httpMethodOmissions=new ArrayList<String>();
webResourceCollection.setHttpMethodOmissions(httpMethodOmissions);
}
httpMethodOmissions.add(reader.getElementText());
break;
default :
throw unexpectedElement(reader);
}
}
return webResourceCollection;
}
