{
  final PathAddress extension=PathAddress.pathAddress(PathElement.pathElement(EXTENSION,VersionedExtensionCommon.EXTENSION_NAME));
  final PathAddress address=PathAddress.pathAddress(PathElement.pathElement(PROFILE,"default"),PathElement.pathElement(SUBSYSTEM,VersionedExtensionCommon.SUBSYSTEM_NAME));
  final PathAddress ignored=PathAddress.pathAddress(PathElement.pathElement(PROFILE,"ignored"),PathElement.pathElement(SUBSYSTEM,VersionedExtensionCommon.SUBSYSTEM_NAME));
  final ModelNode serverAddress=getRunningServerAddress("slave","main-three");
  serverAddress.add(SUBSYSTEM,VersionedExtensionCommon.SUBSYSTEM_NAME);
  final DomainClient client=master.getDomainClient();
  final ModelNode extensionAdd=createAdd(extension);
  executeForResult(extensionAdd,client);
  final ModelNode subsystemAdd=createAdd(address);
  executeForResult(subsystemAdd,client);
  final ModelNode mExt=create(READ_RESOURCE_OPERATION,extension.append(PathElement.pathElement(SUBSYSTEM,VersionedExtensionCommon.SUBSYSTEM_NAME)));
  assertVersion(executeForResult(mExt,client),ModelVersion.create(2));
  final ModelNode newIgnored=createAdd(ignored);
  executeForResult(newIgnored,client);
  Assert.assertTrue(exists(ignored,client));
  final PathAddress newElement=address.append(PathElement.pathElement("new-element","new1"));
  final ModelNode addNew=createAdd(newElement);
  executeForResult(addNew,client);
  Assert.assertTrue(exists(newElement,client));
  final ModelNode newElementOnSlave=serverAddress.clone();
  newElementOnSlave.add("new-element","new1");
  Assert.assertFalse(exists(newElementOnSlave,client));
  final PathElement otherNewElementPath=PathElement.pathElement("other-new-element","new1");
  final ModelNode addOtherNew=createAdd(address.append(otherNewElementPath));
  executeForFailure(addOtherNew,client);
  final ModelNode addOtherNewIgnored=createAdd(ignored.append(otherNewElementPath));
  executeForResult(addOtherNewIgnored,client);
  final PathAddress renamedAddress=address.append(PathElement.pathElement("renamed","element"));
  final ModelNode renamedAdd=createAdd(renamedAddress);
  executeForResult(renamedAdd,client);
  Assert.assertTrue(exists(renamedAddress,client));
  final ModelNode renamedElementOnSlave=serverAddress.clone();
  renamedElementOnSlave.add("renamed","element");
  Assert.assertFalse(exists(renamedElementOnSlave,client));
  final ModelNode elementRenamedOnSlave=serverAddress.clone();
  elementRenamedOnSlave.add("element","renamed");
  Assert.assertTrue(exists(elementRenamedOnSlave,client));
  final ModelNode update=new ModelNode();
  update.get(OP).set("update");
  update.get(OP_ADDR).set(address.toModelNode());
  final ModelNode updateResult=client.execute(update);
  Assert.assertEquals(updateResult.toString(),updateResult.get(OUTCOME).asString(),SUCCESS);
  Assert.assertEquals("test",updateResult.get(RESULT,"test-attribute").asString());
  Assert.assertEquals("test",updateResult.get(SERVER_GROUPS,"main-server-group",HOST,"slave","main-three","response",RESULT,"test-attribute").asString());
  final ModelNode write=new ModelNode();
  write.get(OP).set(WRITE_ATTRIBUTE_OPERATION);
  write.get(OP_ADDR).set(address.toModelNode());
  write.get(NAME).set("test-attribute");
  write.get(VALUE).set("test123");
  final ModelNode composite=new ModelNode();
  composite.get(OP).set(COMPOSITE);
  composite.get(OP_ADDR).setEmptyList();
  final ModelNode steps=composite.get(STEPS);
  final ModelNode test=new ModelNode();
  test.get(OP).set("test");
  test.get(OP_ADDR).set(serverAddress);
  steps.add(write);
  steps.add(test);
  final ModelNode compositeResult=client.execute(composite);
  Assert.assertEquals(false,compositeResult.get(SERVER_GROUPS,"main-server-group",HOST,"slave","main-three","response",RESULT,"step-2",RESULT).asBoolean());
  testPropertiesModel();
}
