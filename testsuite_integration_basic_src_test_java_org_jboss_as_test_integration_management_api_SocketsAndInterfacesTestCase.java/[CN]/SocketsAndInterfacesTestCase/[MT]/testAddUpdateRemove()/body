{
  if (testNic == null) {
    logger.error("Could not look up non-default interface");
    return;
  }
  ModelNode op=createOpNode("interface=test-interface",ADD);
  op.get("nic").set(testNic.getName());
  ModelNode result=executeOperation(op);
  op=createOpNode("socket-binding-group=standard-sockets/socket-binding=test-binding",ADD);
  op.get("interface").set("test-interface");
  op.get("port").set(TEST_PORT);
  result=executeOperation(op);
  op=createOpNode("subsystem=web/connector=test",ADD);
  op.get("socket-binding").set("test-binding");
  op.get("protocol").set("HTTP/1.1");
  op.get("scheme").set("http");
  result=executeOperation(op);
  String testHost=testNic.getInetAddresses().nextElement().getHostName();
  Assert.assertTrue("Could not connect to created connector.",WebUtil.testHttpURL(new URL("http",testHost,TEST_PORT,"/").toString()));
  op=createOpNode("socket-binding-group=standard-sockets/socket-binding=test-binding",WRITE_ATTRIBUTE_OPERATION);
  op.get(NAME).set("port");
  op.get(VALUE).set(TEST_PORT + 1);
  result=executeOperation(op,false);
  Assert.assertEquals(SUCCESS,result.get(OUTCOME).asString());
  Assert.assertTrue(result.get(RESPONSE_HEADERS).get(PROCESS_STATE).asString().equals("reload-required"));
  logger.info("Restarting server.");
  op=createOpNode(null,"reload");
  result=executeOperation(op);
  final String testUrl=new URL("http",testHost,TEST_PORT + 1,"/").toString();
  RetryTaskExecutor<Boolean> rte=new RetryTaskExecutor<Boolean>();
  rte.retryTask(new Callable<Boolean>(){
    public Boolean call() throws Exception {
      boolean available=WebUtil.testHttpURL(testUrl);
      if (!available)       throw new Exception("Connector not available.");
      return available;
    }
  }
);
  logger.info("Server is up.");
  Assert.assertFalse("Could not connect to created connector.",WebUtil.testHttpURL(new URL("http",testHost,TEST_PORT,"/").toString()));
  op=createOpNode("interface=test-interface",REMOVE);
  result=executeOperation(op,false);
  Assert.assertFalse("Removed interface with socket binding bound to it.",SUCCESS.equals(result.get(OUTCOME).asString()));
  op=createOpNode("socket-binding-group=standard-sockets/socket-binding=test-binding",REMOVE);
  result=executeOperation(op,false);
  Assert.assertFalse("Removed socked binding with connector still using it.",SUCCESS.equals(result.get(OUTCOME).asString()));
  op=createOpNode("subsystem=web/connector=test",REMOVE);
  result=executeOperation(op);
  Assert.assertFalse("Could not connect to created connector.",WebUtil.testHttpURL(new URL("http",testHost,TEST_PORT,"/").toString()));
  op=createOpNode("socket-binding-group=standard-sockets/socket-binding=test-binding",REMOVE);
  result=executeOperation(op);
  op=createOpNode("interface=test-interface",REMOVE);
  result=executeOperation(op);
}
