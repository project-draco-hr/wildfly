{
  final String name=getName();
  final String className=getClassName();
  final String paramType=getDeclaredValueClassName();
  final Module module=deploymentUnit.getAttachment(MODULE);
  final ModuleClassLoader classLoader=module.getClassLoader();
  final DeploymentReflectionIndex reflectionIndex=deploymentUnit.getAttachment(REFLECTION_INDEX);
  final ClassReflectionIndex<?> classIndex;
  try {
    classIndex=reflectionIndex.getClassIndex(Class.forName(className,false,classLoader));
  }
 catch (  ClassNotFoundException e) {
    throw new DeploymentUnitProcessingException(e);
  }
  Collection<Method> methods=null;
  if (paramType != null) {
    methods=ClassReflectionIndexUtil.findMethods(reflectionIndex,classIndex,name,paramType);
  }
  if (methods == null || methods.isEmpty()) {
    methods=ClassReflectionIndexUtil.findAllMethods(reflectionIndex,classIndex,name,1);
  }
  Iterator<Method> iterator=methods.iterator();
  if (!iterator.hasNext()) {
    throw MESSAGES.methodNotFound(name,paramType,className);
  }
  Method method=iterator.next();
  if (iterator.hasNext()) {
    throw MESSAGES.multipleMethodsFound(name,paramType,className);
  }
  if (!appClient && Modifier.isStatic(method.getModifiers())) {
    throw MESSAGES.staticMethodInjectionNotAcceptable(method);
  }
  return new ManagedReferenceMethodInjectionInterceptorFactory(targetContextKey,valueContextKey,factoryValue,method,optional);
}
