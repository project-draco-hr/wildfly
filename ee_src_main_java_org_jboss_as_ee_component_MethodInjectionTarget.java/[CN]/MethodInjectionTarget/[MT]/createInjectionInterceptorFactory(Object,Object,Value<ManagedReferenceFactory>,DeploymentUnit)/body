{
  final String name=getName();
  final String className=getClassName();
  final String declaredValueClassName=getDeclaredValueClassName();
  final Module module=deploymentUnit.getAttachment(MODULE);
  final ModuleClassLoader classLoader=module.getClassLoader();
  final DeploymentReflectionIndex reflectionIndex=deploymentUnit.getAttachment(REFLECTION_INDEX);
  final ClassReflectionIndex<?> classIndex;
  try {
    classIndex=reflectionIndex.getClassIndex(Class.forName(className,false,classLoader));
  }
 catch (  ClassNotFoundException e) {
    throw new DeploymentUnitProcessingException(e);
  }
  Collection<Method> methods;
  if (declaredValueClassName != null) {
    methods=classIndex.getMethods(name,declaredValueClassName);
  }
 else {
    methods=classIndex.getAllMethods(name,1);
  }
  Iterator<Method> iterator=methods.iterator();
  if (!iterator.hasNext()) {
    throw new DeploymentUnitProcessingException("No matching method found for '" + className + "'");
  }
  Method method=iterator.next();
  if (iterator.hasNext()) {
    throw new DeploymentUnitProcessingException("Multiple matching methods found for '" + className + "'");
  }
  return new ManagedReferenceMethodInjectionInterceptorFactory(targetContextKey,valueContextKey,factoryValue,method);
}
