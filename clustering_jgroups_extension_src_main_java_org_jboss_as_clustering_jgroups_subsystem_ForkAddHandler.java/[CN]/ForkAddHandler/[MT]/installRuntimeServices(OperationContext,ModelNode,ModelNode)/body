{
  PathAddress address=Operations.getPathAddress(operation);
  String name=address.getElement(address.size() - 1).getValue();
  String channel=address.getElement(address.size() - 2).getValue();
  ServiceTarget target=context.getServiceTarget();
  ForkChannelFactoryBuilder builder=new ForkChannelFactoryBuilder(channel);
  if (model.hasDefined(ProtocolResourceDefinition.WILDCARD_PATH.getKey())) {
    for (    Property property : model.get(ProtocolResourceDefinition.WILDCARD_PATH.getKey()).asPropertyList()) {
      String protocolName=property.getName();
      ModelNode protocol=property.getValue();
      ProtocolConfigurationBuilder protocolBuilder=builder.addProtocol(protocolName).setModule(ModelNodes.asModuleIdentifier(ProtocolResourceDefinition.MODULE.resolveModelAttribute(context,protocol))).setSocketBinding(ModelNodes.asString(ProtocolResourceDefinition.SOCKET_BINDING.resolveModelAttribute(context,protocol)));
      StackAddHandler.addProtocolProperties(context,protocol,protocolBuilder).build(target).install();
    }
  }
  builder.build(target).install();
  new AliasServiceBuilder<>(ChannelServiceName.FACTORY.getServiceName(name),ProtocolStackServiceName.CHANNEL_FACTORY.getServiceName(channel),ChannelFactory.class).build(target).install();
  new ChannelBuilder(name).build(target).install();
  new ChannelConnectorBuilder(name).build(target).install();
  new BinderServiceBuilder<>(JGroupsBindingFactory.createChannelBinding(name),ChannelServiceName.CHANNEL.getServiceName(name),Channel.class).build(target).install();
  for (  GroupBuilderProvider provider : ServiceLoader.load(ClusteredGroupBuilderProvider.class,ClusteredGroupBuilderProvider.class.getClassLoader())) {
    Iterator<Builder<?>> groupBuilders=provider.getBuilders(channel,null).iterator();
    for (    Builder<?> groupBuilder : provider.getBuilders(name,null)) {
      new AliasServiceBuilder<>(groupBuilder.getServiceName(),groupBuilders.next().getServiceName(),Object.class).build(target).install();
    }
  }
}
