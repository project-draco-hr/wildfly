{
  final PathAddress address=PathAddress.pathAddress(operation.get(OP_ADDR));
  final String childType=CHILD_TYPE.resolveModelAttribute(context,operation).asString();
  final ModelNode readOp=new ModelNode();
  readOp.get(OP).set(READ_RESOURCE_OPERATION);
  INCLUDE_RUNTIME.validateAndSet(operation,readOp);
  RECURSIVE.validateAndSet(operation,readOp);
  RECURSIVE_DEPTH.validateAndSet(operation,readOp);
  PROXIES.validateAndSet(operation,readOp);
  INCLUDE_DEFAULTS.validateAndSet(operation,readOp);
  final Map<PathElement,ModelNode> resources=new HashMap<PathElement,ModelNode>();
  final Resource resource=context.readResource(PathAddress.EMPTY_ADDRESS,false);
  final ImmutableManagementResourceRegistration registry=context.getResourceRegistration();
  Map<String,Set<String>> childAddresses=GlobalOperationHandlers.getChildAddresses(context,address,registry,resource,childType);
  Set<String> childNames=childAddresses.get(childType);
  if (childNames == null) {
    throw new OperationFailedException(new ModelNode().set(ControllerLogger.ROOT_LOGGER.unknownChildType(childType)));
  }
  FilteredData filteredData=new FilteredData(address);
  final ReadChildrenResourcesAssemblyHandler assemblyHandler=new ReadChildrenResourcesAssemblyHandler(resources,filteredData,address,childType);
  context.addStep(assemblyHandler,OperationContext.Stage.MODEL,true);
  for (  final String key : childNames) {
    final PathElement childPath=PathElement.pathElement(childType,key);
    final PathAddress childAddress=PathAddress.EMPTY_ADDRESS.append(PathElement.pathElement(childType,key));
    final ModelNode readResOp=readOp.clone();
    readResOp.get(OP_ADDR).set(PathAddress.pathAddress(address,childPath).toModelNode());
    OperationStepHandler overrideHandler=context.getResourceRegistration().getOperationHandler(childAddress,READ_RESOURCE_OPERATION);
    if (overrideHandler == null) {
      throw new OperationFailedException(new ModelNode().set(ControllerLogger.ROOT_LOGGER.noOperationHandler()));
    }
 else     if (overrideHandler.getClass() == ReadResourceHandler.class) {
      overrideHandler=null;
    }
    OperationStepHandler rrHandler=new ReadResourceHandler(filteredData,overrideHandler);
    final ModelNode rrRsp=new ModelNode();
    resources.put(childPath,rrRsp);
    context.addStep(rrRsp,readResOp,rrHandler,OperationContext.Stage.MODEL,true);
  }
  context.stepCompleted();
}
