{
  ApplicationException applicationException=this.applicationExceptions.get(exceptionClass);
  if (applicationException != null) {
    return applicationException;
  }
  Class<?> superClass=exceptionClass.getSuperclass();
  while (superClass != null && !(superClass.equals(Exception.class) || superClass.equals(Object.class))) {
    applicationException=this.applicationExceptions.get(superClass);
    if (applicationException != null) {
      if (applicationException.inherited()) {
        return applicationException;
      }
      return null;
    }
    superClass=superClass.getSuperclass();
  }
  if (RuntimeException.class.isAssignableFrom(exceptionClass) || Error.class.isAssignableFrom(exceptionClass))   return null;
  if (invokedMethod != null) {
    final Class<?>[] exceptionTypes=invokedMethod.getExceptionTypes();
    for (    Class<?> type : exceptionTypes) {
      if (type.isAssignableFrom(exceptionClass))       return APPLICATION_EXCEPTION;
    }
  }
  return null;
}
