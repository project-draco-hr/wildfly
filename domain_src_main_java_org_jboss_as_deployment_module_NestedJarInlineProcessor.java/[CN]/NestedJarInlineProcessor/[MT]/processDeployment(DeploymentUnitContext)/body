{
  final VirtualFile deploymentRoot=getVirtualFileAttachment(context);
  final NestedMounts mounts=new NestedMounts();
  try {
    deploymentRoot.visit(new VirtualFileVisitor(){
      public void visit(      VirtualFile virtualFile){
        if (virtualFile.getName().endsWith(".jar")) {
          try {
            MountHandle handle=new MountHandle(VFS.mountZip(virtualFile,virtualFile,TempFileProviderService.provider()));
            mounts.add(virtualFile,handle);
          }
 catch (          IOException e) {
            log.warnf("Could not mount %s in deployment %s, skipping",virtualFile.getPathNameRelativeTo(deploymentRoot),deploymentRoot.getName());
          }
        }
      }
      public VisitorAttributes getAttributes(){
        return VisitorAttributes.RECURSE_LEAVES_ONLY;
      }
    }
);
  }
 catch (  IOException e) {
    for (    NestedMounts.Entry mount : mounts) {
      mount.mount().close();
    }
    throw new DeploymentUnitProcessingException("Could not mount nested jars in deployment: " + deploymentRoot.getName(),e);
  }
  if (mounts.size() > 0) {
    context.putAttachment(NestedMounts.ATTACHMENT_KEY,mounts);
    context.getBatchServiceBuilder().addListener(new CloseListener(mounts.getClosables()));
  }
}
