{
  final ExecutorService singleThreadExecutor=Executors.newSingleThreadExecutor();
  final int NUM_THREADS=10;
  final ExecutorService nextTenInvocations=Executors.newFixedThreadPool(NUM_THREADS);
  Future<?>[] results=new Future[NUM_THREADS];
  for (int i=0; i < NUM_THREADS; i++) {
    results[i]=nextTenInvocations.submit(new LongWritesSingletonBeanInvoker(longWritesSingletonBean));
  }
  final List<Object> passed=new ArrayList<Object>();
  final List<Throwable> throwables=new ArrayList<Throwable>();
  for (int i=0; i < NUM_THREADS; i++) {
    try {
      passed.add(results[i].get(10,TimeUnit.SECONDS));
    }
 catch (    ExecutionException ee) {
      throwables.add(ee.getCause());
    }
  }
  Assert.assertEquals("Unexpected count on singleton bean after invocation on method with WRITE lock semantic: ",1,this.longWritesSingletonBean.getCount());
  for (  Throwable t : throwables) {
    assertTrue(t.toString(),t instanceof ConcurrentAccessTimeoutException);
  }
  assertEquals(1,passed.size());
  assertEquals(NUM_THREADS - 1,throwables.size());
}
