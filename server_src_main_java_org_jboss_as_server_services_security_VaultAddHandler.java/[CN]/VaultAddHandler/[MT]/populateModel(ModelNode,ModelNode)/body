{
  validator.validate(operation);
  String vaultClass=null;
  model.get(CODE).set(operation.get(CODE));
  if (operation.hasDefined(CODE)) {
    vaultClass=model.get(CODE).asString();
  }
  final Map<String,Object> vaultOptions=new HashMap<String,Object>();
  final ModelNode options=model.get(VAULT_OPTIONS);
  if (operation.hasDefined(VAULT_OPTIONS)) {
    for (    Property prop : operation.get(VAULT_OPTIONS).asPropertyList()) {
      options.get(prop.getName()).set(prop.getValue());
      vaultOptions.put(prop.getName(),prop.getValue().asString());
    }
  }
  if (vaultReader != null) {
    try {
      vaultReader.createVault(vaultClass,vaultOptions);
    }
 catch (    SecurityVaultException e) {
      throw new OperationFailedException(e,new ModelNode().set("Error initializing vault"));
    }
  }
}
