{
  final ModelNode operation=new ModelNode();
  ProtocolUtils.expectHeader(input,ModelControllerProtocol.PARAM_OPERATION);
  operation.readExternal(input);
  ProtocolUtils.expectHeader(input,ModelControllerProtocol.PARAM_INPUTSTREAMS_LENGTH);
  final int attachmentsLength=input.readInt();
  context.executeAsync(new ManagementRequestContext.AsyncTask<Void>(){
    @Override public void execute(    final ManagementRequestContext<Void> context) throws Exception {
      final ManagementResponseHeader response=ManagementResponseHeader.create(context.getRequestHeader());
      Subject useSubject=subject;
      if (subject != null) {
        PrivilegedAction<Subject> copyAction=new PrivilegedAction<Subject>(){
          @Override public Subject run(){
            final Subject subject=ModelControllerClientOperationHandler.this.subject;
            final Subject copySubject=new Subject();
            copySubject.getPrincipals().addAll(subject.getPrincipals());
            copySubject.getPrivateCredentials().addAll(subject.getPrivateCredentials());
            copySubject.getPublicCredentials().addAll(subject.getPublicCredentials());
            Collection<Principal> principals=context.getChannel().getConnection().getPrincipals();
            for (            Principal principal : principals) {
              if (principal instanceof InetAddressPrincipal) {
                copySubject.getPrincipals().add(new org.jboss.as.controller.security.InetAddressPrincipal(((InetAddressPrincipal)principal).getInetAddress()));
                break;
              }
            }
            copySubject.getPrincipals().add(new AccessMechanismPrincipal(AccessMechanism.NATIVE));
            copySubject.setReadOnly();
            return copySubject;
          }
        }
;
        useSubject=WildFlySecurityManager.isChecking() ? AccessController.doPrivileged(copyAction) : copyAction.run();
      }
      try {
        Subject.doAs(useSubject,new PrivilegedExceptionAction<Void>(){
          @Override public Void run() throws Exception {
            final CompletedCallback callback=new CompletedCallback(response,context,resultHandler);
            doExecute(operation,attachmentsLength,context,callback);
            return null;
          }
        }
);
      }
 catch (      PrivilegedActionException e) {
        throw e.getException();
      }
    }
  }
);
}
