{
  runtimeValidator.validate(operation.resolve());
  context.addStep(new AbstractDeploymentChainStep(){
    protected void execute(    DeploymentProcessorTarget processorTarget){
      javax.persistence.spi.PersistenceProviderResolverHolder.setPersistenceProviderResolver(PersistenceProviderResolverImpl.getInstance());
      final boolean appclient=context.getProcessType() == ProcessType.APPLICATION_CLIENT;
      PlatformImpl platform;
      if (appclient) {
        platform=new PlatformImpl(Classification.NONE);
      }
 else {
        platform=new PlatformImpl(Classification.INFINISPAN,Classification.INFINISPAN);
      }
      processorTarget.addDeploymentProcessor(JPAExtension.SUBSYSTEM_NAME,Phase.STRUCTURE,Phase.STRUCTURE_REGISTER_JBOSS_ALL_JPA,new JBossAllXmlParserRegisteringProcessor<>(JPAJarJBossAllParser.ROOT_ELEMENT,JpaAttachments.DEPLOYMENT_SETTINGS_KEY,new JPAJarJBossAllParser()));
      processorTarget.addDeploymentProcessor(JPAExtension.SUBSYSTEM_NAME,Phase.PARSE,Phase.PARSE_PERSISTENCE_UNIT,new PersistenceUnitParseProcessor(appclient));
      processorTarget.addDeploymentProcessor(JPAExtension.SUBSYSTEM_NAME,Phase.DEPENDENCIES,Phase.DEPENDENCIES_PERSISTENCE_ANNOTATION,new JPAAnnotationProcessor());
      processorTarget.addDeploymentProcessor(JPAExtension.SUBSYSTEM_NAME,Phase.DEPENDENCIES,Phase.DEPENDENCIES_JPA,new JPADependencyProcessor());
      processorTarget.addDeploymentProcessor(JPAExtension.SUBSYSTEM_NAME,Phase.DEPENDENCIES,Phase.DEPENDENCIES_HIBERNATE_SEARCH,new HibernateSearchProcessor());
      processorTarget.addDeploymentProcessor(JPAExtension.SUBSYSTEM_NAME,Phase.FIRST_MODULE_USE,Phase.FIRST_MODULE_USE_PERSISTENCE_CLASS_FILE_TRANSFORMER,new JPAClassFileTransformerProcessor());
      processorTarget.addDeploymentProcessor(JPAExtension.SUBSYSTEM_NAME,Phase.FIRST_MODULE_USE,Phase.FIRST_MODULE_USE_INTERCEPTORS,new JPAInterceptorProcessor());
      processorTarget.addDeploymentProcessor(JPAExtension.SUBSYSTEM_NAME,Phase.FIRST_MODULE_USE,Phase.FIRST_MODULE_USE_PERSISTENCE_PREPARE,new PersistenceBeginInstallProcessor(platform));
      processorTarget.addDeploymentProcessor(JPAExtension.SUBSYSTEM_NAME,Phase.POST_MODULE,Phase.POST_MODULE_PERSISTENCE_REF,new PersistenceRefProcessor());
      processorTarget.addDeploymentProcessor(JPAExtension.SUBSYSTEM_NAME,Phase.INSTALL,Phase.INSTALL_PERSISTENTUNIT,new PersistenceCompleteInstallProcessor(platform));
    }
  }
,OperationContext.Stage.RUNTIME);
  final ModelNode defaultDSNode=operation.require(CommonAttributes.DEFAULT_DATASOURCE);
  final String dataSourceName=defaultDSNode.resolve().asString();
  ExtendedPersistenceInheritance defaultExtendedPersistenceInheritance=ExtendedPersistenceInheritance.DEEP;
  if (operation.hasDefined(CommonAttributes.DEFAULT_EXTENDEDPERSISTENCE_INHERITANCE)) {
    final ModelNode defaultExtendedPersistenceInheritanceNode=operation.get(CommonAttributes.DEFAULT_EXTENDEDPERSISTENCE_INHERITANCE);
    defaultExtendedPersistenceInheritance=ExtendedPersistenceInheritance.valueOf(defaultExtendedPersistenceInheritanceNode.resolve().asString());
  }
  final ServiceTarget target=context.getServiceTarget();
  JPAService.addService(target,dataSourceName,defaultExtendedPersistenceInheritance);
  JPAUserTransactionListenerService.addService(target);
}
