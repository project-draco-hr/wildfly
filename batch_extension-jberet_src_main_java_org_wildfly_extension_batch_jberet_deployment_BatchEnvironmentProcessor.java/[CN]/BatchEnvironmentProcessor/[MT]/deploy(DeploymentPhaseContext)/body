{
  final DeploymentUnit deploymentUnit=phaseContext.getDeploymentUnit();
  if (deploymentUnit.hasAttachment(Attachments.MODULE)) {
    BatchLogger.LOGGER.tracef("Processing deployment '%s' for the batch environment.",deploymentUnit.getName());
    final Module module=deploymentUnit.getAttachment(Attachments.MODULE);
    final ClassLoader moduleClassLoader=module.getClassLoader();
    final ServiceTarget serviceTarget=phaseContext.getServiceTarget();
    JobRepository jobRepository=null;
    String jobRepositoryName=null;
    String jobExecutorName=null;
    Boolean restartJobsOnResume=null;
    BatchEnvironmentMetaData metaData=deploymentUnit.getAttachment(BatchDeploymentDescriptorParser_1_0.ATTACHMENT_KEY);
    if (metaData == null) {
      final DeploymentUnit parent=deploymentUnit.getParent();
      if (parent != null) {
        metaData=parent.getAttachment(BatchDeploymentDescriptorParser_1_0.ATTACHMENT_KEY);
      }
    }
    if (metaData != null) {
      jobRepository=metaData.getJobRepository();
      jobRepositoryName=metaData.getJobRepositoryName();
      jobExecutorName=metaData.getExecutorName();
      restartJobsOnResume=metaData.getRestartJobsOnResume();
    }
    final CapabilityServiceSupport support=deploymentUnit.getAttachment(Attachments.CAPABILITY_SERVICE_SUPPORT);
    final BatchEnvironmentService service=new BatchEnvironmentService(moduleClassLoader,WildFlyJobXmlResolver.of(moduleClassLoader,deploymentUnit),deploymentUnit.getName(),restartJobsOnResume);
    final ServiceBuilder<BatchEnvironment> serviceBuilder=serviceTarget.addService(BatchServiceNames.batchEnvironmentServiceName(deploymentUnit),service);
    if (jobExecutorName != null) {
      serviceBuilder.addDependency(support.getCapabilityServiceName(Capabilities.THREAD_POOL_CAPABILITY.getName(),jobExecutorName),JobExecutor.class,service.getJobExecutorInjector());
    }
    serviceBuilder.addDependency(support.getCapabilityServiceName(Capabilities.BATCH_CONFIGURATION_CAPABILITY.getName()),BatchConfiguration.class,service.getBatchConfigurationInjector());
    serviceBuilder.addDependency(TxnServices.JBOSS_TXN_TRANSACTION_MANAGER,TransactionManager.class,service.getTransactionManagerInjector());
    if (WeldDeploymentMarker.isPartOfWeldDeployment(deploymentUnit)) {
      BatchLogger.LOGGER.tracef("Adding BeanManager service dependency for deployment %s",deploymentUnit.getName());
      serviceBuilder.addDependency(BatchServiceNames.beanManagerServiceName(deploymentUnit),BeanManager.class,service.getBeanManagerInjector());
    }
    if (jobRepositoryName != null) {
      serviceBuilder.addDependency(support.getCapabilityServiceName(Capabilities.JOB_REPOSITORY_CAPABILITY.getName(),jobRepositoryName),JobRepository.class,service.getJobRepositoryInjector());
    }
 else {
      service.getJobRepositoryInjector().setValue(new ImmediateValue<>(jobRepository));
    }
    if (rcPresent) {
      serviceBuilder.addDependency(RequestController.SERVICE_NAME,RequestController.class,service.getRequestControllerInjector());
    }
    Services.addServerExecutorDependency(serviceBuilder.addDependency(SuspendController.SERVICE_NAME,SuspendController.class,service.getSuspendControllerInjector()),service.getExecutorServiceInjector(),false).install();
  }
}
