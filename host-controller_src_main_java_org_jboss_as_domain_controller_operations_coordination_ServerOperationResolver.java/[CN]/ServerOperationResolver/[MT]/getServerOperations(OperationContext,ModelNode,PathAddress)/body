{
  if (HOST_CONTROLLER_LOGGER.isTraceEnabled()) {
    HOST_CONTROLLER_LOGGER.tracef("Resolving %s",originalOperation);
  }
  ModelNode operation=context.getAttachment(OperationAttachments.SLAVE_SERVER_OPERATION);
  if (operation == null) {
    operation=originalOperation;
  }
  Set<ModelNode> dontPropagate=context.getAttachment(DONT_PROPAGATE_TO_SERVERS_ATTACHMENT);
  if (dontPropagate != null && dontPropagate.contains(operation)) {
    return Collections.emptyMap();
  }
  final ModelNode domain=Resource.Tools.readModel(context.readResourceFromRoot(PathAddress.EMPTY_ADDRESS,true));
  final ModelNode host=domain.get(HOST,localHostName);
  if (address.size() == 0) {
    return resolveDomainRootOperation(operation,domain,host);
  }
 else {
    DomainKey domainKey=DomainKey.forName(address.getElement(0).getKey());
switch (domainKey) {
case EXTENSION:
{
        Set<ServerIdentity> allServers=getAllRunningServers(host,localHostName,serverProxies);
        return Collections.singletonMap(allServers,operation);
      }
case DEPLOYMENT:
{
      return Collections.emptyMap();
    }
case PATH:
{
    return getServerPathOperations(operation,address,host,true);
  }
case SYSTEM_PROPERTY:
{
  return getServerSystemPropertyOperations(operation,address,Level.DOMAIN,domain,null,host);
}
case PROFILE:
{
return getServerProfileOperations(operation,address,domain,host);
}
case INTERFACE:
{
return getServerInterfaceOperations(operation,address,host,true);
}
case SOCKET_BINDING_GROUP:
{
return getServerSocketBindingGroupOperations(operation,address,domain,host);
}
case SERVER_GROUP:
{
return getServerGroupOperations(operation,address,domain,host);
}
case MANAGMENT_CLIENT_CONTENT:
{
return Collections.emptyMap();
}
case HOST:
{
return getServerHostOperations(operation,address,domain,host);
}
case DEPLOYMENT_OVERLAY:
{
return getDeploymentOverlayOperations(operation,host);
}
default :
throw MESSAGES.unexpectedInitialPathKey(address.getElement(0).getKey());
}
}
}
