{
  Map<Set<ServerIdentity>,ModelNode> result;
  ModelNode serverOp=null;
  if (address.size() > 1) {
    String type=address.getElement(1).getKey();
    if (PATH.equals(type) || INTERFACE.equals(type)) {
      serverOp=operation.clone();
      PathAddress serverAddress=address.subAddress(1);
      serverOp.get(OP_ADDR).set(serverAddress.toModelNode());
    }
 else     if (JVM.equals(type)) {
      final String serverName=address.getElement(0).getValue();
      if (serverProxies.containsKey(serverName)) {
        final String group=host.get(address.getLastElement().getKey(),address.getLastElement().getValue(),GROUP).asString();
        final ServerIdentity id=new ServerIdentity(localHostName,group,serverName);
        return getServerRestartRequiredOperations(Collections.singleton(id));
      }
    }
 else     if (SYSTEM_PROPERTY.equals(type) && isServerAffectingSystemPropertyOperation(operation)) {
      String propName=address.getLastElement().getValue();
      String serverName=address.getElement(0).getValue();
      ServerIdentity serverId=getServerIdentity(serverName,host);
      serverOp=getServerSystemPropertyOperation(operation,propName,serverId,Level.SERVER,domain,host);
    }
  }
 else   if (address.size() == 1) {
    if (ModelDescriptionConstants.WRITE_ATTRIBUTE_OPERATION.equals(operation.require(OP).asString())) {
      final String attr=operation.get(NAME).asString();
      if (GROUP.equals(attr) || SOCKET_BINDING_GROUP.equals(attr) || SOCKET_BINDING_PORT_OFFSET.equals(attr)) {
        final String serverName=address.getElement(0).getValue();
        final String group=host.get(address.getLastElement().getKey(),address.getLastElement().getValue(),GROUP).asString();
        final ServerIdentity id=new ServerIdentity(localHostName,group,serverName);
        result=getServerRestartRequiredOperations(Collections.singleton(id));
        return result;
      }
    }
  }
  if (serverOp == null) {
    result=Collections.emptyMap();
  }
 else {
    String serverName=address.getElement(0).getValue();
    ServerIdentity gs=getServerIdentity(serverName,host);
    Set<ServerIdentity> set=Collections.singleton(gs);
    result=Collections.singletonMap(set,serverOp);
  }
  return result;
}
