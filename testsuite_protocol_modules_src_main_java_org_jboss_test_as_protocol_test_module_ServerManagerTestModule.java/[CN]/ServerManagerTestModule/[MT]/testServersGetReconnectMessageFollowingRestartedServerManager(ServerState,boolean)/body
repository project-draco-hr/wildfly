{
  setDomainConfigDir("standard");
  TestProcessHandlerFactory processHandlerFactory=new TestProcessHandlerFactory(true,false);
  final TestProcessManager pm=TestProcessManager.create(processHandlerFactory,InetAddress.getLocalHost(),0);
  pm.pollAddedProcess(3);
  pm.pollStartedProcess(3);
  TestServerManagerProcess sm=assertGetServerManager(processHandlerFactory);
  MockServerProcess svr1=assertGetServer(processHandlerFactory,"Server:server-one");
  MockServerProcess svr2=assertGetServer(processHandlerFactory,"Server:server-two");
  sendMessageToServerManager(ServerManagerProtocolCommand.SERVER_AVAILABLE,svr1,svr2);
  Assert.assertEquals("server-one",assertReadStartCommand(svr1).getServerName());
  Assert.assertEquals("server-two",assertReadStartCommand(svr2).getServerName());
  Assert.assertTrue(managerAlive(svr1.getSmAddress(),svr1.getSmPort()));
  sendMessageToServerManager(ServerManagerProtocolCommand.SERVER_STARTED,svr1,svr2);
  sm.stop();
  final TestServerManagerProcess proc=sm;
  new Thread(new Runnable(){
    @Override public void run(){
      proc.crashServerManager(1);
    }
  }
).start();
  String newSmAddrAndPort=pm.waitForReconnectServers();
  Assert.assertEquals(newSmAddrAndPort,svr1.waitForReconnectServer());
  Assert.assertEquals(newSmAddrAndPort,svr2.waitForReconnectServer());
  int newSmPort=parsePort(newSmAddrAndPort);
  sm=assertGetServerManager(processHandlerFactory);
  svr1.reconnnectToServerManagerAndSendReconnectStatus(InetAddress.getLocalHost(),newSmPort,ServerState.STARTED);
  svr2.reconnnectToServerManagerAndSendReconnectStatus(InetAddress.getLocalHost(),newSmPort,state);
  Map<String,Server> servers=checkServerManagerServers(sm,5000,new ServerManagerCheck("Server:server-one",ServerState.STARTED));
  Server two=servers.get("Server:server-two");
  Assert.assertNotNull(two);
  if (!receiveConfig) {
    try {
      svr2.awaitAndReadMessage(500);
      Assert.fail("Should not have received a command");
    }
 catch (    RuntimeException expected) {
    }
    checkServerManagerServers(sm,5000,new ServerManagerCheck("Server:server-two",state));
  }
 else {
    Assert.assertEquals("server-two",assertReadStartCommand(svr2).getServerName());
  }
  shutdownProcessManagerNoWait(pm);
}
