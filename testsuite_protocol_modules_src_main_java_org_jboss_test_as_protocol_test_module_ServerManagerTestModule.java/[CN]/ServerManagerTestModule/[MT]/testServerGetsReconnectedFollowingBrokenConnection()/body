{
  setDomainConfigDir("standard");
  TestProcessHandlerFactory processHandlerFactory=new TestProcessHandlerFactory(true,false);
  final TestProcessManager pm=TestProcessManager.create(processHandlerFactory,InetAddress.getLocalHost(),0);
  pm.pollAddedProcess(3);
  pm.pollStartedProcess(3);
  TestServerManagerProcess sm=assertGetServerManager(processHandlerFactory);
  MockServerProcess svr1=assertGetServer(processHandlerFactory,"Server:server-one");
  MockServerProcess svr2=assertGetServer(processHandlerFactory,"Server:server-two");
  sendMessageToServerManager(ServerToServerManagerProtocolCommand.SERVER_AVAILABLE,svr1,svr2);
  Assert.assertEquals("server-one",assertReadStartCommand(svr1).getServerName());
  Assert.assertEquals("server-two",assertReadStartCommand(svr2).getServerName());
  managerAlive(svr1.getSmAddress(),svr1.getSmPort());
  managerAlive(svr1.getPmAddress(),svr1.getPmPort());
  sendMessageToServerManager(ServerToServerManagerProtocolCommand.SERVER_STARTED,svr1,svr2);
  svr2.closeServerManagerConnection();
  int newSmPort=parsePort("Server:server-two",pm.waitForReconnectServers());
  Assert.assertEquals(newSmPort,parsePort(svr2.waitForReconnectServer()));
  Assert.assertSame(sm,assertGetServerManager(processHandlerFactory));
  svr2.reconnnectToServerManagerAndSendReconnectStatus(InetAddress.getLocalHost(),newSmPort,ServerState.AVAILABLE);
  Assert.assertEquals("server-two",assertReadStartCommand(svr2).getServerName());
  try {
    svr2.awaitAndReadMessage(500);
    Assert.fail("Should not have any messages for server one");
  }
 catch (  Exception expected) {
  }
  shutdownProcessManagerAndWait(pm);
}
