{
  Logger log=Logger.getLogger(this.getClass().getName() + "." + manager.getMetaData().getName());
  JDBCCommandFactory factory=manager.getCommandFactory();
  Class homeClass=manager.getComponent().getHomeClass();
  Class localHomeClass=manager.getComponent().getLocalHomeClass();
  JDBCEntityBridge entity=(JDBCEntityBridge)manager.getEntityBridge();
  if (homeClass != null) {
    try {
      Method method=homeClass.getMethod(FIND_BY_PK,new Class[]{entity.getPrimaryKeyClass()});
      JDBCQueryMetaData findByPKMD=manager.getMetaData().getQueryMetaDataForMethod(method);
      JDBCReadAheadMetaData readAhead=(findByPKMD == null ? entity.getMetaData().getReadAhead() : findByPKMD.getReadAhead());
      JDBCQueryMetaData q=new JDBCAutomaticQueryMetaData(method,readAhead,entity.getMetaData().getQlCompiler(),false);
      knownQueries.put(method,factory.createFindByPrimaryKeyQuery(q));
      if (log.isDebugEnabled())       log.debug("Added findByPrimaryKey query command for home interface");
    }
 catch (    NoSuchMethodException e) {
      throw new RuntimeException("Home interface does not have a findByPrimaryKey method");
    }
  }
  if (localHomeClass != null) {
    Method method;
    try {
      method=localHomeClass.getMethod(FIND_BY_PK,new Class[]{entity.getPrimaryKeyClass()});
    }
 catch (    NoSuchMethodException e) {
      throw new RuntimeException("Local home interface does " + "not have the method findByPrimaryKey(" + entity.getPrimaryKeyClass().getName() + ")");
    }
    JDBCQueryMetaData findByPKMD=manager.getMetaData().getQueryMetaDataForMethod(method);
    JDBCReadAheadMetaData readAhead=(findByPKMD == null ? entity.getMetaData().getReadAhead() : findByPKMD.getReadAhead());
    JDBCQueryMetaData q=new JDBCAutomaticQueryMetaData(method,readAhead,entity.getMetaData().getQlCompiler(),false);
    knownQueries.put(method,factory.createFindByPrimaryKeyQuery(q));
    if (log.isDebugEnabled())     log.debug("Added findByPrimaryKey query command for local home interface");
  }
  Class ejbClass=manager.getMetaData().getEntityClass();
  Method[] customMethods=ejbClass.getMethods();
  for (int i=0; i < customMethods.length; i++) {
    Method m=customMethods[i];
    String methodName=m.getName();
    if (methodName.startsWith(EJB_FIND)) {
      String interfaceName='f' + methodName.substring(4);
      if (homeClass != null) {
        try {
          Method interfaceMethod=homeClass.getMethod(interfaceName,m.getParameterTypes());
          knownQueries.put(interfaceMethod,new JDBCCustomFinderQuery(manager,m));
          if (log.isDebugEnabled())           log.debug("Added custom finder " + methodName + " on home interface");
        }
 catch (        NoSuchMethodException e) {
        }
      }
      if (localHomeClass != null) {
        try {
          Method interfaceMethod=localHomeClass.getMethod(interfaceName,m.getParameterTypes());
          knownQueries.put(interfaceMethod,new JDBCCustomFinderQuery(manager,m));
          if (log.isDebugEnabled())           log.debug("Added custom finder " + methodName + " on local home interface");
        }
 catch (        NoSuchMethodException e) {
        }
      }
    }
  }
  Iterator definedFinders=manager.getMetaData().getQueries().iterator();
  while (definedFinders.hasNext()) {
    JDBCQueryMetaData q=(JDBCQueryMetaData)definedFinders.next();
    if (!knownQueries.containsKey(q.getMethod())) {
      if (q instanceof JDBCJBossQLQueryMetaData) {
        knownQueries.put(q.getMethod(),factory.createJBossQLQuery(q));
      }
 else       if (q instanceof JDBCDynamicQLQueryMetaData) {
        knownQueries.put(q.getMethod(),factory.createDynamicQLQuery(q));
      }
 else       if (q instanceof JDBCDeclaredQueryMetaData) {
        knownQueries.put(q.getMethod(),factory.createDeclaredSQLQuery(q));
      }
 else       if (q instanceof JDBCQlQueryMetaData) {
        knownQueries.put(q.getMethod(),factory.createEJBQLQuery(q));
      }
    }
  }
  if (homeClass != null) {
    addAutomaticFinders(manager,homeClass.getMethods(),log);
  }
  if (localHomeClass != null) {
    addAutomaticFinders(manager,localHomeClass.getMethods(),log);
  }
}
