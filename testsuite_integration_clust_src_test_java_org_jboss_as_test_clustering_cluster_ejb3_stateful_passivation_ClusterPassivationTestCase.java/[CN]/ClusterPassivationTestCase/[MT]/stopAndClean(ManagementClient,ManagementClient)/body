{
  log.info("Stop&Clean...");
  if (previousSelector != null) {
    EJBClientContext.setSelector(previousSelector);
  }
  if (client1.isServerInRunningState()) {
    unsetPassivationAttributes(client1.getControllerClient());
  }
  try {
    deployer.undeploy(DEPLOYMENT_1);
  }
 catch (  Exception e) {
    log.warnf("Deployment %s can't be undeployed from container %s because of exception %s. " + "Ignore this warning when server was already stopped by other test before.",DEPLOYMENT_1,CONTAINER_1,e.getClass().getName() + ": " + e.getMessage());
  }
 finally {
    try {
      controller.stop(CONTAINER_1);
    }
 catch (    Exception e) {
      log.warnf("Container %s can't be stopped because of exception %s. " + "Ignore this warning when server was already stopped by other test before.",CONTAINER_1,e.getClass().getName() + ": " + e.getMessage());
    }
  }
  if (client2.isServerInRunningState()) {
    unsetPassivationAttributes(client2.getControllerClient());
  }
  try {
    deployer.undeploy(DEPLOYMENT_2);
  }
 catch (  Exception e) {
    log.warnf("Deployment %s can't be undeployed from container %s because of exception %s. " + "Ignore this warning when server was already stopped by other test before.",DEPLOYMENT_2,CONTAINER_2,e.getClass().getName() + ": " + e.getMessage());
  }
 finally {
    try {
      controller.stop(CONTAINER_2);
    }
 catch (    Exception e) {
      log.warnf("Container %s can't be stopped because of exception %s. " + "Ignore this warning when server was already stopped by other test before.",CONTAINER_2,e.getClass().getName() + ": " + e.getMessage());
    }
  }
}
