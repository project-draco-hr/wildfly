{
  setupEJBClientContextSelector();
  final StatefulBeanRemote statefulBeanRemote=context.lookupStateful(StatefulBean.class,StatefulBeanRemote.class);
  log.info("Passivated (" + (isPassivation ? "TRUE" : "FALSE") + ") by on start: "+ statefulBeanRemote.getPassivatedBy());
  int clientNumber=40;
  String calledNodeFirst=statefulBeanRemote.setNumber(clientNumber);
  statefulBeanRemote.setPassivationNode(calledNodeFirst);
  statefulBeanRemote.incrementNumber();
  Assert.assertEquals(++clientNumber,statefulBeanRemote.getNumber());
  Assert.assertEquals("Nested bean has to be called on the same node as parent one",calledNodeFirst,statefulBeanRemote.getRemoteNestedBeanNodeName());
  log.info("Called node name first: " + calledNodeFirst);
  Thread.sleep(WAIT_FOR_PASSIVATION_MS);
  EJBClientContext.requireCurrent().getClusterContext(CLUSTER_NAME).removeClusterNode(calledNodeFirst);
  if (isPassivation) {
    Assert.assertEquals("Supposing to get passivation node which was set",calledNodeFirst,statefulBeanRemote.getPassivatedBy());
    Assert.assertTrue("Passivation of nested bean was not propagated",statefulBeanRemote.getNestedBeanPassivatedCalled() > 0);
    Assert.assertTrue("Activation of nested bean was not propagated",statefulBeanRemote.getNestedBeanActivatedCalled() > 0);
    Assert.assertTrue("Passivation of deep nested bean was not propagated",statefulBeanRemote.getDeepNestedBeanPassivatedCalled() > 0);
    Assert.assertTrue("Activation of deep nested bean was not propagated",statefulBeanRemote.getDeepNestedBeanActivatedCalled() > 0);
    Assert.assertTrue("Passivation of remote bean was not propagated",statefulBeanRemote.getRemoteNestedBeanPassivatedCalled() > 0);
    Assert.assertTrue("Activation of remote bean was not propagated",statefulBeanRemote.getRemoteNestedBeanActivatedCalled() > 0);
    statefulBeanRemote.resetNestedBean();
  }
 else {
    Assert.assertEquals("We suppose that the passivation is not provided","unknown",statefulBeanRemote.getPassivatedBy());
    Assert.assertEquals("No passivation should be done",0,statefulBeanRemote.getNestedBeanPassivatedCalled());
    Assert.assertEquals("No passivation should be done",0,statefulBeanRemote.getNestedBeanActivatedCalled());
    Assert.assertEquals("No passivation should be done",0,statefulBeanRemote.getDeepNestedBeanPassivatedCalled());
    Assert.assertEquals("No passivation should be done",0,statefulBeanRemote.getDeepNestedBeanActivatedCalled());
    Assert.assertEquals("No passivation should be done",0,statefulBeanRemote.getRemoteNestedBeanPassivatedCalled());
    Assert.assertEquals("No passivation should be done",0,statefulBeanRemote.getRemoteNestedBeanActivatedCalled());
  }
  String calledNodeSecond=statefulBeanRemote.incrementNumber();
  Assert.assertEquals("Nested bean has to be called on the same node as parent one",calledNodeSecond,statefulBeanRemote.getNestedBeanNodeName());
  statefulBeanRemote.setPassivationNode(calledNodeSecond);
  log.info("Called node name second: " + calledNodeSecond);
  Thread.sleep(WAIT_FOR_PASSIVATION_MS);
  setupEJBClientContextSelector();
  waitForClusterContext();
  controller.stop(node2container.get(calledNodeSecond));
  Assert.assertEquals(++clientNumber,statefulBeanRemote.getNumber());
  String calledNode=statefulBeanRemote.incrementNumber();
  Assert.assertEquals("It can't be node " + calledNodeSecond + " because is switched off",calledNodeFirst,calledNode);
  if (isPassivation) {
    Assert.assertEquals("Supposing to get passivation node which was set",calledNodeSecond,statefulBeanRemote.getPassivatedBy());
    Assert.assertTrue("Passivation of nested bean was not propagated",statefulBeanRemote.getNestedBeanPassivatedCalled() > 0);
    Assert.assertTrue("Activation of nested bean was not propagated",statefulBeanRemote.getNestedBeanActivatedCalled() > 0);
    Assert.assertTrue("Passivation of deep nested bean was not propagated",statefulBeanRemote.getDeepNestedBeanPassivatedCalled() > 0);
    Assert.assertTrue("Activation of deep nested bean was not propagated",statefulBeanRemote.getDeepNestedBeanActivatedCalled() > 0);
    Assert.assertTrue("Passivation of remote bean was not propagated",statefulBeanRemote.getRemoteNestedBeanPassivatedCalled() > 0);
    Assert.assertTrue("Activation of remote bean was not propagated",statefulBeanRemote.getRemoteNestedBeanActivatedCalled() > 0);
    statefulBeanRemote.resetNestedBean();
  }
 else {
    Assert.assertEquals("We suppose that the passivation is not provided.","unknown",statefulBeanRemote.getPassivatedBy());
    Assert.assertEquals("No passivation should be done",0,statefulBeanRemote.getNestedBeanPassivatedCalled());
    Assert.assertEquals("No passivation should be done",0,statefulBeanRemote.getNestedBeanActivatedCalled());
    Assert.assertEquals("No passivation should be done",0,statefulBeanRemote.getDeepNestedBeanPassivatedCalled());
    Assert.assertEquals("No passivation should be done",0,statefulBeanRemote.getDeepNestedBeanActivatedCalled());
    Assert.assertEquals("No passivation should be done",0,statefulBeanRemote.getRemoteNestedBeanPassivatedCalled());
    Assert.assertEquals("No passivation should be done",0,statefulBeanRemote.getRemoteNestedBeanActivatedCalled());
  }
  Thread.sleep(WAIT_FOR_PASSIVATION_MS);
  Assert.assertEquals(++clientNumber,statefulBeanRemote.getNumber());
}
