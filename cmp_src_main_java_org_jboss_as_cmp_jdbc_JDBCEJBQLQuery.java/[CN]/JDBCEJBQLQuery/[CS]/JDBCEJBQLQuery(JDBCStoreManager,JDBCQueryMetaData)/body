{
  super(manager,q);
  JDBCQlQueryMetaData metadata=(JDBCQlQueryMetaData)q;
  if (getLog().isDebugEnabled()) {
    getLog().debug("EJB-QL: " + metadata.getEjbQl());
  }
  QLCompiler compiler=JDBCQueryManager.getInstance(metadata.getQLCompilerClass(),manager.getCatalog());
  try {
    compiler.compileEJBQL(metadata.getEjbQl(),metadata.getMethod().getReturnType(),metadata.getMethod().getParameterTypes(),metadata);
  }
 catch (  Throwable t) {
    throw CmpMessages.MESSAGES.errorCompilingEjbQl(manager.getComponent().getComponentName(),metadata.getEjbQl(),t);
  }
  setSQL(compiler.getSQL());
  if (compiler.isSelectEntity()) {
    JDBCEntityBridge selectEntity=(JDBCEntityBridge)compiler.getSelectEntity();
    setSelectEntity(selectEntity);
    JDBCReadAheadMetaData readahead=metadata.getReadAhead();
    if (readahead.isOnFind()) {
      setEagerLoadGroup(readahead.getEagerLoadGroup());
      setOnFindCMRList(compiler.getLeftJoinCMRList());
      if (compiler.isSelectDistinct()) {
        boolean[] mask=getEagerLoadMask();
        JDBCFieldBridge[] tableFields=selectEntity.getTableFields();
        for (int i=0; i < tableFields.length; ++i) {
          if (mask[i] && !tableFields[i].getJDBCType().isSearchable()) {
            mask[i]=false;
          }
        }
      }
    }
  }
 else   if (compiler.isSelectField()) {
    setSelectField((JDBCCMPFieldBridge)compiler.getSelectField());
  }
 else {
    setSelectFunction(compiler.getSelectFunction(),manager);
  }
  setParameterList(compiler.getInputParameters());
}
