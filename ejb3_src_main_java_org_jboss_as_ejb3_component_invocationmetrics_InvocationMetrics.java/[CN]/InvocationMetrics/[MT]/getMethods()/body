{
  return new AbstractMap<String,Values>(){
    @Override public Set<Entry<String,Values>> entrySet(){
      return new AbstractSet<Entry<String,Values>>(){
        @Override public Iterator<Entry<String,Values>> iterator(){
          final Iterator<Entry<String,AtomicReference<Values>>> delegate=methods.entrySet().iterator();
          return new Iterator<Entry<String,Values>>(){
            @Override public boolean hasNext(){
              return delegate.hasNext();
            }
            @Override public Entry<String,Values> next(){
              final Entry<String,AtomicReference<Values>> next=delegate.next();
              return new Entry<String,Values>(){
                @Override public String getKey(){
                  return next.getKey();
                }
                @Override public Values getValue(){
                  return next.getValue().get();
                }
                @Override public Values setValue(                final Values value){
                  throw new UnsupportedOperationException("NYI");
                }
              }
;
            }
            @Override public void remove(){
              throw new UnsupportedOperationException("NYI");
            }
          }
;
        }
        @Override public int size(){
          return methods.size();
        }
      }
;
    }
  }
;
}
