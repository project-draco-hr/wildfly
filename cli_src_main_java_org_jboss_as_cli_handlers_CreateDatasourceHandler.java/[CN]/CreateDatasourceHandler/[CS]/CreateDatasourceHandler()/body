{
  super("create-datasource",true);
  profile=new ArgumentWithValue(this,new DefaultCompleter(new CandidatesProvider(){
    @Override public List<String> getAllCandidates(    CommandContext ctx){
      return Util.getNodeNames(ctx.getModelControllerClient(),null,"profile");
    }
  }
),"--profile"){
    @Override public boolean canAppearNext(    CommandContext ctx) throws CommandFormatException {
      if (!ctx.isDomainMode()) {
        return false;
      }
      return super.canAppearNext(ctx);
    }
  }
;
  RequestParamArg driverName=new RequiredRequestParamArg("driver-name",this,new DefaultCompleter(new CandidatesProvider(){
    @Override public List<String> getAllCandidates(    CommandContext ctx){
      final String profileName;
      if (ctx.isDomainMode()) {
        profileName=profile.getValue(ctx.getParsedArguments());
        if (profileName == null) {
          return Collections.emptyList();
        }
      }
 else {
        profileName=null;
      }
      OperationRequestAddress datasources=new DefaultOperationRequestAddress();
      if (profileName != null) {
        datasources.toNode("profile",profileName);
      }
      datasources.toNode("subsystem","datasources");
      return Util.getNodeNames(ctx.getModelControllerClient(),datasources,"jdbc-driver");
    }
  }
)){
    @Override public boolean canAppearNext(    CommandContext ctx) throws CommandFormatException {
      if (ctx.isDomainMode() && !profile.isPresent(ctx.getParsedArguments())) {
        return false;
      }
      return super.canAppearNext(ctx);
    }
  }
;
  RequestParamArg connectionUrl=new RequiredRequestParamArg("connection-url",this,"--connection-url");
  connectionUrl.addRequiredPreceding(driverName);
  RequestParamArg username=new RequiredRequestParamArg("user-name",this,"--username");
  username.addRequiredPreceding(connectionUrl);
  RequestParamArg password=new RequiredRequestParamArg("password",this,"--password");
  password.addRequiredPreceding(username);
  RequestParamArg poolName=new RequiredRequestParamArg("pool-name",this,"--pool-name");
  poolName.addRequiredPreceding(password);
  jndiName=new RequiredRequestParamArg("jndi-name",this,"--jndi-name");
  jndiName.addRequiredPreceding(poolName);
  CommandArgument lastRequired=jndiName;
  RequestParamArg connectionProperties=new RequestParamPropertiesArg("connection-properties",this);
  connectionProperties.addRequiredPreceding(lastRequired);
  RequestParamArg useJavaContext=new RequestParamArg("use-java-context",this,SimpleTabCompleter.BOOLEAN_COMPLETER);
  useJavaContext.addRequiredPreceding(lastRequired);
  RequestParamArg maxPoolSize=new RequestParamArg("max-pool-size",this);
  maxPoolSize.addRequiredPreceding(lastRequired);
  RequestParamArg minPoolSize=new RequestParamArg("min-pool-size",this);
  minPoolSize.addRequiredPreceding(lastRequired);
  RequestParamArg disabled=new RequestParamArg("enabled",this,"--disabled"){
    @Override public boolean isValueRequired(){
      return false;
    }
    @Override public void set(    ParsedArguments args,    ModelNode request) throws CommandFormatException {
      if (isPresent(args)) {
        setValue(request,"enabled","false");
      }
    }
  }
;
  disabled.addRequiredPreceding(lastRequired);
  RequestParamArg newConnectionSql=new RequestParamArg("new-connection-sql",this);
  newConnectionSql.addRequiredPreceding(lastRequired);
  RequestParamArg urlDelimiter=new RequestParamArg("url-delimiter",this);
  urlDelimiter.addRequiredPreceding(lastRequired);
  RequestParamArg urlSelectorStrategyClass=new RequestParamArg("url-selector-strategy-class",this,"--url-selector-strategy-class-name");
  urlSelectorStrategyClass.addRequiredPreceding(lastRequired);
  RequestParamArg poolPrefill=new RequestParamArg("pool-prefill",this,SimpleTabCompleter.BOOLEAN_COMPLETER);
  poolPrefill.addRequiredPreceding(lastRequired);
  RequestParamArg poolUseStrictMin=new RequestParamArg("pool-use-strict-min",this,SimpleTabCompleter.BOOLEAN_COMPLETER);
  poolUseStrictMin.addRequiredPreceding(lastRequired);
  RequestParamArg flushStrategy=new RequestParamArg("flush-strategy",this,new SimpleTabCompleter(new String[]{"FAILING_CONNECTION_ONLY","IDLE_CONNECTIONS","ENTIRE_POOL"}));
  flushStrategy.addRequiredPreceding(lastRequired);
  RequestParamArg securityDomain=new RequestParamArg("security-domain",this);
  securityDomain.addRequiredPreceding(lastRequired);
  RequestParamArg reauthPluginClass=new RequestParamArg("reauth-plugin-class-name",this);
  reauthPluginClass.addRequiredPreceding(lastRequired);
  RequestParamArg reauthPluginProps=new RequestParamPropertiesArg("reauth-plugin-properties",this);
  reauthPluginProps.addRequiredPreceding(reauthPluginClass);
  RequestParamArg psCacheSize=new RequestParamArg("prepared-statements-cacheSize",this,"--prepared-statements-cache-size");
  psCacheSize.addRequiredPreceding(lastRequired);
  RequestParamArg trackStatements=new RequestParamArg("track-statements",this,new SimpleTabCompleter(new String[]{"FALSE","NOWARN","TRUE"}));
  trackStatements.addRequiredPreceding(lastRequired);
  RequestParamArg allocationRetry=new RequestParamArg("allocation-retry",this);
  allocationRetry.addRequiredPreceding(lastRequired);
  RequestParamArg allocationRetryWait=new RequestParamArg("allocation-retry-wait-millis",this);
  allocationRetryWait.addRequiredPreceding(lastRequired);
  RequestParamArg blockingTimeoutWait=new RequestParamArg("blocking-timeout-wait-millis",this);
  blockingTimeoutWait.addRequiredPreceding(lastRequired);
  RequestParamArg idleTimeout=new RequestParamArg("idle-timeout-minutes",this);
  idleTimeout.addRequiredPreceding(lastRequired);
  RequestParamArg queryTimeout=new RequestParamArg("query-timeout",this);
  queryTimeout.addRequiredPreceding(lastRequired);
  RequestParamArg xaResourceTimeout=new RequestParamArg("xa-resource-timeout",this);
  xaResourceTimeout.addRequiredPreceding(lastRequired);
  RequestParamArg useTryLock=new RequestParamArg("use-try-lock",this);
  useTryLock.addRequiredPreceding(lastRequired);
  RequestParamArg setTxQueryTimeout=new RequestParamArg("set-tx-query-timeout",this);
  setTxQueryTimeout.addRequiredPreceding(lastRequired);
  RequestParamArg txIsolation=new RequestParamArg("transaction-isolation",this,new SimpleTabCompleter(new String[]{"TRANSACTION_READ_UNCOMMITTED","TRANSACTION_READ_COMMITTED","TRANSACTION_REPEATABLE_READ","TRANSACTION_SERIALIZABLE","TRANSACTION_NONE"}));
  txIsolation.addRequiredPreceding(lastRequired);
  RequestParamArg checkValidConnectionSql=new RequestParamArg("check-valid-connection-sql",this);
  checkValidConnectionSql.addRequiredPreceding(lastRequired);
  RequestParamArg exceptionSorterClass=new RequestParamArg("exception-sorter-class-name",this,"--exception-sorter-class");
  exceptionSorterClass.addRequiredPreceding(lastRequired);
  RequestParamArg exceptionSorterProps=new RequestParamPropertiesArg("exceptionsorter-properties",this,"--exception-sorter-properties");
  exceptionSorterProps.addRequiredPreceding(exceptionSorterClass);
  RequestParamArg staleConnectionCheckerClass=new RequestParamArg("stale-connection-checker-class-name",this,"--stale-connection-checker-class");
  staleConnectionCheckerClass.addRequiredPreceding(lastRequired);
  RequestParamArg staleConnectionCheckerProps=new RequestParamPropertiesArg("staleconnectionchecker-properties",this,"--stale-connection-checker-properties");
  staleConnectionCheckerProps.addRequiredPreceding(staleConnectionCheckerClass);
  RequestParamArg validConnectionCheckerClass=new RequestParamArg("valid-connection-checker-class-name",this,"--valid-connection-checker-class");
  validConnectionCheckerClass.addRequiredPreceding(lastRequired);
  RequestParamArg validConnectionCheckerProps=new RequestParamPropertiesArg("validconnectionchecker-properties",this,"--valid-connection-checker-properties");
  validConnectionCheckerProps.addRequiredPreceding(validConnectionCheckerClass);
  RequestParamArg backgroundValidation=new RequestParamArg("background-validation",this,SimpleTabCompleter.BOOLEAN_COMPLETER);
  backgroundValidation.addRequiredPreceding(lastRequired);
  RequestParamArg backgroundValidationMins=new RequestParamArg("background-validation-minutes",this);
  backgroundValidationMins.addRequiredPreceding(lastRequired);
  RequestParamArg useFastFail=new RequestParamArg("use-fast-fail",this,SimpleTabCompleter.BOOLEAN_COMPLETER);
  useFastFail.addRequiredPreceding(lastRequired);
  RequestParamArg validateOnMatch=new RequestParamArg("validate-on-match",this,SimpleTabCompleter.BOOLEAN_COMPLETER);
  validateOnMatch.addRequiredPreceding(lastRequired);
  RequestParamArg spy=new RequestParamArg("spy",this,SimpleTabCompleter.BOOLEAN_COMPLETER);
  spy.addRequiredPreceding(lastRequired);
  RequestParamArg useCCM=new RequestParamArg("use-ccm",this,SimpleTabCompleter.BOOLEAN_COMPLETER);
  useCCM.addRequiredPreceding(lastRequired);
}
