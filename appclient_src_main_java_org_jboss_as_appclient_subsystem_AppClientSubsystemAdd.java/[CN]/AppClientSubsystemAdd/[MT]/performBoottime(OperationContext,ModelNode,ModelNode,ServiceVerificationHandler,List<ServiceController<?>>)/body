{
  final String deployment=model.get(Constants.DEPLOYMENT).asString();
  final File file=new File(model.get(Constants.FILE).asString());
  final String additionalClassPath=model.get(Constants.FILE).asString();
  final String hostUrl=model.get(Constants.HOST_URL).asString();
  final List<String> parameters=new ArrayList<String>();
  for (  ModelNode param : model.get(Constants.PARAMETERS).asList()) {
    parameters.add(param.asString());
  }
  context.addStep(new AbstractDeploymentChainStep(){
    protected void execute(    DeploymentProcessorTarget processorTarget){
      if (deployment != null && !deployment.isEmpty()) {
        processorTarget.addDeploymentProcessor(Phase.STRUCTURE,Phase.STRUCTURE_APP_CLIENT,new ApplicationClientStructureProcessor(deployment));
      }
      processorTarget.addDeploymentProcessor(Phase.PARSE,Phase.PARSE_APP_CLIENT_XML,new ApplicationClientParsingDeploymentProcessor());
      processorTarget.addDeploymentProcessor(Phase.POST_MODULE,Phase.POST_MODULE_APPLICATION_CLIENT_MANIFEST,new ApplicationClientManifestProcessor());
      processorTarget.addDeploymentProcessor(Phase.POST_MODULE,Phase.POST_MODULE_APPLICATION_CLIENT_ACTIVE,new ActiveApplicationClientProcessor(deployment));
      processorTarget.addDeploymentProcessor(Phase.INSTALL,Phase.INSTALL_APPLICATION_CLIENT,new ApplicationClientStartProcessor(hostUrl,parameters.toArray(EMPTY_STRING)));
      if (additionalClassPath != null && !additionalClassPath.isEmpty()) {
        processorTarget.addDeploymentProcessor(Phase.DEPENDENCIES,Phase.DEPENDENCIES_APPLICATION_CLIENT,new ApplicationClientDependencyProcessor(additionalClassPath));
      }
    }
  }
,OperationContext.Stage.RUNTIME);
  final ApplicationClientDeploymentService service=new ApplicationClientDeploymentService(file);
  newControllers.add(context.getServiceTarget().addService(ApplicationClientDeploymentService.SERVICE_NAME,service).addDependency(Services.JBOSS_SERVER_CONTROLLER,ModelController.class,service.getControllerValue()).install());
}
