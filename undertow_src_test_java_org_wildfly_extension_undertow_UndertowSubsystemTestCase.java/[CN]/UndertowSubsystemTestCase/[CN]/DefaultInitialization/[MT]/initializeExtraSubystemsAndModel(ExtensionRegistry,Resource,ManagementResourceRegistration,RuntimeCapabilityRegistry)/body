{
  super.initializeExtraSubystemsAndModel(extensionRegistry,rootResource,rootRegistration,capabilityRegistry);
  Map<String,Class> capabilities=new HashMap<>();
  capabilities.put(buildDynamicCapabilityName(ListenerResourceDefinition.IO_WORKER_CAPABILITY,ListenerResourceDefinition.WORKER.getDefaultValue().asString()),XnioWorker.class);
  capabilities.put(buildDynamicCapabilityName(ListenerResourceDefinition.IO_WORKER_CAPABILITY,"non-default"),XnioWorker.class);
  capabilities.put(buildDynamicCapabilityName(ListenerResourceDefinition.IO_BUFFER_POOL_CAPABILITY,ListenerResourceDefinition.BUFFER_POOL.getDefaultValue().asString()),Pool.class);
  for (  String entry : sockets.keySet()) {
    capabilities.put(buildDynamicCapabilityName(ListenerResourceDefinition.SOCKET_CAPABILITY,entry),SocketBinding.class);
  }
  capabilities.put(buildDynamicCapabilityName("org.wildfly.security.http-authentication-factory","elytron-factory"),HttpAuthenticationFactory.class);
  capabilities.put(buildDynamicCapabilityName("org.wildfly.security.ssl-context","TestContext"),SSLContext.class);
  registerServiceCapabilities(capabilityRegistry,capabilities);
}
