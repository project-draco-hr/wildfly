{
  boolean passivation=isPassivationEnabled();
  boolean persistence=isPersistenceEnabled();
  for (  Session session : this.sessions.values()) {
    ClusteredSession<O> ses=cast(session);
    log.tracef("clearSessions(): clear session by expiring or passivating: %s",ses);
    try {
      if (passivation && ses.isValid()) {
        processSessionPassivation(ses.getRealId());
      }
 else       if (!persistence) {
        boolean notify=true;
        boolean localCall=true;
        boolean localOnly=true;
        ses.expire(notify,localCall,localOnly,ClusteredSessionNotificationCause.UNDEPLOY,null);
      }
    }
 catch (    Throwable t) {
      UndertowLogger.WEB_SESSION_LOGGER.errorPassivatingSession(ses.getIdInternal(),t);
    }
  }
  Set<Entry<String,OwnedSessionUpdate>> unloaded=unloadedSessions.entrySet();
  for (Iterator<Entry<String,OwnedSessionUpdate>> it=unloaded.iterator(); it.hasNext(); ) {
    Entry<String,OwnedSessionUpdate> entry=it.next();
    String realId=entry.getKey();
    try {
      if (passivation) {
        OwnedSessionUpdate osu=entry.getValue();
        if (!osu.isPassivated()) {
          this.distributedCacheManager.evictSession(realId,osu.getOwner());
        }
      }
 else {
        this.distributedCacheManager.removeSessionLocal(realId);
      }
    }
 catch (    Exception e) {
      log.debugf("Problem %s session %s -- %s",passivation ? "evicting" : "removing",realId,e);
    }
    it.remove();
  }
}
