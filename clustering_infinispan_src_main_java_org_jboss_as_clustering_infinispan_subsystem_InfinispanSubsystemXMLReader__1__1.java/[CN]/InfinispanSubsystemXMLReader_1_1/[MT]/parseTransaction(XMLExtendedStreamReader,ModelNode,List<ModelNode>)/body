{
  ModelNode transactionAddress=cache.get(ModelDescriptionConstants.OP_ADDR).clone();
  transactionAddress.add(ModelKeys.TRANSACTION,ModelKeys.TRANSACTION_NAME);
  transactionAddress.protect();
  ModelNode transaction=Util.getEmptyOperation(ModelDescriptionConstants.ADD,transactionAddress);
  for (int i=0; i < reader.getAttributeCount(); i++) {
    String value=reader.getAttributeValue(i);
    Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case STOP_TIMEOUT:
{
        CommonAttributes.STOP_TIMEOUT.parseAndSetParameter(value,transaction,reader);
        break;
      }
case MODE:
{
      try {
        TransactionMode txnMode=TransactionMode.valueOf(value);
        CommonAttributes.MODE.parseAndSetParameter(txnMode.name(),transaction,reader);
      }
 catch (      IllegalArgumentException e) {
        throw ParseUtils.invalidAttributeValue(reader,i);
      }
      break;
    }
case LOCKING:
{
    try {
      LockingMode lockingMode=LockingMode.valueOf(value);
      CommonAttributes.LOCKING.parseAndSetParameter(lockingMode.name(),transaction,reader);
    }
 catch (    IllegalArgumentException e) {
      throw ParseUtils.invalidAttributeValue(reader,i);
    }
    break;
  }
default :
{
  throw ParseUtils.unexpectedAttribute(reader,i);
}
}
}
ParseUtils.requireNoContent(reader);
operations.add(transaction);
}
