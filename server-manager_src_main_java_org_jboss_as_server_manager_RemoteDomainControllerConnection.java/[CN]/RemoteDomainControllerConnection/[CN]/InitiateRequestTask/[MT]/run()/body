{
  final int requestId=this.requestId++;
  Socket socket=null;
  try {
    socket=new Socket();
    int timeout=(int)TimeUnit.SECONDS.toMillis(connectTimeout);
    socket.connect(new InetSocketAddress(dcAddress,dcPort),timeout);
    socket.setSoTimeout(timeout);
    SimpleDataInput input=new SimpleDataInput(Marshalling.createByteInput(socket.getInputStream()));
    SimpleDataOutput output=new SimpleDataOutput(Marshalling.createByteOutput(socket.getOutputStream()));
    final ManagementRequestProtocolHeader managementRequestHeader=new ManagementRequestProtocolHeader(ManagementProtocol.VERSION,requestId,(byte)ManagementProtocol.DOMAIN_CONTROLLER_REQUEST);
    managementRequestHeader.write(output);
    output.flush();
    final ManagementResponseProtocolHeader responseHeader=new ManagementResponseProtocolHeader(input);
    if (requestId != responseHeader.getResponseId()) {
      safeClose(socket);
      return;
    }
    Future<T> resultFuture=executorService.submit(new ExecuteTask<T>(operation,responseHeader.getVersion(),socket,input,output));
    initiatingFuture.set(resultFuture);
  }
 catch (  Throwable e) {
    safeClose(socket);
    if (requestId < connectionRetryLimit) {
      executorService.schedule(this,connectionRetryInterval,TimeUnit.SECONDS);
    }
 else {
      initiatingFuture.setException(new Exception("Failed to initiate request to remote domain controller",e));
    }
  }
}
