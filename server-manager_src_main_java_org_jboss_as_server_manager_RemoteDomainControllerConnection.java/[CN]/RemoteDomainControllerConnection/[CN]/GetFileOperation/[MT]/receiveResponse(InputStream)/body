{
  final File localPath;
switch (rootId) {
case 0:
{
      localPath=localFileRepository.getFile(filePath);
      break;
    }
case 1:
{
    localPath=localFileRepository.getConfigurationFile(filePath);
    break;
  }
case 2:
{
  byte[] hash=DeploymentUnitElement.hexStringToBytes(filePath);
  localPath=localFileRepository.getDeploymentRoot(hash);
  break;
}
default :
{
localPath=null;
}
}
ByteDataInput input=null;
try {
input=new SimpleByteDataInput(inputStream);
expectHeader(input,ManagementProtocol.PARAM_NUM_FILES);
int numFiles=input.readInt();
switch (numFiles) {
case -1:
{
break;
}
case 0:
{
if (!localPath.mkdirs()) {
throw new ManagementException("Unable to create local directory: " + localPath);
}
break;
}
default :
{
for (int i=0; i < numFiles; i++) {
expectHeader(input,ManagementProtocol.FILE_START);
expectHeader(input,ManagementProtocol.PARAM_FILE_PATH);
final String path=input.readUTF();
expectHeader(input,ManagementProtocol.PARAM_FILE_SIZE);
final long length=input.readLong();
log.debugf("Received file [%s] of length %d",path,length);
final File file=new File(localPath,path);
if (!file.getParentFile().exists() && !file.getParentFile().mkdirs()) {
throw new ManagementException("Unable to create local directory " + localPath.getParent());
}
long totalRead=0;
OutputStream fileOut=null;
try {
fileOut=new BufferedOutputStream(new FileOutputStream(file));
final byte[] buffer=new byte[8192];
int read;
while (totalRead < length && (read=input.read(buffer,0,Math.min((int)(length - totalRead),buffer.length))) != -1) {
  if (read > 0) {
    fileOut.write(buffer,0,read);
    totalRead+=read;
  }
}
}
  finally {
if (fileOut != null) {
  fileOut.close();
}
}
if (totalRead != length) {
throw new ManagementException("Did not read the entire file. Missing: " + (length - totalRead));
}
expectHeader(input,ManagementProtocol.FILE_END);
}
}
}
}
 catch (IOException e) {
throw new ManagementException("Failed to process sync file response",e);
}
 finally {
safeClose(input);
}
return localPath;
}
