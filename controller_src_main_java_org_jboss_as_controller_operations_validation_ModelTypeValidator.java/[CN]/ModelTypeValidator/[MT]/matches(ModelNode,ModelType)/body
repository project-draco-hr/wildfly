{
  try {
    if (validType == value.getType())     return true;
switch (validType) {
case BIG_DECIMAL:
{
        value.asBigDecimal();
        return true;
      }
case BIG_INTEGER:
{
      value.asBigInteger();
      return true;
    }
case DOUBLE:
{
    value.asDouble();
    return true;
  }
case INT:
{
switch (value.getType()) {
case BIG_DECIMAL:
    BigDecimal valueBigDecimal=value.asBigDecimal();
  return (valueBigDecimal.compareTo(BIGDECIMAL_MAX) <= 0) && (valueBigDecimal.compareTo(BIGDECIMAL_MIN) >= 0);
case BIG_INTEGER:
BigInteger valueBigInteger=value.asBigInteger();
return (valueBigInteger.compareTo(BIGINTEGER_MAX) <= 0) && (valueBigInteger.compareTo(BIGINTEGER_MIN) >= 0);
case LONG:
Long valueLong=value.asLong();
return valueLong <= Integer.MAX_VALUE && valueLong >= Integer.MIN_VALUE;
case DOUBLE:
Double valueDouble=value.asDouble();
return valueDouble <= Integer.MAX_VALUE && valueDouble >= Integer.MIN_VALUE;
case STRING:
value.asInt();
return true;
default :
return false;
}
}
case LONG:
{
switch (value.getType()) {
case BIG_DECIMAL:
BigDecimal valueBigDecimal=value.asBigDecimal();
return (valueBigDecimal.compareTo(BIGDECIMAL_MAX) <= 0) && (valueBigDecimal.compareTo(BIGDECIMAL_MIN) >= 0);
case BIG_INTEGER:
BigInteger valueBigInteger=value.asBigInteger();
return (valueBigInteger.compareTo(BIGINTEGER_MAX) <= 0) && (valueBigInteger.compareTo(BIGINTEGER_MIN) >= 0);
case DOUBLE:
Double valueDouble=value.asDouble();
return valueDouble <= Long.MAX_VALUE && valueDouble >= Long.MIN_VALUE;
case INT:
value.asLong();
return true;
case STRING:
value.asLong();
return true;
default :
return false;
}
}
case PROPERTY:
{
value.asProperty();
return true;
}
case BOOLEAN:
{
switch (value.getType()) {
case STRING:
{
String s=value.asString();
return "false".equalsIgnoreCase(s) || "true".equalsIgnoreCase(s);
}
case BOOLEAN:
return true;
}
return false;
}
case OBJECT:
{
switch (value.getType()) {
case PROPERTY:
case OBJECT:
return true;
case LIST:
{
for (ModelNode node : value.asList()) {
if (node.getType() != ModelType.PROPERTY) {
return false;
}
}
return true;
}
}
return false;
}
case STRING:
{
switch (value.getType()) {
case BIG_DECIMAL:
case BIG_INTEGER:
case BOOLEAN:
case DOUBLE:
case INT:
case LONG:
case STRING:
return true;
}
return false;
}
case BYTES:
case LIST:
case EXPRESSION:
case TYPE:
case UNDEFINED:
default :
return false;
}
}
 catch (RuntimeException e) {
return false;
}
}
