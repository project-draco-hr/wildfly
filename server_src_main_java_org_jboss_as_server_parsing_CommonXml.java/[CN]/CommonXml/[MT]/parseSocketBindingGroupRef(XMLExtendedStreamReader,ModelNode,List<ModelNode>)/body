{
  String name=null;
  int offset=-1;
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    final String value=reader.getAttributeValue(i);
    if (!isNoNamespaceAttribute(reader,i)) {
      throw ParseUtils.unexpectedAttribute(reader,i);
    }
 else {
      final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case REF:
{
          if (name != null)           throw ParseUtils.duplicateAttribute(reader,attribute.getLocalName());
          name=value;
          break;
        }
case PORT_OFFSET:
{
        try {
          if (offset != -1)           throw ParseUtils.duplicateAttribute(reader,attribute.getLocalName());
          offset=Integer.parseInt(value);
          if (offset < 0) {
            throw MESSAGES.invalidValueGreaterThan(attribute.getLocalName(),offset,0,reader.getLocation());
          }
        }
 catch (        final NumberFormatException e) {
          throw MESSAGES.invalid(e,offset,attribute.getLocalName(),reader.getLocation());
        }
        break;
      }
default :
    throw unexpectedAttribute(reader,i);
}
}
}
if (name == null) {
throw missingRequired(reader,Collections.singleton(Attribute.REF));
}
requireNoContent(reader);
ModelNode update=Util.getWriteAttributeOperation(address,SOCKET_BINDING_GROUP,name);
updates.add(update);
if (offset < 0) {
offset=0;
}
if (offset > 0) {
update=Util.getWriteAttributeOperation(address,SOCKET_BINDING_PORT_OFFSET,offset);
}
updates.add(update);
}
