{
  final EnumSet<Attribute> required=EnumSet.of(Attribute.NAME);
  String name=null;
  final ModelNode binding=new ModelNode();
  binding.get(OP_ADDR);
  binding.get(OP).set(ADD);
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    final String value=reader.getAttributeValue(i);
    if (!isNoNamespaceAttribute(reader,i)) {
      throw unexpectedAttribute(reader,i);
    }
 else {
      final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
      required.remove(attribute);
switch (attribute) {
case NAME:
{
          name=value;
          binding.get(OP_ADDR).set(address).add(SOCKET_BINDING,name);
          break;
        }
case INTERFACE:
{
        AbstractSocketBindingResourceDefinition.INTERFACE.parseAndSetParameter(value,binding,reader);
        if (binding.get(AbstractSocketBindingResourceDefinition.INTERFACE.getName()).getType() != ModelType.EXPRESSION && !interfaces.contains(value)) {
          throw ControllerLogger.ROOT_LOGGER.unknownInterface(value,attribute.getLocalName(),Element.INTERFACES.getLocalName(),reader.getLocation());
        }
        binding.get(INTERFACE).set(value);
        break;
      }
case PORT:
{
      AbstractSocketBindingResourceDefinition.PORT.parseAndSetParameter(value,binding,reader);
      break;
    }
case FIXED_PORT:
{
    AbstractSocketBindingResourceDefinition.FIXED_PORT.parseAndSetParameter(value,binding,reader);
    break;
  }
case MULTICAST_ADDRESS:
{
  AbstractSocketBindingResourceDefinition.MULTICAST_ADDRESS.parseAndSetParameter(value,binding,reader);
  break;
}
case MULTICAST_PORT:
{
AbstractSocketBindingResourceDefinition.MULTICAST_PORT.parseAndSetParameter(value,binding,reader);
break;
}
default :
throw unexpectedAttribute(reader,i);
}
}
}
if (!required.isEmpty()) {
throw missingRequired(reader,required);
}
while (reader.nextTag() != END_ELEMENT) {
final Element element=Element.forName(reader.getLocalName());
switch (element) {
case CLIENT_MAPPING:
binding.get(CLIENT_MAPPINGS).add(parseClientMapping(reader));
break;
default :
throw unexpectedElement(reader);
}
}
updates.add(binding);
return name;
}
