{
  final EnumSet<Attribute> required=EnumSet.of(Attribute.NAME);
  String name=null;
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    requireNoNamespaceAttribute(reader,i);
    final String value=reader.getAttributeValue(i);
    final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
    required.remove(attribute);
switch (attribute) {
case NAME:
{
        name=value;
        break;
      }
default :
    throw unexpectedAttribute(reader,i);
}
}
if (required.size() > 0) {
throw missingRequired(reader,required);
}
ModelNode addr=baseAddress.clone();
addr.add(DEPLOYMENT_OVERLAY,name);
final ModelNode op=new ModelNode();
op.get(OP).set(ADD);
op.get(OP_ADDR).set(addr);
list.add(op);
while (reader.nextTag() != END_ELEMENT) {
final Element element=Element.forName(reader.getLocalName());
switch (element) {
case CONTENT:
  parseContentOverride(name,reader,baseAddress,list);
break;
case DEPLOYMENT:
parseDeploymentOverlayDeployment(name,reader,baseAddress,list);
break;
default :
throw unexpectedElement(reader);
}
}
}
