{
  final EnumSet<Attribute> required=EnumSet.of(Attribute.NAME);
  String outboundSocketBindingName=null;
  final ModelNode outboundSocketBindingAddOperation=new ModelNode();
  outboundSocketBindingAddOperation.get(OP).set(ADD);
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    final String value=reader.getAttributeValue(i);
    if (!isNoNamespaceAttribute(reader,i)) {
      throw unexpectedAttribute(reader,i);
    }
 else {
      final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
      required.remove(attribute);
switch (attribute) {
case NAME:
{
          outboundSocketBindingName=value;
          break;
        }
case SOURCE_INTERFACE:
{
        OutboundSocketBindingResourceDefinition.SOURCE_INTERFACE.parseAndSetParameter(value,outboundSocketBindingAddOperation,reader);
        if (!interfaces.contains(value) && outboundSocketBindingAddOperation.get(OutboundSocketBindingResourceDefinition.SOURCE_INTERFACE.getName()).getType() != ModelType.EXPRESSION) {
          throw ControllerLogger.ROOT_LOGGER.unknownValueForElement(Attribute.SOURCE_INTERFACE.getLocalName(),value,Element.INTERFACE.getLocalName(),Element.INTERFACES.getLocalName(),reader.getLocation());
        }
        break;
      }
case SOURCE_PORT:
{
      OutboundSocketBindingResourceDefinition.SOURCE_PORT.parseAndSetParameter(value,outboundSocketBindingAddOperation,reader);
      break;
    }
case FIXED_SOURCE_PORT:
{
    OutboundSocketBindingResourceDefinition.FIXED_SOURCE_PORT.parseAndSetParameter(value,outboundSocketBindingAddOperation,reader);
    break;
  }
default :
throw unexpectedAttribute(reader,i);
}
}
}
if (!required.isEmpty()) {
throw missingRequired(reader,required);
}
boolean mutuallyExclusiveElementAlreadyFound=false;
while (reader.hasNext() && reader.nextTag() != XMLStreamConstants.END_ELEMENT) {
switch (Element.forName(reader.getLocalName())) {
case LOCAL_DESTINATION:
{
if (mutuallyExclusiveElementAlreadyFound) {
throw ControllerLogger.ROOT_LOGGER.invalidOutboundSocketBinding(outboundSocketBindingName,Element.LOCAL_DESTINATION.getLocalName(),Element.REMOTE_DESTINATION.getLocalName(),reader.getLocation());
}
 else {
mutuallyExclusiveElementAlreadyFound=true;
}
this.parseLocalDestinationOutboundSocketBinding(reader,outboundSocketBindingAddOperation);
final ModelNode addr=address.clone().add(LOCAL_DESTINATION_OUTBOUND_SOCKET_BINDING,outboundSocketBindingName);
outboundSocketBindingAddOperation.get(OP_ADDR).set(addr);
break;
}
case REMOTE_DESTINATION:
{
if (mutuallyExclusiveElementAlreadyFound) {
throw ControllerLogger.ROOT_LOGGER.invalidOutboundSocketBinding(outboundSocketBindingName,Element.LOCAL_DESTINATION.getLocalName(),Element.REMOTE_DESTINATION.getLocalName(),reader.getLocation());
}
 else {
mutuallyExclusiveElementAlreadyFound=true;
}
this.parseRemoteDestinationOutboundSocketBinding(reader,outboundSocketBindingAddOperation);
final ModelNode addr=address.clone().add(REMOTE_DESTINATION_OUTBOUND_SOCKET_BINDING,outboundSocketBindingName);
outboundSocketBindingAddOperation.get(OP_ADDR).set(addr);
break;
}
default :
{
throw unexpectedElement(reader);
}
}
}
updates.add(outboundSocketBindingAddOperation);
return outboundSocketBindingName;
}
