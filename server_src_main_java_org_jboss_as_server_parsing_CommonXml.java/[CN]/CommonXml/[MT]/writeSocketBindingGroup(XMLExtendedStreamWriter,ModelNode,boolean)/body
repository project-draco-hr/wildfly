{
  writer.writeStartElement(Element.SOCKET_BINDING_GROUP.getLocalName());
  SocketBindingGroupResourceDefinition.NAME.marshallAsAttribute(bindingGroup,writer);
  SocketBindingGroupResourceDefinition.DEFAULT_INTERFACE.marshallAsAttribute(bindingGroup,writer);
  if (fromServer) {
    SocketBindingGroupResourceDefinition.PORT_OFFSET.marshallAsAttribute(bindingGroup,writer);
  }
  if (!fromServer) {
    SocketBindingGroupResourceDefinition.INCLUDES.marshallAsElement(bindingGroup,writer);
  }
  if (bindingGroup.hasDefined(SOCKET_BINDING)) {
    ModelNode bindings=bindingGroup.get(SOCKET_BINDING);
    for (    String bindingName : bindings.keys()) {
      ModelNode binding=bindings.get(bindingName);
      writer.writeStartElement(Element.SOCKET_BINDING.getLocalName());
      writeAttribute(writer,Attribute.NAME,bindingName);
      AbstractSocketBindingResourceDefinition.INTERFACE.marshallAsAttribute(binding,writer);
      AbstractSocketBindingResourceDefinition.PORT.marshallAsAttribute(binding,writer);
      AbstractSocketBindingResourceDefinition.FIXED_PORT.marshallAsAttribute(binding,writer);
      AbstractSocketBindingResourceDefinition.MULTICAST_ADDRESS.marshallAsAttribute(binding,writer);
      AbstractSocketBindingResourceDefinition.MULTICAST_PORT.marshallAsAttribute(binding,writer);
      ModelNode attr=binding.get(CLIENT_MAPPINGS);
      if (attr.isDefined()) {
        for (        ModelNode mapping : attr.asList()) {
          writer.writeEmptyElement(Element.CLIENT_MAPPING.getLocalName());
          AbstractSocketBindingResourceDefinition.CLIENT_MAPPING_SOURCE_NETWORK.marshallAsAttribute(mapping,writer);
          AbstractSocketBindingResourceDefinition.CLIENT_MAPPING_DESTINATION_ADDRESS.marshallAsAttribute(mapping,writer);
          AbstractSocketBindingResourceDefinition.CLIENT_MAPPING_DESTINATION_PORT.marshallAsAttribute(mapping,writer);
        }
      }
      writer.writeEndElement();
    }
  }
  if (bindingGroup.hasDefined(LOCAL_DESTINATION_OUTBOUND_SOCKET_BINDING)) {
    final ModelNode localDestinationOutboundSocketBindings=bindingGroup.get(LOCAL_DESTINATION_OUTBOUND_SOCKET_BINDING);
    for (    final String outboundSocketBindingName : localDestinationOutboundSocketBindings.keys()) {
      final ModelNode outboundSocketBinding=localDestinationOutboundSocketBindings.get(outboundSocketBindingName);
      writer.writeStartElement(Element.OUTBOUND_SOCKET_BINDING.getLocalName());
      writeAttribute(writer,Attribute.NAME,outboundSocketBindingName);
      OutboundSocketBindingResourceDefinition.SOURCE_INTERFACE.marshallAsAttribute(outboundSocketBinding,writer);
      OutboundSocketBindingResourceDefinition.SOURCE_PORT.marshallAsAttribute(outboundSocketBinding,writer);
      OutboundSocketBindingResourceDefinition.FIXED_SOURCE_PORT.marshallAsAttribute(outboundSocketBinding,writer);
      writer.writeEmptyElement(Element.LOCAL_DESTINATION.getLocalName());
      LocalDestinationOutboundSocketBindingResourceDefinition.SOCKET_BINDING_REF.marshallAsAttribute(outboundSocketBinding,writer);
      writer.writeEndElement();
    }
  }
  if (bindingGroup.hasDefined(REMOTE_DESTINATION_OUTBOUND_SOCKET_BINDING)) {
    final ModelNode remoteDestinationOutboundSocketBindings=bindingGroup.get(REMOTE_DESTINATION_OUTBOUND_SOCKET_BINDING);
    for (    final String outboundSocketBindingName : remoteDestinationOutboundSocketBindings.keys()) {
      final ModelNode outboundSocketBinding=remoteDestinationOutboundSocketBindings.get(outboundSocketBindingName);
      writer.writeStartElement(Element.OUTBOUND_SOCKET_BINDING.getLocalName());
      writeAttribute(writer,Attribute.NAME,outboundSocketBindingName);
      OutboundSocketBindingResourceDefinition.SOURCE_INTERFACE.marshallAsAttribute(outboundSocketBinding,writer);
      OutboundSocketBindingResourceDefinition.SOURCE_PORT.marshallAsAttribute(outboundSocketBinding,writer);
      OutboundSocketBindingResourceDefinition.FIXED_SOURCE_PORT.marshallAsAttribute(outboundSocketBinding,writer);
      writer.writeEmptyElement(Element.REMOTE_DESTINATION.getLocalName());
      RemoteDestinationOutboundSocketBindingResourceDefinition.HOST.marshallAsAttribute(outboundSocketBinding,writer);
      RemoteDestinationOutboundSocketBindingResourceDefinition.PORT.marshallAsAttribute(outboundSocketBinding,writer);
      writer.writeEndElement();
    }
  }
  writer.writeEndElement();
}
