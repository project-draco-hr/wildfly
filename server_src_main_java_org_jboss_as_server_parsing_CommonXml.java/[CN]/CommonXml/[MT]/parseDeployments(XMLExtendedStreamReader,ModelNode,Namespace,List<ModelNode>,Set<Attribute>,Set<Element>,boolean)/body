{
  requireNoAttributes(reader);
  final Set<String> names=new HashSet<String>();
  final Set<String> runtimeNames=validateUniqueRuntimeNames ? new HashSet<String>() : null;
  while (reader.nextTag() != END_ELEMENT) {
    requireNamespace(reader,expectedNs);
    Element deployment=Element.forName(reader.getLocalName());
    if (Element.DEPLOYMENT != deployment) {
      throw unexpectedElement(reader);
    }
    final ModelNode deploymentAdd=Util.getEmptyOperation(ADD,null);
    String uniqueName=null;
    String runtimeName=null;
    boolean enabled=false;
    Set<Attribute> requiredAttributes=EnumSet.of(Attribute.NAME,Attribute.RUNTIME_NAME);
    final int count=reader.getAttributeCount();
    for (int i=0; i < count; i++) {
      final String value=reader.getAttributeValue(i);
      if (!isNoNamespaceAttribute(reader,i)) {
        throw unexpectedAttribute(reader,i);
      }
 else {
        final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
        if (!allowedAttributes.contains(attribute)) {
          throw unexpectedAttribute(reader,i);
        }
        requiredAttributes.remove(attribute);
switch (attribute) {
case NAME:
{
            if (!names.add(value)) {
              throw duplicateNamedElement(reader,value);
            }
            uniqueName=value;
            break;
          }
case RUNTIME_NAME:
{
          DeploymentAttributes.RUNTIME_NAME.parseAndSetParameter(value,deploymentAdd,reader);
          runtimeName=value;
          break;
        }
case ENABLED:
{
        DeploymentAttributes.ENABLED.parseAndSetParameter(value,deploymentAdd,reader);
        enabled=deploymentAdd.get(DeploymentAttributes.ENABLED.getName()).asBoolean(false);
        break;
      }
default :
    throw unexpectedAttribute(reader,i);
}
}
}
if (requiredAttributes.size() > 0) {
throw missingRequired(reader,requiredAttributes);
}
if (validateUniqueRuntimeNames && enabled && runtimeName != null && !runtimeNames.add(runtimeName)) {
throw duplicateNamedElement(reader,runtimeName);
}
final ModelNode deploymentAddress=address.clone().add(DEPLOYMENT,uniqueName);
deploymentAdd.get(OP_ADDR).set(deploymentAddress);
if (allowedAttributes.contains(Attribute.ENABLED) && !deploymentAdd.hasDefined(DeploymentAttributes.ENABLED.getName())) {
deploymentAdd.get(DeploymentAttributes.ENABLED.getName()).set(true);
}
while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
requireNamespace(reader,expectedNs);
final Element element=Element.forName(reader.getLocalName());
if (!allowedElements.contains(element)) {
throw unexpectedElement(reader);
}
switch (element) {
case CONTENT:
parseContentType(reader,deploymentAdd);
break;
case FS_ARCHIVE:
parseFSBaseType(reader,deploymentAdd,true);
break;
case FS_EXPLODED:
parseFSBaseType(reader,deploymentAdd,false);
break;
default :
throw unexpectedElement(reader);
}
}
list.add(deploymentAdd);
}
}
