{
  final ModelNode mapping=new ModelNode();
  boolean hasDestinationAddress=false;
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    final String value=reader.getAttributeValue(i);
    if (!isNoNamespaceAttribute(reader,i)) {
      throw unexpectedAttribute(reader,i);
    }
    final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case SOURCE_NETWORK:
      AbstractSocketBindingResourceDefinition.CLIENT_MAPPING_SOURCE_NETWORK.parseAndSetParameter(value,mapping,reader);
    break;
case DESTINATION_ADDRESS:
  AbstractSocketBindingResourceDefinition.CLIENT_MAPPING_DESTINATION_ADDRESS.parseAndSetParameter(value,mapping,reader);
hasDestinationAddress=true;
break;
case DESTINATION_PORT:
{
AbstractSocketBindingResourceDefinition.CLIENT_MAPPING_DESTINATION_PORT.parseAndSetParameter(value,mapping,reader);
break;
}
}
}
if (!hasDestinationAddress) {
throw ControllerLogger.ROOT_LOGGER.missingRequiredAttributes(new StringBuilder(DESTINATION_ADDRESS),reader.getLocation());
}
requireNoContent(reader);
return mapping;
}
