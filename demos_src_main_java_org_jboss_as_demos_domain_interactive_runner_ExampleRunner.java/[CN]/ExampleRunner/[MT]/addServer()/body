{
  addCount++;
  stdout.println("Enter the name of the new server, or [C] to cancel:");
  String serverName=readStdIn();
  if ("C".equals(serverName.toUpperCase())) {
    return continuePrompt();
  }
  String hostController=null;
  List<String> hostControllers=client.getHostControllerNames();
  if (hostControllers.size() == 1) {
    hostController=hostControllers.get(0);
  }
 else {
    do {
      stdout.println("Choose a Host Controller for the new Server:");
      Map<String,Object> choices=writeMenuBody(hostControllers);
      stdout.println("[C]   Cancel");
      String choice=readStdIn();
      if ("C".equals(choice.toUpperCase())) {
        return continuePrompt();
      }
      Object obj=choices.get(choice);
      if (obj == null) {
        stdout.println(choice + " is not a valid selection");
      }
 else {
        hostController=obj.toString();
      }
    }
 while (hostController == null);
  }
  String serverGroup=null;
  List<String> serverGroups=getServerGroupNames();
  do {
    stdout.println("Choose a Server Group for the new Server:");
    Map<String,Object> choices=writeMenuBody(serverGroups);
    stdout.println("[C]   Cancel");
    String choice=readStdIn();
    if ("C".equals(choice.toUpperCase())) {
      return continuePrompt();
    }
    Object obj=choices.get(choice);
    if (obj == null) {
      stdout.println(choice + " is not a valid selection");
    }
 else {
      serverGroup=obj.toString();
    }
  }
 while (serverGroup == null);
  stdout.println("\nCreating new server: '" + serverName + "' on host controller '"+ hostController+ "' in server group: '"+ serverGroup);
  final ModelNode address=new ModelNode();
  address.add(HOST,hostController);
  address.add(SERVER_CONFIG,serverName);
  final ModelNode operation=new ModelNode();
  operation.get(OP).set(ADD);
  operation.get(OP_ADDR).set(address);
  operation.get(GROUP).set(serverGroup);
  operation.get(SOCKET_BINDING_GROUP).set("standard-sockets");
  operation.get(SOCKET_BINDING_PORT_OFFSET).set(addCount * 500);
  final ModelNode result=executeForResult(operation);
  return continuePrompt();
}
