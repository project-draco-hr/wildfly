{
  addCount++;
  stdout.println("Enter the name of the new server, or [C] to cancel:");
  String serverName=readStdIn();
  if ("C".equals(serverName.toUpperCase()))   return continuePrompt();
  String serverManager=null;
  List<String> serverManagers=client.getServerManagerNames();
  if (serverManagers.size() == 1) {
    serverManager=serverManagers.get(0);
  }
 else {
    do {
      stdout.println("Choose a Server Manager for the new Server:");
      Map<String,Object> choices=writeMenuBody(serverManagers);
      stdout.println("[C]   Cancel");
      String choice=readStdIn();
      if ("C".equals(choice.toUpperCase())) {
        return continuePrompt();
      }
      Object obj=choices.get(choice);
      if (obj == null) {
        stdout.println(choice + " is not a valid selection");
      }
 else {
        serverManager=obj.toString();
      }
    }
 while (serverManager == null);
  }
  String serverGroup=null;
  List<String> serverGroups=getServerGroupNames();
  do {
    stdout.println("Choose a Server Group for the new Server:");
    Map<String,Object> choices=writeMenuBody(serverGroups);
    stdout.println("[C]   Cancel");
    String choice=readStdIn();
    if ("C".equals(choice.toUpperCase())) {
      return continuePrompt();
    }
    Object obj=choices.get(choice);
    if (obj == null) {
      stdout.println(choice + " is not a valid selection");
    }
 else {
      serverGroup=obj.toString();
    }
  }
 while (serverGroup == null);
  stdout.println("\nCreating new server: " + serverName + " on server manager "+ serverManager+ " in server group: "+ serverGroup);
  List<AbstractHostModelUpdate<?>> updates=new ArrayList<AbstractHostModelUpdate<?>>(2);
  updates.add(new HostServerAdd(serverName,serverGroup));
  updates.add(HostServerUpdate.create(serverName,new ServerElementSocketBindingGroupUpdate("standard-sockets")));
  addCount++;
  updates.add(HostServerUpdate.create(serverName,new ServerElementSocketBindingPortOffsetUpdate(addCount * 1000)));
  List<HostUpdateResult<?>> results=client.applyHostUpdates(serverManager,updates);
  HostUpdateResult<?> result=results.get(0);
  System.out.println("Add success: " + result.isSuccess());
  if (result.isSuccess()) {
    System.out.println("Starting server " + serverName);
    ServerStatus status=client.startServer(serverManager,serverName);
    System.out.println("Start executed. Server status is " + status);
  }
  return continuePrompt();
}
