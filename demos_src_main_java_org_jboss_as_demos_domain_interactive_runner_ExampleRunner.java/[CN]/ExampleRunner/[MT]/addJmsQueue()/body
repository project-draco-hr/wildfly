{
  stdout.println("Enter the name for the new queue or [C] to cancel:");
  String queueName=readStdIn();
  if ("C".equals(queueName.toUpperCase()))   return continuePrompt();
  DomainDeploymentUtils utils=null;
  boolean actionsApplied=false;
  boolean deployed=false;
  try {
    utils=new DomainDeploymentUtils(client);
    utils.addDeployment("fakejndi.sar",FakeJndi.class.getPackage());
    utils.deploy();
    deployed=true;
    final JMSQueueAdd queueAdd=new JMSQueueAdd(queueName);
    queueAdd.setBindings(Collections.singleton(queueName));
    DomainSubsystemUpdate<JMSSubsystemElement,Void> domainUpdate=DomainSubsystemUpdate.create("messaging",queueAdd);
    List<AbstractDomainModelUpdate<?>> list=Collections.<AbstractDomainModelUpdate<?>>singletonList(domainUpdate);
    List<DomainUpdateResult<?>> results=client.applyUpdates(list);
    DomainUpdateResult<?> result=results.get(0);
    stdout.println(result + (result != null ? String.valueOf(result.isSuccess()) + String.valueOf(result.getServerResults().size()) : ""));
    if (result.getDomainFailure() == null && result.getHostFailures().size() == 0) {
      actionsApplied=true;
    }
    if (result.isSuccess()) {
      for (      ServerIdentity server : result.getServerResults().keySet()) {
        exerciseQueueOnServer(queueName,server);
      }
    }
 else     if (result.getDomainFailure() != null) {
      stdout.println("Queue addition failed on the domain controller");
      result.getDomainFailure().printStackTrace(stdout);
    }
 else     if (result.getHostFailures().size() > 0) {
      for (      Map.Entry<String,UpdateFailedException> entry : result.getHostFailures().entrySet()) {
        stdout.println("\nQueue addition failed on Server Manager " + entry.getKey());
        entry.getValue().printStackTrace(stdout);
      }
    }
 else     if (result.getServerFailures().size() > 0) {
      for (      Map.Entry<ServerIdentity,Throwable> entry : result.getServerFailures().entrySet()) {
        stdout.println("\nQueue addition failed on Server " + entry.getKey().getServerName());
        entry.getValue().printStackTrace(stdout);
      }
    }
 else     if (result.getServerCancellations().size() > 0) {
      for (      ServerIdentity server : result.getServerCancellations()) {
        stdout.println("\nQueue addition was cancelled on Server " + server.getServerName());
      }
    }
    return continuePrompt();
  }
  finally {
    if (deployed) {
      utils.undeploy();
    }
    if (utils != null)     utils.close();
    if (actionsApplied) {
      final JMSQueueRemove queueRemove=new JMSQueueRemove(queueName);
      DomainSubsystemUpdate<JMSSubsystemElement,Void> domainUpdate=DomainSubsystemUpdate.create("messaging",queueRemove);
      client.applyUpdates(Collections.<AbstractDomainModelUpdate<?>>singletonList(domainUpdate));
    }
  }
}
