{
  if (log.isTraceEnabled()) {
    log.tracef("The session has expired with id: %s  -- is expiration local? %s",id,localOnly);
  }
  if (expiring)   return;
synchronized (this) {
    if (!isValid)     return;
    if (manager == null)     return;
    expiring=true;
    RuntimeException listenerException=null;
    final boolean requireOwnershipLock=localCall && !localOnly;
    if (requireOwnershipLock) {
      try {
        this.acquireSessionOwnership();
      }
 catch (      TimeoutException e) {
        this.expiring=false;
        throw MESSAGES.failAcquiringOwnership(realId,e);
      }
    }
    try {
      if (ACTIVITY_CHECK) {
        accessCount.set(0);
      }
      String[] keys=keys();
      for (int i=0; i < keys.length; i++) {
        try {
          removeAttributeInternal(keys[i],localCall,localOnly,notify,cause);
        }
 catch (        RuntimeException e) {
          if (listenerException == null) {
            listenerException=e;
          }
        }
      }
      if (localCall) {
        removeFromManager(localOnly);
      }
      if (listenerException != null) {
        throw listenerException;
      }
    }
  finally {
      setValid(false);
      expiring=false;
      if (requireOwnershipLock) {
        this.relinquishSessionOwnership(true);
      }
    }
  }
}
