{
  final KernelServices kernelServices=boot();
  final File logFile=new File(LoggingTestEnvironment.get().getLogDir(),"formatter.log");
  if (logFile.exists())   logFile.delete();
  final String fileHandlerName="formatter-handler";
  final ModelNode handlerAddress=createFileHandlerAddress(fileHandlerName).toModelNode();
  ModelNode op=SubsystemOperations.createAddOperation(handlerAddress);
  op.get(CommonAttributes.LEVEL.getName()).set("INFO");
  op.get(CommonAttributes.ENCODING.getName()).set(ENCODING);
  op.get(CommonAttributes.FILE.getName()).get(PathResourceDefinition.PATH.getName()).set(logFile.getAbsolutePath());
  op.get(CommonAttributes.AUTOFLUSH.getName()).set(true);
  op.get(FileHandlerResourceDefinition.FORMATTER.getName()).set("%s%n");
  executeOperation(kernelServices,op);
  final Logger logger=LogContext.getSystemLogContext().getLogger(HandlerOperationsTestCase.class.getName());
  final ModelNode loggerAddress=createLoggerAddress(logger.getName()).toModelNode();
  op=SubsystemOperations.createAddOperation(loggerAddress);
  op.get(LoggerResourceDefinition.USE_PARENT_HANDLERS.getName()).set(false);
  op.get(CommonAttributes.HANDLERS.getName()).setEmptyList().add(fileHandlerName);
  executeOperation(kernelServices,op);
  logger.log(Level.INFO,"Test message 1");
  logger.log(Level.INFO,"Test message 2");
  List<String> lines=FileUtils.readLines(logFile,ENCODING);
  assertEquals("Number of lines logged and found in the file do not match",2,lines.size());
  assertEquals("Test message 1",lines.get(0));
  assertEquals("Test message 2",lines.get(1));
  final ModelNode patternFormatterAddress=createPatternFormatterAddress("PATTERN").toModelNode();
  op=SubsystemOperations.createAddOperation(patternFormatterAddress);
  op.get(PatternFormatterResourceDefinition.PATTERN.getName()).set("%K{level}[changed-pattern] %s%n");
  op.get(PatternFormatterResourceDefinition.COLOR_MAP.getName()).set("info:cyan");
  executeOperation(kernelServices,op);
  executeOperation(kernelServices,SubsystemOperations.createWriteAttributeOperation(handlerAddress,FileHandlerResourceDefinition.NAMED_FORMATTER,"PATTERN"));
  op=SubsystemOperations.createReadAttributeOperation(handlerAddress,FileHandlerResourceDefinition.FORMATTER);
  op.get("include-defaults").set(false);
  ModelNode result=executeOperation(kernelServices,op);
  assertFalse("formatter attribute was not undefined after the change to a named-formatter",SubsystemOperations.readResult(result).isDefined());
  logger.log(Level.INFO,"Test message 3");
  logger.log(Level.INFO,"Test message 4");
  lines=FileUtils.readLines(logFile,ENCODING);
  assertEquals("Number of lines logged and found in the file do not match",5,lines.size());
  assertTrue("Line logged does not match expected: 3",Arrays.equals("\033[36m[changed-pattern] Test message 3".getBytes(ENCODING),lines.get(2).getBytes(ENCODING)));
  assertTrue("Line logged does not match expected: 4",Arrays.equals("\033[0m\033[36m[changed-pattern] Test message 4".getBytes(ENCODING),lines.get(3).getBytes(ENCODING)));
  executeOperation(kernelServices,SubsystemOperations.createWriteAttributeOperation(handlerAddress,FileHandlerResourceDefinition.FORMATTER,"%K{level}[changed-formatter] %s%n"));
  op=SubsystemOperations.createReadAttributeOperation(handlerAddress,FileHandlerResourceDefinition.NAMED_FORMATTER);
  op.get("include-defaults").set(false);
  result=executeOperation(kernelServices,op);
  assertFalse("named-formatter attribute was not undefined after the change to a formatter",SubsystemOperations.readResult(result).isDefined());
  logger.log(Level.INFO,"Test message 5");
  logger.log(Level.INFO,"Test message 6");
  lines=FileUtils.readLines(logFile,ENCODING);
  assertEquals("Number of lines logged and found in the file do not match",7,lines.size());
  assertTrue("Line logged does not match expected: 5",Arrays.equals("\033[0m\033[0m[changed-formatter] Test message 5".getBytes(ENCODING),lines.get(4).getBytes(ENCODING)));
  assertTrue("Line logged does not match expected: 6",Arrays.equals("\033[0m\033[0m[changed-formatter] Test message 6".getBytes(ENCODING),lines.get(5).getBytes(ENCODING)));
  op=SubsystemOperations.CompositeOperationBuilder.create().addStep(SubsystemOperations.createRemoveOperation(handlerAddress)).addStep(SubsystemOperations.createRemoveOperation(patternFormatterAddress)).addStep(SubsystemOperations.createRemoveOperation(loggerAddress)).build().getOperation();
  executeOperation(kernelServices,op);
}
