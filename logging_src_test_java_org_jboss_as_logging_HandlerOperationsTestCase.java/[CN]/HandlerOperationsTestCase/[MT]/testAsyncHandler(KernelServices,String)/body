{
  final ModelNode address=createAsyncHandlerAddress(profileName,"async").toModelNode();
  final ModelNode subhandlers=new ModelNode().setEmptyList().add("CONSOLE");
  final ModelNode addOp=OperationBuilder.createAddOperation(address).addAttribute(AsyncHandlerResourceDefinition.QUEUE_LENGTH,10).build();
  executeOperation(kernelServices,addOp);
  final ModelNode consoleAddress=createConsoleHandlerAddress(profileName,"CONSOLE").toModelNode();
  executeOperation(kernelServices,SubsystemOperations.createAddOperation(consoleAddress));
  testWrite(kernelServices,address,CommonAttributes.LEVEL,"INFO");
  testWrite(kernelServices,address,CommonAttributes.ENABLED,true);
  testWrite(kernelServices,address,CommonAttributes.FILTER_SPEC,"deny");
  testWrite(kernelServices,address,AsyncHandlerResourceDefinition.OVERFLOW_ACTION,"BLOCK");
  testWrite(kernelServices,address,AsyncHandlerResourceDefinition.SUBHANDLERS,subhandlers);
  testWrite(kernelServices,address,AsyncHandlerResourceDefinition.QUEUE_LENGTH,20);
  testUndefine(kernelServices,address,CommonAttributes.LEVEL);
  testUndefine(kernelServices,address,CommonAttributes.ENABLED);
  testUndefine(kernelServices,address,CommonAttributes.FILTER_SPEC);
  testUndefine(kernelServices,address,AsyncHandlerResourceDefinition.OVERFLOW_ACTION);
  testUndefine(kernelServices,address,AsyncHandlerResourceDefinition.SUBHANDLERS);
  ModelNode op=OperationBuilder.create(AsyncHandlerResourceDefinition.ADD_HANDLER,address).addAttribute(CommonAttributes.HANDLER_NAME,"CONSOLE").build();
  executeOperation(kernelServices,op);
  final ModelNode readOp=SubsystemOperations.createReadAttributeOperation(address,AsyncHandlerResourceDefinition.SUBHANDLERS);
  ModelNode result=executeOperation(kernelServices,readOp);
  assertEquals(subhandlers,SubsystemOperations.readResult(result));
  op=SubsystemOperations.createOperation(AsyncHandlerResourceDefinition.REMOVE_HANDLER.getName(),address);
  op.get(CommonAttributes.HANDLER_NAME.getName()).set("CONSOLE");
  executeOperation(kernelServices,op);
  result=executeOperation(kernelServices,readOp);
  assertTrue("Subhandler CONSOLE should have been removed: " + result,SubsystemOperations.readResult(result).asList().isEmpty());
  op=SubsystemOperations.createReadResourceOperation(address);
  result=executeOperation(kernelServices,op);
  final ModelNode asyncHandlerResource=SubsystemOperations.readResult(result);
  validateResourceAttributes(asyncHandlerResource,Logging.join(AsyncHandlerResourceDefinition.ATTRIBUTES,CommonAttributes.NAME,CommonAttributes.FILTER));
  assertEquals(asyncHandlerResource.get(CommonAttributes.NAME.getName()).asString(),PathAddress.pathAddress(address).getLastElement().getValue());
  executeOperation(kernelServices,SubsystemOperations.createRemoveOperation(consoleAddress));
  verifyRemoved(kernelServices,consoleAddress);
  executeOperation(kernelServices,SubsystemOperations.createRemoveOperation(address));
  verifyRemoved(kernelServices,address);
}
