{
  final ServerInventory serverInventory=this.serverInventory.getValue();
  final HostControllerImpl controller=new HostControllerImpl(name,hostModel,serverInventory);
  serverInventory.setHostController(controller);
  hostModel.setHostController(controller);
  this.proxyController=new HostControllerProxy(){
    @Override public OperationResult execute(    ExecutionContext executionContext,    ResultHandler handler,    ControllerTransactionContext transaction){
      return controller.execute(executionContext,handler,transaction);
    }
    @Override public ModelNode execute(    ExecutionContext executionContext) throws CancellationException {
      return controller.execute(executionContext);
    }
    @Override public OperationResult execute(    ExecutionContext executionContext,    ResultHandler handler){
      return controller.execute(executionContext,handler);
    }
    @Override public ModelNode execute(    ExecutionContext executionContext,    ControllerTransactionContext transaction){
      return controller.execute(executionContext,transaction);
    }
    @Override public PathAddress getProxyNodeAddress(){
      return PathAddress.pathAddress(PathElement.pathElement("host",name));
    }
    @Override public void startServers(    DomainController domainController){
      controller.startServers(domainController);
    }
    @Override public void stopServers(){
      controller.stopServers();
    }
    @Override public String getName(){
      return name;
    }
    @Override public ModelNode getHostModel(){
      return hostModel.getHostModel();
    }
    @Override public String getServerGroupName(    String serverName){
      return hostModel.getServerGroupName(serverName);
    }
    @Override public ModelNodeRegistration getRegistry(){
      return hostModel.getRegistry();
    }
  }
;
}
