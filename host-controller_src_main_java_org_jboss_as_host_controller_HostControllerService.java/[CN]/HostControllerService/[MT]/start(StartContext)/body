{
  final ServerInventory serverInventory=this.serverInventory.getValue();
  final HostControllerImpl controller=new HostControllerImpl(name,hostModel,serverInventory,repository);
  serverInventory.setHostController(controller);
  this.controller=controller;
  this.proxyController=new ServerStartupTransactionalProxyController(){
    @Override public OperationResult execute(    ExecutionContext executionContext,    ResultHandler handler,    ControllerTransactionContext transaction){
      return controller.execute(executionContext,handler,transaction);
    }
    @Override public ModelNode execute(    ExecutionContext executionContext) throws CancellationException {
      return controller.execute(executionContext);
    }
    @Override public OperationResult execute(    ExecutionContext executionContext,    ResultHandler handler){
      return controller.execute(executionContext,handler);
    }
    @Override public PathAddress getProxyNodeAddress(){
      return PathAddress.pathAddress(PathElement.pathElement("host",name));
    }
    public void startServers(    DomainControllerSlave domainController){
      controller.startServers(domainController);
    }
    public void stopServers(){
      controller.stopServers();
    }
    @Override public String getName(){
      return name;
    }
  }
;
}
